Search.setIndex({"docnames": ["index", "module_list", "sage/combinat/abstract_tree", "sage/combinat/affine_permutation", "sage/combinat/algebraic_combinatorics", "sage/combinat/all", "sage/combinat/alternating_sign_matrix", "sage/combinat/backtrack", "sage/combinat/baxter_permutations", "sage/combinat/bijectionist", "sage/combinat/binary_recurrence_sequences", "sage/combinat/binary_tree", "sage/combinat/blob_algebra", "sage/combinat/cartesian_product", "sage/combinat/catalog_partitions", "sage/combinat/chas/all", "sage/combinat/chas/fsym", "sage/combinat/chas/wqsym", "sage/combinat/cluster_algebra_quiver/all", "sage/combinat/cluster_algebra_quiver/cluster_seed", "sage/combinat/cluster_algebra_quiver/mutation_class", "sage/combinat/cluster_algebra_quiver/mutation_type", "sage/combinat/cluster_algebra_quiver/quiver", "sage/combinat/cluster_algebra_quiver/quiver_mutation_type", "sage/combinat/cluster_complex", "sage/combinat/colored_permutations", "sage/combinat/combinat", "sage/combinat/combinat_cython", "sage/combinat/combination", "sage/combinat/combinatorial_map", "sage/combinat/composition", "sage/combinat/composition_signed", "sage/combinat/composition_tableau", "sage/combinat/constellation", "sage/combinat/core", "sage/combinat/counting", "sage/combinat/crystals/affine", "sage/combinat/crystals/affine_factorization", "sage/combinat/crystals/affinization", "sage/combinat/crystals/alcove_path", "sage/combinat/crystals/all", "sage/combinat/crystals/bkk_crystals", "sage/combinat/crystals/catalog", "sage/combinat/crystals/catalog_elementary_crystals", "sage/combinat/crystals/catalog_infinity_crystals", "sage/combinat/crystals/catalog_kirillov_reshetikhin", "sage/combinat/crystals/crystals", "sage/combinat/crystals/direct_sum", "sage/combinat/crystals/elementary_crystals", "sage/combinat/crystals/fast_crystals", "sage/combinat/crystals/fully_commutative_stable_grothendieck", "sage/combinat/crystals/generalized_young_walls", "sage/combinat/crystals/highest_weight_crystals", "sage/combinat/crystals/induced_structure", "sage/combinat/crystals/infinity_crystals", "sage/combinat/crystals/kac_modules", "sage/combinat/crystals/kirillov_reshetikhin", "sage/combinat/crystals/kyoto_path_model", "sage/combinat/crystals/letters", "sage/combinat/crystals/littelmann_path", "sage/combinat/crystals/monomial_crystals", "sage/combinat/crystals/multisegments", "sage/combinat/crystals/mv_polytopes", "sage/combinat/crystals/pbw_crystal", "sage/combinat/crystals/pbw_datum", "sage/combinat/crystals/polyhedral_realization", "sage/combinat/crystals/spins", "sage/combinat/crystals/star_crystal", "sage/combinat/crystals/tensor_product", "sage/combinat/crystals/tensor_product_element", "sage/combinat/cyclic_sieving_phenomenon", "sage/combinat/debruijn_sequence", "sage/combinat/degree_sequences", "sage/combinat/derangements", "sage/combinat/descent_algebra", "sage/combinat/designs/all", "sage/combinat/designs/bibd", "sage/combinat/designs/block_design", "sage/combinat/designs/covering_array", "sage/combinat/designs/covering_design", "sage/combinat/designs/database", "sage/combinat/designs/design_catalog", "sage/combinat/designs/designs_pyx", "sage/combinat/designs/difference_family", "sage/combinat/designs/difference_matrices", "sage/combinat/designs/evenly_distributed_sets", "sage/combinat/designs/ext_rep", "sage/combinat/designs/gen_quadrangles_with_spread", "sage/combinat/designs/group_divisible_designs", "sage/combinat/designs/incidence_structures", "sage/combinat/designs/latin_squares", "sage/combinat/designs/orthogonal_arrays", "sage/combinat/designs/orthogonal_arrays_build_recursive", "sage/combinat/designs/orthogonal_arrays_find_recursive", "sage/combinat/designs/resolvable_bibd", "sage/combinat/designs/steiner_quadruple_systems", "sage/combinat/designs/subhypergraph_search", "sage/combinat/designs/twographs", "sage/combinat/diagram", "sage/combinat/diagram_algebras", "sage/combinat/dlx", "sage/combinat/dyck_word", "sage/combinat/e_one_star", "sage/combinat/enumerated_sets", "sage/combinat/enumeration_mod_permgroup", "sage/combinat/expnums", "sage/combinat/family", "sage/combinat/fast_vector_partitions", "sage/combinat/finite_state_machine", "sage/combinat/finite_state_machine_generators", "sage/combinat/fqsym", "sage/combinat/free_dendriform_algebra", "sage/combinat/free_module", "sage/combinat/free_prelie_algebra", "sage/combinat/fully_commutative_elements", "sage/combinat/fully_packed_loop", "sage/combinat/gelfand_tsetlin_patterns", "sage/combinat/graph_path", "sage/combinat/gray_codes", "sage/combinat/grossman_larson_algebras", "sage/combinat/growth", "sage/combinat/hall_polynomial", "sage/combinat/hillman_grassl", "sage/combinat/integer_lists/base", "sage/combinat/integer_lists/invlex", "sage/combinat/integer_lists/lists", "sage/combinat/integer_matrices", "sage/combinat/integer_vector", "sage/combinat/integer_vector_weighted", "sage/combinat/integer_vectors_mod_permgroup", "sage/combinat/interval_posets", "sage/combinat/k_tableau", "sage/combinat/kazhdan_lusztig", "sage/combinat/key_polynomial", "sage/combinat/knutson_tao_puzzles", "sage/combinat/matrices/all", "sage/combinat/matrices/dancing_links", "sage/combinat/matrices/dlxcpp", "sage/combinat/matrices/hadamard_matrix", "sage/combinat/matrices/latin", "sage/combinat/misc", "sage/combinat/multiset_partition_into_sets_ordered", "sage/combinat/ncsf_qsym/all", "sage/combinat/ncsf_qsym/combinatorics", "sage/combinat/ncsf_qsym/generic_basis_code", "sage/combinat/ncsf_qsym/ncsf", "sage/combinat/ncsf_qsym/qsym", "sage/combinat/ncsf_qsym/tutorial", "sage/combinat/ncsym/all", "sage/combinat/ncsym/bases", "sage/combinat/ncsym/dual", "sage/combinat/ncsym/ncsym", "sage/combinat/necklace", "sage/combinat/non_decreasing_parking_function", "sage/combinat/nu_dyck_word", "sage/combinat/nu_tamari_lattice", "sage/combinat/ordered_tree", "sage/combinat/output", "sage/combinat/parallelogram_polyomino", "sage/combinat/parking_functions", "sage/combinat/partition", "sage/combinat/partition_algebra", "sage/combinat/partition_kleshchev", "sage/combinat/partition_shifting_algebras", "sage/combinat/partition_tuple", "sage/combinat/partitions", "sage/combinat/path_tableaux/catalog", "sage/combinat/path_tableaux/dyck_path", "sage/combinat/path_tableaux/frieze", "sage/combinat/path_tableaux/path_tableau", "sage/combinat/path_tableaux/semistandard", "sage/combinat/perfect_matching", "sage/combinat/permutation", "sage/combinat/permutation_cython", "sage/combinat/plane_partition", "sage/combinat/posets/all", "sage/combinat/posets/cartesian_product", "sage/combinat/posets/d_complete", "sage/combinat/posets/elements", "sage/combinat/posets/forest", "sage/combinat/posets/hasse_diagram", "sage/combinat/posets/incidence_algebras", "sage/combinat/posets/lattices", "sage/combinat/posets/linear_extensions", "sage/combinat/posets/mobile", "sage/combinat/posets/moebius_algebra", "sage/combinat/posets/poset_examples", "sage/combinat/posets/posets", "sage/combinat/q_analogues", "sage/combinat/q_bernoulli", "sage/combinat/quickref", "sage/combinat/ranker", "sage/combinat/recognizable_series", "sage/combinat/regular_sequence", "sage/combinat/restricted_growth", "sage/combinat/ribbon", "sage/combinat/ribbon_shaped_tableau", "sage/combinat/ribbon_tableau", "sage/combinat/rigged_configurations/all", "sage/combinat/rigged_configurations/bij_abstract_class", "sage/combinat/rigged_configurations/bij_infinity", "sage/combinat/rigged_configurations/bij_type_A", "sage/combinat/rigged_configurations/bij_type_A2_dual", "sage/combinat/rigged_configurations/bij_type_A2_even", "sage/combinat/rigged_configurations/bij_type_A2_odd", "sage/combinat/rigged_configurations/bij_type_B", "sage/combinat/rigged_configurations/bij_type_C", "sage/combinat/rigged_configurations/bij_type_D", "sage/combinat/rigged_configurations/bij_type_D_tri", "sage/combinat/rigged_configurations/bij_type_D_twisted", "sage/combinat/rigged_configurations/bijection", "sage/combinat/rigged_configurations/kleber_tree", "sage/combinat/rigged_configurations/kr_tableaux", "sage/combinat/rigged_configurations/rc_crystal", "sage/combinat/rigged_configurations/rc_infinity", "sage/combinat/rigged_configurations/rigged_configuration_element", "sage/combinat/rigged_configurations/rigged_configurations", "sage/combinat/rigged_configurations/rigged_partition", "sage/combinat/rigged_configurations/tensor_product_kr_tableaux", "sage/combinat/rigged_configurations/tensor_product_kr_tableaux_element", "sage/combinat/root_system/all", "sage/combinat/root_system/ambient_space", "sage/combinat/root_system/associahedron", "sage/combinat/root_system/braid_move_calculator", "sage/combinat/root_system/braid_orbit", "sage/combinat/root_system/branching_rules", "sage/combinat/root_system/cartan_matrix", "sage/combinat/root_system/cartan_type", "sage/combinat/root_system/coxeter_group", "sage/combinat/root_system/coxeter_matrix", "sage/combinat/root_system/coxeter_type", "sage/combinat/root_system/dynkin_diagram", "sage/combinat/root_system/extended_affine_weyl_group", "sage/combinat/root_system/fundamental_group", "sage/combinat/root_system/hecke_algebra_representation", "sage/combinat/root_system/integrable_representations", "sage/combinat/root_system/non_symmetric_macdonald_polynomials", "sage/combinat/root_system/pieri_factors", "sage/combinat/root_system/plot", "sage/combinat/root_system/reflection_group_complex", "sage/combinat/root_system/reflection_group_real", "sage/combinat/root_system/root_lattice_realization_algebras", "sage/combinat/root_system/root_lattice_realizations", "sage/combinat/root_system/root_space", "sage/combinat/root_system/root_system", "sage/combinat/root_system/type_A", "sage/combinat/root_system/type_A_affine", "sage/combinat/root_system/type_A_infinity", "sage/combinat/root_system/type_B", "sage/combinat/root_system/type_BC_affine", "sage/combinat/root_system/type_B_affine", "sage/combinat/root_system/type_C", "sage/combinat/root_system/type_C_affine", "sage/combinat/root_system/type_D", "sage/combinat/root_system/type_D_affine", "sage/combinat/root_system/type_E", "sage/combinat/root_system/type_E_affine", "sage/combinat/root_system/type_F", "sage/combinat/root_system/type_F_affine", "sage/combinat/root_system/type_G", "sage/combinat/root_system/type_G_affine", "sage/combinat/root_system/type_H", "sage/combinat/root_system/type_I", "sage/combinat/root_system/type_Q", "sage/combinat/root_system/type_affine", "sage/combinat/root_system/type_dual", "sage/combinat/root_system/type_folded", "sage/combinat/root_system/type_marked", "sage/combinat/root_system/type_reducible", "sage/combinat/root_system/type_relabel", "sage/combinat/root_system/type_super_A", "sage/combinat/root_system/weight_lattice_realizations", "sage/combinat/root_system/weight_space", "sage/combinat/root_system/weyl_characters", "sage/combinat/root_system/weyl_group", "sage/combinat/rooted_tree", "sage/combinat/rsk", "sage/combinat/schubert_polynomial", "sage/combinat/set_partition", "sage/combinat/set_partition_iterator", "sage/combinat/set_partition_ordered", "sage/combinat/sf/all", "sage/combinat/sf/character", "sage/combinat/sf/classical", "sage/combinat/sf/dual", "sage/combinat/sf/elementary", "sage/combinat/sf/hall_littlewood", "sage/combinat/sf/hecke", "sage/combinat/sf/homogeneous", "sage/combinat/sf/jack", "sage/combinat/sf/k_dual", "sage/combinat/sf/kfpoly", "sage/combinat/sf/llt", "sage/combinat/sf/macdonald", "sage/combinat/sf/monomial", "sage/combinat/sf/multiplicative", "sage/combinat/sf/new_kschur", "sage/combinat/sf/ns_macdonald", "sage/combinat/sf/orthogonal", "sage/combinat/sf/orthotriang", "sage/combinat/sf/powersum", "sage/combinat/sf/schur", "sage/combinat/sf/sf", "sage/combinat/sf/sfa", "sage/combinat/sf/symplectic", "sage/combinat/sf/witt", "sage/combinat/shard_order", "sage/combinat/shifted_primed_tableau", "sage/combinat/shuffle", "sage/combinat/sidon_sets", "sage/combinat/similarity_class_type", "sage/combinat/sine_gordon", "sage/combinat/six_vertex_model", "sage/combinat/skew_partition", "sage/combinat/skew_tableau", "sage/combinat/sloane_functions", "sage/combinat/specht_module", "sage/combinat/species/all", "sage/combinat/species/characteristic_species", "sage/combinat/species/composition_species", "sage/combinat/species/cycle_species", "sage/combinat/species/empty_species", "sage/combinat/species/functorial_composition_species", "sage/combinat/species/generating_series", "sage/combinat/species/library", "sage/combinat/species/linear_order_species", "sage/combinat/species/misc", "sage/combinat/species/partition_species", "sage/combinat/species/permutation_species", "sage/combinat/species/product_species", "sage/combinat/species/recursive_species", "sage/combinat/species/set_species", "sage/combinat/species/species", "sage/combinat/species/structure", "sage/combinat/species/subset_species", "sage/combinat/species/sum_species", "sage/combinat/subset", "sage/combinat/subsets_hereditary", "sage/combinat/subsets_pairwise", "sage/combinat/subword", "sage/combinat/subword_complex", "sage/combinat/super_tableau", "sage/combinat/superpartition", "sage/combinat/symmetric_group_algebra", "sage/combinat/symmetric_group_representations", "sage/combinat/t_sequences", "sage/combinat/tableau", "sage/combinat/tableau_residues", "sage/combinat/tableau_tuple", "sage/combinat/tamari_lattices", "sage/combinat/tiling", "sage/combinat/tools", "sage/combinat/triangles_FHM", "sage/combinat/tuple", "sage/combinat/tutorial", "sage/combinat/vector_partition", "sage/combinat/words/abstract_word", "sage/combinat/words/all", "sage/combinat/words/alphabet", "sage/combinat/words/finite_word", "sage/combinat/words/infinite_word", "sage/combinat/words/lyndon_word", "sage/combinat/words/morphism", "sage/combinat/words/paths", "sage/combinat/words/shuffle_product", "sage/combinat/words/suffix_trees", "sage/combinat/words/word", "sage/combinat/words/word_char", "sage/combinat/words/word_datatypes", "sage/combinat/words/word_generators", "sage/combinat/words/word_infinite_datatypes", "sage/combinat/words/word_options", "sage/combinat/words/words", "sage/combinat/yang_baxter_graph", "sage/rings/cfinite_sequence"], "filenames": ["index.rst", "module_list.rst", "sage/combinat/abstract_tree.rst", "sage/combinat/affine_permutation.rst", "sage/combinat/algebraic_combinatorics.rst", "sage/combinat/all.rst", "sage/combinat/alternating_sign_matrix.rst", "sage/combinat/backtrack.rst", "sage/combinat/baxter_permutations.rst", "sage/combinat/bijectionist.rst", "sage/combinat/binary_recurrence_sequences.rst", "sage/combinat/binary_tree.rst", "sage/combinat/blob_algebra.rst", "sage/combinat/cartesian_product.rst", "sage/combinat/catalog_partitions.rst", "sage/combinat/chas/all.rst", "sage/combinat/chas/fsym.rst", "sage/combinat/chas/wqsym.rst", "sage/combinat/cluster_algebra_quiver/all.rst", "sage/combinat/cluster_algebra_quiver/cluster_seed.rst", "sage/combinat/cluster_algebra_quiver/mutation_class.rst", "sage/combinat/cluster_algebra_quiver/mutation_type.rst", "sage/combinat/cluster_algebra_quiver/quiver.rst", "sage/combinat/cluster_algebra_quiver/quiver_mutation_type.rst", "sage/combinat/cluster_complex.rst", "sage/combinat/colored_permutations.rst", "sage/combinat/combinat.rst", "sage/combinat/combinat_cython.rst", "sage/combinat/combination.rst", "sage/combinat/combinatorial_map.rst", "sage/combinat/composition.rst", "sage/combinat/composition_signed.rst", "sage/combinat/composition_tableau.rst", "sage/combinat/constellation.rst", "sage/combinat/core.rst", "sage/combinat/counting.rst", "sage/combinat/crystals/affine.rst", "sage/combinat/crystals/affine_factorization.rst", "sage/combinat/crystals/affinization.rst", "sage/combinat/crystals/alcove_path.rst", "sage/combinat/crystals/all.rst", "sage/combinat/crystals/bkk_crystals.rst", "sage/combinat/crystals/catalog.rst", "sage/combinat/crystals/catalog_elementary_crystals.rst", "sage/combinat/crystals/catalog_infinity_crystals.rst", "sage/combinat/crystals/catalog_kirillov_reshetikhin.rst", "sage/combinat/crystals/crystals.rst", "sage/combinat/crystals/direct_sum.rst", "sage/combinat/crystals/elementary_crystals.rst", "sage/combinat/crystals/fast_crystals.rst", "sage/combinat/crystals/fully_commutative_stable_grothendieck.rst", "sage/combinat/crystals/generalized_young_walls.rst", "sage/combinat/crystals/highest_weight_crystals.rst", "sage/combinat/crystals/induced_structure.rst", "sage/combinat/crystals/infinity_crystals.rst", "sage/combinat/crystals/kac_modules.rst", "sage/combinat/crystals/kirillov_reshetikhin.rst", "sage/combinat/crystals/kyoto_path_model.rst", "sage/combinat/crystals/letters.rst", "sage/combinat/crystals/littelmann_path.rst", "sage/combinat/crystals/monomial_crystals.rst", "sage/combinat/crystals/multisegments.rst", "sage/combinat/crystals/mv_polytopes.rst", "sage/combinat/crystals/pbw_crystal.rst", "sage/combinat/crystals/pbw_datum.rst", "sage/combinat/crystals/polyhedral_realization.rst", "sage/combinat/crystals/spins.rst", "sage/combinat/crystals/star_crystal.rst", "sage/combinat/crystals/tensor_product.rst", "sage/combinat/crystals/tensor_product_element.rst", "sage/combinat/cyclic_sieving_phenomenon.rst", "sage/combinat/debruijn_sequence.rst", "sage/combinat/degree_sequences.rst", "sage/combinat/derangements.rst", "sage/combinat/descent_algebra.rst", "sage/combinat/designs/all.rst", "sage/combinat/designs/bibd.rst", "sage/combinat/designs/block_design.rst", "sage/combinat/designs/covering_array.rst", "sage/combinat/designs/covering_design.rst", "sage/combinat/designs/database.rst", "sage/combinat/designs/design_catalog.rst", "sage/combinat/designs/designs_pyx.rst", "sage/combinat/designs/difference_family.rst", "sage/combinat/designs/difference_matrices.rst", "sage/combinat/designs/evenly_distributed_sets.rst", "sage/combinat/designs/ext_rep.rst", "sage/combinat/designs/gen_quadrangles_with_spread.rst", "sage/combinat/designs/group_divisible_designs.rst", "sage/combinat/designs/incidence_structures.rst", "sage/combinat/designs/latin_squares.rst", "sage/combinat/designs/orthogonal_arrays.rst", "sage/combinat/designs/orthogonal_arrays_build_recursive.rst", "sage/combinat/designs/orthogonal_arrays_find_recursive.rst", "sage/combinat/designs/resolvable_bibd.rst", "sage/combinat/designs/steiner_quadruple_systems.rst", "sage/combinat/designs/subhypergraph_search.rst", "sage/combinat/designs/twographs.rst", "sage/combinat/diagram.rst", "sage/combinat/diagram_algebras.rst", "sage/combinat/dlx.rst", "sage/combinat/dyck_word.rst", "sage/combinat/e_one_star.rst", "sage/combinat/enumerated_sets.rst", "sage/combinat/enumeration_mod_permgroup.rst", "sage/combinat/expnums.rst", "sage/combinat/family.rst", "sage/combinat/fast_vector_partitions.rst", "sage/combinat/finite_state_machine.rst", "sage/combinat/finite_state_machine_generators.rst", "sage/combinat/fqsym.rst", "sage/combinat/free_dendriform_algebra.rst", "sage/combinat/free_module.rst", "sage/combinat/free_prelie_algebra.rst", "sage/combinat/fully_commutative_elements.rst", "sage/combinat/fully_packed_loop.rst", "sage/combinat/gelfand_tsetlin_patterns.rst", "sage/combinat/graph_path.rst", "sage/combinat/gray_codes.rst", "sage/combinat/grossman_larson_algebras.rst", "sage/combinat/growth.rst", "sage/combinat/hall_polynomial.rst", "sage/combinat/hillman_grassl.rst", "sage/combinat/integer_lists/base.rst", "sage/combinat/integer_lists/invlex.rst", "sage/combinat/integer_lists/lists.rst", "sage/combinat/integer_matrices.rst", "sage/combinat/integer_vector.rst", "sage/combinat/integer_vector_weighted.rst", "sage/combinat/integer_vectors_mod_permgroup.rst", "sage/combinat/interval_posets.rst", "sage/combinat/k_tableau.rst", "sage/combinat/kazhdan_lusztig.rst", "sage/combinat/key_polynomial.rst", "sage/combinat/knutson_tao_puzzles.rst", "sage/combinat/matrices/all.rst", "sage/combinat/matrices/dancing_links.rst", "sage/combinat/matrices/dlxcpp.rst", "sage/combinat/matrices/hadamard_matrix.rst", "sage/combinat/matrices/latin.rst", "sage/combinat/misc.rst", "sage/combinat/multiset_partition_into_sets_ordered.rst", "sage/combinat/ncsf_qsym/all.rst", "sage/combinat/ncsf_qsym/combinatorics.rst", "sage/combinat/ncsf_qsym/generic_basis_code.rst", "sage/combinat/ncsf_qsym/ncsf.rst", "sage/combinat/ncsf_qsym/qsym.rst", "sage/combinat/ncsf_qsym/tutorial.rst", "sage/combinat/ncsym/all.rst", "sage/combinat/ncsym/bases.rst", "sage/combinat/ncsym/dual.rst", "sage/combinat/ncsym/ncsym.rst", "sage/combinat/necklace.rst", "sage/combinat/non_decreasing_parking_function.rst", "sage/combinat/nu_dyck_word.rst", "sage/combinat/nu_tamari_lattice.rst", "sage/combinat/ordered_tree.rst", "sage/combinat/output.rst", "sage/combinat/parallelogram_polyomino.rst", "sage/combinat/parking_functions.rst", "sage/combinat/partition.rst", "sage/combinat/partition_algebra.rst", "sage/combinat/partition_kleshchev.rst", "sage/combinat/partition_shifting_algebras.rst", "sage/combinat/partition_tuple.rst", "sage/combinat/partitions.rst", "sage/combinat/path_tableaux/catalog.rst", "sage/combinat/path_tableaux/dyck_path.rst", "sage/combinat/path_tableaux/frieze.rst", "sage/combinat/path_tableaux/path_tableau.rst", "sage/combinat/path_tableaux/semistandard.rst", "sage/combinat/perfect_matching.rst", "sage/combinat/permutation.rst", "sage/combinat/permutation_cython.rst", "sage/combinat/plane_partition.rst", "sage/combinat/posets/all.rst", "sage/combinat/posets/cartesian_product.rst", "sage/combinat/posets/d_complete.rst", "sage/combinat/posets/elements.rst", "sage/combinat/posets/forest.rst", "sage/combinat/posets/hasse_diagram.rst", "sage/combinat/posets/incidence_algebras.rst", "sage/combinat/posets/lattices.rst", "sage/combinat/posets/linear_extensions.rst", "sage/combinat/posets/mobile.rst", "sage/combinat/posets/moebius_algebra.rst", "sage/combinat/posets/poset_examples.rst", "sage/combinat/posets/posets.rst", "sage/combinat/q_analogues.rst", "sage/combinat/q_bernoulli.rst", "sage/combinat/quickref.rst", "sage/combinat/ranker.rst", "sage/combinat/recognizable_series.rst", "sage/combinat/regular_sequence.rst", "sage/combinat/restricted_growth.rst", "sage/combinat/ribbon.rst", "sage/combinat/ribbon_shaped_tableau.rst", "sage/combinat/ribbon_tableau.rst", "sage/combinat/rigged_configurations/all.rst", "sage/combinat/rigged_configurations/bij_abstract_class.rst", "sage/combinat/rigged_configurations/bij_infinity.rst", "sage/combinat/rigged_configurations/bij_type_A.rst", "sage/combinat/rigged_configurations/bij_type_A2_dual.rst", "sage/combinat/rigged_configurations/bij_type_A2_even.rst", "sage/combinat/rigged_configurations/bij_type_A2_odd.rst", "sage/combinat/rigged_configurations/bij_type_B.rst", "sage/combinat/rigged_configurations/bij_type_C.rst", "sage/combinat/rigged_configurations/bij_type_D.rst", "sage/combinat/rigged_configurations/bij_type_D_tri.rst", "sage/combinat/rigged_configurations/bij_type_D_twisted.rst", "sage/combinat/rigged_configurations/bijection.rst", "sage/combinat/rigged_configurations/kleber_tree.rst", "sage/combinat/rigged_configurations/kr_tableaux.rst", "sage/combinat/rigged_configurations/rc_crystal.rst", "sage/combinat/rigged_configurations/rc_infinity.rst", "sage/combinat/rigged_configurations/rigged_configuration_element.rst", "sage/combinat/rigged_configurations/rigged_configurations.rst", "sage/combinat/rigged_configurations/rigged_partition.rst", "sage/combinat/rigged_configurations/tensor_product_kr_tableaux.rst", "sage/combinat/rigged_configurations/tensor_product_kr_tableaux_element.rst", "sage/combinat/root_system/all.rst", "sage/combinat/root_system/ambient_space.rst", "sage/combinat/root_system/associahedron.rst", "sage/combinat/root_system/braid_move_calculator.rst", "sage/combinat/root_system/braid_orbit.rst", "sage/combinat/root_system/branching_rules.rst", "sage/combinat/root_system/cartan_matrix.rst", "sage/combinat/root_system/cartan_type.rst", "sage/combinat/root_system/coxeter_group.rst", "sage/combinat/root_system/coxeter_matrix.rst", "sage/combinat/root_system/coxeter_type.rst", "sage/combinat/root_system/dynkin_diagram.rst", "sage/combinat/root_system/extended_affine_weyl_group.rst", "sage/combinat/root_system/fundamental_group.rst", "sage/combinat/root_system/hecke_algebra_representation.rst", "sage/combinat/root_system/integrable_representations.rst", "sage/combinat/root_system/non_symmetric_macdonald_polynomials.rst", "sage/combinat/root_system/pieri_factors.rst", "sage/combinat/root_system/plot.rst", "sage/combinat/root_system/reflection_group_complex.rst", "sage/combinat/root_system/reflection_group_real.rst", "sage/combinat/root_system/root_lattice_realization_algebras.rst", "sage/combinat/root_system/root_lattice_realizations.rst", "sage/combinat/root_system/root_space.rst", "sage/combinat/root_system/root_system.rst", "sage/combinat/root_system/type_A.rst", "sage/combinat/root_system/type_A_affine.rst", "sage/combinat/root_system/type_A_infinity.rst", "sage/combinat/root_system/type_B.rst", "sage/combinat/root_system/type_BC_affine.rst", "sage/combinat/root_system/type_B_affine.rst", "sage/combinat/root_system/type_C.rst", "sage/combinat/root_system/type_C_affine.rst", "sage/combinat/root_system/type_D.rst", "sage/combinat/root_system/type_D_affine.rst", "sage/combinat/root_system/type_E.rst", "sage/combinat/root_system/type_E_affine.rst", "sage/combinat/root_system/type_F.rst", "sage/combinat/root_system/type_F_affine.rst", "sage/combinat/root_system/type_G.rst", "sage/combinat/root_system/type_G_affine.rst", "sage/combinat/root_system/type_H.rst", "sage/combinat/root_system/type_I.rst", "sage/combinat/root_system/type_Q.rst", "sage/combinat/root_system/type_affine.rst", "sage/combinat/root_system/type_dual.rst", "sage/combinat/root_system/type_folded.rst", "sage/combinat/root_system/type_marked.rst", "sage/combinat/root_system/type_reducible.rst", "sage/combinat/root_system/type_relabel.rst", "sage/combinat/root_system/type_super_A.rst", "sage/combinat/root_system/weight_lattice_realizations.rst", "sage/combinat/root_system/weight_space.rst", "sage/combinat/root_system/weyl_characters.rst", "sage/combinat/root_system/weyl_group.rst", "sage/combinat/rooted_tree.rst", "sage/combinat/rsk.rst", "sage/combinat/schubert_polynomial.rst", "sage/combinat/set_partition.rst", "sage/combinat/set_partition_iterator.rst", "sage/combinat/set_partition_ordered.rst", "sage/combinat/sf/all.rst", "sage/combinat/sf/character.rst", "sage/combinat/sf/classical.rst", "sage/combinat/sf/dual.rst", "sage/combinat/sf/elementary.rst", "sage/combinat/sf/hall_littlewood.rst", "sage/combinat/sf/hecke.rst", "sage/combinat/sf/homogeneous.rst", "sage/combinat/sf/jack.rst", "sage/combinat/sf/k_dual.rst", "sage/combinat/sf/kfpoly.rst", "sage/combinat/sf/llt.rst", "sage/combinat/sf/macdonald.rst", "sage/combinat/sf/monomial.rst", "sage/combinat/sf/multiplicative.rst", "sage/combinat/sf/new_kschur.rst", "sage/combinat/sf/ns_macdonald.rst", "sage/combinat/sf/orthogonal.rst", "sage/combinat/sf/orthotriang.rst", "sage/combinat/sf/powersum.rst", "sage/combinat/sf/schur.rst", "sage/combinat/sf/sf.rst", "sage/combinat/sf/sfa.rst", "sage/combinat/sf/symplectic.rst", "sage/combinat/sf/witt.rst", "sage/combinat/shard_order.rst", "sage/combinat/shifted_primed_tableau.rst", "sage/combinat/shuffle.rst", "sage/combinat/sidon_sets.rst", "sage/combinat/similarity_class_type.rst", "sage/combinat/sine_gordon.rst", "sage/combinat/six_vertex_model.rst", "sage/combinat/skew_partition.rst", "sage/combinat/skew_tableau.rst", "sage/combinat/sloane_functions.rst", "sage/combinat/specht_module.rst", "sage/combinat/species/all.rst", "sage/combinat/species/characteristic_species.rst", "sage/combinat/species/composition_species.rst", "sage/combinat/species/cycle_species.rst", "sage/combinat/species/empty_species.rst", "sage/combinat/species/functorial_composition_species.rst", "sage/combinat/species/generating_series.rst", "sage/combinat/species/library.rst", "sage/combinat/species/linear_order_species.rst", "sage/combinat/species/misc.rst", "sage/combinat/species/partition_species.rst", "sage/combinat/species/permutation_species.rst", "sage/combinat/species/product_species.rst", "sage/combinat/species/recursive_species.rst", "sage/combinat/species/set_species.rst", "sage/combinat/species/species.rst", "sage/combinat/species/structure.rst", "sage/combinat/species/subset_species.rst", "sage/combinat/species/sum_species.rst", "sage/combinat/subset.rst", "sage/combinat/subsets_hereditary.rst", "sage/combinat/subsets_pairwise.rst", "sage/combinat/subword.rst", "sage/combinat/subword_complex.rst", "sage/combinat/super_tableau.rst", "sage/combinat/superpartition.rst", "sage/combinat/symmetric_group_algebra.rst", "sage/combinat/symmetric_group_representations.rst", "sage/combinat/t_sequences.rst", "sage/combinat/tableau.rst", "sage/combinat/tableau_residues.rst", "sage/combinat/tableau_tuple.rst", "sage/combinat/tamari_lattices.rst", "sage/combinat/tiling.rst", "sage/combinat/tools.rst", "sage/combinat/triangles_FHM.rst", "sage/combinat/tuple.rst", "sage/combinat/tutorial.rst", "sage/combinat/vector_partition.rst", "sage/combinat/words/abstract_word.rst", "sage/combinat/words/all.rst", "sage/combinat/words/alphabet.rst", "sage/combinat/words/finite_word.rst", "sage/combinat/words/infinite_word.rst", "sage/combinat/words/lyndon_word.rst", "sage/combinat/words/morphism.rst", "sage/combinat/words/paths.rst", "sage/combinat/words/shuffle_product.rst", "sage/combinat/words/suffix_trees.rst", "sage/combinat/words/word.rst", "sage/combinat/words/word_char.rst", "sage/combinat/words/word_datatypes.rst", "sage/combinat/words/word_generators.rst", "sage/combinat/words/word_infinite_datatypes.rst", "sage/combinat/words/word_options.rst", "sage/combinat/words/words.rst", "sage/combinat/yang_baxter_graph.rst", "sage/rings/cfinite_sequence.rst"], "titles": ["Combinatorics", "Comprehensive Module List", "Abstract Recursive Trees", "Affine Permutations", "Algebraic combinatorics", "Combinatorics", "Alternating Sign Matrices", "Backtracking", "Baxter permutations", "A bijectionist\u2019s toolkit", "Binary Recurrence Sequences", "Binary Trees", "Blob Algebras", "Cartesian Products", "Enumerated sets of partitions, tableaux, \u2026", "Combinatorial Hopf algebras", "Poirier-Reutenauer Hopf algebra of standard tableaux", "Word Quasi-symmetric functions", "Cluster algebras and quivers", "ClusterSeed", "mutation_class", "Helper functions for mutation types of quivers", "Quiver", "Quiver mutation types", "Cluster complex (or generalized dual associahedron)", "Colored Permutations", "Combinatorial Functions", "Fast computation of combinatorial functions (Cython + mpz)", "Combinations", "Combinatorial maps", "Integer compositions", "Signed Compositions", "Composition Tableaux", "Constellations", "Cores", "Counting", "Affine Crystals", "Affine factorization crystal of type <span class=\"math notranslate nohighlight\">\\(A\\)</span>", "Affinization Crystals", "Alcove paths", "Crystals", "Benkart-Kang-Kashiwara crystals for the general-linear Lie superalgebra", "Catalog Of Crystals", "Catalog Of Elementary Crystals", "Catalog Of Crystal Models For <span class=\"math notranslate nohighlight\">\\(B(\\infty)\\)</span>", "Catalog Of Crystal Models For Kirillov-Reshetikhin Crystals", "An introduction to crystals", "Direct Sum of Crystals", "Elementary Crystals", "Fast Rank Two Crystals", "Fully commutative stable Grothendieck crystal", "Crystals of Generalized Young Walls", "Highest weight crystals", "Induced Crystals", "<span class=\"math notranslate nohighlight\">\\(\\mathcal{B}(\\infty)\\)</span> Crystals of Tableaux in Nonexceptional Types and <span class=\"math notranslate nohighlight\">\\(G_2\\)</span>", "Crystals of Kac modules of the general-linear Lie superalgebra", "Kirillov-Reshetikhin Crystals", "Kyoto Path Model for Affine Highest Weight Crystals", "Crystals of letters", "Littelmann paths", "Crystals of Modified Nakajima Monomials", "Crystal of Bernstein-Zelevinsky Multisegments", "Crystal Of Mirkovi\u0107-Vilonen (MV) Polytopes", "<span class=\"math notranslate nohighlight\">\\(\\mathcal{B}(\\infty)\\)</span> Crystal Of PBW Monomials", "PBW Data", "Polyhedral Realization of <span class=\"math notranslate nohighlight\">\\(B(\\infty)\\)</span>", "Spin Crystals", "Star-Crystal Structure On <span class=\"math notranslate nohighlight\">\\(B(\\infty)\\)</span>", "Tensor Products of Crystals", "Tensor Products of Crystal Elements", "Cyclic sieving phenomenon", "De Bruijn sequences", "Degree sequences", "Derangements", "Descent Algebras", "Combinatorial designs and incidence structures", "Balanced Incomplete Block Designs (BIBD)", "Block designs", "Covering Arrays (CA)", "Covering designs: coverings of <span class=\"math notranslate nohighlight\">\\(t\\)</span>-element subsets of a <span class=\"math notranslate nohighlight\">\\(v\\)</span>-set by <span class=\"math notranslate nohighlight\">\\(k\\)</span>-sets", "Database of small combinatorial designs", "Catalog of designs", "Cython functions for combinatorial designs", "Difference families", "Difference Matrices", "Evenly distributed sets in finite fields", "External Representations of Block Designs", "Database of generalised quadrangles with spread", "Group-Divisible Designs (GDD)", "Incidence structures (i.e. hypergraphs, i.e. set systems)", "Mutually Orthogonal Latin Squares (MOLS)", "Orthogonal arrays (OA)", "Orthogonal arrays (build recursive constructions)", "Orthogonal arrays (find recursive constructions)", "Resolvable Balanced Incomplete Block Design (RBIBD)", "Steiner Quadruple Systems", "Hypergraph isomorphic copy search", "Two-graphs", "Combinatorial diagrams", "Diagram and Partition Algebras", "Exact Cover Problem via Dancing Links", "Dyck Words", "Substitutions over unit cube faces (Rauzy fractals)", "Enumerated sets and combinatorial objects", "Tools for enumeration modulo the action of a permutation group", "Compute Bell and Uppuluri-Carpenter numbers", "Families", "Brent Yorgey\u2019s fast algorithm for integer vector (multiset) partitions.", "Finite state machines, automata, transducers", "Common Automata and Transducers (Finite State Machines Generators)", "Free Quasi-symmetric functions", "Free Dendriform Algebras", "Free modules", "Free Pre-Lie Algebras", "Fully commutative elements of Coxeter groups", "Fully packed loops", "Gelfand-Tsetlin Patterns", "Paths in Directed Acyclic Graphs", "Gray codes", "Grossman-Larson Hopf Algebras", "Growth diagrams and dual graded graphs", "Hall Polynomials", "The Hillman-Grassl correspondence", "Enumerated set of lists of integers with constraints: base classes", "Enumerated set of lists of integers with constraints, in inverse lexicographic order", "Enumerated set of lists of integers with constraints: front-end", "Counting, generating, and manipulating non-negative integer matrices", "(Non-negative) Integer vectors", "Weighted Integer Vectors", "Integer vectors modulo the action of a permutation group", "Tamari Interval-posets", "Strong and weak tableaux", "Kazhdan-Lusztig Polynomials", "Key polynomials", "Knutson-Tao Puzzles", "Combinatorics on matrices", "Dancing Links internal pyx code", "Dancing links C++ wrapper", "Hadamard matrices", "Latin Squares", "Miscellaneous", "Ordered Multiset Partitions into Sets and the Minimaj Crystal", "Non-commutative symmetric functions and quasi-symmetric functions", "Common combinatorial tools", "Generic code for bases", "Non-Commutative Symmetric Functions", "Quasisymmetric functions", "Introduction to Quasisymmetric Functions", "Symmetric functions in non-commuting variables", "Bases for <span class=\"math notranslate nohighlight\">\\(NCSym\\)</span>", "Dual Symmetric Functions in Non-Commuting Variables", "Symmetric Functions in Non-Commuting Variables", "Necklaces", "Non-Decreasing Parking Functions", "<span class=\"math notranslate nohighlight\">\\(\\nu\\)</span>-Dyck Words", "<span class=\"math notranslate nohighlight\">\\(\\nu\\)</span>-Tamari lattice", "Ordered Rooted Trees", "Output functions", "Parallelogram Polyominoes", "Parking Functions", "Integer partitions", "Partition/Diagram Algebras", "Kleshchev partitions", "Partition Shifting Algebras", "Partition tuples", "Iterators over the partitions of an integer", "Catalog of Path Tableaux", "Dyck Paths", "Frieze Patterns", "Path Tableaux", "Semistandard Tableaux", "Perfect matchings", "Permutations", "Permutations (Cython file)", "Plane Partitions", "Posets", "Cartesian products of Posets", "D-Complete Posets", "Elements of posets, lattices, semilattices, etc.", "Forest Posets", "Hasse diagrams of posets", "Incidence Algebras", "Finite lattices and semilattices", "Linear Extensions of Posets", "Mobile posets", "M\u00f6bius Algebras", "Catalog of posets and lattices", "Finite posets", "<span class=\"math notranslate nohighlight\">\\(q\\)</span>-Analogues", "<span class=\"math notranslate nohighlight\">\\(q\\)</span>-Bernoulli Numbers and Polynomials", "Combinatorics quickref", "Rankers", "Recognizable Series", "<span class=\"math notranslate nohighlight\">\\(k\\)</span>-regular sequences", "Restricted growth arrays", "Ribbons", "Ribbon Shaped Tableaux", "Ribbon Tableaux", "Rigged configurations", "Abstract classes for the rigged configuration bijections", "Bijection between rigged configurations for <span class=\"math notranslate nohighlight\">\\(B(\\infty)\\)</span> and marginally large tableaux", "Bijection classes for type <span class=\"math notranslate nohighlight\">\\(A_n^{(1)}\\)</span>", "Bijection classes for type <span class=\"math notranslate nohighlight\">\\(A_{2n}^{(2)\\dagger}\\)</span>", "Bijection classes for type <span class=\"math notranslate nohighlight\">\\(A_{2n}^{(2)}\\)</span>", "Bijection classes for type <span class=\"math notranslate nohighlight\">\\(A_{2n-1}^{(2)}\\)</span>.", "Bijection classes for type <span class=\"math notranslate nohighlight\">\\(B_n^{(1)}\\)</span>", "Bijection classes for type <span class=\"math notranslate nohighlight\">\\(C_n^{(1)}\\)</span>", "Bijection classes for type <span class=\"math notranslate nohighlight\">\\(D_n^{(1)}\\)</span>", "Bijection classes for type <span class=\"math notranslate nohighlight\">\\(D_4^{(3)}\\)</span>", "Bijection classes for type <span class=\"math notranslate nohighlight\">\\(D_{n+1}^{(2)}\\)</span>", "Bijection between rigged configurations and KR tableaux", "Kleber Trees", "Kirillov-Reshetikhin Tableaux", "Crystal of Rigged Configurations", "Rigged Configurations of <span class=\"math notranslate nohighlight\">\\(\\mathcal{B}(\\infty)\\)</span>", "Rigged Configuration Elements", "Rigged Configurations", "Rigged Partitions", "Tensor Product of Kirillov-Reshetikhin Tableaux", "Tensor Product of Kirillov-Reshetikhin Tableaux Elements", "Root Systems", "Ambient lattices and ambient spaces", "Associahedron", "Braid Move Calculator", "Braid Orbit", "Branching Rules", "Cartan matrices", "Cartan types", "Coxeter Groups", "Coxeter Matrices", "Coxeter Types", "Dynkin diagrams", "Extended Affine Weyl Groups", "Fundamental Group of an Extended Affine Weyl Group", "Hecke algebra representations", "Integrable Representations of Affine Lie Algebras", "Nonsymmetric Macdonald polynomials", "Pieri Factors", "Tutorial: visualizing root systems", "Finite complex reflection groups", "Finite real reflection groups", "Group algebras of root lattice realizations", "Root lattice realizations", "Root lattices and root spaces", "Root systems", "Root system data for type A", "Root system data for (untwisted) type A affine", "Root system data for type A infinity", "Root system data for type B", "Root system data for type BC affine", "Root system data for (untwisted) type B affine", "Root system data for type C", "Root system data for (untwisted) type C affine", "Root system data for type D", "Root system data for (untwisted) type D affine", "Root system data for type E", "Root system data for (untwisted) type E affine", "Root system data for type F", "Root system data for (untwisted) type F affine", "Root system data for type G", "Root system data for (untwisted) type G affine", "Root system data for type H", "Root system data for type I", "Root system data for type Q", "Root system data for affine Cartan types", "Root system data for dual Cartan types", "Root system data for folded Cartan types", "Root system data for Cartan types with marked nodes", "Root system data for reducible Cartan types", "Root system data for relabelled Cartan types", "Root system data for super type A", "Weight lattice realizations", "Weight lattices and weight spaces", "Weyl Character Rings", "Weyl Groups", "Rooted (Unordered) Trees", "Robinson-Schensted-Knuth correspondence", "Schubert Polynomials", "Set Partitions", "Fast set partition iterators", "Ordered Set Partitions", "Symmetric Functions", "Characters of the symmetric group as bases of the symmetric functions", "Classical symmetric functions", "Generic dual bases symmetric functions", "Elementary symmetric functions", "Hall-Littlewood Polynomials", "Hecke Character Basis", "Homogeneous symmetric functions", "Jack Symmetric Functions", "Quotient of symmetric function space by ideal generated by Hall-Littlewood symmetric functions", "Kostka-Foulkes Polynomials", "LLT symmetric functions", "Macdonald Polynomials", "Monomial symmetric functions", "Multiplicative symmetric functions", "<span class=\"math notranslate nohighlight\">\\(k\\)</span>-Schur Functions", "Non-symmetric Macdonald Polynomials", "Orthogonal Symmetric Functions", "Symmetric functions defined by orthogonality and triangularity", "Power sum symmetric functions", "Schur symmetric functions", "Symmetric functions, with their multiple realizations", "Symmetric Functions", "Symplectic Symmetric Functions", "Witt symmetric functions", "Shard intersection order", "Shifted primed tableaux", "Shuffle product of iterables", "Sidon sets and their generalizations, Sidon <span class=\"math notranslate nohighlight\">\\(g\\)</span>-sets", "Similarity class types of matrices with entries in a finite field", "sine-Gordon Y-system plotter", "Six Vertex Model", "Skew Partitions", "Skew Tableaux", "Functions that compute some of the sequences in Sloane\u2019s tables", "Specht Modules", "Combinatorial species", "Characteristic Species", "Composition species", "Cycle Species", "Empty Species", "Functorial composition species", "Generating Series", "Examples of Combinatorial Species", "Linear-order Species", "Miscellaneous Functions", "Partition Species", "Permutation species", "Product species", "Recursive Species", "Set Species", "Combinatorial Species", "Species structures", "Subset Species", "Sum species", "Subsets", "Subsets satisfying a hereditary property", "Subsets whose elements satisfy a predicate pairwise", "Subwords", "Subword complex", "Super Tableaux", "Super Partitions", "Symmetric Group Algebra", "Representations of the Symmetric Group", "T-sequences", "Tableaux", "Residue sequences of tableaux", "TableauTuples", "Generalized Tamari lattices", "Tiling Solver", "Transitive ideal closure tool", "Combinatorial triangles for posets and fans", "Tuples", "Introduction to combinatorics in Sage", "Vector Partitions", "Abstract word (finite or infinite)", "Combinatorics on words", "Alphabet", "Finite word", "Infinite word", "Lyndon words", "Word morphisms/substitutions", "Word paths", "Shuffle product of words", "Suffix Tries and Suffix Trees", "Word classes", "Fast word datatype using an array of unsigned char", "Datatypes for finite words", "Common words", "Datatypes for words defined by iterators and callables", "User-customizable options for words", "Set of words", "Yang-Baxter Graphs", "C-Finite Sequences"], "terms": {"quickref": [0, 1, 5], "introduct": [0, 1, 5, 40, 130, 142, 146, 148, 193, 220, 227, 273, 281, 302, 350], "sage": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374], "algebra": [0, 1, 5, 7, 17, 19, 20, 21, 22, 23, 24, 38, 46, 56, 57, 65, 66, 67, 69, 103, 108, 110, 112, 121, 130, 133, 141, 143, 144, 145, 146, 149, 150, 151, 160, 162, 164, 171, 172, 175, 182, 187, 190, 211, 212, 216, 218, 220, 221, 225, 227, 232, 236, 238, 239, 242, 244, 271, 273, 275, 276, 277, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 310, 315, 316, 332, 336, 347, 348, 354, 361, 362, 369], "combinatori": [0, 1, 3, 5, 6, 8, 9, 11, 16, 19, 22, 28, 30, 35, 46, 58, 66, 70, 71, 76, 79, 83, 90, 91, 92, 93, 101, 112, 113, 116, 117, 119, 124, 127, 130, 131, 139, 146, 147, 150, 153, 159, 160, 161, 164, 171, 172, 185, 186, 190, 194, 211, 216, 236, 237, 238, 241, 280, 292, 297, 303, 305, 306, 307, 310, 323, 330, 336, 342, 348, 359, 360, 361, 363, 366, 372], "hopf": [0, 1, 5, 17, 110, 113, 141, 144, 145, 146, 149, 150, 151, 190, 276, 284, 285, 288, 290, 298, 300, 301, 302, 303, 304, 305, 343], "cluster": [0, 1, 4, 5, 19, 20, 21, 22, 23, 222, 242], "quiver": [0, 1, 4, 5, 19, 20, 347], "crystal": [0, 1, 4, 5, 39, 59, 64, 65, 133, 162, 164, 169, 190, 198, 199, 200, 201, 205, 207, 209, 211, 212, 214, 215, 216, 218, 219, 220, 227, 231, 236, 238, 242, 266, 273, 276, 307, 346, 348], "root": [0, 1, 2, 3, 4, 5, 7, 10, 11, 19, 23, 24, 25, 34, 38, 39, 40, 46, 47, 48, 49, 51, 54, 55, 57, 59, 60, 61, 62, 63, 68, 83, 86, 91, 103, 108, 111, 113, 119, 120, 129, 130, 158, 159, 160, 164, 172, 177, 188, 190, 199, 211, 213, 214, 216, 221, 222, 225, 226, 227, 228, 231, 232, 233, 234, 235, 236, 237, 239, 240, 271, 272, 273, 274, 296, 300, 302, 303, 315, 323, 338, 340, 347, 354, 362, 365, 373, 374], "system": [0, 1, 4, 5, 22, 39, 40, 47, 48, 57, 59, 61, 62, 68, 75, 76, 77, 81, 94, 97, 104, 108, 114, 116, 120, 121, 129, 136, 158, 160, 190, 213, 214, 221, 225, 226, 227, 229, 231, 232, 234, 235, 236, 239, 240, 241, 242, 243, 271, 272, 273, 274, 312, 332, 336, 340, 350, 351, 354], "symmetr": [0, 1, 3, 5, 11, 15, 16, 19, 23, 25, 26, 33, 34, 50, 69, 74, 76, 80, 92, 99, 101, 113, 120, 126, 129, 130, 138, 143, 144, 146, 149, 156, 160, 162, 163, 164, 171, 172, 174, 186, 187, 188, 190, 225, 226, 227, 229, 231, 232, 236, 237, 238, 241, 242, 243, 244, 270, 271, 273, 274, 277, 286, 287, 293, 296, 314, 315, 316, 318, 323, 325, 331, 332, 338, 342, 345, 346, 347, 348, 359, 362], "function": [0, 1, 2, 3, 5, 6, 7, 9, 10, 11, 15, 16, 19, 20, 22, 24, 29, 35, 36, 46, 49, 56, 58, 59, 64, 66, 70, 71, 72, 74, 75, 78, 81, 89, 96, 97, 99, 101, 102, 103, 104, 107, 112, 114, 115, 116, 120, 122, 123, 124, 125, 126, 127, 129, 130, 131, 134, 138, 139, 140, 143, 144, 149, 152, 154, 155, 158, 160, 163, 164, 169, 171, 172, 173, 174, 176, 180, 181, 182, 185, 186, 188, 189, 190, 191, 193, 197, 199, 210, 216, 222, 224, 225, 227, 229, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 264, 270, 271, 273, 274, 275, 276, 278, 280, 286, 287, 293, 308, 309, 310, 312, 313, 314, 316, 317, 323, 332, 337, 339, 340, 342, 343, 345, 346, 347, 348, 349, 350, 351, 355, 356, 357, 360, 362, 363, 365, 366, 367, 369, 371, 373, 374], "fullycommutativeel": [0, 5, 114], "count": [0, 1, 2, 5, 9, 11, 23, 25, 26, 30, 39, 46, 51, 54, 71, 72, 73, 76, 82, 85, 93, 99, 101, 103, 108, 109, 114, 120, 121, 124, 130, 136, 141, 152, 160, 171, 172, 183, 184, 186, 192, 237, 276, 278, 307, 310, 314, 315, 323, 324, 332, 336, 346, 348, 350, 354, 356, 359, 360, 361, 364, 365, 366, 367, 368, 370], "enumer": [0, 1, 5, 6, 7, 8, 9, 11, 26, 29, 30, 46, 71, 72, 91, 96, 101, 108, 112, 114, 120, 129, 130, 151, 156, 158, 164, 173, 180, 182, 186, 187, 188, 191, 192, 228, 242, 275, 303, 309, 317, 332, 338, 339, 343, 346, 348, 353, 355, 359, 367, 369], "set": [0, 1, 2, 3, 5, 6, 7, 8, 9, 11, 12, 13, 16, 17, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 38, 39, 41, 42, 46, 47, 48, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 80, 82, 83, 84, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 104, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 122, 127, 128, 129, 130, 131, 134, 136, 138, 139, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 162, 164, 167, 168, 171, 172, 174, 176, 180, 182, 183, 185, 186, 187, 188, 191, 192, 193, 194, 196, 199, 211, 212, 215, 216, 217, 218, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 247, 263, 265, 266, 268, 270, 271, 272, 273, 274, 275, 276, 283, 284, 285, 288, 290, 294, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 313, 314, 316, 317, 318, 323, 324, 327, 330, 332, 333, 336, 337, 338, 339, 340, 341, 342, 343, 346, 347, 348, 350, 351, 352, 353, 355, 357, 358, 359, 361, 362, 363, 364, 365, 366, 369, 371, 373], "object": [0, 1, 2, 5, 7, 9, 11, 13, 16, 17, 19, 22, 23, 26, 28, 29, 30, 32, 39, 46, 48, 62, 64, 68, 69, 70, 71, 72, 74, 76, 79, 80, 84, 85, 86, 87, 88, 89, 91, 94, 95, 96, 99, 100, 101, 102, 108, 109, 110, 112, 114, 115, 117, 120, 121, 123, 124, 126, 130, 131, 134, 136, 139, 140, 141, 143, 144, 145, 146, 149, 154, 156, 158, 160, 162, 165, 166, 167, 168, 169, 171, 172, 173, 174, 178, 180, 185, 186, 187, 188, 190, 191, 192, 193, 194, 196, 197, 199, 211, 212, 215, 216, 217, 222, 223, 227, 232, 234, 237, 241, 242, 244, 268, 271, 272, 275, 276, 278, 280, 290, 296, 302, 303, 311, 314, 315, 333, 336, 340, 342, 346, 348, 350, 354, 358, 359, 362, 363, 365, 366, 368, 369, 372, 373, 374], "partit": [0, 1, 3, 4, 5, 6, 9, 11, 12, 17, 25, 26, 27, 30, 32, 33, 34, 37, 41, 51, 53, 56, 68, 69, 74, 80, 82, 83, 88, 89, 90, 91, 92, 94, 98, 101, 112, 115, 116, 120, 121, 122, 124, 125, 127, 131, 133, 139, 144, 145, 146, 147, 149, 150, 151, 157, 170, 171, 172, 177, 180, 182, 183, 186, 187, 188, 190, 194, 196, 197, 198, 207, 215, 216, 241, 242, 276, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 310, 312, 314, 315, 316, 317, 341, 343, 344, 346, 347, 348, 359, 362, 368, 373], "tableaux": [0, 1, 3, 4, 5, 6, 11, 15, 36, 37, 39, 41, 42, 44, 46, 47, 48, 49, 51, 52, 53, 55, 56, 58, 59, 60, 67, 68, 69, 98, 101, 116, 120, 122, 133, 134, 141, 143, 145, 146, 157, 160, 164, 167, 172, 174, 186, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 213, 215, 216, 217, 227, 238, 242, 276, 292, 293, 301, 313, 315, 343, 348, 354], "finit": [0, 1, 3, 5, 6, 9, 10, 11, 13, 17, 19, 22, 23, 24, 25, 26, 35, 38, 39, 46, 52, 56, 57, 59, 64, 65, 68, 70, 74, 75, 76, 77, 83, 84, 92, 102, 103, 111, 112, 113, 114, 116, 119, 120, 122, 123, 124, 129, 130, 133, 145, 146, 147, 151, 155, 156, 158, 160, 162, 163, 164, 172, 174, 175, 180, 181, 183, 185, 186, 188, 190, 191, 192, 193, 211, 213, 214, 221, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 241, 242, 243, 244, 245, 247, 248, 251, 253, 255, 257, 259, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 280, 294, 297, 302, 303, 306, 309, 313, 314, 336, 338, 340, 343, 346, 348, 349, 355, 357, 362, 363, 365, 366, 369, 370, 372, 373], "state": [0, 1, 2, 5, 11, 57, 65, 67, 83, 124, 138, 151, 160, 172, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 226, 273, 276, 293, 306, 310, 315, 343, 354, 365], "machin": [0, 1, 5, 26, 105], "automata": [0, 1, 5, 362], "transduc": [0, 1, 5], "speci": [0, 1, 5, 103, 190, 323, 326], "design": [0, 1, 5, 9, 30, 51, 78, 83, 84, 85, 87, 89, 90, 91, 92, 93, 95, 96, 97, 99, 112, 138, 139, 172, 227, 236, 238, 278, 280, 302, 365], "incid": [0, 1, 5, 76, 77, 79, 80, 81, 82, 87, 92, 95, 97, 102, 120, 130, 138, 175, 187, 266, 362], "structur": [0, 1, 2, 5, 7, 11, 17, 30, 38, 39, 48, 51, 53, 55, 56, 57, 60, 61, 62, 63, 65, 68, 77, 79, 80, 81, 82, 86, 87, 95, 96, 97, 104, 110, 119, 121, 123, 129, 130, 134, 144, 145, 146, 147, 149, 151, 156, 158, 162, 172, 180, 187, 211, 212, 213, 214, 216, 217, 218, 227, 233, 238, 268, 275, 276, 278, 282, 298, 300, 302, 303, 304, 307, 317, 318, 319, 320, 321, 323, 324, 325, 327, 328, 329, 330, 331, 332, 334, 336, 338, 354, 359, 365], "poset": [0, 1, 5, 6, 11, 17, 49, 58, 66, 101, 114, 120, 145, 155, 156, 160, 172, 174, 181, 182, 185, 190, 237, 238, 242, 244, 306, 308, 313, 340, 343, 349, 354], "word": [0, 1, 2, 3, 5, 6, 8, 11, 15, 16, 22, 24, 25, 27, 30, 37, 39, 50, 53, 62, 63, 64, 68, 71, 77, 80, 91, 98, 109, 110, 111, 112, 113, 114, 116, 119, 120, 124, 127, 130, 131, 133, 134, 141, 145, 146, 152, 153, 156, 158, 159, 160, 167, 172, 180, 182, 183, 186, 190, 192, 196, 197, 212, 218, 223, 224, 225, 227, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 249, 265, 267, 269, 271, 273, 274, 276, 278, 280, 297, 303, 307, 308, 313, 314, 336, 339, 340, 343, 346, 348, 354, 358, 365], "A": [0, 1, 2, 3, 5, 6, 7, 8, 10, 11, 12, 17, 18, 19, 21, 22, 23, 24, 25, 26, 28, 29, 30, 32, 33, 34, 36, 38, 39, 41, 42, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 107, 109, 110, 111, 112, 113, 114, 115, 116, 119, 122, 123, 124, 125, 127, 129, 130, 131, 132, 133, 134, 136, 138, 139, 140, 141, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 168, 169, 171, 172, 173, 174, 176, 177, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 192, 193, 196, 197, 199, 201, 205, 207, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 249, 259, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 278, 279, 280, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 319, 323, 327, 329, 333, 335, 336, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 365, 366, 367, 369, 373, 374], "bijectionist": [0, 1, 5], "": [0, 1, 2, 3, 5, 6, 10, 11, 12, 16, 19, 21, 22, 23, 25, 26, 28, 30, 33, 35, 36, 37, 38, 46, 48, 50, 51, 52, 55, 56, 57, 58, 59, 60, 62, 63, 68, 69, 70, 71, 72, 73, 74, 76, 77, 79, 80, 83, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 127, 129, 130, 131, 132, 133, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 150, 151, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 169, 171, 172, 173, 176, 180, 182, 183, 186, 187, 188, 189, 190, 192, 197, 205, 211, 212, 215, 216, 218, 219, 225, 226, 227, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 271, 273, 274, 275, 276, 277, 278, 280, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 319, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 346, 348, 351, 353, 354, 355, 358, 359, 362, 363, 364, 365, 368, 369, 370, 374], "toolkit": [0, 1, 5], "output": [0, 1, 2, 3, 5, 8, 9, 10, 11, 16, 17, 19, 22, 26, 29, 30, 32, 33, 34, 39, 51, 53, 56, 58, 59, 60, 64, 68, 69, 70, 73, 76, 77, 79, 80, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 96, 99, 101, 102, 104, 105, 107, 109, 110, 114, 118, 120, 123, 126, 127, 129, 130, 131, 134, 136, 138, 139, 141, 143, 144, 145, 146, 149, 150, 151, 154, 155, 156, 158, 159, 160, 162, 164, 171, 172, 173, 174, 176, 180, 182, 186, 187, 188, 189, 191, 192, 193, 211, 212, 215, 216, 217, 219, 225, 227, 229, 232, 234, 237, 238, 239, 242, 243, 244, 270, 273, 274, 275, 276, 277, 278, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 313, 314, 315, 319, 327, 329, 333, 336, 340, 342, 343, 345, 346, 347, 348, 349, 350, 352, 354, 355, 356, 359, 361, 362, 363, 365, 368, 369, 371, 372, 373, 374], "ranker": [0, 1, 5], "map": [0, 1, 5, 6, 9, 11, 16, 17, 25, 26, 28, 30, 33, 34, 36, 42, 46, 51, 53, 56, 59, 65, 74, 83, 87, 89, 91, 94, 99, 101, 102, 108, 109, 110, 111, 112, 113, 115, 119, 121, 122, 127, 136, 139, 141, 144, 145, 146, 149, 151, 154, 156, 160, 163, 168, 172, 173, 180, 186, 187, 193, 207, 212, 215, 218, 219, 221, 225, 227, 232, 234, 236, 238, 241, 242, 243, 264, 266, 271, 272, 273, 276, 278, 290, 294, 296, 300, 302, 303, 305, 308, 313, 315, 316, 340, 343, 344, 345, 346, 348, 350, 354, 359, 362, 363, 364, 365, 369, 372, 373], "miscellan": [0, 1, 5, 26, 182, 187, 225, 273], "code": [0, 1, 2, 3, 5, 9, 26, 27, 29, 30, 51, 59, 64, 72, 77, 80, 84, 85, 89, 91, 92, 96, 99, 101, 102, 103, 107, 109, 113, 114, 119, 120, 130, 134, 135, 138, 139, 141, 142, 149, 157, 158, 159, 160, 172, 173, 180, 187, 199, 236, 238, 239, 241, 244, 264, 265, 271, 272, 290, 296, 311, 323, 326, 332, 340, 343, 344, 346, 348, 350, 354, 359, 363, 366, 369], "theori": [0, 5, 19, 22, 46, 70, 76, 80, 83, 92, 94, 108, 113, 114, 116, 134, 143, 146, 147, 160, 164, 180, 182, 185, 187, 190, 216, 236, 238, 241, 242, 266, 271, 273, 292, 293, 296, 300, 302, 303, 304, 305, 343, 346, 347, 348, 354, 362, 363, 369], "discret": [0, 5, 39, 80, 91, 94, 101, 108, 187, 188, 190, 242, 306, 343, 363, 369], "dynam": [0, 5, 29, 172, 315, 369], "graph": [0, 1, 2, 4, 5, 7, 8, 11, 14, 19, 22, 23, 27, 33, 39, 46, 48, 49, 51, 58, 59, 66, 72, 75, 76, 77, 80, 87, 89, 96, 99, 101, 108, 129, 130, 138, 139, 153, 156, 160, 161, 164, 169, 171, 172, 173, 174, 179, 180, 182, 183, 187, 190, 196, 199, 205, 207, 209, 211, 215, 222, 226, 227, 228, 229, 230, 231, 234, 236, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 278, 306, 313, 314, 323, 324, 332, 336, 337, 340, 344, 346, 348, 351, 352, 365, 366, 369], "search": [0, 1, 7, 8, 9, 11, 19, 39, 46, 51, 75, 83, 100, 108, 120, 124, 130, 136, 172, 180, 182, 187, 240, 274, 315, 338, 350, 356, 359, 368], "page": [0, 22, 76, 77, 80, 90, 91, 94, 120, 130, 134, 138, 158, 160, 180, 216, 238, 289, 302, 303, 314, 346, 354, 362, 363], "thi": [1, 2, 3, 6, 7, 8, 9, 10, 11, 13, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 32, 33, 34, 36, 37, 39, 41, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 64, 65, 66, 68, 69, 70, 71, 72, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 176, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 196, 197, 199, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 249, 255, 257, 259, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 282, 283, 284, 285, 286, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 356, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374], "i": [1, 2, 3, 6, 8, 9, 10, 11, 12, 13, 16, 17, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 196, 197, 199, 207, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 253, 255, 257, 259, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374], "current": [1, 2, 9, 11, 17, 19, 22, 27, 30, 39, 42, 44, 45, 46, 54, 57, 59, 65, 68, 72, 74, 86, 98, 99, 101, 108, 109, 112, 123, 124, 125, 130, 131, 134, 136, 138, 139, 145, 146, 147, 154, 158, 160, 164, 166, 172, 186, 187, 191, 193, 196, 197, 207, 211, 212, 213, 214, 216, 218, 221, 227, 232, 234, 236, 237, 238, 239, 241, 242, 264, 265, 271, 272, 273, 278, 303, 307, 313, 314, 333, 338, 342, 343, 346, 348, 350, 365, 367], "sort": [1, 3, 9, 11, 12, 16, 17, 19, 22, 24, 26, 30, 32, 33, 39, 48, 52, 55, 56, 59, 60, 70, 74, 76, 83, 88, 89, 96, 99, 101, 102, 104, 108, 109, 112, 114, 118, 124, 129, 133, 134, 136, 141, 143, 144, 145, 146, 147, 151, 156, 158, 159, 160, 161, 162, 163, 169, 171, 172, 174, 180, 182, 183, 184, 186, 187, 211, 222, 224, 226, 227, 230, 231, 237, 238, 239, 240, 242, 243, 244, 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 268, 269, 270, 273, 275, 276, 278, 280, 285, 291, 300, 301, 302, 303, 305, 308, 309, 310, 313, 326, 332, 336, 337, 340, 342, 343, 346, 348, 350, 353, 355, 359, 362, 363, 364, 365, 373], "alphabet": [1, 17, 27, 54, 71, 101, 102, 108, 109, 110, 113, 119, 134, 141, 145, 146, 147, 149, 151, 154, 167, 172, 192, 241, 276, 280, 284, 285, 286, 288, 294, 300, 301, 303, 307, 308, 341, 346, 354, 356, 357, 359, 360, 361, 362, 363, 365, 366, 367, 369, 372], "order": [1, 2, 3, 9, 11, 12, 17, 19, 22, 24, 25, 26, 28, 29, 30, 32, 34, 39, 41, 54, 56, 60, 62, 68, 70, 72, 74, 76, 77, 79, 80, 82, 83, 87, 88, 89, 90, 91, 92, 93, 96, 97, 99, 101, 103, 104, 107, 108, 109, 110, 112, 114, 115, 116, 120, 122, 123, 127, 128, 129, 130, 131, 134, 138, 139, 143, 144, 146, 149, 151, 153, 158, 159, 160, 162, 164, 165, 168, 170, 171, 172, 173, 174, 175, 176, 180, 181, 182, 183, 185, 186, 187, 192, 193, 215, 218, 225, 227, 232, 234, 235, 237, 238, 239, 240, 241, 242, 244, 255, 257, 266, 271, 273, 274, 275, 276, 278, 284, 285, 288, 291, 294, 300, 301, 302, 303, 305, 307, 310, 313, 314, 315, 317, 318, 323, 330, 331, 332, 333, 336, 338, 340, 342, 343, 344, 346, 348, 349, 353, 354, 355, 356, 358, 359, 362, 363, 365, 367, 372], "w": [1, 3, 9, 11, 16, 17, 19, 22, 24, 25, 34, 37, 50, 56, 58, 59, 61, 62, 64, 69, 71, 80, 89, 91, 97, 98, 101, 108, 109, 110, 111, 113, 114, 120, 124, 128, 129, 131, 132, 133, 138, 141, 144, 146, 149, 150, 151, 158, 160, 167, 172, 180, 182, 186, 187, 192, 193, 211, 212, 223, 225, 227, 228, 229, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 255, 271, 272, 273, 274, 276, 277, 278, 280, 302, 303, 305, 308, 314, 316, 339, 340, 343, 345, 346, 348, 350, 352, 354, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372], "r": [1, 10, 11, 12, 16, 17, 26, 28, 30, 39, 43, 48, 56, 57, 58, 59, 61, 62, 68, 73, 74, 76, 77, 79, 80, 82, 83, 84, 89, 90, 91, 92, 93, 94, 97, 99, 100, 101, 108, 109, 110, 111, 112, 113, 119, 120, 121, 124, 127, 130, 131, 132, 133, 134, 139, 143, 144, 145, 146, 147, 149, 150, 151, 159, 160, 161, 162, 163, 164, 168, 170, 172, 174, 180, 181, 182, 185, 186, 187, 188, 191, 193, 194, 197, 211, 212, 215, 216, 218, 219, 221, 225, 226, 227, 229, 230, 231, 232, 235, 236, 239, 240, 241, 242, 243, 244, 245, 249, 255, 264, 265, 267, 269, 270, 271, 272, 273, 274, 276, 277, 278, 282, 285, 286, 287, 288, 289, 290, 293, 294, 297, 300, 301, 302, 303, 305, 306, 307, 308, 311, 313, 314, 315, 316, 323, 336, 340, 342, 343, 346, 347, 348, 350, 354, 358, 359, 363, 365, 369, 374], "t": [1, 2, 6, 9, 10, 11, 13, 16, 17, 19, 22, 23, 25, 26, 32, 36, 37, 39, 41, 43, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 65, 67, 68, 69, 73, 74, 75, 76, 77, 78, 80, 82, 83, 85, 86, 87, 89, 90, 91, 92, 93, 94, 97, 98, 99, 101, 102, 107, 108, 109, 110, 111, 112, 113, 114, 116, 118, 119, 120, 121, 122, 124, 127, 130, 131, 133, 134, 138, 139, 140, 141, 145, 146, 147, 156, 157, 158, 159, 160, 162, 163, 164, 167, 168, 169, 172, 173, 176, 180, 182, 186, 187, 188, 192, 193, 196, 197, 200, 205, 212, 213, 215, 216, 217, 218, 219, 220, 225, 227, 229, 230, 231, 232, 233, 234, 236, 238, 239, 241, 242, 264, 265, 267, 268, 269, 270, 271, 272, 274, 275, 276, 278, 280, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 296, 297, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 323, 329, 332, 335, 336, 341, 343, 346, 347, 348, 350, 351, 353, 354, 356, 358, 359, 360, 362, 363, 365, 369], "name": [1, 11, 17, 19, 22, 23, 26, 29, 56, 79, 86, 89, 94, 96, 97, 98, 99, 101, 102, 108, 110, 111, 112, 113, 114, 115, 116, 119, 121, 122, 123, 124, 125, 127, 130, 134, 138, 139, 140, 144, 145, 146, 147, 149, 156, 158, 160, 161, 172, 180, 182, 185, 187, 215, 225, 227, 229, 234, 236, 237, 241, 242, 264, 270, 271, 274, 275, 276, 277, 278, 280, 284, 285, 286, 299, 300, 301, 302, 303, 305, 333, 338, 342, 343, 346, 354, 358, 359, 362, 372, 374], "It": [1, 2, 6, 7, 9, 11, 16, 17, 19, 22, 23, 26, 28, 30, 46, 49, 56, 59, 60, 66, 67, 68, 72, 74, 76, 77, 79, 80, 83, 85, 89, 92, 94, 95, 96, 97, 98, 99, 101, 102, 104, 107, 108, 109, 110, 114, 119, 120, 122, 124, 130, 131, 134, 136, 138, 141, 145, 146, 147, 149, 151, 153, 156, 160, 162, 167, 168, 169, 171, 172, 176, 177, 180, 182, 187, 193, 211, 225, 226, 227, 229, 232, 233, 234, 235, 236, 238, 239, 241, 242, 243, 244, 257, 264, 265, 267, 269, 271, 273, 275, 276, 282, 284, 285, 288, 293, 294, 296, 300, 301, 302, 303, 305, 310, 313, 314, 315, 318, 321, 337, 339, 340, 343, 346, 348, 350, 354, 356, 359, 362, 363, 364, 365, 366, 369, 372, 374], "can": [1, 2, 3, 6, 7, 9, 10, 11, 12, 13, 17, 19, 21, 22, 23, 24, 25, 26, 28, 29, 30, 33, 34, 36, 37, 39, 46, 47, 49, 50, 52, 53, 54, 56, 57, 58, 59, 60, 62, 63, 65, 66, 68, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 108, 109, 110, 111, 113, 114, 115, 116, 118, 119, 120, 122, 123, 124, 125, 127, 130, 131, 132, 133, 134, 136, 138, 139, 140, 141, 144, 145, 146, 147, 150, 151, 153, 154, 156, 157, 158, 159, 160, 162, 163, 164, 170, 171, 172, 174, 175, 176, 177, 180, 182, 183, 186, 187, 188, 189, 192, 193, 197, 199, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 225, 226, 227, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 244, 245, 259, 264, 266, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 285, 286, 287, 288, 291, 293, 294, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 323, 330, 332, 333, 336, 337, 339, 340, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 362, 363, 365, 366, 368, 369, 372, 373, 374], "updat": [1, 9, 19, 72, 81, 85, 124, 127, 158, 207, 217, 276, 315, 346], "semi": [1, 22, 131, 143, 171, 172, 187, 192, 193, 276, 314, 315, 321, 343, 346, 354], "automat": [1, 19, 26, 76, 82, 88, 89, 92, 98, 99, 108, 114, 127, 158, 162, 171, 188, 192, 227, 234, 275, 302, 315, 337, 354, 362, 363, 368], "run": [1, 2, 3, 11, 17, 19, 26, 30, 33, 39, 49, 52, 54, 60, 68, 69, 72, 73, 85, 98, 101, 105, 108, 129, 132, 138, 145, 146, 147, 161, 168, 172, 177, 180, 182, 186, 187, 194, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 215, 216, 233, 235, 236, 239, 241, 242, 244, 245, 264, 265, 267, 269, 274, 277, 284, 286, 289, 290, 295, 296, 303, 305, 306, 343, 354, 356, 359, 364, 365, 366, 369], "src": [1, 276], "combinat": [1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 16, 17, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373], "find": [1, 3, 9, 10, 26, 39, 59, 72, 75, 83, 84, 92, 100, 101, 114, 124, 131, 136, 139, 153, 154, 159, 160, 180, 186, 187, 215, 225, 226, 235, 276, 303, 354, 359, 368, 369], "py": [1, 77, 86, 89, 108, 158, 199, 239, 286, 348, 354], "sed": 1, "pyx": [1, 135, 173], "lang": [1, 187], "en_u": 1, "utf": 1, "8": [1, 2, 3, 6, 7, 9, 10, 11, 16, 19, 21, 22, 23, 25, 26, 30, 34, 39, 46, 48, 49, 51, 54, 56, 58, 59, 60, 61, 64, 66, 68, 70, 71, 72, 76, 77, 79, 80, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 101, 102, 107, 108, 109, 110, 114, 115, 116, 120, 124, 128, 130, 131, 136, 138, 139, 141, 143, 145, 146, 150, 151, 154, 157, 158, 159, 160, 161, 164, 168, 170, 171, 172, 174, 180, 181, 182, 183, 184, 185, 186, 187, 188, 192, 193, 197, 211, 212, 213, 216, 225, 226, 227, 229, 230, 231, 232, 235, 236, 237, 238, 239, 240, 242, 244, 245, 248, 249, 251, 253, 255, 256, 264, 267, 268, 270, 273, 274, 276, 278, 280, 285, 286, 288, 289, 290, 293, 294, 297, 300, 301, 303, 306, 309, 310, 313, 314, 315, 323, 324, 327, 329, 336, 338, 339, 340, 342, 343, 345, 346, 347, 348, 350, 351, 352, 354, 356, 358, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 374], "lc_collat": 1, "c": [1, 2, 3, 9, 10, 11, 13, 16, 17, 19, 22, 23, 24, 25, 26, 27, 28, 30, 33, 34, 35, 36, 37, 38, 39, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 66, 68, 69, 71, 73, 74, 76, 77, 79, 81, 82, 83, 88, 89, 91, 92, 93, 94, 96, 98, 100, 101, 103, 105, 108, 112, 113, 118, 120, 121, 122, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 138, 139, 141, 145, 146, 147, 150, 151, 154, 157, 160, 162, 164, 167, 171, 172, 173, 174, 176, 180, 182, 185, 186, 187, 188, 191, 192, 193, 211, 212, 213, 214, 215, 216, 218, 220, 221, 223, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 264, 265, 266, 268, 271, 272, 273, 274, 275, 277, 278, 280, 282, 289, 298, 300, 301, 302, 303, 304, 307, 308, 310, 314, 315, 316, 318, 319, 320, 322, 323, 325, 327, 328, 329, 331, 332, 333, 334, 335, 339, 340, 343, 345, 346, 347, 348, 350, 352, 353, 354, 358, 359, 362, 363, 365, 366, 368, 369, 372], "tmp": [1, 96], "module_list": 1, "rst": [1, 196, 348, 372], "copi": [1, 2, 11, 19, 26, 33, 58, 75, 76, 88, 89, 97, 102, 109, 122, 124, 131, 134, 136, 173, 186, 187, 227, 229, 230, 239, 270, 297, 315, 346, 350, 362, 366, 371, 373], "past": [1, 6, 187, 273], "result": [1, 2, 6, 11, 12, 17, 19, 21, 22, 26, 27, 30, 32, 33, 36, 48, 51, 56, 59, 68, 69, 72, 73, 76, 77, 80, 83, 84, 85, 90, 91, 92, 99, 101, 102, 105, 108, 109, 110, 111, 113, 114, 115, 119, 120, 122, 129, 130, 131, 132, 133, 138, 139, 141, 144, 145, 146, 147, 149, 151, 156, 160, 161, 162, 163, 172, 173, 174, 176, 180, 182, 183, 186, 187, 188, 192, 193, 205, 212, 214, 215, 216, 219, 225, 231, 235, 236, 238, 239, 241, 242, 243, 266, 271, 273, 274, 275, 276, 277, 278, 280, 284, 285, 288, 289, 291, 294, 296, 300, 301, 302, 303, 305, 310, 313, 314, 319, 322, 329, 335, 336, 342, 343, 344, 345, 346, 348, 354, 356, 359, 362, 365, 369, 374], "back": [1, 6, 11, 17, 56, 63, 83, 86, 99, 110, 121, 123, 124, 125, 138, 139, 145, 146, 150, 159, 160, 187, 212, 215, 238, 241, 271, 275, 277, 284, 286, 292, 293, 296, 299, 302, 303, 346, 348, 352, 359, 368], "see": [1, 2, 3, 6, 7, 8, 9, 10, 11, 13, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 34, 36, 37, 39, 43, 46, 47, 48, 51, 54, 56, 58, 59, 62, 63, 66, 67, 71, 76, 77, 78, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 108, 109, 110, 112, 113, 114, 115, 116, 118, 119, 120, 122, 124, 125, 127, 129, 130, 131, 133, 134, 136, 138, 139, 141, 143, 144, 145, 146, 147, 150, 154, 155, 156, 158, 159, 160, 162, 163, 164, 166, 171, 172, 174, 175, 176, 177, 180, 182, 183, 184, 186, 187, 188, 191, 192, 193, 211, 212, 215, 216, 217, 218, 219, 222, 225, 226, 227, 228, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 247, 264, 266, 268, 271, 272, 273, 275, 276, 277, 278, 280, 285, 286, 288, 290, 293, 294, 296, 300, 301, 302, 303, 305, 308, 310, 311, 312, 313, 314, 315, 336, 337, 342, 343, 345, 346, 347, 348, 349, 351, 354, 356, 357, 359, 361, 362, 363, 366, 368, 369, 371, 374], "github": [1, 13, 19, 21, 22, 23, 26, 39, 68, 76, 77, 89, 99, 108, 109, 120, 124, 127, 128, 159, 160, 161, 172, 187, 188, 191, 193, 211, 238, 239, 269, 274, 278, 280, 283, 343, 346, 359, 362, 369, 372], "issu": [1, 13, 19, 21, 22, 23, 26, 39, 68, 76, 77, 80, 89, 90, 94, 99, 101, 107, 108, 109, 114, 120, 124, 127, 128, 152, 159, 160, 161, 172, 187, 188, 191, 211, 223, 238, 239, 264, 269, 274, 276, 278, 280, 283, 286, 293, 296, 343, 346, 359, 362, 369, 372], "17421": 1, "desir": [1, 11, 19, 91, 99, 120, 124, 138, 187, 227, 237, 238, 242, 343, 354, 362, 369, 372], "improv": [1, 26, 83, 85, 99, 108, 109, 120, 123, 124, 187, 211, 238, 239, 272, 336, 339, 340, 359, 362, 372], "abstract": [1, 16, 17, 30, 36, 42, 48, 56, 58, 68, 80, 86, 99, 101, 103, 110, 125, 131, 134, 145, 149, 162, 164, 167, 169, 170, 172, 185, 187, 198, 221, 227, 230, 232, 237, 268, 290, 302, 303, 308, 333, 351, 357, 372], "recurs": [1, 11, 17, 19, 25, 26, 46, 67, 68, 72, 75, 83, 91, 98, 99, 100, 101, 103, 105, 109, 114, 121, 122, 126, 131, 138, 141, 145, 146, 156, 160, 162, 180, 187, 193, 211, 232, 234, 236, 238, 242, 271, 273, 275, 276, 296, 297, 305, 310, 317, 333, 338, 346, 348, 354, 356, 359, 369], "tree": [1, 7, 8, 9, 46, 86, 101, 104, 111, 113, 119, 120, 124, 129, 130, 158, 172, 180, 187, 198, 216, 315, 317, 323, 324, 332, 338, 357, 359], "affin": [1, 19, 22, 23, 34, 39, 51, 52, 56, 58, 59, 77, 85, 92, 103, 114, 120, 131, 160, 162, 164, 172, 197, 211, 212, 213, 214, 215, 216, 218, 219, 220, 225, 226, 227, 229, 230, 231, 234, 236, 237, 241, 242, 244, 247, 248, 251, 253, 255, 257, 259, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 290, 292, 296, 302, 304, 347, 348], "permut": [1, 2, 6, 9, 11, 13, 16, 17, 19, 26, 29, 33, 37, 53, 73, 74, 80, 89, 92, 96, 98, 99, 101, 110, 120, 130, 131, 133, 139, 141, 144, 145, 146, 159, 160, 161, 164, 183, 186, 187, 190, 196, 197, 228, 232, 233, 237, 238, 239, 240, 244, 271, 274, 276, 277, 278, 280, 282, 285, 290, 297, 300, 301, 302, 303, 305, 306, 314, 315, 316, 317, 318, 320, 323, 324, 325, 326, 327, 329, 331, 332, 334, 335, 339, 340, 342, 343, 344, 346, 348, 354, 359, 364, 373], "combinator": [1, 26, 40, 92, 101, 143, 147, 151, 159, 164, 171, 185, 187, 197, 212, 216, 218, 220, 236, 241, 242, 271, 273, 276, 296, 302, 323, 348, 362, 363, 369], "altern": [1, 34, 46, 49, 53, 56, 61, 72, 76, 89, 101, 102, 103, 108, 109, 115, 116, 120, 130, 131, 138, 139, 141, 144, 145, 151, 156, 160, 172, 183, 186, 193, 227, 235, 244, 264, 265, 273, 274, 276, 312, 315, 336, 343, 354, 358], "sign": [1, 17, 19, 25, 26, 30, 51, 66, 101, 103, 108, 115, 120, 123, 124, 130, 131, 138, 145, 160, 162, 172, 186, 232, 234, 236, 238, 241, 244, 255, 257, 273, 285, 300, 301, 303, 305, 312, 315, 342, 343, 344, 346, 347, 354], "matric": [1, 19, 22, 23, 74, 75, 80, 82, 83, 90, 91, 100, 101, 115, 116, 120, 136, 137, 139, 144, 146, 162, 172, 180, 186, 187, 188, 192, 193, 220, 225, 227, 231, 232, 239, 240, 244, 274, 276, 282, 303, 305, 312, 315, 316, 344, 346, 350, 354, 362], "backtrack": [1, 32, 85, 101, 173, 187, 351], "baxter": [1, 4, 11, 103, 344], "binari": [1, 2, 8, 9, 30, 35, 71, 89, 100, 101, 103, 109, 110, 111, 113, 120, 127, 130, 136, 137, 146, 156, 158, 172, 276, 278, 303, 315, 323, 324, 338, 343, 345, 346, 358, 359, 369], "recurr": [1, 19, 26, 35, 109, 172, 174, 188, 193, 234, 315, 354, 359, 374], "sequenc": [1, 2, 3, 8, 11, 14, 17, 19, 22, 26, 30, 35, 39, 46, 51, 57, 61, 65, 66, 78, 83, 101, 103, 109, 112, 114, 120, 121, 122, 125, 127, 130, 131, 138, 139, 141, 145, 146, 153, 154, 159, 160, 162, 163, 167, 168, 170, 172, 182, 187, 190, 191, 192, 197, 211, 215, 216, 227, 232, 234, 235, 242, 275, 276, 278, 280, 285, 291, 300, 301, 303, 305, 308, 310, 311, 313, 314, 332, 340, 342, 346, 348, 349, 354, 356, 359, 362, 367, 369], "blob": [1, 4, 99], "cartesian": [1, 68, 83, 84, 108, 109, 112, 120, 160, 172, 175, 182, 187, 354], "product": [1, 2, 3, 10, 11, 12, 16, 17, 24, 25, 30, 33, 34, 38, 39, 56, 57, 58, 59, 65, 74, 80, 83, 84, 90, 91, 92, 93, 99, 103, 108, 109, 110, 111, 112, 113, 118, 119, 121, 134, 138, 139, 143, 144, 145, 146, 147, 149, 150, 151, 160, 163, 164, 172, 174, 175, 177, 181, 182, 185, 186, 187, 188, 192, 193, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 212, 215, 216, 221, 225, 227, 232, 233, 234, 235, 236, 238, 239, 241, 242, 243, 244, 264, 268, 270, 271, 272, 273, 274, 275, 277, 278, 284, 285, 286, 289, 290, 292, 293, 294, 295, 296, 299, 300, 301, 302, 303, 305, 307, 315, 317, 327, 332, 335, 340, 343, 344, 346, 348, 350, 354, 357, 359], "poirier": [1, 15], "reutenau": [1, 15, 110, 146, 151, 183, 293, 303, 305, 369], "standard": [1, 3, 6, 8, 9, 11, 15, 17, 19, 21, 22, 23, 26, 32, 33, 73, 74, 77, 79, 98, 99, 101, 108, 109, 110, 116, 120, 131, 133, 134, 143, 145, 146, 147, 150, 151, 155, 159, 160, 164, 167, 169, 170, 171, 172, 186, 187, 192, 196, 225, 226, 227, 239, 243, 244, 247, 255, 272, 276, 277, 278, 284, 286, 289, 296, 300, 301, 302, 303, 312, 313, 314, 315, 323, 341, 343, 346, 347, 348, 354, 358, 359, 361, 366, 369], "quasi": [1, 15, 16, 80, 82, 91, 144, 145, 146], "clusterse": [1, 18, 21, 22], "mutation_class": [1, 19, 22], "helper": [1, 20, 26, 36, 56, 64, 101, 154, 160, 163, 172, 180, 210, 223], "mutat": [1, 18, 19, 20, 22, 114, 122, 124, 154, 173], "type": [1, 3, 12, 13, 18, 19, 22, 24, 25, 26, 34, 36, 38, 39, 41, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 68, 69, 73, 80, 86, 88, 92, 98, 101, 102, 103, 108, 109, 114, 116, 121, 124, 128, 129, 131, 133, 134, 138, 139, 146, 155, 156, 158, 160, 161, 162, 164, 165, 166, 171, 172, 173, 180, 182, 187, 188, 191, 193, 197, 198, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 225, 226, 228, 229, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 271, 272, 273, 274, 275, 276, 279, 287, 297, 300, 303, 304, 306, 307, 311, 312, 313, 315, 316, 322, 323, 332, 333, 340, 342, 343, 345, 347, 348, 349, 354, 356, 358, 359, 362, 363, 365, 366, 367, 369, 374], "complex": [1, 25, 30, 46, 92, 109, 123, 147, 160, 164, 172, 180, 187, 191, 220, 222, 228, 240, 242, 244, 273, 274, 348, 352, 354, 359, 362], "gener": [1, 2, 3, 6, 7, 8, 9, 10, 11, 17, 19, 22, 23, 25, 26, 27, 30, 32, 33, 34, 36, 39, 42, 48, 50, 52, 53, 54, 56, 58, 59, 61, 66, 67, 68, 69, 71, 72, 74, 76, 77, 80, 82, 83, 85, 89, 90, 91, 93, 96, 98, 99, 101, 104, 105, 107, 108, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 124, 127, 129, 131, 133, 134, 138, 139, 140, 142, 145, 146, 150, 152, 153, 155, 156, 158, 159, 160, 162, 163, 164, 165, 169, 170, 172, 173, 175, 180, 181, 182, 183, 186, 187, 188, 191, 193, 199, 211, 212, 214, 215, 216, 218, 219, 222, 225, 226, 227, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 255, 264, 265, 271, 272, 273, 274, 275, 276, 278, 280, 281, 285, 286, 287, 291, 293, 296, 300, 302, 303, 305, 306, 307, 310, 311, 315, 316, 317, 320, 324, 327, 328, 329, 332, 334, 336, 338, 339, 340, 343, 344, 346, 347, 348, 352, 359, 361, 362, 364, 365, 368, 369, 372, 373, 374], "dual": [1, 14, 16, 23, 46, 48, 52, 55, 56, 58, 59, 69, 80, 85, 87, 89, 99, 102, 143, 144, 145, 146, 147, 148, 149, 151, 160, 169, 180, 182, 183, 184, 186, 187, 211, 215, 216, 220, 226, 227, 231, 232, 233, 235, 236, 238, 239, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 276, 281, 286, 289, 290, 293, 301, 302, 303, 340, 344, 346, 348, 352, 362, 369], "associahedron": [1, 130, 242], "color": [1, 46, 51, 89, 98, 101, 102, 108, 115, 120, 130, 134, 154, 156, 158, 160, 174, 183, 186, 187, 227, 238, 242, 275, 278, 311, 312, 340, 350, 359, 362, 363], "fast": [1, 9, 26, 46, 123, 127, 130, 145, 152, 165, 180, 187, 238, 303, 346, 350, 354, 357, 362], "comput": [1, 2, 3, 9, 11, 16, 17, 19, 20, 24, 26, 33, 35, 37, 39, 46, 49, 50, 51, 59, 61, 73, 74, 76, 77, 83, 87, 89, 90, 91, 92, 93, 97, 98, 99, 100, 101, 104, 107, 108, 109, 110, 112, 114, 120, 121, 122, 123, 124, 126, 127, 130, 131, 133, 134, 136, 137, 139, 141, 144, 145, 146, 147, 149, 150, 151, 152, 160, 162, 163, 165, 171, 172, 180, 182, 183, 187, 189, 192, 197, 211, 212, 215, 216, 223, 224, 225, 227, 230, 234, 235, 236, 237, 238, 239, 241, 242, 244, 255, 257, 265, 266, 271, 273, 275, 277, 278, 284, 285, 287, 288, 290, 293, 294, 296, 300, 301, 302, 303, 305, 307, 310, 313, 314, 316, 323, 337, 340, 343, 344, 346, 347, 350, 351, 354, 356, 359, 362, 363, 365, 366, 369, 373], "cython": [1, 2, 64, 69, 75, 103, 105, 107, 123, 124, 125, 180, 224], "mpz": 1, "combin": [1, 6, 9, 17, 26, 30, 61, 74, 103, 108, 110, 112, 114, 118, 121, 124, 130, 145, 160, 172, 187, 190, 211, 221, 225, 227, 238, 242, 244, 264, 273, 276, 278, 302, 303, 306, 354, 358], "integ": [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 14, 16, 17, 19, 22, 23, 26, 32, 33, 34, 35, 36, 37, 39, 49, 51, 54, 56, 58, 59, 60, 65, 68, 69, 70, 71, 72, 73, 74, 76, 77, 79, 80, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 101, 102, 104, 105, 108, 109, 110, 111, 112, 113, 114, 116, 118, 119, 120, 122, 130, 131, 133, 134, 136, 138, 139, 141, 143, 144, 145, 146, 147, 149, 150, 151, 152, 156, 157, 158, 159, 161, 163, 164, 167, 168, 169, 170, 171, 172, 174, 180, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 196, 197, 211, 216, 217, 221, 224, 225, 226, 227, 228, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 264, 268, 270, 271, 273, 275, 276, 277, 278, 280, 284, 285, 286, 288, 290, 291, 293, 294, 296, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 332, 333, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 355, 356, 358, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 371, 372, 373, 374], "composit": [1, 3, 9, 16, 17, 27, 29, 74, 83, 98, 99, 101, 103, 108, 110, 120, 124, 126, 127, 133, 139, 141, 143, 144, 145, 146, 147, 151, 152, 156, 157, 158, 159, 160, 161, 172, 182, 186, 190, 196, 215, 225, 234, 238, 277, 278, 280, 284, 302, 303, 313, 314, 315, 317, 323, 332, 333, 342, 343, 346, 354, 361, 364], "constel": 1, "core": [1, 3, 37, 120, 123, 131, 160, 275, 285, 296, 300, 301, 303, 305, 315, 343], "factor": [1, 3, 10, 11, 13, 19, 22, 50, 55, 56, 59, 61, 68, 76, 92, 93, 95, 101, 109, 112, 114, 124, 130, 131, 141, 146, 160, 171, 187, 188, 193, 212, 215, 216, 217, 218, 219, 225, 227, 232, 236, 264, 266, 268, 276, 288, 293, 294, 300, 301, 302, 303, 313, 314, 315, 329, 339, 343, 354, 356, 362, 365, 366, 369, 372], "alcov": [1, 52, 227, 232, 235, 236, 242, 271], "path": [1, 2, 11, 19, 22, 23, 46, 49, 52, 54, 56, 58, 62, 66, 101, 103, 108, 111, 115, 120, 122, 123, 124, 130, 154, 155, 156, 158, 159, 160, 170, 172, 186, 211, 212, 216, 242, 243, 275, 302, 346, 349, 351, 357, 359, 362, 365, 369, 373], "benkart": [1, 58, 141], "kang": [1, 54, 58, 231], "kashiwara": [1, 48, 51, 54, 56, 57, 58, 60, 65, 66, 67, 68, 162, 212, 216, 218, 271], "linear": [1, 4, 9, 10, 11, 16, 17, 58, 59, 61, 74, 76, 89, 91, 92, 108, 110, 112, 116, 121, 127, 130, 136, 144, 145, 146, 147, 149, 151, 160, 162, 163, 164, 172, 175, 180, 181, 184, 187, 188, 192, 193, 211, 221, 225, 227, 232, 234, 238, 239, 240, 241, 242, 244, 264, 271, 273, 274, 277, 278, 294, 296, 302, 303, 310, 315, 317, 323, 330, 333, 343, 347, 348, 354, 359, 362, 363, 365, 374], "lie": [1, 4, 23, 40, 46, 57, 58, 69, 99, 101, 119, 160, 216, 220, 221, 225, 227, 232, 238, 239, 242, 244, 255, 257, 271, 273, 275, 296, 297, 303, 347, 361], "superalgebra": [1, 58, 69], "catalog": [1, 4, 75, 103, 120, 175, 276, 357], "Of": [1, 40, 76, 108, 120, 160, 187, 227, 235, 242, 271, 303, 313, 348], "elementari": [1, 42, 54, 62, 65, 67, 68, 83, 99, 139, 144, 145, 147, 151, 160, 172, 273, 281, 284, 288, 295, 300, 301, 302, 303, 305, 310, 351], "model": [1, 6, 9, 37, 41, 42, 46, 52, 54, 56, 58, 59, 63, 65, 66, 74, 102, 103, 108, 115, 120, 125, 129, 134, 162, 163, 168, 180, 187, 193, 200, 212, 214, 216, 218, 236, 244, 283, 302, 311, 319, 322, 329, 333, 335, 336, 346, 348, 354, 363, 365, 373], "For": [1, 2, 3, 8, 9, 11, 13, 16, 17, 19, 20, 21, 22, 23, 24, 26, 29, 30, 32, 34, 36, 42, 46, 48, 51, 54, 56, 58, 59, 61, 63, 64, 67, 68, 69, 71, 72, 73, 76, 77, 80, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 104, 108, 109, 110, 111, 112, 115, 116, 119, 120, 122, 123, 124, 125, 127, 129, 130, 131, 133, 134, 136, 138, 139, 140, 141, 143, 144, 145, 146, 147, 149, 155, 156, 158, 159, 160, 163, 164, 172, 173, 180, 182, 183, 186, 187, 189, 191, 193, 196, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 225, 226, 227, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 264, 265, 266, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 285, 293, 294, 296, 300, 301, 302, 303, 305, 306, 307, 308, 310, 313, 314, 315, 318, 323, 325, 327, 331, 333, 336, 339, 341, 343, 345, 346, 348, 349, 351, 354, 356, 359, 360, 362, 364, 365, 366, 369, 373], "b": [1, 2, 3, 6, 9, 10, 11, 12, 13, 17, 19, 21, 22, 23, 26, 33, 36, 37, 38, 39, 41, 42, 43, 46, 47, 48, 49, 50, 51, 52, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 68, 69, 71, 73, 74, 76, 77, 79, 80, 82, 83, 85, 86, 88, 89, 91, 92, 95, 99, 101, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 122, 124, 127, 130, 132, 134, 138, 139, 140, 141, 145, 146, 149, 150, 151, 157, 158, 160, 162, 163, 171, 172, 173, 174, 176, 180, 181, 182, 185, 186, 187, 190, 191, 193, 198, 205, 207, 211, 212, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 251, 264, 265, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 280, 284, 289, 290, 296, 300, 301, 303, 308, 314, 315, 316, 318, 319, 320, 324, 325, 327, 328, 329, 331, 332, 333, 334, 336, 339, 340, 343, 345, 346, 348, 349, 350, 352, 353, 354, 356, 358, 359, 360, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372], "infti": [1, 26, 39, 42, 46, 48, 51, 59, 60, 61, 62, 76, 94, 122, 123, 124, 146, 151, 160, 164, 188, 198, 215, 227, 229, 247, 284, 302, 303, 305, 323, 346, 347, 359, 362, 369], "kirillov": [1, 36, 38, 39, 42, 57, 59, 116, 198, 199, 201, 213, 215, 216, 227, 236, 266, 346], "reshetikhin": [1, 36, 38, 39, 42, 57, 59, 198, 199, 201, 213, 215, 216, 227, 236, 266], "an": [1, 2, 3, 6, 7, 9, 10, 11, 16, 17, 19, 22, 23, 25, 26, 28, 29, 30, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 149, 150, 151, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 180, 181, 182, 183, 184, 186, 187, 188, 189, 191, 192, 193, 197, 205, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 254, 255, 256, 257, 259, 260, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 323, 332, 333, 336, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 365, 366, 368, 369, 370, 372, 373, 374], "direct": [1, 2, 11, 19, 21, 22, 23, 49, 56, 58, 59, 66, 90, 92, 97, 101, 103, 107, 108, 114, 120, 130, 139, 146, 151, 154, 158, 160, 162, 172, 174, 179, 180, 182, 187, 193, 211, 212, 226, 227, 241, 242, 268, 276, 305, 306, 312, 313, 314, 323, 327, 332, 340, 343, 346, 359, 363, 369, 373], "sum": [1, 3, 6, 11, 16, 17, 25, 26, 30, 39, 56, 59, 72, 74, 80, 83, 89, 91, 92, 98, 99, 100, 101, 104, 108, 109, 110, 111, 112, 113, 116, 119, 120, 124, 125, 126, 127, 129, 131, 137, 138, 141, 143, 144, 145, 146, 149, 150, 151, 158, 159, 160, 164, 172, 174, 176, 182, 186, 187, 188, 197, 216, 225, 234, 236, 238, 239, 242, 243, 244, 270, 271, 272, 273, 274, 275, 278, 280, 281, 282, 284, 285, 286, 288, 289, 290, 291, 293, 294, 299, 301, 302, 303, 305, 307, 308, 309, 310, 312, 313, 315, 316, 317, 323, 332, 333, 336, 340, 342, 343, 346, 350, 354, 355, 356, 359, 368, 369, 372], "rank": [1, 3, 19, 21, 23, 25, 26, 28, 33, 46, 56, 68, 89, 99, 110, 111, 112, 113, 116, 120, 127, 132, 146, 160, 172, 180, 182, 185, 186, 187, 191, 193, 211, 221, 225, 226, 227, 228, 229, 230, 231, 237, 238, 239, 240, 241, 244, 247, 261, 262, 268, 273, 274, 300, 313, 316, 336, 340, 354, 361, 363], "two": [1, 2, 6, 8, 9, 11, 12, 16, 17, 19, 22, 23, 25, 26, 29, 30, 33, 34, 39, 46, 56, 59, 68, 72, 74, 75, 76, 77, 80, 82, 83, 84, 88, 89, 90, 91, 92, 93, 95, 96, 98, 99, 100, 101, 102, 104, 107, 108, 109, 110, 111, 112, 113, 114, 115, 118, 119, 120, 122, 124, 127, 130, 131, 134, 136, 137, 138, 139, 141, 144, 145, 146, 147, 151, 156, 157, 158, 159, 160, 164, 167, 168, 171, 172, 176, 182, 183, 186, 187, 192, 199, 215, 221, 222, 223, 225, 227, 233, 235, 236, 238, 241, 242, 247, 264, 272, 273, 275, 276, 278, 280, 285, 288, 289, 290, 293, 294, 296, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 319, 322, 332, 335, 337, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 354, 356, 358, 359, 361, 362, 363, 364, 365, 368, 369, 372, 373], "fulli": [1, 3, 6, 68, 108, 187, 276, 343], "commut": [1, 3, 7, 9, 11, 15, 16, 17, 33, 60, 74, 108, 110, 112, 113, 119, 121, 122, 143, 144, 146, 147, 149, 160, 163, 181, 182, 185, 187, 215, 227, 234, 236, 267, 269, 276, 285, 288, 294, 300, 301, 302, 303, 310, 314, 316, 342, 343, 346, 359, 374], "stabl": [1, 22, 188, 225, 276, 282, 285, 288, 294, 300, 301, 303, 313], "grothendieck": [1, 151, 180, 187, 276, 290], "young": [1, 11, 52, 61, 68, 98, 99, 116, 120, 127, 145, 146, 147, 160, 163, 164, 172, 186, 217, 276, 301, 303, 304, 313, 315, 343, 344, 346, 348, 366], "wall": [1, 52, 59, 61, 68, 89, 238, 242, 271, 312, 354], "highest": [1, 19, 37, 39, 41, 46, 48, 50, 51, 54, 55, 56, 58, 59, 60, 61, 62, 65, 66, 67, 68, 72, 130, 131, 145, 162, 164, 172, 212, 213, 214, 215, 216, 218, 225, 235, 239, 242, 243, 244, 270, 271, 273, 274, 307, 314, 343, 348, 363], "weight": [1, 22, 30, 32, 36, 37, 38, 39, 41, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 80, 101, 108, 109, 116, 131, 141, 160, 162, 164, 172, 180, 183, 187, 197, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 225, 227, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 244, 245, 257, 264, 265, 266, 267, 268, 269, 270, 273, 274, 278, 280, 291, 297, 307, 314, 318, 319, 320, 321, 322, 325, 327, 328, 329, 331, 332, 334, 335, 336, 340, 346, 347, 348, 359], "induc": [1, 11, 42, 55, 56, 67, 89, 96, 99, 101, 108, 130, 145, 146, 147, 160, 180, 182, 187, 193, 225, 226, 227, 231, 232, 236, 242, 266, 271, 282, 298, 302, 304, 359], "mathcal": [1, 16, 39, 46, 51, 59, 60, 62, 68, 76, 83, 88, 89, 91, 92, 108, 110, 122, 187, 198, 239, 340, 346, 354], "nonexcept": [1, 218], "g_2": [1, 52, 58, 65, 211, 225, 227, 236, 238, 259, 266, 273, 303, 354], "kac": [1, 23, 38, 57, 59, 65, 160, 164, 216, 226, 227, 231, 235, 241, 242, 265, 271], "kyoto": [1, 292], "letter": [1, 2, 8, 9, 11, 17, 23, 24, 25, 27, 37, 42, 46, 47, 50, 52, 53, 55, 60, 66, 68, 69, 71, 107, 108, 109, 110, 112, 113, 114, 119, 120, 131, 134, 141, 145, 147, 150, 160, 161, 172, 173, 186, 187, 192, 215, 223, 227, 231, 276, 278, 280, 307, 308, 314, 315, 316, 339, 341, 343, 346, 348, 349, 354, 356, 358, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372], "littelmann": [1, 39, 49], "modifi": [1, 2, 6, 11, 17, 19, 21, 22, 33, 52, 61, 76, 77, 85, 86, 88, 89, 92, 112, 131, 156, 158, 172, 187, 211, 215, 227, 276, 293, 302, 303, 341, 346, 365, 373], "nakajima": [1, 52], "monomi": [1, 17, 52, 107, 110, 112, 124, 133, 143, 144, 145, 146, 147, 149, 150, 151, 163, 172, 187, 234, 236, 241, 243, 273, 281, 284, 285, 286, 288, 289, 290, 292, 293, 295, 296, 299, 300, 301, 302, 303, 352, 354], "bernstein": [1, 145, 303], "zelevinski": [1, 19, 23, 49, 289, 302], "multiseg": [1, 44], "mirkovi\u0107": 1, "vilonen": 1, "mv": [1, 171, 242], "polytop": [1, 124, 172, 187, 190, 222, 238, 242, 340], "pbw": [1, 44, 62], "data": [1, 2, 11, 19, 21, 22, 23, 33, 39, 46, 51, 62, 63, 76, 80, 83, 86, 88, 89, 90, 96, 98, 108, 114, 123, 136, 138, 141, 156, 157, 158, 173, 180, 182, 187, 217, 221, 222, 226, 227, 228, 229, 232, 234, 238, 239, 244, 274, 275, 310, 336, 345, 350, 354, 358, 359, 361, 362, 363, 365, 366, 374], "polyhedr": [1, 22, 48, 240, 340], "realiz": [1, 16, 17, 46, 47, 48, 51, 56, 57, 59, 60, 61, 62, 68, 72, 74, 108, 109, 110, 127, 144, 145, 146, 147, 150, 151, 162, 171, 185, 187, 213, 214, 216, 220, 221, 222, 227, 232, 233, 236, 237, 238, 244, 264, 266, 272, 273, 274, 281, 282, 290, 295, 296, 303, 311, 340, 373], "spin": [1, 42, 46, 49, 58, 68, 120, 131, 196, 197, 212, 225, 244, 273, 292, 302], "star": [1, 17, 44, 63, 64, 108, 110, 114, 139, 145, 146, 182, 187, 276, 342, 343], "On": [1, 2, 9, 35, 56, 76, 80, 83, 108, 110, 114, 124, 150, 164, 171, 180, 185, 187, 215, 225, 238, 241, 303, 306, 308, 315, 343, 363, 369], "tensor": [1, 38, 39, 48, 56, 57, 58, 59, 62, 65, 112, 119, 134, 138, 145, 146, 147, 149, 150, 151, 162, 169, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 212, 215, 216, 225, 273, 289, 295, 296, 301, 302, 303, 305, 307, 347], "element": [1, 2, 3, 6, 7, 9, 11, 12, 13, 16, 17, 19, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 77, 78, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 97, 98, 99, 101, 108, 110, 111, 112, 113, 115, 116, 118, 119, 120, 122, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 138, 139, 141, 144, 145, 146, 147, 149, 150, 151, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 167, 168, 170, 171, 172, 174, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 190, 191, 192, 193, 196, 197, 198, 211, 212, 213, 214, 216, 218, 221, 222, 225, 227, 228, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 255, 257, 264, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 299, 300, 301, 302, 303, 305, 306, 307, 309, 310, 312, 313, 314, 315, 316, 319, 320, 321, 322, 323, 328, 329, 335, 336, 337, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 358, 359, 362, 364, 366, 369, 371, 373, 374], "cyclic": [1, 2, 3, 23, 24, 25, 71, 80, 83, 89, 91, 92, 101, 102, 108, 129, 130, 131, 138, 152, 160, 164, 172, 174, 237, 275, 278, 320, 323, 332, 348, 359], "siev": [1, 10], "phenomenon": [1, 354], "de": [1, 9, 23, 80, 98, 101, 103, 141, 146, 159, 169, 170, 171, 187, 188, 255, 257, 303, 308, 314, 346, 356, 362, 363], "bruijn": [1, 103], "degre": [1, 16, 17, 19, 25, 33, 70, 89, 96, 103, 108, 110, 111, 113, 119, 120, 121, 124, 129, 133, 134, 144, 145, 146, 147, 149, 151, 158, 160, 164, 172, 187, 225, 227, 235, 238, 239, 241, 268, 273, 284, 285, 286, 288, 290, 294, 296, 300, 301, 302, 303, 310, 315, 323, 342, 346, 348, 350, 354, 359, 361, 362, 374], "derang": [1, 26, 103, 172, 315], "descent": [1, 3, 4, 9, 16, 25, 26, 29, 30, 101, 110, 114, 120, 127, 141, 143, 144, 145, 146, 159, 167, 172, 186, 196, 232, 234, 238, 242, 270, 274, 297, 303, 343, 346, 348, 359], "balanc": [1, 75, 77, 80, 81, 82, 83, 89, 91, 101, 139, 156, 172, 276, 359], "incomplet": [1, 75, 77, 80, 81, 83, 89, 91, 92, 101, 350, 362], "block": [1, 9, 17, 26, 51, 54, 58, 75, 79, 80, 81, 82, 83, 87, 88, 89, 91, 92, 93, 95, 96, 97, 99, 108, 109, 138, 141, 160, 161, 164, 172, 180, 182, 193, 226, 268, 278, 279, 280, 303, 310, 327, 343, 347, 354, 359, 365, 368, 369], "bibd": [1, 75, 80, 83, 89, 92, 94], "resolv": [1, 75, 80, 89, 91, 92, 362], "rbibd": [1, 75, 80], "group": [1, 3, 11, 16, 17, 22, 24, 25, 26, 30, 33, 34, 37, 49, 50, 59, 62, 64, 66, 69, 74, 75, 76, 77, 80, 82, 83, 84, 85, 86, 89, 91, 92, 94, 98, 99, 103, 108, 110, 112, 116, 131, 132, 138, 139, 141, 145, 146, 147, 151, 156, 160, 162, 164, 169, 170, 171, 172, 180, 182, 185, 186, 187, 188, 190, 216, 221, 225, 226, 227, 229, 234, 235, 236, 237, 238, 242, 243, 244, 255, 257, 265, 268, 271, 273, 276, 277, 280, 281, 287, 300, 302, 303, 304, 305, 306, 308, 310, 315, 316, 318, 320, 324, 325, 327, 328, 329, 331, 334, 340, 346, 347, 348, 350, 352, 354, 373], "divis": [1, 26, 75, 82, 92, 145, 271, 273, 285, 300, 301, 303, 305, 369], "gdd": [1, 75, 80, 82, 92, 94], "cover": [1, 3, 6, 33, 34, 66, 75, 76, 80, 81, 82, 89, 92, 103, 120, 130, 131, 137, 138, 139, 141, 172, 180, 182, 183, 186, 187, 225, 232, 233, 236, 240, 340, 349, 350, 354, 359, 365], "arrai": [1, 9, 19, 32, 55, 72, 75, 77, 80, 82, 83, 90, 102, 103, 115, 116, 122, 138, 139, 157, 158, 173, 212, 215, 216, 217, 227, 266, 276, 314, 346, 357, 362, 366], "ca": [1, 77, 80, 146, 235, 310, 365, 372], "subset": [1, 3, 9, 17, 19, 24, 25, 26, 28, 30, 39, 48, 51, 54, 59, 60, 68, 70, 74, 75, 76, 77, 83, 85, 88, 89, 91, 92, 95, 97, 99, 100, 108, 114, 118, 119, 128, 129, 130, 136, 137, 139, 141, 144, 145, 146, 150, 151, 160, 162, 172, 180, 182, 186, 187, 190, 211, 225, 232, 237, 239, 240, 242, 278, 280, 309, 317, 329, 343, 346, 359, 364, 374], "v": [1, 2, 6, 9, 10, 11, 17, 22, 25, 28, 30, 33, 39, 49, 50, 55, 56, 58, 59, 60, 66, 75, 76, 77, 78, 80, 82, 83, 86, 88, 89, 91, 92, 94, 96, 97, 102, 104, 107, 108, 109, 110, 115, 117, 119, 120, 122, 127, 129, 130, 131, 139, 141, 144, 145, 146, 160, 172, 180, 182, 186, 187, 192, 193, 221, 222, 225, 227, 232, 233, 235, 236, 237, 238, 239, 240, 242, 255, 264, 265, 268, 273, 274, 278, 285, 288, 300, 301, 303, 304, 305, 308, 312, 313, 315, 316, 343, 344, 345, 346, 350, 354, 355, 356, 358, 359, 360, 362, 363, 364, 365, 367, 369, 373], "k": [1, 3, 6, 8, 9, 10, 11, 12, 17, 19, 23, 24, 25, 26, 27, 28, 30, 32, 33, 34, 36, 37, 38, 39, 46, 51, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 68, 71, 72, 73, 74, 75, 76, 77, 78, 80, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 98, 99, 101, 102, 107, 108, 109, 110, 112, 114, 115, 116, 120, 121, 122, 123, 126, 127, 130, 131, 133, 134, 138, 139, 141, 143, 144, 145, 146, 147, 150, 151, 156, 158, 160, 161, 162, 164, 165, 168, 172, 174, 180, 181, 182, 186, 187, 188, 192, 197, 212, 215, 216, 218, 223, 225, 231, 234, 235, 236, 237, 239, 241, 245, 257, 266, 269, 271, 273, 275, 276, 278, 279, 280, 281, 284, 285, 288, 290, 292, 293, 294, 300, 301, 302, 303, 304, 308, 310, 311, 313, 314, 315, 336, 337, 339, 340, 343, 346, 347, 348, 353, 354, 358, 359, 361, 362, 363, 364, 365, 369, 372, 374], "databas": [1, 29, 75, 79, 81, 82, 83, 85, 86, 89, 91, 97, 109, 138, 227, 240, 315], "small": [1, 9, 11, 22, 30, 58, 72, 75, 77, 83, 85, 96, 108, 114, 130, 138, 145, 160, 172, 173, 186, 187, 188, 238, 242, 275, 345, 347, 354, 374], "differ": [1, 2, 6, 9, 11, 13, 19, 23, 26, 30, 34, 36, 55, 57, 65, 68, 71, 72, 74, 75, 76, 80, 82, 85, 88, 89, 90, 91, 95, 97, 99, 101, 102, 108, 110, 114, 115, 118, 120, 122, 124, 125, 130, 133, 138, 139, 141, 144, 145, 146, 150, 151, 156, 158, 159, 160, 162, 164, 169, 171, 172, 180, 182, 187, 192, 193, 211, 212, 216, 222, 225, 226, 227, 228, 231, 232, 235, 236, 241, 264, 271, 272, 273, 275, 276, 277, 278, 302, 303, 307, 311, 312, 314, 315, 323, 337, 342, 343, 344, 346, 347, 348, 350, 352, 354, 356, 358, 359, 362, 363, 374], "famili": [1, 16, 17, 56, 59, 75, 76, 77, 80, 85, 88, 91, 95, 97, 99, 110, 112, 114, 119, 124, 138, 145, 147, 158, 163, 172, 174, 177, 183, 190, 192, 193, 226, 227, 229, 230, 231, 232, 233, 234, 236, 238, 239, 240, 241, 242, 244, 245, 248, 251, 253, 255, 257, 259, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 286, 289, 292, 293, 302, 303, 343, 345, 354, 358], "evenli": [1, 75, 80, 83, 238], "distribut": [1, 9, 11, 30, 75, 80, 83, 108, 130, 139, 159, 160, 180, 182, 186, 187, 278, 346, 354], "field": [1, 16, 17, 19, 25, 26, 30, 47, 59, 74, 75, 77, 79, 83, 84, 96, 99, 101, 103, 108, 109, 110, 111, 112, 113, 114, 119, 127, 133, 144, 145, 146, 147, 149, 150, 151, 159, 160, 163, 168, 172, 180, 181, 182, 185, 187, 192, 193, 221, 226, 228, 230, 234, 236, 239, 241, 242, 243, 244, 251, 259, 264, 271, 273, 274, 284, 285, 286, 288, 289, 290, 292, 293, 294, 296, 299, 300, 301, 302, 303, 312, 319, 322, 323, 329, 330, 332, 335, 336, 343, 344, 354, 362, 363, 374], "extern": [1, 46, 75, 77, 183], "represent": [1, 11, 13, 22, 26, 29, 37, 46, 49, 54, 55, 56, 58, 66, 75, 77, 79, 96, 99, 100, 101, 108, 112, 116, 131, 134, 139, 145, 146, 154, 156, 158, 159, 160, 162, 164, 172, 174, 187, 192, 193, 211, 212, 216, 222, 225, 227, 228, 236, 239, 240, 241, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 265, 266, 267, 268, 269, 270, 271, 273, 274, 287, 292, 293, 300, 302, 303, 304, 314, 315, 316, 340, 343, 347, 348, 354, 357, 359, 362, 363, 369, 371, 374], "generalis": [1, 75, 162, 164, 169, 170, 347, 348], "quadrangl": [1, 75, 77, 89], "spread": [1, 75, 89], "e": [1, 2, 3, 9, 10, 11, 17, 19, 22, 23, 24, 26, 33, 36, 37, 38, 39, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 69, 72, 73, 74, 75, 76, 77, 80, 82, 83, 84, 85, 88, 91, 92, 93, 94, 95, 96, 97, 99, 101, 102, 107, 108, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 125, 130, 133, 134, 138, 139, 141, 144, 145, 146, 147, 149, 151, 153, 154, 156, 158, 160, 162, 164, 171, 172, 173, 174, 176, 180, 181, 182, 183, 185, 187, 188, 192, 193, 211, 212, 214, 215, 216, 217, 218, 220, 221, 225, 226, 227, 229, 230, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 244, 245, 248, 251, 253, 257, 259, 264, 265, 266, 270, 271, 273, 274, 275, 276, 278, 280, 284, 285, 288, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 310, 311, 312, 314, 315, 319, 322, 323, 330, 331, 332, 333, 336, 337, 339, 343, 345, 346, 347, 348, 349, 350, 353, 354, 356, 358, 359, 361, 362, 363, 365, 366, 367, 369, 372, 373], "hypergraph": [1, 75, 97, 187], "mutual": [1, 74, 75, 80, 91, 92, 93, 122, 138, 160, 172, 182, 238, 276, 362], "orthogon": [1, 39, 66, 74, 75, 77, 78, 80, 82, 99, 102, 125, 138, 171, 185, 221, 225, 227, 238, 240, 242, 243, 268, 270, 272, 273, 274, 281, 284, 286, 289, 293, 300, 302, 303, 343, 344, 363], "latin": [1, 75, 80, 91, 92, 93, 103, 135], "squar": [1, 6, 10, 17, 19, 23, 26, 75, 76, 77, 80, 82, 83, 91, 92, 93, 97, 101, 103, 110, 115, 116, 127, 135, 138, 146, 147, 149, 151, 156, 158, 159, 160, 187, 192, 193, 225, 229, 236, 241, 242, 244, 273, 289, 292, 295, 296, 301, 303, 305, 310, 312, 314, 315, 316, 346, 350, 354, 359, 362, 363, 365, 366, 367], "mol": [1, 75, 80, 82, 91, 92], "oa": [1, 75, 77, 78, 80, 82, 92, 93, 99], "build": [1, 2, 3, 7, 26, 33, 54, 58, 72, 75, 76, 77, 80, 82, 83, 84, 85, 88, 89, 90, 91, 93, 94, 95, 96, 101, 108, 112, 129, 131, 134, 138, 160, 163, 173, 187, 193, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 218, 227, 232, 238, 284, 302, 306, 311, 336, 339, 340, 354, 358, 369], "construct": [1, 2, 3, 7, 11, 13, 16, 17, 19, 23, 24, 25, 26, 36, 38, 39, 42, 46, 53, 55, 56, 58, 62, 63, 68, 74, 75, 76, 77, 79, 80, 83, 84, 87, 88, 89, 90, 91, 94, 95, 97, 98, 99, 101, 108, 109, 110, 111, 112, 113, 114, 116, 118, 120, 122, 124, 127, 130, 131, 134, 138, 139, 144, 145, 146, 147, 149, 151, 155, 156, 160, 168, 169, 170, 172, 173, 180, 182, 185, 187, 190, 191, 193, 197, 211, 212, 213, 214, 215, 217, 219, 221, 222, 225, 226, 227, 229, 230, 231, 232, 234, 235, 236, 237, 238, 240, 241, 242, 244, 251, 259, 264, 265, 266, 267, 269, 271, 273, 274, 276, 280, 296, 297, 302, 303, 307, 308, 310, 311, 313, 314, 315, 316, 332, 338, 342, 343, 344, 345, 346, 347, 348, 349, 356, 358, 359, 361, 365, 366, 369, 373, 374], "steiner": [1, 75, 76, 81, 89, 94], "quadrupl": [1, 75, 89, 138, 312], "isomorph": [1, 2, 16, 22, 23, 24, 33, 37, 39, 49, 56, 57, 58, 59, 60, 62, 68, 75, 77, 80, 83, 85, 89, 114, 139, 144, 145, 156, 162, 163, 172, 181, 182, 186, 187, 188, 200, 212, 216, 225, 227, 229, 232, 233, 236, 242, 265, 268, 270, 273, 284, 302, 322, 331, 332, 365], "diagram": [1, 3, 4, 9, 11, 12, 14, 17, 23, 34, 36, 56, 103, 114, 122, 130, 131, 156, 158, 160, 164, 169, 172, 178, 179, 182, 186, 187, 196, 197, 211, 212, 213, 214, 217, 220, 225, 226, 227, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 265, 266, 267, 268, 269, 270, 271, 273, 274, 276, 278, 303, 307, 313, 314, 316, 342, 343, 346, 348, 354], "exact": [1, 79, 103, 112, 122, 130, 136, 137, 139, 238, 303, 346, 350], "problem": [1, 9, 26, 72, 83, 89, 94, 96, 103, 108, 124, 136, 137, 139, 187, 303, 315, 337, 354, 362, 363], "via": [1, 23, 39, 46, 68, 85, 103, 104, 105, 109, 114, 120, 139, 141, 145, 146, 151, 156, 158, 160, 164, 172, 192, 193, 200, 216, 227, 237, 286, 290, 294, 299, 300, 303, 346, 347, 354, 359, 374], "danc": [1, 83, 103, 135, 139, 315], "link": [1, 6, 72, 77, 83, 103, 115, 130, 135, 139, 140, 172, 278, 315, 352, 354, 365], "dyck": [1, 6, 11, 19, 103, 124, 130, 153, 155, 156, 158, 159, 160, 186, 349, 354, 363], "substitut": [1, 11, 121, 187, 197, 293, 302, 354, 357, 369], "over": [1, 2, 6, 9, 11, 16, 17, 19, 25, 26, 27, 30, 33, 47, 54, 55, 56, 59, 72, 74, 76, 77, 80, 83, 85, 86, 89, 90, 91, 92, 96, 97, 98, 99, 101, 107, 108, 109, 110, 111, 112, 113, 114, 116, 118, 119, 120, 124, 127, 128, 129, 130, 131, 133, 136, 138, 140, 141, 143, 144, 145, 146, 147, 149, 150, 151, 154, 159, 160, 163, 164, 171, 172, 180, 181, 182, 185, 187, 188, 192, 193, 211, 216, 221, 225, 226, 228, 230, 234, 236, 239, 240, 241, 242, 243, 244, 271, 273, 274, 276, 277, 278, 284, 285, 286, 288, 289, 290, 292, 293, 294, 296, 298, 299, 300, 301, 302, 303, 304, 305, 308, 310, 312, 314, 315, 316, 323, 329, 332, 335, 336, 340, 343, 344, 346, 348, 350, 354, 355, 356, 359, 360, 361, 362, 363, 364, 365, 366, 369, 372, 374], "unit": [1, 7, 17, 59, 97, 99, 110, 111, 130, 138, 145, 153, 158, 159, 161, 181, 187, 227, 232, 274, 277, 290, 303, 307, 343, 346, 350, 354], "cube": [1, 174, 187, 315, 350, 354, 359, 362, 363], "face": [1, 24, 186, 187, 232], "rauzi": [1, 362, 363], "fractal": [1, 362, 363], "tool": [1, 7, 30, 92, 124, 158, 171, 242, 342, 354, 369], "modulo": [1, 10, 34, 64, 76, 80, 83, 85, 91, 103, 131, 139, 160, 172, 232, 273, 285, 290, 300, 301, 303, 305, 311, 346, 347, 350, 356, 359, 369], "action": [1, 2, 6, 9, 33, 34, 36, 37, 38, 39, 47, 48, 49, 50, 51, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 68, 69, 70, 77, 83, 91, 103, 115, 131, 139, 145, 151, 160, 162, 163, 169, 172, 183, 197, 212, 215, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 244, 273, 274, 277, 278, 285, 293, 300, 301, 303, 305, 307, 310, 316, 318, 320, 325, 327, 328, 331, 334, 343, 344, 346, 348, 350, 359], "bell": [1, 26, 35, 99, 108, 278, 280, 315], "uppuluri": [1, 35, 315], "carpent": [1, 35, 315], "number": [1, 2, 6, 8, 9, 10, 11, 12, 13, 16, 17, 19, 21, 22, 23, 25, 26, 27, 30, 31, 32, 33, 34, 35, 37, 39, 50, 51, 54, 56, 58, 59, 71, 72, 73, 74, 76, 77, 79, 80, 82, 83, 84, 85, 86, 89, 90, 91, 92, 96, 97, 98, 99, 101, 102, 109, 111, 112, 113, 114, 115, 116, 119, 120, 121, 122, 124, 126, 130, 131, 133, 134, 136, 138, 139, 141, 143, 144, 145, 146, 147, 149, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 164, 171, 172, 174, 180, 182, 183, 186, 187, 188, 192, 196, 197, 207, 211, 212, 215, 216, 217, 218, 225, 226, 227, 228, 229, 230, 232, 235, 237, 238, 239, 242, 244, 245, 248, 251, 253, 255, 257, 259, 261, 262, 266, 274, 275, 276, 278, 279, 280, 284, 286, 293, 297, 301, 302, 303, 307, 308, 310, 311, 312, 313, 314, 315, 323, 326, 332, 333, 336, 337, 339, 341, 342, 343, 345, 346, 347, 348, 349, 350, 352, 354, 356, 358, 359, 361, 362, 363, 364, 365, 368, 369, 372, 374], "brent": 1, "yorgei": 1, "algorithm": [1, 2, 3, 6, 8, 9, 11, 16, 17, 19, 21, 22, 24, 26, 27, 28, 30, 33, 36, 39, 46, 51, 59, 67, 71, 73, 77, 83, 89, 98, 99, 100, 101, 105, 108, 109, 114, 116, 118, 120, 121, 122, 124, 127, 131, 134, 136, 137, 138, 139, 146, 152, 159, 160, 165, 172, 173, 174, 180, 182, 183, 186, 187, 188, 192, 193, 211, 215, 216, 219, 227, 232, 237, 240, 242, 271, 273, 274, 276, 277, 278, 280, 291, 303, 311, 314, 315, 323, 338, 340, 345, 346, 356, 362, 363, 365, 366, 369, 374], "vector": [1, 3, 9, 17, 19, 22, 25, 26, 28, 39, 41, 48, 56, 59, 61, 67, 74, 77, 80, 83, 91, 100, 102, 103, 104, 108, 109, 111, 112, 113, 119, 121, 124, 131, 137, 138, 144, 145, 146, 158, 160, 172, 186, 187, 192, 193, 211, 213, 221, 225, 227, 232, 233, 234, 235, 236, 238, 239, 240, 242, 243, 244, 245, 268, 271, 273, 274, 285, 300, 301, 303, 305, 306, 307, 340, 343, 344, 346, 352, 354, 359, 362, 363], "multiset": [1, 9, 26, 28, 73, 82, 89, 91, 146, 172, 275, 280, 308, 310, 336, 339, 355, 361, 364], "coxet": [1, 3, 11, 24, 25, 132, 168, 172, 186, 187, 190, 226, 227, 231, 232, 235, 239, 240, 242, 245, 248, 251, 253, 255, 257, 259, 261, 262, 265, 268, 269, 274, 276, 306, 340, 346], "common": [1, 9, 17, 19, 22, 33, 47, 52, 68, 80, 92, 108, 146, 149, 175, 177, 180, 182, 186, 187, 193, 219, 238, 265, 280, 286, 289, 292, 303, 313, 315, 350, 352, 356, 357, 359, 367, 372], "free": [1, 3, 4, 15, 16, 17, 22, 27, 99, 119, 120, 144, 145, 146, 147, 151, 159, 160, 171, 172, 187, 191, 227, 237, 241, 242, 243, 244, 271, 272, 275, 297, 302, 303, 305, 312, 314, 315, 340, 346, 354, 356, 359, 361, 362, 363, 366, 369], "dendriform": [1, 4, 11, 17, 110, 146], "pre": [1, 2, 4, 119, 130, 134, 141, 186, 187, 275, 306], "pack": [1, 6, 17, 83, 89, 110, 280, 350], "loop": [1, 6, 12, 22, 33, 46, 85, 89, 99, 107, 108, 160, 171, 180, 183, 187, 221, 242, 354, 356, 359, 366], "gelfand": [1, 6, 53, 143, 146, 147, 170, 303, 346, 347], "tsetlin": [1, 6, 53, 170, 346, 347], "pattern": [1, 6, 8, 53, 101, 115, 130, 170, 172, 186, 346], "acycl": [1, 19, 22, 46, 49, 58, 66, 89, 103, 130, 179, 180, 186, 187, 313], "grai": [1, 26, 27, 102, 103, 109, 187, 238, 350], "growth": [1, 14, 51, 103, 105, 169, 278, 354, 359, 362], "grade": [1, 9, 14, 16, 17, 110, 119, 124, 127, 128, 144, 145, 146, 151, 153, 159, 160, 162, 164, 172, 182, 187, 235, 238, 282, 283, 288, 290, 293, 295, 296, 298, 300, 302, 303, 304, 346, 347, 348, 352], "grossman": [1, 15, 113, 275], "larson": [1, 15, 113, 275], "hall": [1, 4, 26, 80, 108, 138, 143, 146, 171, 273, 281, 284, 285, 289, 291, 292, 293, 296, 299, 300, 301, 302, 303, 305], "polynomi": [1, 4, 10, 11, 15, 19, 22, 25, 26, 35, 70, 83, 99, 101, 108, 111, 113, 114, 134, 141, 146, 147, 151, 159, 160, 163, 171, 172, 182, 185, 187, 188, 197, 220, 228, 234, 237, 239, 241, 242, 273, 276, 281, 284, 285, 288, 289, 290, 292, 294, 296, 300, 301, 302, 303, 310, 313, 315, 329, 332, 335, 336, 342, 343, 352, 354, 362, 363, 374], "The": [1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 16, 17, 19, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 180, 181, 182, 183, 185, 186, 187, 188, 189, 191, 192, 193, 196, 197, 199, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 225, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 247, 255, 257, 263, 264, 265, 266, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 321, 323, 324, 326, 330, 332, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 354, 356, 358, 359, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374], "hillman": [1, 346], "grassl": [1, 346], "correspond": [1, 2, 3, 6, 9, 10, 11, 12, 14, 16, 17, 19, 23, 24, 25, 30, 32, 33, 34, 36, 38, 39, 46, 51, 54, 56, 57, 58, 59, 60, 62, 63, 64, 68, 69, 71, 72, 73, 74, 76, 80, 83, 89, 91, 93, 97, 98, 99, 100, 101, 102, 103, 108, 110, 111, 114, 115, 116, 118, 119, 120, 124, 125, 126, 127, 130, 131, 133, 134, 136, 137, 138, 139, 141, 144, 145, 146, 151, 153, 156, 158, 159, 160, 161, 162, 164, 171, 172, 174, 182, 187, 192, 193, 196, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 225, 226, 227, 231, 232, 235, 236, 238, 239, 240, 241, 242, 244, 255, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 277, 278, 280, 286, 287, 290, 291, 293, 294, 296, 297, 302, 303, 306, 307, 310, 312, 313, 314, 315, 316, 323, 332, 333, 341, 343, 344, 346, 347, 348, 354, 359, 361, 362, 363, 365, 369, 373], "constraint": [1, 9, 11, 19, 22, 30, 50, 54, 83, 92, 120, 127, 129, 136, 138, 141, 156, 158, 160, 180, 216, 238, 276, 307, 313, 345, 354], "base": [1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 16, 17, 19, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 76, 79, 80, 83, 85, 86, 88, 89, 91, 92, 96, 97, 98, 99, 100, 101, 102, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 139, 140, 141, 142, 145, 146, 147, 148, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 162, 163, 164, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 192, 193, 194, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 352, 353, 354, 355, 356, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374], "class": [1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 16, 17, 19, 20, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 80, 83, 86, 88, 89, 91, 92, 94, 96, 97, 98, 99, 100, 101, 102, 103, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 139, 140, 141, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 191, 194, 196, 197, 198, 200, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 350, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374], "front": [1, 145, 297], "end": [1, 9, 23, 26, 38, 39, 48, 51, 55, 57, 59, 60, 61, 62, 65, 68, 69, 77, 83, 98, 99, 102, 108, 115, 116, 117, 121, 122, 123, 124, 130, 138, 139, 141, 145, 146, 147, 154, 157, 158, 159, 160, 162, 164, 167, 172, 181, 186, 187, 188, 211, 216, 217, 223, 225, 227, 229, 231, 232, 266, 276, 278, 286, 307, 342, 343, 345, 346, 347, 356, 359, 362, 363, 365, 368, 369], "invers": [1, 6, 9, 11, 17, 22, 29, 33, 34, 36, 53, 56, 58, 69, 83, 101, 102, 110, 120, 122, 130, 145, 146, 153, 154, 156, 159, 172, 180, 181, 183, 191, 197, 207, 212, 232, 233, 234, 236, 239, 241, 242, 273, 276, 280, 284, 297, 302, 312, 315, 323, 343, 346, 348, 359, 366], "lexicograph": [1, 28, 30, 46, 71, 101, 104, 107, 127, 129, 130, 143, 146, 152, 160, 164, 165, 172, 176, 186, 187, 255, 257, 275, 276, 310, 338, 340, 346, 348, 355, 356, 359, 361, 362], "manipul": [1, 2, 6, 30, 103, 115, 158, 160, 187, 227, 238, 241, 244, 302, 303, 342, 354], "non": [1, 3, 6, 9, 11, 15, 16, 19, 21, 22, 23, 24, 26, 30, 33, 39, 46, 57, 60, 65, 68, 69, 72, 73, 74, 77, 80, 83, 89, 97, 98, 99, 101, 103, 104, 107, 108, 109, 112, 113, 114, 115, 120, 123, 124, 128, 131, 134, 138, 141, 143, 144, 146, 147, 149, 152, 158, 159, 160, 162, 164, 170, 171, 172, 180, 182, 186, 187, 188, 191, 193, 197, 210, 211, 212, 213, 214, 215, 216, 218, 226, 227, 229, 230, 234, 236, 237, 239, 240, 241, 242, 244, 247, 253, 265, 266, 267, 269, 271, 276, 278, 281, 286, 290, 300, 303, 305, 307, 308, 310, 311, 312, 313, 314, 315, 325, 336, 339, 341, 342, 343, 346, 347, 348, 350, 352, 354, 355, 356, 358, 359, 361, 362, 363, 368, 369, 372], "neg": [1, 3, 16, 19, 23, 25, 26, 30, 39, 55, 60, 67, 68, 74, 83, 89, 98, 99, 101, 103, 107, 108, 109, 120, 121, 124, 128, 131, 134, 139, 144, 145, 149, 152, 158, 160, 161, 164, 167, 170, 186, 188, 189, 193, 197, 215, 225, 226, 227, 237, 239, 242, 244, 247, 255, 257, 270, 271, 274, 278, 286, 290, 300, 303, 310, 313, 315, 323, 336, 340, 341, 342, 346, 347, 348, 350, 354, 355, 356, 358, 359, 362, 363, 368, 369, 372], "tamari": [1, 11, 101, 175, 182, 186], "interv": [1, 11, 19, 59, 64, 101, 123, 172, 175, 180, 181, 182, 186, 187, 238, 240, 276, 280, 306, 311, 314, 340, 346, 349, 354, 362], "strong": [1, 14, 34, 104, 129, 141, 172, 239, 240, 362], "weak": [1, 3, 9, 11, 14, 34, 89, 98, 120, 122, 130, 133, 141, 146, 172, 186, 187, 218, 240, 242, 274, 306, 314, 315, 342, 346, 347, 361], "kazhdan": [1, 114, 185, 187, 292], "lusztig": [1, 56, 62, 63, 64, 114, 185, 187, 212, 215, 219, 236, 241, 273, 292], "kei": [1, 4, 6, 9, 11, 12, 16, 17, 19, 21, 26, 48, 52, 55, 56, 59, 60, 70, 89, 99, 102, 108, 110, 111, 112, 113, 119, 120, 131, 134, 136, 139, 141, 145, 147, 151, 158, 166, 172, 177, 179, 180, 182, 183, 184, 186, 187, 222, 225, 234, 236, 237, 239, 241, 242, 244, 266, 272, 273, 274, 278, 280, 294, 302, 303, 309, 310, 332, 336, 340, 346, 347, 350, 353, 354, 359, 365, 366, 369, 373], "knutson": [1, 340], "tao": 1, "puzzl": [1, 107], "intern": [1, 9, 11, 17, 26, 68, 76, 80, 88, 89, 100, 107, 108, 115, 124, 130, 131, 135, 139, 141, 144, 145, 146, 149, 151, 158, 165, 180, 187, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 216, 217, 218, 227, 235, 236, 269, 275, 284, 293, 302, 303, 307, 309, 313, 332, 357, 362], "wrapper": [1, 3, 19, 26, 29, 103, 135, 136, 138, 139, 160, 225, 333], "hadamard": [1, 77, 83, 103, 135, 192], "minimaj": [1, 42], "quasisymmetr": [1, 17, 110, 142, 143, 144, 145, 151, 159, 187, 303], "variabl": [1, 9, 11, 15, 19, 22, 23, 24, 26, 59, 60, 72, 99, 108, 109, 111, 113, 116, 119, 127, 130, 133, 136, 139, 144, 145, 146, 147, 149, 160, 172, 182, 186, 187, 188, 189, 193, 197, 216, 236, 241, 243, 276, 277, 284, 285, 286, 288, 294, 296, 300, 301, 302, 303, 305, 310, 313, 314, 323, 336, 342, 343, 346, 352, 354, 358, 374], "ncsym": [1, 145, 148, 150, 151], "necklac": [1, 103, 172], "decreas": [1, 3, 17, 19, 30, 32, 50, 72, 101, 103, 116, 120, 124, 125, 127, 128, 130, 131, 143, 145, 146, 159, 160, 165, 170, 172, 174, 187, 215, 216, 237, 242, 276, 280, 285, 300, 301, 303, 305, 306, 307, 310, 337, 338, 342, 346, 354, 363, 365], "park": [1, 101, 103], "nu": [1, 25, 98, 121, 134, 151, 160, 162, 164, 172, 200, 205, 215, 216, 242, 243, 273, 286, 291, 293, 296, 298, 302, 303, 304, 312, 314], "lattic": [1, 6, 11, 22, 46, 47, 48, 51, 57, 59, 60, 61, 62, 68, 99, 101, 114, 115, 120, 122, 130, 131, 145, 151, 154, 159, 160, 164, 172, 174, 175, 180, 181, 185, 187, 190, 213, 214, 220, 225, 227, 232, 233, 234, 235, 236, 238, 239, 244, 245, 251, 255, 257, 259, 264, 266, 268, 270, 273, 274, 278, 303, 306, 336, 340, 346, 347, 354, 363], "parallelogram": [1, 103, 156], "polyomino": [1, 98, 156, 350], "friez": 1, "semistandard": [1, 3, 6, 11, 16, 53, 54, 68, 116, 120, 131, 186, 197, 212, 276, 314, 341, 346, 348, 359, 366], "plane": [1, 11, 23, 76, 77, 79, 80, 82, 83, 89, 91, 92, 97, 98, 122, 160, 168, 182, 186, 227, 238, 278, 346, 354, 363], "kleshchev": [1, 346, 348], "shift": [1, 2, 11, 14, 17, 39, 48, 62, 71, 91, 102, 108, 110, 120, 127, 139, 152, 162, 172, 177, 193, 196, 236, 238, 273, 285, 300, 301, 303, 305, 340, 359, 364, 372, 374], "tupl": [1, 2, 3, 9, 11, 14, 17, 19, 21, 22, 23, 25, 26, 27, 30, 33, 34, 37, 39, 41, 47, 53, 56, 58, 59, 64, 66, 68, 70, 74, 77, 82, 83, 86, 89, 93, 99, 101, 102, 103, 108, 109, 112, 114, 115, 118, 120, 123, 126, 128, 130, 131, 134, 138, 139, 140, 141, 145, 146, 147, 152, 156, 157, 160, 161, 162, 163, 170, 172, 173, 174, 176, 180, 182, 186, 187, 191, 192, 193, 197, 215, 216, 221, 226, 231, 232, 233, 234, 235, 238, 241, 242, 266, 274, 275, 276, 280, 303, 306, 310, 311, 312, 313, 336, 338, 339, 340, 342, 345, 346, 347, 348, 350, 354, 358, 359, 362, 363, 365, 366, 367, 368, 369, 372, 373], "iter": [1, 2, 6, 9, 11, 13, 17, 19, 22, 25, 26, 27, 30, 46, 48, 57, 65, 72, 85, 86, 87, 89, 99, 100, 101, 102, 103, 107, 108, 109, 112, 114, 118, 123, 124, 125, 126, 127, 128, 129, 130, 131, 136, 140, 141, 145, 151, 154, 156, 158, 159, 160, 164, 171, 172, 180, 182, 186, 187, 188, 191, 192, 193, 211, 216, 226, 231, 238, 239, 240, 241, 242, 274, 275, 276, 278, 280, 310, 313, 314, 333, 336, 337, 338, 341, 346, 347, 348, 350, 355, 356, 357, 358, 359, 360, 362, 363, 365, 366, 369, 372], "perfect": [1, 10, 11, 12, 27, 57, 59, 99, 103, 115, 120, 167, 172, 242, 315, 346], "match": [1, 12, 17, 23, 27, 39, 99, 101, 103, 108, 110, 115, 120, 151, 152, 167, 172, 187, 234, 236, 238, 241, 242, 264, 343, 346, 359, 361], "file": [1, 20, 21, 22, 29, 76, 86, 103, 108, 138, 139, 152, 154, 199, 238, 286, 306, 323, 332, 346, 363, 372], "d": [1, 3, 6, 9, 11, 13, 16, 19, 22, 23, 28, 33, 36, 39, 46, 47, 49, 53, 54, 56, 57, 58, 59, 60, 66, 68, 69, 72, 73, 74, 76, 77, 79, 80, 83, 85, 86, 87, 88, 89, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 107, 108, 116, 120, 127, 129, 130, 136, 138, 139, 141, 145, 146, 151, 152, 154, 159, 160, 162, 171, 172, 173, 174, 175, 180, 182, 183, 184, 186, 187, 191, 192, 193, 200, 207, 209, 211, 212, 215, 216, 218, 219, 220, 225, 226, 227, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 244, 264, 265, 266, 267, 271, 273, 274, 275, 278, 280, 284, 296, 301, 302, 303, 305, 306, 310, 311, 315, 316, 328, 332, 336, 340, 343, 345, 346, 348, 350, 352, 354, 356, 358, 359, 362, 363, 365, 369, 372, 373, 374], "complet": [1, 6, 11, 22, 26, 46, 72, 74, 76, 80, 89, 91, 92, 101, 108, 109, 123, 124, 131, 134, 139, 143, 144, 145, 146, 147, 149, 151, 157, 160, 163, 166, 172, 175, 180, 183, 184, 186, 187, 188, 225, 239, 273, 282, 284, 285, 287, 288, 290, 294, 295, 296, 300, 301, 302, 303, 305, 315, 343, 346, 347, 350, 352, 356, 359, 374], "mobil": [1, 175, 183, 186], "semilattic": [1, 175, 180, 186, 187, 349], "etc": [1, 2, 7, 9, 11, 17, 30, 56, 86, 91, 99, 101, 108, 112, 124, 131, 134, 139, 158, 159, 160, 172, 187, 227, 232, 234, 238, 242, 265, 269, 284, 302, 313, 314, 315, 343, 346, 354, 363, 366], "forest": [1, 11, 119, 130, 159, 175, 177, 180, 183, 187, 323, 324, 338, 354], "hass": [1, 11, 114, 130, 156, 178, 179, 182, 187, 354], "extens": [1, 2, 11, 19, 22, 72, 77, 86, 102, 105, 120, 130, 160, 168, 175, 180, 181, 182, 184, 186, 187, 227, 232, 233, 238, 240, 274, 278, 280, 286, 302, 303, 323, 354, 362, 366], "m\u00f6biu": [1, 17, 145, 175, 180, 181, 182, 187, 188, 315, 352], "q": [1, 3, 9, 10, 11, 12, 16, 17, 19, 21, 22, 24, 25, 26, 35, 51, 54, 55, 58, 59, 67, 68, 69, 70, 74, 76, 77, 80, 82, 83, 85, 87, 88, 89, 91, 92, 93, 94, 97, 98, 99, 101, 102, 108, 113, 120, 121, 130, 132, 133, 138, 139, 141, 144, 146, 147, 151, 154, 159, 160, 162, 164, 171, 172, 173, 174, 176, 180, 182, 183, 185, 186, 187, 196, 205, 216, 227, 232, 233, 234, 236, 238, 239, 241, 242, 243, 271, 272, 276, 278, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 300, 301, 302, 303, 306, 307, 310, 311, 313, 314, 332, 340, 343, 346, 347, 349, 350, 354, 358, 359, 365, 366, 369], "analogu": [1, 35, 36, 56, 131, 145, 151, 162, 182, 189, 221, 238, 282, 296, 303, 354], "bernoulli": [1, 26, 35, 172], "recogniz": [1, 108, 114, 193], "seri": [1, 10, 17, 59, 92, 110, 116, 145, 146, 147, 151, 187, 188, 193, 236, 237, 239, 241, 303, 305, 330, 332, 352, 354, 374], "regular": [1, 6, 22, 26, 68, 69, 83, 89, 97, 101, 108, 138, 160, 162, 164, 168, 182, 192, 217, 238, 239, 242, 305, 310, 316, 365, 369], "restrict": [1, 6, 9, 17, 19, 22, 39, 51, 76, 100, 101, 103, 108, 113, 119, 123, 124, 131, 136, 138, 141, 145, 146, 150, 160, 162, 164, 172, 174, 186, 212, 225, 227, 229, 230, 235, 237, 242, 244, 271, 273, 275, 276, 278, 280, 300, 302, 303, 307, 308, 314, 323, 326, 332, 336, 343, 344, 346, 347, 348, 350, 354, 362], "ribbon": [1, 14, 17, 30, 120, 131, 141, 144, 145, 146, 147, 160, 184, 186, 292, 313, 314], "shape": [1, 2, 3, 11, 16, 23, 29, 30, 32, 36, 37, 39, 41, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 58, 59, 60, 68, 69, 98, 99, 101, 116, 120, 122, 130, 131, 133, 139, 143, 145, 146, 147, 150, 151, 157, 160, 164, 169, 172, 177, 186, 187, 190, 193, 197, 212, 213, 216, 217, 218, 227, 238, 242, 276, 278, 280, 291, 293, 297, 301, 302, 303, 307, 312, 313, 314, 341, 342, 343, 346, 347, 348, 352], "rig": [1, 4, 52, 56, 58, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 218, 219, 291], "configur": [1, 4, 6, 52, 56, 58, 59, 77, 115, 124, 130, 158, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 217, 218, 219, 236, 312, 340, 363], "biject": [1, 3, 6, 8, 9, 11, 17, 30, 34, 39, 53, 56, 58, 70, 74, 99, 101, 108, 115, 116, 120, 122, 124, 130, 134, 141, 153, 156, 158, 160, 161, 164, 167, 171, 172, 174, 186, 194, 212, 215, 216, 217, 218, 219, 232, 233, 235, 237, 242, 274, 276, 278, 280, 307, 310, 312, 341, 346, 347, 348, 354, 359, 366], "between": [1, 2, 3, 6, 8, 9, 11, 16, 17, 19, 22, 25, 26, 29, 30, 33, 34, 37, 50, 56, 59, 74, 83, 91, 96, 99, 101, 102, 108, 111, 113, 116, 119, 120, 122, 124, 125, 130, 131, 139, 144, 145, 146, 147, 149, 150, 151, 154, 156, 158, 159, 160, 161, 162, 168, 172, 174, 178, 180, 182, 183, 186, 187, 193, 196, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 215, 216, 218, 222, 227, 232, 235, 236, 238, 240, 241, 243, 244, 247, 264, 271, 272, 276, 278, 280, 283, 284, 286, 289, 293, 296, 300, 301, 302, 303, 305, 307, 312, 343, 346, 347, 349, 350, 352, 354, 359, 363, 366, 367, 372], "margin": [1, 54, 198, 280], "larg": [1, 7, 19, 23, 26, 54, 58, 72, 77, 83, 85, 95, 114, 123, 124, 132, 146, 160, 172, 187, 198, 213, 238, 239, 242, 244, 274, 302, 315, 343, 347, 354, 362, 369], "a_n": [1, 23, 24, 26, 36, 51, 52, 54, 55, 56, 61, 69, 101, 114, 129, 159, 160, 172, 198, 204, 206, 207, 208, 211, 212, 215, 216, 218, 219, 222, 227, 245, 264, 276, 278, 307, 308, 345, 350, 359, 374], "1": [1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 16, 17, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 196, 197, 198, 199, 202, 203, 208, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374], "a_": [1, 6, 26, 34, 42, 51, 56, 60, 62, 91, 101, 108, 116, 127, 138, 151, 160, 162, 164, 172, 180, 182, 198, 211, 212, 215, 216, 225, 226, 227, 231, 232, 238, 242, 247, 266, 272, 276, 278, 303, 315, 340, 343, 345, 346, 347, 359, 369, 374], "2n": [1, 6, 11, 19, 26, 27, 56, 69, 83, 95, 99, 101, 115, 138, 139, 160, 171, 172, 180, 186, 193, 198, 211, 212, 215, 216, 225, 227, 232, 237, 242, 266, 272, 315, 345, 354], "2": [1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 16, 17, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 104, 105, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 196, 197, 198, 199, 201, 205, 207, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374], "dagger": [1, 198, 211, 212, 215, 216, 227, 232, 266], "b_n": [1, 25, 26, 52, 54, 56, 58, 63, 65, 66, 68, 114, 159, 198, 211, 212, 215, 217, 227, 266, 276, 278, 315, 369], "c_n": [1, 26, 39, 52, 54, 56, 58, 172, 198, 202, 203, 209, 211, 212, 216, 227, 266, 315, 354], "d_n": [1, 52, 54, 56, 66, 72, 73, 114, 116, 160, 182, 198, 209, 211, 212, 215, 216, 218, 219, 239, 253, 354, 369], "d_": [1, 25, 56, 72, 73, 74, 77, 91, 99, 116, 138, 182, 198, 211, 212, 216, 225, 227, 266, 284, 323, 354], "n": [1, 2, 3, 6, 8, 9, 10, 11, 12, 16, 17, 19, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 36, 37, 41, 46, 48, 51, 54, 55, 56, 57, 58, 59, 61, 65, 66, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 80, 82, 83, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 104, 105, 108, 109, 110, 113, 114, 115, 116, 118, 120, 121, 122, 124, 126, 127, 128, 129, 130, 133, 134, 138, 139, 140, 141, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 162, 164, 165, 171, 172, 173, 174, 180, 182, 183, 186, 187, 188, 190, 192, 193, 194, 197, 198, 205, 211, 212, 216, 217, 221, 225, 226, 227, 231, 232, 235, 236, 237, 238, 239, 240, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 261, 262, 263, 266, 268, 269, 270, 273, 275, 276, 277, 278, 280, 282, 284, 285, 286, 287, 288, 291, 293, 294, 296, 297, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 318, 323, 324, 326, 332, 336, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 353, 354, 356, 358, 359, 360, 361, 362, 363, 365, 366, 367, 369, 372, 374], "d_4": [1, 56, 98, 198, 210, 211, 212, 225, 227, 266, 273], "3": [1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 16, 17, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 201, 205, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374], "kr": [1, 38, 46, 56, 59, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 212, 215, 216, 217, 218, 219], "kleber": [1, 198, 216, 304], "ambient": [1, 48, 56, 62, 68, 99, 102, 129, 131, 181, 188, 220, 222, 225, 227, 228, 232, 233, 234, 236, 238, 241, 242, 243, 244, 245, 251, 259, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 290, 296, 338, 343, 363], "space": [1, 3, 6, 7, 22, 23, 25, 34, 47, 48, 59, 62, 68, 77, 83, 96, 99, 101, 102, 111, 112, 113, 119, 121, 129, 134, 144, 145, 146, 147, 159, 164, 172, 181, 186, 192, 193, 211, 217, 220, 222, 225, 226, 227, 228, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 244, 245, 251, 259, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 281, 286, 296, 302, 303, 306, 340, 342, 343, 350, 354, 358, 359, 362, 363, 365, 368], "braid": [1, 3, 33, 64, 114, 172, 220, 236, 239, 241, 273, 303, 343, 344], "move": [1, 22, 37, 50, 64, 107, 108, 114, 124, 134, 146, 159, 171, 172, 183, 212, 216, 220, 224, 226, 231, 239, 307, 314, 337, 346, 349, 359, 369], "calcul": [1, 10, 19, 30, 56, 101, 108, 114, 129, 131, 132, 139, 144, 154, 159, 160, 164, 174, 197, 212, 215, 217, 220, 234, 236, 238, 241, 273, 286, 290, 292, 293, 303, 310, 315, 354, 359], "orbit": [1, 6, 9, 33, 70, 99, 104, 115, 127, 129, 169, 220, 236, 239, 242, 244, 266, 273, 303, 310, 362, 363], "branch": [1, 7, 11, 23, 108, 124, 130, 162, 164, 220, 235, 273, 303, 354], "rule": [1, 11, 17, 50, 61, 68, 69, 72, 74, 99, 109, 116, 130, 134, 143, 145, 146, 156, 160, 162, 164, 167, 168, 169, 170, 188, 193, 212, 217, 220, 235, 273, 299, 303, 342, 354, 365, 369], "cartan": [1, 3, 23, 36, 39, 41, 42, 46, 47, 48, 49, 52, 54, 56, 57, 58, 59, 60, 62, 64, 65, 66, 67, 68, 114, 160, 164, 172, 211, 212, 213, 214, 215, 216, 218, 221, 222, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 247, 249, 253, 257, 259, 263, 270, 271, 272, 273, 274, 340, 347], "dynkin": [1, 3, 23, 36, 56, 145, 211, 212, 220, 225, 226, 227, 232, 233, 234, 235, 236, 237, 238, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 265, 266, 267, 268, 269, 270, 271, 273, 274], "heck": [1, 50, 147, 160, 162, 164, 220, 227, 232, 236, 241, 273, 276, 281, 296, 302, 343, 347, 348], "integr": [1, 10, 26, 39, 48, 49, 51, 109, 124, 158, 160, 162, 164, 168, 171, 187, 220, 226, 227, 241, 271, 273, 293, 297, 303, 348], "nonsymmetr": [1, 220, 234, 241, 273], "macdonald": [1, 23, 101, 146, 147, 159, 171, 220, 234, 241, 273, 281, 286, 289, 302, 303, 313, 359], "pieri": [1, 143, 293, 313, 342], "tutori": [1, 40, 220, 225, 242, 244, 271, 273, 302, 303, 354], "visual": [1, 98, 108, 114, 120, 158, 160, 220, 227, 242, 244, 354], "reflect": [1, 2, 3, 25, 34, 49, 58, 59, 69, 98, 118, 120, 134, 158, 160, 164, 172, 174, 221, 225, 226, 227, 228, 232, 235, 236, 237, 238, 241, 242, 243, 244, 270, 271, 273, 274, 302, 303, 311, 313, 340, 348], "real": [1, 29, 99, 102, 116, 122, 168, 172, 186, 220, 228, 232, 238, 239, 242, 273, 274, 330, 340, 348, 354, 359, 362, 363, 369], "super": [1, 14, 16, 17, 36, 41, 68, 69, 74, 103, 110, 123, 145, 146, 149, 183, 185, 220, 227, 268, 276, 290, 296, 303], "untwist": [1, 23, 39, 59, 220, 227, 232, 233, 236, 244, 247, 249, 265, 267, 269, 273], "infin": [1, 7, 13, 19, 22, 26, 39, 48, 51, 54, 59, 60, 61, 62, 63, 65, 67, 68, 69, 91, 108, 112, 118, 123, 124, 128, 129, 156, 158, 160, 200, 214, 215, 220, 226, 227, 231, 242, 285, 288, 294, 300, 301, 303, 313, 314, 346, 354, 358, 359, 360, 362, 366, 369, 372], "bc": [1, 23, 56, 59, 89, 108, 172, 216, 220, 227, 230, 232, 234, 236, 241, 242, 264, 265, 266, 267, 268, 269, 271, 272, 339, 362, 372], "f": [1, 2, 9, 10, 11, 16, 17, 19, 22, 23, 24, 26, 29, 36, 37, 38, 39, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 69, 70, 76, 77, 80, 82, 83, 86, 88, 89, 91, 92, 93, 96, 99, 101, 102, 107, 108, 109, 110, 111, 112, 113, 114, 115, 119, 120, 123, 127, 133, 134, 140, 141, 144, 145, 146, 147, 149, 150, 151, 153, 154, 159, 160, 162, 171, 172, 180, 182, 185, 186, 187, 188, 193, 212, 214, 215, 220, 221, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 284, 285, 288, 290, 293, 294, 296, 300, 301, 302, 303, 305, 307, 308, 310, 311, 312, 315, 316, 318, 319, 320, 322, 323, 324, 325, 326, 329, 330, 331, 332, 333, 334, 335, 337, 340, 343, 346, 349, 350, 351, 352, 354, 356, 358, 359, 360, 362, 363, 366, 369, 372, 374], "g": [1, 2, 3, 9, 11, 13, 16, 19, 21, 22, 23, 24, 25, 33, 38, 39, 46, 48, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 65, 67, 72, 73, 76, 77, 80, 82, 83, 84, 87, 88, 89, 91, 92, 97, 99, 101, 103, 104, 108, 109, 110, 111, 112, 113, 115, 116, 117, 119, 120, 123, 129, 130, 134, 138, 139, 140, 144, 145, 146, 147, 154, 156, 159, 160, 161, 162, 164, 171, 172, 180, 182, 183, 187, 188, 193, 214, 215, 216, 220, 221, 225, 226, 227, 229, 230, 231, 232, 233, 235, 236, 238, 239, 240, 241, 242, 243, 244, 264, 265, 267, 269, 271, 273, 274, 276, 280, 289, 293, 296, 299, 302, 303, 310, 314, 315, 319, 322, 323, 329, 332, 334, 335, 336, 337, 343, 344, 346, 347, 348, 350, 352, 354, 356, 358, 359, 362, 367, 369, 372, 373, 374], "h": [1, 11, 48, 50, 56, 58, 60, 67, 73, 76, 77, 79, 80, 83, 85, 87, 88, 89, 91, 92, 94, 96, 99, 100, 101, 108, 111, 112, 113, 118, 119, 120, 122, 127, 131, 134, 138, 144, 145, 146, 147, 149, 150, 151, 155, 158, 159, 160, 163, 180, 182, 186, 187, 190, 193, 212, 220, 225, 227, 228, 229, 230, 232, 233, 234, 235, 238, 239, 240, 242, 269, 270, 273, 276, 282, 284, 285, 288, 289, 292, 293, 295, 296, 298, 300, 301, 302, 303, 304, 305, 308, 313, 315, 340, 342, 343, 346, 350, 352, 354, 358, 362, 363, 369, 373], "extend": [1, 2, 11, 19, 47, 51, 57, 59, 60, 61, 65, 68, 69, 72, 92, 94, 99, 101, 108, 109, 122, 124, 131, 144, 145, 146, 147, 149, 151, 163, 164, 180, 182, 187, 188, 192, 213, 214, 215, 220, 225, 235, 236, 238, 241, 242, 244, 246, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 264, 266, 271, 272, 273, 278, 303, 305, 313, 314, 340, 343, 346, 348, 350, 359, 362, 363], "weyl": [1, 3, 34, 37, 49, 59, 62, 64, 114, 116, 131, 132, 160, 172, 186, 190, 211, 220, 225, 226, 227, 228, 234, 235, 236, 237, 238, 241, 242, 243, 244, 265, 271, 303, 343], "fundament": [1, 16, 25, 39, 54, 56, 57, 58, 59, 60, 66, 110, 144, 145, 146, 147, 162, 172, 180, 216, 220, 221, 225, 227, 232, 235, 236, 238, 239, 240, 242, 244, 251, 257, 264, 265, 267, 269, 270, 271, 272, 273, 303, 340, 354], "fold": [1, 39, 146, 213, 214, 220, 225, 227, 238, 242], "mark": [1, 12, 19, 22, 29, 59, 62, 102, 131, 139, 160, 162, 182, 211, 216, 217, 220, 227, 232, 233, 236, 241, 242, 304, 323, 346, 359, 362, 365], "node": [1, 2, 8, 11, 12, 25, 36, 39, 46, 51, 56, 58, 86, 99, 102, 108, 120, 124, 130, 156, 158, 160, 162, 164, 211, 212, 220, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 264, 265, 266, 268, 269, 270, 271, 272, 274, 275, 315, 332, 338, 347, 348, 354, 359, 365], "reduc": [1, 3, 13, 19, 22, 23, 24, 25, 37, 50, 51, 54, 62, 63, 64, 68, 72, 80, 98, 114, 120, 130, 131, 133, 146, 160, 172, 180, 181, 182, 185, 186, 187, 216, 220, 223, 224, 225, 227, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 271, 273, 274, 276, 277, 303, 311, 313, 314, 337, 340, 343, 346, 348, 354, 359, 362, 374], "relabel": [1, 22, 33, 56, 78, 88, 89, 90, 91, 95, 96, 108, 109, 110, 130, 180, 182, 183, 187, 211, 220, 226, 227, 229, 230, 231, 240, 242, 257, 259, 265, 266, 267, 268, 270, 319, 327, 329, 332, 333, 341, 373], "charact": [1, 33, 83, 101, 108, 116, 133, 138, 154, 160, 220, 225, 227, 235, 239, 241, 274, 278, 281, 302, 303, 304, 310, 316, 344, 358], "ring": [1, 6, 8, 11, 16, 17, 19, 23, 25, 26, 30, 58, 74, 76, 80, 82, 83, 85, 89, 90, 91, 92, 97, 98, 99, 101, 108, 109, 110, 111, 112, 113, 114, 116, 119, 127, 128, 130, 133, 134, 138, 139, 143, 144, 145, 146, 147, 149, 150, 151, 159, 160, 163, 164, 168, 172, 174, 180, 181, 182, 183, 185, 187, 188, 192, 193, 220, 221, 225, 226, 228, 230, 232, 233, 234, 235, 236, 239, 241, 242, 243, 244, 245, 247, 264, 270, 271, 272, 277, 278, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 310, 311, 313, 316, 319, 321, 322, 323, 329, 332, 335, 340, 343, 344, 347, 348, 353, 354, 362, 363, 367, 374], "unord": [1, 26, 28, 103, 127, 156, 160, 278, 309, 353], "robinson": [1, 11, 14, 29, 103, 120, 160, 172, 346, 359], "schenst": [1, 11, 14, 29, 103, 120, 160, 172, 314, 346, 359], "knuth": [1, 11, 14, 100, 101, 103, 116, 120, 137, 139, 147, 160, 170, 173, 278, 314, 315, 346], "schubert": [1, 15, 133, 134, 290, 296], "classic": [1, 3, 17, 22, 23, 36, 46, 49, 52, 54, 56, 57, 58, 59, 66, 68, 101, 108, 110, 120, 121, 145, 146, 155, 158, 187, 189, 211, 212, 215, 216, 219, 222, 225, 227, 232, 233, 234, 235, 236, 238, 241, 242, 244, 246, 249, 250, 252, 254, 256, 258, 260, 264, 265, 266, 267, 269, 271, 273, 274, 276, 278, 281, 286, 293, 300, 302, 303, 304, 305, 307, 315, 343, 349, 352, 354], "littlewood": [1, 121, 134, 146, 216, 281, 284, 291, 292, 293, 296, 298, 302, 303, 304], "basi": [1, 12, 16, 17, 55, 59, 74, 99, 101, 110, 111, 112, 113, 119, 133, 141, 143, 144, 145, 146, 147, 149, 150, 151, 160, 161, 162, 163, 164, 172, 180, 181, 185, 187, 192, 221, 232, 234, 236, 238, 239, 240, 241, 242, 243, 244, 245, 255, 257, 259, 264, 270, 271, 272, 273, 274, 277, 281, 282, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 316, 323, 342, 343, 346, 348, 361, 362], "homogen": [1, 77, 108, 134, 139, 144, 145, 146, 147, 150, 151, 160, 163, 281, 284, 285, 286, 294, 295, 296, 300, 301, 302, 303, 305, 315, 323, 346, 348, 374], "jack": [1, 160, 281, 302, 303, 354], "quotient": [1, 3, 11, 12, 16, 19, 108, 112, 121, 129, 156, 160, 182, 227, 281, 285, 300, 301, 302, 303, 305, 313, 350, 354], "ideal": [1, 11, 19, 99, 114, 120, 168, 174, 180, 182, 186, 187, 237, 242, 281, 302, 310, 316, 363], "kostka": [1, 281, 293, 303], "foulk": [1, 281], "llt": [1, 162, 281, 302, 303, 359], "multipl": [1, 3, 9, 10, 11, 22, 25, 26, 30, 33, 34, 51, 54, 57, 59, 70, 74, 76, 77, 83, 85, 89, 91, 108, 110, 113, 116, 120, 122, 131, 133, 138, 139, 141, 144, 145, 146, 147, 149, 150, 151, 160, 164, 172, 173, 180, 181, 185, 187, 192, 193, 211, 212, 215, 216, 217, 221, 225, 226, 231, 232, 235, 236, 239, 240, 242, 243, 264, 266, 271, 273, 281, 284, 285, 286, 289, 292, 293, 296, 298, 300, 303, 304, 305, 315, 321, 323, 336, 343, 354, 359, 362, 374], "schur": [1, 16, 101, 112, 116, 131, 133, 143, 145, 146, 147, 160, 163, 188, 241, 273, 277, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 298, 299, 300, 302, 303, 304, 305, 313, 314, 316, 342, 346], "defin": [1, 2, 3, 6, 10, 11, 12, 16, 17, 19, 22, 23, 24, 25, 26, 29, 30, 33, 39, 46, 48, 51, 54, 56, 57, 58, 59, 60, 61, 62, 65, 67, 68, 69, 70, 71, 72, 74, 76, 77, 78, 80, 83, 88, 89, 90, 91, 95, 97, 99, 101, 102, 107, 108, 109, 110, 112, 113, 114, 115, 116, 119, 120, 121, 122, 123, 127, 129, 130, 131, 133, 134, 138, 139, 141, 143, 144, 145, 146, 147, 149, 150, 151, 153, 156, 158, 160, 162, 163, 164, 168, 169, 176, 180, 181, 182, 183, 185, 186, 187, 188, 193, 212, 215, 216, 222, 225, 227, 228, 230, 232, 233, 235, 236, 238, 239, 240, 241, 242, 244, 245, 264, 266, 270, 271, 272, 273, 274, 275, 276, 278, 280, 281, 284, 285, 286, 287, 288, 289, 292, 293, 294, 296, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 323, 324, 326, 330, 332, 333, 340, 341, 342, 343, 344, 345, 346, 348, 349, 350, 351, 352, 354, 356, 357, 359, 360, 362, 363, 364, 365, 366, 368, 369, 372, 373, 374], "triangular": [1, 23, 26, 116, 120, 146, 278, 281, 315, 352, 374], "power": [1, 6, 10, 11, 17, 58, 59, 74, 76, 77, 80, 83, 85, 87, 88, 89, 91, 92, 94, 97, 101, 108, 110, 121, 138, 145, 146, 147, 149, 151, 159, 160, 164, 169, 172, 174, 186, 187, 188, 193, 221, 225, 235, 236, 239, 245, 273, 281, 284, 285, 286, 288, 289, 293, 294, 296, 299, 301, 302, 303, 305, 315, 323, 336, 351, 352, 354, 359, 362, 374], "symplect": [1, 225, 273, 281, 302], "witt": [1, 77, 81, 89, 281, 285, 295, 300, 301, 302, 303], "shard": [1, 175, 186], "intersect": [1, 19, 30, 76, 77, 80, 88, 89, 90, 91, 92, 108, 112, 115, 130, 139, 160, 175, 182, 186, 187, 221, 222, 238, 239, 242, 278, 313, 350, 363], "prime": [1, 10, 14, 26, 38, 46, 54, 57, 68, 76, 77, 80, 83, 85, 87, 88, 91, 92, 94, 97, 101, 121, 138, 139, 144, 160, 164, 180, 182, 187, 188, 215, 216, 284, 285, 286, 288, 300, 301, 303, 315, 338, 341, 347, 354, 356, 358, 369], "shuffl": [1, 11, 17, 19, 30, 103, 110, 111, 141, 146, 159, 172, 314, 343, 357, 359], "sidon": [1, 103], "similar": [1, 10, 11, 19, 56, 61, 80, 90, 103, 108, 110, 114, 120, 123, 134, 138, 145, 157, 172, 227, 232, 239, 241, 276, 305, 336, 347, 352, 354], "entri": [1, 3, 6, 11, 16, 17, 19, 23, 26, 30, 32, 37, 50, 54, 56, 64, 68, 74, 76, 78, 82, 84, 90, 91, 98, 99, 100, 101, 103, 104, 108, 116, 120, 122, 126, 127, 129, 130, 131, 137, 138, 139, 140, 141, 144, 145, 146, 156, 157, 158, 159, 160, 161, 163, 164, 167, 168, 170, 172, 174, 180, 182, 186, 187, 196, 197, 215, 216, 217, 226, 229, 239, 240, 266, 271, 273, 275, 276, 278, 280, 286, 296, 297, 302, 303, 307, 312, 314, 315, 338, 341, 342, 343, 344, 345, 346, 348, 354, 355, 356, 359, 362, 373], "sine": 1, "gordon": [1, 79], "y": [1, 9, 10, 11, 12, 16, 17, 19, 22, 26, 33, 39, 46, 49, 51, 56, 58, 59, 60, 64, 66, 67, 73, 76, 77, 82, 83, 89, 91, 94, 97, 99, 101, 102, 110, 111, 112, 113, 116, 119, 120, 124, 130, 132, 138, 139, 144, 145, 146, 147, 149, 150, 151, 154, 156, 158, 160, 161, 162, 163, 172, 174, 180, 181, 182, 183, 185, 186, 187, 188, 189, 211, 215, 225, 227, 231, 232, 233, 234, 236, 239, 240, 241, 242, 264, 275, 276, 278, 280, 284, 285, 286, 288, 290, 293, 294, 296, 300, 301, 302, 303, 307, 308, 314, 315, 321, 323, 336, 338, 340, 343, 345, 346, 349, 351, 352, 354, 358, 359, 362, 363, 365, 366, 369, 372, 373, 374], "plotter": [1, 134], "six": [1, 6, 103, 115, 134, 232, 238, 350, 363, 374], "vertex": [1, 2, 6, 11, 19, 22, 23, 33, 39, 51, 62, 72, 89, 96, 97, 99, 101, 103, 108, 111, 113, 115, 117, 119, 120, 130, 138, 139, 156, 178, 180, 182, 187, 222, 238, 240, 275, 296, 303, 340, 344, 351, 354, 359, 373], "skew": [1, 14, 19, 22, 23, 30, 37, 50, 83, 98, 116, 120, 131, 138, 141, 144, 145, 146, 157, 160, 167, 168, 169, 170, 196, 197, 225, 236, 292, 302, 303, 307, 345, 346], "some": [1, 2, 9, 10, 11, 16, 17, 19, 26, 30, 35, 39, 46, 48, 51, 52, 53, 56, 57, 61, 65, 68, 71, 76, 77, 78, 79, 82, 83, 85, 87, 88, 89, 91, 92, 93, 98, 99, 101, 102, 107, 108, 109, 110, 111, 112, 113, 115, 116, 119, 120, 122, 123, 124, 127, 130, 131, 136, 138, 139, 141, 145, 146, 149, 151, 156, 158, 160, 161, 164, 168, 171, 172, 180, 181, 182, 183, 185, 186, 187, 191, 192, 193, 196, 202, 203, 204, 206, 207, 208, 209, 225, 226, 227, 229, 230, 232, 233, 234, 236, 238, 239, 241, 242, 243, 244, 249, 265, 267, 270, 271, 273, 274, 275, 276, 277, 278, 280, 284, 285, 286, 287, 288, 293, 296, 298, 300, 301, 302, 303, 304, 305, 307, 310, 313, 314, 323, 332, 336, 337, 339, 342, 343, 345, 346, 347, 348, 352, 359, 362, 363, 365, 369, 373], "sloan": [1, 35, 138, 275, 354], "tabl": [1, 9, 11, 26, 35, 49, 56, 90, 139, 151, 157, 187, 225, 239, 271, 274, 278, 287, 302, 310, 359], "characterist": [1, 10, 17, 33, 101, 108, 159, 160, 162, 164, 185, 187, 235, 239, 302, 303, 315, 317, 343, 346, 347, 348, 354, 362, 369, 374], "cycl": [1, 9, 22, 25, 26, 33, 86, 89, 101, 102, 108, 109, 139, 146, 160, 171, 172, 186, 187, 238, 269, 278, 287, 300, 302, 303, 310, 315, 316, 317, 323, 332, 342, 343, 354, 359, 362, 366, 369, 370], "empti": [1, 2, 9, 11, 13, 30, 33, 39, 46, 54, 56, 61, 73, 74, 76, 79, 82, 86, 89, 91, 98, 99, 101, 102, 108, 109, 116, 119, 120, 127, 129, 130, 131, 136, 138, 139, 141, 144, 145, 149, 151, 156, 157, 158, 159, 160, 162, 164, 171, 172, 174, 180, 182, 184, 187, 192, 193, 214, 227, 231, 238, 240, 241, 242, 275, 276, 278, 280, 284, 302, 303, 308, 313, 314, 315, 317, 318, 330, 336, 341, 346, 348, 350, 354, 356, 359, 361, 362, 365, 366, 367, 370], "functori": [1, 13, 42, 303, 317, 323, 332], "exampl": [1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 16, 17, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 194, 196, 197, 199, 200, 201, 205, 207, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374], "specht": [1, 30, 98, 127, 160, 164, 313, 343, 344, 346, 347, 348], "satisfi": [1, 2, 9, 11, 16, 17, 21, 22, 26, 30, 46, 48, 51, 60, 62, 72, 76, 77, 83, 89, 90, 91, 92, 93, 97, 98, 101, 103, 107, 110, 111, 113, 114, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 138, 139, 141, 143, 144, 145, 146, 147, 150, 159, 160, 170, 172, 174, 180, 187, 188, 193, 212, 216, 226, 236, 241, 276, 278, 284, 285, 288, 300, 301, 303, 305, 323, 332, 333, 340, 343, 345, 346, 354, 355, 359, 369, 374], "hereditari": [1, 103, 274], "properti": [1, 2, 3, 11, 23, 26, 30, 46, 48, 68, 72, 76, 77, 78, 82, 83, 90, 98, 99, 101, 103, 121, 130, 138, 145, 151, 156, 160, 171, 172, 174, 180, 182, 186, 187, 192, 226, 227, 238, 243, 265, 271, 277, 282, 296, 298, 302, 303, 304, 310, 323, 340, 343, 349, 354, 359, 362, 374], "whose": [1, 2, 7, 11, 12, 16, 17, 22, 23, 25, 27, 30, 41, 46, 48, 51, 56, 63, 64, 65, 72, 74, 77, 80, 88, 89, 91, 92, 98, 101, 102, 104, 108, 110, 112, 120, 122, 127, 129, 130, 131, 134, 138, 141, 144, 145, 146, 150, 151, 156, 158, 159, 160, 172, 174, 180, 181, 182, 186, 187, 188, 189, 193, 196, 197, 212, 215, 223, 232, 233, 236, 237, 239, 242, 243, 273, 276, 278, 280, 290, 294, 302, 303, 306, 308, 309, 310, 312, 313, 314, 318, 320, 323, 325, 327, 328, 331, 334, 336, 337, 340, 341, 346, 348, 351, 354, 355, 356, 359, 362, 365, 374], "predic": 1, "pairwis": [1, 26, 76, 82, 91, 92, 94, 120, 139, 160, 172, 187, 278, 280, 343], "subword": [1, 8, 24, 28, 103, 114, 237, 359], "residu": [1, 3, 14, 37, 61, 80, 83, 131, 138, 160, 162, 164, 172, 310, 346, 348], "tableautupl": [1, 14, 346, 347], "tile": [1, 6, 83, 98, 103, 120, 174, 197, 227, 238, 362, 363, 369], "solver": [1, 9, 76, 89, 91, 92, 127, 134, 136, 187], "transit": [1, 11, 33, 46, 58, 83, 86, 108, 109, 138, 172, 180, 183, 187, 232, 236, 278, 284, 286, 287, 293, 296, 303, 305, 306, 346, 352, 354, 359, 365], "closur": [1, 58, 108, 172, 187, 278, 306, 356, 359, 369], "triangl": [1, 6, 23, 26, 76, 77, 101, 105, 116, 134, 187, 227, 315, 354, 363], "fan": [1, 22, 340], "infinit": [1, 7, 13, 17, 19, 21, 22, 23, 26, 30, 38, 57, 65, 68, 91, 108, 110, 111, 113, 114, 120, 121, 124, 129, 130, 133, 139, 160, 164, 186, 192, 227, 229, 230, 235, 240, 242, 271, 272, 285, 288, 290, 294, 300, 301, 303, 314, 323, 336, 347, 348, 351, 354, 357, 358, 359, 362, 366, 367, 369, 372, 374], "lyndon": [1, 27, 103, 146, 303, 359], "morphism": [1, 16, 48, 53, 56, 74, 112, 121, 144, 145, 146, 147, 149, 150, 163, 181, 187, 192, 200, 215, 232, 234, 241, 242, 243, 266, 271, 272, 273, 302, 303, 343, 356, 357, 359, 360, 366, 369, 372], "suffix": [1, 19, 22, 102, 356, 357, 359, 367, 368], "tri": [1, 83, 138, 180, 193, 354, 357, 366], "datatyp": [1, 275, 357, 359, 362, 366], "us": [1, 2, 3, 6, 9, 11, 13, 16, 17, 19, 21, 22, 23, 26, 27, 28, 29, 30, 33, 34, 36, 37, 39, 46, 47, 48, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 65, 68, 69, 70, 71, 72, 74, 76, 77, 79, 80, 82, 83, 85, 88, 89, 90, 91, 92, 94, 95, 96, 98, 99, 100, 101, 102, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 119, 120, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 144, 145, 146, 147, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 168, 169, 170, 171, 172, 173, 174, 176, 180, 182, 183, 185, 186, 187, 188, 192, 193, 196, 197, 199, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 255, 257, 259, 264, 265, 267, 268, 269, 271, 272, 273, 274, 275, 276, 278, 280, 284, 285, 286, 288, 289, 290, 293, 294, 296, 297, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 323, 330, 333, 336, 337, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 352, 356, 357, 358, 359, 362, 363, 364, 365, 366, 368, 369, 372, 374], "unsign": [1, 173, 188, 315, 357, 366], "char": [1, 108, 357, 366], "callabl": [1, 11, 108, 109, 124, 134, 156, 193, 356, 357, 359, 362, 363, 366, 369, 373], "user": [1, 17, 19, 21, 22, 30, 107, 108, 120, 125, 127, 131, 134, 141, 158, 173, 180, 199, 211, 215, 217, 227, 238, 276, 309, 338, 343, 352, 354, 357, 373], "customiz": [1, 357], "option": [1, 2, 3, 9, 11, 16, 17, 19, 21, 23, 25, 26, 29, 30, 33, 39, 46, 47, 49, 52, 53, 56, 57, 58, 59, 60, 62, 65, 68, 76, 77, 79, 80, 81, 83, 86, 87, 89, 97, 98, 99, 101, 102, 107, 108, 110, 112, 115, 120, 124, 128, 130, 131, 132, 134, 136, 138, 139, 141, 144, 145, 146, 147, 149, 150, 151, 154, 156, 157, 158, 160, 162, 164, 168, 172, 174, 177, 180, 182, 183, 184, 186, 187, 188, 189, 190, 192, 193, 196, 197, 211, 212, 213, 214, 215, 216, 218, 219, 225, 227, 228, 229, 230, 231, 232, 235, 238, 239, 240, 241, 242, 244, 245, 266, 268, 273, 274, 275, 276, 278, 280, 284, 286, 289, 291, 293, 296, 300, 301, 302, 303, 305, 307, 310, 312, 313, 314, 316, 323, 330, 332, 333, 335, 336, 339, 340, 342, 343, 346, 347, 348, 349, 350, 354, 356, 357, 358, 359, 361, 362, 363, 365, 366, 368, 369, 372, 374], "yang": [1, 4, 344], "purpos": [2, 29, 85, 108, 124, 167, 191, 193, 196, 225, 234, 237, 238, 242, 268, 323, 326, 346, 365], "help": [2, 29, 68, 80, 92, 107, 124, 187, 236, 238, 363], "implement": [2, 3, 6, 10, 11, 16, 17, 19, 22, 23, 24, 26, 27, 28, 29, 30, 34, 36, 39, 41, 42, 46, 49, 53, 56, 58, 59, 66, 67, 68, 69, 70, 71, 74, 76, 77, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 105, 107, 108, 112, 113, 114, 116, 122, 123, 125, 127, 129, 130, 131, 132, 134, 136, 138, 139, 141, 144, 145, 146, 147, 151, 153, 156, 160, 163, 165, 166, 167, 168, 169, 170, 172, 173, 174, 176, 177, 179, 181, 182, 186, 187, 188, 191, 192, 201, 202, 203, 204, 205, 206, 207, 208, 209, 212, 215, 216, 221, 222, 225, 226, 227, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 253, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 286, 289, 290, 293, 296, 297, 302, 303, 306, 307, 310, 311, 314, 315, 316, 318, 321, 322, 323, 332, 337, 338, 339, 340, 343, 344, 346, 347, 348, 356, 359, 362, 363, 364, 365, 373, 374], "specif": [2, 3, 9, 17, 30, 51, 55, 62, 68, 69, 92, 95, 98, 108, 123, 124, 130, 136, 138, 146, 160, 163, 174, 180, 182, 187, 193, 201, 202, 203, 204, 205, 206, 207, 208, 209, 215, 225, 227, 237, 276, 288, 300, 302, 314, 316, 323, 346, 352, 354, 359, 360, 363, 365, 372], "children": [2, 7, 11, 86, 104, 124, 129, 130, 156, 275, 338, 354], "each": [2, 6, 9, 11, 16, 17, 19, 22, 23, 25, 26, 30, 39, 46, 48, 51, 54, 56, 59, 60, 62, 64, 68, 72, 74, 76, 77, 79, 80, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 96, 97, 99, 101, 102, 105, 107, 108, 109, 110, 113, 114, 115, 116, 118, 119, 120, 122, 123, 124, 126, 129, 130, 131, 133, 134, 136, 138, 139, 140, 141, 144, 145, 146, 147, 154, 156, 157, 158, 159, 160, 161, 162, 164, 170, 171, 172, 176, 180, 182, 186, 187, 191, 192, 193, 196, 197, 199, 205, 207, 209, 211, 215, 216, 217, 219, 225, 226, 227, 232, 233, 235, 236, 238, 239, 240, 242, 271, 273, 274, 275, 276, 277, 278, 294, 302, 303, 306, 307, 310, 311, 312, 313, 314, 315, 319, 322, 323, 327, 329, 330, 335, 336, 338, 341, 342, 343, 345, 346, 348, 349, 350, 354, 356, 359, 362, 363, 365, 369, 372, 374], "instanc": [2, 6, 11, 26, 29, 30, 36, 50, 54, 56, 58, 69, 71, 72, 76, 88, 89, 96, 98, 104, 108, 112, 115, 125, 130, 134, 136, 139, 140, 141, 145, 156, 160, 163, 167, 168, 170, 172, 173, 182, 186, 187, 192, 193, 221, 225, 239, 275, 276, 285, 286, 288, 289, 292, 294, 298, 299, 300, 301, 302, 303, 304, 305, 343, 346, 354, 356, 359, 362, 368, 369, 374], "one": [2, 3, 6, 7, 9, 11, 12, 17, 19, 22, 23, 24, 25, 26, 29, 30, 33, 37, 39, 41, 46, 47, 49, 51, 52, 54, 56, 57, 58, 59, 60, 65, 68, 71, 72, 74, 76, 77, 78, 79, 80, 81, 82, 83, 85, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 101, 102, 107, 108, 109, 110, 111, 112, 113, 116, 117, 118, 119, 120, 124, 127, 130, 131, 133, 134, 136, 138, 139, 141, 145, 146, 147, 149, 153, 154, 155, 156, 158, 159, 160, 161, 162, 164, 168, 171, 172, 174, 176, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 192, 193, 196, 199, 211, 212, 215, 216, 221, 222, 225, 226, 227, 228, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 255, 257, 264, 265, 266, 271, 272, 273, 274, 275, 276, 277, 278, 284, 290, 293, 294, 296, 298, 300, 302, 303, 304, 305, 306, 307, 308, 310, 311, 313, 314, 315, 318, 331, 332, 333, 336, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 354, 355, 356, 358, 359, 360, 361, 362, 363, 365, 369, 372, 374], "could": [2, 11, 19, 23, 29, 79, 99, 101, 108, 109, 120, 124, 138, 145, 146, 147, 156, 157, 160, 172, 174, 180, 182, 225, 236, 238, 242, 265, 271, 275, 308, 310, 348, 354, 374], "want": [2, 9, 11, 19, 22, 26, 57, 68, 76, 77, 84, 85, 87, 88, 89, 90, 91, 92, 94, 103, 108, 123, 124, 127, 131, 136, 138, 140, 145, 156, 158, 160, 172, 180, 187, 215, 216, 219, 225, 226, 227, 232, 235, 236, 238, 241, 273, 274, 275, 278, 310, 313, 315, 336, 343, 348, 354, 363], "which": [2, 3, 6, 7, 8, 9, 10, 11, 12, 16, 17, 19, 22, 23, 25, 26, 29, 30, 32, 33, 34, 39, 41, 46, 47, 48, 49, 51, 54, 56, 58, 59, 60, 62, 64, 66, 67, 68, 69, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 107, 109, 110, 112, 114, 115, 116, 118, 120, 122, 123, 124, 125, 127, 129, 130, 131, 133, 134, 136, 137, 138, 141, 143, 144, 145, 146, 147, 149, 150, 151, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 169, 170, 171, 172, 174, 176, 180, 181, 182, 183, 184, 187, 188, 192, 193, 196, 197, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 215, 216, 217, 218, 219, 221, 225, 226, 227, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 247, 257, 265, 266, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 300, 301, 302, 303, 305, 308, 310, 312, 313, 314, 315, 323, 332, 333, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 350, 354, 355, 356, 358, 359, 362, 363, 365, 366, 368, 369, 374], "its": [2, 3, 6, 7, 11, 13, 16, 17, 19, 23, 24, 25, 26, 29, 30, 39, 46, 56, 58, 59, 64, 68, 72, 76, 77, 80, 82, 83, 84, 85, 88, 89, 90, 91, 92, 94, 95, 97, 98, 99, 101, 102, 104, 107, 108, 110, 112, 113, 114, 115, 116, 119, 120, 122, 124, 125, 127, 129, 130, 131, 134, 138, 141, 144, 145, 146, 149, 150, 151, 153, 156, 158, 159, 160, 164, 165, 171, 172, 174, 176, 180, 182, 183, 187, 193, 211, 212, 217, 221, 225, 226, 227, 232, 236, 238, 239, 241, 242, 243, 244, 264, 265, 267, 268, 272, 273, 274, 275, 276, 278, 280, 285, 288, 294, 299, 300, 301, 302, 303, 305, 313, 314, 315, 316, 318, 323, 331, 333, 336, 337, 340, 343, 346, 347, 348, 354, 355, 356, 359, 361, 362, 363, 369, 372, 374], "linearli": [2, 19, 149, 151, 239, 272, 340], "modul": [2, 7, 11, 17, 21, 23, 25, 26, 28, 29, 30, 34, 39, 48, 52, 54, 56, 58, 59, 68, 72, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 108, 109, 110, 113, 119, 120, 122, 127, 130, 134, 137, 138, 141, 144, 145, 146, 147, 156, 158, 159, 160, 162, 163, 164, 169, 172, 174, 180, 182, 183, 184, 186, 187, 190, 196, 198, 212, 216, 218, 234, 236, 242, 243, 244, 271, 272, 273, 278, 290, 293, 296, 303, 305, 307, 310, 312, 313, 314, 315, 317, 323, 342, 343, 346, 347, 348, 350, 352, 354, 356, 357, 359, 362, 363, 364, 365, 369], "conceptu": 2, "from": [2, 3, 6, 7, 8, 9, 11, 12, 13, 16, 17, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 36, 37, 38, 39, 46, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 104, 105, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 136, 138, 139, 140, 141, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 168, 170, 171, 172, 173, 174, 177, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 257, 264, 265, 266, 267, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 296, 297, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 323, 326, 327, 333, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 372, 373, 374], "ani": [2, 8, 9, 10, 11, 13, 17, 19, 22, 25, 26, 30, 46, 48, 51, 53, 54, 56, 57, 58, 59, 65, 67, 68, 69, 74, 76, 77, 80, 82, 83, 84, 85, 88, 89, 90, 91, 92, 95, 96, 97, 99, 100, 101, 102, 107, 108, 109, 110, 114, 116, 120, 121, 122, 123, 124, 127, 129, 130, 131, 134, 139, 141, 144, 145, 146, 147, 154, 156, 160, 163, 164, 169, 170, 172, 173, 174, 178, 180, 182, 183, 186, 187, 191, 192, 197, 211, 215, 225, 226, 227, 229, 232, 235, 236, 238, 239, 242, 243, 244, 265, 266, 271, 272, 273, 275, 276, 277, 278, 280, 284, 285, 288, 294, 296, 300, 301, 302, 303, 305, 309, 310, 312, 314, 315, 318, 336, 340, 343, 344, 346, 348, 350, 354, 359, 362, 363, 366, 368, 369, 372, 374], "contain": [2, 3, 6, 7, 9, 11, 12, 17, 19, 20, 21, 22, 24, 26, 30, 33, 34, 41, 48, 54, 56, 60, 64, 68, 70, 72, 73, 76, 77, 79, 80, 82, 83, 85, 86, 89, 91, 92, 94, 96, 97, 98, 99, 101, 102, 108, 109, 110, 114, 117, 120, 122, 123, 124, 127, 129, 130, 131, 134, 136, 138, 139, 143, 145, 146, 147, 149, 151, 154, 155, 156, 158, 160, 161, 163, 164, 172, 174, 180, 181, 182, 183, 185, 186, 187, 190, 192, 193, 197, 199, 218, 221, 225, 226, 227, 229, 230, 231, 235, 236, 237, 238, 239, 242, 244, 273, 276, 278, 293, 302, 306, 311, 313, 314, 315, 336, 340, 341, 343, 345, 346, 347, 348, 349, 350, 353, 354, 359, 362, 363, 364, 365, 368, 369, 372], "other": [2, 3, 8, 9, 11, 16, 17, 19, 23, 26, 28, 30, 33, 34, 41, 46, 48, 51, 52, 53, 56, 58, 59, 68, 74, 76, 77, 80, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 107, 108, 109, 110, 111, 112, 113, 114, 116, 120, 122, 124, 127, 130, 133, 136, 138, 139, 141, 144, 145, 146, 147, 149, 154, 155, 156, 159, 160, 164, 169, 171, 172, 176, 180, 182, 183, 186, 187, 188, 191, 192, 193, 199, 205, 212, 216, 225, 227, 231, 232, 234, 236, 238, 239, 240, 241, 242, 244, 249, 264, 265, 266, 267, 269, 270, 271, 272, 273, 275, 276, 278, 280, 284, 294, 296, 298, 302, 303, 304, 305, 308, 313, 315, 318, 323, 332, 336, 338, 340, 342, 343, 346, 347, 349, 350, 352, 356, 358, 359, 362, 363, 365, 366, 367, 368, 369, 372], "inde": [2, 26, 30, 46, 71, 72, 80, 88, 91, 108, 109, 112, 130, 146, 160, 172, 183, 187, 193, 235, 236, 238, 239, 241, 294, 302, 303, 314, 343, 359, 362], "list": [2, 3, 6, 7, 9, 10, 11, 13, 16, 17, 19, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 39, 46, 47, 48, 49, 50, 51, 56, 57, 58, 59, 64, 65, 66, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 86, 87, 88, 89, 90, 91, 93, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 126, 127, 128, 129, 130, 131, 133, 134, 136, 137, 138, 139, 140, 141, 143, 145, 146, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 180, 181, 183, 186, 190, 191, 192, 193, 196, 197, 211, 212, 215, 216, 218, 219, 222, 223, 224, 225, 226, 227, 230, 234, 235, 236, 238, 239, 240, 241, 242, 244, 266, 267, 268, 270, 271, 273, 274, 275, 276, 277, 278, 279, 280, 284, 285, 289, 290, 291, 292, 296, 297, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 325, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 355, 356, 357, 358, 359, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374], "thu": [2, 3, 10, 11, 17, 19, 21, 22, 25, 26, 30, 68, 74, 80, 83, 88, 91, 92, 99, 101, 108, 109, 110, 116, 120, 121, 122, 129, 138, 145, 146, 151, 156, 160, 172, 174, 180, 181, 187, 225, 229, 235, 236, 238, 241, 264, 265, 266, 273, 275, 276, 277, 278, 285, 288, 294, 296, 300, 301, 302, 303, 305, 310, 314, 337, 343, 346, 354, 359, 365], "same": [2, 3, 9, 11, 17, 19, 26, 30, 33, 34, 37, 47, 48, 56, 57, 58, 68, 72, 74, 76, 77, 80, 82, 89, 90, 91, 92, 96, 97, 98, 99, 101, 102, 105, 107, 109, 111, 112, 113, 114, 115, 116, 119, 120, 122, 124, 125, 126, 127, 130, 131, 133, 134, 136, 138, 139, 144, 145, 146, 147, 149, 151, 154, 156, 158, 159, 160, 161, 162, 163, 164, 171, 172, 173, 180, 182, 183, 186, 187, 192, 193, 202, 203, 204, 206, 207, 208, 209, 212, 214, 216, 218, 224, 225, 227, 232, 234, 235, 236, 238, 239, 242, 243, 244, 247, 249, 265, 273, 274, 275, 276, 278, 280, 284, 286, 290, 293, 294, 296, 297, 301, 302, 303, 305, 310, 311, 312, 313, 314, 318, 336, 337, 339, 342, 343, 345, 346, 347, 348, 350, 352, 354, 355, 356, 358, 359, 362, 363, 367, 369, 372], "done": [2, 6, 25, 29, 51, 72, 74, 91, 92, 96, 107, 108, 136, 138, 160, 172, 180, 183, 185, 234, 239, 242, 275, 276, 284, 289, 302, 330, 346, 350, 359, 361, 362, 368], "kind": [2, 26, 27, 80, 91, 98, 114, 136, 145, 146, 172, 187, 188, 242, 276, 278, 280, 308, 315, 352, 354, 363], "while": [2, 3, 11, 19, 68, 72, 76, 77, 80, 82, 83, 92, 95, 96, 100, 107, 108, 115, 124, 134, 139, 144, 145, 146, 160, 172, 173, 183, 215, 225, 227, 239, 247, 273, 276, 280, 300, 303, 305, 310, 311, 343, 346, 354, 369], "suffici": [2, 26, 58, 89, 92, 96, 108, 273, 302], "encod": [2, 6, 16, 19, 23, 30, 61, 64, 96, 101, 109, 120, 122, 156, 168, 172, 187, 225, 229, 231, 235, 238, 275, 276, 336, 343, 346, 352, 354, 359, 363, 369], "prove": [2, 23, 26, 77, 80, 85, 90, 94, 124, 130, 138, 162, 354, 362], "have": [2, 3, 9, 11, 17, 19, 22, 23, 26, 30, 32, 33, 34, 44, 45, 46, 48, 51, 52, 55, 57, 58, 60, 61, 62, 65, 68, 69, 72, 74, 76, 77, 79, 80, 83, 85, 88, 89, 90, 91, 92, 95, 96, 99, 101, 102, 104, 107, 108, 109, 110, 112, 113, 115, 120, 121, 123, 127, 130, 131, 133, 134, 136, 138, 139, 141, 144, 145, 146, 147, 150, 154, 156, 158, 160, 163, 164, 167, 171, 172, 174, 177, 180, 182, 183, 184, 186, 187, 191, 192, 193, 199, 211, 212, 215, 216, 217, 218, 221, 225, 226, 227, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 247, 251, 259, 264, 265, 266, 271, 272, 273, 274, 275, 276, 277, 278, 280, 282, 285, 288, 290, 294, 295, 296, 297, 300, 301, 302, 303, 307, 309, 310, 313, 314, 315, 316, 323, 332, 333, 336, 337, 343, 345, 346, 347, 348, 350, 352, 354, 356, 358, 359, 361, 362, 365, 366, 369, 371, 374], "method": [2, 3, 4, 6, 8, 9, 10, 11, 17, 19, 21, 22, 23, 26, 29, 30, 33, 34, 36, 39, 40, 46, 50, 52, 56, 59, 68, 69, 71, 76, 78, 80, 81, 82, 83, 86, 88, 90, 91, 92, 94, 98, 99, 101, 102, 104, 112, 113, 114, 115, 119, 120, 123, 124, 126, 127, 129, 130, 131, 132, 134, 136, 138, 141, 144, 145, 146, 147, 149, 151, 156, 158, 160, 164, 167, 168, 169, 171, 173, 174, 176, 180, 186, 191, 197, 202, 203, 204, 206, 207, 208, 209, 215, 217, 220, 221, 222, 225, 227, 231, 232, 234, 235, 236, 237, 238, 239, 242, 243, 264, 271, 272, 273, 274, 275, 276, 277, 278, 284, 285, 286, 288, 289, 290, 292, 293, 294, 296, 299, 300, 301, 302, 303, 304, 305, 307, 313, 314, 323, 330, 333, 336, 339, 340, 343, 344, 345, 346, 347, 350, 351, 352, 354, 357, 359, 362, 363, 367, 368, 369, 372, 373, 374], "avail": [2, 23, 76, 77, 79, 80, 83, 84, 86, 88, 89, 90, 91, 92, 93, 96, 101, 102, 108, 109, 112, 138, 139, 144, 147, 149, 150, 155, 158, 159, 160, 164, 166, 172, 180, 186, 187, 192, 193, 225, 227, 229, 230, 239, 240, 241, 242, 244, 273, 278, 306, 337, 343, 345, 349, 354, 358, 359, 362, 363, 365], "like": [2, 3, 11, 16, 17, 19, 23, 30, 58, 86, 99, 108, 112, 120, 124, 140, 145, 158, 159, 160, 163, 164, 173, 182, 187, 225, 238, 244, 253, 276, 278, 326, 346, 348, 354, 359, 363, 366], "test": [2, 3, 13, 17, 26, 30, 33, 39, 46, 49, 51, 56, 58, 59, 71, 72, 77, 80, 82, 83, 89, 92, 93, 97, 99, 101, 102, 107, 108, 110, 124, 127, 128, 129, 131, 134, 138, 139, 141, 144, 145, 146, 147, 149, 154, 158, 160, 162, 167, 170, 172, 176, 180, 182, 183, 187, 190, 191, 215, 223, 227, 234, 236, 238, 240, 241, 242, 244, 270, 271, 273, 274, 278, 300, 302, 303, 311, 314, 315, 321, 340, 343, 344, 346, 350, 354, 356, 359, 362, 367, 368, 369], "next": [2, 9, 11, 19, 22, 26, 30, 38, 57, 59, 77, 91, 98, 99, 100, 101, 102, 108, 109, 118, 120, 121, 122, 124, 129, 130, 131, 139, 140, 147, 158, 159, 160, 161, 165, 171, 172, 173, 180, 182, 187, 197, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 214, 225, 234, 236, 238, 276, 278, 280, 315, 316, 336, 343, 350, 354, 356, 359, 362, 363, 365, 369, 372], "section": [2, 11, 17, 19, 26, 30, 56, 61, 77, 83, 85, 89, 92, 101, 103, 108, 109, 110, 118, 119, 120, 122, 130, 131, 139, 145, 146, 150, 156, 160, 172, 182, 187, 188, 227, 235, 236, 241, 244, 276, 278, 285, 288, 289, 290, 294, 300, 301, 302, 303, 305, 311, 314, 323, 332, 343, 346, 354, 359, 362, 369], "convers": [2, 26, 72, 97, 99, 101, 107, 109, 116, 123, 145, 146, 147, 153, 158, 163, 180, 182, 187, 225, 271, 273, 275, 283, 284, 294, 298, 302, 303, 304, 305, 352, 354], "digraph": [2, 11, 19, 21, 22, 23, 33, 37, 39, 46, 48, 49, 51, 53, 54, 56, 59, 60, 61, 108, 109, 117, 120, 130, 162, 172, 177, 180, 182, 183, 187, 199, 205, 207, 209, 211, 213, 214, 216, 231, 238, 274, 306, 307, 313, 332, 340, 351, 359, 365, 366, 373], "as_digraph": 2, "automorph": [2, 3, 17, 36, 56, 63, 68, 80, 85, 86, 89, 110, 138, 144, 145, 146, 162, 182, 187, 225, 227, 232, 233, 236, 238, 266, 271, 273, 284, 285, 288, 300, 301, 303, 318, 325, 327, 331, 354], "constrain": [2, 91, 141, 160], "provid": [2, 7, 9, 11, 19, 26, 29, 30, 33, 48, 54, 68, 77, 83, 85, 86, 89, 90, 95, 98, 99, 101, 108, 120, 124, 129, 130, 134, 138, 139, 140, 141, 146, 155, 156, 160, 167, 173, 176, 187, 197, 216, 221, 225, 232, 236, 239, 242, 244, 255, 275, 276, 280, 284, 314, 315, 333, 336, 342, 343, 347, 349, 352, 354, 358, 359, 369, 373], "whole": [2, 76, 88, 89, 99, 102, 108, 145, 156, 182, 187, 275, 278, 307, 311, 314, 315, 346], "abstracttre": 2, "As": [2, 9, 16, 19, 29, 48, 55, 65, 68, 72, 74, 76, 77, 80, 81, 84, 85, 88, 89, 90, 91, 92, 94, 96, 108, 109, 110, 115, 120, 124, 130, 138, 145, 147, 162, 164, 172, 174, 180, 187, 225, 233, 236, 238, 247, 271, 273, 274, 275, 276, 301, 302, 313, 332, 339, 340, 341, 348, 350, 352, 354, 359, 369], "meant": [2, 99, 101, 199, 211, 234, 357, 364], "instanti": [2, 36, 49, 136, 147, 315, 333], "expect": [2, 3, 19, 23, 26, 70, 76, 77, 82, 84, 88, 89, 90, 91, 92, 94, 107, 108, 136, 138, 141, 158, 180, 182, 187, 236, 272, 302, 310, 354, 362], "mai": [2, 9, 12, 17, 19, 26, 30, 34, 46, 48, 49, 51, 54, 60, 61, 68, 71, 73, 76, 77, 83, 84, 88, 89, 90, 91, 92, 94, 95, 96, 98, 99, 101, 107, 108, 109, 112, 114, 116, 120, 122, 124, 132, 133, 136, 138, 139, 141, 146, 147, 152, 153, 159, 160, 164, 166, 168, 172, 174, 180, 183, 186, 187, 190, 192, 193, 225, 226, 227, 232, 235, 236, 237, 238, 242, 244, 266, 271, 272, 273, 274, 275, 276, 278, 284, 296, 302, 303, 310, 313, 314, 333, 336, 337, 342, 343, 346, 347, 348, 354, 356, 358, 359, 362, 363, 369, 372, 374], "also": [2, 3, 6, 7, 9, 11, 12, 17, 19, 23, 24, 25, 26, 30, 32, 33, 34, 37, 46, 48, 50, 51, 53, 54, 56, 58, 59, 62, 63, 66, 68, 71, 72, 74, 76, 77, 80, 82, 83, 85, 86, 89, 91, 92, 95, 96, 97, 98, 99, 101, 102, 103, 104, 108, 109, 110, 111, 112, 113, 115, 116, 119, 120, 122, 123, 124, 129, 130, 131, 133, 134, 136, 138, 141, 145, 146, 147, 151, 155, 156, 159, 160, 163, 164, 169, 171, 172, 174, 180, 182, 186, 187, 188, 190, 192, 193, 212, 214, 215, 216, 217, 225, 226, 227, 231, 233, 234, 236, 237, 238, 239, 241, 242, 243, 244, 264, 265, 266, 271, 272, 273, 274, 275, 276, 277, 278, 280, 282, 284, 285, 288, 290, 293, 294, 296, 300, 301, 302, 303, 305, 306, 309, 310, 312, 314, 315, 336, 337, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 352, 354, 356, 359, 361, 362, 363, 365, 366, 367, 368, 369, 374], "inherit": [2, 6, 7, 23, 26, 36, 74, 78, 108, 112, 129, 144, 146, 147, 156, 163, 171, 172, 187, 202, 203, 204, 206, 207, 208, 209, 237, 275, 302, 313, 333, 339, 363], "repres": [2, 3, 6, 9, 11, 13, 19, 21, 22, 26, 27, 33, 39, 47, 49, 51, 55, 58, 59, 60, 64, 66, 68, 71, 72, 77, 79, 83, 86, 87, 89, 91, 98, 99, 101, 102, 107, 108, 114, 127, 129, 130, 131, 133, 136, 138, 139, 141, 146, 147, 150, 152, 154, 156, 158, 160, 161, 164, 170, 172, 173, 174, 180, 186, 187, 193, 221, 225, 227, 228, 229, 230, 232, 235, 239, 240, 242, 273, 274, 275, 276, 277, 278, 280, 286, 300, 302, 303, 307, 310, 330, 333, 336, 338, 340, 344, 346, 348, 349, 350, 353, 354, 358, 359, 361, 362, 363, 365, 366, 367, 374], "clonablearrai": [2, 3, 11, 69, 98, 116, 124, 125, 127, 141, 159, 169, 172, 174, 183, 215, 278, 280, 307, 312, 342, 347], "clonablelist": [2, 26, 131, 156, 158, 314, 346], "built": [2, 23, 29, 76, 77, 80, 83, 84, 87, 91, 92, 93, 109, 130, 131, 134, 141, 147, 172, 182, 187, 225, 232, 234, 238, 244, 264, 268, 276, 283, 308, 340, 358, 363], "ar": [2, 3, 6, 8, 9, 10, 11, 13, 16, 17, 19, 22, 23, 24, 25, 26, 29, 30, 33, 34, 36, 39, 42, 46, 47, 48, 49, 51, 54, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 101, 102, 104, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 133, 134, 136, 137, 138, 139, 141, 143, 144, 145, 146, 147, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 180, 181, 182, 183, 184, 186, 187, 188, 192, 193, 194, 196, 197, 199, 210, 211, 212, 215, 216, 217, 218, 224, 225, 226, 227, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 247, 248, 251, 255, 257, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 282, 284, 285, 286, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 324, 332, 333, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 368, 369, 370, 371, 372, 373, 374], "both": [2, 11, 16, 17, 19, 23, 26, 30, 54, 76, 82, 89, 90, 91, 93, 99, 101, 107, 108, 109, 114, 115, 116, 117, 119, 120, 122, 123, 127, 130, 131, 134, 136, 145, 146, 147, 156, 160, 161, 172, 174, 180, 182, 187, 188, 193, 225, 227, 242, 276, 278, 286, 289, 292, 293, 297, 299, 303, 308, 314, 315, 316, 323, 339, 343, 346, 348, 354, 356, 359, 362, 373], "If": [2, 3, 6, 9, 10, 11, 16, 17, 19, 21, 22, 23, 25, 26, 28, 30, 33, 34, 39, 46, 47, 49, 51, 58, 60, 61, 63, 68, 70, 72, 73, 76, 77, 79, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 96, 98, 99, 101, 102, 104, 107, 108, 109, 110, 112, 114, 116, 117, 120, 121, 122, 124, 127, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 144, 145, 146, 147, 149, 150, 151, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 171, 172, 174, 175, 180, 182, 183, 186, 187, 188, 192, 193, 212, 215, 216, 218, 221, 222, 225, 226, 227, 228, 229, 232, 235, 236, 237, 238, 239, 241, 242, 245, 266, 269, 270, 271, 273, 274, 275, 276, 277, 278, 280, 285, 288, 289, 291, 293, 294, 296, 300, 301, 302, 303, 305, 307, 308, 310, 313, 314, 315, 323, 333, 339, 342, 343, 345, 346, 347, 348, 350, 351, 354, 355, 356, 358, 359, 361, 362, 363, 364, 365, 366, 368, 369, 371, 372, 373], "behav": [2, 17, 26, 30, 89, 108, 145, 164, 172, 238, 276, 293, 302, 348, 366], "consid": [2, 3, 9, 11, 13, 16, 17, 19, 21, 22, 23, 26, 33, 46, 53, 56, 57, 62, 65, 68, 76, 77, 80, 83, 85, 88, 89, 92, 96, 99, 100, 101, 108, 109, 110, 111, 113, 114, 119, 120, 121, 123, 124, 127, 130, 136, 137, 141, 146, 147, 151, 156, 160, 162, 168, 171, 172, 187, 193, 212, 213, 214, 215, 225, 226, 227, 231, 236, 237, 242, 244, 264, 265, 266, 271, 276, 278, 280, 287, 302, 303, 313, 315, 332, 338, 346, 348, 350, 354, 356, 358, 359, 363, 369, 372], "equal": [2, 3, 6, 8, 9, 11, 19, 23, 25, 30, 31, 56, 58, 65, 68, 72, 77, 82, 89, 91, 92, 96, 101, 102, 104, 108, 109, 112, 113, 115, 120, 122, 126, 127, 130, 131, 134, 136, 138, 139, 141, 143, 144, 145, 146, 147, 150, 151, 158, 159, 160, 162, 164, 172, 174, 176, 180, 182, 186, 187, 192, 193, 211, 215, 216, 225, 232, 233, 235, 236, 237, 239, 243, 244, 265, 275, 276, 278, 280, 282, 289, 290, 296, 300, 302, 303, 307, 308, 309, 310, 312, 313, 314, 315, 316, 330, 340, 343, 345, 346, 347, 348, 350, 352, 355, 356, 358, 359, 362, 363, 369, 372, 374], "obtain": [2, 3, 6, 8, 9, 11, 16, 17, 19, 22, 23, 24, 25, 30, 33, 39, 46, 48, 49, 51, 54, 56, 57, 59, 64, 65, 68, 71, 72, 73, 74, 76, 77, 80, 83, 85, 91, 92, 93, 94, 96, 97, 98, 99, 101, 108, 110, 111, 113, 114, 115, 119, 120, 121, 122, 124, 126, 130, 131, 134, 138, 141, 144, 145, 146, 147, 156, 158, 160, 162, 164, 171, 172, 173, 183, 186, 187, 192, 193, 197, 211, 215, 216, 218, 225, 226, 227, 229, 231, 232, 236, 239, 241, 244, 249, 264, 265, 267, 268, 269, 270, 271, 273, 275, 276, 277, 278, 280, 285, 296, 297, 299, 300, 301, 302, 303, 305, 307, 309, 310, 314, 315, 339, 340, 343, 346, 347, 348, 352, 354, 355, 356, 359, 362, 363, 364, 365, 366, 369, 373], "through": [2, 6, 7, 11, 19, 23, 26, 30, 46, 53, 72, 76, 77, 80, 81, 85, 86, 88, 93, 94, 95, 96, 99, 101, 108, 109, 112, 114, 118, 124, 131, 144, 145, 151, 159, 160, 171, 172, 175, 180, 186, 187, 216, 218, 225, 227, 232, 239, 240, 273, 274, 278, 280, 286, 302, 305, 337, 343, 346, 348, 354, 357, 359, 372], "id": [2, 99, 101, 108, 159, 216, 239, 244, 346], "should": [2, 3, 9, 11, 13, 17, 22, 23, 26, 33, 36, 39, 41, 47, 51, 52, 58, 59, 68, 69, 72, 80, 82, 83, 89, 91, 92, 98, 99, 101, 108, 112, 119, 120, 124, 125, 128, 129, 130, 131, 133, 134, 139, 146, 147, 154, 155, 156, 157, 158, 160, 162, 172, 180, 186, 187, 191, 199, 211, 221, 222, 227, 230, 232, 233, 234, 235, 236, 238, 239, 241, 242, 244, 249, 255, 265, 271, 272, 273, 274, 275, 276, 278, 280, 282, 284, 289, 296, 300, 302, 303, 309, 313, 315, 340, 343, 345, 346, 348, 349, 350, 352, 354, 359, 363, 366, 369], "identifi": [2, 9, 11, 56, 99, 104, 110, 111, 124, 164, 168, 187, 232, 233, 264, 266, 354, 359], "index": [2, 3, 9, 10, 11, 12, 16, 17, 19, 23, 24, 25, 26, 29, 30, 33, 38, 39, 41, 42, 46, 48, 54, 56, 58, 59, 60, 61, 65, 67, 68, 69, 74, 77, 88, 89, 91, 92, 98, 99, 100, 101, 110, 111, 112, 113, 114, 119, 120, 122, 124, 127, 133, 134, 136, 139, 140, 141, 143, 144, 145, 146, 147, 149, 150, 151, 160, 161, 162, 163, 164, 172, 181, 183, 185, 186, 187, 188, 191, 193, 212, 215, 216, 217, 221, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 245, 247, 248, 251, 253, 257, 262, 263, 265, 266, 268, 270, 271, 272, 273, 274, 277, 278, 284, 286, 289, 290, 291, 292, 293, 296, 297, 302, 303, 306, 307, 310, 313, 314, 315, 316, 323, 332, 336, 342, 343, 345, 346, 347, 348, 349, 354, 358, 359, 365, 368, 374], "wai": [2, 9, 11, 17, 26, 30, 33, 46, 53, 55, 72, 74, 76, 80, 91, 92, 96, 98, 99, 101, 108, 111, 118, 119, 120, 124, 130, 131, 134, 139, 141, 145, 146, 147, 154, 159, 160, 162, 164, 166, 172, 182, 186, 187, 212, 218, 219, 222, 225, 235, 236, 238, 244, 265, 266, 267, 269, 276, 278, 280, 285, 288, 294, 296, 298, 300, 301, 302, 303, 304, 305, 306, 308, 313, 314, 315, 343, 346, 348, 352, 354, 358, 362, 363, 369], "describ": [2, 7, 11, 17, 30, 46, 49, 50, 54, 70, 71, 72, 73, 76, 77, 80, 83, 89, 91, 92, 99, 100, 101, 102, 108, 111, 113, 120, 124, 127, 137, 138, 139, 145, 146, 150, 151, 158, 160, 162, 164, 172, 182, 187, 193, 219, 225, 234, 238, 242, 271, 273, 283, 300, 303, 305, 307, 310, 311, 313, 345, 347, 354, 358, 359, 362, 363, 365, 369], "canon": [2, 11, 16, 17, 22, 33, 56, 57, 59, 77, 89, 102, 104, 110, 112, 114, 129, 144, 145, 149, 156, 162, 164, 168, 182, 187, 227, 237, 238, 244, 264, 265, 267, 269, 272, 284, 302, 310, 334, 343, 348, 350, 354, 362, 365], "label": [2, 11, 17, 19, 21, 22, 23, 33, 39, 56, 77, 89, 98, 99, 101, 108, 109, 113, 114, 119, 120, 124, 130, 131, 134, 154, 156, 159, 160, 162, 163, 169, 171, 172, 182, 183, 186, 187, 196, 197, 211, 215, 216, 222, 227, 229, 231, 233, 238, 240, 242, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 265, 267, 268, 269, 270, 275, 278, 284, 285, 288, 294, 300, 301, 303, 306, 315, 318, 319, 320, 322, 325, 327, 328, 329, 331, 332, 333, 334, 340, 348, 354, 359, 365, 369, 373], "entir": [2, 72, 86, 98, 108, 182, 217, 233, 242, 354, 359], "howev": [2, 9, 11, 17, 22, 30, 54, 58, 74, 80, 83, 90, 94, 98, 101, 108, 109, 113, 116, 120, 124, 138, 141, 146, 147, 151, 156, 157, 160, 163, 172, 182, 187, 192, 193, 215, 216, 225, 226, 227, 231, 232, 238, 242, 264, 268, 271, 272, 273, 275, 280, 296, 298, 302, 303, 304, 305, 337, 346, 354, 362], "hand": [2, 9, 19, 96, 108, 109, 114, 116, 145, 146, 164, 172, 180, 187, 193, 216, 225, 227, 236, 239, 240, 241, 242, 271, 276, 303, 343, 347, 354, 369], "reason": [2, 11, 17, 30, 72, 93, 96, 119, 160, 164, 187, 199, 225, 227, 273, 296, 303, 306, 336, 348, 354, 359, 362], "valu": [2, 3, 9, 10, 11, 19, 21, 22, 23, 26, 30, 33, 39, 49, 50, 51, 54, 56, 58, 59, 60, 61, 66, 68, 72, 73, 76, 77, 82, 83, 84, 85, 88, 89, 90, 91, 92, 93, 96, 97, 99, 101, 102, 107, 108, 109, 114, 116, 120, 121, 123, 124, 127, 129, 130, 131, 136, 138, 139, 141, 145, 146, 154, 156, 158, 160, 164, 171, 172, 173, 180, 187, 188, 189, 191, 193, 197, 199, 200, 212, 215, 216, 217, 227, 231, 233, 235, 236, 239, 242, 266, 271, 273, 274, 275, 276, 278, 280, 285, 286, 288, 291, 293, 294, 296, 299, 300, 301, 302, 303, 307, 310, 315, 336, 337, 340, 342, 343, 344, 345, 346, 347, 350, 354, 356, 359, 362, 370, 372, 374], "return": [2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 16, 17, 19, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 127, 129, 130, 131, 132, 133, 134, 136, 138, 139, 140, 141, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 196, 197, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 371, 372, 373, 374], "canonical_label": [2, 11, 22, 89, 156, 187, 275, 318, 320, 325, 327, 328, 329, 331, 332, 333, 334], "heavili": [2, 72, 92, 302, 348], "depend": [2, 9, 11, 19, 21, 24, 26, 32, 39, 59, 60, 83, 89, 91, 104, 112, 114, 123, 134, 136, 141, 145, 146, 155, 156, 160, 162, 163, 164, 172, 174, 181, 187, 234, 236, 237, 238, 266, 272, 276, 285, 286, 288, 294, 300, 301, 302, 303, 306, 313, 315, 343, 349, 354, 359, 366], "overridden": [2, 108, 156, 227, 242, 271, 276], "most": [2, 3, 6, 9, 10, 11, 13, 19, 22, 23, 26, 28, 30, 32, 33, 34, 37, 46, 51, 54, 56, 59, 68, 72, 73, 74, 76, 77, 80, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 98, 99, 101, 108, 109, 111, 113, 114, 115, 116, 117, 119, 120, 121, 123, 124, 127, 129, 130, 131, 133, 139, 140, 141, 146, 147, 151, 153, 154, 156, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 182, 184, 186, 187, 188, 189, 191, 192, 193, 215, 219, 221, 222, 225, 227, 228, 229, 230, 231, 236, 238, 239, 241, 242, 243, 244, 253, 271, 272, 273, 274, 275, 276, 278, 284, 290, 293, 294, 296, 302, 303, 305, 307, 309, 310, 313, 314, 315, 332, 336, 343, 346, 347, 348, 349, 350, 354, 356, 359, 361, 362, 363, 365, 366, 368, 369, 372, 374], "incoher": [2, 30, 354], "author": [2, 6, 9, 10, 11, 12, 16, 17, 19, 20, 21, 22, 23, 24, 26, 27, 28, 30, 32, 34, 39, 48, 50, 51, 53, 54, 59, 60, 62, 63, 64, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 87, 89, 95, 96, 97, 98, 99, 100, 101, 102, 105, 107, 108, 109, 110, 111, 113, 114, 115, 116, 119, 120, 122, 126, 127, 128, 130, 131, 132, 133, 138, 139, 141, 144, 145, 146, 149, 150, 151, 153, 154, 156, 157, 159, 160, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 179, 187, 188, 192, 193, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 222, 223, 226, 231, 232, 233, 236, 239, 240, 266, 274, 275, 276, 278, 280, 287, 290, 298, 302, 303, 304, 307, 308, 309, 310, 311, 313, 314, 315, 316, 336, 339, 340, 341, 342, 344, 345, 346, 347, 348, 350, 354, 355, 356, 358, 359, 360, 362, 363, 366, 369, 372, 373, 374], "florent": [2, 11, 26, 101, 113, 153, 154, 156, 159, 160, 275, 302, 336, 339, 350], "hivert": [2, 11, 26, 101, 113, 124, 146, 150, 153, 154, 156, 159, 160, 227, 275, 302, 336, 339, 350], "2010": [2, 11, 26, 27, 73, 102, 127, 128, 146, 156, 159, 171, 213, 215, 216, 217, 218, 219, 296, 359, 362], "2011": [2, 11, 24, 28, 34, 71, 101, 102, 113, 116, 127, 143, 156, 160, 187, 199, 201, 207, 209, 210, 211, 240, 274, 275, 284, 306, 309, 315, 346, 348, 350], "initi": [2, 6, 9, 10, 11, 12, 16, 17, 19, 22, 23, 24, 26, 28, 32, 33, 34, 39, 46, 48, 50, 51, 53, 54, 59, 60, 62, 63, 64, 67, 68, 69, 71, 73, 74, 78, 79, 87, 98, 99, 101, 102, 107, 108, 109, 112, 114, 115, 116, 120, 122, 128, 130, 131, 132, 133, 138, 139, 141, 147, 149, 150, 151, 156, 157, 158, 159, 160, 162, 163, 164, 165, 167, 168, 169, 170, 171, 174, 177, 179, 193, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 223, 226, 227, 232, 233, 234, 236, 239, 240, 266, 274, 275, 276, 287, 290, 298, 299, 302, 304, 306, 307, 310, 311, 313, 314, 315, 316, 336, 339, 340, 341, 342, 345, 346, 347, 348, 350, 355, 359, 362, 363, 365, 368, 369, 374], "revis": [2, 156], "fr\u00e9d\u00e9ric": [2, 11, 110, 111, 113, 119, 130, 156, 188], "chapoton": [2, 11, 107, 110, 111, 113, 119, 130, 156, 188], "contribut": [2, 19, 101, 114, 134, 156, 227, 289, 302], "abstract_tre": [2, 11, 275], "abstractclonabletre": [2, 11, 156, 275], "clonabl": [2, 129], "clone": [2, 11, 275], "protocol": [2, 124], "list_clon": [2, 275], "whether": [2, 3, 9, 10, 11, 13, 17, 19, 21, 25, 26, 30, 32, 33, 34, 51, 56, 59, 62, 64, 70, 71, 72, 74, 76, 77, 80, 82, 83, 84, 85, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 101, 104, 108, 109, 110, 112, 114, 115, 120, 124, 127, 130, 131, 134, 138, 141, 146, 153, 154, 156, 157, 158, 159, 160, 162, 172, 173, 174, 176, 180, 182, 183, 186, 187, 191, 192, 193, 215, 227, 229, 230, 232, 234, 236, 238, 239, 240, 242, 243, 263, 264, 270, 271, 272, 273, 274, 275, 276, 278, 285, 288, 294, 296, 300, 301, 303, 305, 307, 313, 314, 340, 345, 346, 350, 354, 356, 359, 362, 363, 364, 366, 367, 368, 371, 373], "where": [2, 3, 8, 9, 10, 11, 16, 17, 19, 22, 23, 25, 26, 28, 29, 30, 32, 33, 34, 38, 39, 46, 47, 48, 49, 51, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 72, 73, 74, 76, 77, 79, 80, 83, 86, 87, 88, 89, 90, 91, 92, 94, 95, 98, 99, 100, 101, 102, 108, 109, 110, 111, 112, 113, 114, 116, 118, 120, 121, 122, 124, 125, 126, 127, 128, 130, 131, 133, 134, 136, 137, 138, 139, 141, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 155, 156, 159, 160, 161, 162, 163, 164, 171, 172, 174, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 191, 193, 211, 212, 215, 216, 217, 224, 225, 229, 232, 233, 234, 235, 236, 237, 238, 239, 242, 243, 244, 264, 266, 271, 272, 273, 276, 277, 278, 280, 284, 285, 286, 287, 288, 289, 293, 294, 296, 297, 298, 300, 301, 302, 303, 304, 305, 310, 311, 312, 313, 314, 315, 316, 323, 324, 330, 332, 333, 336, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 354, 355, 356, 359, 362, 363, 364, 365, 369, 372, 373, 374], "ad": [2, 6, 9, 16, 19, 22, 23, 26, 34, 51, 54, 68, 71, 72, 76, 79, 80, 91, 92, 94, 98, 99, 101, 102, 108, 109, 113, 118, 120, 122, 123, 130, 131, 138, 145, 146, 153, 157, 160, 162, 163, 164, 172, 174, 182, 186, 187, 192, 193, 199, 210, 211, 212, 215, 225, 226, 227, 231, 238, 264, 272, 274, 276, 278, 280, 285, 293, 300, 301, 303, 305, 307, 310, 314, 346, 348, 350, 354, 355, 359, 362, 363, 364, 369], "child": [2, 7, 11, 86, 120, 156, 178, 211, 275, 354], "allow": [2, 6, 11, 19, 22, 23, 30, 68, 76, 77, 89, 92, 102, 107, 108, 109, 114, 115, 120, 122, 124, 130, 131, 134, 136, 138, 139, 141, 145, 146, 151, 157, 158, 160, 163, 170, 172, 173, 182, 187, 189, 192, 193, 227, 229, 230, 234, 238, 239, 272, 275, 276, 300, 302, 305, 307, 313, 314, 336, 339, 343, 346, 354, 355, 359, 362, 363, 374], "due": [2, 19, 26, 27, 74, 80, 83, 98, 99, 101, 108, 116, 120, 124, 127, 132, 138, 145, 146, 147, 151, 168, 172, 182, 187, 192, 212, 215, 226, 233, 238, 293, 302, 314, 322], "limit": [2, 19, 23, 26, 107, 108, 123, 124, 139, 145, 146, 151, 173, 187, 225, 244, 285, 288, 294, 300, 301, 302, 303, 350, 354, 369], "cannot": [2, 19, 37, 39, 76, 80, 89, 91, 108, 109, 120, 124, 129, 131, 138, 141, 145, 160, 172, 187, 192, 225, 232, 251, 278, 302, 307, 314, 345, 354, 358, 369], "here": [2, 9, 11, 12, 17, 23, 26, 30, 34, 46, 53, 56, 57, 60, 62, 65, 66, 67, 68, 69, 76, 83, 84, 85, 87, 88, 89, 90, 91, 92, 94, 96, 98, 101, 102, 108, 109, 110, 112, 113, 115, 116, 120, 122, 124, 129, 130, 131, 136, 138, 141, 144, 145, 146, 147, 151, 153, 159, 160, 163, 164, 166, 167, 170, 172, 182, 183, 187, 197, 211, 212, 215, 225, 226, 227, 229, 231, 232, 234, 236, 238, 239, 240, 241, 242, 244, 264, 266, 271, 272, 273, 274, 275, 277, 278, 280, 285, 288, 290, 293, 294, 298, 300, 301, 302, 303, 304, 305, 311, 312, 313, 323, 333, 336, 338, 343, 346, 348, 350, 354, 359, 363, 368], "clonableel": 2, "becaus": [2, 9, 11, 13, 23, 26, 47, 49, 58, 66, 80, 98, 101, 105, 107, 108, 109, 112, 114, 120, 124, 130, 131, 139, 144, 146, 147, 156, 160, 163, 164, 172, 173, 187, 199, 202, 203, 204, 206, 207, 208, 209, 211, 227, 232, 233, 236, 238, 247, 251, 259, 265, 271, 272, 275, 290, 296, 302, 315, 343, 346, 347, 348, 352, 354, 362, 366, 367, 369], "would": [2, 8, 9, 19, 80, 92, 93, 108, 109, 113, 114, 119, 120, 123, 124, 127, 130, 131, 139, 146, 156, 159, 160, 165, 212, 225, 227, 231, 234, 238, 239, 264, 265, 271, 272, 273, 275, 305, 313, 314, 323, 343, 346, 354, 372], "prevent": [2, 302], "u": [2, 8, 9, 11, 16, 17, 19, 30, 33, 39, 46, 50, 53, 55, 56, 58, 59, 62, 63, 73, 74, 76, 77, 80, 82, 89, 91, 92, 93, 102, 108, 110, 111, 112, 119, 120, 122, 123, 127, 130, 141, 144, 145, 146, 160, 167, 172, 173, 180, 182, 186, 187, 191, 193, 225, 227, 233, 234, 235, 236, 237, 238, 241, 242, 244, 271, 273, 276, 278, 280, 285, 288, 293, 296, 301, 302, 303, 305, 307, 308, 313, 315, 343, 344, 345, 346, 350, 354, 356, 358, 359, 361, 362, 364, 365, 366, 367, 368, 369, 371, 373], "later": [2, 17, 29, 108, 114, 123, 183, 221, 238, 302, 359], "how": [2, 3, 9, 11, 19, 26, 29, 30, 51, 58, 62, 76, 77, 79, 82, 83, 84, 88, 89, 90, 91, 93, 94, 99, 107, 109, 114, 123, 124, 127, 133, 134, 138, 141, 145, 146, 147, 154, 160, 163, 180, 186, 187, 193, 212, 225, 227, 234, 235, 236, 238, 242, 271, 276, 290, 296, 302, 303, 305, 313, 314, 315, 323, 346, 347, 350, 354, 359, 362], "follow": [2, 3, 6, 8, 9, 11, 16, 17, 19, 22, 23, 26, 29, 30, 39, 42, 44, 45, 46, 47, 49, 51, 52, 54, 56, 57, 58, 60, 61, 63, 65, 66, 68, 69, 71, 72, 74, 76, 77, 78, 79, 80, 81, 82, 83, 88, 89, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 104, 107, 108, 109, 110, 112, 114, 115, 116, 119, 120, 121, 122, 124, 127, 130, 131, 133, 134, 138, 139, 141, 145, 146, 147, 151, 153, 154, 156, 157, 158, 160, 162, 163, 168, 170, 171, 172, 176, 180, 182, 183, 185, 186, 187, 188, 192, 193, 211, 212, 215, 216, 225, 226, 227, 228, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 266, 271, 272, 273, 274, 275, 276, 278, 283, 284, 285, 286, 290, 293, 296, 297, 298, 300, 301, 302, 303, 304, 305, 307, 308, 310, 312, 313, 314, 315, 316, 321, 332, 333, 338, 342, 343, 345, 346, 347, 349, 350, 354, 356, 359, 362, 363, 364, 365, 369, 372], "assumpt": [2, 16, 58, 93, 226, 234, 303, 312, 338, 350], "subclass": [2, 11, 26, 52, 58, 68, 69, 99, 120, 123, 130, 156, 221, 227, 234, 242, 271, 275, 333, 348, 352, 359], "least": [2, 3, 9, 17, 19, 26, 30, 33, 60, 72, 78, 79, 82, 92, 95, 101, 107, 108, 109, 120, 124, 139, 141, 160, 164, 174, 180, 182, 183, 186, 187, 193, 196, 276, 278, 284, 300, 302, 303, 313, 315, 348, 349, 354, 362, 368, 372], "To": [2, 9, 11, 23, 26, 51, 56, 57, 58, 65, 68, 85, 89, 98, 99, 101, 107, 108, 109, 114, 115, 116, 120, 121, 123, 124, 129, 130, 131, 134, 136, 139, 145, 146, 147, 150, 155, 159, 172, 180, 181, 182, 186, 187, 215, 216, 218, 221, 225, 226, 234, 235, 236, 237, 238, 239, 240, 242, 243, 271, 272, 273, 276, 285, 288, 294, 300, 301, 302, 303, 306, 314, 332, 343, 346, 349, 350, 354, 359, 363, 369, 372], "respect": [2, 9, 11, 19, 22, 26, 30, 33, 46, 55, 56, 60, 62, 63, 68, 69, 76, 80, 89, 90, 91, 97, 101, 104, 107, 108, 109, 114, 120, 127, 130, 131, 134, 139, 141, 143, 144, 145, 146, 147, 151, 156, 160, 162, 164, 172, 174, 182, 186, 187, 188, 192, 212, 216, 221, 226, 227, 229, 230, 232, 237, 238, 242, 247, 257, 272, 273, 276, 278, 284, 285, 286, 289, 293, 294, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 310, 312, 313, 321, 323, 337, 343, 346, 347, 348, 350, 352, 354, 362, 364, 369], "check": [2, 3, 6, 9, 10, 11, 13, 17, 19, 21, 23, 25, 26, 28, 30, 33, 34, 39, 48, 53, 54, 56, 59, 61, 68, 72, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 104, 107, 108, 109, 110, 114, 116, 119, 120, 123, 124, 125, 127, 129, 130, 131, 134, 138, 139, 141, 144, 145, 146, 151, 152, 153, 156, 158, 159, 160, 161, 163, 167, 168, 170, 171, 172, 173, 174, 180, 182, 183, 184, 186, 187, 192, 193, 197, 211, 212, 215, 216, 219, 224, 226, 227, 229, 231, 234, 236, 239, 241, 242, 243, 264, 265, 269, 272, 273, 274, 275, 276, 277, 278, 280, 283, 294, 302, 303, 305, 307, 309, 312, 314, 341, 342, 343, 345, 346, 347, 348, 349, 354, 359, 361, 362, 364], "new": [2, 9, 19, 28, 30, 33, 48, 58, 60, 64, 68, 69, 72, 80, 89, 92, 101, 102, 108, 109, 116, 119, 130, 131, 134, 136, 146, 154, 156, 158, 172, 180, 182, 187, 192, 215, 216, 225, 227, 236, 275, 276, 289, 302, 314, 336, 339, 340, 346, 347, 355, 363, 365, 372, 373], "self": [2, 3, 6, 7, 8, 11, 12, 16, 17, 19, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 73, 74, 79, 80, 89, 97, 98, 99, 101, 102, 108, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 122, 123, 124, 126, 127, 129, 130, 131, 133, 134, 139, 141, 144, 145, 146, 147, 149, 150, 151, 153, 154, 156, 158, 159, 160, 162, 163, 164, 167, 168, 169, 170, 171, 172, 174, 180, 181, 182, 183, 185, 186, 187, 192, 193, 196, 197, 211, 212, 213, 214, 215, 216, 218, 219, 221, 222, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 253, 255, 257, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 280, 282, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303, 305, 307, 310, 311, 312, 313, 314, 315, 316, 319, 323, 327, 328, 329, 330, 332, 333, 334, 336, 338, 340, 341, 342, 343, 344, 346, 347, 348, 350, 352, 356, 359, 360, 362, 363, 365, 367, 368, 369, 372, 373, 374], "correct": [2, 11, 23, 26, 28, 76, 77, 80, 83, 84, 87, 88, 89, 90, 91, 92, 94, 101, 108, 119, 127, 138, 146, 172, 187, 193, 210, 212, 216, 218, 236, 237, 238, 239, 255, 272, 278, 290, 314, 315, 346, 347, 348, 354, 364], "doe": [2, 3, 9, 11, 16, 17, 19, 25, 26, 29, 30, 33, 46, 51, 61, 72, 76, 79, 83, 84, 85, 88, 89, 91, 92, 94, 95, 99, 101, 107, 108, 109, 112, 124, 127, 130, 131, 134, 138, 139, 140, 141, 145, 149, 151, 156, 158, 160, 164, 165, 168, 169, 170, 173, 180, 182, 183, 187, 189, 192, 193, 197, 212, 215, 217, 227, 236, 237, 238, 239, 240, 241, 242, 243, 271, 272, 273, 274, 275, 276, 285, 290, 293, 298, 300, 301, 303, 304, 305, 311, 314, 315, 333, 340, 343, 346, 347, 348, 349, 350, 354, 359, 362, 363, 364, 366], "noth": [2, 11, 29, 33, 108, 109, 138, 145, 156, 172, 187, 192, 215, 238, 276, 346], "mani": [2, 6, 10, 11, 13, 17, 19, 22, 23, 26, 28, 36, 51, 56, 61, 89, 96, 98, 99, 101, 108, 109, 110, 112, 113, 114, 119, 120, 121, 124, 130, 133, 136, 145, 146, 147, 151, 160, 163, 164, 171, 174, 182, 187, 225, 235, 236, 238, 239, 265, 294, 302, 303, 310, 314, 315, 323, 336, 340, 346, 348, 351, 354, 358, 359, 362, 363], "requir": [2, 6, 9, 11, 17, 23, 26, 34, 46, 47, 51, 59, 72, 76, 77, 80, 83, 89, 91, 92, 95, 96, 108, 114, 120, 129, 134, 138, 141, 146, 160, 167, 170, 174, 187, 192, 193, 211, 222, 232, 235, 236, 238, 240, 242, 272, 274, 276, 292, 299, 300, 303, 305, 314, 332, 340, 343, 346, 347, 354, 362, 363], "character": [2, 46, 51, 62, 72, 76, 114, 156, 182, 193, 225, 275, 299, 300, 302, 303, 354], "hold": [2, 11, 30, 59, 72, 92, 108, 110, 111, 114, 115, 123, 138, 139, 151, 160, 172, 182, 199, 212, 217, 218, 227, 305, 338, 344, 346, 349, 374], "eg": [2, 276, 346], "orderedtre": [2, 9, 156, 275], "binarytre": [2, 9, 11, 120, 130], "abstractlabelledclonabletre": [2, 11, 156, 275], "parent": [2, 3, 6, 8, 11, 12, 13, 16, 17, 19, 24, 25, 26, 28, 30, 32, 33, 34, 36, 37, 38, 39, 47, 48, 49, 50, 51, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 73, 74, 97, 98, 99, 101, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 120, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 141, 144, 145, 146, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 162, 163, 164, 167, 169, 170, 171, 172, 174, 176, 178, 182, 183, 185, 187, 188, 189, 191, 192, 193, 194, 196, 197, 211, 212, 213, 214, 215, 216, 219, 222, 225, 229, 232, 233, 235, 236, 237, 239, 241, 242, 243, 272, 273, 274, 275, 276, 278, 280, 284, 287, 290, 296, 297, 302, 303, 307, 308, 310, 312, 313, 314, 315, 318, 319, 320, 322, 323, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 341, 342, 343, 344, 346, 347, 348, 352, 353, 355, 356, 359, 361, 362, 363, 364, 366, 370, 372, 374], "none": [2, 3, 8, 9, 11, 16, 19, 21, 22, 23, 25, 26, 28, 29, 30, 32, 33, 34, 36, 37, 39, 41, 46, 47, 48, 49, 51, 52, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 68, 69, 70, 76, 77, 79, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 97, 98, 99, 100, 101, 102, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 119, 120, 121, 124, 125, 127, 128, 129, 130, 131, 133, 134, 136, 137, 139, 140, 141, 144, 145, 146, 149, 153, 154, 156, 157, 158, 159, 160, 161, 162, 164, 167, 168, 170, 171, 172, 174, 176, 180, 182, 184, 185, 186, 187, 188, 189, 191, 192, 193, 196, 197, 211, 212, 215, 216, 217, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 264, 265, 267, 268, 269, 270, 271, 273, 274, 275, 276, 278, 280, 282, 283, 284, 285, 286, 288, 289, 291, 293, 294, 295, 296, 297, 299, 300, 301, 303, 307, 308, 310, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 342, 343, 344, 346, 347, 348, 350, 352, 355, 356, 358, 359, 361, 362, 363, 365, 366, 368, 369, 370, 372, 373, 374], "true": [2, 3, 6, 9, 10, 11, 12, 13, 16, 17, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 39, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 74, 76, 77, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 101, 102, 104, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 139, 140, 141, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 167, 168, 169, 170, 171, 172, 174, 176, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 199, 200, 205, 207, 209, 211, 212, 213, 214, 215, 216, 218, 219, 221, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 282, 283, 285, 286, 289, 290, 291, 293, 294, 295, 296, 297, 300, 302, 303, 305, 306, 307, 310, 312, 313, 314, 315, 316, 318, 319, 321, 322, 323, 324, 325, 327, 328, 329, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 354, 355, 356, 358, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374], "abstractlabelledtre": 2, "take": [2, 3, 6, 11, 13, 19, 22, 26, 28, 29, 38, 46, 47, 50, 54, 55, 57, 58, 59, 65, 68, 69, 80, 85, 89, 91, 92, 96, 99, 101, 107, 108, 109, 116, 120, 124, 127, 134, 136, 138, 139, 140, 141, 144, 145, 146, 149, 150, 151, 153, 159, 160, 162, 164, 167, 168, 169, 172, 176, 180, 187, 193, 215, 221, 226, 227, 234, 235, 236, 242, 244, 264, 267, 269, 271, 273, 274, 275, 276, 278, 280, 289, 293, 296, 300, 302, 303, 305, 310, 312, 316, 337, 343, 346, 347, 350, 354, 356, 359, 362, 369], "care": [2, 89, 99, 156, 172, 234, 275, 302, 354, 358, 366], "modif": [2, 33, 118, 158, 215, 275, 359], "map_label": [2, 11], "appli": [2, 3, 6, 8, 11, 16, 19, 21, 22, 29, 30, 36, 56, 59, 64, 68, 69, 80, 91, 92, 93, 102, 108, 114, 115, 118, 120, 122, 124, 130, 131, 133, 140, 141, 145, 146, 147, 149, 150, 151, 160, 162, 163, 167, 168, 169, 172, 173, 182, 187, 192, 193, 212, 214, 215, 232, 234, 236, 239, 241, 242, 271, 273, 276, 277, 278, 284, 285, 293, 300, 301, 302, 303, 305, 313, 314, 343, 346, 348, 354, 356, 359, 365, 366, 369, 373], "ha": [2, 3, 7, 9, 10, 11, 12, 16, 17, 19, 21, 22, 23, 24, 25, 26, 28, 30, 34, 46, 51, 56, 66, 68, 72, 74, 77, 80, 82, 83, 84, 85, 87, 88, 89, 91, 96, 97, 98, 99, 101, 102, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 123, 124, 127, 129, 130, 131, 134, 136, 138, 139, 141, 144, 145, 146, 147, 151, 153, 154, 156, 158, 159, 160, 161, 163, 164, 167, 169, 172, 174, 180, 181, 182, 183, 185, 186, 187, 188, 192, 193, 196, 216, 217, 221, 225, 226, 227, 229, 232, 233, 235, 236, 239, 240, 242, 243, 270, 274, 275, 276, 278, 282, 289, 293, 296, 300, 302, 303, 308, 310, 313, 314, 315, 318, 321, 323, 332, 336, 339, 343, 345, 346, 347, 348, 349, 350, 354, 355, 356, 359, 362, 363, 365, 368, 369, 374], "been": [2, 7, 11, 16, 23, 26, 77, 79, 80, 82, 85, 89, 91, 92, 95, 101, 107, 108, 112, 124, 130, 131, 134, 138, 141, 145, 146, 159, 160, 163, 172, 180, 182, 183, 187, 191, 216, 217, 227, 236, 238, 240, 241, 242, 244, 264, 265, 276, 278, 303, 308, 313, 314, 315, 343, 346, 354, 356, 362, 369], "all": [2, 3, 6, 8, 9, 10, 11, 12, 13, 16, 17, 19, 21, 22, 23, 25, 26, 27, 29, 30, 32, 33, 34, 37, 39, 41, 42, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 68, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 85, 87, 88, 89, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 104, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 136, 137, 138, 139, 141, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 162, 163, 164, 165, 168, 170, 171, 172, 174, 176, 177, 180, 181, 182, 183, 185, 186, 187, 188, 189, 192, 193, 196, 200, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 224, 225, 226, 227, 229, 230, 231, 233, 234, 236, 238, 239, 240, 241, 242, 244, 247, 253, 264, 265, 266, 268, 270, 271, 272, 273, 274, 275, 276, 278, 280, 282, 283, 284, 285, 286, 288, 289, 290, 291, 293, 294, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 321, 330, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 358, 359, 361, 362, 363, 364, 365, 366, 369, 372, 373], "x": [2, 3, 7, 9, 10, 11, 12, 13, 16, 17, 19, 22, 23, 25, 26, 28, 29, 30, 33, 34, 36, 37, 39, 46, 48, 49, 51, 53, 54, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 68, 69, 73, 76, 77, 80, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 96, 97, 99, 101, 102, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 119, 120, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 140, 141, 144, 145, 146, 147, 149, 150, 151, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 168, 171, 172, 174, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 193, 196, 199, 200, 205, 207, 209, 211, 212, 215, 216, 218, 219, 222, 225, 227, 228, 229, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 264, 266, 267, 268, 270, 271, 273, 274, 275, 276, 277, 278, 279, 280, 284, 285, 286, 288, 289, 290, 292, 293, 294, 295, 296, 300, 301, 302, 303, 307, 308, 310, 311, 312, 313, 314, 315, 316, 318, 321, 323, 324, 329, 330, 332, 333, 336, 337, 338, 340, 343, 345, 346, 349, 350, 351, 352, 353, 354, 356, 358, 359, 362, 363, 365, 366, 369, 372, 374], "replac": [2, 9, 11, 17, 23, 30, 51, 91, 92, 94, 96, 101, 108, 109, 120, 122, 140, 146, 154, 159, 160, 167, 168, 169, 172, 186, 187, 193, 224, 232, 235, 241, 242, 273, 276, 278, 310, 314, 319, 327, 329, 333, 343, 346, 348, 359], "lt": [2, 130, 187, 275, 278], "labelledorderedtre": [2, 11, 156], "7": [2, 3, 6, 7, 10, 11, 16, 17, 19, 21, 22, 23, 24, 25, 26, 27, 30, 32, 34, 39, 48, 49, 52, 54, 56, 58, 60, 61, 62, 64, 72, 74, 76, 77, 79, 80, 81, 83, 84, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 101, 102, 107, 108, 109, 110, 112, 114, 115, 116, 117, 118, 120, 122, 123, 124, 127, 130, 131, 133, 136, 138, 139, 141, 145, 146, 147, 149, 151, 152, 154, 155, 157, 158, 159, 160, 162, 163, 164, 167, 168, 169, 170, 171, 172, 173, 174, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 196, 197, 211, 215, 216, 221, 225, 226, 227, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 242, 244, 245, 246, 248, 249, 250, 251, 252, 253, 255, 256, 259, 264, 265, 266, 267, 268, 270, 271, 273, 274, 276, 277, 278, 280, 285, 287, 288, 290, 291, 294, 296, 300, 301, 302, 303, 305, 306, 307, 310, 311, 312, 313, 314, 315, 316, 323, 324, 336, 339, 340, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 354, 356, 358, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 372, 374], "lambda": [2, 9, 11, 16, 26, 33, 36, 38, 39, 48, 51, 52, 53, 54, 55, 56, 57, 59, 60, 62, 67, 68, 71, 74, 76, 77, 80, 82, 83, 84, 88, 89, 91, 98, 99, 102, 108, 109, 112, 116, 120, 121, 122, 123, 124, 127, 131, 134, 138, 145, 146, 147, 149, 150, 151, 160, 162, 163, 164, 172, 176, 180, 182, 187, 188, 193, 207, 211, 212, 213, 214, 215, 216, 225, 227, 229, 232, 233, 234, 235, 236, 238, 241, 242, 244, 245, 246, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 264, 267, 268, 269, 270, 271, 272, 273, 278, 284, 285, 286, 287, 288, 293, 294, 295, 296, 298, 300, 301, 302, 303, 304, 305, 308, 310, 313, 314, 315, 316, 323, 343, 344, 346, 348, 350, 351, 354, 355, 356, 359, 360, 362, 363, 366, 369, 373], "z": [2, 9, 16, 17, 19, 22, 24, 58, 77, 83, 97, 99, 102, 108, 110, 111, 113, 116, 119, 120, 124, 130, 133, 138, 139, 140, 146, 147, 160, 172, 174, 180, 182, 185, 187, 190, 192, 211, 216, 225, 232, 233, 236, 237, 239, 241, 284, 285, 286, 288, 289, 292, 293, 294, 300, 302, 303, 312, 323, 332, 336, 345, 350, 354, 358, 359, 362, 366, 372], "4": [2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 16, 17, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 37, 39, 46, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 76, 77, 79, 80, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 104, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 136, 138, 139, 140, 141, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 177, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 196, 197, 199, 200, 201, 207, 209, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 318, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374], "lbt": [2, 11], "labelledbinarytre": [2, 11], "bt": [2, 11, 130, 242, 323, 354], "5": [2, 3, 6, 7, 8, 10, 11, 16, 17, 19, 21, 22, 23, 24, 25, 26, 28, 30, 32, 33, 34, 39, 46, 48, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 67, 69, 71, 72, 73, 74, 76, 77, 79, 80, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 101, 102, 104, 105, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 133, 134, 136, 138, 139, 141, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 167, 168, 169, 170, 171, 172, 174, 177, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 196, 197, 199, 201, 205, 211, 214, 215, 216, 217, 218, 219, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 261, 262, 264, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 280, 282, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 296, 297, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 313, 314, 315, 316, 319, 322, 323, 324, 325, 326, 327, 328, 332, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 362, 363, 365, 366, 367, 368, 369, 370, 372, 374], "set_label": 2, "chang": [2, 9, 11, 19, 22, 26, 29, 49, 62, 63, 72, 101, 102, 108, 109, 110, 112, 114, 124, 130, 131, 139, 141, 145, 146, 153, 154, 156, 158, 159, 160, 162, 164, 170, 172, 173, 186, 187, 215, 227, 231, 239, 269, 272, 274, 276, 283, 293, 298, 302, 303, 304, 313, 314, 315, 326, 337, 338, 340, 343, 346, 348, 350, 352, 354, 363, 372], "subtre": [2, 11, 86, 101, 124, 130, 156, 275, 354], "input": [2, 3, 6, 8, 9, 10, 11, 12, 13, 16, 17, 19, 21, 22, 23, 25, 26, 29, 30, 32, 33, 34, 36, 37, 38, 39, 41, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 76, 77, 78, 79, 80, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 134, 136, 137, 138, 139, 141, 143, 144, 145, 146, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 167, 168, 169, 170, 171, 172, 173, 174, 176, 178, 180, 182, 183, 185, 186, 187, 188, 189, 191, 192, 193, 196, 197, 199, 205, 207, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 264, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 319, 323, 327, 329, 332, 333, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 354, 355, 356, 358, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374], "default": [2, 3, 8, 9, 11, 17, 19, 21, 22, 23, 25, 26, 29, 30, 32, 33, 37, 39, 47, 48, 49, 50, 52, 53, 56, 58, 59, 60, 62, 63, 65, 68, 70, 76, 77, 79, 80, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 94, 95, 97, 98, 99, 101, 102, 108, 109, 110, 112, 113, 114, 115, 116, 120, 122, 124, 127, 129, 130, 131, 133, 134, 136, 138, 141, 144, 145, 146, 149, 150, 151, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 172, 174, 180, 182, 183, 186, 187, 188, 189, 192, 193, 199, 205, 207, 209, 211, 212, 215, 217, 219, 221, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 244, 245, 259, 264, 266, 268, 271, 272, 273, 274, 275, 276, 277, 278, 284, 285, 286, 287, 288, 289, 291, 293, 294, 296, 300, 301, 302, 303, 305, 307, 308, 309, 310, 311, 313, 314, 332, 333, 337, 340, 342, 343, 344, 345, 346, 348, 349, 350, 354, 356, 359, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374], "place": [2, 17, 62, 76, 88, 89, 99, 101, 108, 114, 131, 139, 145, 160, 172, 187, 202, 203, 204, 206, 207, 208, 209, 211, 225, 238, 244, 276, 278, 280, 303, 336, 346, 348, 359, 362], "must": [2, 3, 6, 9, 11, 12, 16, 17, 19, 22, 23, 26, 28, 30, 33, 49, 51, 59, 70, 71, 72, 74, 76, 77, 79, 82, 83, 88, 89, 91, 92, 93, 98, 99, 102, 108, 109, 110, 111, 113, 115, 117, 119, 120, 127, 129, 130, 133, 138, 151, 160, 164, 168, 171, 172, 180, 182, 186, 187, 188, 189, 216, 225, 227, 228, 231, 232, 235, 240, 242, 244, 271, 274, 275, 276, 284, 286, 292, 297, 302, 303, 307, 313, 314, 315, 336, 337, 343, 346, 348, 349, 354, 356, 358, 359, 361, 362, 363, 365, 368, 369, 372], "mutabl": [2, 11, 19, 22, 33, 124, 154, 232, 278, 314], "more": [2, 9, 10, 11, 17, 19, 23, 26, 30, 36, 39, 46, 48, 51, 53, 54, 55, 56, 57, 58, 59, 65, 67, 71, 72, 74, 76, 77, 80, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 101, 102, 103, 107, 108, 109, 110, 115, 116, 118, 120, 121, 122, 123, 127, 129, 130, 131, 136, 138, 139, 141, 144, 145, 146, 147, 154, 155, 156, 158, 160, 163, 164, 172, 173, 180, 182, 183, 187, 188, 191, 192, 193, 211, 212, 215, 216, 217, 218, 219, 221, 225, 227, 233, 234, 235, 236, 238, 239, 240, 241, 242, 244, 266, 271, 273, 274, 275, 276, 277, 285, 286, 288, 290, 293, 294, 300, 301, 302, 303, 305, 315, 316, 323, 336, 337, 340, 341, 343, 346, 347, 348, 349, 351, 352, 354, 356, 358, 359, 362, 363, 364, 369], "detail": [2, 11, 17, 19, 23, 26, 29, 34, 47, 61, 76, 83, 91, 101, 108, 109, 110, 120, 123, 124, 138, 139, 141, 145, 154, 155, 156, 158, 160, 164, 171, 172, 183, 187, 191, 193, 216, 225, 236, 237, 241, 242, 244, 264, 266, 271, 276, 302, 305, 314, 341, 346, 349, 359, 362, 369], "about": [2, 3, 9, 29, 36, 51, 56, 79, 82, 86, 91, 98, 132, 145, 156, 158, 164, 172, 174, 180, 187, 212, 238, 242, 244, 265, 271, 273, 276, 302, 315, 317, 326, 343, 352, 354, 359, 362, 369], "0": [2, 3, 6, 9, 10, 11, 13, 16, 17, 19, 21, 22, 23, 24, 25, 26, 27, 28, 30, 32, 33, 34, 36, 37, 38, 39, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 76, 77, 78, 79, 80, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 107, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 196, 197, 199, 200, 201, 205, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 296, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 318, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 334, 336, 337, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 372, 373, 374], "traceback": [2, 3, 6, 9, 10, 11, 13, 19, 26, 28, 30, 33, 34, 37, 59, 73, 74, 76, 77, 82, 83, 85, 86, 87, 88, 89, 90, 91, 98, 99, 101, 108, 109, 111, 113, 114, 115, 117, 119, 120, 124, 127, 129, 130, 131, 133, 140, 141, 146, 147, 153, 154, 156, 158, 159, 160, 163, 164, 167, 168, 170, 171, 172, 173, 174, 182, 184, 186, 187, 188, 189, 191, 192, 193, 221, 222, 227, 228, 229, 230, 231, 236, 241, 242, 243, 244, 253, 271, 272, 273, 274, 275, 276, 278, 284, 290, 293, 294, 296, 302, 303, 307, 313, 314, 315, 332, 336, 343, 346, 348, 349, 350, 354, 356, 359, 361, 362, 363, 365, 368, 369, 372, 374], "recent": [2, 3, 6, 9, 10, 11, 13, 19, 26, 28, 30, 33, 34, 37, 59, 73, 74, 76, 77, 82, 83, 85, 86, 87, 88, 89, 90, 91, 98, 99, 101, 108, 109, 111, 113, 114, 115, 117, 119, 120, 124, 127, 129, 130, 131, 133, 140, 141, 146, 147, 153, 154, 156, 158, 159, 160, 163, 164, 167, 168, 170, 171, 172, 173, 174, 182, 184, 186, 187, 188, 189, 191, 192, 193, 221, 222, 227, 228, 229, 230, 231, 236, 241, 242, 243, 244, 253, 271, 272, 273, 274, 275, 276, 278, 284, 290, 293, 294, 296, 302, 303, 307, 313, 314, 315, 332, 336, 343, 346, 348, 349, 350, 354, 356, 359, 361, 362, 363, 365, 368, 369, 372, 374], "call": [2, 3, 6, 8, 9, 10, 11, 13, 16, 17, 19, 22, 23, 26, 28, 30, 33, 34, 37, 39, 52, 56, 59, 60, 61, 66, 67, 68, 72, 73, 74, 76, 77, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 101, 104, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 119, 120, 122, 124, 127, 129, 130, 131, 133, 134, 138, 139, 140, 141, 143, 144, 145, 146, 147, 151, 153, 154, 156, 158, 159, 160, 163, 164, 167, 168, 170, 171, 172, 173, 174, 180, 182, 184, 186, 187, 188, 189, 191, 192, 193, 211, 215, 216, 219, 221, 222, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 253, 255, 257, 271, 272, 273, 274, 275, 276, 277, 278, 280, 284, 285, 290, 293, 294, 296, 300, 301, 302, 303, 305, 307, 308, 309, 312, 313, 314, 315, 326, 330, 332, 333, 336, 337, 338, 339, 343, 345, 346, 347, 348, 349, 350, 352, 354, 356, 359, 361, 362, 363, 365, 368, 369, 372, 374], "last": [2, 3, 6, 9, 10, 11, 13, 17, 19, 26, 28, 30, 31, 33, 34, 37, 55, 56, 59, 68, 69, 73, 74, 76, 77, 79, 80, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 98, 99, 101, 104, 105, 107, 108, 109, 111, 113, 114, 115, 117, 119, 120, 124, 127, 128, 129, 130, 131, 133, 140, 141, 146, 147, 152, 153, 154, 156, 158, 159, 160, 161, 162, 163, 164, 167, 168, 170, 171, 172, 173, 174, 180, 182, 184, 186, 187, 188, 189, 191, 192, 193, 196, 221, 222, 225, 227, 228, 229, 230, 231, 236, 238, 241, 242, 243, 244, 253, 271, 272, 273, 274, 275, 276, 278, 280, 284, 290, 293, 294, 296, 302, 303, 307, 313, 314, 315, 332, 336, 339, 340, 341, 343, 345, 346, 348, 349, 350, 354, 355, 356, 358, 359, 361, 362, 363, 365, 368, 369, 372, 374], "valueerror": [2, 3, 6, 9, 10, 11, 13, 19, 26, 28, 30, 33, 34, 37, 59, 73, 76, 77, 79, 82, 83, 91, 98, 99, 101, 108, 109, 114, 115, 120, 124, 127, 130, 131, 141, 146, 153, 154, 158, 159, 160, 163, 164, 167, 168, 170, 171, 172, 173, 174, 180, 182, 184, 186, 187, 188, 189, 191, 192, 222, 227, 228, 229, 230, 231, 241, 242, 243, 253, 271, 272, 273, 274, 275, 276, 290, 294, 296, 302, 303, 307, 313, 314, 315, 336, 343, 346, 347, 348, 349, 359, 361, 362, 368, 369, 374], "immut": [2, 11, 26, 33, 102, 139, 180, 238, 278, 342, 354], "pleas": [2, 11, 23, 26, 59, 72, 83, 123, 124, 131, 187, 238, 302, 314, 363, 372], "instead": [2, 9, 11, 13, 19, 26, 30, 33, 76, 77, 82, 83, 84, 85, 88, 89, 90, 91, 92, 94, 99, 101, 102, 106, 108, 111, 113, 119, 120, 123, 124, 130, 134, 138, 139, 141, 144, 145, 151, 156, 160, 172, 174, 180, 182, 187, 188, 191, 211, 231, 234, 236, 237, 238, 239, 242, 244, 247, 270, 271, 272, 273, 274, 275, 276, 279, 302, 303, 305, 308, 314, 323, 333, 336, 343, 346, 347, 354, 359, 365, 369, 372], "42": [2, 6, 7, 26, 80, 83, 85, 90, 115, 124, 139, 153, 160, 161, 165, 172, 186, 193, 235, 239, 275, 276, 312, 315, 324, 336, 349, 354, 359], "do": [2, 3, 9, 11, 17, 19, 22, 24, 26, 30, 32, 33, 34, 39, 68, 72, 76, 77, 80, 82, 83, 85, 89, 90, 91, 96, 101, 103, 108, 109, 112, 113, 114, 115, 119, 120, 124, 127, 129, 130, 131, 132, 133, 138, 139, 145, 146, 147, 159, 160, 162, 167, 172, 180, 182, 187, 188, 199, 205, 212, 218, 225, 226, 227, 232, 235, 236, 238, 239, 241, 242, 244, 264, 265, 271, 273, 274, 276, 286, 287, 290, 292, 293, 296, 302, 303, 305, 314, 315, 333, 336, 340, 343, 345, 346, 348, 354, 358, 359, 362, 363, 366], "we": [2, 3, 6, 9, 10, 11, 12, 13, 16, 17, 19, 21, 22, 23, 24, 25, 26, 29, 30, 33, 34, 37, 38, 39, 44, 45, 46, 48, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 68, 69, 70, 72, 74, 76, 77, 79, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 96, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 110, 112, 113, 114, 115, 116, 119, 120, 121, 122, 123, 124, 127, 129, 130, 131, 133, 134, 136, 138, 139, 141, 143, 144, 145, 146, 147, 150, 151, 154, 156, 158, 159, 160, 162, 163, 164, 167, 168, 170, 171, 172, 173, 180, 181, 182, 185, 187, 188, 192, 193, 197, 199, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 244, 247, 255, 257, 265, 266, 267, 269, 271, 272, 273, 274, 275, 276, 277, 278, 280, 285, 286, 287, 288, 289, 292, 294, 295, 296, 299, 300, 301, 302, 303, 305, 307, 308, 310, 311, 312, 313, 315, 316, 323, 332, 333, 336, 337, 338, 339, 343, 345, 346, 347, 348, 350, 351, 354, 358, 359, 362, 365, 366, 369, 373], "syntact": [2, 11, 74], "sugar": [2, 11, 74], "tt": [2, 131, 343], "set_root_label": 2, "work": [2, 8, 10, 13, 19, 22, 26, 33, 39, 54, 56, 68, 71, 72, 74, 77, 80, 92, 95, 96, 98, 99, 100, 101, 102, 108, 114, 120, 124, 127, 131, 133, 136, 137, 138, 139, 140, 151, 160, 162, 163, 164, 172, 173, 180, 182, 187, 188, 211, 212, 215, 219, 221, 227, 233, 237, 238, 239, 240, 241, 242, 244, 255, 271, 272, 274, 276, 278, 286, 292, 294, 296, 302, 303, 310, 314, 323, 330, 332, 336, 340, 343, 346, 354, 356, 359, 363], "typic": [2, 29, 30, 39, 79, 108, 109, 182, 192, 193, 212, 215, 227, 229, 230, 236, 238, 241, 242, 255, 264, 271, 302, 333, 348, 352, 354], "unlabel": [2, 11, 22, 23, 89, 111, 113, 119, 129, 156, 187, 275, 332, 354, 373], "unlabelled_tre": [2, 11, 156, 275], "In": [2, 6, 8, 9, 10, 11, 17, 19, 23, 25, 26, 29, 30, 33, 34, 36, 39, 46, 47, 49, 51, 54, 56, 59, 69, 72, 76, 77, 79, 80, 83, 89, 91, 92, 96, 97, 98, 99, 101, 104, 107, 108, 109, 110, 111, 113, 114, 115, 116, 119, 120, 123, 124, 127, 129, 130, 131, 134, 136, 138, 139, 141, 143, 145, 146, 147, 151, 156, 160, 162, 163, 164, 167, 169, 170, 172, 180, 182, 186, 187, 192, 193, 197, 211, 212, 215, 216, 221, 225, 227, 229, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 249, 264, 265, 266, 267, 269, 271, 272, 273, 274, 276, 277, 278, 280, 289, 293, 294, 296, 302, 303, 310, 311, 313, 314, 323, 332, 336, 337, 338, 340, 343, 345, 346, 347, 348, 349, 350, 351, 352, 354, 358, 359, 362, 363, 372, 374], "vein": 2, "attribut": [2, 16, 17, 52, 79, 80, 86, 99, 108, 109, 110, 120, 124, 125, 147, 180, 187, 218, 221, 363, 368], "_unlabel": 2, "version": [2, 6, 8, 9, 10, 11, 12, 16, 19, 22, 23, 24, 26, 29, 32, 34, 39, 48, 50, 51, 54, 59, 60, 61, 62, 63, 64, 67, 68, 69, 71, 73, 74, 77, 78, 79, 83, 86, 87, 89, 91, 98, 99, 101, 102, 107, 108, 109, 114, 115, 116, 120, 128, 131, 132, 133, 138, 139, 145, 146, 149, 150, 151, 157, 160, 162, 163, 165, 167, 168, 169, 170, 171, 180, 182, 186, 187, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 223, 232, 233, 236, 239, 240, 266, 272, 274, 275, 276, 278, 287, 298, 304, 306, 311, 313, 314, 316, 332, 336, 339, 340, 341, 345, 346, 347, 348, 350, 351, 354, 355, 359, 362, 363, 369, 374], "At": [2, 11, 101, 108, 118, 120, 123, 172, 185, 187, 234, 241, 284, 289, 290, 296, 302, 343, 354, 359], "time": [2, 6, 9, 10, 11, 17, 19, 22, 23, 26, 28, 30, 32, 33, 36, 37, 39, 46, 51, 54, 56, 58, 59, 60, 62, 64, 67, 68, 76, 79, 80, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 99, 101, 105, 108, 109, 112, 114, 115, 118, 120, 124, 126, 127, 136, 138, 139, 140, 144, 145, 146, 147, 154, 158, 160, 172, 174, 181, 182, 186, 187, 188, 191, 192, 193, 197, 200, 211, 212, 215, 216, 222, 225, 227, 234, 235, 236, 238, 239, 241, 242, 244, 264, 268, 271, 272, 273, 274, 276, 280, 283, 284, 286, 289, 293, 296, 302, 303, 305, 309, 310, 311, 312, 315, 337, 341, 343, 346, 348, 349, 350, 354, 359, 362, 363, 365, 369], "make": [2, 6, 9, 11, 22, 23, 58, 59, 68, 69, 76, 77, 80, 83, 89, 91, 92, 96, 108, 112, 115, 120, 124, 125, 127, 133, 136, 138, 141, 145, 146, 147, 152, 159, 160, 161, 164, 172, 180, 186, 187, 199, 215, 217, 225, 226, 227, 230, 232, 235, 238, 239, 241, 242, 264, 268, 271, 272, 275, 290, 296, 302, 303, 308, 310, 314, 315, 323, 326, 332, 343, 346, 348, 350, 354, 361, 362, 365], "sens": [2, 6, 9, 11, 22, 23, 26, 33, 39, 69, 101, 108, 120, 145, 146, 151, 172, 182, 187, 193, 217, 232, 242, 296, 302, 313, 314, 323, 346, 347, 348, 350, 354], "onli": [2, 8, 9, 10, 11, 17, 19, 21, 22, 23, 26, 30, 33, 39, 42, 46, 49, 56, 58, 59, 66, 69, 71, 72, 73, 74, 76, 80, 82, 83, 85, 89, 90, 91, 92, 94, 95, 98, 99, 100, 101, 102, 104, 107, 108, 109, 111, 112, 114, 115, 117, 120, 122, 123, 124, 127, 129, 130, 131, 134, 136, 138, 139, 141, 145, 146, 151, 154, 156, 158, 160, 164, 168, 172, 174, 180, 182, 186, 187, 188, 193, 199, 212, 213, 215, 216, 218, 219, 221, 222, 225, 226, 227, 229, 230, 232, 235, 236, 238, 239, 241, 242, 243, 244, 264, 265, 266, 272, 273, 274, 275, 276, 278, 284, 285, 288, 290, 294, 296, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 313, 314, 315, 318, 331, 336, 337, 338, 340, 342, 343, 345, 346, 347, 349, 350, 354, 355, 359, 362, 363, 364, 365, 367, 369, 373, 374], "repeat": [2, 8, 16, 26, 51, 73, 77, 83, 89, 108, 132, 145, 187, 225, 241, 276, 278, 307, 314, 315, 336, 339, 346, 350, 355, 360, 369, 373], "t1": [2, 11, 16, 22, 108, 130, 134, 139, 169, 197, 239, 268, 273, 276, 300, 314, 346, 356], "6": [2, 3, 6, 7, 8, 9, 10, 11, 13, 16, 17, 19, 21, 22, 23, 25, 26, 27, 28, 30, 32, 33, 34, 37, 39, 46, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 70, 72, 74, 76, 77, 79, 80, 82, 83, 84, 85, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 101, 102, 104, 107, 108, 109, 110, 112, 114, 115, 116, 117, 120, 121, 122, 123, 124, 126, 127, 129, 130, 131, 133, 134, 136, 138, 139, 141, 143, 144, 145, 146, 147, 149, 150, 151, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 167, 169, 170, 171, 172, 174, 176, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 197, 205, 209, 211, 212, 214, 215, 216, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 264, 265, 266, 267, 268, 270, 271, 273, 274, 276, 277, 278, 280, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 300, 301, 302, 303, 304, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 323, 324, 327, 330, 332, 333, 334, 336, 338, 339, 340, 341, 342, 343, 346, 347, 348, 350, 351, 352, 354, 356, 358, 359, 360, 362, 363, 364, 365, 366, 368, 369, 370, 374], "9": [2, 3, 7, 9, 10, 11, 16, 19, 21, 22, 23, 26, 30, 32, 34, 39, 48, 56, 62, 68, 73, 76, 77, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 97, 98, 99, 101, 102, 105, 107, 108, 109, 110, 111, 113, 115, 116, 120, 123, 124, 130, 131, 133, 136, 138, 139, 141, 143, 145, 146, 151, 154, 157, 159, 160, 162, 163, 164, 168, 170, 172, 180, 181, 182, 184, 185, 186, 187, 188, 189, 192, 193, 197, 211, 215, 221, 222, 225, 227, 231, 235, 236, 237, 238, 239, 240, 245, 255, 256, 257, 268, 274, 275, 276, 278, 280, 286, 289, 290, 291, 293, 300, 302, 303, 305, 306, 308, 310, 313, 314, 315, 316, 323, 336, 338, 342, 343, 345, 346, 348, 350, 351, 354, 356, 358, 359, 360, 362, 363, 365, 366, 369, 370, 373, 374], "vertic": [2, 11, 19, 21, 22, 23, 24, 33, 39, 48, 49, 53, 56, 62, 72, 76, 89, 96, 98, 99, 101, 107, 108, 111, 113, 117, 119, 120, 129, 130, 153, 154, 156, 158, 159, 160, 161, 169, 172, 180, 182, 183, 186, 187, 199, 205, 207, 209, 211, 213, 214, 215, 216, 222, 226, 227, 229, 230, 231, 238, 242, 261, 262, 268, 269, 274, 275, 306, 311, 312, 313, 332, 337, 340, 346, 349, 354, 359, 365, 366, 373], "leaf_label": [2, 11], "leav": [2, 11, 48, 56, 91, 99, 108, 123, 156, 160, 172, 318, 320, 324, 325, 327, 328, 331, 332, 334, 343, 346, 350, 354], "case": [2, 7, 9, 10, 11, 16, 17, 19, 22, 23, 25, 26, 28, 29, 30, 33, 38, 39, 47, 48, 56, 59, 60, 61, 66, 68, 69, 72, 76, 77, 79, 89, 90, 91, 92, 96, 98, 101, 105, 107, 108, 109, 111, 112, 113, 114, 120, 123, 124, 127, 131, 136, 138, 139, 141, 144, 146, 149, 155, 156, 159, 160, 162, 163, 164, 167, 170, 172, 181, 182, 186, 187, 188, 191, 192, 193, 205, 211, 212, 215, 221, 225, 227, 229, 232, 233, 234, 235, 236, 238, 239, 242, 244, 265, 271, 272, 273, 274, 276, 278, 280, 290, 293, 294, 296, 301, 302, 303, 307, 311, 313, 314, 315, 336, 337, 340, 343, 346, 347, 348, 349, 350, 352, 354, 358, 359, 361, 362, 363, 369, 372, 374], "actual": [2, 3, 11, 17, 19, 22, 26, 72, 83, 89, 92, 100, 108, 109, 111, 113, 114, 122, 124, 126, 139, 146, 163, 165, 172, 182, 187, 193, 225, 227, 236, 238, 241, 242, 265, 271, 273, 275, 276, 303, 314, 346, 347, 348, 354, 359, 362], "associ": [2, 3, 11, 17, 19, 22, 23, 27, 29, 33, 37, 42, 49, 50, 56, 59, 66, 68, 72, 76, 83, 91, 92, 96, 99, 101, 102, 108, 110, 111, 112, 113, 114, 115, 119, 120, 130, 133, 136, 139, 145, 149, 151, 156, 158, 160, 164, 167, 172, 174, 178, 181, 183, 187, 193, 197, 211, 212, 215, 216, 222, 227, 230, 232, 233, 235, 238, 239, 240, 241, 242, 243, 244, 245, 248, 249, 251, 253, 255, 257, 259, 261, 262, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 280, 286, 289, 291, 292, 293, 300, 302, 303, 311, 323, 330, 332, 333, 336, 340, 343, 344, 346, 347, 348, 350, 352, 362, 363, 369, 370, 373, 374], "25": [2, 7, 26, 76, 80, 83, 84, 85, 87, 88, 89, 90, 92, 93, 98, 102, 108, 128, 139, 141, 160, 168, 182, 187, 193, 215, 235, 239, 276, 278, 289, 297, 300, 309, 311, 315, 350, 353, 354, 356, 359, 360, 362, 366, 369, 370], "lrt": [2, 275], "labelledrootedtre": [2, 113, 119, 275], "tb": [2, 131, 156], "There": [2, 3, 10, 11, 16, 17, 23, 25, 26, 30, 48, 51, 56, 59, 68, 74, 80, 82, 83, 91, 97, 98, 99, 101, 108, 126, 131, 134, 136, 139, 141, 145, 146, 147, 151, 156, 160, 161, 162, 168, 172, 173, 182, 187, 188, 193, 211, 215, 221, 223, 225, 227, 231, 232, 233, 235, 242, 244, 255, 266, 271, 273, 274, 275, 276, 278, 280, 302, 303, 306, 312, 313, 343, 345, 348, 350, 354, 356, 359, 362, 363, 369, 372], "sever": [2, 9, 10, 23, 26, 30, 51, 58, 68, 72, 91, 92, 93, 108, 109, 111, 113, 119, 124, 130, 134, 147, 160, 188, 193, 221, 225, 236, 238, 241, 242, 271, 296, 303, 314, 343, 348, 352, 362, 369], "document": [2, 17, 34, 46, 71, 72, 86, 88, 91, 93, 97, 101, 102, 107, 108, 109, 110, 120, 124, 145, 147, 160, 172, 188, 232, 276, 286, 302, 337, 340, 346, 362, 369, 372], "labelled_tre": [2, 11, 156, 275], "breadth_first_order_travers": 2, "breadth": [2, 39, 182, 211, 240, 274], "first": [2, 6, 7, 9, 11, 16, 17, 19, 22, 24, 26, 30, 31, 32, 33, 34, 38, 39, 46, 53, 54, 57, 58, 64, 69, 72, 76, 80, 82, 83, 86, 89, 91, 92, 95, 96, 98, 99, 100, 101, 104, 105, 107, 108, 109, 110, 114, 115, 116, 119, 120, 121, 124, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 141, 144, 145, 146, 147, 151, 152, 154, 156, 157, 159, 160, 161, 162, 163, 164, 167, 168, 169, 170, 171, 172, 173, 180, 182, 183, 186, 187, 188, 192, 193, 196, 197, 205, 211, 212, 215, 216, 223, 225, 232, 234, 236, 239, 240, 241, 242, 244, 271, 273, 274, 275, 276, 278, 280, 290, 296, 298, 302, 303, 304, 305, 310, 311, 313, 314, 315, 332, 336, 338, 339, 340, 341, 342, 343, 345, 346, 348, 350, 356, 358, 359, 361, 362, 363, 367, 368, 369, 370, 374], "post": [2, 130, 238], "travers": [2, 11, 39, 130, 144, 172, 211, 354], "subject": [2, 42, 54, 101, 124, 127, 131, 154, 160, 289, 307, 313, 338, 346], "everi": [2, 9, 11, 17, 19, 21, 22, 26, 28, 51, 61, 74, 76, 78, 79, 80, 82, 83, 89, 91, 92, 96, 98, 99, 101, 102, 110, 111, 114, 115, 116, 119, 121, 122, 130, 136, 138, 139, 141, 144, 145, 146, 156, 158, 159, 160, 161, 164, 172, 180, 181, 182, 183, 186, 187, 189, 211, 227, 233, 235, 273, 275, 278, 280, 284, 285, 288, 300, 301, 302, 303, 305, 306, 308, 310, 315, 318, 331, 336, 340, 343, 345, 346, 351, 359, 362, 364], "encount": [2, 101, 130], "procedur": [2, 188, 276, 346, 354], "queue": 2, "pop": [2, 82, 124], "prepend": [2, 146], "rightmost": [2, 11, 51, 61, 68, 111, 113, 114, 158, 160, 164, 172, 212, 276, 307, 314, 346, 363], "leftmost": [2, 11, 12, 51, 54, 68, 111, 114, 122, 158, 160, 172, 212, 314, 346, 363, 365], "someth": [2, 11, 19, 26, 30, 95, 101, 108, 140, 160, 241, 276, 302, 333, 359, 369], "dure": [2, 11, 19, 72, 108, 109, 114, 134, 192, 217, 236], "explor": [2, 7, 11, 108, 124, 238, 242, 302, 354], "___3____": 2, "_7_": [2, 11], "unspecifi": [2, 11, 88, 99, 188], "guarante": [2, 11, 46, 108, 112, 123, 187, 217, 227, 272, 276, 296, 302, 346, 362], "moreov": [2, 9, 11, 26, 30, 59, 69, 101, 108, 109, 120, 130, 160, 163, 185, 186, 235, 300, 303], "compar": [2, 11, 28, 39, 59, 72, 90, 96, 101, 104, 107, 108, 109, 130, 136, 160, 164, 172, 176, 180, 182, 186, 187, 193, 232, 236, 237, 238, 241, 242, 307, 315, 349, 354, 358, 359, 362], "10": [2, 3, 6, 7, 9, 10, 11, 16, 19, 21, 22, 23, 26, 27, 38, 56, 57, 62, 63, 65, 68, 73, 76, 77, 79, 80, 82, 83, 84, 85, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 101, 102, 105, 108, 109, 112, 115, 117, 118, 120, 123, 124, 128, 129, 131, 133, 134, 136, 138, 139, 141, 144, 145, 146, 151, 152, 153, 154, 156, 157, 158, 159, 160, 164, 165, 170, 172, 174, 176, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 197, 208, 210, 211, 215, 225, 227, 228, 229, 230, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 245, 261, 266, 268, 273, 274, 275, 276, 278, 280, 289, 294, 298, 302, 303, 304, 305, 307, 308, 310, 313, 314, 315, 323, 324, 336, 340, 342, 343, 346, 347, 348, 350, 351, 352, 354, 356, 359, 360, 362, 363, 365, 366, 369, 370, 372], "11": [2, 3, 6, 7, 10, 11, 16, 26, 30, 34, 37, 56, 62, 63, 71, 76, 77, 80, 83, 84, 85, 88, 89, 90, 91, 92, 93, 94, 99, 101, 102, 108, 109, 115, 116, 120, 128, 130, 133, 136, 138, 139, 141, 146, 153, 154, 159, 160, 164, 168, 170, 171, 172, 174, 180, 181, 182, 184, 185, 186, 187, 188, 192, 193, 212, 221, 225, 227, 231, 235, 236, 239, 240, 245, 257, 268, 274, 276, 278, 284, 289, 290, 293, 298, 301, 303, 304, 306, 307, 308, 310, 313, 314, 315, 322, 323, 324, 332, 336, 340, 343, 345, 346, 348, 350, 354, 356, 359, 360, 362, 365, 366, 369, 370, 372, 373], "12": [2, 3, 6, 7, 10, 11, 16, 17, 19, 22, 23, 25, 26, 28, 30, 33, 48, 54, 62, 76, 77, 79, 80, 81, 83, 84, 85, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 101, 102, 108, 115, 120, 124, 127, 128, 129, 130, 131, 136, 138, 139, 141, 145, 146, 149, 151, 154, 155, 158, 160, 164, 168, 172, 173, 174, 180, 181, 182, 184, 185, 186, 187, 188, 189, 193, 197, 202, 203, 204, 205, 206, 210, 211, 225, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 255, 257, 262, 266, 267, 268, 274, 276, 278, 280, 285, 289, 290, 300, 302, 303, 307, 310, 314, 315, 324, 336, 339, 346, 348, 349, 350, 352, 354, 356, 358, 359, 360, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 374], "13": [2, 3, 7, 8, 10, 11, 16, 19, 26, 34, 51, 54, 56, 76, 77, 80, 82, 83, 84, 85, 88, 89, 90, 91, 92, 93, 99, 101, 102, 108, 109, 112, 115, 118, 124, 127, 130, 136, 138, 139, 141, 145, 146, 151, 154, 158, 160, 164, 168, 172, 180, 181, 182, 184, 185, 186, 187, 191, 193, 211, 226, 235, 236, 238, 239, 244, 268, 274, 276, 278, 280, 288, 303, 306, 310, 314, 315, 336, 339, 343, 346, 348, 350, 354, 356, 359, 360, 362, 363, 365, 366, 367, 368, 369, 370, 372, 374], "depth": [2, 7, 11, 19, 22, 46, 51, 72, 98, 101, 116, 124, 156, 180, 183, 187, 211, 235, 240, 274, 338, 354, 365], "iterative_post_order_travers": 2, "leaf": [2, 11, 101, 111, 156, 275, 332, 354, 359, 365], "post_order_traversal_it": 2, "iterative_pre_order_travers": 2, "pre_order_traversal_it": 2, "pre_order_travers": [2, 130], "node_numb": [2, 9, 11], "node_number_at_depth": 2, "node_number_to_the_right": 2, "given": [2, 3, 6, 8, 9, 10, 11, 16, 17, 19, 21, 22, 23, 25, 26, 29, 30, 32, 33, 36, 39, 46, 47, 48, 51, 52, 54, 55, 56, 58, 59, 62, 63, 65, 66, 68, 69, 71, 72, 73, 76, 77, 80, 82, 83, 85, 86, 87, 89, 90, 91, 92, 97, 98, 99, 101, 102, 107, 108, 109, 110, 111, 112, 113, 114, 117, 118, 119, 120, 123, 124, 125, 127, 129, 130, 131, 132, 134, 136, 137, 138, 139, 141, 144, 145, 146, 149, 150, 151, 153, 154, 156, 157, 158, 159, 160, 161, 162, 164, 167, 169, 171, 172, 174, 180, 181, 182, 183, 185, 186, 187, 188, 192, 193, 196, 197, 211, 212, 213, 214, 215, 216, 217, 218, 221, 224, 225, 226, 227, 228, 229, 231, 232, 234, 236, 237, 238, 239, 240, 242, 243, 244, 245, 249, 255, 257, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 280, 284, 285, 287, 288, 289, 290, 293, 294, 297, 300, 301, 302, 303, 306, 307, 310, 312, 313, 314, 333, 336, 339, 340, 341, 343, 344, 345, 346, 347, 348, 350, 351, 354, 356, 358, 359, 362, 363, 364, 368, 369, 372, 374], "paths_at_depth": 2, "ascii_art": [2, 9, 11, 55, 67, 101, 110, 111, 119, 120, 131, 154, 156, 158, 196, 197, 214, 215, 227, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 265, 267, 268, 269, 270, 276, 307, 314, 346, 348], "___o____": 2, "o_": [2, 11, 99, 119, 182, 298], "o": [2, 3, 9, 11, 13, 26, 30, 33, 46, 58, 73, 86, 87, 89, 92, 98, 99, 105, 108, 111, 113, 119, 120, 141, 154, 156, 158, 160, 171, 172, 180, 182, 187, 190, 191, 192, 193, 225, 226, 227, 231, 233, 235, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 265, 267, 268, 269, 270, 273, 275, 280, 298, 302, 303, 310, 323, 333, 354, 358, 359, 362, 365, 374], "rang": [2, 3, 6, 8, 9, 10, 11, 13, 16, 17, 19, 26, 27, 28, 30, 33, 48, 55, 62, 66, 71, 76, 79, 80, 82, 83, 84, 85, 88, 89, 90, 91, 93, 94, 95, 99, 101, 108, 110, 112, 115, 116, 117, 118, 120, 123, 124, 127, 129, 130, 131, 134, 136, 138, 139, 141, 144, 145, 146, 149, 153, 154, 158, 159, 160, 170, 171, 172, 180, 183, 186, 187, 188, 189, 191, 193, 229, 231, 236, 238, 239, 242, 255, 257, 268, 275, 278, 280, 293, 300, 302, 303, 305, 308, 310, 312, 313, 314, 315, 316, 323, 336, 337, 339, 343, 346, 348, 350, 354, 356, 359, 362, 363, 364, 365, 366, 367, 369, 372, 373, 374], "right": [2, 3, 8, 9, 11, 16, 17, 26, 32, 51, 57, 65, 68, 74, 76, 88, 91, 97, 98, 99, 101, 107, 108, 109, 112, 113, 114, 116, 120, 121, 124, 126, 127, 130, 133, 138, 139, 141, 144, 145, 146, 147, 156, 158, 159, 160, 161, 162, 164, 172, 174, 176, 186, 187, 192, 193, 211, 212, 215, 218, 219, 225, 229, 232, 234, 238, 239, 240, 257, 273, 274, 275, 276, 277, 278, 284, 286, 289, 292, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 304, 308, 312, 313, 314, 329, 335, 343, 346, 348, 352, 356, 359, 361, 362, 363, 374], "strictli": [2, 11, 17, 32, 59, 72, 99, 101, 116, 120, 130, 131, 146, 151, 160, 162, 172, 182, 187, 237, 242, 268, 276, 280, 285, 297, 300, 301, 303, 305, 307, 308, 341, 342, 343, 346, 347, 354, 359, 362, 374], "paths_to_the_right": 2, "choos": [2, 3, 17, 58, 73, 77, 99, 101, 108, 112, 115, 124, 141, 162, 183, 188, 227, 238, 241, 269, 275, 278, 343, 346, 354, 362], "1st": [2, 10, 138], "3rd": [2, 10, 26, 136, 159], "2nd": [2, 79, 159, 302, 315], "latter": [2, 16, 17, 61, 74, 93, 99, 108, 110, 122, 138, 145, 146, 156, 160, 187, 233, 275, 303, 343, 346, 356, 372], "zero": [2, 6, 10, 11, 19, 30, 32, 36, 39, 56, 59, 74, 77, 83, 91, 92, 104, 105, 108, 109, 110, 112, 119, 120, 121, 124, 126, 127, 133, 138, 141, 144, 145, 146, 149, 160, 162, 163, 164, 167, 172, 173, 174, 180, 182, 187, 192, 193, 197, 211, 216, 226, 232, 233, 235, 236, 238, 241, 242, 243, 257, 272, 273, 277, 285, 290, 296, 300, 301, 302, 303, 305, 310, 312, 313, 314, 315, 321, 343, 345, 346, 348, 350, 352, 354, 356, 359, 362, 374], "fix": [2, 3, 9, 10, 11, 19, 21, 23, 25, 26, 27, 30, 32, 33, 48, 51, 53, 54, 58, 62, 63, 68, 73, 76, 80, 83, 91, 98, 100, 101, 108, 116, 120, 121, 122, 124, 127, 128, 130, 139, 141, 145, 146, 151, 152, 153, 158, 159, 160, 162, 164, 168, 171, 172, 173, 174, 180, 215, 222, 225, 227, 235, 236, 238, 239, 240, 241, 242, 266, 273, 275, 278, 283, 291, 296, 303, 307, 308, 314, 315, 318, 320, 323, 325, 327, 328, 331, 334, 336, 339, 340, 341, 343, 346, 348, 354, 359, 361, 362, 369, 372], "directli": [2, 23, 26, 30, 36, 59, 85, 98, 99, 101, 108, 109, 112, 120, 124, 130, 131, 138, 146, 172, 173, 180, 182, 187, 193, 199, 211, 218, 232, 233, 234, 236, 239, 273, 275, 278, 280, 297, 302, 309, 333, 345, 347, 348, 349, 352, 354], "______o_______": 2, "_o__": [2, 11, 156], "t2": [2, 11, 16, 19, 22, 108, 109, 130, 139, 169, 197, 218, 239, 268, 273, 276, 300, 314, 346, 356], "post_order_travers": [2, 130], "yield": [2, 6, 9, 11, 19, 26, 30, 52, 56, 68, 83, 91, 92, 93, 100, 101, 110, 114, 119, 120, 122, 124, 127, 140, 151, 160, 172, 174, 183, 187, 213, 214, 227, 232, 242, 244, 274, 276, 280, 302, 305, 313, 314, 323, 336, 343, 346, 354, 363, 367, 369], "shown": [2, 11, 17, 19, 22, 23, 59, 60, 79, 101, 136, 145, 146, 154, 160, 162, 213, 235, 298, 302, 304, 313, 346, 350, 369], "anoth": [2, 9, 11, 26, 30, 34, 56, 58, 83, 85, 92, 99, 108, 110, 111, 113, 120, 130, 131, 141, 144, 145, 146, 147, 154, 156, 160, 161, 172, 173, 176, 181, 186, 187, 215, 225, 227, 232, 235, 236, 238, 242, 265, 273, 275, 278, 285, 286, 288, 293, 294, 300, 301, 302, 303, 305, 308, 350, 352, 354, 359, 362, 363], "__1____": 2, "8_": 2, "3_": 2, "nonempti": [2, 11, 26, 30, 51, 101, 141, 144, 172, 278, 280, 285, 300, 301, 303, 305, 308, 313, 314, 323, 346], "to_hexacod": 2, "transform": [2, 11, 17, 36, 59, 76, 92, 108, 122, 130, 145, 146, 147, 171, 172, 187, 238, 239, 293, 302, 303, 343, 346, 359, 362], "hexadecim": [2, 345, 358], "string": [2, 11, 19, 22, 23, 26, 29, 32, 39, 49, 51, 54, 58, 59, 62, 69, 71, 73, 82, 83, 86, 89, 91, 92, 101, 102, 108, 113, 114, 115, 119, 124, 127, 131, 134, 136, 139, 146, 150, 151, 155, 156, 157, 158, 160, 164, 172, 174, 176, 180, 182, 187, 205, 215, 222, 225, 233, 235, 238, 240, 273, 278, 284, 286, 303, 307, 313, 314, 339, 343, 344, 346, 350, 355, 356, 358, 359, 362, 363, 365, 366, 368, 369, 371, 374], "definit": [2, 6, 8, 10, 11, 16, 17, 22, 23, 25, 26, 30, 33, 39, 54, 56, 59, 68, 82, 83, 85, 89, 91, 92, 99, 101, 102, 108, 110, 114, 116, 120, 122, 130, 131, 133, 139, 143, 144, 145, 146, 149, 153, 158, 160, 163, 172, 182, 184, 185, 187, 188, 193, 215, 226, 232, 235, 237, 239, 240, 241, 242, 275, 276, 278, 280, 285, 286, 293, 299, 300, 301, 302, 303, 305, 308, 313, 315, 333, 343, 345, 346, 347, 354, 356, 359, 362, 365, 366, 369], "hexacod": 2, "valenc": 2, "up": [2, 3, 9, 19, 23, 25, 26, 30, 33, 46, 56, 63, 77, 83, 85, 92, 99, 101, 107, 108, 109, 114, 120, 124, 127, 129, 132, 134, 136, 138, 139, 141, 145, 147, 152, 154, 159, 160, 162, 164, 168, 172, 180, 182, 183, 186, 187, 193, 211, 221, 227, 230, 234, 238, 239, 242, 257, 259, 265, 267, 268, 269, 273, 283, 290, 302, 310, 312, 314, 315, 332, 336, 346, 348, 350, 359, 361, 362, 365, 368], "15": [2, 7, 10, 16, 19, 22, 26, 30, 51, 53, 68, 76, 77, 80, 83, 84, 88, 89, 90, 91, 92, 93, 94, 95, 99, 101, 102, 105, 108, 109, 114, 116, 136, 138, 139, 141, 145, 154, 160, 161, 164, 171, 180, 181, 182, 184, 185, 186, 187, 189, 192, 193, 199, 201, 207, 209, 210, 211, 225, 227, 235, 236, 237, 238, 239, 241, 242, 274, 275, 278, 297, 303, 305, 312, 314, 315, 316, 323, 324, 340, 346, 348, 349, 350, 353, 354, 356, 359, 360, 362, 366, 367, 369, 370], "concaten": [2, 9, 17, 30, 65, 74, 91, 101, 108, 109, 114, 141, 145, 146, 156, 172, 239, 280, 296, 302, 314, 342, 346, 348, 359, 367, 368, 369], "from_hexacod": [2, 11, 275], "revers": [2, 3, 11, 17, 24, 29, 30, 64, 68, 69, 72, 83, 101, 107, 108, 109, 112, 119, 120, 122, 124, 141, 143, 145, 146, 151, 163, 164, 172, 177, 180, 182, 186, 187, 199, 215, 218, 231, 232, 236, 265, 276, 280, 302, 303, 314, 343, 344, 346, 348, 354, 359, 362, 367, 369], "import": [2, 3, 7, 8, 9, 11, 12, 13, 16, 17, 19, 21, 22, 26, 27, 28, 29, 30, 32, 33, 37, 39, 46, 48, 50, 55, 56, 58, 59, 64, 70, 71, 74, 76, 77, 79, 80, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 104, 105, 107, 108, 109, 110, 114, 118, 120, 121, 122, 123, 125, 126, 127, 128, 131, 133, 134, 136, 138, 139, 140, 143, 144, 145, 146, 147, 149, 151, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 172, 173, 177, 180, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 196, 197, 199, 201, 205, 207, 209, 211, 215, 218, 221, 222, 223, 224, 225, 226, 227, 229, 231, 233, 234, 235, 236, 238, 239, 240, 242, 265, 271, 275, 276, 278, 279, 280, 283, 289, 290, 291, 293, 296, 297, 299, 302, 303, 306, 308, 310, 313, 315, 316, 323, 326, 327, 333, 336, 337, 338, 343, 344, 345, 346, 347, 348, 349, 350, 352, 354, 355, 356, 359, 360, 361, 362, 364, 365, 366, 369, 370, 373, 374], "an_el": [2, 3, 7, 11, 13, 16, 17, 25, 26, 32, 34, 58, 68, 69, 71, 85, 98, 99, 110, 111, 112, 113, 119, 122, 128, 129, 131, 141, 144, 145, 146, 151, 158, 164, 171, 174, 181, 183, 187, 190, 221, 232, 233, 234, 236, 237, 239, 241, 242, 243, 245, 259, 264, 272, 275, 290, 296, 302, 309, 316, 336, 343, 346, 347, 348, 354, 358, 374], "3020010": 2, "a0000000000000000": 2, "a0000000000": 2, "500000": [2, 158], "tree_factori": 2, "factori": [2, 6, 11, 25, 26, 33, 53, 99, 130, 156, 158, 164, 172, 188, 233, 275, 285, 288, 294, 300, 301, 303, 314, 315, 343, 346, 348], "prod_": [2, 6, 11, 25, 60, 61, 73, 99, 115, 116, 144, 146, 160, 174, 182, 187, 188, 211, 215, 216, 242, 280, 284, 285, 286, 288, 300, 301, 302, 303, 305, 310, 323, 346, 348], "mbox": [2, 26, 127, 145, 187, 343], "ch": [2, 255, 257, 359], "produc": [2, 3, 19, 46, 49, 68, 73, 76, 79, 80, 85, 90, 91, 99, 108, 114, 120, 126, 141, 187, 193, 218, 225, 227, 233, 235, 236, 268, 273, 274, 278, 354, 365], "descript": [2, 3, 10, 11, 26, 29, 59, 77, 80, 100, 101, 108, 109, 111, 113, 119, 120, 122, 130, 151, 157, 158, 160, 187, 193, 227, 232, 237, 238, 242, 278, 284, 285, 300, 301, 303, 305, 312, 346, 362], "_from_hexacode_aux": 2, "12000": 2, "1200": [2, 138, 141], "happen": [2, 9, 19, 98, 108, 130, 156, 172, 180, 238, 296, 303, 313, 354, 365], "prefix": [2, 9, 12, 16, 17, 37, 74, 99, 102, 108, 110, 112, 115, 124, 132, 145, 149, 154, 161, 163, 180, 181, 185, 186, 187, 192, 232, 233, 235, 242, 273, 274, 282, 283, 284, 290, 292, 295, 299, 302, 303, 343, 350, 354, 356, 358, 359, 362, 363, 365, 366, 367, 368, 369], "14": [2, 3, 7, 8, 11, 12, 16, 19, 22, 24, 26, 39, 48, 76, 77, 80, 83, 84, 88, 89, 90, 91, 92, 93, 95, 99, 101, 102, 108, 109, 115, 118, 124, 130, 136, 138, 139, 141, 145, 153, 154, 155, 156, 157, 160, 164, 172, 180, 181, 182, 185, 186, 187, 188, 193, 197, 212, 222, 225, 235, 236, 237, 239, 242, 274, 276, 278, 280, 303, 305, 310, 311, 314, 315, 316, 324, 336, 338, 340, 346, 348, 349, 350, 354, 356, 359, 360, 362, 363, 366, 369, 370, 374], "One": [2, 13, 26, 29, 33, 34, 39, 46, 54, 60, 68, 71, 74, 76, 83, 84, 89, 91, 96, 98, 99, 101, 108, 124, 130, 133, 141, 145, 146, 147, 150, 151, 156, 160, 163, 164, 171, 172, 180, 187, 189, 211, 218, 227, 231, 238, 239, 241, 242, 251, 259, 275, 278, 299, 302, 303, 323, 333, 337, 340, 347, 348, 350, 352, 354], "creat": [2, 6, 10, 24, 25, 26, 30, 34, 39, 50, 60, 62, 68, 69, 79, 80, 83, 96, 98, 99, 101, 108, 112, 114, 115, 120, 124, 130, 131, 133, 134, 136, 138, 141, 151, 156, 157, 160, 163, 166, 171, 172, 180, 182, 183, 186, 187, 192, 193, 199, 210, 211, 212, 215, 216, 218, 225, 226, 231, 232, 236, 238, 239, 240, 265, 266, 273, 275, 278, 280, 285, 288, 294, 300, 301, 302, 303, 310, 312, 345, 346, 350, 354, 355, 359, 362, 365, 374], "affine_permut": 3, "affinepermut": 3, "lst": [3, 11, 26, 151, 153, 159, 342], "window": [3, 19, 22, 46, 183, 244, 359], "notat": [3, 11, 17, 23, 30, 55, 57, 61, 65, 68, 74, 76, 98, 99, 101, 107, 108, 110, 121, 122, 130, 131, 139, 145, 146, 147, 150, 160, 163, 172, 183, 186, 187, 211, 212, 218, 225, 227, 232, 234, 239, 241, 244, 266, 271, 272, 273, 276, 277, 278, 284, 285, 286, 287, 288, 293, 294, 296, 300, 301, 302, 303, 313, 314, 323, 343, 346, 348, 354, 371], "zz": [3, 11, 12, 13, 16, 17, 19, 25, 26, 38, 42, 46, 48, 51, 58, 59, 60, 61, 62, 77, 99, 101, 108, 109, 110, 111, 112, 113, 119, 120, 133, 139, 144, 145, 146, 147, 150, 154, 160, 161, 162, 163, 164, 168, 172, 180, 181, 187, 188, 190, 192, 193, 197, 216, 225, 227, 232, 238, 242, 243, 244, 247, 271, 272, 276, 277, 278, 280, 283, 284, 285, 287, 291, 294, 298, 300, 301, 302, 303, 304, 305, 310, 332, 336, 343, 346, 347, 348, 350, 352, 354, 358, 359, 369, 372, 374], "affinepermutationgroup": 3, "p": [3, 6, 8, 9, 10, 11, 16, 17, 19, 23, 25, 26, 27, 29, 30, 33, 39, 42, 48, 51, 53, 54, 56, 57, 58, 62, 63, 64, 70, 73, 74, 76, 77, 79, 80, 82, 83, 88, 89, 92, 94, 95, 97, 98, 99, 101, 102, 107, 108, 109, 111, 113, 116, 117, 118, 120, 121, 122, 124, 129, 130, 132, 133, 134, 136, 138, 139, 140, 141, 144, 145, 146, 147, 149, 151, 153, 154, 156, 158, 159, 160, 161, 162, 163, 164, 167, 168, 171, 172, 173, 174, 176, 177, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 196, 216, 221, 227, 232, 233, 236, 238, 239, 240, 241, 242, 243, 262, 271, 272, 273, 276, 277, 278, 280, 284, 285, 286, 288, 289, 290, 291, 293, 294, 295, 296, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 313, 314, 315, 318, 319, 320, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 338, 339, 340, 341, 343, 344, 345, 346, 347, 349, 350, 352, 354, 356, 358, 359, 362, 363, 365, 366, 368, 369, 374], "apply_simple_reflect": [3, 232, 234, 274], "side": [3, 11, 12, 23, 26, 92, 109, 114, 119, 120, 134, 138, 144, 145, 146, 147, 172, 186, 193, 232, 234, 238, 240, 242, 264, 270, 271, 274, 340, 359], "simpl": [3, 7, 11, 23, 25, 33, 34, 39, 46, 48, 49, 51, 54, 59, 60, 61, 63, 67, 76, 83, 85, 89, 91, 92, 99, 102, 114, 129, 130, 133, 136, 145, 156, 160, 162, 163, 164, 171, 172, 180, 182, 187, 216, 221, 225, 227, 232, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 257, 259, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 302, 305, 310, 315, 324, 337, 340, 344, 346, 347, 354, 359, 363], "determin": [3, 6, 10, 11, 13, 19, 22, 23, 29, 30, 37, 38, 51, 54, 56, 59, 68, 72, 90, 91, 93, 96, 101, 102, 108, 109, 110, 114, 116, 120, 121, 124, 134, 141, 144, 145, 146, 150, 151, 157, 158, 160, 164, 172, 174, 180, 182, 183, 184, 186, 187, 193, 197, 212, 221, 226, 233, 234, 235, 238, 239, 245, 264, 273, 277, 278, 284, 287, 299, 302, 303, 305, 312, 313, 319, 322, 329, 335, 343, 347, 348, 350, 354, 372], "left": [3, 6, 8, 9, 11, 12, 17, 25, 26, 30, 32, 34, 51, 57, 65, 68, 74, 83, 92, 97, 98, 99, 101, 108, 109, 112, 113, 114, 115, 116, 120, 121, 124, 126, 127, 130, 131, 133, 138, 139, 141, 143, 144, 145, 146, 147, 156, 158, 160, 161, 162, 164, 172, 174, 176, 182, 186, 187, 192, 193, 211, 212, 215, 218, 219, 225, 229, 232, 234, 236, 238, 240, 257, 274, 275, 277, 278, 280, 284, 286, 289, 292, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 304, 307, 308, 312, 313, 314, 316, 329, 335, 343, 346, 348, 352, 359, 362, 363, 374], "grassmannian_quoti": 3, "grassmannian": [3, 23, 34, 131, 134, 160, 232, 290, 296], "uniqu": [3, 11, 17, 23, 26, 30, 46, 48, 54, 56, 57, 59, 62, 65, 67, 68, 70, 77, 80, 82, 83, 89, 91, 92, 99, 101, 108, 109, 112, 114, 120, 121, 130, 138, 139, 141, 145, 150, 156, 180, 182, 187, 193, 197, 212, 227, 232, 233, 235, 236, 237, 238, 239, 240, 242, 264, 266, 271, 273, 275, 280, 284, 285, 288, 300, 301, 302, 303, 305, 313, 315, 340, 346, 348, 354, 359, 362, 369], "accord": [3, 9, 11, 17, 19, 26, 30, 72, 83, 89, 92, 99, 102, 104, 108, 111, 114, 120, 124, 130, 139, 141, 156, 172, 182, 183, 186, 187, 188, 222, 232, 238, 240, 244, 257, 275, 278, 280, 297, 303, 345, 346, 354, 359, 363], "gq": [3, 87], "is_i_grassmannian": 3, "reduced_word": [3, 24, 25, 26, 133, 172, 186, 233, 234, 236, 237, 239, 240, 241, 242, 276, 340], "prod": [3, 25, 160, 187, 273, 303, 310, 343], "gqleft": 3, "index_set": [3, 25, 36, 39, 41, 46, 48, 52, 53, 54, 55, 56, 57, 58, 59, 60, 65, 66, 67, 68, 69, 162, 172, 212, 215, 221, 226, 227, 228, 229, 230, 231, 232, 233, 237, 239, 240, 242, 243, 244, 245, 247, 248, 251, 253, 259, 262, 263, 265, 267, 268, 269, 270, 271, 272, 274, 307, 340], "either": [3, 6, 11, 12, 16, 17, 23, 25, 30, 34, 49, 76, 80, 82, 83, 86, 89, 91, 92, 101, 102, 108, 109, 113, 114, 115, 118, 119, 120, 124, 130, 131, 133, 134, 138, 144, 145, 146, 149, 154, 156, 157, 160, 162, 164, 172, 180, 182, 183, 187, 193, 215, 216, 226, 227, 229, 232, 233, 237, 239, 273, 274, 276, 277, 303, 307, 308, 310, 311, 312, 313, 314, 333, 339, 342, 346, 348, 352, 354, 359, 362, 363, 365, 373], "ident": [3, 9, 17, 25, 33, 34, 56, 74, 83, 99, 108, 109, 110, 112, 120, 130, 133, 138, 139, 143, 145, 146, 147, 151, 156, 160, 161, 163, 169, 172, 181, 183, 187, 188, 192, 197, 215, 221, 225, 227, 232, 233, 238, 239, 243, 244, 266, 273, 276, 277, 293, 297, 303, 323, 343, 346, 354, 359, 362, 372, 373], "sole": [3, 19, 130, 172, 196, 197, 314, 346], "fals": [3, 6, 9, 10, 11, 13, 17, 19, 21, 22, 23, 25, 26, 30, 32, 33, 34, 39, 47, 48, 50, 51, 53, 58, 59, 62, 64, 66, 69, 70, 71, 72, 74, 76, 77, 79, 80, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 101, 102, 104, 108, 109, 110, 112, 113, 114, 115, 116, 119, 120, 122, 124, 125, 127, 129, 130, 131, 132, 134, 138, 139, 141, 144, 145, 146, 147, 150, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 167, 168, 169, 170, 171, 172, 174, 176, 180, 181, 182, 183, 186, 187, 190, 192, 193, 199, 205, 207, 209, 211, 212, 215, 216, 218, 219, 221, 224, 225, 226, 227, 229, 230, 231, 232, 233, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 265, 268, 270, 271, 272, 273, 274, 275, 276, 278, 280, 286, 291, 296, 297, 302, 303, 305, 306, 307, 310, 312, 313, 314, 315, 322, 332, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 354, 355, 356, 358, 359, 361, 362, 363, 365, 366, 367, 368, 370, 372, 373, 374], "from_word": [3, 280], "is_on": [3, 236], "lower_cov": [3, 186, 187], "lower": [3, 39, 51, 59, 79, 81, 92, 108, 114, 120, 122, 123, 124, 130, 139, 158, 160, 163, 172, 180, 182, 183, 187, 193, 240, 278, 301, 313, 314, 326, 346, 358, 359, 369], "less": [3, 10, 11, 19, 34, 82, 93, 99, 101, 120, 159, 160, 161, 162, 172, 174, 176, 180, 182, 186, 187, 193, 215, 217, 225, 232, 236, 243, 274, 290, 296, 302, 303, 307, 309, 310, 314, 343, 346, 348, 350, 354, 355, 356, 359, 361, 362, 369, 374], "length": [3, 9, 11, 17, 19, 23, 25, 26, 27, 28, 30, 33, 34, 37, 50, 51, 54, 56, 57, 59, 61, 62, 65, 68, 70, 71, 72, 80, 82, 83, 89, 91, 96, 98, 101, 102, 105, 107, 108, 109, 114, 120, 123, 124, 125, 127, 128, 129, 130, 131, 133, 134, 138, 140, 141, 144, 145, 146, 151, 153, 154, 159, 160, 162, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 177, 180, 183, 186, 187, 193, 196, 197, 212, 215, 216, 217, 222, 224, 231, 232, 233, 234, 237, 238, 239, 242, 243, 244, 273, 274, 276, 277, 278, 280, 284, 285, 287, 288, 289, 294, 296, 297, 300, 301, 302, 303, 305, 308, 310, 311, 313, 314, 323, 336, 339, 342, 343, 345, 346, 347, 348, 350, 353, 354, 355, 356, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374], "relat": [3, 4, 6, 9, 10, 11, 12, 17, 19, 22, 26, 33, 40, 62, 63, 64, 68, 75, 76, 77, 78, 80, 83, 84, 86, 88, 91, 94, 97, 99, 101, 108, 109, 110, 114, 130, 145, 146, 147, 150, 151, 156, 160, 172, 174, 175, 180, 182, 183, 185, 186, 187, 193, 218, 224, 225, 229, 236, 239, 240, 241, 271, 273, 276, 278, 287, 289, 293, 294, 299, 300, 301, 302, 303, 305, 306, 313, 340, 343, 344, 346, 347, 348, 349, 351, 352, 354, 359, 362], "transposit": [3, 33, 34, 99, 108, 129, 131, 133, 160, 164, 172, 173, 187, 277, 343, 344, 346, 373], "indic": [3, 6, 9, 10, 19, 26, 30, 39, 50, 51, 59, 64, 69, 76, 96, 98, 101, 108, 112, 120, 131, 133, 134, 136, 141, 146, 149, 151, 154, 160, 163, 164, 166, 172, 173, 181, 186, 191, 192, 193, 211, 215, 219, 223, 225, 226, 227, 232, 234, 235, 237, 238, 242, 255, 257, 266, 273, 276, 290, 302, 303, 306, 312, 314, 336, 342, 343, 347, 348, 359, 365, 369], "These": [3, 6, 19, 26, 51, 56, 66, 76, 77, 80, 83, 90, 98, 101, 110, 111, 112, 113, 116, 120, 121, 122, 129, 130, 131, 134, 138, 141, 145, 146, 147, 155, 157, 160, 161, 167, 168, 171, 172, 180, 182, 186, 187, 188, 194, 199, 212, 213, 216, 225, 232, 239, 241, 242, 255, 257, 273, 278, 280, 292, 293, 300, 302, 303, 305, 306, 310, 312, 313, 315, 336, 342, 343, 345, 347, 348, 349, 352, 354, 361, 362, 365], "signatur": [3, 51, 61, 66, 68, 172, 344], "l": [3, 6, 9, 10, 11, 13, 26, 30, 33, 37, 39, 46, 51, 52, 53, 55, 56, 57, 58, 59, 62, 64, 68, 70, 73, 74, 77, 80, 82, 83, 88, 89, 90, 91, 92, 99, 100, 101, 102, 108, 114, 116, 118, 120, 121, 123, 124, 125, 126, 127, 128, 133, 139, 140, 144, 145, 146, 151, 158, 159, 160, 161, 162, 164, 172, 173, 180, 182, 183, 185, 186, 187, 190, 191, 193, 197, 212, 215, 216, 219, 221, 227, 232, 234, 235, 236, 238, 241, 242, 243, 244, 245, 257, 259, 264, 265, 267, 269, 270, 271, 272, 273, 274, 275, 278, 280, 289, 290, 293, 297, 301, 303, 311, 314, 315, 319, 323, 325, 330, 332, 333, 336, 343, 345, 346, 347, 348, 349, 350, 354, 356, 358, 359, 361, 362, 364, 365, 367, 368, 372, 373], "to_weyl_group_el": 3, "cartan_typ": [3, 36, 37, 39, 48, 49, 54, 55, 56, 58, 59, 60, 62, 63, 64, 65, 66, 68, 172, 211, 212, 213, 214, 215, 216, 218, 221, 222, 225, 226, 227, 230, 231, 232, 233, 234, 235, 236, 238, 240, 241, 242, 243, 244, 245, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 340], "basic": [3, 29, 58, 108, 123, 136, 169, 180, 186, 215, 227, 239, 241, 242, 249, 265, 267, 269, 276, 302, 306, 332, 346, 354, 362], "deriv": [3, 26, 77, 97, 109, 141, 164, 180, 187, 221, 227, 230, 239, 284, 285, 300, 301, 303, 305, 323, 354, 359], "bb2005": [3, 114, 132], "eri1995": 3, "ct": [3, 32, 41, 48, 49, 56, 58, 59, 60, 64, 66, 211, 225, 226, 227, 230, 231, 236, 244, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 265, 267, 268, 269, 270, 273, 274], "cartantyp": [3, 19, 46, 48, 52, 56, 59, 64, 114, 200, 211, 213, 214, 215, 216, 220, 221, 225, 226, 227, 228, 230, 231, 232, 234, 236, 238, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274], "posit": [3, 7, 8, 11, 19, 22, 23, 24, 25, 26, 30, 32, 33, 37, 39, 51, 54, 55, 56, 59, 60, 65, 68, 69, 73, 83, 84, 85, 88, 89, 98, 99, 101, 102, 108, 109, 110, 114, 116, 118, 120, 122, 123, 124, 127, 128, 129, 131, 133, 134, 138, 139, 141, 143, 144, 145, 146, 149, 158, 159, 160, 161, 164, 168, 169, 172, 174, 183, 186, 187, 191, 193, 211, 216, 217, 226, 227, 232, 235, 238, 240, 242, 243, 244, 255, 257, 270, 271, 272, 273, 274, 276, 277, 278, 284, 285, 286, 288, 290, 291, 293, 294, 296, 300, 301, 302, 303, 305, 306, 307, 309, 310, 311, 313, 314, 315, 339, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 354, 355, 356, 358, 359, 362, 368, 369, 372, 373], "equival": [3, 6, 9, 11, 16, 19, 21, 23, 25, 30, 56, 59, 63, 64, 71, 72, 74, 76, 77, 80, 83, 85, 91, 97, 99, 101, 108, 109, 124, 134, 136, 138, 144, 145, 146, 151, 156, 158, 160, 162, 163, 164, 169, 171, 172, 182, 187, 188, 192, 193, 213, 214, 216, 225, 227, 232, 235, 271, 273, 274, 276, 285, 288, 294, 296, 300, 301, 303, 305, 310, 314, 315, 340, 343, 346, 347, 348, 354, 359, 361, 362, 369], "sinc": [3, 9, 19, 26, 29, 30, 36, 39, 56, 59, 68, 74, 83, 89, 99, 101, 102, 108, 113, 114, 115, 119, 120, 124, 127, 133, 138, 139, 145, 146, 147, 156, 160, 172, 211, 217, 225, 226, 232, 235, 238, 242, 265, 268, 271, 272, 273, 275, 276, 278, 280, 284, 299, 300, 302, 303, 310, 336, 340, 341, 346, 354, 359, 362, 363], "demonstr": [3, 9, 108, 109, 146, 147, 187, 232, 302, 336, 354], "decid": [3, 10, 108, 110, 124, 127, 172, 180, 346], "prefer": [3, 19, 39, 127, 159, 162, 163, 173, 225, 264, 274, 302, 307, 314, 343, 346], "easili": [3, 26, 72, 101, 108, 114, 146, 302, 303, 305, 306, 313, 343, 354, 359, 362], "get": [3, 9, 11, 17, 19, 26, 30, 39, 46, 54, 83, 85, 90, 98, 108, 114, 118, 123, 129, 133, 139, 141, 145, 146, 147, 156, 158, 160, 162, 163, 164, 172, 180, 182, 183, 186, 187, 188, 212, 217, 218, 221, 222, 225, 226, 227, 234, 235, 236, 237, 238, 241, 271, 272, 277, 284, 293, 294, 296, 302, 303, 310, 311, 315, 345, 349, 359, 362, 363, 368, 374], "thing": [3, 30, 75, 86, 97, 172, 187, 234, 238, 314, 315, 350, 365, 369], "has_right_desc": [3, 172, 274], "particular": [3, 9, 11, 16, 17, 22, 30, 32, 54, 58, 68, 74, 76, 77, 85, 89, 91, 92, 96, 98, 101, 108, 110, 112, 120, 122, 123, 127, 130, 138, 145, 146, 157, 158, 160, 162, 163, 172, 174, 181, 185, 186, 187, 192, 193, 227, 229, 231, 234, 236, 238, 239, 240, 241, 242, 243, 244, 265, 266, 272, 274, 276, 278, 285, 288, 289, 290, 294, 300, 301, 302, 303, 308, 314, 323, 332, 333, 336, 337, 343, 345, 346, 347, 348, 350, 354, 359, 365], "is_fully_commut": [3, 114, 224], "lehmer": [3, 172], "to_lehmer_cod": [3, 172, 277], "onc": [3, 30, 54, 76, 80, 82, 91, 92, 108, 115, 123, 139, 160, 163, 172, 180, 187, 192, 221, 225, 227, 273, 274, 283, 302, 336, 341, 343, 346, 354, 358, 359], "bound": [3, 10, 17, 19, 26, 30, 34, 37, 79, 81, 92, 110, 122, 123, 124, 130, 131, 144, 146, 151, 160, 172, 174, 180, 182, 187, 232, 235, 238, 242, 290, 296, 302, 303, 314, 346, 354, 359, 362], "read": [3, 11, 51, 68, 74, 86, 95, 98, 101, 108, 109, 120, 126, 127, 141, 144, 146, 153, 159, 160, 162, 172, 197, 199, 212, 218, 225, 227, 236, 276, 297, 306, 307, 314, 315, 333, 346, 348, 359, 363, 365, 369], "row": [3, 6, 16, 19, 27, 30, 32, 36, 51, 53, 54, 56, 68, 69, 74, 78, 80, 82, 84, 89, 90, 91, 92, 94, 98, 99, 100, 101, 115, 116, 120, 122, 126, 127, 131, 136, 137, 138, 139, 141, 144, 146, 157, 158, 160, 161, 162, 164, 167, 170, 172, 174, 190, 193, 196, 197, 211, 212, 215, 216, 217, 218, 226, 227, 231, 239, 274, 276, 278, 284, 286, 296, 297, 298, 307, 312, 313, 314, 315, 316, 341, 343, 346, 347, 348, 350, 354, 362], "grassmanian": 3, "domin": [3, 39, 41, 48, 51, 52, 55, 59, 60, 105, 127, 160, 162, 164, 186, 211, 216, 234, 235, 236, 241, 242, 244, 270, 272, 273, 291, 342, 346, 347, 348, 355, 362], "well": [3, 10, 11, 19, 22, 25, 30, 46, 56, 72, 95, 98, 99, 100, 108, 109, 110, 114, 122, 130, 137, 145, 146, 147, 163, 172, 183, 187, 192, 193, 215, 216, 219, 227, 228, 229, 230, 239, 244, 255, 257, 271, 276, 285, 288, 294, 300, 301, 303, 305, 308, 313, 332, 333, 337, 340, 346, 348, 354, 356, 359, 362, 363, 372, 374], "to_bounded_partit": [3, 34, 131, 160], "to_domin": [3, 235], "to_cor": [3, 160], "final": [3, 30, 61, 80, 83, 91, 92, 98, 99, 101, 108, 109, 120, 130, 131, 146, 158, 160, 164, 169, 187, 193, 225, 236, 238, 242, 276, 306, 336, 340, 343, 346, 354, 359, 365], "insert": [3, 8, 11, 29, 37, 108, 116, 120, 130, 145, 160, 164, 172, 201, 217, 268, 303, 314, 346], "tableau": [3, 6, 16, 29, 32, 37, 53, 54, 55, 56, 58, 68, 69, 98, 101, 116, 120, 122, 131, 141, 143, 146, 147, 160, 164, 166, 167, 169, 170, 172, 174, 196, 197, 200, 212, 216, 217, 218, 276, 307, 314, 341, 343, 346, 347, 348, 359, 366], "tableau_of_word": 3, "form": [3, 9, 10, 11, 12, 17, 23, 25, 26, 30, 47, 49, 51, 53, 54, 58, 60, 61, 68, 69, 73, 74, 77, 80, 82, 83, 85, 86, 89, 90, 91, 92, 96, 97, 98, 99, 100, 101, 102, 108, 109, 114, 119, 120, 127, 130, 131, 133, 137, 138, 139, 145, 146, 147, 160, 164, 172, 180, 182, 184, 186, 187, 193, 216, 225, 227, 229, 230, 232, 233, 235, 236, 238, 239, 242, 247, 263, 268, 271, 275, 276, 277, 278, 282, 285, 288, 289, 293, 294, 297, 300, 301, 302, 303, 305, 307, 310, 314, 315, 338, 339, 340, 343, 346, 347, 348, 354, 359, 361, 362, 365, 373, 374], "affinepermutationgroupgener": 3, "uniquerepresent": [3, 6, 7, 8, 11, 12, 16, 17, 23, 25, 30, 32, 33, 34, 36, 37, 38, 39, 48, 49, 50, 51, 53, 55, 58, 59, 60, 61, 63, 66, 67, 68, 71, 73, 74, 98, 99, 101, 110, 112, 114, 115, 116, 120, 126, 127, 128, 129, 130, 131, 132, 134, 141, 145, 146, 150, 151, 152, 153, 156, 158, 159, 160, 163, 164, 169, 172, 174, 183, 185, 187, 192, 194, 197, 211, 213, 214, 216, 218, 222, 227, 230, 232, 233, 234, 235, 237, 239, 244, 266, 274, 275, 276, 278, 280, 286, 289, 290, 292, 293, 296, 297, 302, 307, 310, 312, 313, 314, 318, 319, 320, 321, 325, 328, 329, 331, 334, 335, 340, 342, 344, 346, 347, 348, 353, 355, 361, 364, 374], "cartan_matrix": [3, 23, 220, 226, 227, 231, 239, 242, 243, 244, 268, 270, 272], "matrix": [3, 6, 9, 10, 16, 19, 21, 22, 23, 25, 26, 34, 42, 60, 62, 64, 77, 80, 82, 84, 89, 90, 91, 92, 98, 100, 101, 102, 108, 110, 114, 115, 116, 120, 126, 127, 137, 138, 139, 144, 146, 149, 150, 151, 158, 160, 171, 172, 180, 181, 182, 183, 187, 188, 192, 193, 215, 222, 226, 227, 228, 229, 230, 231, 232, 234, 237, 238, 239, 240, 242, 243, 244, 262, 264, 265, 268, 270, 272, 274, 276, 284, 286, 287, 289, 296, 300, 301, 302, 303, 310, 312, 313, 315, 316, 340, 343, 344, 346, 350, 352, 359, 362, 363, 369, 374], "note": [3, 6, 9, 17, 19, 22, 23, 26, 30, 33, 48, 51, 54, 56, 57, 65, 68, 74, 77, 80, 83, 85, 89, 92, 96, 97, 98, 99, 100, 101, 104, 108, 109, 112, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 127, 131, 134, 136, 138, 140, 141, 144, 145, 146, 151, 156, 160, 161, 172, 174, 180, 182, 187, 211, 217, 225, 226, 227, 232, 236, 238, 241, 242, 244, 245, 248, 251, 253, 265, 266, 271, 272, 273, 274, 275, 276, 278, 296, 297, 300, 301, 302, 303, 311, 314, 323, 336, 337, 340, 341, 343, 346, 348, 351, 354, 359, 362, 364, 365, 369, 372, 373, 374], "alreadi": [3, 33, 72, 80, 85, 92, 96, 99, 101, 104, 107, 108, 122, 129, 134, 156, 163, 180, 187, 192, 227, 275, 284, 343, 346, 354, 362], "categori": [3, 6, 7, 11, 16, 17, 26, 30, 36, 39, 40, 42, 47, 48, 51, 54, 59, 60, 73, 74, 92, 98, 99, 110, 112, 114, 121, 124, 127, 129, 133, 144, 145, 146, 149, 156, 160, 164, 169, 172, 174, 175, 176, 177, 179, 180, 182, 183, 184, 185, 186, 187, 192, 193, 196, 197, 220, 228, 232, 241, 242, 271, 273, 274, 275, 290, 296, 302, 303, 309, 314, 338, 339, 343, 346, 348, 372, 374], "from_reduced_word": [3, 37, 50, 172, 232, 233, 234, 237, 239, 240, 242, 340], "is_crystallograph": [3, 226, 227, 229, 230, 231, 239, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 265, 268], "tell": [3, 127, 180, 225, 302, 340, 359], "crystallograph": [3, 226, 227, 229, 230, 231, 239, 241, 242, 244, 247, 264, 265, 268], "random_el": [3, 6, 11, 13, 25, 26, 30, 31, 33, 73, 101, 116, 117, 127, 128, 130, 139, 141, 153, 156, 159, 160, 161, 171, 172, 174, 190, 278, 280, 314, 318, 320, 325, 331, 333, 336, 339, 346, 348, 354, 361, 372], "random": [3, 6, 9, 11, 13, 19, 21, 22, 25, 26, 29, 30, 31, 33, 73, 76, 83, 85, 89, 101, 102, 108, 115, 116, 119, 130, 136, 138, 139, 141, 153, 156, 159, 160, 161, 171, 172, 174, 181, 182, 186, 187, 190, 216, 240, 278, 280, 336, 339, 346, 348, 354, 359, 361, 362, 365, 369, 372], "specifi": [3, 6, 9, 11, 16, 19, 22, 23, 26, 28, 30, 33, 34, 36, 37, 41, 50, 51, 52, 53, 56, 57, 58, 59, 62, 65, 68, 76, 83, 89, 91, 92, 98, 99, 101, 102, 108, 109, 110, 115, 116, 117, 120, 122, 123, 124, 127, 130, 131, 133, 134, 136, 141, 144, 145, 146, 147, 149, 151, 153, 156, 158, 159, 160, 161, 162, 164, 172, 174, 176, 186, 187, 188, 192, 193, 197, 211, 212, 215, 216, 217, 219, 222, 225, 226, 227, 228, 232, 234, 235, 236, 238, 241, 242, 255, 257, 273, 274, 275, 276, 278, 279, 280, 284, 285, 286, 288, 294, 297, 300, 301, 302, 303, 307, 310, 312, 313, 314, 332, 339, 342, 346, 347, 348, 350, 352, 355, 356, 359, 361, 362, 368, 369, 372], "chosen": [3, 19, 22, 23, 54, 59, 60, 77, 99, 108, 109, 120, 129, 130, 131, 136, 156, 164, 183, 193, 239, 241, 266, 284, 303, 314, 352, 354, 363, 369], "1000": [3, 13, 118, 141, 160, 174, 182, 187, 189, 315, 354, 356, 359, 362, 363, 365, 366, 367, 369], "start": [3, 9, 11, 19, 22, 25, 26, 30, 33, 39, 51, 57, 64, 68, 80, 90, 91, 92, 98, 101, 102, 105, 108, 114, 117, 119, 123, 130, 133, 134, 141, 145, 146, 147, 154, 158, 159, 160, 164, 167, 172, 180, 182, 186, 187, 191, 213, 223, 227, 232, 234, 236, 238, 239, 242, 245, 248, 251, 253, 265, 271, 276, 280, 297, 302, 314, 315, 339, 346, 350, 354, 356, 359, 362, 363, 365, 366, 368, 369, 374], "upper": [3, 19, 23, 24, 114, 120, 122, 123, 124, 130, 158, 160, 168, 180, 182, 183, 187, 193, 235, 240, 278, 293, 297, 298, 299, 304, 313, 314, 346, 358, 369], "Not": [3, 19, 26, 39, 82, 130, 180, 182, 187, 225, 242, 321, 359], "veri": [3, 9, 26, 79, 80, 85, 89, 91, 95, 96, 108, 114, 124, 136, 138, 145, 146, 159, 160, 173, 180, 187, 227, 278, 348, 354, 362], "uniform": [3, 11, 30, 89, 97, 130, 141, 156, 159, 160, 164, 172, 182, 187, 191, 221, 225, 236, 241, 278, 336, 339, 343, 346, 354, 362], "uniformli": [3, 6, 25, 60, 116, 130, 139, 174, 213, 238, 278, 346, 354, 372], "lot": [3, 72, 77, 85, 93, 108, 109, 156, 160, 238, 265, 315, 346, 348], "coxeter_group": [3, 114, 223, 228, 234], "random_element_of_length": 3, "16": [3, 7, 10, 12, 26, 28, 53, 76, 77, 79, 80, 83, 84, 87, 88, 89, 90, 91, 92, 93, 99, 101, 102, 108, 109, 124, 127, 136, 138, 139, 154, 159, 160, 164, 172, 181, 182, 185, 187, 188, 193, 197, 214, 224, 225, 230, 235, 236, 239, 271, 274, 289, 291, 303, 307, 310, 314, 315, 316, 324, 336, 341, 343, 345, 346, 348, 350, 352, 354, 356, 359, 360, 362, 363, 366, 370, 373, 374], "19": [3, 7, 23, 30, 76, 80, 81, 83, 84, 88, 89, 90, 91, 92, 93, 94, 99, 101, 102, 107, 108, 138, 139, 146, 160, 164, 172, 182, 185, 186, 187, 190, 193, 235, 239, 274, 290, 293, 302, 303, 314, 315, 324, 336, 346, 349, 350, 354, 356, 359, 360, 362, 366, 369, 370, 374], "reflection_index_set": [3, 239, 240, 274], "weyl_group": [3, 234, 235, 238, 241, 242, 244, 273, 274], "act": [3, 6, 9, 17, 24, 25, 33, 34, 56, 68, 70, 77, 80, 102, 108, 125, 131, 139, 146, 147, 160, 163, 164, 169, 172, 180, 183, 187, 212, 226, 227, 228, 232, 233, 234, 236, 237, 238, 239, 241, 242, 274, 278, 289, 293, 302, 305, 314, 343, 346, 362], "affinepermutationgrouptypea": 3, "alia": [3, 6, 11, 12, 16, 17, 24, 25, 26, 30, 32, 33, 34, 36, 39, 50, 51, 52, 56, 58, 60, 62, 63, 73, 74, 76, 98, 99, 101, 108, 109, 112, 114, 115, 116, 120, 122, 124, 125, 127, 128, 130, 131, 133, 141, 145, 146, 151, 153, 154, 156, 159, 160, 161, 162, 164, 167, 168, 170, 171, 172, 174, 182, 183, 185, 186, 187, 188, 192, 193, 196, 197, 211, 212, 213, 216, 218, 221, 222, 227, 232, 233, 242, 243, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 257, 259, 264, 265, 267, 268, 269, 270, 272, 274, 275, 276, 277, 278, 280, 303, 307, 310, 312, 313, 314, 318, 319, 320, 321, 322, 323, 325, 327, 328, 329, 331, 333, 334, 335, 336, 340, 341, 342, 344, 346, 347, 348, 353, 355, 359, 369, 374], "affinepermutationtypea": 3, "from_lehmer_cod": [3, 172], "typ": 3, "suppli": [3, 225, 227, 235, 273, 354], "part": [3, 17, 19, 22, 23, 24, 25, 27, 30, 34, 51, 68, 74, 77, 85, 89, 91, 94, 99, 101, 107, 110, 111, 114, 115, 116, 120, 123, 124, 127, 131, 136, 141, 144, 146, 149, 151, 159, 160, 162, 163, 164, 171, 172, 180, 182, 186, 187, 188, 197, 201, 202, 203, 204, 205, 206, 207, 208, 209, 216, 233, 241, 278, 280, 289, 290, 291, 293, 296, 302, 303, 305, 310, 315, 342, 346, 354, 355, 359, 368, 374], "increas": [3, 9, 17, 25, 26, 30, 32, 50, 72, 101, 110, 120, 122, 123, 129, 130, 136, 141, 146, 158, 159, 160, 172, 186, 187, 212, 215, 218, 235, 242, 275, 276, 278, 280, 285, 300, 301, 303, 305, 307, 308, 315, 338, 340, 341, 342, 343, 346, 348, 359, 363, 373], "decomposit": [3, 11, 30, 49, 56, 68, 70, 76, 84, 93, 101, 111, 114, 130, 151, 162, 172, 177, 180, 182, 187, 212, 225, 232, 242, 271, 303, 316, 343, 359, 365], "itertool": [3, 26, 83, 108, 145, 192, 193, 350, 354, 356, 359, 360, 366, 369, 370], "affinepermutationgrouptypeb": 3, "affinepermutationgrouptypec": 3, "affinepermutationtypeb": 3, "affinepermutationtypec": 3, "affinepermutationgrouptyp": 3, "affinepermutationtyp": 3, "affinepermutationgrouptypeg": 3, "affinepermutationtypeg": 3, "apply_simple_reflection_left": [3, 172], "apply_simple_reflection_right": [3, 172], "indirect": [3, 11, 17, 26, 56, 74, 76, 91, 99, 101, 110, 111, 114, 119, 130, 145, 149, 158, 159, 161, 162, 167, 170, 172, 186, 192, 193, 200, 205, 226, 229, 233, 273, 275, 277, 284, 286, 289, 290, 293, 294, 295, 296, 299, 303, 306, 343, 346, 347, 367], "doctest": [3, 9, 11, 16, 17, 19, 26, 28, 29, 39, 56, 74, 76, 91, 99, 101, 104, 107, 108, 110, 111, 112, 114, 119, 124, 129, 130, 145, 146, 149, 158, 159, 161, 167, 172, 186, 192, 193, 200, 205, 226, 229, 233, 265, 273, 275, 277, 284, 286, 289, 290, 293, 294, 295, 296, 299, 303, 306, 340, 343, 346, 347, 359, 367], "36": [3, 7, 26, 80, 83, 85, 88, 90, 91, 93, 120, 138, 139, 143, 160, 180, 182, 187, 193, 235, 239, 274, 278, 285, 300, 312, 315, 345, 354, 356, 359, 360, 366, 370, 374], "distinct": [3, 11, 47, 51, 71, 73, 76, 82, 89, 91, 92, 96, 108, 112, 136, 138, 139, 141, 144, 156, 158, 160, 172, 182, 186, 187, 213, 214, 225, 227, 236, 271, 275, 278, 280, 296, 303, 309, 310, 315, 316, 346, 350, 354, 355, 359, 363, 364, 365, 369], "flip_automorph": 3, "s_0": [3, 16, 110, 114, 232, 237, 244, 369], "has_left_desc": [3, 25, 172, 274], "mean": [3, 11, 17, 23, 26, 49, 76, 84, 88, 89, 91, 94, 96, 99, 101, 104, 107, 108, 109, 110, 113, 119, 122, 129, 130, 131, 138, 139, 144, 145, 146, 147, 156, 159, 160, 172, 180, 182, 187, 193, 225, 227, 232, 233, 273, 275, 276, 278, 284, 288, 295, 300, 302, 303, 305, 308, 313, 314, 323, 332, 337, 340, 343, 346, 347, 349, 350, 352, 354, 363, 372], "maximal_cyclic_decomposit": 3, "verbos": [3, 9, 19, 23, 33, 76, 79, 82, 83, 89, 90, 91, 92, 93, 108, 138, 169, 170, 190, 199, 205, 207, 209, 225, 345], "maxim": [3, 11, 19, 22, 24, 36, 50, 54, 59, 61, 76, 82, 89, 91, 96, 99, 101, 104, 110, 114, 120, 127, 129, 130, 136, 141, 156, 160, 172, 174, 180, 182, 183, 186, 187, 225, 235, 237, 241, 273, 278, 296, 315, 338, 343, 346, 350, 352, 354, 359, 362], "print": [3, 9, 11, 19, 22, 23, 25, 26, 30, 32, 36, 39, 51, 55, 56, 58, 59, 66, 69, 71, 72, 77, 79, 80, 82, 83, 84, 85, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 108, 109, 112, 116, 118, 120, 124, 126, 127, 128, 131, 136, 137, 138, 139, 140, 153, 154, 156, 157, 158, 159, 160, 164, 169, 172, 173, 174, 176, 180, 183, 187, 190, 192, 197, 211, 212, 215, 217, 219, 225, 227, 232, 235, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 264, 265, 267, 268, 269, 270, 274, 278, 280, 291, 303, 307, 310, 312, 313, 314, 315, 326, 336, 340, 341, 346, 348, 354, 355, 358, 359, 362, 363, 367, 368, 369], "extra": [3, 19, 79, 80, 99, 102, 129, 130, 138, 145, 156, 160, 233, 238, 241, 242, 272, 275, 306, 323, 342, 354], "inform": [3, 9, 19, 29, 30, 36, 46, 48, 51, 53, 54, 56, 59, 63, 67, 71, 72, 76, 77, 79, 82, 83, 86, 88, 89, 90, 91, 92, 93, 95, 97, 98, 99, 101, 102, 107, 108, 120, 127, 129, 131, 132, 134, 138, 139, 145, 155, 158, 159, 160, 164, 172, 180, 182, 183, 186, 187, 193, 211, 212, 215, 218, 225, 227, 238, 266, 273, 275, 276, 293, 302, 303, 315, 336, 337, 341, 343, 346, 348, 349, 352, 354, 356, 359, 362, 365, 369], "maximal_cyclic_factor": 3, "yd_a": 3, "wa": [3, 6, 16, 21, 26, 30, 37, 51, 56, 79, 80, 91, 93, 96, 101, 108, 110, 112, 114, 115, 116, 124, 130, 134, 136, 141, 145, 151, 159, 160, 162, 173, 182, 185, 187, 216, 227, 232, 235, 236, 242, 271, 273, 303, 310, 315, 346, 348, 354, 359], "found": [3, 9, 19, 22, 23, 30, 33, 76, 79, 80, 83, 91, 93, 98, 108, 114, 131, 132, 136, 139, 163, 165, 172, 177, 180, 193, 205, 222, 226, 273, 278, 286, 291, 302, 305, 314, 315, 323, 332, 339, 345, 354, 356, 359, 362, 363, 374], "j": [3, 6, 9, 10, 11, 17, 19, 22, 23, 26, 30, 32, 42, 46, 48, 51, 58, 59, 60, 62, 63, 65, 68, 71, 72, 76, 77, 79, 80, 82, 83, 85, 89, 90, 91, 92, 98, 99, 100, 101, 102, 104, 108, 109, 110, 114, 116, 118, 120, 122, 123, 126, 127, 130, 131, 132, 134, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 150, 151, 157, 159, 160, 163, 165, 169, 172, 174, 180, 182, 183, 186, 187, 188, 189, 193, 197, 211, 212, 215, 216, 218, 225, 226, 227, 229, 231, 233, 236, 240, 242, 243, 245, 248, 251, 253, 255, 257, 266, 270, 271, 272, 273, 276, 278, 280, 285, 287, 288, 289, 290, 292, 293, 296, 297, 302, 303, 304, 306, 308, 310, 314, 315, 340, 343, 345, 346, 347, 348, 349, 352, 354, 356, 358, 359, 362, 363, 365, 369], "promot": [3, 36, 56, 69, 167, 169, 170, 183, 187, 346], "send": [3, 11, 16, 17, 23, 48, 74, 101, 110, 119, 122, 130, 144, 145, 146, 147, 149, 154, 156, 160, 163, 172, 174, 215, 232, 233, 239, 240, 242, 273, 277, 284, 285, 288, 296, 300, 301, 302, 303, 305, 308, 340, 343, 346, 351], "s_i": [3, 25, 34, 58, 69, 73, 83, 91, 99, 114, 138, 160, 172, 182, 215, 219, 227, 229, 232, 234, 236, 237, 239, 241, 242, 273, 277, 278, 343, 346, 359], "s_": [3, 16, 25, 34, 39, 58, 61, 62, 63, 68, 69, 114, 116, 127, 143, 145, 151, 160, 169, 172, 188, 227, 232, 234, 240, 243, 271, 277, 278, 284, 285, 287, 288, 291, 293, 296, 298, 300, 301, 302, 303, 304, 305, 316, 343, 346, 348, 369], "alpha": [3, 9, 10, 16, 19, 25, 39, 46, 48, 51, 54, 55, 60, 62, 64, 91, 95, 97, 98, 108, 133, 139, 143, 145, 146, 152, 160, 181, 187, 222, 227, 232, 234, 236, 238, 239, 241, 242, 243, 244, 264, 271, 272, 274, 275, 289, 293, 303, 343, 346, 356, 359, 362, 363, 369], "full": [3, 6, 11, 19, 39, 57, 65, 68, 101, 107, 108, 123, 133, 139, 160, 182, 187, 188, 193, 212, 216, 218, 221, 226, 227, 234, 238, 273, 315, 316, 346, 347, 348, 354, 359], "den2012": 3, "content": [3, 34, 51, 54, 68, 72, 116, 120, 131, 143, 152, 160, 164, 291, 301, 314, 323, 344, 346, 347, 348, 359], "four": [3, 11, 19, 23, 80, 82, 83, 92, 97, 98, 108, 114, 122, 138, 139, 159, 162, 164, 172, 187, 238, 264, 303, 310, 311, 345, 350, 354, 363], "to_type_a": 3, "embed": [3, 11, 16, 48, 56, 65, 67, 68, 99, 108, 112, 130, 131, 139, 145, 150, 156, 160, 192, 193, 211, 212, 221, 225, 227, 236, 237, 241, 242, 244, 264, 266, 270, 271, 272, 273, 275, 296, 343], "just": [3, 11, 16, 23, 26, 29, 46, 47, 54, 59, 68, 79, 85, 91, 96, 98, 99, 101, 108, 110, 111, 112, 113, 119, 120, 122, 125, 130, 136, 139, 140, 145, 146, 156, 158, 160, 162, 172, 180, 182, 187, 221, 227, 233, 234, 236, 238, 241, 244, 272, 275, 276, 282, 284, 294, 303, 313, 314, 323, 332, 333, 343, 346, 348, 354, 356, 358, 359, 362, 368], "base_window": 3, "imag": [3, 9, 16, 17, 19, 22, 26, 36, 56, 57, 65, 67, 87, 101, 110, 112, 116, 119, 122, 130, 141, 144, 145, 146, 149, 150, 151, 160, 172, 212, 215, 219, 225, 232, 233, 241, 242, 271, 272, 276, 284, 285, 288, 293, 295, 296, 300, 301, 302, 303, 305, 313, 314, 316, 343, 344, 346, 350, 352, 356, 359, 362, 363, 369, 372, 373], "under": [3, 9, 11, 16, 17, 30, 33, 36, 39, 49, 56, 62, 70, 74, 83, 87, 91, 97, 101, 104, 108, 110, 111, 116, 122, 123, 129, 130, 139, 141, 144, 145, 146, 147, 149, 151, 156, 159, 160, 162, 169, 172, 173, 174, 182, 186, 187, 188, 212, 215, 216, 219, 225, 232, 235, 237, 239, 241, 242, 244, 266, 271, 273, 275, 276, 284, 285, 288, 295, 300, 301, 302, 303, 305, 307, 313, 314, 333, 340, 341, 343, 346, 350, 354, 356, 359, 362, 369], "boolean": [3, 11, 21, 22, 26, 30, 33, 34, 47, 48, 51, 59, 76, 77, 80, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 94, 95, 101, 107, 108, 109, 114, 115, 122, 124, 131, 136, 138, 144, 145, 146, 154, 156, 157, 158, 160, 172, 173, 174, 176, 180, 182, 183, 186, 187, 192, 193, 215, 219, 226, 227, 229, 230, 236, 238, 239, 242, 272, 291, 294, 303, 305, 307, 310, 312, 337, 340, 343, 344, 345, 346, 355, 359, 362, 363, 364, 365, 368, 371, 373], "bit": [3, 26, 96, 99, 108, 109, 147, 173, 228, 238, 271, 273, 362, 369], "faster": [3, 26, 36, 49, 71, 85, 96, 97, 101, 112, 120, 132, 136, 146, 160, 172, 173, 180, 187, 238, 240, 273, 274, 280, 290, 302, 303, 305, 307, 314, 343, 346, 362, 365], "screw": [3, 302], "18": [3, 7, 11, 26, 31, 76, 80, 83, 84, 88, 89, 90, 91, 99, 102, 108, 109, 130, 132, 138, 139, 147, 154, 159, 164, 168, 172, 180, 182, 187, 188, 193, 197, 225, 235, 236, 237, 239, 255, 274, 285, 289, 293, 300, 303, 307, 308, 310, 311, 314, 315, 323, 324, 336, 350, 354, 356, 359, 360, 361, 366, 369, 370], "program": [4, 9, 71, 76, 86, 89, 91, 92, 101, 127, 134, 136, 165, 172, 187, 190, 216, 227, 236, 302, 315, 354], "mix": [4, 9, 76, 89, 91, 92, 118, 127, 136, 145, 187, 232, 233, 276, 302, 343], "gelfandtsetlinpattern": [4, 6, 53, 103, 116, 170], "knutsontaopuzzlesolv": [4, 103, 134], "symmetricgroup": [4, 26, 33, 50, 83, 98, 103, 104, 160, 172, 187, 190, 234, 302, 316, 343, 344, 352, 373], "coxetergroup": [4, 64, 114, 132, 186, 220, 223, 228, 234, 340], "weylgroup": [4, 37, 131, 132, 186, 187, 190, 220, 227, 233, 234, 236, 237, 242, 274, 290, 340, 343], "partitionalgebra": [4, 99], "iwahoriheckealgebra": [4, 162, 347], "symmetricgroupalgebra": [4, 99, 110, 112, 316, 343], "nilcoxeteralgebra": 4, "affineniltemperleyliebtypea": 4, "kazhdanlusztigpolynomi": [4, 132], "symmetricgrouprepresent": [4, 344], "spechtmodul": [4, 316], "zinbiel": 4, "mike": [6, 28, 30, 34, 99, 101, 124, 127, 128, 131, 146, 154, 157, 160, 172, 274, 278, 280, 290, 302, 303, 304, 313, 314, 336, 339, 342, 346, 348], "hansen": [6, 28, 30, 99, 101, 124, 127, 128, 154, 157, 160, 172, 274, 278, 280, 303, 313, 314, 336, 339, 346, 348], "2007": [6, 26, 28, 68, 69, 77, 89, 92, 93, 99, 107, 108, 124, 127, 128, 160, 165, 227, 303, 315, 341, 346, 348, 362, 369], "pierr": 6, "cang": 6, "lui": [6, 146], "serrano": [6, 145, 146], "2012": [6, 16, 23, 26, 32, 34, 59, 80, 99, 101, 108, 127, 147, 153, 159, 160, 164, 172, 186, 187, 188, 202, 203, 204, 205, 206, 210, 211, 212, 215, 226, 231, 232, 276, 286, 289, 290, 303, 346, 348, 354, 358, 362], "monoton": [6, 158, 235, 337], "travi": [6, 12, 16, 17, 27, 30, 34, 39, 51, 53, 54, 59, 62, 64, 67, 68, 69, 73, 74, 101, 116, 120, 127, 130, 145, 149, 150, 151, 154, 157, 160, 162, 172, 187, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 226, 231, 266, 276, 278, 280, 287, 298, 304, 313, 314, 316, 346], "scrimshaw": [6, 12, 16, 17, 27, 30, 34, 39, 51, 53, 54, 59, 62, 64, 67, 68, 69, 73, 74, 101, 107, 116, 120, 127, 130, 145, 149, 150, 151, 154, 157, 160, 162, 172, 187, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 226, 231, 266, 276, 278, 280, 287, 298, 304, 313, 314, 316, 346], "2013": [6, 10, 11, 30, 39, 59, 68, 69, 73, 74, 80, 91, 95, 101, 108, 116, 127, 131, 146, 149, 150, 151, 157, 172, 187, 188, 211, 212, 214, 216, 218, 226, 231, 232, 233, 236, 241, 266, 274, 278, 280, 293, 298, 303, 304, 306, 310, 313, 314, 355], "28": [6, 7, 26, 74, 76, 80, 82, 83, 84, 85, 88, 90, 91, 92, 93, 94, 97, 138, 139, 160, 165, 180, 186, 187, 193, 225, 235, 236, 239, 276, 278, 280, 289, 290, 292, 310, 312, 313, 315, 350, 352, 354, 356, 359, 360, 366, 370], "03": [6, 26, 30, 39, 73, 107, 108, 112, 116, 132, 138, 139, 152, 160, 172, 173, 188, 211, 212, 223, 274, 313, 314, 315, 362], "asm": [6, 115, 312], "made": [6, 11, 33, 83, 86, 89, 93, 101, 102, 111, 122, 145, 160, 172, 187, 197, 238, 277, 313, 315, 346, 350, 354, 359], "monotonetriangl": 6, "jessica": [6, 174], "striker": [6, 174], "addit": [6, 7, 11, 17, 30, 69, 76, 79, 82, 83, 90, 91, 99, 101, 105, 108, 109, 110, 111, 112, 120, 123, 124, 134, 138, 139, 145, 160, 162, 163, 172, 174, 187, 192, 232, 233, 235, 236, 238, 267, 275, 278, 280, 302, 303, 308, 321, 333, 345, 354], "vincent": [6, 28, 77, 89, 102, 115, 340, 358, 372], "delecroix": [6, 28, 77, 89, 102, 115, 358, 372], "2017": [6, 69, 80, 83, 110, 111, 115, 119, 120, 171, 278, 287, 307, 310, 350], "clean": [6, 26, 28, 115, 160, 221, 346, 354], "alternating_sign_matrix": 6, "alternatingsignmatric": [6, 115, 186, 312, 354], "size": [6, 8, 9, 11, 16, 17, 19, 22, 23, 25, 26, 28, 30, 32, 34, 46, 62, 70, 76, 79, 80, 81, 82, 83, 84, 85, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 101, 102, 108, 109, 110, 111, 113, 115, 116, 118, 120, 128, 130, 131, 133, 136, 138, 141, 144, 145, 146, 147, 149, 151, 153, 156, 158, 159, 160, 161, 162, 164, 169, 170, 171, 172, 174, 180, 182, 183, 186, 187, 188, 196, 197, 238, 242, 275, 276, 278, 280, 293, 296, 297, 300, 302, 303, 305, 306, 310, 311, 313, 314, 315, 318, 322, 323, 326, 336, 337, 340, 341, 342, 343, 345, 346, 347, 348, 350, 354, 359, 361, 362, 363, 369, 372], "column": [6, 19, 26, 32, 39, 51, 54, 56, 59, 66, 68, 74, 78, 80, 82, 84, 89, 90, 91, 92, 93, 98, 100, 102, 107, 114, 115, 120, 122, 126, 127, 131, 136, 138, 139, 141, 144, 146, 158, 160, 164, 172, 174, 193, 196, 211, 212, 215, 216, 217, 218, 219, 226, 227, 231, 238, 264, 272, 276, 278, 284, 286, 293, 296, 304, 307, 312, 313, 314, 316, 341, 343, 346, 347, 348, 350, 362], "cardin": [6, 7, 8, 11, 12, 13, 25, 26, 28, 30, 31, 33, 34, 36, 41, 46, 48, 52, 53, 55, 56, 59, 60, 68, 71, 72, 73, 76, 77, 79, 80, 83, 84, 85, 88, 89, 91, 96, 99, 101, 112, 114, 115, 117, 118, 124, 126, 127, 128, 129, 130, 131, 141, 143, 152, 153, 154, 156, 158, 159, 160, 161, 164, 171, 172, 174, 180, 182, 183, 184, 187, 190, 192, 193, 194, 196, 197, 211, 212, 213, 216, 218, 227, 237, 239, 274, 275, 278, 280, 307, 308, 309, 310, 312, 313, 314, 316, 329, 330, 333, 336, 338, 339, 341, 342, 344, 346, 348, 353, 354, 358, 359, 361, 362, 364, 372], "notabl": [6, 323], "facad": [6, 7, 47, 177, 179, 180, 182, 183, 184, 186, 187, 242, 244, 346, 358], "alternatingsignmatrix": [6, 115, 172, 312], "frac": [6, 11, 26, 74, 76, 77, 79, 83, 101, 108, 115, 130, 145, 146, 151, 160, 163, 172, 174, 187, 188, 215, 217, 229, 235, 236, 239, 241, 257, 273, 275, 277, 280, 303, 310, 315, 316, 323, 343, 345, 346, 349, 352, 354, 359, 369], "3k": [6, 115], "cdot": [6, 11, 17, 25, 26, 30, 34, 39, 47, 48, 51, 54, 56, 57, 58, 59, 60, 62, 63, 65, 68, 69, 72, 73, 74, 76, 77, 79, 83, 91, 99, 101, 104, 108, 109, 112, 114, 115, 116, 120, 121, 127, 129, 131, 133, 138, 140, 141, 144, 145, 146, 147, 149, 151, 159, 160, 163, 164, 172, 182, 183, 185, 186, 187, 188, 193, 212, 225, 232, 234, 235, 239, 271, 273, 276, 277, 278, 280, 287, 295, 302, 303, 305, 307, 308, 310, 312, 313, 315, 323, 324, 343, 346, 347, 350, 354, 359, 364, 369, 374], "3n": [6, 83, 95, 115, 130, 315], "429": [6, 115, 124, 153, 225, 315, 324, 354], "7436": [6, 115], "218348": [6, 115], "10850216": [6, 115], "911835460": [6, 115], "129534272700": 6, "cover_rel": [6, 11, 114, 172, 180, 182, 183, 186, 187, 242, 244, 340], "eval": [6, 274, 346], "from_contre_tableau": 6, "comp": [6, 30, 32, 110, 127, 144, 149, 152, 164, 280, 361], "contr": 6, "from_corner_sum": 6, "corner": [6, 26, 34, 101, 120, 122, 127, 134, 154, 160, 164, 172, 227, 238, 278, 313, 314, 342, 346, 354], "from_height_funct": 6, "height": [6, 39, 41, 54, 56, 101, 107, 131, 154, 155, 156, 158, 160, 167, 174, 186, 187, 196, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 216, 232, 234, 238, 242, 304, 346, 359, 363], "from_monotone_triangl": 6, "valid": [6, 19, 39, 51, 54, 72, 86, 91, 98, 99, 101, 109, 116, 123, 124, 125, 127, 131, 134, 141, 158, 159, 160, 163, 164, 167, 168, 170, 172, 174, 180, 182, 193, 214, 215, 242, 253, 276, 278, 280, 307, 312, 314, 341, 342, 346, 347, 349], "gyration_orbit_s": 6, "gyrat": [6, 115], "li": [6, 19, 80, 82, 91, 112, 160, 219, 243, 272, 313, 314, 346, 350], "gyration_orbit": 6, "latticeposet": [6, 175, 182, 187], "matrix_spac": [6, 226], "underli": [6, 19, 22, 23, 38, 39, 49, 54, 56, 59, 68, 76, 77, 88, 89, 99, 108, 111, 113, 114, 115, 119, 131, 132, 138, 139, 154, 159, 164, 172, 179, 183, 186, 187, 211, 215, 216, 238, 239, 241, 255, 257, 275, 278, 280, 307, 343, 344, 346, 347, 348, 354, 359, 372], "matrixspac": [6, 103, 172, 187, 226, 354], "dens": [6, 96, 100, 137, 138, 180, 187], "bool": [6, 79, 102, 108, 154, 156, 275, 350, 354, 359, 361, 363], "number_negative_on": 6, "is_permut": 6, "propp": 6, "wilson": [6, 80, 83, 85, 91, 92, 93, 94], "coupl": [6, 72, 101, 109, 187, 227, 340, 354, 359, 362], "top": [6, 11, 12, 29, 32, 51, 54, 68, 74, 92, 98, 99, 101, 107, 115, 116, 120, 126, 130, 138, 144, 158, 160, 161, 162, 164, 172, 180, 182, 186, 187, 193, 196, 197, 212, 218, 232, 276, 278, 297, 307, 312, 314, 341, 346, 348, 354, 359, 373], "ldot": [6, 11, 12, 16, 17, 25, 26, 27, 30, 32, 33, 34, 39, 47, 51, 54, 56, 58, 59, 61, 62, 63, 65, 68, 69, 73, 74, 76, 83, 85, 89, 91, 93, 96, 98, 99, 101, 102, 108, 109, 110, 116, 118, 120, 121, 122, 127, 128, 130, 131, 141, 143, 144, 145, 146, 147, 150, 151, 152, 156, 159, 160, 161, 163, 164, 171, 172, 180, 182, 183, 186, 187, 188, 192, 212, 227, 229, 234, 235, 239, 241, 247, 263, 268, 271, 275, 276, 277, 278, 280, 285, 287, 288, 294, 295, 300, 301, 303, 305, 307, 314, 315, 323, 341, 343, 346, 347, 348, 358, 359, 361, 362, 365, 369], "convert": [6, 11, 26, 34, 58, 64, 73, 85, 99, 101, 104, 108, 109, 120, 129, 139, 141, 146, 147, 149, 151, 154, 156, 158, 161, 162, 167, 170, 172, 180, 187, 212, 213, 214, 215, 216, 217, 227, 232, 235, 275, 276, 277, 278, 280, 284, 286, 290, 292, 293, 294, 296, 299, 302, 303, 306, 310, 336, 343, 345, 350, 352, 359, 363, 365, 374], "were": [6, 19, 51, 79, 80, 85, 99, 108, 112, 114, 116, 120, 145, 146, 156, 160, 162, 164, 169, 186, 189, 213, 236, 237, 241, 266, 274, 350, 365], "introduc": [6, 11, 12, 16, 17, 37, 50, 51, 54, 77, 85, 108, 110, 112, 120, 130, 145, 147, 160, 164, 172, 177, 189, 216, 232, 235, 241, 276, 282, 302, 303, 308, 310, 313, 343, 350, 354], "mrr1983": 6, "asm_compat": 6, "compat": [6, 9, 24, 30, 106, 108, 112, 120, 136, 160, 168, 182, 185, 193, 197, 239, 272, 277, 291, 313, 314, 346, 348, 365], "eklp1992": 6, "notion": [6, 9, 11, 19, 22, 25, 34, 120, 131, 143, 160, 172, 182, 187, 303, 310, 323, 339, 342, 346, 354, 359], "pair": [6, 8, 9, 11, 12, 16, 17, 19, 22, 23, 25, 26, 30, 33, 39, 51, 56, 59, 64, 68, 76, 77, 80, 82, 83, 84, 87, 88, 89, 90, 91, 92, 93, 95, 97, 98, 99, 101, 108, 109, 110, 111, 112, 113, 114, 115, 118, 120, 130, 131, 134, 138, 139, 141, 144, 145, 146, 147, 149, 150, 151, 156, 158, 159, 160, 161, 162, 171, 172, 180, 182, 183, 186, 187, 190, 191, 193, 197, 211, 212, 218, 224, 225, 238, 242, 244, 271, 273, 275, 276, 278, 280, 297, 306, 309, 310, 311, 313, 314, 340, 342, 343, 346, 348, 350, 354, 359, 365, 373], "being": [6, 10, 11, 17, 19, 21, 22, 23, 24, 26, 39, 62, 63, 74, 77, 79, 80, 83, 84, 92, 99, 108, 110, 112, 116, 120, 124, 129, 130, 138, 139, 141, 145, 146, 156, 158, 160, 164, 172, 174, 180, 182, 183, 225, 233, 236, 238, 239, 246, 253, 276, 278, 300, 302, 303, 313, 314, 315, 322, 336, 343, 346, 347, 350, 354, 356], "thei": [6, 9, 11, 19, 26, 30, 39, 68, 71, 76, 83, 84, 89, 90, 91, 92, 98, 99, 101, 102, 108, 109, 112, 113, 114, 115, 116, 119, 120, 122, 125, 127, 130, 134, 138, 139, 145, 154, 156, 157, 159, 160, 162, 164, 168, 169, 172, 180, 182, 184, 187, 212, 216, 225, 227, 236, 237, 238, 239, 241, 244, 265, 274, 275, 276, 277, 278, 280, 293, 297, 299, 301, 302, 303, 305, 310, 311, 314, 316, 323, 332, 333, 336, 342, 343, 345, 346, 347, 348, 354, 359, 365, 366, 368, 373, 374], "aztec": 6, "diamond": [6, 180, 182, 186, 187, 354], "asm_compatible_bigg": 6, "greater": [6, 11, 19, 26, 30, 34, 54, 77, 83, 90, 101, 104, 108, 120, 130, 138, 160, 169, 172, 180, 186, 187, 211, 232, 237, 242, 273, 276, 290, 302, 303, 307, 310, 313, 314, 346, 352, 355, 356, 359, 369, 371], "than": [6, 10, 11, 17, 19, 23, 26, 30, 34, 39, 41, 53, 54, 57, 59, 65, 70, 71, 72, 74, 77, 80, 82, 83, 85, 90, 91, 92, 93, 97, 98, 99, 101, 103, 104, 107, 108, 109, 110, 114, 119, 122, 124, 130, 131, 134, 138, 141, 144, 145, 146, 147, 151, 154, 156, 157, 159, 160, 161, 162, 169, 171, 172, 173, 174, 176, 180, 186, 187, 193, 198, 211, 215, 217, 225, 232, 237, 238, 239, 240, 242, 243, 272, 273, 274, 275, 276, 277, 278, 280, 285, 290, 291, 293, 296, 300, 301, 302, 303, 305, 307, 309, 310, 313, 314, 315, 317, 333, 336, 339, 343, 344, 346, 347, 348, 350, 352, 354, 355, 356, 359, 361, 362, 363, 371, 374], "rais": [6, 9, 10, 19, 26, 30, 39, 51, 59, 74, 76, 77, 79, 83, 85, 91, 99, 101, 107, 108, 124, 129, 130, 131, 138, 146, 147, 150, 154, 158, 160, 163, 172, 180, 182, 187, 191, 192, 193, 222, 229, 241, 242, 264, 296, 302, 303, 313, 345, 347, 354, 359, 361, 362, 368, 369], "len": [6, 9, 11, 12, 19, 22, 25, 26, 28, 30, 31, 33, 39, 46, 55, 62, 70, 76, 80, 83, 86, 87, 89, 91, 99, 101, 102, 107, 108, 114, 115, 116, 117, 120, 124, 126, 127, 130, 131, 134, 137, 139, 141, 143, 145, 146, 152, 153, 158, 160, 161, 164, 170, 172, 180, 182, 184, 186, 187, 191, 193, 196, 216, 218, 224, 231, 239, 242, 278, 291, 297, 302, 303, 307, 312, 313, 314, 315, 332, 336, 340, 341, 346, 349, 350, 354, 359, 361, 362, 363, 365, 366, 367, 369, 370], "asm_compatible_smal": 6, "smaller": [6, 11, 17, 23, 70, 72, 85, 95, 99, 101, 104, 107, 114, 120, 122, 124, 130, 131, 146, 160, 172, 176, 180, 182, 187, 237, 242, 273, 278, 291, 343, 346, 350, 359, 362], "corner_sum_matrix": 6, "go": [6, 11, 17, 19, 22, 25, 53, 56, 77, 83, 91, 92, 108, 124, 160, 172, 212, 215, 218, 225, 236, 239, 240, 242, 274, 276, 302, 303, 313, 314, 343, 348, 350], "those": [6, 9, 12, 19, 29, 39, 46, 58, 72, 80, 84, 91, 92, 96, 98, 108, 127, 131, 134, 139, 141, 145, 146, 151, 158, 160, 172, 173, 180, 182, 187, 216, 225, 227, 236, 237, 238, 241, 242, 265, 271, 272, 278, 290, 291, 310, 315, 338, 343, 346, 350, 354, 355, 356], "even": [6, 9, 17, 19, 22, 25, 26, 30, 56, 66, 72, 77, 83, 85, 96, 97, 98, 101, 108, 109, 114, 115, 120, 122, 124, 131, 145, 146, 160, 171, 172, 174, 182, 187, 193, 226, 227, 234, 236, 238, 270, 273, 276, 296, 298, 302, 303, 304, 313, 315, 341, 345, 346, 348, 354, 359, 369], "odd": [6, 11, 19, 55, 56, 66, 77, 83, 97, 101, 120, 138, 145, 160, 172, 187, 216, 231, 270, 276, 286, 303, 305, 307, 315, 345, 346, 354, 369, 374], "increment": [6, 9, 86, 118, 172, 187, 350, 359], "decrement": [6, 30, 172], "wherev": [6, 30], "possibl": [6, 9, 11, 17, 19, 23, 28, 33, 54, 61, 68, 71, 72, 73, 76, 77, 80, 82, 83, 84, 85, 89, 91, 92, 93, 96, 97, 98, 99, 101, 102, 108, 109, 110, 111, 113, 114, 119, 120, 124, 127, 130, 131, 136, 138, 145, 146, 147, 150, 154, 156, 158, 160, 164, 172, 180, 182, 183, 187, 188, 192, 205, 226, 227, 229, 231, 242, 269, 275, 276, 284, 291, 296, 302, 308, 310, 336, 337, 345, 346, 348, 354, 355, 359, 362, 367], "still": [6, 51, 59, 68, 96, 108, 122, 124, 146, 160, 162, 174, 187, 191, 218, 223, 225, 237, 276, 296, 300, 314, 354, 362], "wie2000": [6, 115], "m": [6, 9, 10, 11, 17, 19, 21, 22, 23, 25, 26, 28, 30, 32, 33, 38, 41, 48, 51, 55, 58, 60, 62, 65, 66, 67, 68, 74, 77, 79, 80, 82, 83, 84, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 100, 101, 102, 107, 108, 110, 114, 115, 116, 118, 120, 122, 123, 124, 126, 127, 128, 130, 131, 137, 138, 139, 140, 143, 144, 145, 146, 147, 149, 150, 151, 155, 159, 160, 163, 164, 171, 172, 180, 182, 183, 185, 186, 187, 188, 189, 190, 192, 193, 216, 226, 227, 229, 231, 232, 235, 236, 238, 241, 242, 263, 266, 267, 270, 276, 278, 280, 282, 284, 286, 289, 290, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 308, 309, 310, 312, 315, 340, 342, 343, 346, 347, 348, 349, 352, 354, 355, 358, 359, 362, 366, 369, 372], "a0": [6, 191, 236, 315, 362], "20": [6, 7, 11, 23, 26, 41, 68, 76, 80, 83, 84, 85, 88, 89, 90, 91, 93, 95, 99, 112, 115, 124, 127, 134, 138, 139, 160, 164, 172, 180, 182, 186, 187, 191, 192, 193, 197, 222, 232, 235, 236, 238, 239, 242, 271, 274, 275, 276, 290, 308, 313, 315, 323, 350, 352, 354, 356, 359, 360, 362, 363, 366, 367, 370, 374], "includ": [6, 9, 10, 11, 19, 23, 25, 26, 30, 39, 68, 71, 77, 79, 81, 89, 98, 101, 102, 108, 109, 117, 123, 136, 147, 154, 156, 158, 160, 163, 164, 167, 172, 177, 186, 187, 192, 193, 225, 227, 229, 241, 242, 271, 272, 273, 275, 289, 293, 297, 302, 303, 315, 333, 343, 346, 348, 350, 354, 356, 359, 363, 369, 372], "height_funct": 6, "adjac": [6, 8, 9, 33, 37, 50, 72, 89, 108, 109, 130, 131, 138, 160, 162, 172, 173, 187, 222, 237, 238, 242, 278, 314, 339, 350, 373], "inversion_numb": [6, 346], "denot": [6, 10, 11, 16, 17, 25, 26, 46, 60, 61, 62, 65, 69, 74, 78, 91, 99, 107, 108, 109, 110, 114, 122, 127, 130, 139, 144, 145, 146, 147, 149, 151, 160, 172, 183, 187, 188, 212, 215, 216, 219, 225, 229, 232, 233, 235, 239, 240, 241, 242, 266, 271, 272, 278, 280, 284, 285, 288, 294, 300, 301, 302, 303, 305, 310, 315, 323, 343, 346, 354, 359], "sum_": [6, 8, 9, 17, 25, 26, 31, 39, 51, 57, 59, 60, 61, 62, 65, 68, 72, 74, 91, 93, 98, 99, 101, 108, 116, 121, 127, 128, 138, 145, 146, 147, 150, 151, 152, 160, 162, 164, 172, 174, 181, 182, 185, 187, 188, 193, 211, 215, 216, 235, 266, 273, 275, 287, 288, 293, 298, 302, 303, 304, 305, 308, 310, 312, 316, 323, 343, 345, 347, 348, 352, 354, 359, 374], "when": [6, 8, 9, 10, 11, 17, 19, 22, 26, 28, 30, 33, 37, 39, 46, 48, 53, 58, 59, 62, 68, 72, 74, 76, 79, 82, 83, 84, 89, 90, 91, 92, 96, 101, 107, 108, 109, 111, 113, 114, 115, 119, 120, 122, 123, 124, 127, 129, 130, 131, 133, 134, 136, 138, 141, 145, 146, 149, 150, 160, 162, 163, 164, 172, 173, 180, 181, 182, 183, 186, 187, 188, 191, 192, 193, 205, 212, 214, 215, 216, 225, 226, 227, 232, 238, 239, 241, 244, 276, 277, 278, 282, 285, 288, 290, 293, 294, 296, 300, 301, 302, 303, 305, 312, 313, 314, 315, 319, 322, 329, 333, 335, 339, 343, 345, 346, 347, 348, 349, 350, 352, 354, 356, 359, 362, 363, 364, 365, 366, 368, 369, 373, 374], "give": [6, 11, 12, 23, 26, 30, 34, 36, 39, 53, 56, 62, 63, 79, 80, 89, 91, 92, 94, 95, 97, 99, 101, 108, 109, 113, 115, 119, 120, 123, 127, 129, 131, 136, 139, 141, 144, 145, 146, 155, 158, 159, 160, 162, 164, 170, 171, 172, 174, 180, 182, 187, 189, 191, 215, 216, 218, 221, 225, 226, 227, 229, 232, 235, 236, 238, 241, 242, 264, 266, 273, 274, 275, 276, 278, 284, 287, 290, 293, 296, 300, 301, 303, 312, 313, 314, 316, 338, 346, 348, 349, 352, 354, 355, 358, 362, 363, 368, 369], "usual": [6, 25, 46, 54, 58, 61, 92, 99, 108, 109, 110, 111, 113, 114, 116, 130, 144, 145, 147, 151, 155, 160, 163, 164, 169, 170, 172, 186, 187, 189, 191, 212, 215, 218, 221, 225, 227, 232, 234, 236, 237, 238, 239, 241, 242, 244, 264, 265, 272, 273, 276, 284, 285, 288, 298, 300, 301, 302, 303, 304, 313, 336, 343, 346, 348, 349, 354, 359, 362, 369], "number_of_invers": [6, 172, 280, 359], "to_matrix": [6, 25, 120, 172, 181, 239, 240, 274, 276, 344], "otherwis": [6, 8, 10, 11, 19, 22, 23, 25, 26, 30, 32, 33, 34, 39, 50, 51, 52, 58, 59, 60, 68, 69, 70, 76, 77, 83, 84, 86, 89, 92, 93, 97, 99, 101, 108, 109, 114, 115, 120, 122, 127, 131, 136, 138, 141, 144, 145, 146, 149, 150, 151, 156, 159, 160, 161, 164, 168, 171, 172, 174, 180, 182, 183, 186, 187, 188, 189, 193, 211, 212, 226, 227, 229, 232, 238, 239, 241, 242, 244, 265, 266, 269, 271, 273, 276, 278, 280, 285, 290, 291, 296, 300, 301, 302, 303, 305, 314, 340, 343, 344, 345, 346, 347, 348, 354, 356, 358, 359, 361, 362, 363, 365, 367, 369, 373], "left_kei": 6, "lascoux": [6, 143, 146, 147, 162, 241, 292, 293, 303, 344, 346, 359], "lasc": 6, "success": [6, 51, 61, 108, 139, 162, 170, 227, 242, 268, 314, 346, 348, 354, 359, 363, 369], "remov": [6, 11, 19, 26, 27, 30, 34, 37, 50, 51, 54, 56, 57, 65, 72, 74, 77, 80, 86, 89, 91, 92, 97, 98, 99, 101, 108, 114, 118, 120, 122, 127, 131, 139, 144, 145, 156, 160, 161, 162, 164, 169, 172, 174, 182, 187, 212, 214, 215, 217, 225, 233, 235, 237, 238, 266, 278, 280, 303, 307, 313, 314, 342, 343, 346, 348, 350, 354, 358, 359, 363, 365], "until": [6, 32, 68, 99, 101, 107, 108, 109, 124, 154, 160, 161, 164, 172, 276, 315, 346, 354, 359, 362, 365], "what": [6, 11, 16, 17, 19, 26, 74, 77, 90, 91, 93, 100, 101, 108, 109, 110, 122, 124, 127, 154, 156, 163, 173, 187, 225, 227, 236, 238, 241, 242, 255, 257, 275, 276, 303, 305, 313, 319, 322, 329, 335, 346, 354, 359, 362], "remain": [6, 11, 29, 77, 91, 99, 101, 107, 109, 110, 114, 120, 122, 124, 145, 146, 157, 159, 160, 162, 164, 183, 187, 193, 223, 225, 227, 231, 272, 276, 278, 346, 354, 359], "so": [6, 10, 11, 12, 17, 19, 26, 29, 30, 51, 56, 58, 68, 71, 72, 77, 83, 85, 91, 92, 95, 96, 98, 99, 100, 107, 108, 114, 115, 119, 120, 122, 124, 125, 127, 131, 133, 134, 137, 138, 139, 141, 144, 145, 146, 151, 156, 159, 160, 163, 164, 166, 170, 172, 173, 180, 181, 182, 183, 185, 186, 187, 193, 199, 211, 212, 218, 221, 225, 227, 235, 236, 238, 239, 244, 247, 264, 265, 271, 272, 273, 274, 275, 276, 278, 280, 302, 303, 313, 314, 315, 318, 323, 331, 332, 333, 336, 337, 343, 346, 347, 348, 354, 359, 362, 363, 365, 369, 372, 374], "our": [6, 11, 17, 19, 22, 25, 26, 39, 54, 55, 83, 101, 108, 120, 122, 145, 146, 151, 163, 172, 173, 180, 182, 185, 187, 212, 236, 238, 268, 276, 278, 285, 288, 289, 290, 294, 300, 301, 302, 303, 312, 315, 323, 333, 343, 346, 354], "proce": [6, 11, 122, 124, 127, 156, 227, 236, 276, 278, 315, 346], "view": [6, 11, 17, 39, 46, 51, 59, 101, 102, 108, 109, 129, 130, 131, 134, 141, 154, 156, 158, 172, 183, 211, 215, 227, 232, 233, 236, 237, 296, 305, 310, 343, 354], "ava2007": [6, 346], "left_key_as_permut": 6, "link_pattern": [6, 115], "extract": [6, 11, 108, 115, 193, 274, 296, 354], "cross": [6, 9, 26, 39, 99, 101, 115, 158, 171, 242, 265, 271, 278, 312, 346, 354], "rotate_ccw": 6, "counterclockwis": [6, 131], "quarter": [6, 315], "turn": [6, 26, 29, 34, 46, 74, 92, 98, 101, 108, 120, 138, 141, 158, 187, 239, 344, 347, 354, 362], "rotat": [6, 9, 11, 24, 108, 115, 120, 134, 139, 158, 160, 167, 174, 237, 238, 346, 350, 361, 369], "rotate_cw": 6, "clockwis": [6, 23, 134], "to_dyck_word": [6, 9, 11, 101, 153, 156, 158, 159, 160], "last_diagon": 6, "diagon": [6, 11, 23, 24, 64, 101, 120, 124, 131, 134, 138, 146, 154, 159, 160, 168, 174, 196, 215, 225, 226, 227, 229, 236, 302, 307, 310, 313, 314, 343, 346, 352], "typeerror": [6, 26, 74, 87, 89, 108, 117, 133, 140, 146, 147, 168, 187, 242, 271, 284, 290, 293, 296, 302, 314, 315, 354, 359, 362, 363, 365, 369, 372, 374], "argument": [6, 13, 17, 26, 29, 30, 32, 47, 83, 85, 89, 98, 99, 101, 102, 108, 109, 111, 113, 114, 119, 120, 124, 128, 129, 131, 133, 134, 136, 138, 140, 141, 145, 146, 150, 151, 158, 160, 164, 171, 172, 173, 174, 176, 180, 182, 186, 187, 188, 189, 191, 192, 193, 211, 212, 215, 227, 231, 232, 234, 242, 255, 257, 266, 274, 275, 276, 278, 280, 289, 293, 303, 306, 307, 309, 339, 346, 348, 350, 354, 358, 359, 363, 366, 368, 372], "notamethod": 6, "unknown": [6, 9, 19, 22, 76, 83, 84, 88, 90, 91, 94, 138, 160, 226, 227, 229, 267, 269, 356, 359, 366, 370], "to_fully_packed_loop": [6, 115], "fullypackedloop": [6, 115], "fpl": [6, 115], "to_monotone_triangl": 6, "to_permut": [6, 73, 101, 274, 278, 314, 348], "to_semistandard_tableau": 6, "to_six_vertex_model": 6, "six_vertex_model": [6, 115, 312], "from_alternating_sign_matrix": [6, 115, 312], "transpos": [6, 55, 77, 89, 108, 120, 122, 160, 172, 174, 192, 193, 226, 227, 238, 239, 240, 265, 276, 284, 303, 343, 344, 352], "contretableaux": 6, "ct4": 6, "contretableaux_n": 6, "gelfandtsetlinpatternstoprow": [6, 116], "_": [6, 8, 9, 10, 16, 17, 19, 24, 26, 29, 30, 42, 48, 51, 54, 57, 59, 60, 62, 68, 69, 72, 74, 76, 77, 80, 82, 83, 84, 89, 91, 92, 93, 99, 101, 108, 110, 112, 118, 119, 121, 122, 124, 131, 139, 141, 144, 145, 146, 149, 150, 151, 153, 154, 159, 160, 162, 163, 165, 174, 180, 182, 187, 188, 193, 224, 226, 229, 231, 233, 234, 235, 236, 237, 242, 243, 271, 272, 274, 277, 278, 287, 289, 293, 296, 298, 302, 303, 304, 308, 332, 336, 346, 350, 352, 354, 356, 358, 359, 362, 363, 367, 369, 372, 374], "leq": [6, 11, 17, 25, 26, 32, 39, 54, 56, 58, 68, 69, 72, 74, 76, 79, 82, 83, 91, 92, 93, 96, 98, 101, 122, 123, 127, 130, 134, 144, 145, 146, 151, 153, 159, 160, 162, 164, 172, 174, 176, 180, 181, 182, 185, 186, 187, 188, 193, 212, 216, 226, 229, 242, 244, 266, 276, 303, 308, 309, 313, 337, 343, 346, 348, 352, 354, 359, 362, 364, 369], "dot": [6, 9, 26, 30, 33, 46, 60, 61, 76, 78, 91, 92, 102, 104, 109, 112, 114, 115, 116, 120, 126, 129, 139, 153, 172, 183, 186, 187, 221, 234, 236, 238, 241, 242, 285, 288, 294, 300, 301, 303, 336, 340, 348, 354, 359, 362, 373], "bottom": [6, 19, 32, 51, 68, 74, 98, 99, 101, 120, 126, 127, 139, 144, 158, 160, 161, 162, 164, 180, 182, 186, 187, 196, 197, 212, 218, 276, 300, 312, 314, 346, 348, 359], "strict": [6, 11, 48, 65, 67, 116, 131, 141, 151, 160, 187, 215, 218, 242, 270, 274, 276, 278, 286, 302, 305, 342, 346, 348], "truncatedstaircas": 6, "truncat": [6, 57, 65, 76, 80, 91, 92, 93, 109, 186, 346, 352, 356, 371], "staircas": [6, 186], "last_column": 6, "t4": [6, 182], "truncatedstaircases_nlastcolumn": 6, "librari": [7, 26, 46, 77, 86, 103, 132, 238, 286, 324, 354, 363], "lazi": [7, 16, 86, 99, 110, 112, 124, 145, 233, 234, 236, 274, 302, 303, 315, 323, 354, 358, 362, 373], "genericbacktrack": [7, 32, 46, 101, 103, 172, 297], "prune": [7, 11, 227, 354], "mostli": [7, 36, 172, 187, 238, 242], "supersed": 7, "recursivelyenumeratedset": [7, 103, 238], "initial_data": 7, "initial_st": [7, 108, 109], "organ": [7, 80, 108, 180, 338, 354], "recursivelyenumeratedset_forest": [7, 129, 187, 338], "handl": [7, 11, 28, 30, 68, 69, 80, 86, 96, 108, 109, 112, 160, 172, 187, 225, 231, 238, 242, 243, 280, 283, 284, 302, 303, 359, 367], "special": [7, 23, 25, 39, 83, 98, 99, 108, 116, 120, 121, 123, 124, 127, 155, 160, 162, 163, 164, 182, 187, 212, 215, 217, 225, 227, 232, 233, 234, 236, 239, 242, 264, 265, 266, 267, 269, 272, 274, 285, 286, 287, 288, 293, 294, 300, 301, 302, 303, 311, 315, 343, 347, 348, 349, 354, 359, 365, 367], "positiveintegersemigroup": 7, "semigroup": [7, 99], "la": [7, 39, 48, 51, 52, 55, 56, 57, 59, 60, 62, 68, 69, 74, 76, 79, 80, 81, 120, 121, 146, 150, 151, 171, 188, 213, 215, 216, 232, 233, 236, 242, 270, 271, 282, 290, 296, 300, 302, 303, 310, 316, 342, 343, 344], "peano": 7, "endow": [7, 11, 17, 46, 60, 111, 113, 119, 145, 146, 147, 156, 172, 187, 225, 227, 242, 244, 264, 271, 275, 302, 323, 352], "natur": [7, 9, 10, 12, 16, 23, 25, 46, 55, 65, 68, 71, 74, 98, 99, 110, 112, 115, 127, 129, 130, 141, 145, 146, 151, 162, 164, 174, 181, 185, 187, 193, 212, 215, 218, 225, 227, 238, 242, 244, 276, 278, 280, 302, 303, 315, 316, 348, 354, 356, 358, 366, 369, 372, 374], "pp": [7, 32, 36, 37, 51, 54, 56, 66, 69, 77, 80, 89, 92, 93, 98, 99, 101, 102, 108, 116, 120, 122, 131, 134, 146, 154, 158, 159, 160, 164, 165, 169, 172, 174, 182, 188, 196, 197, 212, 218, 219, 232, 236, 276, 292, 293, 296, 302, 303, 305, 307, 310, 313, 314, 341, 346, 348, 356, 358], "join": [7, 11, 16, 17, 23, 30, 33, 83, 94, 99, 108, 110, 115, 124, 129, 134, 145, 146, 158, 161, 172, 180, 182, 185, 186, 187, 228, 234, 235, 236, 275, 290, 296, 302, 303, 308, 336], "monoid": [7, 30, 50, 68, 99, 112, 130, 145, 146, 153, 160, 172, 192, 276, 302, 308, 343, 346, 356, 359, 366, 369], "some_el": [7, 16, 17, 110, 111, 113, 119, 181, 192, 193, 232, 233, 241, 242, 273, 277], "17": [7, 10, 26, 76, 79, 80, 83, 84, 85, 87, 88, 90, 91, 92, 94, 99, 101, 102, 108, 133, 138, 139, 149, 154, 156, 164, 172, 174, 182, 186, 187, 190, 193, 225, 238, 239, 264, 274, 303, 306, 307, 310, 311, 314, 315, 346, 350, 354, 356, 358, 359, 360, 362, 365, 366, 369, 370, 372, 373], "21": [7, 25, 26, 76, 77, 80, 83, 84, 88, 89, 90, 91, 93, 102, 108, 109, 120, 124, 127, 130, 134, 138, 139, 145, 146, 164, 172, 187, 193, 202, 203, 204, 205, 206, 210, 225, 234, 235, 236, 237, 238, 239, 244, 273, 289, 290, 300, 301, 315, 323, 340, 346, 350, 354, 356, 359, 360, 362, 366, 367, 370, 372, 374], "22": [7, 8, 11, 26, 56, 76, 77, 79, 80, 83, 84, 88, 90, 91, 93, 94, 107, 108, 120, 122, 134, 138, 139, 160, 164, 172, 182, 187, 193, 225, 226, 231, 235, 236, 239, 297, 315, 316, 323, 340, 346, 350, 354, 356, 359, 360, 365, 366, 370], "23": [7, 39, 76, 77, 83, 84, 88, 89, 90, 91, 92, 93, 101, 139, 141, 146, 151, 160, 172, 182, 186, 193, 216, 235, 236, 239, 240, 255, 289, 290, 293, 303, 306, 315, 339, 341, 344, 346, 350, 354, 356, 359, 360, 362, 365, 366, 370, 373], "24": [7, 13, 16, 26, 33, 53, 68, 74, 76, 77, 80, 81, 83, 84, 85, 88, 89, 90, 91, 93, 131, 139, 141, 149, 151, 155, 159, 160, 164, 168, 172, 180, 186, 187, 188, 193, 218, 236, 238, 239, 242, 274, 276, 289, 300, 303, 306, 307, 310, 312, 313, 314, 315, 316, 323, 324, 332, 336, 348, 350, 354, 356, 359, 360, 366, 369, 370, 374], "26": [7, 26, 76, 80, 82, 84, 87, 88, 90, 92, 93, 108, 134, 138, 139, 145, 150, 154, 160, 193, 213, 215, 216, 217, 218, 219, 225, 235, 236, 239, 244, 292, 303, 315, 324, 340, 350, 354, 356, 360, 363, 366, 370], "27": [7, 10, 52, 56, 58, 76, 80, 82, 83, 84, 85, 88, 91, 92, 93, 101, 108, 115, 127, 138, 139, 141, 145, 160, 174, 187, 193, 216, 225, 238, 239, 244, 289, 292, 293, 303, 305, 306, 315, 350, 356, 360, 366, 369, 370, 373], "29": [7, 13, 26, 30, 80, 83, 84, 88, 93, 109, 138, 139, 144, 145, 160, 188, 191, 193, 235, 239, 278, 285, 288, 289, 294, 300, 301, 303, 315, 350, 354, 356, 359, 360, 363, 366, 370], "30": [7, 10, 26, 73, 76, 80, 83, 84, 88, 90, 91, 93, 95, 99, 101, 124, 128, 139, 141, 152, 160, 182, 187, 193, 225, 235, 236, 238, 239, 242, 255, 261, 302, 303, 312, 315, 323, 346, 350, 354, 356, 359, 360, 361, 362, 363, 366, 368, 370], "31": [7, 10, 26, 30, 50, 77, 80, 83, 85, 88, 90, 93, 94, 108, 109, 138, 139, 193, 234, 235, 239, 276, 310, 315, 346, 350, 356, 359, 360, 362, 363, 366, 369, 370], "32": [7, 10, 76, 79, 80, 83, 84, 85, 88, 93, 139, 149, 150, 173, 186, 235, 236, 289, 303, 307, 312, 315, 340, 345, 346, 354, 356, 359, 360, 363, 366, 368, 370, 374], "33": [7, 80, 83, 88, 93, 138, 139, 159, 182, 186, 192, 193, 289, 303, 306, 315, 354, 356, 359, 360, 366, 367, 370], "34": [7, 16, 26, 76, 80, 83, 88, 93, 99, 102, 129, 139, 146, 186, 225, 236, 276, 303, 306, 311, 315, 324, 350, 354, 356, 359, 360, 366, 367, 370, 374], "35": [7, 16, 19, 26, 68, 80, 83, 88, 93, 120, 139, 145, 174, 235, 289, 314, 315, 350, 354, 356, 359, 360, 363, 366, 370], "37": [7, 80, 82, 83, 85, 88, 93, 117, 138, 139, 160, 212, 218, 236, 238, 240, 315, 354, 356, 359, 360, 366, 369, 370], "38": [7, 76, 80, 82, 83, 85, 88, 93, 95, 120, 139, 225, 292, 300, 354, 356, 359, 360, 365, 366, 370], "39": [7, 76, 80, 82, 83, 88, 92, 93, 108, 138, 139, 146, 187, 192, 225, 303, 315, 356, 359, 360, 366, 370], "40": [7, 12, 76, 77, 80, 82, 83, 85, 88, 90, 91, 93, 116, 120, 139, 155, 160, 187, 193, 242, 274, 315, 324, 348, 350, 359, 370, 371], "41": [7, 8, 80, 83, 85, 91, 92, 138, 139, 187, 193, 235, 236, 242, 315, 346, 354, 359, 363], "43": [7, 26, 76, 80, 82, 83, 108, 124, 138, 139, 235, 292, 315, 354, 359, 363, 365, 370, 374], "44": [7, 48, 73, 80, 83, 139, 235, 285, 315, 359, 370], "45": [7, 26, 48, 51, 76, 80, 83, 108, 134, 138, 139, 157, 188, 193, 236, 278, 286, 289, 323, 346, 350, 356, 362, 369], "46": [7, 48, 80, 83, 90, 91, 139, 172, 225, 315, 354, 356, 359], "47": [7, 26, 48, 80, 83, 91, 92, 138, 139, 186, 187, 188, 237, 283, 290, 315, 349, 354], "48": [7, 48, 68, 76, 80, 83, 85, 90, 160, 186, 189, 190, 193, 235, 239, 242, 244, 275, 289, 315, 324, 359, 363, 367, 369], "49": [7, 26, 48, 80, 83, 85, 108, 120, 138, 174, 187, 188, 193, 315, 354, 359, 367, 374], "50": [7, 26, 80, 83, 90, 91, 92, 93, 96, 101, 105, 160, 161, 172, 182, 187, 193, 242, 315, 341, 350, 354, 359, 362, 363], "51": [7, 26, 80, 83, 108, 124, 138, 193, 289, 302, 315, 369], "52": [7, 46, 76, 80, 83, 90, 105, 136, 138, 161, 235, 244, 278, 315, 354, 359], "53": [7, 80, 82, 83, 93, 99, 124, 141, 147, 225, 228, 235, 273, 315, 340, 359, 362, 363], "54": [7, 77, 80, 83, 91, 182, 235, 239, 303, 315, 354, 359, 362, 363, 367], "55": [7, 26, 39, 80, 83, 91, 108, 138, 150, 235, 315, 354, 367, 374], "56": [7, 52, 76, 80, 83, 93, 108, 225, 235, 315, 337, 354, 359], "57": [7, 77, 80, 83, 85, 89, 102, 108, 138, 227, 315], "58": [7, 76, 80, 90, 91, 93, 146, 225, 235, 302, 303, 354], "59": [7, 77, 80, 83, 85, 193, 225, 359], "60": [7, 11, 26, 62, 77, 80, 83, 89, 90, 92, 101, 134, 141, 151, 182, 193, 235, 239, 293, 303, 315, 346, 348, 350, 369], "61": [7, 26, 80, 83, 85, 101, 108, 138, 141, 183, 193, 285, 300, 301, 303, 305, 315, 324, 340, 359, 363], "62": [7, 80, 83, 108, 141, 193, 235, 302, 354], "63": [7, 26, 80, 83, 90, 138, 276, 289, 305, 315, 363], "64": [7, 10, 26, 68, 76, 77, 80, 83, 85, 90, 92, 96, 138, 186, 225, 289, 307, 315, 324, 354], "65": [7, 26, 76, 80, 83, 87, 102, 141, 187, 278, 350], "66": [7, 26, 76, 80, 83, 90, 93, 108, 141, 174, 193, 235, 239, 303, 362], "67": [7, 73, 80, 83, 138, 141, 185, 193, 216, 359], "68": [7, 22, 80, 83, 87, 130, 141, 187, 359], "69": [7, 76, 80, 83, 85, 108, 141, 146, 289, 359], "70": [7, 12, 26, 77, 80, 83, 90, 97, 138, 165, 193, 235, 278, 302, 303, 315, 348, 354], "71": [7, 80, 83, 85, 91, 116, 193, 232, 315], "72": [7, 80, 85, 90, 138, 141, 182, 225, 235, 239, 242, 311, 315, 336, 350, 369], "73": [7, 10, 77, 80, 83, 85, 141, 185, 225, 363, 369], "74": [7, 80, 159, 302, 305], "75": [7, 80, 83, 97, 102, 141, 159, 235, 280, 289, 303, 315, 346, 350, 363], "76": [7, 26, 80, 83, 138, 141, 172, 189, 225, 239, 315], "77": [7, 84, 141, 193, 235, 324, 359], "78": [7, 52, 80, 83, 90, 92, 93, 141, 188, 244], "79": [7, 76, 80, 83, 92, 93, 186, 306], "80": [7, 39, 80, 83, 90, 93, 193, 310], "81": [7, 10, 26, 77, 80, 83, 108, 296, 302, 311, 315, 354, 372], "82": [7, 90, 354], "83": [7, 80, 83, 85, 102, 124, 141, 232, 315, 362, 369], "84": [7, 19, 59, 93, 188, 225, 235, 315, 354], "85": [7, 76, 77, 80, 83, 97, 216, 238, 303, 315, 350], "86": [7, 80, 83, 187, 235], "87": [7, 85, 188, 235, 276, 313], "88": [7, 83, 84, 90, 141, 172, 315, 363, 367], "89": [7, 26, 80, 83, 85, 241, 303, 311, 315, 354, 359, 367, 374], "90": [7, 23, 26, 80, 83, 92, 108, 186, 235, 293, 306, 310, 315, 346, 369], "91": [7, 26, 77, 80, 83, 92, 94, 315, 337], "92": [7, 8, 11, 26, 80, 94, 108, 131, 138, 315], "93": [7, 80, 83, 188], "94": [7, 193, 235, 241, 273, 315], "95": [7, 90, 92, 93], "96": [7, 55, 80, 83, 85, 90, 93, 108, 218, 307, 323, 359, 369, 373], "97": [7, 80, 83, 85, 89, 315, 359, 373], "98": [7, 80, 83, 93, 131, 193, 359], "99": [7, 80, 83, 85, 235, 241, 276, 315, 354, 359], "100": [7, 9, 23, 26, 76, 80, 83, 90, 91, 93, 101, 109, 120, 138, 160, 187, 192, 193, 229, 235, 236, 238, 303, 315, 339, 348, 354, 356, 359, 362, 363, 366, 369, 370], "singl": [7, 9, 11, 13, 23, 33, 46, 48, 54, 56, 57, 59, 73, 91, 98, 99, 102, 108, 113, 119, 124, 129, 133, 134, 139, 146, 160, 172, 182, 187, 212, 215, 216, 225, 236, 238, 242, 275, 276, 277, 289, 292, 293, 302, 314, 332, 346, 348, 354, 363], "baxter_permut": 8, "baxterpermut": 8, "avoid": [8, 11, 26, 58, 71, 101, 108, 130, 136, 172, 173, 186, 187, 215, 241, 264, 314, 346, 354], "sigma": [8, 11, 25, 33, 36, 56, 73, 99, 101, 102, 110, 133, 145, 146, 172, 227, 266, 277, 297, 303, 310, 315, 323, 343, 346, 359, 362, 369], "u_1u_2u_3u_4": 8, "u_2": [8, 10, 17, 110, 225, 276], "u_3": [8, 10, 97], "neither": [8, 19, 101, 108, 116, 154, 172, 180, 182, 221, 242, 314], "2413": 8, "nor": [8, 11, 19, 54, 101, 108, 116, 130, 146, 154, 160, 172, 180, 182, 221, 242, 313, 314], "3142": [8, 346, 364], "gir2012": 8, "studi": [8, 48, 114, 116, 130, 145, 147, 150, 155, 186, 187, 216, 276, 302, 303, 349, 354, 356, 359, 362], "nonneg": [8, 17, 26, 30, 32, 37, 57, 60, 74, 83, 101, 119, 122, 123, 124, 128, 129, 131, 141, 144, 145, 146, 156, 160, 167, 168, 172, 174, 186, 188, 189, 192, 193, 196, 216, 227, 235, 242, 243, 244, 270, 273, 275, 276, 278, 280, 284, 285, 288, 294, 300, 301, 302, 303, 305, 308, 313, 314, 315, 343, 346, 349, 350, 372, 374], "baxterpermutations_al": 8, "disjointunionenumeratedset": [8, 11, 32, 47, 103, 124, 128, 130, 156, 158, 174, 190, 275, 341, 346, 348, 354], "to_pair_of_twin_binary_tre": 8, "_n": [8, 19, 26, 55, 145, 146, 172, 188, 212, 227, 232, 285, 300, 301, 303, 305], "twin": 8, "t_l": 8, "t_r": 8, "resp": [8, 11, 34, 46, 58, 112, 127, 158, 172, 183, 187, 232, 242, 244, 268, 271, 316, 359], "symbol": [8, 10, 19, 22, 23, 61, 78, 82, 91, 92, 99, 101, 108, 109, 110, 111, 120, 138, 139, 154, 160, 168, 171, 172, 187, 188, 193, 197, 228, 236, 238, 242, 244, 245, 259, 278, 279, 284, 285, 288, 294, 297, 300, 301, 303, 312, 333, 344, 354, 359, 365, 369, 374], "terminologi": [8, 26, 82, 83, 130, 138, 278], "conflict": 8, "bp": 8, "need": [8, 10, 11, 17, 19, 21, 22, 23, 25, 26, 27, 28, 29, 30, 34, 36, 46, 56, 58, 59, 60, 62, 68, 72, 76, 77, 80, 82, 83, 88, 89, 90, 92, 94, 96, 97, 98, 99, 100, 101, 102, 108, 109, 112, 114, 115, 120, 122, 124, 127, 129, 130, 131, 136, 137, 138, 141, 147, 152, 154, 156, 158, 159, 160, 161, 164, 168, 169, 171, 172, 174, 180, 182, 186, 187, 188, 189, 190, 192, 193, 194, 196, 197, 211, 212, 214, 215, 225, 226, 227, 228, 230, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 278, 279, 285, 288, 290, 294, 297, 300, 301, 302, 303, 307, 311, 312, 313, 314, 326, 336, 337, 339, 340, 343, 344, 346, 347, 348, 350, 352, 353, 354, 358, 359, 362, 365, 373], "baxterpermutations_s": 8, "dfrac": 8, "binom": [8, 11, 17, 26, 31, 77, 95, 97, 101, 121, 130, 152, 160, 172, 174, 188, 211, 225, 278, 285, 288, 294, 308, 315, 346, 348, 354, 364], "oei": [8, 11, 35, 124, 130, 172, 187, 190, 235, 275, 280, 315, 354, 363], "a001181": [8, 11], "422": [8, 11, 80], "2074": 8, "10754": 8, "58202": 8, "326240": 8, "1882960": 8, "11140560": 8, "3r": 8, "alexand": [9, 105, 315], "grosz": 9, "tobia": 9, "kietreib": 9, "stephan": [9, 108, 374], "pfanner": 9, "martin": [9, 27, 120, 127, 171, 278, 309, 323, 332], "rubei": [9, 23, 27, 120, 171, 278, 323, 332], "2020": [9, 12, 28, 50, 68, 87, 107, 114, 154, 157, 170, 177, 179, 276, 359], "2022": [9, 78, 98, 133, 172, 310, 313, 314, 345, 355], "set_statist": 9, "declar": [9, 112, 114, 139, 232], "statist": [9, 11, 50, 51, 54, 90, 101, 108, 131, 141, 160, 164, 215, 216, 227, 297, 310, 354, 359], "preserv": [9, 17, 30, 54, 97, 108, 122, 145, 149, 151, 156, 187, 244, 271, 275, 278, 303, 310, 343, 350, 359, 362], "set_value_restrict": 9, "set_constant_block": 9, "constant": [9, 26, 30, 58, 59, 101, 102, 108, 124, 138, 140, 154, 160, 172, 191, 193, 234, 238, 282, 290, 296, 303, 312, 374], "set_distribut": 9, "set_intertwining_rel": 9, "intertwin": [9, 17, 110, 215, 234, 236, 278, 297], "set_quadratic_rel": 9, "certain": [9, 11, 19, 22, 23, 26, 48, 51, 71, 98, 99, 101, 112, 114, 120, 124, 125, 127, 129, 131, 141, 174, 187, 216, 232, 237, 273, 280, 302, 303, 308, 310, 314, 323, 336, 343, 346, 350, 354, 364], "set_homomes": 9, "homomes": 9, "statistics_t": 9, "collect": [9, 26, 30, 51, 76, 78, 80, 82, 83, 88, 89, 91, 95, 98, 99, 101, 102, 108, 109, 115, 120, 134, 141, 144, 172, 186, 187, 191, 193, 238, 239, 242, 276, 315], "statistics_fib": 9, "constant_block": 9, "solutions_iter": [9, 136], "solut": [9, 10, 26, 83, 94, 100, 124, 127, 134, 136, 137, 172, 276, 302, 315, 350, 354, 369], "possible_valu": 9, "minimal_subdistributions_iter": 9, "minim": [9, 11, 24, 25, 37, 46, 59, 61, 80, 89, 108, 109, 120, 130, 160, 172, 180, 182, 183, 186, 187, 192, 193, 227, 239, 276, 278, 280, 337, 346, 348, 350, 354, 359, 362, 369, 374], "subdistribut": 9, "minimal_subdistributions_blocks_iter": 9, "wex": 9, "exced": [9, 101, 146, 278, 303], "point": [9, 10, 19, 23, 25, 26, 27, 33, 37, 59, 68, 73, 76, 77, 79, 80, 81, 82, 86, 87, 88, 89, 91, 92, 94, 95, 96, 97, 101, 103, 107, 108, 109, 110, 114, 115, 121, 123, 124, 139, 141, 146, 154, 158, 159, 160, 168, 171, 172, 173, 182, 187, 190, 198, 227, 231, 232, 234, 238, 239, 240, 244, 249, 266, 276, 278, 280, 302, 303, 312, 315, 317, 323, 338, 340, 343, 346, 350, 359, 362, 363, 365, 369], "after": [9, 10, 11, 19, 22, 29, 33, 72, 89, 91, 101, 108, 109, 112, 131, 136, 140, 141, 143, 145, 146, 154, 159, 160, 162, 172, 180, 182, 186, 187, 192, 193, 227, 232, 234, 236, 238, 266, 271, 273, 280, 303, 310, 314, 338, 340, 346, 354, 356, 359, 363, 368], "append": [9, 82, 83, 91, 108, 115, 120, 124, 172, 173, 193, 276, 336, 346, 350, 365, 369], "adj": 9, "lli": 9, "longest": [9, 24, 25, 51, 69, 101, 110, 114, 124, 130, 133, 160, 172, 180, 182, 187, 196, 227, 238, 243, 277, 354, 356, 359, 365, 367], "subsequ": [9, 30, 71, 83, 101, 109, 172, 186, 193, 265, 272, 315, 347, 348, 359], "let": [9, 10, 11, 16, 17, 19, 24, 25, 26, 30, 38, 39, 42, 46, 48, 51, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 65, 68, 74, 76, 77, 80, 82, 83, 85, 88, 89, 91, 92, 93, 99, 101, 102, 104, 108, 110, 112, 114, 115, 116, 119, 120, 121, 122, 124, 127, 138, 141, 143, 144, 145, 146, 147, 151, 154, 158, 160, 162, 163, 164, 166, 172, 180, 181, 182, 183, 185, 186, 187, 188, 189, 192, 193, 212, 215, 216, 219, 225, 227, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 244, 271, 273, 274, 275, 276, 278, 280, 284, 285, 287, 296, 297, 300, 301, 302, 303, 305, 308, 314, 315, 316, 323, 340, 343, 346, 348, 350, 352, 354, 359, 360, 362, 364, 369], "rot": 9, "conjug": [9, 27, 30, 33, 120, 122, 127, 130, 139, 144, 145, 146, 147, 160, 162, 164, 187, 188, 232, 239, 241, 242, 273, 274, 276, 278, 284, 285, 288, 291, 293, 296, 300, 301, 302, 303, 313, 314, 342, 346, 348, 359, 362, 366], "long": [9, 10, 11, 17, 19, 22, 33, 37, 39, 49, 51, 54, 59, 60, 62, 63, 64, 67, 76, 80, 85, 87, 90, 92, 93, 99, 114, 122, 138, 144, 145, 146, 186, 187, 200, 211, 215, 216, 217, 222, 223, 225, 234, 235, 236, 238, 239, 241, 242, 274, 276, 283, 284, 286, 289, 303, 305, 311, 341, 343, 346, 350, 354, 362, 363, 369, 371, 374], "known": [9, 11, 12, 16, 17, 23, 25, 29, 53, 59, 62, 65, 72, 79, 97, 101, 110, 114, 115, 116, 120, 130, 133, 138, 139, 145, 146, 147, 160, 162, 172, 184, 186, 187, 188, 216, 225, 229, 232, 276, 278, 280, 284, 285, 288, 293, 300, 301, 302, 303, 305, 312, 315, 337, 342, 343, 347, 348, 354, 356, 359, 362, 363, 369, 374], "exist": [9, 11, 17, 19, 23, 26, 36, 51, 56, 57, 59, 60, 61, 65, 71, 72, 76, 77, 80, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 108, 114, 124, 127, 130, 134, 138, 146, 157, 160, 162, 164, 172, 180, 182, 186, 187, 192, 196, 197, 215, 216, 221, 227, 235, 242, 266, 276, 278, 284, 296, 302, 303, 310, 313, 314, 315, 343, 345, 346, 347, 348, 354, 359, 362, 367, 369], "equidistribut": [9, 108, 172], "addition": [9, 19, 57, 65, 83, 92, 98, 108, 110, 120, 130, 141, 186, 192, 193, 226, 227, 276], "invari": [9, 25, 97, 120, 124, 129, 130, 134, 151, 172, 187, 225, 235, 239, 273, 310], "contradict": [9, 109, 124, 145], "sim": [9, 77, 80, 354], "pi": [9, 17, 25, 26, 29, 42, 59, 99, 101, 102, 108, 110, 120, 122, 133, 145, 146, 156, 168, 172, 183, 187, 225, 229, 232, 233, 238, 239, 241, 242, 255, 278, 297, 308, 315, 319, 340, 346, 354, 369], "def": [9, 11, 19, 26, 29, 30, 53, 54, 55, 70, 83, 94, 101, 108, 120, 124, 140, 144, 145, 146, 147, 157, 158, 160, 163, 172, 176, 187, 190, 193, 215, 225, 234, 236, 238, 241, 273, 302, 303, 306, 310, 326, 337, 338, 343, 346, 354, 360, 369, 373], "alpha1": 9, "weak_exced": [9, 101, 172], "alpha2": 9, "fixed_point": [9, 139, 172, 190, 359, 360, 362, 363, 366], "beta1": [9, 139], "final_desc": [9, 30, 172, 359], "els": [9, 11, 30, 71, 79, 83, 91, 99, 100, 108, 115, 120, 124, 136, 141, 145, 146, 163, 211, 227, 229, 234, 235, 238, 266, 278, 303, 315, 336, 343, 346, 350, 351, 354, 360, 366, 368, 369], "beta2": [9, 139], "zip": [9, 82, 94, 180, 187, 192], "tau": [9, 25, 99, 146, 164, 183, 232, 242, 310, 315, 362], "longest_increasing_subsequence_length": [9, 101, 172], "rotate_permut": 9, "bij": [9, 199, 205, 207, 209], "header_row": 9, "frame": [9, 62, 238, 350, 363], "\u03b1_1": 9, "\u03b1_2": 9, "\u03b1_3": 9, "\u03c4": 9, "\u03b2_1": 9, "\u03b2_2": 9, "\u03b2_3": 9, "cyclic_sieving_phenomenon": [9, 70], "orbit_decomposit": [9, 70], "strahler": 9, "setpartit": [9, 27, 99, 149, 150, 151, 161, 171, 180, 182, 186, 187, 278, 354], "to_noncrossing_partit": [9, 101], "dyckword": [9, 11, 101, 124, 130, 154, 156, 158, 159, 167, 190], "theta": [9, 22, 149, 180, 182, 215, 235, 273, 303, 359], "findstat": [9, 29], "397": [9, 80], "max": [9, 11, 32, 57, 60, 68, 96, 122, 136, 139, 141, 160, 172, 182, 187, 193, 205, 215, 216, 227, 266, 276, 278, 280, 297, 303, 308, 314, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 331, 332, 334, 335, 346], "dyck_word": [9, 101, 124, 130, 160, 354, 363], "binary_tre": [9, 11, 130], "concat_path": 9, "d1": [9, 73, 83, 98, 99], "d2": [9, 53, 73, 83, 98, 99, 225, 227, 253], "concat_tre": 9, "b1": [9, 11, 52, 57, 69, 80, 139, 248, 250, 273], "b2": [9, 11, 54, 57, 60, 69, 139, 172, 182, 187, 225, 226, 227, 229, 231, 236, 239, 240, 241, 250, 268, 273, 274, 362], "to_binary_tre": [9, 11, 101, 158, 190], "semilength": [9, 101], "suitabl": [9, 108, 138, 146, 182, 193, 225, 232, 264, 350, 362, 369], "findmap": 9, "internet": [9, 76, 79, 81, 86, 97, 124, 138, 190, 235, 354, 363], "mp00034": 9, "qualiti": 9, "mp00061omp00023": 9, "mp00018omp00140": 9, "alpha_beta": 9, "pi_rho": 9, "phi_psi": 9, "elements_distribut": 9, "value_restrict": 9, "sageobject": [9, 10, 19, 22, 23, 26, 79, 102, 108, 120, 132, 169, 217, 225, 227, 230, 234, 244, 266, 268, 307, 311, 315, 332, 350, 352, 356, 362, 363, 365, 373], "toolbox": [9, 354], "variou": [9, 11, 19, 21, 22, 29, 52, 96, 99, 102, 108, 120, 127, 131, 134, 156, 160, 163, 166, 172, 182, 187, 227, 236, 238, 241, 244, 273, 298, 302, 304, 305, 313, 336, 346, 348, 366], "beta": [9, 10, 25, 30, 39, 91, 139, 143, 145, 158, 160, 164, 181, 215, 232, 240, 242, 244, 303, 312, 347, 356, 359, 362, 369], "tripl": [9, 11, 23, 59, 70, 76, 77, 81, 83, 88, 89, 94, 97, 99, 108, 115, 120, 130, 139, 180, 192, 225, 240, 311, 348, 362], "rho": [9, 39, 54, 59, 83, 99, 116, 120, 145, 146, 149, 151, 187, 234, 235, 236, 238, 242, 243, 255, 257, 271, 273, 274, 278, 300, 302, 303, 316, 344, 369], "ari": [9, 71, 354], "oper": [9, 11, 17, 19, 22, 24, 36, 37, 39, 46, 49, 50, 51, 55, 56, 58, 59, 60, 61, 62, 67, 68, 69, 72, 83, 86, 96, 101, 109, 110, 111, 113, 114, 120, 123, 125, 130, 133, 139, 140, 141, 144, 145, 146, 147, 149, 151, 160, 162, 163, 164, 168, 169, 170, 172, 180, 182, 183, 187, 192, 193, 212, 213, 215, 216, 221, 234, 236, 239, 240, 241, 242, 267, 269, 273, 276, 277, 285, 286, 288, 290, 293, 294, 296, 297, 300, 301, 302, 303, 305, 307, 313, 332, 343, 346, 348, 352, 356, 359, 362, 373], "compos": [9, 11, 99, 108, 138, 172, 173, 225, 273, 276, 296, 345, 354, 356, 359, 362], "ta": [9, 156, 359], "tz": 9, "backend": [9, 124, 125, 180, 222, 238, 240], "solv": [9, 76, 83, 89, 91, 92, 96, 100, 121, 124, 127, 134, 136, 137, 139, 187, 285, 300, 301, 303, 305, 350, 354, 362, 363], "arbitrari": [9, 68, 90, 98, 101, 102, 108, 114, 120, 122, 130, 156, 157, 160, 164, 172, 182, 188, 226, 231, 241, 274, 276, 288, 290, 302, 346, 348, 350, 362, 363], "think": [9, 12, 46, 101, 119, 160, 225, 242, 346, 352], "look": [9, 11, 16, 19, 21, 23, 77, 83, 90, 93, 98, 99, 102, 108, 109, 138, 146, 160, 163, 172, 175, 187, 227, 238, 239, 242, 265, 267, 269, 274, 276, 346, 348, 354, 365], "circ": [9, 24, 46, 56, 65, 77, 99, 110, 133, 145, 151, 156, 172, 212, 215, 219, 234, 236, 271, 277, 300, 303, 310, 323, 362, 369], "a_1": [9, 19, 26, 56, 73, 91, 101, 108, 129, 138, 146, 151, 159, 160, 163, 172, 182, 187, 225, 227, 236, 246, 268, 273, 276, 278, 314, 345, 346, 348, 350], "a_k": [9, 34, 73, 131, 145, 160, 161, 182, 187, 278, 314, 315, 346, 348, 359, 369], "z_a": 9, "subseteq": [9, 62, 74, 89, 92, 96, 116, 131, 139, 146, 150, 151, 182, 187, 278, 337, 362], "tild": [9, 56, 114, 132, 211, 232, 233, 242, 293, 359], "coincid": [9, 108, 114, 120, 146, 162, 193, 227, 234, 236, 241, 272, 346, 362], "although": [9, 53, 89, 91, 97, 108, 120, 138, 145, 146, 225, 255, 276, 302, 347, 354], "exclud": [9, 101, 158, 180, 182, 187, 303, 315, 354], "choic": [9, 30, 60, 99, 102, 108, 110, 122, 131, 133, 141, 160, 172, 174, 186, 187, 227, 232, 236, 238, 277, 343, 346, 354, 359, 362], "probabl": [9, 11, 29, 30, 89, 98, 101, 108, 139, 141, 154, 156, 157, 159, 160, 164, 186, 187, 238, 241, 285, 300, 301, 303, 305, 313, 346], "add": [9, 19, 29, 32, 51, 72, 80, 83, 91, 92, 104, 108, 109, 118, 119, 131, 134, 136, 139, 158, 160, 164, 172, 180, 182, 187, 191, 192, 215, 227, 229, 230, 234, 236, 238, 239, 241, 242, 244, 266, 271, 273, 275, 276, 278, 303, 307, 308, 313, 319, 322, 329, 335, 346, 354, 356, 359, 360, 366], "summari": [9, 165], "begin": [9, 19, 26, 38, 39, 48, 51, 55, 57, 59, 60, 61, 62, 64, 65, 68, 69, 77, 83, 89, 99, 100, 101, 102, 108, 115, 116, 120, 121, 138, 139, 146, 147, 151, 157, 166, 172, 181, 188, 214, 216, 225, 227, 229, 231, 232, 266, 278, 302, 315, 316, 343, 345, 354, 359, 362, 365, 369, 373], "rrl": 9, "scriptstyl": [9, 108], "swarrow": 9, "downarrow": [9, 140, 151, 160, 180, 278], "searrow": 9, "overset": 9, "leftarrow": [9, 59, 130, 276, 293], "rightarrow": [9, 39, 130, 139, 225, 241, 293, 302, 337, 359, 360, 362, 369], "qquad": [9, 17, 26, 42, 51, 110, 277, 284, 285, 288, 300, 301, 303, 316], "lcl": 9, "necessarili": [9, 10, 17, 25, 54, 72, 83, 91, 108, 124, 145, 174, 180, 186, 188, 218, 238, 242, 264, 302, 303, 336, 337, 339, 354, 359], "consist": [9, 11, 12, 16, 19, 22, 23, 25, 26, 27, 30, 46, 62, 68, 72, 79, 80, 85, 92, 95, 97, 98, 99, 101, 102, 108, 109, 114, 115, 120, 130, 131, 134, 139, 146, 154, 156, 157, 158, 159, 160, 161, 163, 167, 168, 169, 172, 174, 180, 182, 186, 187, 191, 193, 211, 225, 226, 227, 233, 236, 238, 242, 244, 273, 275, 276, 278, 307, 310, 311, 313, 314, 336, 340, 342, 343, 346, 350, 354, 355, 359, 362, 363, 365, 369, 373], "singleton": [9, 25, 99, 119, 140, 163, 172, 278, 318, 324, 329, 330, 332, 333, 346], "invoc": 9, "irrelev": [9, 271, 272, 354], "second": [9, 10, 11, 17, 26, 27, 34, 39, 53, 54, 76, 80, 83, 89, 90, 92, 99, 108, 114, 119, 120, 129, 136, 138, 145, 146, 150, 157, 159, 160, 171, 172, 182, 187, 188, 189, 193, 197, 215, 225, 240, 266, 276, 278, 280, 289, 302, 303, 314, 315, 336, 346, 348, 350, 354, 362], "overrid": [9, 39, 59, 109, 112, 124, 130, 156, 172, 187, 221, 227, 230, 234, 272, 275, 302, 359], "previou": [9, 26, 30, 39, 72, 91, 107, 108, 109, 114, 123, 124, 139, 187, 197, 212, 227, 236, 238, 286, 354, 372], "optim": [9, 10, 16, 26, 89, 107, 112, 120, 123, 160, 180, 236, 241, 340, 354], "coarsest": [9, 30, 278, 280], "computation": 9, "expens": [9, 163, 273, 286, 289, 354], "speed": [9, 76, 77, 83, 84, 88, 89, 90, 91, 92, 94, 108, 132, 138, 160, 165, 173, 187, 231, 239, 302, 305], "togeth": [9, 22, 29, 30, 42, 51, 56, 61, 70, 77, 83, 96, 120, 131, 134, 141, 158, 160, 180, 182, 216, 235, 236, 238, 242, 280, 311, 314, 345, 346, 354, 365], "submultiset": [9, 336], "support": [9, 11, 12, 22, 26, 65, 71, 83, 98, 99, 101, 108, 109, 120, 122, 124, 125, 134, 147, 157, 159, 161, 162, 163, 164, 168, 192, 193, 211, 221, 227, 236, 237, 241, 244, 276, 288, 294, 300, 301, 302, 303, 326, 343, 347, 352, 366, 372], "below": [9, 11, 13, 16, 17, 19, 26, 29, 30, 46, 85, 89, 98, 100, 101, 108, 120, 123, 124, 126, 127, 134, 137, 138, 139, 141, 147, 151, 154, 160, 163, 164, 172, 182, 184, 186, 187, 188, 193, 212, 227, 232, 236, 237, 238, 240, 244, 266, 276, 278, 293, 296, 297, 303, 313, 343, 346, 348, 354, 362, 365, 369, 371, 374], "sol": [9, 354], "number_of_touch_point": [9, 101, 130], "item": [9, 56, 112, 118, 134, 139, 144, 173, 187, 211, 238, 291, 326, 336, 350, 363, 365, 373], "overlap": [9, 17, 30, 109, 141, 146, 238, 306, 308, 313, 356, 359, 362], "fedor": 9, "petrov": 9, "http": [9, 22, 26, 29, 76, 77, 79, 80, 81, 86, 89, 91, 92, 101, 107, 108, 138, 143, 146, 159, 160, 165, 172, 173, 180, 187, 188, 197, 225, 273, 276, 278, 291, 302, 303, 310, 315, 323, 332, 344, 346, 354, 359, 362, 369], "mathoverflow": [9, 278, 303], "net": [9, 76, 278, 302, 303], "424187": 9, "str": [9, 19, 22, 26, 48, 52, 55, 56, 59, 60, 83, 90, 99, 108, 134, 138, 141, 154, 187, 234, 235, 236, 237, 242, 244, 273, 280, 309, 332, 336, 353, 362, 363, 366, 368, 369], "a1": [9, 19, 49, 108, 225, 227, 231, 235, 239, 246, 255, 268, 270, 273, 315, 362], "a2": [9, 19, 37, 48, 49, 60, 63, 64, 67, 76, 99, 108, 114, 132, 187, 191, 221, 225, 226, 227, 229, 231, 235, 236, 239, 240, 255, 268, 273, 315, 340, 362], "a3": [9, 54, 60, 64, 69, 76, 114, 132, 161, 225, 231, 232, 233, 234, 239, 240, 244, 245, 246, 255, 271, 273, 315], "a4": [9, 76, 99, 225, 227, 228, 231, 242, 246, 255, 267, 269, 270, 315, 346], "a5": [9, 225, 315], "a6": [9, 225], "a7": [9, 225], "a8": [9, 225], "b7": [9, 52, 114], "b8": 9, "But": [9, 29, 85, 91, 108, 146, 183, 225, 232, 234, 241, 303, 356, 359], "impos": [9, 123, 125, 130, 136, 197], "dictionari": [9, 17, 19, 22, 56, 86, 89, 101, 102, 108, 120, 130, 131, 134, 139, 141, 154, 158, 160, 162, 164, 172, 177, 180, 182, 186, 187, 191, 193, 217, 227, 229, 235, 239, 266, 270, 271, 273, 278, 284, 291, 294, 310, 336, 340, 347, 350, 359, 362, 363, 365, 371, 373], "interfer": 9, "milp": [9, 76, 89, 91, 92, 127, 136, 187], "overwritten": 9, "discov": [9, 166], "achiev": [9, 17, 34, 46, 92, 101, 108, 124, 127, 141, 187, 216, 227, 234, 236, 271, 285, 300, 301, 303, 305, 332, 343, 354], "omit": [9, 33, 60, 89, 99, 120, 160, 182, 225, 235, 314, 346], "review": [9, 109, 130], "abcd": [9, 108, 187, 278, 308, 359, 362, 363, 364, 369, 372], "now": [9, 17, 25, 26, 29, 39, 53, 54, 56, 68, 80, 83, 92, 98, 99, 108, 109, 110, 111, 112, 113, 120, 121, 123, 124, 131, 144, 145, 147, 156, 159, 160, 162, 164, 172, 187, 193, 205, 212, 225, 227, 228, 234, 236, 238, 241, 242, 272, 274, 276, 302, 303, 310, 314, 343, 346, 354, 359], "p1": [9, 11, 16, 33, 127, 172, 174, 184, 186, 187, 251, 253, 255, 257, 277, 289, 293, 303, 343], "p2": [9, 11, 16, 33, 77, 99, 108, 127, 160, 172, 174, 184, 186, 187, 251, 253, 255, 257, 277, 289, 293, 322, 323, 332, 343], "abcdefgh": 9, "s1": [9, 25, 37, 39, 59, 83, 108, 131, 132, 193, 232, 233, 235, 273, 274, 339, 343, 354, 359], "s2": [9, 19, 25, 37, 39, 59, 83, 89, 108, 131, 132, 193, 232, 233, 235, 273, 274, 299, 315, 336, 339, 343, 359], "assign": [9, 11, 26, 89, 96, 101, 102, 108, 112, 115, 120, 131, 147, 154, 191, 235, 240, 332, 359, 363], "request": [9, 76, 93, 187, 193, 242, 315], "error": [9, 19, 26, 83, 91, 99, 101, 107, 108, 115, 124, 131, 138, 141, 146, 147, 150, 154, 158, 160, 171, 172, 180, 182, 187, 191, 227, 229, 241, 242, 296, 302, 345, 346, 348, 359, 361, 363, 366, 368, 369], "stopiter": [9, 108, 139, 171, 278, 350, 354, 359], "disjoint": [9, 25, 26, 80, 89, 91, 99, 108, 110, 112, 119, 120, 124, 136, 139, 141, 161, 172, 180, 187, 242, 275, 278, 280, 308, 354, 359, 362], "x_": [9, 17, 26, 56, 59, 112, 119, 146, 150, 151, 163, 181, 182, 183, 187, 215, 277, 303, 305, 345, 359], "equat": [9, 99, 109, 114, 120, 121, 145, 146, 150, 163, 172, 193, 236, 242, 271, 289, 292, 293, 303, 305, 332, 354, 359, 374], "possibli": [9, 11, 26, 36, 58, 80, 101, 103, 108, 109, 120, 124, 131, 138, 141, 145, 156, 172, 215, 221, 227, 237, 273, 276, 307, 314, 336, 342, 343, 346, 352, 372], "assert": [9, 25, 48, 80, 83, 89, 91, 92, 93, 116, 127, 138, 139, 160, 176, 215, 227, 234, 236, 241, 264, 278, 339], "averag": [9, 362], "domain": [9, 29, 33, 53, 102, 144, 171, 234, 236, 273, 274, 302, 303, 312, 343, 346, 348, 354, 359, 362, 363, 366, 372], "impli": [9, 10, 26, 32, 83, 98, 99, 108, 116, 130, 150, 168, 182, 242, 303, 346, 354, 362], "immedi": [9, 30, 51, 91, 108, 109, 120, 160, 242, 354], "formul": [9, 10, 131, 182], "z_1": [9, 116, 133, 145], "z_k": 9, "suppos": [9, 11, 26, 30, 37, 63, 87, 108, 120, 125, 143, 160, 172, 183, 187, 199, 212, 225, 234, 266, 276, 302, 313, 315, 343, 346, 348], "a_i": [9, 51, 56, 61, 68, 73, 83, 91, 99, 101, 138, 140, 160, 163, 182, 212, 227, 242, 276, 278, 309, 346, 348, 350, 359], "p_i": [9, 17, 92, 108, 160, 186, 187, 211, 215, 216, 300, 303, 323, 359], "implic": [9, 182, 186, 306], "p_1": [9, 17, 76, 88, 92, 96, 127, 172, 186, 187, 276, 280, 285, 288, 294, 300, 301, 303, 313, 359, 373], "p_k": [9, 17, 96, 161, 186, 187, 273, 280, 284, 285, 288, 300, 301, 303, 359, 373], "geq": [9, 11, 17, 19, 26, 32, 56, 59, 62, 68, 72, 80, 91, 92, 96, 99, 110, 116, 121, 122, 130, 145, 146, 159, 160, 162, 163, 164, 172, 182, 185, 187, 188, 193, 211, 235, 277, 280, 303, 310, 315, 323, 343, 346, 349, 359, 369], "z_i": [9, 146], "concat": 9, "interest": [9, 11, 90, 103, 108, 109, 123, 147, 159, 172, 186, 241, 273, 354, 359, 362], "number_of_fixed_point": [9, 101, 172], "fewer": [9, 30], "forc": [9, 19, 29, 112, 160, 182, 187], "in_domain": 9, "skew_concat": 9, "psi": [9, 53, 61, 65, 110, 144, 145, 146, 147, 172, 200, 278, 285, 300, 301, 303, 305], "phi": [9, 17, 36, 37, 38, 39, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 65, 66, 67, 69, 101, 108, 112, 141, 145, 146, 147, 152, 162, 163, 172, 182, 212, 215, 234, 235, 236, 242, 244, 302, 315, 340, 343, 359, 362], "number_of_initial_ris": [9, 101, 130], "set_semi_conjugaci": 9, "exceed": [9, 160], "abl": [9, 90, 91, 120, 138, 172, 173, 176, 235, 239, 303, 348, 354], "better": [9, 26, 39, 59, 79, 98, 123, 160, 172, 227, 237, 238, 247, 274, 285, 303, 354], "occur": [9, 37, 51, 64, 76, 91, 108, 109, 115, 116, 124, 139, 141, 146, 160, 172, 186, 187, 193, 236, 239, 273, 276, 278, 280, 303, 310, 332, 339, 356, 359, 365], "legal": [9, 51, 134, 158], "Then": [9, 10, 11, 17, 25, 30, 46, 51, 54, 60, 61, 63, 68, 83, 91, 92, 101, 108, 110, 114, 120, 122, 124, 130, 144, 145, 146, 147, 155, 156, 159, 160, 163, 172, 187, 188, 191, 192, 193, 212, 215, 227, 232, 235, 239, 242, 266, 271, 272, 275, 278, 280, 285, 297, 300, 301, 303, 305, 307, 308, 314, 315, 316, 323, 345, 346, 349, 354, 359, 362, 369], "therefor": [9, 54, 57, 58, 65, 108, 109, 114, 120, 124, 145, 146, 156, 160, 164, 193, 212, 218, 227, 232, 233, 235, 238, 242, 244, 264, 272, 275, 294, 302, 305, 313, 348, 354, 359], "previous": [9, 19, 22, 72, 108, 169, 182, 187], "m_w": 9, "n_w": [9, 138], "ariti": [9, 71], "precis": [9, 11, 22, 26, 48, 54, 59, 99, 101, 108, 116, 118, 120, 123, 131, 139, 145, 146, 147, 153, 156, 159, 160, 172, 174, 187, 228, 233, 236, 273, 276, 277, 278, 285, 288, 294, 300, 301, 303, 305, 308, 337, 343, 346, 347, 354, 359, 362, 363, 374], "sum_z": 9, "sum_p": [9, 17], "a_r": [9, 151, 163, 225], "d_z": 9, "r_p": [9, 181], "cap": [9, 77, 80, 83, 85, 89, 96, 97, 99, 182], "rel": [9, 26, 30, 59, 83, 114, 138, 172, 182, 183, 186, 187, 224, 232, 278, 306, 315, 338, 343, 359, 369], "abc": [9, 30, 89, 108, 113, 139, 187, 190, 191, 308, 315, 339, 356, 358, 359, 362, 363, 365, 366, 369], "glpk": [9, 89, 136], "maxima": [9, 26, 172], "conjugaci": [9, 33, 160, 172, 239, 302, 310, 362], "conjugacy_class": [9, 172, 239], "re": [9, 11, 99, 107, 108, 120, 122, 145, 146, 182, 187, 197, 211, 241, 303, 323, 347, 348, 359], "paramet": [9, 12, 22, 25, 30, 56, 71, 76, 77, 79, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 97, 99, 101, 108, 109, 112, 120, 127, 130, 131, 138, 139, 146, 151, 154, 155, 158, 159, 160, 164, 174, 182, 186, 187, 188, 193, 225, 232, 234, 235, 236, 241, 242, 245, 276, 284, 286, 287, 289, 291, 292, 293, 300, 302, 303, 307, 314, 326, 336, 343, 346, 347, 349, 352, 355, 359, 362, 369, 371, 372], "clear": [9, 30, 92, 95, 101, 145, 146, 160, 227, 276, 289, 303, 314, 346], "cach": [9, 10, 56, 58, 76, 96, 108, 112, 123, 132, 136, 180, 188, 227, 231, 238, 239, 242, 271, 274, 302, 305, 315, 326, 344, 366, 370], "set_verbos": 9, "x_0": [9, 26, 136, 187, 225], "x_1": [9, 17, 19, 26, 63, 73, 83, 91, 93, 110, 136, 138, 146, 147, 151, 160, 163, 182, 183, 187, 225, 239, 275, 277, 285, 288, 294, 300, 301, 303, 345, 359, 365, 369], "x_2": [9, 17, 19, 63, 73, 110, 136, 138, 146, 147, 151, 160, 163, 182, 183, 187, 225, 275, 277, 285, 288, 294, 300, 301, 303, 345, 359], "x_3": [9, 17, 110, 136, 138, 146, 151, 163, 225, 285, 288, 294, 300, 301, 303], "x_4": [9, 138], "x_5": 9, "x_6": 9, "x_7": 9, "x_8": 9, "x_9": 9, "x_10": 9, "x_11": 9, "x_12": 9, "x_13": 9, "x_14": 9, "veto": 9, "preimag": [9, 91, 102, 130, 150, 333, 340], "impress": [9, 107], "ab": [9, 10, 22, 89, 92, 108, 109, 112, 119, 146, 160, 172, 187, 190, 303, 314, 339, 346, 356, 358, 359, 360, 362, 363, 364, 365, 366, 369, 372], "header": [9, 100], "greek": 9, "binaryrecurrencesequ": [10, 374], "fibonacci": [10, 26, 120, 186, 315, 354, 359, 362, 363, 367, 369, 374], "137": [10, 83, 85, 91, 101, 374], "137th": [10, 374], "term": [10, 11, 16, 17, 26, 37, 39, 46, 49, 55, 56, 59, 60, 62, 63, 83, 99, 101, 108, 110, 111, 112, 124, 127, 130, 131, 133, 139, 145, 146, 147, 150, 167, 168, 169, 172, 187, 193, 225, 229, 234, 235, 236, 240, 241, 243, 276, 277, 290, 293, 296, 302, 303, 305, 313, 315, 351, 354, 368, 369, 374], "19134702400093278081449423917": [10, 374], "period": [10, 61, 83, 101, 108, 154, 236, 238, 315, 356, 359, 360, 362, 369], "pthpower": 10, "fact": [10, 11, 17, 54, 79, 80, 99, 101, 108, 109, 112, 114, 120, 124, 130, 145, 146, 156, 160, 163, 172, 217, 225, 236, 237, 238, 241, 242, 243, 244, 264, 272, 273, 296, 302, 303, 305, 338, 343, 346, 348, 354, 356, 359], "bms06": 10, "luca": [10, 26, 51, 315, 356, 374], "148": [10, 90, 108, 138], "provabl": [10, 212, 218], "128": [10, 80, 108, 289, 315, 323, 354, 363], "256": [10, 83, 90, 91, 127, 235, 315, 336, 354], "512": [10, 315], "is_degener": [10, 193], "is_geometr": [10, 182], "degener": [10, 97, 120, 164, 193, 227, 238, 264, 348], "geometr": [10, 33, 134, 160, 182, 185, 186, 238, 306, 313, 354, 363], "quasigeometr": 10, "pth": 10, "isabel": 10, "vogt": 10, "sv2013": 10, "bms2006": 10, "ss1983": 10, "binary_recurrence_sequ": [10, 192, 193], "u0": 10, "u1": [10, 91, 139], "condit": [10, 19, 26, 30, 33, 42, 46, 51, 54, 60, 89, 91, 97, 101, 107, 109, 110, 111, 115, 120, 121, 122, 123, 124, 127, 129, 130, 131, 134, 138, 139, 141, 146, 160, 172, 174, 182, 197, 214, 215, 225, 237, 242, 271, 312, 346, 349, 350, 354], "u_0": [10, 359], "u_1": [10, 17, 91, 110, 186, 225, 276, 359, 365], "u_": [10, 17, 48, 57, 65, 67, 91, 110, 303, 359], "u_n": [10, 17, 110, 186, 369], "partial": [10, 11, 16, 17, 30, 56, 72, 96, 99, 101, 104, 105, 107, 112, 114, 120, 131, 134, 139, 160, 172, 174, 185, 186, 187, 193, 221, 227, 239, 273, 303, 315, 346, 350, 354, 356, 369], "0th": [10, 136], "lucas_number1": [10, 26], "lucas_number2": [10, 26], "With": [10, 26, 30, 60, 68, 72, 77, 88, 92, 101, 108, 111, 113, 119, 120, 124, 127, 141, 159, 162, 171, 172, 182, 187, 191, 227, 236, 242, 280, 289, 293, 300, 302, 307, 315, 343, 346, 350, 359, 362, 363, 374], "is_arithmet": 10, "arithmet": [10, 26, 182, 303, 354], "nondiagonaliz": 10, "bx": 10, "sai": [10, 11, 25, 30, 48, 54, 80, 83, 95, 98, 99, 101, 102, 107, 108, 115, 116, 124, 129, 138, 145, 150, 151, 153, 156, 160, 162, 164, 172, 187, 193, 215, 218, 227, 236, 238, 266, 273, 275, 276, 280, 302, 303, 310, 313, 346, 354, 359, 362, 365, 369], "nondegener": 10, "neq": [10, 25, 32, 38, 48, 60, 62, 63, 65, 73, 83, 91, 92, 94, 96, 104, 109, 114, 121, 139, 146, 160, 180, 182, 188, 212, 226, 231, 235, 278, 280, 285, 288, 294, 296, 300, 301, 303, 369], "uniti": [10, 25, 83, 110, 120, 146, 188, 239, 296, 300, 303, 347, 362], "concret": [10, 99, 145, 160, 227, 313], "degeneraci": 10, "singular": [10, 22, 97, 108, 182, 187, 188, 205, 215, 217, 272, 354, 362], "eigenvector": [10, 234, 236, 239, 241, 293, 303, 362], "wise": [10, 109, 139, 176, 192, 343], "scaler": 10, "th": [10, 11, 17, 19, 25, 26, 34, 37, 39, 50, 51, 54, 56, 59, 61, 66, 67, 68, 74, 83, 86, 91, 92, 99, 101, 104, 105, 109, 110, 111, 112, 113, 116, 119, 120, 122, 127, 131, 133, 136, 139, 144, 145, 146, 151, 153, 159, 160, 163, 164, 167, 168, 169, 170, 172, 174, 183, 186, 187, 191, 193, 212, 215, 217, 221, 225, 226, 231, 232, 233, 235, 236, 239, 241, 242, 245, 257, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 284, 285, 288, 296, 300, 301, 302, 303, 305, 307, 308, 311, 312, 313, 314, 315, 319, 323, 327, 329, 332, 333, 340, 343, 345, 346, 347, 348, 349, 350, 354, 355, 359, 364, 369, 372, 373, 374], "union": [10, 11, 17, 26, 30, 83, 89, 92, 99, 102, 108, 110, 112, 119, 124, 136, 141, 150, 158, 161, 171, 172, 187, 242, 275, 278, 280, 308, 350, 354, 358, 362], "again": [10, 11, 76, 91, 92, 101, 108, 109, 112, 124, 127, 145, 172, 183, 187, 193, 238, 240, 303, 347, 354, 363], "is_quasigeometr": 10, "ie": 10, "subcas": [10, 136, 276], "diagonaliz": 10, "mod": [10, 26, 56, 70, 76, 80, 83, 91, 92, 97, 108, 109, 115, 138, 139, 146, 164, 337, 354, 356, 359, 366, 369], "243": [10, 80, 315], "729": [10, 80, 293, 315], "2187": [10, 315], "6561": [10, 315], "n_1": [10, 83, 91, 92, 93, 138, 141, 172, 235, 312, 313], "congruent": [10, 11, 76, 80, 109, 138], "n_2": [10, 83, 91, 92, 93, 138, 141, 235, 313], "pm": [10, 25, 56, 58, 66, 83, 102, 131, 163, 212, 234], "lemma": [10, 56, 57, 65, 80, 88, 90, 91, 92, 93, 94, 99, 101, 107, 108, 120, 138, 144, 145, 160, 234, 310], "answer": [10, 21, 22, 30, 33, 82, 83, 85, 89, 91, 94, 127, 234, 242, 296, 315, 337, 354], "proveabl": 10, "ration": [10, 11, 16, 17, 19, 22, 26, 30, 47, 59, 74, 98, 99, 101, 108, 109, 110, 111, 112, 113, 116, 119, 127, 133, 144, 145, 146, 147, 149, 150, 151, 159, 160, 163, 172, 181, 182, 185, 187, 189, 221, 226, 234, 235, 236, 238, 239, 241, 242, 243, 244, 251, 259, 264, 271, 274, 284, 285, 286, 288, 289, 290, 292, 293, 294, 296, 299, 300, 301, 302, 303, 310, 319, 322, 323, 329, 330, 332, 335, 340, 343, 344, 352, 354, 359, 362, 374], "maximum": [10, 17, 32, 72, 76, 84, 89, 90, 96, 99, 101, 114, 116, 129, 139, 141, 144, 160, 172, 180, 182, 186, 187, 193, 217, 235, 276, 278, 280, 307, 314, 315, 337, 346, 356, 359, 363], "primarili": [10, 197, 314], "much": [10, 25, 80, 83, 85, 96, 97, 107, 108, 112, 124, 164, 172, 180, 187, 227, 239, 348, 354, 356, 359], "larger": [10, 19, 51, 53, 72, 83, 96, 108, 123, 160, 172, 173, 187, 215, 216, 238, 242, 264, 273, 274, 278, 296, 346, 350, 359, 362], "deal": [11, 108, 124, 336], "mathemat": [11, 77, 80, 83, 91, 94, 108, 124, 127, 139, 146, 147, 153, 163, 182, 185, 186, 187, 188, 216, 221, 227, 236, 241, 242, 276, 302, 303, 349, 354, 369], "you": [11, 19, 22, 26, 29, 30, 39, 59, 76, 77, 84, 85, 88, 89, 90, 91, 92, 94, 96, 98, 108, 109, 112, 115, 120, 124, 127, 129, 130, 132, 136, 138, 140, 145, 147, 153, 155, 156, 158, 160, 162, 163, 164, 172, 175, 176, 180, 187, 193, 222, 225, 235, 238, 240, 244, 271, 273, 274, 275, 276, 278, 302, 315, 319, 322, 329, 333, 335, 336, 337, 346, 349, 354, 356, 358, 359, 363, 366, 368], "hash": [11, 26, 102], "avl": 11, "misc": [11, 76, 84, 88, 91, 94, 102, 108, 138, 140, 191, 326, 369], "sagex_d": 11, "adrien": 11, "boussicault": [11, 156, 158], "2015": [11, 19, 26, 62, 63, 64, 77, 97, 99, 108, 109, 115, 124, 146, 176, 200, 239, 240, 340, 350, 372], "hook": [11, 29, 34, 41, 54, 98, 122, 160, 164, 177, 183, 296, 301, 343, 344, 346, 348], "alwai": [11, 17, 19, 26, 30, 39, 48, 60, 72, 76, 83, 91, 98, 101, 108, 118, 120, 122, 123, 130, 131, 138, 156, 160, 162, 180, 182, 183, 186, 187, 192, 227, 231, 233, 237, 239, 268, 275, 284, 296, 302, 303, 308, 313, 336, 340, 343, 346, 347, 349, 354, 359, 362, 365, 370, 374], "plu": [11, 25, 30, 51, 56, 58, 64, 66, 80, 92, 101, 108, 130, 131, 138, 160, 164, 168, 172, 193, 242, 270, 275, 303, 346], "out": [11, 17, 19, 48, 51, 61, 93, 101, 107, 108, 109, 114, 120, 127, 138, 139, 141, 149, 172, 187, 197, 238, 264, 276, 313, 314, 315, 336, 343, 346, 348, 354, 359, 362], "outermost": 11, "constructor": [11, 77, 80, 81, 92, 109, 111, 112, 113, 114, 124, 130, 134, 156, 163, 176, 186, 187, 192, 222, 276, 362, 369], "shorten": [11, 108, 160, 182, 306], "abbrevi": [11, 232], "perform": [11, 17, 33, 89, 91, 96, 105, 114, 118, 127, 149, 151, 172, 176, 192, 197, 199, 207, 212, 215, 219, 275, 276, 284, 286, 303, 310, 314, 337, 340, 346, 349, 352, 354, 359, 368], "as_ordered_tre": 11, "with_leav": 11, "seen": [11, 22, 23, 72, 82, 83, 90, 119, 130, 145, 146, 182, 183, 186, 187, 193, 236, 238, 305, 306, 343, 352, 354], "By": [11, 29, 46, 51, 57, 61, 65, 74, 76, 77, 80, 83, 85, 89, 90, 91, 92, 108, 109, 113, 118, 138, 141, 144, 145, 156, 160, 162, 164, 172, 174, 182, 187, 188, 227, 229, 234, 236, 238, 242, 245, 259, 264, 268, 271, 272, 275, 278, 280, 284, 285, 286, 288, 293, 294, 298, 300, 301, 302, 303, 304, 315, 332, 344, 345, 346, 347, 348, 350, 354, 359, 362, 365, 372], "canope": [11, 130], "along": [11, 23, 58, 59, 64, 69, 89, 99, 101, 120, 122, 124, 126, 131, 134, 154, 159, 160, 161, 164, 172, 174, 187, 225, 227, 234, 238, 239, 240, 242, 274, 276, 302, 307, 310, 318, 320, 325, 327, 328, 331, 334, 341, 343, 346, 348, 359, 365, 368, 369, 373], "except": [11, 17, 19, 21, 22, 23, 30, 56, 59, 60, 72, 76, 91, 92, 102, 108, 120, 124, 130, 138, 139, 160, 163, 167, 170, 172, 180, 182, 186, 193, 210, 212, 214, 215, 216, 225, 227, 229, 230, 236, 237, 240, 241, 242, 244, 264, 273, 276, 354, 355, 359, 362, 365], "extrem": [11, 30, 80, 112, 141, 182, 280, 311, 315], "ones": [11, 19, 30, 71, 100, 104, 108, 127, 160, 172, 180, 187, 192, 216, 227, 229, 233, 265, 268, 303, 310, 343, 354, 356, 359], "write": [11, 17, 30, 46, 68, 74, 86, 92, 108, 109, 110, 120, 121, 122, 130, 138, 144, 145, 147, 172, 225, 238, 278, 285, 296, 300, 301, 303, 305, 313, 346, 365, 369], "t_1": [11, 25, 119, 130, 138, 139, 227, 234, 236, 241, 343, 345, 354], "t_2": [11, 119, 130, 138, 139, 227, 234, 236, 343, 345, 354], "complementari": [11, 17, 83, 138, 160, 174, 186, 345, 359], "dg1994": 11, "trivial": [11, 34, 53, 79, 83, 89, 91, 108, 112, 117, 123, 180, 182, 183, 187, 188, 192, 212, 221, 225, 227, 233, 234, 242, 267, 271, 273, 282, 302, 310, 314, 315, 325, 343, 344, 354, 369], "finite_set_map_ci": 11, "fiber": [11, 340], "comb": [11, 28, 143], "over_decomposit": 11, "under_decomposit": 11, "________o________": 11, "__o__": 11, "__o___": 11, "_o_": [11, 120], "dendriform_shuffl": 11, "henc": [11, 26, 39, 68, 72, 104, 112, 121, 124, 131, 141, 151, 180, 182, 187, 225, 227, 232, 265, 271, 290, 296, 302, 310, 342, 348, 352, 354, 362, 369], "never": [11, 19, 108, 124, 139, 199, 338, 346, 351, 356], "keyword": [11, 23, 32, 98, 101, 112, 133, 141, 145, 158, 160, 172, 174, 176, 180, 186, 193, 225, 226, 278, 280, 300, 302, 303, 305, 307, 313, 314, 315, 344, 346, 348, 354, 373], "displai": [11, 17, 19, 22, 51, 82, 90, 91, 99, 101, 114, 124, 131, 132, 134, 145, 154, 156, 157, 158, 159, 160, 164, 172, 187, 196, 197, 199, 205, 207, 209, 211, 213, 214, 215, 216, 238, 242, 274, 299, 303, 307, 313, 314, 341, 342, 346, 348, 350, 352, 354, 363, 365, 371], "correctli": [11, 13, 28, 108, 131, 156, 160, 242, 270, 315, 366], "edg": [11, 19, 21, 22, 23, 39, 46, 56, 58, 62, 76, 89, 96, 99, 101, 102, 108, 113, 117, 119, 120, 130, 134, 154, 156, 159, 160, 161, 169, 171, 172, 180, 182, 183, 187, 197, 211, 215, 222, 226, 227, 230, 231, 238, 240, 242, 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 266, 268, 269, 270, 275, 306, 313, 332, 337, 346, 350, 351, 354, 359, 365, 369, 373], "hook_numb": 11, "recal": [11, 16, 17, 26, 68, 120, 151, 160, 172, 211, 212, 241, 265, 271, 310, 346, 348, 354, 362], "processu": 11, "in_order_travers": 11, "node_act": 11, "leaf_act": 11, "infix": [11, 146], "execut": [11, 108, 354], "whenev": [11, 19, 74, 76, 77, 84, 88, 89, 90, 91, 92, 94, 101, 107, 138, 141, 172, 180, 182, 183, 187, 192, 212, 227, 234, 243, 276, 278, 285, 288, 294, 296, 300, 301, 303, 343, 346, 354, 361], "____3____": 11, "__7__": 11, "_5_": 11, "in_order_traversal_it": 11, "rather": [11, 30, 36, 39, 59, 66, 74, 91, 99, 103, 110, 119, 122, 127, 130, 145, 156, 157, 172, 187, 198, 238, 273, 275, 276, 277, 293, 300, 302, 303, 307, 313, 314, 317, 333, 336, 339, 343, 346, 347, 348, 354], "them": [11, 17, 30, 72, 77, 80, 82, 83, 85, 89, 92, 95, 98, 99, 101, 108, 110, 112, 120, 122, 133, 134, 136, 138, 139, 140, 141, 145, 146, 151, 158, 159, 160, 172, 180, 182, 187, 217, 232, 236, 238, 239, 240, 242, 272, 273, 274, 275, 276, 278, 280, 303, 308, 323, 332, 333, 338, 343, 345, 346, 348, 352, 354, 358, 359, 365, 368, 369], "alik": 11, "is_complet": [11, 101, 108, 134, 139], "nutshel": 11, "level": [11, 36, 51, 56, 57, 59, 76, 82, 89, 100, 109, 114, 120, 160, 162, 164, 173, 180, 182, 187, 193, 227, 232, 235, 236, 238, 241, 242, 244, 264, 271, 273, 292, 302, 326, 346, 347, 348, 354, 359], "flush": [11, 108, 116, 346, 354, 370], "heap": [11, 114], "deepest": [11, 98], "fill": [11, 19, 32, 56, 58, 62, 91, 98, 99, 101, 102, 107, 115, 120, 127, 131, 134, 138, 139, 160, 173, 186, 197, 212, 218, 219, 236, 242, 276, 278, 297, 307, 314, 346, 350, 354, 363], "far": [11, 138, 145, 154, 162, 164, 218, 221, 235, 238, 314, 354], "___o___": 11, "is_empti": [11, 33, 156, 160, 275, 356, 359, 362, 366, 367], "emploi": 11, "is_ful": [11, 359], "proper": [11, 19, 24, 51, 89, 124, 130, 172, 182, 187, 192, 222, 226, 237, 238, 266, 271, 302, 315, 358, 359, 374], "is_perfect": [11, 59], "left_border_symmetri": [11, 101], "symmetri": [11, 85, 121, 172, 174, 187, 225, 232, 238, 273, 303, 343, 346, 350, 352, 354, 359], "border": [11, 134, 160, 172, 187, 242, 359, 366], "three": [11, 66, 74, 76, 80, 92, 93, 95, 98, 101, 102, 109, 115, 120, 130, 131, 134, 139, 146, 159, 160, 167, 168, 169, 172, 174, 180, 187, 236, 238, 241, 273, 276, 278, 303, 313, 315, 332, 348, 349, 350, 354, 359, 362, 363, 369], "t_3": [11, 138, 345], "becom": [11, 17, 72, 74, 76, 88, 89, 94, 114, 115, 124, 145, 146, 149, 156, 160, 162, 180, 187, 238, 265, 273, 303, 308, 310, 343, 346, 348, 354, 365, 372], "left_children_node_numb": 11, "total": [11, 19, 22, 23, 30, 34, 39, 50, 51, 54, 71, 83, 91, 92, 98, 101, 119, 128, 141, 146, 154, 156, 160, 164, 171, 174, 180, 183, 186, 187, 192, 197, 242, 244, 275, 278, 280, 307, 310, 311, 332, 346, 354, 359, 365], "left_right_symmetri": [11, 101, 130, 156], "left_rot": 11, "keep": [11, 17, 19, 80, 89, 92, 111, 129, 130, 131, 138, 141, 144, 160, 183, 186, 187, 215, 240, 274, 336, 339, 343, 348, 350, 354, 366], "mind": [11, 17, 136, 187, 236, 354], "descend": [11, 97, 101, 138, 141, 186, 275, 306, 310], "wherea": [11, 13, 17, 26, 39, 59, 77, 99, 101, 110, 111, 120, 130, 131, 138, 154, 159, 161, 172, 185, 192, 221, 236, 271, 272, 276, 278, 305, 307, 348, 359, 365], "pictur": [11, 23, 46, 102, 130, 160, 186, 222, 227, 242, 271, 278, 313, 362, 363], "asterisk": 11, "signifi": [11, 172], "might": [11, 19, 22, 26, 29, 57, 65, 83, 85, 108, 125, 136, 156, 160, 187, 193, 225, 272, 275, 297, 302, 314, 343, 346, 372], "blanklin": 11, "right_rot": 11, "make_leaf": 11, "make_nod": 11, "child_list": 11, "t3": [11, 109, 139, 161, 300, 346, 348], "written": [11, 30, 59, 60, 61, 77, 86, 89, 96, 101, 108, 109, 114, 115, 116, 120, 124, 133, 134, 144, 145, 146, 150, 151, 154, 160, 164, 172, 182, 187, 188, 232, 236, 276, 287, 294, 302, 303, 305, 313, 315, 348, 354, 356, 359], "graft": [11, 111, 113, 119, 130, 156, 275], "hnt2005": [11, 172], "goe": [11, 26, 30, 89, 95, 107, 108, 127, 139, 145, 146, 151, 160, 180, 181, 183, 187, 227, 238, 242, 303, 362, 363, 369], "lodai": [11, 172], "ronco": [11, 172], "lr0102066": [11, 172], "backslash": [11, 76, 77, 83, 111, 172], "contrari": 11, "grow": [11, 19, 51, 108, 238, 354, 362, 363], "upward": [11, 17, 107, 182, 186, 211], "swap": [11, 129, 164, 173, 277, 344, 346, 347, 348, 349, 359, 373], "graphic": [11, 19, 22, 46, 62, 72, 101, 102, 108, 114, 115, 130, 154, 156, 158, 168, 174, 187, 211, 238, 242, 244, 278, 311, 313, 340, 346, 350, 354, 359, 362, 363, 365, 373], "show": [11, 19, 22, 23, 26, 30, 37, 60, 62, 76, 77, 92, 98, 101, 108, 109, 124, 127, 130, 136, 141, 146, 147, 154, 162, 172, 174, 177, 180, 182, 187, 225, 235, 236, 237, 238, 242, 247, 268, 273, 278, 296, 303, 313, 314, 316, 340, 345, 346, 350, 354, 359, 362, 363, 365], "cut": [11, 37, 48, 51, 101, 124, 130, 146, 147, 182, 187, 306, 315, 359], "bewar": [11, 89, 113, 119, 130, 146, 187, 221, 242, 346], "delet": [11, 19, 22, 34, 92, 98, 100, 108, 120, 160, 162, 180, 217, 283, 339, 354, 370], "attach": [11, 51, 116, 156, 164, 182, 186, 193, 238, 273, 275, 306, 354], "That": [11, 48, 51, 68, 97, 101, 104, 108, 130, 150, 157, 160, 164, 180, 186, 193, 212, 218, 231, 232, 238, 275, 308, 346, 347, 348, 358, 359], "to_ful": 11, "relationship": [11, 178, 323, 352], "q_hook_length_fract": 11, "q_factor": 11, "fraction": [11, 101, 151, 159, 192, 221, 236, 285, 286, 288, 289, 290, 292, 293, 294, 300, 301, 302, 303, 315, 332, 354, 356, 369, 374], "indetermin": [11, 17, 108, 110, 121, 132, 145, 151, 187, 188, 189, 310], "h_": [11, 51, 91, 145, 151, 160, 180, 187, 238, 273, 284, 285, 288, 293, 295, 300, 301, 302, 303, 305, 359], "lvert": [11, 121, 144, 145, 160, 164, 215], "rvert": [11, 121, 144, 145, 160, 164, 215], "_q": [11, 17, 26, 55, 77, 121, 188, 216, 285, 288, 294, 300, 301, 303], "t_t": 11, "easi": [11, 72, 91, 108, 120, 124, 127, 145, 147, 166, 227, 236, 242, 276, 302, 303, 305, 310, 315, 354, 362], "explicitli": [11, 53, 58, 62, 83, 92, 98, 120, 122, 144, 146, 147, 172, 182, 192, 215, 226, 234, 236, 238, 241, 247, 265, 285, 300, 301, 302, 303, 305, 336, 343, 354, 362, 363, 365], "formula": [11, 17, 19, 23, 26, 33, 59, 71, 74, 83, 98, 116, 130, 134, 138, 139, 143, 144, 145, 146, 147, 151, 152, 160, 177, 180, 183, 184, 185, 188, 216, 234, 236, 237, 241, 244, 266, 273, 275, 285, 287, 288, 293, 294, 297, 300, 301, 303, 305, 310, 313, 314, 343, 346, 348, 354, 356, 374], "binomi": [11, 26, 77, 143, 146, 172, 188, 285, 288, 303, 308, 315, 354, 359], "coeffici": [11, 17, 19, 23, 26, 39, 56, 59, 73, 77, 108, 112, 116, 121, 133, 134, 143, 144, 145, 146, 147, 150, 151, 160, 168, 172, 180, 187, 188, 189, 190, 192, 193, 211, 225, 227, 234, 235, 236, 238, 239, 241, 244, 251, 259, 264, 272, 273, 282, 284, 285, 286, 288, 289, 291, 292, 293, 294, 296, 297, 298, 300, 301, 302, 303, 304, 310, 313, 315, 323, 332, 340, 343, 352, 354, 359, 374], "variat": [11, 37, 120, 160, 165], "f_": [11, 16, 26, 36, 39, 46, 55, 56, 58, 69, 89, 97, 98, 110, 138, 145, 146, 159, 193, 212, 234, 303, 323, 343, 346], "t_": [11, 25, 34, 48, 131, 234, 241, 287, 343], "mathrm": [11, 30, 36, 38, 39, 42, 48, 51, 54, 57, 59, 60, 61, 65, 67, 68, 108, 109, 116, 146, 147, 160, 172, 180, 182, 193, 212, 219, 225, 276, 299, 300, 302, 303, 310, 314, 343, 346, 354], "drop": [11, 160, 172, 323, 359, 374], "bw1988": 11, "theorem": [11, 37, 48, 51, 65, 67, 73, 74, 76, 77, 80, 83, 85, 91, 92, 108, 110, 127, 138, 145, 146, 151, 160, 162, 164, 172, 187, 193, 222, 225, 276, 301, 303, 315, 342, 343, 345, 346, 356, 374], "easiest": [11, 108, 172, 238, 285, 288, 294, 300, 301, 303], "465": [11, 315], "3720": 11, "polynomialr": [11, 99, 108, 132, 140, 146, 160, 189, 190, 239, 273, 277, 291, 294, 302, 303], "gen": [11, 25, 26, 77, 83, 99, 101, 108, 111, 113, 133, 139, 140, 146, 151, 159, 160, 187, 188, 189, 197, 216, 234, 236, 239, 241, 274, 284, 286, 287, 289, 291, 292, 293, 294, 296, 302, 303, 310, 315, 329, 332, 335, 336, 354, 373, 374], "q_hook_length_fraction_2": 11, "sylvester_class": [11, 172], "test_genfun": 11, "cp2012": 11, "without": [11, 12, 19, 22, 23, 26, 46, 51, 53, 68, 79, 80, 85, 99, 108, 115, 120, 124, 127, 130, 138, 139, 141, 144, 164, 172, 180, 182, 187, 192, 193, 212, 215, 238, 239, 240, 272, 273, 274, 302, 305, 309, 315, 346, 350, 354, 356, 359, 362, 363], "_latex_": [11, 101, 130, 154, 156, 278], "_ascii_art_": [11, 156], "pretty_print": [11, 101, 154, 156, 159, 354], "faith": [11, 156, 160, 242, 272], "single_edge_cut_shap": 11, "interval_poset": [11, 130], "tamariintervalposet": [11, 101, 130], "is_new": [11, 130], "inner": [11, 30, 56, 99, 101, 102, 108, 131, 140, 144, 145, 146, 160, 170, 196, 197, 225, 235, 238, 239, 264, 273, 302, 303, 307, 313, 314, 346, 354, 359], "connect": [11, 16, 17, 19, 22, 24, 33, 39, 46, 59, 60, 89, 97, 99, 108, 110, 115, 119, 130, 131, 145, 146, 158, 160, 164, 172, 180, 182, 187, 197, 200, 212, 226, 227, 229, 232, 237, 266, 273, 278, 300, 302, 303, 313, 323, 350, 354], "compon": [11, 19, 22, 23, 26, 27, 33, 43, 46, 48, 56, 58, 59, 60, 97, 99, 108, 109, 110, 119, 120, 127, 130, 131, 136, 145, 151, 153, 157, 158, 159, 160, 161, 162, 164, 172, 176, 180, 182, 187, 193, 211, 212, 225, 227, 230, 232, 237, 239, 244, 266, 268, 284, 286, 300, 302, 303, 305, 307, 346, 347, 348, 359, 365], "sub": [11, 53, 99, 108, 109, 112, 120, 130, 141, 172, 185, 188, 236, 239, 242, 274, 275, 278, 293, 336, 343, 354, 359, 368, 374], "origin": [11, 26, 30, 48, 59, 63, 79, 80, 86, 89, 94, 95, 96, 100, 101, 102, 108, 111, 116, 120, 122, 124, 127, 136, 139, 141, 145, 154, 160, 168, 172, 182, 183, 185, 189, 193, 213, 214, 216, 219, 232, 242, 265, 267, 269, 340, 342, 346, 348, 350, 354, 362, 363], "left_to_right": [11, 130, 172], "sylvest": [11, 120, 130, 138, 172], "forget": [11, 25, 98, 108, 156, 172, 275, 354], "congruenc": [11, 80, 172, 180, 182, 306], "uacvbw": [11, 172], "ucavbw": [11, 172], "drawn": [11, 25, 99, 101, 108, 114, 115, 154, 157, 158, 160, 238, 242, 278, 313, 354], "rsk": [11, 16, 53, 120, 122, 160, 172, 276, 346, 359, 366], "binary_search_insert": [11, 130, 172], "binary_search_tre": [11, 120, 130, 172], "higher": [11, 101, 102, 109, 131, 134, 146, 160, 162, 164, 172, 303, 343, 347, 362], "permutohedron": [11, 130, 172, 186, 238, 242], "permutohedron_lequ": [11, 130, 172, 186], "312": [11, 80, 90, 101, 130, 359], "to_312_avoiding_permut": [11, 101], "132": [11, 23, 26, 80, 83, 85, 99, 101, 124, 130, 153, 161, 174, 314, 315, 324, 354, 359], "to_132_avoiding_permut": [11, 101], "raw": [11, 356], "verifi": [11, 26, 30, 39, 77, 83, 108, 120, 129, 131, 138, 141, 154, 160, 163, 172, 192, 193, 303, 313, 315, 316, 343, 344, 350, 354], "claim": [11, 138, 146, 160, 172, 236], "test_bst_of_sc": 11, "p_per": 11, "to_poset": [11, 156, 174, 183], "linear_extens": [11, 130, 160, 180, 182, 183, 184, 186, 187, 190], "tamari_great": 11, "filter": [11, 17, 19, 26, 120, 180, 185, 187, 197, 296, 298, 302, 303, 304, 310], "tamari_lequ": [11, 101], "tamari_smal": 11, "tamari_interv": [11, 101, 130], "ip": [11, 89, 101, 130], "lower_binary_tre": [11, 130], "upper_binary_tre": [11, 130], "interval_cardin": [11, 101, 130], "number_of_tamari_invers": [11, 101, 130], "tamari_join": 11, "s_n": [11, 25, 26, 69, 74, 83, 110, 127, 129, 130, 143, 145, 146, 151, 160, 172, 182, 232, 239, 277, 282, 300, 302, 303, 315, 316, 323, 343, 346, 348, 369], "binary_search_tree_shap": [11, 172], "homomorph": [11, 16, 17, 110, 145, 146, 149, 160, 163, 225, 232, 285, 288, 294, 300, 301, 303], "rea2004": 11, "tamari_meet": 11, "vivian": [11, 130, 172, 241], "pon": [11, 130, 172], "darij": [11, 17, 30, 110, 122, 130, 145, 146, 172, 187, 276, 303, 314, 346], "grinberg": [11, 17, 30, 110, 122, 130, 145, 146, 172, 187, 276, 303, 314], "june": [11, 101, 172, 350], "2014": [11, 53, 58, 68, 69, 77, 89, 96, 108, 109, 130, 132, 145, 172, 187, 208, 210, 223, 311, 374], "januari": [11, 236], "2018": [11, 16, 17, 27, 69, 99, 122, 141, 160, 162, 163, 167, 169, 188, 226, 276, 346], "b3": [11, 69, 99, 132, 161, 180, 182, 183, 187, 225, 226, 231, 233, 235, 239, 240, 248, 250, 273], "univers": [11, 19, 83, 89, 94, 101, 113, 114, 119, 159, 171, 172, 193, 211, 230, 232, 233, 235, 289, 302, 303, 304, 306, 354, 362, 369], "meet": [11, 30, 77, 129, 145, 154, 158, 172, 180, 182, 185, 186, 187, 349, 354], "test_uni_join": [11, 172], "equip": [11, 17, 163, 164, 187, 244, 354], "statement": [11, 140, 160, 172, 210, 343], "tamari_pr": 11, "tamari_succ": 11, "test_uni_meet": [11, 172], "predecessor": [11, 46, 108, 120, 242], "tamari_sorting_tupl": 11, "among": [11, 30, 76, 77, 80, 95, 101, 160, 172, 187, 234, 239, 310, 315, 332, 354, 358], "componentwis": [11, 101, 186, 355], "essenti": [11, 46, 108, 123, 146, 147, 170, 191, 227, 234, 236, 238, 313, 347, 354], "ht1972": [11, 130], "refer": [11, 12, 17, 19, 22, 23, 24, 25, 26, 27, 34, 38, 48, 51, 55, 56, 59, 61, 62, 70, 72, 73, 74, 76, 77, 78, 79, 80, 81, 83, 87, 89, 90, 91, 92, 93, 94, 99, 101, 102, 108, 110, 111, 113, 115, 116, 119, 122, 127, 130, 131, 134, 138, 139, 141, 143, 145, 146, 147, 150, 151, 159, 160, 162, 163, 164, 165, 169, 171, 172, 180, 181, 182, 185, 186, 187, 188, 189, 197, 200, 211, 212, 213, 216, 218, 225, 226, 227, 232, 234, 235, 236, 237, 239, 240, 241, 242, 265, 266, 275, 276, 278, 280, 282, 287, 289, 290, 292, 293, 296, 297, 298, 300, 302, 303, 304, 305, 306, 308, 310, 311, 312, 315, 323, 340, 341, 342, 344, 346, 348, 349, 350, 354, 356, 358, 359, 362, 363, 365, 369, 372, 374], "successor": [11, 46, 108, 120, 242, 373], "usemap": [11, 101], "1l0r": [11, 101], "1r0l": [11, 101], "l1r0": [11, 101], "r1l0": [11, 101], "r10l": [11, 101], "to_dyck_word_tamari": [11, 101], "to_ordered_tree_left_branch": [11, 130], "brother": [11, 130, 156], "to_ordered_tree_right_branch": [11, 130], "root_to_leaf": [11, 156], "interpret": [11, 19, 26, 32, 34, 49, 58, 66, 89, 90, 101, 108, 109, 120, 156, 160, 164, 168, 182, 183, 235, 236, 241, 242, 245, 271, 273, 276, 302, 303, 310, 315, 323, 346, 348, 374], "orient": [11, 19, 22, 23, 46, 108, 130, 134, 156, 160, 172, 186, 236, 238, 313, 350, 354], "pass": [11, 19, 22, 25, 26, 29, 62, 63, 76, 77, 83, 98, 101, 108, 120, 124, 131, 133, 141, 146, 156, 160, 172, 174, 176, 180, 182, 187, 191, 192, 193, 199, 211, 212, 215, 218, 227, 231, 236, 238, 241, 242, 244, 266, 276, 278, 280, 302, 303, 305, 343, 345, 350, 354, 363], "ignor": [11, 17, 19, 22, 46, 77, 80, 108, 126, 127, 131, 136, 156, 160, 172, 187, 276, 314, 333, 354, 366, 372], "maximal_el": [11, 130, 160, 180, 186, 187, 237, 313, 349], "minimal_el": [11, 160, 180, 187, 313], "to_tilt": 11, "tilt": [11, 23, 101, 346], "depict": [11, 102, 134, 160, 313], "abov": [11, 13, 16, 17, 24, 30, 33, 39, 48, 51, 53, 56, 62, 70, 76, 83, 89, 91, 92, 93, 98, 99, 101, 108, 109, 110, 114, 122, 123, 124, 131, 134, 136, 138, 140, 141, 145, 146, 147, 154, 155, 158, 160, 164, 172, 182, 184, 186, 187, 188, 192, 193, 212, 225, 232, 233, 234, 238, 240, 241, 249, 265, 266, 273, 280, 284, 302, 303, 305, 310, 314, 323, 343, 346, 347, 348, 349, 354, 363, 369, 373], "regularli": 11, "line": [11, 25, 35, 39, 59, 77, 80, 82, 83, 87, 92, 98, 99, 101, 102, 107, 110, 130, 138, 145, 154, 157, 158, 160, 168, 172, 183, 186, 187, 238, 273, 276, 277, 278, 302, 315, 346, 348, 350, 354, 359, 365], "horizont": [11, 19, 56, 101, 107, 116, 120, 130, 131, 153, 154, 158, 160, 172, 211, 212, 213, 214, 278, 312, 342, 346, 349], "coordin": [11, 23, 56, 77, 91, 92, 101, 107, 108, 116, 120, 130, 131, 134, 139, 154, 157, 158, 160, 164, 174, 238, 242, 278, 297, 305, 307, 313, 314, 340, 346, 348, 350, 354, 359, 362, 363], "convent": [11, 23, 46, 48, 54, 58, 68, 74, 79, 91, 98, 102, 113, 115, 120, 130, 131, 133, 146, 147, 157, 159, 160, 162, 163, 164, 171, 172, 174, 187, 196, 197, 212, 213, 214, 216, 221, 226, 227, 231, 233, 236, 238, 241, 242, 244, 276, 278, 307, 313, 314, 323, 341, 343, 344, 346, 348, 354, 359], "son": 11, "share": [11, 30, 68, 80, 92, 108, 123, 130, 144, 187, 238, 265, 303, 313, 354], "2020222002000": 11, "to_undirected_graph": [11, 156], "undirect": [11, 22, 23, 156, 187], "twisting_numb": 11, "longer": [11, 26, 51, 80, 108, 131, 160, 163, 172, 231, 275, 276, 341, 346, 348], "planar": [11, 99, 111, 130, 138, 156, 158, 161, 182, 186, 187, 275, 354], "futur": [11, 71, 123, 153, 156, 158, 159, 186, 232, 236, 372], "reli": [11, 17, 19, 108, 124, 156, 172, 255, 314, 343, 346], "binarytrees_al": 11, "binarytrees_s": 11, "catalan": [11, 26, 99, 101, 130, 153, 156, 158, 159, 188, 315, 354], "fullbinarytrees_al": 11, "fullbinarytrees_s": 11, "fullbinarytre": 11, "disregard": 11, "iron": 11, "shorthand": [11, 99, 134, 146, 147, 151, 162, 163, 227, 233, 234, 302, 343, 366, 373], "imposs": [11, 354], "anywai": [11, 92, 108, 124, 238], "put": [11, 17, 54, 73, 92, 120, 131, 140, 160, 187, 242, 303, 315, 333, 354], "analogi": [11, 145, 285, 287, 288, 294, 300, 301, 303], "syntax": [11, 17, 36, 74, 89, 108, 145, 151, 156, 172, 187, 238, 302, 303, 354], "ae": [11, 23, 108], "own": [11, 17, 77, 97, 99, 108, 160, 174, 187, 225, 238, 242, 274, 350, 354], "too": [11, 26, 80, 83, 85, 92, 93, 96, 108, 124, 144, 187, 241, 286, 289, 294, 303, 314, 354, 374], "assum": [11, 17, 19, 26, 30, 33, 36, 46, 47, 49, 56, 59, 77, 82, 83, 91, 92, 96, 99, 101, 102, 107, 108, 120, 122, 124, 127, 130, 138, 139, 144, 146, 147, 160, 168, 172, 173, 180, 182, 187, 193, 221, 225, 226, 227, 228, 234, 235, 236, 242, 243, 255, 257, 266, 273, 274, 276, 278, 280, 285, 288, 294, 300, 301, 303, 314, 336, 343, 346, 348, 350, 359, 362, 366, 374], "Ins": 11, "oppos": [11, 138, 212], "involv": [11, 72, 89, 91, 96, 101, 110, 130, 192, 225, 232, 236, 237, 273, 277, 346, 352, 354], "bump": [11, 116, 132, 232, 236, 273, 274, 276, 346], "fig": 11, "heap_insert": 11, "wikipedia": [11, 23, 25, 26, 28, 71, 73, 76, 77, 82, 83, 87, 89, 90, 91, 108, 109, 124, 139, 147, 160, 172, 177, 181, 182, 186, 187, 188, 193, 222, 227, 231, 238, 239, 240, 242, 266, 277, 278, 280, 312, 315, 346, 354, 359, 361, 362, 363, 369], "articl": [11, 23, 25, 26, 28, 71, 73, 74, 76, 77, 79, 82, 83, 87, 89, 91, 92, 102, 108, 109, 120, 124, 143, 146, 147, 160, 172, 177, 181, 182, 186, 187, 188, 193, 216, 222, 227, 231, 238, 239, 240, 242, 266, 277, 278, 280, 305, 310, 312, 315, 344, 346, 354, 359, 361, 362, 363, 369], "binary_heap": 11, "No": [11, 76, 77, 79, 108, 122, 137, 180, 188, 236, 237, 242, 303, 346, 359], "furthermor": [11, 25, 49, 62, 82, 83, 89, 91, 99, 108, 109, 112, 123, 124, 265, 276, 284, 285, 288, 294, 300, 301, 303, 305, 345], "semistandard_insert": 11, "nov": 11, "stub": [11, 106, 156, 275], "serv": [11, 99, 101, 108, 156, 237, 275, 284, 352], "from_tamari_sorting_tupl": 11, "05": [12, 30, 53, 62, 63, 64, 73, 101, 102, 108, 109, 127, 138, 160, 162, 172, 187, 211, 225, 238, 314, 315], "blob_algebra": 12, "blobalgebra": 12, "q1": [12, 139, 234, 236, 241], "q2": [12, 22, 77, 139, 234, 236, 241], "q3": [12, 22, 290], "base_r": [12, 16, 30, 98, 99, 108, 112, 127, 133, 144, 146, 147, 151, 160, 163, 172, 180, 182, 221, 222, 227, 228, 234, 242, 243, 244, 245, 248, 251, 253, 257, 259, 264, 265, 267, 268, 269, 270, 271, 272, 273, 286, 289, 292, 293, 296, 302, 303, 313, 316, 323, 332, 343, 347, 374], "combinatorialfreemodul": [12, 16, 17, 74, 99, 110, 111, 112, 113, 119, 133, 145, 146, 149, 161, 163, 172, 181, 185, 221, 243, 264, 272, 273, 277, 290, 296, 302, 303, 343], "temperlei": [12, 99], "lieb": [12, 99], "ilz2018": 12, "graham1985": 12, "ms1994": 12, "noncross": [12, 26, 101, 167, 171, 186, 242, 278, 306], "strand": [12, 99], "deform": [12, 99, 113, 151, 182, 236, 272, 303, 304, 343], "touch": [12, 89, 92, 101, 159, 160], "frozen": [12, 19, 22], "pole": 12, "idempot": [12, 74, 91, 92, 145, 185, 343], "b4": [12, 60, 114, 182, 225, 227, 248, 249, 250, 267, 269], "one_basi": [12, 16, 17, 74, 99, 110, 111, 119, 133, 144, 149, 161, 163, 181, 273, 277, 290, 296, 303, 343], "half": [12, 19, 49, 64, 67, 68, 99, 101, 120, 146, 147, 158, 159, 160, 168, 171, 212, 215, 225, 241, 242, 278, 307, 346, 350, 363], "product_on_basi": [12, 16, 17, 74, 99, 110, 111, 113, 119, 145, 146, 149, 150, 151, 161, 163, 181, 185, 273, 277, 295, 296, 301, 343], "bot": [12, 182], "bd": [12, 22, 23, 77, 89, 99, 362], "blobdiagram": 12, "unmark": [12, 131], "sqcup": [12, 51, 91, 141], "divid": [12, 17, 79, 83, 85, 101, 107, 108, 124, 131, 133, 141, 145, 146, 160, 180, 182, 186, 187, 240, 241, 264, 277, 278, 285, 289, 300, 301, 303, 305, 311, 315, 332, 343, 346, 359, 374], "blobe": 12, "propag": [12, 99, 161], "nest": [12, 151, 171, 182, 278, 348, 369], "temperley_lieb_diagram": [12, 99], "bd4": 12, "base_set": [12, 171, 278, 279, 280], "cartesian_product": [13, 83, 108, 112, 176, 190, 238, 354], "cartesianproduct_it": 13, "enumeratedsetfromiter": 13, "soon": [13, 26, 162, 303], "deprec": [13, 26, 68, 83, 99, 124, 160, 172, 226, 333, 359], "18411": 13, "19195": 13, "main": [13, 23, 26, 68, 85, 86, 88, 90, 93, 94, 95, 101, 103, 108, 120, 124, 136, 138, 159, 160, 162, 172, 198, 225, 238, 271, 276, 307, 313, 317, 332, 354, 357], "behavior": [13, 98, 107, 108, 133, 141, 233, 242, 368], "cartesianproduct": [13, 112, 176], "plain": [13, 77, 124, 172, 173, 180, 182, 187, 343, 363], "python": [13, 26, 29, 30, 74, 105, 108, 109, 112, 125, 127, 136, 145, 147, 151, 160, 164, 187, 222, 276, 302, 354, 359, 362, 366, 368, 372, 374], "versu": [13, 271, 315], "custom": [13, 29, 108, 112, 145, 227, 234, 314, 346], "membership": 13, "illustr": [13, 17, 29, 68, 108, 109, 112, 120, 160, 163, 167, 186, 193, 227, 333, 343, 354, 359, 363, 369], "f1": [13, 108, 111, 112, 113, 273, 303, 374], "f2": [13, 110, 112, 273, 303, 374], "f3": [13, 112, 290, 302], "cartesianproduct_with_categori": 13, "element_class": [13, 26, 56, 58, 66, 69, 73, 112, 114, 124, 130, 131, 149, 156, 160, 164, 172, 180, 185, 187, 212, 234, 236, 274, 275, 336, 338, 347, 354, 358], "elt": [13, 16, 39, 53, 55, 56, 57, 60, 65, 68, 73, 74, 99, 113, 116, 127, 129, 145, 149, 150, 151, 172, 212, 213, 214, 215, 216, 218, 219, 232, 239, 242, 289, 303, 305, 316], "everyth": [13, 24, 76, 83, 88, 92, 94, 102, 108, 145, 146, 154, 227, 238, 303, 354], "qq": [13, 16, 17, 26, 30, 55, 58, 62, 74, 83, 98, 99, 101, 108, 109, 110, 111, 112, 113, 119, 124, 127, 131, 132, 133, 140, 143, 144, 145, 146, 147, 149, 150, 151, 159, 160, 161, 163, 168, 172, 181, 182, 185, 187, 188, 189, 190, 193, 216, 221, 222, 227, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 271, 273, 277, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 313, 316, 323, 329, 332, 335, 340, 343, 346, 354, 362, 374], "is_finit": [13, 19, 22, 23, 26, 108, 141, 220, 226, 227, 229, 230, 231, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 265, 268, 270, 356, 359], "unabl": [13, 19, 91, 217, 290, 293, 302, 374], "dog": 13, "cat": [13, 73, 280, 302], "unrank": [13, 26, 28, 172, 190, 191, 242, 336, 354], "constitu": [13, 108], "238792368": 13, "238": [13, 90, 211], "792": 13, "368": [13, 80, 94, 315], "15919": [13, 191], "ff": [13, 16, 232], "integermodr": [13, 160, 164, 191], "franco": [16, 69, 102, 126, 134, 144, 146, 344, 356, 358, 359, 360, 366, 369, 372, 373], "saliola": [16, 69, 102, 126, 134, 144, 145, 146, 343, 344, 356, 358, 359, 360, 366, 369, 372, 373], "04": [16, 17, 108, 109, 127, 149, 150, 151, 153, 159, 172, 187, 199, 201, 207, 209, 210, 214, 226, 231, 315, 344, 373], "miss": [16, 37, 80, 82, 91, 92, 108, 187, 289, 359], "reorgan": 16, "cha": [16, 17], "fsym": [16, 17, 145], "fsymbas": 16, "parent_with_r": [16, 144, 145, 146, 149, 185, 232, 303], "category_realization_of_par": [16, 17, 74, 110, 144, 145, 146, 149, 185, 232, 290, 296, 303], "elementmethod": [16, 17, 74, 110, 144, 145, 146, 149, 185, 232, 236, 237, 241, 242, 271, 290, 296, 303], "duality_pair": [16, 144, 145, 146, 147, 149, 150, 151], "dual_basi": [16, 149, 150, 151, 284, 302, 303], "parentmethod": [16, 17, 74, 110, 112, 133, 144, 145, 146, 149, 185, 232, 236, 237, 238, 241, 242, 245, 259, 264, 271, 273, 290, 296, 303], "tg": 16, "123": [16, 26, 83, 99, 145, 234, 236, 237, 315, 339, 346, 350, 356, 359, 361, 362, 363, 369], "degree_on_basi": [16, 17, 110, 111, 113, 119, 133, 144, 290, 296, 303], "standardtableau": [16, 190, 314, 346, 347, 348], "coproduct": [16, 17, 110, 111, 119, 141, 144, 145, 146, 147, 149, 150, 151, 282, 285, 287, 288, 289, 290, 295, 296, 298, 300, 301, 302, 303, 304, 305], "duality_pairing_matrix": [16, 144, 145, 146, 147, 149], "scalar": [16, 59, 131, 143, 144, 149, 221, 227, 231, 234, 236, 238, 239, 241, 242, 243, 244, 264, 270, 271, 272, 277, 284, 285, 286, 289, 293, 296, 299, 300, 301, 302, 303, 305, 343, 344], "super_categori": [16, 17, 74, 110, 144, 145, 146, 149, 185, 232, 242, 271, 290, 296, 303], "coalgebra": [16, 17, 110, 145, 146, 181, 296, 302, 303], "fsymbasis_abstract": 16, "alg": [16, 17, 74, 99, 110, 292], "bindableclass": [16, 17, 74, 110, 145, 146, 149, 185, 232], "_prefix": [16, 17, 110, 302], "freesymmetricfunct": [16, 145], "fqsym": [16, 17, 110, 145], "freequasisymmetricfunct": [16, 110, 145], "f_w": [16, 110, 234], "g_w": [16, 110], "s_1": [16, 25, 26, 58, 68, 69, 83, 89, 91, 93, 129, 145, 172, 182, 187, 188, 238, 239, 278, 303, 343, 346, 369], "s_2": [16, 25, 26, 58, 69, 83, 89, 91, 93, 96, 172, 187, 188, 238, 278, 343, 346], "_t": [16, 236], "span": [16, 17, 46, 57, 91, 110, 172, 232, 234, 236, 238, 243, 244, 272, 296, 302, 316], "subalgebra": [16, 55, 56, 67, 74, 99, 145, 146, 181, 225, 235, 237, 273, 302], "poireu95": 16, "ast": [16, 17, 54, 110, 145, 146, 160, 164, 181, 212, 219, 276, 303, 313], "delta": [16, 17, 24, 38, 39, 51, 52, 57, 59, 60, 61, 67, 72, 74, 83, 85, 97, 134, 138, 141, 144, 145, 146, 147, 151, 162, 181, 185, 214, 215, 232, 234, 235, 236, 241, 242, 264, 271, 272, 287, 303, 343, 356, 359, 366, 369], "explain": [16, 39, 80, 83, 91, 93, 94, 108, 130, 146, 147, 158, 187, 193, 225, 238, 271, 354], "to_fqsym": [16, 17, 110, 145], "standardtableaux": [16, 316, 343, 346, 347, 348, 354], "tensor_squar": 16, "onto": [16, 39, 112, 115, 119, 146, 174, 225, 232, 238, 242, 244, 264, 266, 273], "to_symmetric_funct": [16, 144, 145, 146, 147, 149, 150, 151, 159, 303], "indexedfreemoduleel": [16, 17, 99, 110, 112, 113, 133, 145, 146, 150, 151, 161, 163, 181, 221, 243, 264, 272, 273, 277, 303, 316], "inclus": [16, 56, 101, 110, 130, 145, 149, 172, 186, 306, 338], "project": [16, 17, 26, 29, 39, 56, 59, 62, 76, 77, 79, 80, 82, 83, 89, 91, 92, 97, 102, 108, 110, 112, 114, 144, 145, 146, 149, 151, 168, 174, 176, 221, 225, 227, 232, 236, 238, 241, 242, 244, 245, 259, 264, 315, 343, 362, 363], "sym": [16, 33, 145, 146, 147, 149, 150, 151, 163, 188, 190, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305], "surject": [16, 48, 110, 115, 308], "coproduct_on_basi": [16, 17, 110, 111, 119, 146, 150, 151, 295, 301], "125": [16, 76, 85, 145, 159, 172, 182, 187, 193, 235, 289, 315, 354], "124": [16, 83, 90, 216], "134": [16, 141, 315], "fundamentaldu": 16, "12456": 16, "1256": 16, "126": [16, 80, 90, 172, 235, 242, 315, 346, 354], "a_real": [16, 17, 74, 110, 144, 145, 146, 150, 151, 185, 232, 290, 302], "freesymmetricfunctions_du": 16, "tf": [16, 131, 369], "coercion": [16, 110, 112, 145, 150, 172, 232, 283, 284, 286, 289, 293, 294, 302, 303, 305, 319, 322, 329, 335, 343], "135": [16, 80, 97, 141, 216, 362], "to_quasisymmetric_funct": [16, 17], "qsym": [16, 17, 110, 142, 144, 145, 146, 187, 303], "adjoint": [16, 144, 145, 146, 147, 225, 232, 273, 284, 285, 300, 301, 302, 303, 305], "inject": [16, 26, 53, 89, 96, 110, 145, 149, 215, 362], "nsym": [16, 74, 110, 144, 145, 343], "to_fsym": [16, 145], "1234": [16, 187, 363, 364], "t0": [16, 108, 134, 239, 241, 267, 269, 300, 346], "ascent_set": 16, "ascent": [16, 101, 141], "appear": [16, 17, 23, 26, 28, 32, 39, 51, 54, 58, 61, 68, 72, 74, 76, 78, 80, 82, 83, 84, 88, 89, 91, 92, 98, 99, 102, 107, 108, 113, 114, 116, 122, 124, 127, 129, 134, 138, 139, 141, 143, 145, 146, 160, 161, 162, 171, 172, 187, 235, 237, 238, 284, 289, 293, 303, 311, 313, 314, 332, 333, 334, 336, 338, 339, 343, 346, 347, 348, 356, 359, 363, 366, 367, 369], "descent_composit": [16, 32], "descent_set": [16, 29, 32, 346], "133": [16, 52, 80, 83], "09": [17, 26, 30, 101, 102, 108, 109, 120, 154, 159, 160, 172, 187, 208, 210, 213, 215, 216, 217, 218, 219, 310, 315, 348, 362], "ami": [17, 359, 366, 369], "pang": 17, "further": [17, 29, 30, 34, 46, 89, 99, 101, 107, 108, 110, 112, 114, 122, 124, 127, 141, 145, 146, 159, 160, 162, 172, 182, 186, 192, 193, 227, 236, 238, 239, 242, 274, 302, 303, 313, 343, 346, 348, 354, 363], "wqsym": [17, 110, 149], "wqsymbas": 17, "algebraic_compl": 17, "complement": [17, 24, 29, 30, 89, 92, 97, 101, 108, 130, 145, 146, 172, 174, 180, 182, 187, 192, 215, 232, 237, 239, 280, 334, 340, 346, 359], "involut": [17, 27, 56, 62, 67, 99, 101, 110, 116, 122, 130, 145, 146, 149, 151, 160, 170, 171, 182, 212, 215, 219, 225, 273, 278, 284, 285, 288, 300, 301, 302, 303, 313, 314, 315, 344, 346, 352, 356, 359, 362], "overlin": [17, 25, 54, 55, 57, 95, 108, 145, 211, 215, 216, 241, 303, 343], "mathbf": [17, 19, 62, 74, 108, 110, 145, 146, 149, 150, 151, 187, 285, 300, 301, 303, 305], "_u": [17, 110], "anti": [17, 57, 59, 65, 68, 110, 138, 144, 145, 146, 187, 236, 242, 302, 342], "x_u": [17, 59], "restat": 17, "r_1": [17, 93, 121, 188, 303, 347], "r_2": [17, 93, 121, 188, 303], "r_k": [17, 161, 188], "r_": [17, 48, 54, 96, 121, 145, 162, 163, 359], "_a": [17, 145, 149, 150, 151, 211], "x_a": 17, "wordquasisymmetricfunct": [17, 110, 149], "stronglycoars": 17, "complic": [17, 26, 72, 144, 188, 236, 354, 362], "strongli": [17, 89, 108, 138, 280, 315], "finer": [17, 30, 141, 144, 145, 146, 172, 180, 278, 280], "is_strongly_fin": [17, 280], "ell": [17, 25, 30, 32, 51, 54, 59, 61, 89, 98, 99, 102, 114, 128, 131, 141, 143, 145, 146, 151, 152, 160, 163, 164, 172, 193, 215, 232, 243, 276, 280, 284, 285, 287, 288, 294, 300, 301, 302, 303, 305, 346, 354, 359], "shall": [17, 108, 121, 122, 273, 276, 346], "q_a": [17, 311], "c_": [17, 25, 26, 60, 91, 138, 150, 156, 158, 160, 172, 193, 225, 227, 239, 280, 293, 354, 359, 369, 374], "q_p": 17, "stronglyfin": 17, "abelian": [17, 76, 82, 83, 91, 102, 109, 139, 160, 170, 188, 310, 359, 363], "m_i": [17, 51, 88, 92, 144, 146, 150, 151, 160, 172, 211, 215, 216, 217, 284, 303], "omega": [17, 63, 91, 98, 110, 145, 146, 149, 151, 160, 236, 238, 241, 271, 280, 284, 285, 288, 296, 300, 301, 302, 303, 315, 323, 359, 362, 369], "endomorph": [17, 111, 113, 121, 144, 145, 146, 147, 188, 234, 236, 284, 285, 288, 300, 301, 303, 305, 362, 369], "m_": [17, 22, 23, 61, 62, 91, 121, 122, 126, 131, 138, 146, 147, 149, 151, 181, 229, 235, 294, 300, 303], "f_i": [17, 36, 37, 38, 39, 42, 46, 47, 48, 49, 50, 51, 53, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 68, 69, 89, 141, 145, 146, 162, 212, 234, 277, 307], "m_j": [17, 146, 215, 303], "sum_j": [17, 54, 91, 141, 145], "substack": [17, 59, 61, 146, 187], "mu": [17, 22, 34, 46, 55, 57, 80, 82, 91, 98, 102, 120, 121, 122, 131, 133, 134, 149, 150, 151, 160, 162, 164, 181, 187, 188, 192, 193, 234, 235, 236, 242, 272, 273, 280, 282, 284, 285, 286, 287, 289, 291, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 313, 314, 315, 343, 346, 348, 360, 362, 369], "f_j": [17, 46, 48, 62, 63, 145, 239], "particularli": [17, 100, 137, 172, 193, 347, 354], "situat": [17, 108, 187, 343, 348, 354], "opposit": [17, 25, 48, 68, 119, 120, 130, 145, 146, 180, 187, 227, 231, 242, 264, 302, 343, 363], "q_i": [17, 340], "phi_i": [17, 146], "star_involut": [17, 110, 145, 146], "mapsto": [17, 48, 56, 57, 59, 62, 65, 67, 68, 74, 85, 89, 96, 110, 120, 145, 149, 151, 193, 215, 225, 227, 232, 234, 235, 236, 237, 241, 266, 284, 285, 288, 294, 300, 301, 302, 303, 346, 360, 369], "coalgebraic_compl": 17, "translat": [17, 39, 57, 59, 62, 65, 76, 83, 85, 102, 108, 110, 120, 131, 158, 180, 187, 211, 227, 232, 233, 236, 238, 241, 242, 266, 271, 278, 350, 354, 362], "languag": [17, 108, 187, 313, 315, 354, 362, 372], "p_2": [17, 76, 88, 92, 127, 172, 186, 187, 280, 313, 354, 359, 373], "p_": [17, 62, 92, 95, 96, 108, 127, 151, 185, 187, 215, 276, 280, 284, 285, 286, 288, 289, 296, 299, 300, 301, 302, 303, 305, 316, 323], "practic": [17, 46, 120, 124, 234, 236, 244, 271, 302, 354], "antipod": [17, 110, 119, 145, 146, 147, 150, 151, 282, 290, 294, 296, 298, 300, 302, 303, 304, 305, 343], "orderedsetpartit": [17, 144, 278, 280, 354], "subr": [17, 110, 146, 147, 188, 242, 271, 296, 302], "noncommut": [17, 110, 114, 143, 144, 145, 146, 147, 151, 303], "countabl": [17, 110, 146, 147, 151, 226], "obviou": [17, 108, 122, 124, 130, 147, 225, 303, 305, 346, 348], "continu": [17, 19, 101, 120, 146, 154, 160, 164, 212, 241, 271, 276, 315, 354, 356, 359, 362, 369], "x_i": [17, 19, 136, 140, 146, 163, 182, 183, 187, 239, 275, 277, 278, 285, 288, 294, 300, 301, 303, 323, 345, 359], "i_1": [17, 30, 32, 39, 46, 48, 51, 54, 56, 60, 62, 63, 74, 90, 98, 99, 109, 114, 122, 144, 145, 146, 151, 172, 188, 212, 234, 271, 277, 278, 340, 343, 346, 347, 354], "i_2": [17, 30, 39, 48, 51, 56, 74, 90, 98, 99, 114, 122, 144, 145, 146, 151, 172, 188, 212, 234, 262, 277, 278, 343, 346, 347, 354], "i_n": [17, 30, 48, 63, 109, 122, 138, 227, 271, 340, 346, 347], "i_": [17, 30, 32, 48, 51, 54, 74, 109, 121, 122, 145, 146, 172, 343, 346, 354], "simpli": [17, 23, 46, 61, 99, 101, 108, 115, 125, 136, 145, 160, 164, 187, 211, 212, 213, 214, 215, 216, 218, 225, 226, 227, 229, 230, 232, 236, 242, 246, 247, 263, 265, 266, 268, 271, 273, 276, 278, 302, 347, 348, 354, 359, 369, 372], "stand": [17, 30, 107, 110, 145, 146, 160, 217, 284, 285, 288, 300, 301, 303, 306, 313, 343, 346], "q_": [17, 74, 82, 91, 101, 122, 146, 160, 276, 295, 303, 305, 340, 346, 362], "phi_a": 17, "phi_": [17, 122, 145, 346], "enter": [17, 50, 108, 109, 124, 131, 159, 160, 164, 172, 275, 302, 348], "ncsf": [17, 142, 143, 144, 145, 146, 147], "noncommutativesymmetricfunct": [17, 74, 110, 144, 145, 146, 343], "to_wqsym": [17, 110, 149], "_p": [17, 149, 162, 187], "m_c": [17, 147], "c2": [17, 28, 33, 39, 54, 108, 130, 139, 146, 162, 182, 187, 225, 227, 231, 233, 236, 289, 293, 359], "gf": [17, 26, 30, 77, 80, 82, 83, 85, 89, 91, 109, 110, 111, 112, 113, 121, 127, 133, 160, 168, 172, 180, 188, 189, 191, 310, 313, 336, 343, 353, 354], "is_commut": [17, 74, 110, 303], "is_field": [17, 74, 110, 303], "proof": [17, 74, 80, 92, 94, 95, 110, 114, 145, 146, 172, 177, 187, 193, 301, 303, 305, 354], "wqsymbasis_abstract": 17, "_basis_nam": [17, 110], "normal": [17, 22, 77, 99, 114, 138, 144, 156, 160, 162, 172, 180, 182, 187, 232, 234, 236, 238, 239, 242, 275, 286, 289, 293, 299, 300, 340, 374], "langl": [17, 39, 42, 46, 48, 51, 54, 55, 57, 59, 60, 61, 62, 65, 67, 68, 110, 144, 151, 239, 242, 243, 264, 271, 284, 286, 289, 299, 300, 303], "rangl": [17, 39, 42, 46, 48, 51, 54, 55, 57, 59, 60, 61, 62, 65, 67, 68, 110, 144, 151, 239, 242, 243, 264, 271, 284, 286, 289, 299, 300, 303], "operatornam": [17, 22, 36, 46, 67, 69, 98, 108, 110, 144, 146, 151, 185, 187, 193, 235, 239, 240, 303, 323, 354], "smallest": [17, 19, 25, 26, 39, 46, 71, 79, 101, 124, 130, 131, 134, 146, 152, 156, 158, 160, 172, 174, 180, 182, 187, 215, 221, 227, 242, 244, 245, 264, 266, 270, 276, 278, 280, 314, 315, 339, 346, 347, 354, 359, 364], "4112774": 17, "3112443": 17, "said": [17, 26, 30, 58, 72, 88, 89, 91, 94, 104, 116, 129, 138, 145, 146, 158, 160, 162, 180, 182, 183, 187, 265, 271, 275, 276, 278, 280, 296, 303, 310, 313, 346, 351, 359, 369], "u_j": [17, 91], "cone": [17, 22, 134, 186, 238, 240, 243, 272, 306, 340, 352], "aka": [17, 160, 187, 232, 264, 272, 314], "access": [17, 37, 50, 71, 75, 88, 91, 112, 120, 122, 125, 130, 131, 145, 146, 162, 166, 175, 186, 192, 193, 217, 232, 274, 302, 315, 347, 348, 357, 374], "especi": [17, 114, 123, 130, 354, 359], "ambigu": [17, 19, 205, 247, 280], "nothwi08": 17, "foimal14": 17, "menoth11": 17, "st": [17, 26, 66, 76, 82, 114, 116, 131, 167, 168, 169, 170, 197, 239, 282, 302, 314, 341, 346, 354, 359], "otim": [17, 48, 54, 55, 57, 59, 62, 65, 67, 68, 69, 112, 119, 144, 145, 146, 147, 149, 150, 151, 212, 215, 225, 287, 288, 303], "q_1": [17, 186, 234, 236, 241, 276, 340], "q_k": [17, 186, 340], "multipli": [17, 19, 22, 26, 80, 91, 108, 112, 123, 133, 145, 146, 160, 172, 192, 193, 225, 232, 234, 273, 277, 286, 289, 293, 296, 302, 319, 322, 329, 343, 346, 348], "box": [17, 32, 34, 51, 54, 56, 107, 116, 122, 131, 154, 158, 160, 174, 186, 197, 212, 215, 238, 242, 276, 297, 314, 315, 323, 346, 348, 350], "shuffleproduct_overlap": [17, 308], "_r": [17, 39, 146, 164, 287], "sometim": [17, 65, 89, 91, 95, 98, 108, 113, 116, 122, 123, 124, 127, 138, 139, 172, 186, 187, 278, 280, 285, 303, 315, 339, 362], "ncqsym": 17, "berzab05": 17, "express": [17, 24, 47, 55, 57, 62, 63, 68, 83, 108, 114, 133, 138, 141, 145, 146, 147, 150, 151, 172, 186, 189, 213, 214, 223, 232, 233, 239, 273, 277, 289, 293, 296, 303, 305, 340, 343, 346, 348, 354, 359, 374], "global": [17, 68, 72, 101, 130, 158, 172, 213, 214, 239, 278, 337, 343, 371], "compact": [17, 58, 157, 226, 229, 232, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 273, 340], "122": [17, 235, 359, 361, 362], "112": [17, 80, 85, 87, 90, 108, 120, 143, 235, 323, 359], "111": [17, 71, 80, 83, 92, 93, 120, 192, 235, 315, 359, 362], "reset": [17, 19, 108, 112, 213, 214, 239], "_reset": [17, 68, 130, 157, 160, 164, 213, 214, 313, 346, 348], "counit": [17, 119, 144, 145, 146, 149, 282, 290, 296, 298, 302, 303, 304], "aris": [17, 19, 160, 164, 205, 212, 218, 221, 227, 347, 348, 354], "referenc": [17, 365], "receiv": [17, 89, 218, 354], "varieti": [17, 56, 134, 141, 160, 276, 277, 292, 343], "treat": [17, 99, 100, 137, 160, 225, 226, 280, 303, 310, 311, 323, 346, 354], "x_p": [17, 187, 275], "_1": [17, 26, 69, 108, 188], "_k": [17, 109, 172, 336, 343], "i_0": [17, 57, 109, 114, 215, 232, 233], "i_k": [17, 30, 39, 46, 56, 62, 74, 109, 114, 122, 144, 145, 146, 151, 161, 172, 188, 212, 234, 271, 277, 343, 346, 347, 364], "min": [17, 60, 72, 98, 107, 108, 120, 122, 124, 136, 160, 172, 187, 215, 278, 280, 310, 315, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 346, 354, 355, 359], "i_j": [17, 54, 63, 133, 146], "p_a": [17, 108, 160, 186, 311], "_j": [17, 114, 124, 160, 215, 226, 231, 287], "c_p": 17, "sum_q": 17, "x_q": 17, "_2": [17, 26, 61, 69, 108, 109], "early2017": 17, "experi": [17, 146, 147, 244, 362], "suggest": [17, 77, 98, 227, 229, 230, 338, 354], "seem": [17, 72, 96, 145, 160, 172, 187, 303, 305, 354, 359], "_w": [17, 110, 303], "phi_p": 17, "novelli": [17, 146, 150, 346], "thibon": [17, 143, 146, 147, 150, 162, 292, 302, 303], "novthi06": 17, "reappear": 17, "phi_x": 17, "phi_z": 17, "merg": [17, 59, 68, 101, 108, 111, 113, 154, 272, 280, 358, 362, 369, 372], "middl": [17, 27, 99, 101, 161], "minimum": [17, 33, 89, 99, 102, 108, 123, 141, 160, 161, 180, 186, 187, 211, 232, 278, 302, 307, 313, 363], "don": [17, 76, 90, 91, 92, 146, 160, 172, 215, 241, 269, 278, 284, 308, 313, 336, 343, 369], "bar": [17, 58, 65, 109, 187, 212, 241, 280, 287, 302, 333, 342], "consecut": [17, 30, 59, 61, 80, 88, 101, 108, 118, 124, 127, 141, 160, 182, 186, 187, 196, 278, 280, 313, 314, 315, 346, 350, 354, 356, 359, 369], "setminu": [17, 30, 83, 97, 108, 139, 160, 180, 182, 183, 187, 233, 240, 278, 302, 364], "come": [17, 46, 53, 56, 80, 83, 92, 99, 108, 110, 111, 120, 122, 129, 139, 141, 143, 145, 152, 156, 160, 163, 164, 172, 187, 215, 216, 217, 227, 236, 237, 238, 244, 276, 303, 310, 342, 354], "had": [17, 108, 138, 159, 205, 238, 354], "separ": [17, 36, 68, 86, 92, 93, 103, 108, 111, 115, 131, 141, 157, 232, 238, 276, 342, 358, 362, 368, 371], "compendium": [18, 19, 20, 21, 22, 23], "packag": [18, 19, 20, 21, 22, 23, 26, 77, 86, 89, 101, 108, 130, 132, 147, 154, 228, 239, 240, 278, 291, 302, 354], "ms2011": [18, 19, 20, 21, 22, 23], "seed": [19, 21, 22, 234, 236, 238], "symmetriz": [19, 22, 23, 213, 226, 227], "independ": [19, 54, 76, 93, 108, 131, 136, 145, 172, 187, 192, 238, 239, 272, 278, 284, 303, 310, 337, 338, 340, 343, 350, 359], "gregg": [19, 20, 21, 22, 23], "musik": [19, 20, 21, 22, 23], "christian": [19, 20, 21, 22, 23, 24, 70, 101, 153, 154, 222, 226, 231, 239, 240, 303, 340], "stump": [19, 20, 21, 22, 23, 24, 70, 101, 153, 154, 222, 226, 231, 239, 240, 340], "aram": [19, 154], "dermenjian": [19, 154], "07": [19, 26, 39, 74, 87, 101, 108, 109, 160, 165, 172, 188, 200, 226, 276, 309, 310, 311, 315, 341, 347, 362, 372], "01": [19, 26, 79, 81, 98, 101, 108, 109, 160, 164, 172, 173, 192, 200, 212, 239, 266, 274, 290, 315, 347, 356, 359, 362, 363, 365, 367, 369], "abil": [19, 172], "jess": 19, "levitt": 19, "fz2007": 19, "bdp2013": 19, "cluster_algebra_quiv": [19, 21, 22, 23], "quiver_mutation_typ": [19, 23], "quivermutationtyp": [19, 21, 22, 23], "close": [19, 22, 39, 86, 99, 101, 108, 115, 138, 145, 154, 160, 180, 182, 187, 192, 238, 306, 346, 347, 354, 363, 374], "clusterquiv": [19, 21, 22], "cluster_se": 19, "is_princip": 19, "user_label": [19, 22], "user_labels_prefix": 19, "exchang": [19, 22, 33, 59, 96, 101, 128, 278, 359, 362], "_m": [19, 22, 55], "_digraph": [19, 22], "gr": [19, 22, 23, 56, 303], "_use_fpoli": 19, "_use_d_vec": 19, "_use_g_vec": 19, "_use_c_vec": 19, "use_fpoli": 19, "llm_gen_set": 19, "size_limit": 19, "x1": [19, 26, 111, 113, 116, 119, 133, 138, 140, 145, 146, 147, 149, 151, 156, 160, 182, 183, 187, 190, 236, 239, 273, 276, 277, 284, 285, 286, 288, 294, 296, 297, 300, 301, 302, 303, 343, 358], "x3": [19, 26, 116, 133, 138, 145, 146, 147, 151, 183, 187, 190, 236, 277, 300, 301, 303, 343], "x0": [19, 26, 133, 140, 145, 146, 147, 149, 151, 160, 182, 183, 190, 236, 239, 273, 277, 284, 285, 286, 288, 294, 296, 297, 300, 301, 302, 303, 343, 358], "x4": [19, 26, 138, 277, 343], "x2": [19, 26, 111, 113, 116, 119, 133, 138, 145, 146, 147, 149, 151, 156, 160, 182, 183, 187, 190, 236, 273, 277, 285, 288, 294, 297, 300, 301, 302, 303, 333, 358], "x5": 19, "b_matrix": [19, 21, 22, 23], "b_matrix_class": 19, "up_to_equival": [19, 22], "distanc": [19, 22, 39, 59, 101, 108, 131, 154, 196, 238, 242, 359], "b_matrix_class_it": 19, "266": [19, 26, 80, 92, 151, 363], "arbitrarili": [19, 54, 92, 108, 348, 369], "dg": [19, 21, 22, 187], "format": [19, 22, 49, 56, 59, 83, 84, 85, 86, 93, 94, 108, 109, 130, 131, 172, 180, 182, 183, 187, 191, 192, 235, 238, 239, 240, 241, 242, 243, 276, 313, 314, 326, 340, 342, 345, 354, 359, 362, 365, 367, 369], "list_of_edg": [19, 22, 130], "c_matrix": 19, "show_warn": 19, "coher": 19, "conjectur": [19, 23, 26, 59, 134, 138, 159, 162, 172, 216, 237, 290, 293, 296, 302, 305, 343, 349, 359], "principal_extens": [19, 22], "use_g_vector": 19, "use_c_vector": 19, "use_d_vector": 19, "track_mut": 19, "c_vector": 19, "bot_is_c": 19, "cluster_class": 19, "show_depth": [19, 22], "return_depth": 19, "cluster_class_it": 19, "cluster_index": 19, "cluster_str": 19, "cluster_vari": 19, "y0": [19, 145, 146, 151, 234, 236, 241, 284, 285, 286, 288, 301], "y2": [19, 134, 145, 146, 151, 234, 236, 285], "y1": [19, 134, 145, 146, 151, 234, 236, 241, 284, 285, 286, 288, 301], "d_matrix": 19, "d_vector": 19, "expon": [19, 99, 108, 124, 146, 160, 164, 193, 236, 239, 293, 294, 315, 352, 359, 369], "denomin": [19, 273, 289, 293, 315, 354, 374], "exchangeable_part": [19, 22], "princip": [19, 22, 180, 182, 185, 186, 187, 226, 285, 288, 294, 300, 301, 303, 310, 354, 363], "f_polynomi": [19, 187], "find_upper_bound": 19, "laurent": [19, 163, 182, 185, 236, 241, 354, 374], "neighbor": [19, 108, 115, 116, 130, 187, 238, 313, 314, 346, 350], "mm2015": 19, "coprim": [19, 22, 182, 349], "unfrozen": 19, "bfz2005": 19, "rapidli": [19, 354], "step": [19, 59, 85, 92, 98, 101, 104, 107, 108, 109, 118, 122, 124, 127, 134, 139, 153, 154, 155, 158, 159, 160, 172, 186, 193, 199, 205, 207, 209, 212, 215, 219, 234, 241, 242, 271, 276, 313, 346, 349, 354, 359, 363], "infeas": 19, "amount": [19, 127, 173, 187, 352, 359], "forev": [19, 124, 350, 356, 366], "termin": [19, 273, 276, 366], "spe2013": 19, "multivari": [19, 101, 111, 113, 133, 159, 182, 234, 236, 293, 302, 303, 332], "x0p": 19, "x1p": 19, "x2p": 19, "z0": [19, 294, 354], "markov": [19, 108, 139, 183], "first_green_vertex": 19, "green": [19, 22, 37, 46, 62, 102, 108, 120, 130, 134, 160, 183, 185, 186, 187, 227, 238, 242, 276, 310, 312, 346, 350], "first_red_vertex": 19, "red": [19, 46, 98, 102, 115, 120, 130, 134, 154, 158, 160, 183, 186, 227, 237, 238, 242, 312, 350, 362, 363], "first_urban_renew": 19, "urban": 19, "renew": 19, "arrow": [19, 23, 36, 39, 46, 51, 56, 108, 187, 227, 231, 238, 265, 266, 312, 363, 365, 373], "toward": [19, 96, 232, 238, 242, 266, 354], "awai": [19, 266], "free_vertic": [19, 22], "frozen_vertic": [19, 22], "g_matrix": 19, "y_i": [19, 60, 91, 234, 236], "g_vector": 19, "get_upper_cluster_algebra_el": 19, "llm2014": 19, "vd": 19, "irreduc": [19, 23, 46, 58, 60, 108, 160, 162, 164, 177, 180, 182, 225, 227, 228, 229, 230, 231, 232, 235, 239, 240, 242, 244, 253, 263, 268, 270, 273, 274, 282, 302, 303, 310, 316, 340, 343, 344, 347, 348, 362], "greedi": [19, 114, 139, 180, 183, 187, 340], "by_recurs": 19, "a_2": [19, 26, 39, 49, 50, 68, 73, 101, 108, 114, 129, 138, 146, 151, 160, 163, 172, 182, 187, 225, 234, 236, 238, 242, 273, 276, 278, 314, 345, 346, 348, 350], "third": [19, 30, 76, 83, 99, 108, 138, 139, 145, 160, 163, 187, 188, 225, 244, 276, 303, 315], "by_combinator": 19, "just_numb": 19, "llz2014": 19, "r2": [19, 23, 39, 83, 93, 139, 232, 273], "green_vertic": 19, "ground_field": 19, "ground": [19, 57, 65, 74, 77, 82, 89, 91, 92, 94, 97, 99, 118, 130, 146, 160, 168, 171, 172, 221, 236, 241, 278, 294, 313, 340, 343], "highest_degree_denomin": 19, "interact": [19, 22, 192], "fig_siz": [19, 22], "circular": [19, 22, 23, 159, 278], "jupyt": [19, 22], "notebook": [19, 22, 108], "mode": [19, 22, 108, 225], "plot": [19, 22, 23, 39, 46, 62, 68, 101, 102, 108, 114, 115, 130, 134, 154, 156, 158, 168, 172, 174, 187, 190, 211, 222, 227, 242, 244, 245, 259, 274, 278, 311, 312, 340, 346, 350, 354, 359, 362, 363, 365, 373], "spring": [19, 22, 23, 76], "is_acycl": [19, 22], "iff": [19, 89, 107, 130, 138, 180, 187, 242, 244, 359, 369], "is_bipartit": [19, 22], "return_bipartit": [19, 22], "bipartit": [19, 22, 89, 187, 227, 240, 242, 354], "is_mutation_finit": [19, 21, 22, 23], "nr_of_check": [19, 21, 22], "return_path": [19, 22], "500": [19, 21, 22, 83, 90, 160, 187, 346, 359, 363], "b_": [19, 26, 48, 54, 56, 59, 65, 68, 74, 91, 92, 109, 112, 127, 138, 141, 163, 182, 225, 227, 229, 242, 276, 293, 343, 369], "ij": [19, 42, 60, 82, 91, 131, 133, 138, 150, 163, 174, 226, 229, 239, 242], "ji": [19, 60, 62, 182, 186, 226, 310], "determinist": [19, 21, 22, 46, 108, 109, 365], "wrong": [19, 21, 22, 30, 91, 95, 99, 108, 124, 127, 138, 161, 173, 193, 275, 302, 346, 374], "_mutation_typ": [19, 22], "most_decreased_denominator_after_mut": 19, "most_decreased_edge_after_mut": 19, "inplac": [19, 22, 88, 89, 108, 156, 180, 231, 373], "input_typ": 19, "first_sourc": [19, 22], "sourc": [19, 22, 29, 86, 117, 172, 183, 187, 225, 302, 303, 346], "first_sink": [19, 22], "sink": [19, 22, 46, 108, 172, 187], "urban_renew": 19, "all_urban_renew": 19, "all_urban": 19, "cluster_var": 19, "select": [19, 26, 28, 78, 82, 91, 108, 109, 158, 160, 172, 187, 211, 225, 278, 291, 348, 353, 354], "last_vertex": 19, "x_1_2": 19, "x_2_3": 19, "x_4_5": 19, "x_5_6": 19, "p_1_2": 19, "p_2_3": 19, "p_4_5": 19, "p_5_6": 19, "_c": [19, 150, 151], "_g": 19, "_f": 19, "_mut_path": 19, "xneg1": 19, "mutation_analysi": 19, "analysi": [19, 90, 108, 113, 303, 354], "potenti": [19, 101, 114, 123], "edge_diff": 19, "green_vertices_diff": 19, "red_vertic": 19, "red_vertices_diff": 19, "urban_renewals_diff": 19, "sources_diff": 19, "sinks_diff": 19, "itself": [19, 58, 72, 86, 89, 96, 98, 109, 120, 125, 134, 139, 145, 146, 153, 156, 160, 172, 187, 191, 193, 232, 238, 264, 266, 271, 275, 276, 289, 300, 301, 302, 303, 306, 307, 314, 336, 337, 343, 346, 348, 354, 359, 365, 368, 372], "only_sink_sourc": 19, "track": [19, 92, 108, 141, 187, 239, 240, 274, 348], "mutation_class_it": [19, 22], "shortest": [19, 22, 59, 71, 124, 131, 133, 160, 172, 239, 242, 243, 359], "sink_sourc": [19, 22], "simultan": [19, 54, 88, 95, 99, 108, 171, 172, 236, 244, 302, 310, 343, 354], "record": [19, 22, 29, 37, 39, 51, 64, 141, 143, 159, 160, 172, 276], "14638": 19, "mc": [19, 26, 162, 172, 291], "534": 19, "mutation_sequ": [19, 22], "show_sequ": [19, 22], "return_output": 19, "png": [19, 22, 238], "var": [19, 99, 108, 109, 111, 113, 160, 171, 187, 193, 236, 285, 288, 294, 297, 300, 301, 303, 333, 354, 374], "mutation_typ": [19, 21, 22], "detect": [19, 21, 22, 72, 124, 136, 193, 337, 350], "yet": [19, 22, 23, 108, 124, 138, 160, 180, 182, 187, 191, 192, 225, 227, 236, 242, 265, 272, 278, 313, 336, 338, 354, 363, 372], "fail": [19, 39, 76, 83, 98, 101, 120, 139, 156, 180, 192, 238, 239, 244, 249, 265, 269, 340, 343, 347, 359], "within": [19, 89, 101, 108, 124, 141, 146, 147, 172, 239, 302, 307, 346, 354, 359, 365, 368], "process": [19, 51, 86, 92, 108, 162, 172, 187, 193, 276, 314, 346, 363, 365, 369], "_quiver": 19, "todo": [19, 22, 58, 112, 180, 289, 321, 338, 359, 362, 363], "undetermin": [19, 22], "undergon": 19, "oriented_exchange_graph": 19, "out_degree_sequ": 19, "save_po": [19, 22], "force_c": 19, "with_green": 19, "add_label": 19, "highlight": [19, 22, 238], "save": [19, 22, 23, 108, 160, 238, 363], "primit": [19, 22, 46, 62, 83, 91, 101, 102, 114, 115, 119, 130, 145, 149, 151, 154, 156, 158, 160, 168, 174, 187, 211, 238, 239, 242, 244, 278, 300, 302, 310, 311, 340, 346, 350, 354, 359, 362, 363, 365, 373], "y3": [19, 134, 145, 146, 285], "reorient": [19, 22], "reset_clust": 19, "p_3_4": 19, "reset_coeffici": 19, "command": [19, 26, 108, 146, 147, 158, 225, 273, 274, 302, 354], "phase": 19, "effect": [19, 89, 108, 123, 136, 172, 186, 187, 225, 242, 336, 350], "save_imag": [19, 22], "filenam": [19, 22, 138], "tempfil": [19, 22], "namedtemporaryfil": [19, 22], "set_c_matrix": 19, "Will": [19, 22, 160], "set_clust": 19, "lead": [19, 91, 108, 147, 172, 193, 236, 354, 359], "inconsist": [19, 112], "cluster2": 19, "warn": [19, 22, 23, 26, 60, 124, 193, 238, 315, 359], "smallest_c_vector": 19, "ensur": [19, 30, 83, 93, 164, 172, 180, 186, 193, 271, 276, 314, 315, 365], "agre": [19, 23, 26, 34, 54, 101, 108, 116, 120, 131, 133, 145, 160, 169, 212, 215, 227, 236, 271, 276, 302, 303, 346, 359], "universal_extens": 19, "almost": [19, 24, 96, 112, 124, 234, 236, 240, 242, 243, 315], "coroot": [19, 39, 46, 48, 51, 54, 59, 60, 61, 67, 221, 225, 227, 231, 232, 233, 234, 235, 236, 238, 239, 241, 242, 243, 244, 259, 264, 265, 267, 269, 270, 271, 272, 273], "consequ": [19, 83, 92, 108, 120, 131, 145, 164, 187, 188, 275, 278, 305, 343, 346, 354], "return_first": 19, "reconstruct": [19, 227, 265], "usabl": [19, 299], "know": [19, 26, 76, 77, 83, 84, 88, 90, 91, 93, 94, 96, 98, 101, 120, 124, 127, 133, 138, 145, 146, 147, 180, 187, 222, 242, 271, 273, 290, 296, 302, 303, 326, 337, 346, 354, 359, 366], "try": [19, 72, 84, 86, 96, 108, 124, 160, 172, 180, 187, 222, 225, 226, 238, 273, 343, 345, 350, 354, 359, 363], "recomput": [19, 26, 180, 215, 356], "overwrit": [19, 346], "_cluster": 19, "variable_class": 19, "ignore_bipartite_belt": 19, "belt": [19, 160, 164], "variable_class_it": 19, "restart": 19, "counter": [19, 23, 108, 354], "manual": [19, 89, 98, 108, 109, 156, 187, 193, 239, 296, 302, 343, 362], "it2": 19, "clustervari": 19, "numer": [19, 26, 76, 89, 108, 113, 130, 136, 225, 273, 275, 277, 278, 289, 293, 315, 354, 362, 374], "coerc": [19, 26, 47, 68, 99, 109, 112, 149, 168, 172, 192, 221, 227, 232, 303, 343, 359, 374], "variable_typ": 19, "xdim": 19, "fractionfieldel": 19, "thin": [19, 26], "featur": [19, 46, 96, 102, 108, 112, 124, 183, 187, 227, 236, 238, 242, 272, 274, 310, 343, 372], "store": [19, 21, 72, 85, 89, 96, 105, 108, 130, 131, 138, 141, 180, 199, 217, 240, 274, 275, 306, 345, 365], "almost_positive_root": [19, 240, 242], "pathsubset": 19, "settopath": 19, "rearrang": [19, 159], "coeff_recur": 19, "expans": [19, 73, 108, 109, 133, 143, 144, 145, 146, 147, 149, 150, 187, 193, 235, 284, 285, 288, 290, 292, 294, 296, 297, 299, 300, 301, 303, 305, 315, 369], "get_green_vertic": 19, "get_red_vertic": 19, "is_leelizel_allow": 19, "lee": [19, 54], "paper": [19, 79, 80, 83, 95, 99, 107, 138, 143, 145, 146, 172, 187, 278, 303, 307, 343, 344, 348], "19495": 21, "add_vertex": 21, "load_data": 21, "load": [21, 26, 29, 139, 161, 172, 194, 277, 297, 318, 322, 323, 325, 327, 328, 329, 330, 331, 333, 334, 335, 343, 363, 364, 373], "dict": [21, 102, 108, 112, 136, 141, 158, 172, 180, 187, 191, 273, 350, 356, 359, 362, 363, 369], "dig6": [21, 22, 23], "unless": [21, 22, 101, 108, 119, 123, 124, 146, 147, 151, 156, 160, 172, 174, 187, 188, 192, 242, 275, 278, 300, 302, 310, 314, 343], "instal": [21, 46, 77, 89, 187, 239, 240, 315, 363], "database_mutation_class": 21, "ao": [21, 365], "ba": [22, 99, 356, 359, 360, 362, 363, 369, 372], "mt": [22, 23, 91, 93, 352], "standard_quiv": [22, 23], "dg2": 22, "is_isomorph": [22, 33, 37, 39, 48, 51, 53, 54, 56, 59, 60, 61, 77, 80, 87, 89, 160, 162, 172, 182, 183, 186, 187, 213, 214, 216, 306, 307, 333, 365], "edge_label": [22, 37, 39, 48, 51, 53, 54, 56, 59, 60, 61, 108, 134, 162, 211, 213, 214, 216, 238, 242, 307, 365, 373], "tr": [22, 23, 109, 354], "certif": [22, 89, 182, 187], "generic_graph": 22, "genericgraph": [22, 187], "iso": [22, 181], "d_vector_fan": 22, "simplici": [22, 24, 187, 340, 352], "smooth": [22, 359, 369], "geometri": [22, 77, 92, 158, 187, 190, 222, 242, 340, 363], "polyhedron": [22, 62, 186, 187, 190, 222, 238, 240, 242, 340], "lib": [22, 26, 28, 46, 76, 80, 83, 108, 152, 160, 164, 172, 180, 182, 187, 188, 189, 190, 194, 227, 228, 236, 241, 242, 244, 271, 278, 314, 348, 352, 356], "fd": 22, "ngenerating_con": 22, "is_smooth": 22, "subquiv": 22, "g_vector_fan": 22, "fg": [22, 112], "add_vertic": [22, 56, 227], "add_edg": [22, 56, 89, 227, 231], "data_typ": 22, "expand": [22, 99, 133, 145, 146, 147, 149, 150, 151, 160, 187, 236, 241, 273, 277, 284, 285, 286, 288, 289, 292, 293, 294, 296, 297, 300, 301, 302, 303, 305, 346, 354], "seq": [22, 65, 71, 72, 101, 138, 160, 163, 188, 310, 345, 359], "recognit": 22, "save_quiver_data": [22, 23], "ke2008": 22, "number_of_edg": 22, "taken": [22, 23, 30, 33, 72, 74, 83, 96, 102, 108, 110, 113, 114, 119, 130, 134, 136, 138, 141, 145, 156, 159, 160, 172, 174, 182, 187, 227, 232, 234, 238, 298, 303, 304, 313, 345, 346], "center": [22, 101, 182, 225, 227, 232, 238, 242, 278, 350, 359], "poincare_semist": 22, "poincar\u00e9": [22, 303], "moduli": 22, "dimens": [22, 25, 30, 77, 83, 91, 98, 102, 109, 112, 127, 138, 151, 160, 172, 186, 187, 192, 193, 211, 218, 221, 222, 225, 235, 236, 239, 242, 244, 245, 248, 251, 253, 255, 257, 259, 264, 265, 267, 268, 269, 270, 271, 273, 306, 310, 313, 316, 340, 343, 350, 354, 362, 363], "stabil": [22, 59, 67, 74, 83, 232, 238, 239, 242, 303, 316, 343, 346, 348], "slope": [22, 30, 101, 123, 124, 160, 186, 349, 359, 369], "dim": [22, 25, 187, 188, 193, 216, 217, 236], "rei2002": 22, "k2": [22, 26, 56, 86, 101, 108, 154, 216, 218, 242, 271], "k3": [22, 59, 218], "marku": 22, "reinek": 22, "harder": [22, 72], "narasimhan": 22, "quantum": [22, 39, 59, 147, 160, 162, 164, 182, 185, 211, 216, 236, 243, 271, 292, 304, 343, 346, 347, 348], "cohomologi": [22, 134, 277], "arxiv": [22, 92, 101, 108, 120, 134, 139, 143, 146, 150, 151, 159, 171, 200, 211, 212, 216, 218, 227, 236, 242, 266, 271, 276, 278, 282, 292, 293, 297, 300, 302, 303, 304, 305, 310, 311, 349, 350], "math": [22, 77, 80, 81, 83, 92, 101, 102, 108, 116, 127, 134, 143, 146, 147, 151, 159, 165, 171, 172, 180, 186, 187, 189, 211, 216, 218, 225, 227, 232, 235, 236, 241, 242, 271, 273, 274, 276, 284, 286, 289, 290, 291, 292, 293, 296, 297, 300, 302, 303, 304, 305, 306, 310, 311, 340, 362, 369], "0204059": 22, "outgo": [22, 108, 117, 187, 242, 312, 359, 365], "qmu_sav": 22, "qmu": 22, "open": [22, 46, 64, 86, 101, 115, 154, 160, 183, 187, 278, 302, 346], "bernhard": 22, "keller": 22, "applet": 22, "webus": 22, "imj": 22, "prg": 22, "fr": [22, 146, 197, 344, 369], "quivermut": 22, "from_sag": 22, "directori": 22, "sure": [22, 59, 76, 80, 91, 92, 108, 112, 124, 125, 127, 136, 152, 161, 187, 215, 238, 302, 314, 346, 361, 362], "14851": 22, "around": [22, 26, 79, 105, 130, 138, 187, 199, 227, 286, 296, 302, 303, 315, 333, 354, 359], "duplic": [22, 26, 28, 108, 187, 191], "revert": [22, 145, 346, 359], "hugh": [23, 77, 182, 354], "thoma": [23, 114, 147, 182, 302, 303, 354], "arg": [23, 26, 30, 73, 91, 93, 108, 124, 125, 139, 140, 144, 160, 172, 182, 192, 193, 197, 227, 231, 238, 240, 241, 242, 296, 326, 332, 340, 346, 347, 363, 365, 372, 373], "slight": [23, 110, 227, 242, 247, 264, 271, 272, 359], "background": [23, 147, 160, 186, 187, 236, 349], "generalized_cartan_matrix": 23, "invert": [23, 85, 120, 146, 215, 219, 241, 265, 285, 288, 294, 300, 301, 303, 310, 343, 352, 354], "dm": [23, 84, 227], "twist": [23, 56, 59, 77, 138, 162, 227, 232, 234, 235, 236, 241, 249, 264, 265, 267, 269], "naiv": [23, 26, 85, 146, 172, 188, 236, 278, 354, 359], "bb": [23, 62, 99, 138, 333, 359, 362, 368, 372], "cc": [23, 26, 33, 138, 147, 165, 215, 216, 221, 245, 273, 354, 362, 372], "cd": [23, 58, 108, 268, 359, 362, 364, 369], "peopl": [23, 146, 323, 332, 354], "enough": [23, 29, 85, 123, 172, 182, 193, 234, 242, 244, 278, 303, 347, 354, 374], "accept": [23, 26, 69, 108, 124, 146, 156, 172, 183, 187, 188, 189, 226, 264, 265, 271, 272, 276, 303, 354, 359, 363, 366, 374], "ellipt": 23, "saito": 23, "grid": [23, 101, 115, 120, 154, 278, 312, 359, 363], "derksen": 23, "owen": 23, "BE": 23, "ce": [23, 108, 192], "antenna": 23, "slightli": [23, 55, 72, 80, 89, 101, 124, 156, 172, 187, 247, 272, 346, 348, 354], "exercis": [23, 101, 172, 187, 227, 265, 276, 285, 300, 301, 302, 303, 305, 315], "book": [23, 71, 182, 273, 286, 293, 313, 315, 344, 354, 359], "dimension": [23, 52, 56, 59, 62, 74, 77, 83, 98, 102, 112, 116, 157, 162, 172, 185, 187, 211, 212, 216, 225, 227, 235, 236, 238, 239, 240, 242, 271, 273, 303, 310, 340, 343, 350, 354, 362], "good": [23, 29, 77, 96, 123, 129, 138, 146, 162, 164, 236, 238, 241, 275, 302, 337, 338, 354, 363], "dynkin_diagram": [23, 220, 226, 227, 231, 233, 235, 242, 244, 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 265, 266, 267, 268, 269, 270, 273], "unfold": [23, 39], "felikson": 23, "shapiro": 23, "tumarkin": 23, "fst2012": 23, "mainli": [23, 85, 120, 145, 160, 225, 286, 293, 314, 346, 354, 362], "quivermutationtypefactori": 23, "sampl": [23, 227, 229, 230, 241, 242, 264], "mutation_finit": 23, "quivermutationtype_irreduc": 23, "quivermutationtype_abstract": 23, "class_siz": 23, "notimpl": 23, "torkildsen": 23, "bastian": 23, "prellberg": 23, "widetild": [23, 54, 60, 61, 69, 144, 145, 151, 172, 227, 276], "proven": [23, 187, 212, 215, 216, 218, 219, 237, 278, 303, 305, 346], "publish": [23, 80, 108, 278], "lace": [23, 46, 211, 212, 213, 214, 215, 216, 218, 226, 227, 229, 230, 236, 242, 246, 247, 263, 265, 266, 268, 271], "hardcod": [23, 58, 80, 138, 239, 274], "mut_typ": 23, "142120": 23, "504": 23, "14048": 23, "irreducible_compon": [23, 239], "quivermutationtype_reduc": 23, "mut_type1": 23, "mut_type2": 23, "mut_type3": 23, "fomin": [23, 120, 169, 237, 302], "reorder": [23, 25, 51, 92, 127, 146, 187, 212, 275, 303], "elsewher": [23, 99, 138], "fulton": [23, 231, 273, 346], "harri": [23, 231, 273], "disagre": 23, "bourbaki": [23, 227, 231, 232, 244, 255, 257], "alpha_i": [23, 42, 46, 48, 51, 54, 59, 68, 160, 162, 164, 227, 232, 235, 238, 240, 241, 242, 243, 244, 264, 273, 274, 303, 346, 347], "alpha_j": [23, 62, 233, 240, 242], "is_affin": [23, 226, 227, 229, 230, 231, 246, 247, 248, 249, 250, 252, 254, 255, 256, 258, 260, 261, 262, 265, 268, 270], "is_ellipt": 23, "is_irreduc": [23, 227, 229, 230, 231, 244, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 268, 270, 273], "is_simply_lac": [23, 226, 227, 229, 230, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 268], "is_skew_symmetr": 23, "classif": [23, 101, 114, 225, 239, 240, 306], "qmt": 23, "pl": [23, 99, 160, 172, 174], "scheme": [23, 76, 77, 80, 82, 88, 89, 90, 92, 94, 96, 102, 139, 141, 146, 227, 305], "up_to": 23, "classicalexcept": 23, "dot_sag": 23, "mutation_classes_n": 23, "exactli": [23, 26, 54, 76, 78, 79, 80, 82, 83, 84, 85, 88, 89, 90, 91, 92, 95, 96, 97, 100, 101, 108, 120, 130, 137, 139, 141, 146, 160, 172, 182, 187, 196, 215, 226, 241, 280, 303, 313, 314, 315, 318, 336, 341, 343, 345, 346, 348, 354, 359, 365], "clustercomplex": [24, 352], "facet": [24, 130, 134, 187, 238, 242, 340, 352], "Its": [24, 67, 77, 85, 102, 108, 110, 112, 130, 146, 160, 187, 221, 232, 233, 272, 273, 280, 285, 300, 301, 303, 305, 323], "minimal_nonfac": 24, "homologi": [24, 187, 303], "cluster_complex": 24, "coxeter_el": [24, 227, 239], "subwordcomplex": [24, 340], "convex": [24, 62, 158, 172, 180, 182, 187, 238, 240, 278, 340], "gon": [24, 101], "triangul": [24, 101, 130, 168, 311], "cls2014": 24, "bf": [24, 72, 323], "w_": [24, 59, 61, 62, 77, 108, 141, 172, 271, 303, 305, 359], "multi": [24, 33, 83, 108, 117, 141, 172, 183, 187, 197, 332, 359], "clustercomplexfacet": 24, "cyclic_rot": 24, "facet_test": [24, 340], "subwordcomplexfacet": [24, 340], "product_of_upper_clust": 24, "upper_clust": 24, "wr": 25, "colored_permut": 25, "coloredpermut": 25, "perm": [25, 33, 89, 99, 130, 172, 197, 231, 318, 319, 320, 325, 326, 327, 328, 329, 331, 333, 334, 343, 346], "multiplicativegroupel": [25, 233], "sigma_i": [25, 99, 146, 346], "sigma_": [25, 59, 99, 146], "s3": [25, 37, 39, 59, 83, 99, 108, 131, 132, 161, 193, 232, 235, 244, 274, 336, 343, 359, 373], "s4": [25, 83, 131, 274, 359], "one_line_form": 25, "number_field": [25, 108, 168, 228, 230, 362], "zeta4": 25, "c_m": [25, 138], "p_n": [25, 160, 172, 187, 285, 288, 294, 300, 301, 303, 305, 354], "t_n": [25, 234, 236, 241, 280, 303], "lift": [25, 36, 56, 57, 58, 99, 113, 129, 131, 145, 146, 151, 165, 181, 215, 216, 225, 234, 236, 264, 273, 290, 296, 302, 303, 354, 359], "generalized_symmetric_group": 25, "complex_reflection_group": [25, 239, 240], "as_permutation_group": [25, 172], "384": [25, 303, 307, 315], "codegre": [25, 172, 239, 346, 348], "d_1": [25, 72, 83, 98, 99, 101, 116, 138, 182, 369], "d_2": [25, 72, 73, 83, 98, 99, 101, 116, 182, 225, 227, 253, 268, 369], "d_i": [25, 72, 83, 98, 116], "det": [25, 138, 160, 225, 245, 303], "coxeter_matrix": [25, 187, 226, 227, 229, 230, 240, 261, 262], "2m": [25, 83, 95, 138, 315], "nm": [25, 92, 138, 145], "fixed_point_polynomi": 25, "f_g": 25, "subspac": [25, 77, 112, 146, 221, 290, 296, 302, 310, 361, 362], "131": [25, 235, 359], "231": [25, 101, 108, 314, 315, 356], "signedpermut": 25, "is_well_gener": [25, 239], "matrix_group": 25, "cyclotom": [25, 83, 91, 162, 164, 188, 230, 347, 348], "number_of_reflection_hyperplan": [25, 239], "hyperplan": [25, 39, 77, 83, 91, 221, 227, 232, 238, 239, 240, 242, 243, 270, 271, 273, 274], "276": [25, 80, 83, 90, 138, 235, 315, 340], "simple_reflect": [25, 34, 132, 172, 220, 232, 235, 236, 239, 240, 242, 244, 273, 274], "cycle_typ": [25, 172, 303, 354], "c_0": [25, 83, 138, 187, 354], "c_i": [25, 39, 83, 160, 162, 172, 227, 266, 280, 359, 374], "partitiontupl": [25, 160, 162, 164, 347, 348], "to_cycl": [25, 139, 172], "use_min": [25, 172], "negative_cycl": 25, "largest": [25, 72, 84, 90, 91, 92, 120, 123, 124, 127, 130, 131, 141, 146, 160, 172, 182, 186, 187, 215, 232, 276, 314, 315, 346, 359, 362], "c_1": [25, 39, 83, 126, 127, 130, 138, 141, 156, 172, 187, 225, 227, 241, 278, 310, 354, 359], "c_k": [25, 26, 39, 101, 126, 127, 141, 156, 187], "arug": 25, "m1": [25, 84, 90, 183, 369], "m2": [25, 84, 90, 146, 184, 352, 369], "m3": [25, 90, 182, 184, 290, 302, 369], "m4": [25, 369], "hyperoctahedr": [25, 171, 172], "wreath": [25, 164, 348], "group_gener": [25, 232, 233], "canonical_represent": 25, "414213562373095": [25, 114], "long_el": [25, 37, 234, 241, 274], "hyperoctahedral_group": 25, "conjugacy_class_repres": [25, 239], "parabol": [25, 59, 114, 160, 164, 236, 240, 242, 274], "subgroup": [25, 83, 89, 114, 127, 129, 138, 139, 160, 164, 188, 221, 225, 232, 233, 239, 240, 242, 273, 274, 310, 346, 348, 350], "relev": [26, 107, 131, 139, 225, 227, 232, 238, 323, 332, 343, 346], "docstr": [26, 108, 109, 156, 172, 275, 343], "bell_numb": 26, "catalan_numb": [26, 101, 354], "confus": [26, 99, 130, 141, 151, 172, 182, 244, 313, 339, 346, 348], "narayana": 26, "narayana_numb": 26, "euler": [26, 33, 139, 152, 160, 187, 315, 354], "euler_numb": 26, "eulerian": [26, 145, 146, 172, 187, 189, 303], "eulerian_numb": 26, "eulerian_polynomi": 26, "pari": [26, 76, 80, 83, 152, 160, 164, 187, 190, 244, 315, 356, 374], "fibonacci_numb": 26, "gap": [26, 28, 76, 77, 80, 89, 105, 139, 160, 172, 187, 188, 227, 228, 236, 239, 241, 242, 271, 274], "stirl": [26, 27, 188, 278, 280, 315], "stirling_number1": [26, 188], "stirling_number2": [26, 188, 278], "polygon": [26, 101, 168, 227, 238, 311, 315, 363], "polygonal_numb": 26, "theoret": [26, 46, 152, 171, 276, 303, 323, 354, 356], "number_of_derang": 26, "number_of_tupl": 26, "repetit": [26, 120, 145, 172, 276, 339, 353, 362], "unordered_tupl": 26, "number_of_unordered_tupl": 26, "permutations_iter": 26, "number_of_permut": 26, "bernoulli_polynomi": [26, 189], "arith": [26, 369], "wrap": [26, 28, 29, 58, 77, 79, 86, 109, 136, 140, 160, 164, 173, 176, 187, 232, 302, 359, 368], "falling_factori": 26, "ge": [26, 51, 60, 61, 67, 83, 108, 114, 130, 146, 147, 180, 182, 186, 187, 315, 345, 347, 359, 362], "gamma": [26, 34, 62, 97, 108, 139, 143, 145, 151, 163, 172, 187, 211, 215, 242, 278, 303, 352], "rising_factori": 26, "number_of_partit": [26, 160], "q_analogu": [26, 70, 188], "gaussian_binomi": [26, 188], "gaussian": [26, 188, 285, 288], "perm_gp": 26, "permgroup_el": 26, "permutationgroupel": [26, 139, 160, 172, 318, 319, 320, 325, 326, 327, 328, 329, 331, 333, 334, 344, 346, 348, 359], "guava": 26, "vandermondemat": 26, "graymat": 26, "rencontr": [26, 315], "rencontres_numb": 26, "twelvefold_wai": 26, "david": [26, 51, 77, 89, 127, 138, 146, 188], "joyner": [26, 77, 89, 127, 138, 188], "2006": [26, 79, 150, 151, 182, 188, 216, 225, 236, 241, 302, 304, 310, 315, 336, 356], "william": [26, 108, 165, 188, 305, 315, 336, 369], "stein": [26, 165, 188, 315, 336], "edit": [26, 29, 76, 79, 83, 108, 171, 216, 222, 293, 302], "doc": [26, 76, 107, 127, 162, 187, 225, 271, 273, 276, 315, 336, 339, 362, 363], "refin": [26, 30, 74, 101, 114, 143, 180, 182, 186, 187, 278, 303, 306], "bug": [26, 28, 160, 180, 187, 283, 286, 339], "combinations_iter": 26, "cookbook": 26, "hadamard_matrix": [26, 138], "2009": [26, 101, 102, 112, 127, 138, 153, 159, 160, 172, 227, 315, 336, 339, 344, 362, 363, 369, 372, 373], "02": [26, 30, 101, 107, 108, 109, 127, 157, 172, 187, 211, 239, 278, 280, 290, 313, 314, 315, 336, 339, 362, 367], "cleanup": [26, 108, 109, 128, 278], "fredrik": [26, 27], "johansson": [26, 27], "punarbasu": 26, "purkayastha": 26, "arrang": [26, 99, 103, 172, 225, 238, 278, 303, 315, 340, 354], "old": [26, 108, 160, 187, 191], "combinatorialclass": [26, 29, 30, 101, 172, 278, 280, 313, 314, 333, 344], "disappear": [26, 354, 372], "enumeratedset": [26, 46, 103], "finiteenumeratedset": [26, 99, 103, 124, 354, 358], "infiniteenumeratedset": 26, "appropri": [26, 46, 58, 99, 108, 112, 114, 138, 154, 160, 164, 183, 216, 221, 227, 230, 232, 234, 236, 238, 241, 244, 264, 268, 271, 276, 303, 343, 346, 348, 354, 374], "combinatorialobject": [26, 56, 297, 333], "__iter__": [26, 233], "temporari": [26, 86, 158, 302], "permutations_cc": 26, "is_inject": [26, 362], "text": [26, 48, 51, 60, 61, 62, 68, 69, 72, 77, 82, 83, 86, 89, 91, 92, 96, 104, 108, 129, 138, 139, 146, 160, 162, 164, 187, 188, 193, 225, 229, 238, 277, 278, 303, 323, 343, 348, 354, 369], "attrcal": [26, 36, 180, 182, 187, 238, 264], "obj": [26, 101], "right_cc": 26, "combinatorialel": [26, 30, 32, 34, 51, 73, 101, 154, 160, 164, 172, 197, 310, 313, 348, 355], "kwd": [26, 30, 32, 62, 73, 76, 88, 91, 101, 112, 124, 125, 130, 149, 154, 160, 164, 185, 187, 192, 193, 197, 222, 231, 240, 311, 326, 332, 340, 341, 343, 346, 363, 365, 372, 373], "__classcall__": 26, "mechan": [26, 216, 244, 302, 369], "slowli": [26, 132], "dump": [26, 86, 136, 139, 161, 172, 194, 277, 297, 318, 322, 323, 325, 327, 328, 329, 330, 331, 333, 334, 335, 343, 363, 364, 373], "classcal": 26, "foo": [26, 140, 187, 302], "staticmethod": 26, "cl": [26, 29, 59, 89, 176, 182, 241], "__setitem__": 26, "disabl": [26, 76, 77, 84, 88, 89, 90, 91, 92, 94, 124, 138, 172, 187, 226, 238], "shallowli": 26, "intent": [26, 108, 173], "semant": [26, 29, 112, 146, 147, 172, 236, 323, 343], "__hash__": 26, "_list": [26, 56, 370], "_hash": [26, 368], "effici": [26, 36, 39, 59, 72, 82, 93, 96, 99, 107, 108, 122, 124, 172, 186, 187, 227, 242, 271, 273, 290, 302, 340, 346, 348, 354, 356], "filteredcombinatorialclass": 26, "combinatorial_class": 26, "infiniteabstractcombinatorialclass": 26, "_infinite_cclass_slic": 26, "notimplementederror": [26, 76, 77, 83, 88, 90, 91, 108, 129, 221, 227, 242, 243, 332, 356, 359, 362, 372], "deprecationwarn": [26, 359], "com": [26, 80, 91, 92, 108, 133, 138, 143, 160, 172, 277, 346, 359], "sagemath": [26, 187, 192, 225, 273, 354, 359], "31545": 26, "mapcombinatorialclass": 26, "imagesubobject": 26, "3628800": 26, "14772": 26, "unioncombinatorialclass": 26, "left_cc": 26, "flint": [26, 160, 164, 172, 180, 187, 189, 190, 194, 278, 314, 348, 352], "dobinski": 26, "arith_bell_numb": 26, "mpmath": 26, "prec": [26, 54, 110, 111, 114, 146, 187, 240, 278, 362], "incorrect": [26, 89, 271], "low": [26, 225, 238], "k_0": [26, 276], "induct": [26, 127, 172, 275, 302, 305, 308, 340, 343, 344, 359], "inequ": [26, 72, 146, 170, 222, 232, 276, 354], "e_1": [26, 56, 102, 120, 180, 182, 183, 187, 303, 362], "e_2": [26, 102, 180, 182, 183, 187], "lfloor": [26, 108, 160, 193, 315, 346, 369], "rfloor": [26, 108, 160, 193, 315, 346, 369], "e_3": [26, 102], "e_4": 26, "align": [26, 38, 48, 57, 60, 62, 65, 68, 69, 108, 121, 138, 157, 216, 225, 232, 266, 345], "e_5": 26, "lceil": [26, 79, 369], "rceil": [26, 79, 369], "costli": 26, "sqrt": [26, 108, 138, 197, 238, 315, 344, 354, 359, 369, 374], "log_2": 26, "round": [26, 154, 296], "down": [26, 51, 83, 101, 120, 124, 134, 159, 160, 162, 164, 172, 180, 182, 186, 187, 225, 238, 242, 284, 312, 341, 346, 348], "absolut": [26, 108, 109, 131, 172, 186, 315, 362], "115975": 26, "arithmeticerror": 26, "upon": [26, 29, 76, 109, 114, 123, 124, 144, 145, 146, 160, 172, 216, 232, 238, 245, 266, 270, 275, 310, 347], "deem": [26, 77], "guess": [26, 76, 82, 86, 88, 89, 102, 145, 193, 314, 350, 354, 363, 366, 374], "temporarili": 26, "846749014511809332450147": 26, "necessari": [26, 51, 72, 91, 99, 131, 186, 233, 276, 285, 300, 301, 303, 305, 309, 348, 350, 354, 359, 368], "befor": [26, 29, 33, 52, 68, 72, 76, 77, 83, 84, 88, 89, 90, 91, 92, 94, 95, 101, 120, 138, 141, 172, 192, 217, 227, 236, 238, 244, 269, 275, 278, 306, 313, 314, 345, 348, 354, 359, 365, 368, 374], "846749014511809388871680": 26, "robert": [26, 77, 83, 172, 278], "gerbicz": 26, "jeroen": 26, "demey": 26, "accur": 26, "estim": [26, 354], "17157": 26, "blogspot": 26, "html": [26, 77, 79, 80, 81, 91, 160, 172, 187, 225, 273, 291, 310, 323, 332, 346, 354, 362], "mathworld": [26, 91, 160, 172, 346], "wolfram": [26, 91, 160, 172, 346], "dobinskisformula": 26, "bell_polynomi": 26, "j_i": [26, 101, 216, 276], "j_0": [26, 190, 276], "j_1": [26, 30, 65, 90, 98, 101, 122, 141, 146, 276, 346], "j_": [26, 65, 122, 144, 146, 276, 346], "bel1927": 26, "blair": 26, "sutton": 26, "thierri": [26, 354, 359, 363], "monteil": [26, 359, 363], "evalu": [26, 29, 109, 112, 151, 152, 160, 172, 180, 187, 189, 192, 193, 197, 291, 293, 300, 302, 303, 314, 323, 343, 346, 354, 359, 361, 365], "xt": 26, "zeta": [26, 101, 181, 187, 310], "hurwitz": [26, 33, 239], "199870": 26, "univari": [26, 99, 133, 151, 163, 182, 185, 188, 242, 286, 289, 290, 292, 293, 296, 302, 303, 329, 332, 335, 343, 354, 374], "power_sum": 26, "quad": [26, 48, 58, 68, 69, 83, 138, 145, 146, 151, 225, 285, 300, 301, 303, 305, 354, 374], "belong": [26, 76, 80, 84, 88, 89, 91, 92, 110, 113, 114, 119, 120, 151, 156, 160, 164, 172, 187, 239, 241, 242, 275, 278, 290, 308, 346, 347, 348, 364], "axbi": 26, "www": [26, 76, 79, 80, 89, 92, 101, 143, 146, 159, 172, 180, 187, 188, 291, 315, 323, 332, 346, 354, 362, 363, 369], "histori": [26, 124], "andrew": [26, 157, 160, 162, 164, 346, 347, 348], "ac": [26, 89, 108, 323, 332, 339, 354, 359, 362, 365, 369, 372], "uk": [26, 91], "catalannumb": 26, "arith_euler_numb": 26, "1385": 26, "powerseriesr": [26, 160], "exp": [26, 108, 145, 146, 160, 239, 294], "720": [26, 288, 315, 323, 324], "277": [26, 80], "8064": 26, "50521": 26, "coeff": [26, 112, 144, 172, 193, 244, 297, 302, 303], "f_n": [26, 92, 112, 114, 146, 239, 323], "f_1": [26, 56, 89, 108, 112, 145, 239], "f_2": [26, 108, 145], "fibo": [26, 362, 374], "ten": [26, 46], "hundr": [26, 354], "354224848179261915075": 26, "fibonacci_sequ": 26, "stop": [26, 90, 108, 124, 180, 276, 303, 350, 359, 368], "fib": [26, 315, 369], "144": [26, 80, 138, 188, 315, 354, 367, 374], "233": [26, 80, 83, 354, 359, 367], "377": [26, 315, 354, 367, 374], "610": [26, 354, 367], "987": [26, 189, 315, 354, 362], "1597": [26, 80], "2584": [26, 315], "4181": 26, "110": [26, 120, 187, 192, 193, 315, 359, 362], "69919376923075308730013": 26, "fibonacci_xrang": 26, "bobbi": 26, "moretti": 26, "fibs_in_some_rang": 26, "14930352": 26, "24157817": 26, "39088169": 26, "63245986": 26, "is_even": [26, 120, 172, 193], "1089154": 26, "229": [26, 80, 108, 296], "l_n": [26, 121, 126, 182, 303, 359], "l_": [26, 99, 101, 121, 182, 303], "l_1": [26, 99, 121, 126, 139, 182, 216, 303, 308, 359, 364], "l_2": [26, 121, 139, 303, 308, 364], "is_prim": [26, 307, 354], "199": [26, 80, 315], "322": [26, 315], "521": [26, 80, 302, 315], "843": [26, 236], "1364": 26, "counterexampl": 26, "418": [26, 90, 302], "brualdi": 26, "introductori": [26, 108], "4th": [26, 159], "ed": [26, 36, 130, 134, 289, 363], "prentic": 26, "2004": [26, 70, 80, 90, 101, 190, 302, 340], "sum_k": [26, 145], "n_": [26, 193, 310, 359], "unlik": [26, 86, 115, 172, 197, 221, 238, 275, 296], "redund": [26, 120, 314], "nrtupl": 26, "nrunorderedtupl": 26, "gonal": 26, "famou": [26, 354, 359, 369], "pascal": [26, 315, 354], "pentagon": [26, 182, 186, 315], "117": [26, 85, 180, 315], "hexagon": [26, 182, 363], "120": [26, 76, 80, 83, 89, 90, 91, 126, 134, 180, 227, 235, 238, 274, 315, 323, 324], "153": [26, 80, 83, 303], "real_mpfr": [26, 168], "attempt": [26, 108, 114, 124, 164, 205, 296, 354, 359, 374], "realnumb": 26, "stirling_numbers_of_the_first_kind": 26, "stirling1": 26, "arith_stirling_number_1u": 26, "269325": 26, "stirling_numbers_of_the_second_kind": 26, "nativ": [26, 176, 354], "arith_stirling_number_2": 26, "stirling2": 26, "rjust": 26, "301": [26, 80, 146, 152], "350": [26, 80, 172, 189, 235], "140": [26, 83, 90, 92, 131, 147, 180, 183, 315, 359], "127": [26, 83, 85, 90, 124, 315, 366], "966": 26, "1701": 26, "1050": 26, "255": [26, 80, 90, 91, 92, 93, 315, 366, 367], "3025": 26, "7770": 26, "6951": 26, "2646": 26, "462": [26, 90, 225, 315], "ks_2": 26, "42525": 26, "mset": [26, 28, 172, 353], "finite_r": [26, 30, 76, 80, 82, 83, 89, 97, 109, 112, 127, 130, 160, 172, 174, 180, 183, 278, 313, 348, 353, 354], "lastli": [26, 56], "jon": 26, "hank": 26, "08": [26, 30, 50, 98, 102, 108, 109, 133, 149, 150, 151, 157, 172, 226, 276, 287, 307, 313, 314, 315, 346, 348], "often": [26, 33, 72, 96, 99, 108, 110, 120, 160, 164, 172, 182, 187, 234, 264, 315, 336, 343, 346, 354], "combinations_with_replac": 26, "unorderedtupl": [26, 353], "unshuffle_iter": 26, "unshuffl": [26, 343], "bigl": [26, 38, 48, 54, 60, 68, 160, 273], "bigr": [26, 38, 48, 54, 60, 68, 160, 273], "combinat_cython": 27, "lyndon_word_iter": 27, "fkm": 27, "rus2003": 27, "perfect_matchings_iter": 27, "walsh": 27, "wal2001": 27, "set_partition_composit": [27, 161], "sp1": [27, 99, 161, 278], "sp2": [27, 99, 161, 278, 359], "antoin": [28, 165], "genitrini": 28, "choosenk": 28, "combinations_setk": 28, "combinations_mset": 28, "combinations_msetk": 28, "nrcombin": 28, "combinations_set": 28, "16000": 28, "8732673194560003200": 28, "from_rank": [28, 172], "factorad": [28, 172], "present": [28, 59, 72, 76, 92, 98, 108, 119, 125, 139, 158, 172, 182, 192, 221, 236, 239, 240, 302, 303, 343, 354, 356, 359, 362], "dgh2020": 28, "literatur": [28, 57, 65, 74, 120, 127, 145, 160, 162, 164, 172, 182, 225, 241, 264, 272, 303, 343, 346, 348, 354, 359], "combinad": 28, "jame": [28, 101, 115, 159, 305, 343], "mccaffrei": 28, "msdn": 28, "decor": [29, 111, 113, 116, 119, 120, 158, 192, 217, 227, 326, 337, 365], "combinatorial_map": 29, "mypermut": 29, "op": [29, 99, 163, 373], "combinatorial_map_wrapp": 29, "welcom": [29, 124, 227, 244, 338, 346], "local": [29, 33, 46, 120, 123, 130, 158, 168, 169, 170, 182, 187, 199, 239, 310, 314, 315, 343, 346], "instrument": 29, "exploit": [29, 354], "popul": 29, "life": [29, 159], "applic": [29, 34, 51, 77, 83, 92, 101, 102, 108, 145, 146, 172, 236, 297, 310, 315, 332, 354, 362, 363, 369, 373], "org": [29, 77, 79, 80, 81, 86, 89, 92, 107, 172, 187, 188, 225, 273, 276, 315, 354, 362, 363], "variant": [29, 92, 108, 120, 124, 145, 241, 264, 354], "combinatorial_maps_in_class": 29, "queri": [29, 76, 81, 90, 92, 93, 138, 187], "thereof": [29, 124, 176, 187, 227, 234, 242], "resort": 29, "reload": [29, 366], "fragil": 29, "best": [29, 71, 79, 85, 96, 114, 139, 147, 172, 238, 347, 354, 362], "static": [29, 30, 91, 130, 131, 158, 186, 231, 280, 342], "combinatorialmap": 29, "map1": 29, "to_self_1": 29, "to_self_2": 29, "unbounded_map": 29, "unbound": 29, "importlib": 29, "nicer": [29, 108, 359], "unchang": [29, 30, 48, 56, 108, 141, 160, 164, 172, 235, 276, 280], "combinatorial_map_trivi": 29, "major_index": [29, 30, 101, 141, 172, 346, 359], "major": [29, 30, 89, 101, 141, 146, 172, 297, 346, 354, 359], "cmap": [29, 102, 359], "left_tableau": [29, 172], "right_tableau": [29, 172], "nicola": [30, 39, 68, 69, 128, 226, 227, 231, 232, 236, 274, 302, 303, 354, 362], "thi\u00e9ri": [30, 39, 236, 274, 354], "mupad": [30, 46, 124, 128, 160, 172, 197, 226, 227, 242, 278, 280, 284, 302, 314, 354], "develop": [30, 91, 278, 280], "inspir": [30, 108, 278, 280, 302, 359], "simplest": [30, 108, 141, 167], "to_cod": 30, "i_3": [30, 74, 146, 172], "to_subset": 30, "from_subset": 30, "regard": [30, 56, 99, 110, 130, 133, 145, 146, 151, 160, 172, 187, 225, 232, 241, 273, 275, 278, 343, 362], "isinst": [30, 122, 154, 171, 276, 336, 370], "issubclass": [30, 333], "__class__": [30, 156, 187, 268, 275, 315], "testsuit": [30, 33, 39, 49, 52, 54, 60, 68, 69, 73, 129, 161, 168, 177, 180, 182, 187, 192, 193, 194, 216, 227, 233, 244, 245, 264, 265, 267, 269, 274, 277, 284, 286, 289, 290, 295, 296, 343, 347, 364], "to_skew_partit": 30, "maintain": [30, 186, 193], "backward": [30, 98, 106, 120, 136, 193, 227, 272, 276, 314, 315], "broken": [30, 242], "gave": [30, 79, 145], "partial_sum": [30, 193, 356], "fatten": [30, 141, 280], "fatter": [30, 141, 144, 145, 172, 280], "coarser": [30, 99, 144, 145, 146, 151, 280], "memori": [30, 46, 49, 58, 72, 79, 96, 124, 160, 173, 187, 240, 310, 336, 337, 354], "inf": [30, 48, 123, 278], "finest": 30, "is_fin": [30, 108, 141, 280], "test_meet": 30, "co2": [30, 280], "i_m": [30, 62, 63, 99, 100, 137, 146, 278, 347], "bullet": [30, 242, 323], "ribbon_decomposit": 30, "near_concaten": 30, "odot": [30, 151], "j_2": [30, 65, 90, 98, 101, 122, 141, 146, 346], "j_3": 30, "j_m": [30, 65], "peak": [30, 101, 172], "refinement_split": 30, "split": [30, 59, 108, 110, 119, 120, 136, 141, 158, 160, 182, 212, 215, 219, 278, 296, 302, 310, 361, 365, 368, 369], "j_p": 30, "refinement_splitting_length": 30, "nonzero": [30, 82, 91, 92, 108, 120, 122, 146, 192, 235, 272, 273, 303, 314, 345, 346], "j_k": [30, 65, 122, 343, 346], "__add__": 30, "ncsf1": [30, 144, 145, 146], "compose_back": 30, "shuffle_product": [30, 141, 364], "j_l": [30, 364], "permit": [30, 68, 158, 184, 244, 354], "alph": 30, "w1": [30, 133, 238, 242, 308, 354, 359, 364, 369], "specht_modul": [30, 98, 127, 160, 313, 316, 343], "sm": [30, 60, 98, 127, 151, 160, 313, 316, 343], "symmetricfunct": [30, 98, 112, 127, 131, 133, 144, 145, 146, 147, 149, 150, 151, 159, 160, 163, 188, 190, 236, 241, 273, 277, 282, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 313, 316, 323, 343, 346], "frobenius_imag": [30, 98, 127, 160, 313, 316, 343], "specht_module_dimens": [30, 98, 127, 160, 313, 343], "gracefulli": [30, 280], "sup": [30, 278], "to_partit": [30, 34, 101, 146, 160, 278, 342], "lowermost": [30, 346], "cell": [30, 34, 58, 90, 98, 101, 108, 120, 122, 131, 139, 154, 158, 160, 162, 164, 172, 174, 186, 196, 217, 278, 301, 303, 307, 313, 314, 315, 316, 342, 343, 346, 347, 348], "wll_gt": 30, "wll": 30, "short": [30, 59, 76, 89, 112, 122, 145, 146, 187, 225, 227, 236, 242, 293, 298, 304, 305, 317, 346, 347, 354, 374], "is_infinit": [30, 160, 313, 342], "integervector": [30, 103, 124, 127, 128, 129, 133, 190, 236, 354], "similarli": [30, 57, 58, 61, 65, 89, 96, 109, 110, 120, 124, 127, 146, 147, 149, 150, 160, 182, 217, 225, 232, 237, 238, 241, 244, 264, 284, 296, 302, 307, 313, 314, 354, 362], "max_slop": [30, 120, 123, 124, 140, 160, 354], "incompat": [30, 86, 108, 141, 313], "min_part": [30, 123, 124, 127, 140, 160, 354], "min_length": [30, 123, 124, 140, 141, 160, 237, 354, 372], "max_length": [30, 108, 123, 124, 127, 140, 141, 160, 237, 241, 354, 356], "outer": [30, 56, 68, 99, 108, 127, 131, 140, 160, 161, 196, 225, 273, 282, 300, 303, 307, 313, 314, 342, 346], "oo": [30, 90, 124, 160, 227, 229, 247, 346, 356, 358, 362], "min_slop": [30, 123, 124, 140, 160], "weakli": [30, 32, 101, 120, 122, 125, 128, 146, 154, 155, 160, 169, 170, 174, 187, 216, 237, 276, 285, 290, 300, 301, 303, 305, 307, 313, 341, 342, 346, 359], "strang": [30, 172, 362], "themselv": [30, 37, 50, 108, 112, 127, 130, 156, 172, 176, 242, 244, 255, 275, 303, 310, 315, 343, 358], "amort": [30, 46], "integerlistslex": [30, 103, 123, 124, 125, 127, 160, 354], "from_cod": [30, 80], "from_desc": 30, "np": [30, 89, 96, 187], "compositions_al": 30, "compositions_constraint": 30, "compositions_n": [30, 31], "composition_iterator_fast": 30, "composition_sign": 31, "signedcomposit": [31, 103], "sc3": 31, "sc4": 31, "chri": [32, 144, 146, 290], "berg": [32, 89, 144, 145, 146, 290], "jeff": 32, "ferreira": 32, "composition_tableau": 32, "compositiontableau": [32, 145], "i_i": [32, 145, 185], "rectangular": [32, 69, 120, 169, 212, 216, 218, 312, 346, 350], "is_standard": [32, 307, 314, 341, 346, 348], "pretti": [32, 36, 51, 56, 66, 69, 101, 116, 131, 153, 159, 164, 169, 174, 212, 219, 307, 313, 314, 341, 346, 348], "shape_composit": 32, "shape_partit": [32, 278], "compositiontableaux": [32, 143, 145], "max_entri": [32, 307, 314, 346], "compositiontableauxbacktrack": 32, "get_next_po": [32, 297], "ii": [32, 60, 80, 83, 92, 134, 138, 146, 187, 225, 226, 297, 313], "jj": [32, 109, 289, 297, 302], "compositiontableaux_al": 32, "compositiontableaux_shap": 32, "compositiontableaux_s": 32, "g_0": [33, 303], "g_1": [33, 303, 354], "g_k": 33, "lz2004": 33, "sphere": [33, 340], "ramifi": 33, "g0": 33, "g1": [33, 39, 83, 84, 108, 227, 323], "g2": [33, 39, 53, 54, 60, 67, 69, 83, 84, 108, 225, 227, 232, 259, 260, 267, 269, 273, 323], "426": 33, "is_connect": [33, 89, 108, 130, 187, 313], "euler_characterist": 33, "constellation_class": 33, "braid_group_act": 33, "c13": 33, "c31": 33, "d13": 33, "d31": 33, "c121": 33, "c212": 33, "d121": 33, "d212": 33, "braid_group_orbit": 33, "num_vert": 33, "num_edg": 33, "connected_compon": [33, 59, 187], "surfac": 33, "g_i": [33, 80, 303], "genu": [33, 139, 173], "connected": 33, "return_map": [33, 231], "is_mut": 33, "mutable_copi": 33, "passport": 33, "profil": 33, "renumerot": 33, "c3": [33, 60, 187, 225, 231, 233, 251, 252, 274], "s5": [33, 172, 316], "set_immut": [33, 139, 172], "switch": [33, 97, 118, 120, 124, 130, 158, 160, 172, 192, 193, 210, 265, 275, 277, 314, 346], "j0": [33, 343], "j1": [33, 98, 276], "g_": [33, 110, 116], "_check": [33, 318, 322, 324, 325, 327, 328, 329, 331, 334, 335], "constellations_ld": 33, "trial": 33, "reject": 33, "const": 33, "constellations_p": 33, "frobeniu": [33, 145, 146, 160, 273, 285, 287, 293, 300, 301, 303, 305, 313, 316], "p3": [33, 77, 99, 139, 161, 174, 186, 187, 255, 257, 293, 303], "i1": [33, 91, 98, 133, 255], "i2": [33, 53, 89, 98, 133, 145, 240, 255, 303], "i3": [33, 161, 255], "irreducible_charact": [33, 239], "c1": [33, 39, 47, 108, 130, 139, 146, 225, 251, 289, 293, 359], "conjugacy_class_s": [33, 160, 303], "And": [33, 37, 81, 98, 130, 131, 146, 147, 180, 238, 239, 241, 242, 244, 267, 272, 276, 302, 303, 310, 336, 340, 354], "isomorphism_repres": 33, "240": [33, 85, 90, 124, 134, 242], "ir": [33, 276, 363], "perm_conjug": 33, "perm_invert": 33, "perm_sym_domain": 33, "perms_are_connect": 33, "perms_canonical_label": 33, "renumb": [33, 159, 180], "l0": [33, 187, 235, 236, 241, 271], "perms_canonical_labels_from": 33, "perms_sym_init": 33, "gg": [33, 39, 59, 80], "rim": [34, 160, 164], "ferrer": [34, 98, 120, 160, 164, 313, 346, 354], "ann": [34, 39, 50, 59, 68, 69, 83, 116, 131, 134, 141, 187, 211, 212, 216, 218, 232, 236, 274, 276, 302, 303, 362], "schill": [34, 39, 50, 59, 68, 69, 124, 131, 134, 141, 187, 211, 212, 216, 218, 227, 232, 236, 266, 274, 276, 290, 296, 302, 303], "zabrocki": [34, 99, 101, 131, 145, 146, 151, 154, 159, 282, 290, 302, 303, 304, 342], "latex": [34, 46, 51, 55, 62, 68, 99, 101, 102, 112, 120, 130, 131, 134, 139, 154, 157, 158, 160, 164, 172, 187, 196, 197, 211, 227, 236, 238, 242, 278, 307, 313, 314, 346, 348, 362], "affine_symmetric_group_act": 34, "w_1": [34, 56, 101, 108, 133, 172, 280, 303, 305, 354, 359], "w_m": [34, 133], "le": [34, 51, 54, 56, 59, 60, 83, 89, 95, 101, 108, 114, 130, 138, 176, 180, 182, 186, 187, 188, 193, 296, 302, 315, 345, 346, 348, 368], "w_j": [34, 59, 108, 114, 141, 359], "w_0": [34, 62, 63, 69, 110, 172, 227, 232, 234, 241, 277, 340], "_transposition_to_reduced_word": 34, "affine_symmetric_group_simple_act": 34, "outsid": [34, 80, 107, 160, 172, 238, 242, 275, 303, 313, 314, 350], "insid": [34, 58, 62, 91, 104, 129, 151, 158, 160, 164, 174, 186, 225, 227, 236, 275, 278, 296, 303, 313, 348, 350, 359, 363], "to_grassmannian": 34, "strong_cov": 34, "strong_down_list": 34, "strong_l": 34, "bruhat": [34, 39, 59, 62, 131, 172, 186, 187, 232, 236, 237, 240, 243, 346], "comparison": [34, 49, 58, 66, 90, 101, 104, 107, 108, 112, 130, 160, 172, 176, 186, 226, 236, 241, 303, 358], "from_kbounded_to_reduced_word": [34, 160], "from_kbounded_to_grassmannian": [34, 160], "weak_cov": [34, 120], "weak_l": 34, "kwarg": [34, 108, 140, 160, 176, 278, 280, 296, 371], "cores_length": 34, "from_partit": [34, 98], "cores_s": 34, "encyclopedia": [35, 83, 187, 315, 354, 362, 369], "mention": [35, 120, 124, 225, 350], "degree_sequ": [35, 72], "affinecrystalfromclass": [36, 42, 56], "classical_cryst": [36, 133, 273], "virtual": [36, 37, 56, 211, 213, 214, 215, 216, 266, 273, 323], "kirillovreshetikhincryst": [36, 56, 216, 218], "pr": [36, 242], "pr_invers": 36, "promotion_invers": [36, 56, 69, 346], "affinefromclassicalandpromot": 36, "classical_weight": [36, 212, 215, 219], "affinecrystalfromclassicalel": [36, 56], "affine_elt": 36, "retract": [36, 56, 58, 99, 129, 172, 234, 236, 273, 290, 296, 343], "classical_elt": 36, "affinecrystalfromclassicalandpromot": [36, 42, 56], "p_automorph": 36, "p_inverse_automorph": 36, "dynkin_nod": 36, "pmod": [36, 76, 80, 88, 92, 94, 95, 138, 160, 164], "f_0": [36, 38, 56, 145, 212, 215], "inverse_automorph": 36, "affinecrystalfromclassicalandpromotionel": [36, 56], "__call__": [36, 108, 123, 362], "govern": 36, "e0": [36, 56, 306], "f0": [36, 56], "epsilon0": [36, 56], "phi0": [36, 56], "_repr_": [36, 39, 58, 158, 234, 236, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262], "e_0": [36, 38, 55, 56, 212, 215], "e_": [36, 52, 56, 58, 69, 74, 120, 151, 180, 182, 183, 185, 187, 212, 225, 234, 236, 273, 284, 285, 288, 300, 301, 302, 303, 305, 343], "epsilon_0": [36, 212, 312], "phi_0": [36, 57, 212], "elementwrapp": [36, 37, 39, 47, 53, 55, 58, 59, 61, 67, 141], "e_i": [36, 37, 38, 39, 41, 42, 46, 47, 48, 49, 50, 51, 53, 55, 57, 58, 60, 61, 63, 65, 66, 67, 68, 69, 99, 102, 120, 141, 145, 146, 162, 180, 182, 183, 185, 187, 212, 239, 303, 307], "epsilon": [36, 38, 39, 47, 48, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 63, 65, 66, 67, 69, 108, 138, 162, 212, 215, 236, 242, 273, 276, 312, 343], "varepsilon_0": [36, 56, 212], "varphi_0": [36, 39, 56, 212], "kirillovreshetikhin": [36, 38, 39, 42, 46, 56, 57, 59, 212, 215, 216, 218, 236], "affine_factor": 37, "affinefactorizationcryst": 37, "ms2015": 37, "affinefactor": [37, 42], "hw": [37, 50, 51, 56, 59, 62, 63, 182, 215, 218], "is_highest_weight": [37, 50, 56, 59, 307], "gc": [37, 48, 61, 120, 139, 162], "gb": [37, 60, 162], "s0": [37, 131, 232, 233, 235, 274, 343, 354], "bracket": [37, 50, 112, 113, 120, 156, 211, 303, 354, 361], "to_tableau": [37, 53, 56, 69, 116, 167, 170, 174, 212, 314, 346], "minor": [37, 226, 340, 346], "edelman": [37, 276], "factorizationtotableaux": 37, "scaling_factor": [37, 215, 266], "crystalmorph": [37, 56], "is_embed": [37, 56], "_tableaux_isomorph": 37, "is_surject": [37, 56], "w0": [37, 172, 232, 234, 240, 241, 274, 277, 340, 369], "affinizationofcryst": 38, "mathfrak": [38, 41, 55, 57, 58, 59, 61, 65, 67, 68, 69, 145, 162, 187, 188, 215, 216, 235, 277], "moodi": [38, 57, 59, 65, 160, 164, 216, 235, 241, 265], "u_q": [38, 55, 57, 59, 67, 162, 215, 216], "aff": [38, 56], "mid": [38, 57, 62, 108, 139, 145, 151, 160, 180, 182, 185, 211, 215, 216, 285, 300, 301, 303, 305], "wt": [38, 39, 42, 46, 48, 51, 52, 54, 57, 59, 60, 61, 65, 67, 68, 69, 116, 213, 214, 233, 273, 346, 348], "kt": [38, 76, 94, 211, 343], "tensorproductofkirillovreshetikhintableaux": [38, 199, 201, 205, 207, 209, 212, 216, 218, 219], "affinizationof": [38, 42], "hk2002": [38, 57, 65], "chapter": [38, 79, 83, 85, 108, 110, 130, 146, 171, 172, 192, 227, 235, 242, 271, 276, 289, 302, 313, 354, 359], "mg": [38, 39, 48, 51, 54, 55, 56, 57, 59, 60, 61, 65, 67, 162, 212, 213, 214, 215], "module_gener": [38, 39, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 65, 67, 68, 69, 200, 212, 215, 216, 218, 219, 307], "varepsilon_i": [38, 39, 42, 46, 48, 51, 53, 54, 55, 57, 58, 59, 60, 61, 63, 65, 66, 67, 68, 69, 162, 212], "f_string": [38, 39, 48, 51, 54, 55, 56, 57, 59, 60, 62, 63, 65, 67, 69, 162, 212, 213, 214, 215, 242], "varphi_i": [38, 39, 42, 46, 48, 51, 53, 54, 55, 57, 58, 59, 60, 61, 63, 65, 66, 67, 68, 69, 162, 212], "null": [38, 100, 234, 236, 241, 242, 264, 272], "brant": 39, "jone": 39, "2008": [39, 77, 79, 89, 101, 132, 139, 151, 159, 172, 187, 236, 271, 274, 276, 290, 358, 362, 363, 369, 372], "arthur": [39, 60, 314], "lubovski": [39, 60, 314], "rewritten": [39, 108, 124, 172, 303], "2016": [39, 59, 64, 76, 120, 174, 192, 193, 346, 347, 348], "06": [39, 64, 107, 160, 164, 177, 179, 187, 188, 223, 231, 242, 276, 302, 303, 310, 336, 339, 362], "thank": [39, 77, 92, 101, 114, 187, 236, 354], "bori": 39, "alcove_path": 39, "crystalofalcovepath": 39, "starting_weight": [39, 59], "highest_weight_cryst": [39, 52], "straight": [39, 59, 99, 131, 160, 303, 346, 354], "ll": [39, 193, 330], "pseudo": [39, 180, 182, 359], "demazur": [39, 133, 227, 236, 241, 273, 340], "c_2": [39, 49, 62, 83, 130, 156, 172, 187, 225, 227, 231, 235, 236, 273, 278, 310], "omega_i": [39, 98, 233, 240], "stembridg": [39, 46, 114, 227, 238, 286, 291], "axiom": [39, 46, 110, 111], "figur": [39, 102, 107, 120, 134, 158, 227, 238, 276, 278, 311, 354], "lp2008": 39, "alcovepath": [39, 42, 44, 47, 52], "integer_sequ": 39, "lspath": [39, 42, 44, 45, 47, 51, 52, 56, 59, 60, 162, 216, 242], "explicit": [39, 89, 91, 111, 113, 119, 139, 144, 146, 147, 305, 354, 365], "rootsystem": [39, 47, 48, 51, 52, 57, 59, 60, 62, 68, 69, 190, 211, 212, 213, 215, 220, 221, 227, 231, 232, 233, 235, 236, 237, 238, 241, 242, 243, 244, 245, 248, 251, 253, 255, 257, 259, 264, 268, 270, 271, 272, 273, 274], "weight_lattic": [39, 47, 48, 51, 52, 56, 57, 59, 60, 62, 68, 69, 190, 211, 213, 215, 220, 233, 235, 236, 238, 241, 242, 244, 264, 271, 272], "fundamental_weight": [39, 47, 48, 51, 52, 56, 57, 59, 60, 62, 68, 69, 212, 213, 215, 216, 221, 225, 227, 235, 236, 238, 240, 241, 242, 244, 245, 248, 251, 253, 255, 257, 259, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274], "lambda_chain": 39, "a_o": 39, "omega_1": [39, 227], "chain": [39, 64, 108, 114, 120, 130, 131, 139, 170, 174, 180, 182, 183, 186, 187, 223, 225, 307, 314, 346, 348, 363, 366, 369], "pdf": [39, 76, 79, 80, 91, 101, 134, 146, 159, 180, 193, 197, 276, 315], "is_admiss": 39, "14143": 39, "minu": [39, 50, 56, 66, 101, 108, 131, 160, 172, 187, 234, 237, 275, 296, 303, 346, 348, 359, 363, 374], "tensorproduct": [39, 42, 46, 48, 49, 53, 54, 59, 68, 69, 216, 218, 236], "delete_edg": 39, "crystalofalcovepathsel": 39, "admiss": [39, 51, 89, 193, 211], "reach": [39, 81, 101, 107, 108, 124, 160, 162, 212, 271, 276, 313, 346, 356, 365], "slower": [39, 173, 187, 239], "reachabl": [39, 108, 351], "rootswithheight": 39, "root_system": [39, 52, 55, 56, 59, 64, 112, 114, 133, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274], "incorpor": [39, 71], "diagnost": 39, "beta_1": [39, 139, 143, 285, 300, 301, 303, 305], "beta_2": [39, 139, 143, 285, 300, 301, 303, 305], "beta_k": 39, "_root_lattic": 39, "positive_root": [39, 238, 240, 242, 243, 245, 248, 251, 253, 255, 257, 259, 268, 270, 273, 274], "r1": [39, 93, 139, 232, 273], "r3": [39, 232], "highest_weight_vector": [39, 41, 46, 48, 54, 55, 57, 59, 60, 61, 62, 63, 67, 68, 69, 162, 213, 214, 242], "b_2": [39, 49, 65, 69, 76, 85, 91, 130, 141, 159, 182, 225, 238, 239, 241, 273, 276, 278, 280], "infinitycrystalofalcovepath": 39, "h_i": [39, 42, 48, 51, 54, 59, 60, 61, 65, 67, 91, 232, 270, 288, 296, 302, 303, 345], "fstr": 39, "al": [39, 59, 69, 141, 143, 146, 151, 214, 221, 242, 270, 271, 315, 344], "weight_lattice_r": [39, 47, 48, 54, 57, 59, 61, 62, 68, 213, 214, 216, 236, 238, 264, 271], "simple_root": [39, 54, 59, 214, 221, 227, 234, 236, 238, 239, 241, 242, 243, 244, 245, 248, 251, 253, 255, 257, 259, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274], "from_vector": [39, 112, 242, 243, 271], "rootswithheightel": 39, "vee": [39, 42, 46, 48, 59, 65, 68, 151, 172, 180, 182, 185, 215, 227, 232, 233, 234, 235, 236, 238, 241, 242, 243, 264, 271], "rl": [39, 242], "root_lattic": [39, 51, 211, 232, 235, 238, 241, 242, 243, 244, 271, 274], "compare_graph": 39, "node1": [39, 332], "node2": [39, 332], "themat": [40, 220, 225, 271, 273, 354], "highestweightcryst": [40, 52, 54], "finitecryst": 40, "classicalcryst": [40, 133, 273], "regularcryst": 40, "regularsupercryst": 40, "bkk_crystal": [41, 69], "crystalofbkktableaux": 41, "crystalofword": [41, 54, 68, 212], "bkk2000": [41, 58, 68, 69], "gl": [41, 55, 58, 59, 68, 77, 112, 134, 221, 225, 232, 233, 239, 240, 245, 271, 273, 303, 354], "width": [41, 56, 90, 101, 114, 116, 130, 154, 156, 157, 158, 160, 168, 186, 187, 196, 205, 211, 212, 216, 217, 298, 311, 359, 363], "crystalofbkktableauxel": [41, 69], "genuine_highest_weight_vector": 41, "genuin": 41, "fake": [41, 58, 119, 239], "annihil": [41, 227, 264], "bigger": [41, 115, 130, 131, 138, 172, 305, 346, 348], "datum": [42, 60, 62, 63, 64, 114, 227], "colon": [42, 48, 51, 54, 59, 65, 67, 151, 181, 225, 273], "cup": [42, 46, 72, 76, 80, 83, 88, 89, 91, 92, 99, 101, 139, 141, 150, 151, 187, 226, 278, 308, 359, 362], "e_ib": 42, "f_ib": 42, "fastranktwo": [42, 46, 49], "fullycommutativestablegrothendieck": [42, 50], "generalizedyoungwal": [42, 44, 51, 52, 60, 61, 67, 68, 69], "highestweight": [42, 52, 56], "kacmodul": [42, 55], "kleshchevpartit": [42, 162], "kyotopathmodel": [42, 57], "nakajimamonomi": [42, 44, 52, 60, 67], "oddnegativeroot": [42, 55], "projectedlevelzerolspath": [42, 59, 236], "riggedconfigur": [42, 44, 45, 52, 56, 67, 199, 200, 201, 205, 207, 209, 213, 214, 215, 216, 217, 218], "shiftedprimedtableaux": [42, 307], "spinsplu": [42, 66], "spinsminu": [42, 66], "subcatalog": 42, "directsum": [42, 47], "elementary_cryst": [43, 48], "mvpolytop": [44, 62, 242], "polyhedralr": [44, 65], "kashiwaranakashimatableaux": [45, 56, 212], "kirillovreshetikhintableaux": [45, 56, 212, 216, 218, 219], "emptyset": [46, 58, 83, 96, 157, 187, 212, 215, 303, 305, 343, 354], "automaton": [46, 109, 365], "context": [46, 145, 146, 158, 160, 187, 271, 275, 310, 337, 348, 354], "_i": [46, 57, 58, 61, 67, 69, 82, 83, 84, 144, 145, 146, 151, 160, 188, 226, 227, 231, 241, 266, 303], "ste2003": 46, "a_5": [46, 57, 225], "lambda_1": [46, 57, 58, 84, 98, 112, 145, 160, 163, 188, 212, 227, 235, 238, 241, 271, 272, 273, 285, 295, 296, 300, 301, 302, 303, 305, 310, 313, 314, 346], "elabor": 46, "tab": [46, 68, 75, 80, 81, 88, 94, 109, 120, 157, 166, 175, 186, 190, 302, 307, 315, 343, 346, 348, 357, 366, 369], "crude": 46, "dot2tex": [46, 160, 183, 187], "nice": [46, 80, 96, 102, 108, 145, 238, 242, 267, 315, 362], "pdflatex": 46, "graphviz": [46, 183, 187], "set_latex_opt": [46, 62, 101, 130, 154, 278], "color_by_label": [46, 238, 274], "black": [46, 62, 101, 102, 115, 120, 130, 139, 154, 158, 160, 187, 227, 238, 242, 278, 311, 312, 350, 362], "blue": [46, 95, 98, 101, 102, 108, 120, 130, 134, 154, 158, 160, 183, 186, 187, 227, 238, 242, 278, 311, 312, 350, 363], "metapost": [46, 49], "overview": [46, 220, 238, 244], "vocabulari": 46, "layout": [46, 187, 238, 362, 365], "instruct": [46, 80, 132, 232], "restrictionofcryst": 46, "grew": 46, "crystalbacktrack": 46, "nf": 46, "cost": [46, 88, 105, 187, 337, 354], "principl": [46, 120, 124, 141, 157, 227, 236, 354], "simplic": [46, 59, 108, 213, 214, 238, 362], "ancestor": [46, 365], "moral": 46, "walk": [46, 101, 232, 238, 242, 271], "e_j": [46, 48, 180, 239], "cb": [46, 362, 372], "1617": 46, "direct_sum": 47, "directsumofcryst": 47, "keepkei": 47, "b_0": [47, 56, 57, 67, 91, 92, 109, 138, 308, 369], "b_k": [47, 68, 85, 141, 145, 160, 161, 182, 276, 280, 315], "oplu": [47, 51, 55, 310], "b_i": [47, 48, 56, 65, 67, 76, 85, 91, 92, 99, 141, 159, 160, 182, 242, 276], "laz": 47, "laq": 47, "weight_spac": [47, 59, 60, 112, 212, 227, 236, 237, 238, 241, 242, 244, 264, 271, 272], "t_0": [48, 227, 236, 241], "neutral": [48, 180, 182, 193, 238, 321], "cong": [48, 55, 56, 68, 83, 97, 138, 180, 182, 212, 232], "verma": 48, "longrightarrow": [48, 51, 54, 67], "psi_": [48, 65, 144, 145], "psi_i": [48, 65, 67, 146], "infinitycrystaloftableaux": [48, 54], "tensorproductofcryst": [48, 52, 57, 65, 68], "ben": [48, 51, 54, 60, 67, 68, 69, 200, 226, 236, 305], "salisburi": [48, 51, 54, 60, 67, 68, 69, 200, 226], "ka1993": [48, 65, 67], "nz1997": [48, 65], "abstractsinglecrystalel": 48, "componentcryst": 48, "c5": [48, 60, 354], "f4": [48, 112, 114, 225, 226, 227, 229, 231, 235, 239, 240, 257, 258, 265, 273], "e6": [48, 221, 225, 227, 233, 255, 256, 273], "elementarycryst": [48, 65, 67], "varphi_j": 48, "varepsilon_j": 48, "hookrightarrow": [48, 207, 211, 212, 227, 266], "foundat": [48, 238], "172": [48, 90, 235], "e_str": [48, 54, 55, 56, 63], "171": [48, 80, 315], "343": [48, 188, 315, 354, 356], "385": [48, 80, 315], "rcrystal": 48, "subcryst": [48, 51, 52, 56, 58, 60, 61, 68, 162, 200, 214, 307], "gt": [48, 59, 116, 130, 170, 187, 352], "cartanmatrix": [48, 215, 220, 226, 227, 231, 239, 240, 274], "tcrystal": 48, "ambient_spac": [48, 55, 62, 221, 227, 233, 236, 238, 241, 242, 244, 245, 248, 251, 253, 255, 257, 259, 264, 265, 267, 268, 269, 270, 271, 273, 274], "tla": 48, "tp": [48, 54, 68, 131, 212, 218], "fast_cryst": 49, "fastcryst": 49, "lookup": [49, 191, 284], "crystalsoftableaux": 49, "slow": [49, 79, 83, 85, 89, 145, 160, 172, 173, 187, 232, 238, 303, 311, 362], "l1": [49, 64, 107, 139, 182, 183, 308, 337, 369], "l2": [49, 64, 139, 156, 172, 182, 183, 308, 337, 369], "theberenstein": 49, "bzl": 49, "dual_str": [49, 227], "cmp_element": 49, "jianp": [50, 276], "pan": [50, 276], "wencin": [50, 276], "poh": [50, 276], "fully_commutative_stable_grothendieck": [50, 276], "decreasingheckefactor": [50, 276], "max_valu": 50, "excess": [50, 315], "to_increasing_hecke_biword": 50, "biword": [50, 120, 276], "to_word": [50, 120, 167, 197, 314, 346, 348], "fullycommutativestablegrothendieckcryst": 50, "mpps2020": [50, 276], "a_3": [50, 108, 114, 129, 138, 187, 225, 227, 234, 235, 238, 314, 346], "account": [50, 96, 102, 108, 234, 236, 264], "roesler": 51, "ks2010": 51, "klrs2016": 51, "generalized_young_wal": 51, "crystalofgeneralizedyoungwal": 51, "infinitycrystalofgeneralizedyoungwal": 51, "in_highest_weight_cryst": 51, "yla": 51, "yy": [51, 362, 372], "yyi": 51, "max_depth": [51, 52, 60, 61, 162, 200, 214], "yw": 51, "cw": 51, "gw": 51, "crystalofgeneralizedyoungwallsel": 51, "hwy": 51, "gyw": 51, "bigoplus_": [51, 56], "lambda_i": [51, 54, 56, 57, 60, 62, 68, 98, 145, 151, 160, 221, 235, 244, 264, 266, 270, 271, 272, 285, 288, 300, 301, 303, 305, 313, 314, 346], "site": 51, "generate_signatur": 51, "whitespac": [51, 108], "cancel": [51, 61, 68], "unreduc": 51, "lambda_": [51, 54, 56, 57, 62, 66, 98, 145, 160, 162, 163, 164, 285, 300, 301, 302, 303, 305, 314, 323, 346, 348], "a_j": [51, 91, 101, 108, 138, 151, 278, 309, 310], "equiv": [51, 76, 80, 88, 91, 92, 94, 95, 138], "i_p": [51, 74, 144, 172, 181], "bmod": 51, "h_0": [51, 232, 303, 305, 313], "h_1": [51, 89, 96, 293, 303, 345], "h_n": [51, 114, 172, 285, 287, 288, 294, 300, 301, 302, 303, 305, 345], "latex_larg": 51, "tikz": [51, 99, 101, 102, 108, 130, 134, 154, 158, 278, 363], "tikzpictur": [51, 62, 99, 102, 108], "baselin": [51, 99], "scale": [51, 99, 101, 102, 130, 144, 150, 154, 158, 217, 236, 238, 266, 273, 278, 293, 303, 340], "foreach": 51, "font": [51, 340], "scriptsiz": 51, "draw": [51, 62, 99, 101, 102, 115, 122, 124, 153, 157, 158, 171, 172, 182, 186, 187, 242, 278, 315, 346, 351, 354, 362, 363], "thick": [51, 99, 102, 238, 311, 340, 350, 359, 363], "number_of_part": 51, "mathscr": 51, "kostant": 51, "raw_signatur": 51, "slot": 51, "sum_of_weighted_row_length": 51, "_0": [51, 57, 109, 188, 287], "stack": [51, 100, 172, 174], "board": [51, 278], "locat": [51, 131, 158, 172, 187, 217, 238, 239, 276, 342, 346, 354, 355, 365], "yinf": 51, "finitedimensionalhighestweightcrystal_type": 52, "dominant_weight": 52, "setup": 52, "column_cryst": 52, "__init__": [52, 69, 101, 124, 130, 154, 302], "tensorproductofregularcrystalsel": [52, 57, 68, 69, 212, 219], "finitedimensionalhighestweightcrystal_typee6": 52, "e_6": [52, 56, 58, 211, 225, 227, 236, 266, 273], "b6": [52, 86], "finitedimensionalhighestweightcrystal_typee7": 52, "e_7": [52, 56, 58, 211, 225, 227, 273], "kn": [52, 56, 91, 93, 212, 218], "2925": 52, "351": [52, 244], "912": 52, "8645": 52, "365750": 52, "27664": 52, "1539": [52, 235, 303], "induced_structur": 53, "inducedcryst": 53, "from_cryst": 53, "partitionsinbox": [53, 160], "phi_inv": [53, 359], "phi2": 53, "phi2_inv": 53, "codomain": [53, 102, 144, 145, 146, 147, 163, 302, 362, 372], "rsk_invers": [53, 120, 276], "realli": [53, 99, 101, 112, 120, 225, 227, 236, 238, 243, 244, 264, 272, 274, 294, 343, 346, 354, 369], "inducedfromcryst": 53, "ret": [53, 83, 214, 215, 216, 219, 276], "psi_inv": 53, "infinity_cryst": 54, "dualinfinityqueercrystaloftableaux": 54, "infinityqueercrystaloftableauxel": [54, 69], "hong": [54, 231], "hl2008": 54, "nakashima": [54, 56, 66, 68, 212, 218], "kn1994": [54, 58, 68], "misra": [54, 348], "km1994": 54, "english": [54, 98, 120, 122, 131, 157, 160, 164, 172, 196, 197, 212, 213, 214, 216, 218, 307, 313, 314, 341, 346, 348], "preceq": [54, 127, 146], "few": [54, 83, 99, 139, 151, 212, 298, 303, 304, 305, 337, 354, 362], "emb": [54, 110, 130, 212, 225, 242, 271], "crystal_test": 54, "crystal_morph": [54, 200], "infinitycrystaloftableauxel": [54, 69], "imath": [54, 212], "d5": [54, 98, 182, 225, 227, 231, 233, 253, 273], "reduced_form": 54, "placehold": 54, "bn2010": 54, "ls2012": 54, "seg": [54, 346], "segment": [54, 59, 61, 98, 101, 102, 172, 346], "vari": [54, 102, 343], "alpha_": [54, 62, 152, 160, 164, 227, 238, 271, 303, 340], "advantag": [54, 68, 69, 120, 147, 273, 359], "lambda_n": [54, 56, 57, 66, 145, 212, 313], "c7": [54, 225], "d4": [54, 60, 63, 67, 69, 98, 182, 225, 227, 233, 253, 254, 273], "infinitycrystaloftableauxtyp": 54, "infinitycrystaloftableauxelementtyp": [54, 69], "kac_modul": 55, "crystalofkacmodul": 55, "otimes_l": 55, "admit": [55, 104, 124, 145, 177, 180, 182, 187, 216, 225, 232, 234, 236, 244, 271, 303, 307, 354], "crystalofoddnegativeroot": 55, "kwon2012": 55, "576": [55, 83, 90], "positive_odd_root": [55, 270], "genuine_lowest_weight_vector": 55, "lowest_weight_vector": [55, 60], "is_domin": [55, 242, 270, 272], "latex_du": 55, "lr": [55, 157, 170, 298, 304, 306, 312], "multicolumn": [55, 157], "hspace": [55, 130, 157, 211], "6ex": [55, 157], "raisebox": [55, 157], "3ex": [55, 108, 157], "cline": [55, 157], "to_dual_tableau": 55, "kirillov_reshetikhin": [56, 59, 216, 218], "ambientretractmap": 56, "pdict_inv": 56, "similarity_factor_domain": 56, "crystaldiagramautomorph": 56, "on_hw": 56, "interchang": [56, 120, 174, 183, 242, 244, 315], "is_strict": [56, 116], "crystaloftableaux_e7": 56, "crystaloftableaux": [56, 68, 190, 273], "lambda_7": [56, 58], "kr_type_e7": 56, "kr_type_a": 56, "kirillovreshetikhincrystalfrompromot": 56, "classical_decomposit": [56, 212], "dynkin_diagram_automorph": 56, "kr_type_a2": 56, "kirillovreshetikhingenericcryst": 56, "kr_type_box": 56, "a_4": [56, 108, 138, 225, 227], "kdual": 56, "gdual": 56, "gnew": 56, "kr_type_a2el": 56, "ambient_cryst": 56, "ambient_dict_pm_diagram": 56, "ambient_highest_weight_dict": 56, "subdiagram": [56, 226], "rectangl": [56, 101, 120, 160, 169, 186, 211, 212, 216, 218, 349, 350, 359], "domino": [56, 120, 212], "from_ambient_cryst": 56, "to_ambient_cryst": 56, "highest_weight_dict": 56, "lambda_r": [56, 59, 145, 163, 212, 346, 347], "kirillovreshetikhingenericcrystalel": 56, "kr_type_a2_with_categori": 56, "pull": [56, 114, 138, 150, 193, 212, 215], "varepsilon_1": 56, "varphi_1": [56, 362], "kr_type_bn": 56, "kr_type_bnel": 56, "similarity_factor": 56, "kr_type_bn_with_categori": 56, "kr_type_c": 56, "kr_type_cel": 56, "kr_type_c_with_categori": 56, "kr_type_cn": 56, "kr_type_cnel": 56, "from_highest_weight_vector_to_pm_diagram": 56, "from_pm_diagram_to_highest_weight_vector": 56, "pmdiagram": 56, "kr_type_cn_with_categori": 56, "kr_type_d_tri1": 56, "kmoy2007": 56, "from_coordin": 56, "coord": [56, 350], "kr_type_dn_twist": 56, "kr_type_dn_twistedel": 56, "kr_type_dn_twisted_with_categori": 56, "kr_type_e6": 56, "kr_type_e6_with_categori": 56, "affine_weight": 56, "ka1990": [56, 232, 235], "automorphism_on_affine_weight": 56, "highest_weight_dict_inv": 56, "hw_auxiliari": 56, "twice": [56, 83, 85, 92, 138, 141, 159, 182, 187, 237, 340], "p_inv": 56, "promotion_on_highest_weight_vector": 56, "dic": 56, "promotion_on_highest_weight_vectors_funct": 56, "a7_decomposit": 56, "a_7": [56, 225, 242, 271], "m_4": 56, "m_5": 56, "m_6": 56, "m_7": 56, "lambda_6": [56, 58], "lambda_4": 56, "lambda_2": [56, 83, 84, 145, 160, 163, 227, 235, 238, 273, 285, 295, 300, 301, 302, 303, 305, 310, 313, 314, 346], "from_a7_cryst": 56, "defn": [56, 145], "to_a7_cryst": 56, "decompos": [56, 83, 101, 110, 111, 130, 158, 180, 182, 225, 273, 317, 346, 347, 358], "kr_type_boxel": 56, "kr_type_box_with_categori": 56, "kr_type_spin": 56, "w_n": [56, 101, 108, 145, 172, 280, 303, 305, 359], "w_2": [56, 108, 133, 172, 280, 303, 305, 354, 359], "vice": [56, 130, 144, 160, 182, 187, 193, 237, 303], "versa": [56, 130, 144, 160, 182, 187, 193, 237, 303], "promotion_on_highest_weight_vectors_invers": 56, "prom": 56, "prom_inv": 56, "kr_type_vert": 56, "omega_r": 56, "shi2002": 56, "sch2008": 56, "js2010": 56, "fos2009": [56, 266], "kirillovreshetkihintableaux": 56, "reshetkihin": 56, "rc": [56, 67, 199, 200, 201, 205, 207, 209, 213, 214, 215, 216, 217, 218, 219], "kr_type_vertical_with_categori": 56, "los2012": 56, "kirillovreshetikhincrystalfromlspath": 56, "crystaloflspath": [56, 59], "kirillovreshetikhincrystalfrompromotionel": 56, "classically_highest_weight_vector": [56, 59, 216], "kirillov_reshetikhin_tableaux": 56, "krc": [56, 212, 215], "lusztig_involut": [56, 215, 219], "to_kirillov_reshetikhin_tableau": 56, "kirillovreshetikhintableauxel": [56, 212, 219], "tableaux_all_with_categori": [56, 69, 212], "pm_diagram": 56, "from_shap": 56, "x_n": [56, 108, 146, 151, 187, 227, 239, 247, 249, 265, 267, 269, 277, 345, 359, 365, 369], "a_0": [56, 101, 138, 187, 236, 264, 272, 308, 315, 369], "b_1": [56, 63, 65, 68, 69, 76, 85, 91, 92, 108, 130, 138, 141, 159, 160, 182, 225, 227, 241, 276, 278, 280], "intermedi": [56, 85, 97, 98, 108, 109, 131, 132, 225, 239, 354], "heights_of_addable_plu": 56, "addabl": [56, 162, 303, 342, 346, 348], "heights_of_minu": 56, "inner_shap": [56, 131, 197, 314], "intermediate_shap": [56, 131], "pluss": 56, "outer_shap": [56, 131, 197, 314], "horizontal_dominoes_remov": 56, "partitions_in_box": 56, "vertical_dominoes_remov": 56, "kyoto_path_model": 57, "_l": 57, "central": [57, 99, 108, 160, 182, 232, 233, 264, 300, 302, 303, 310, 315, 342, 343, 354], "lambda_0": [57, 98, 145, 160, 162, 227, 241, 264, 271, 272], "varphi": [57, 59, 108, 362, 369], "varepsilon": [57, 59, 108, 162], "phi_n": [57, 145, 146], "bigotimes_": [57, 65], "d_3": [57, 73, 98, 225, 227, 369], "finite_tensor_product": [57, 65], "bkkletter": 58, "classicalcrystaloflett": 58, "element_print_styl": 58, "intens": [58, 367], "cmp": 58, "lt_element": [58, 66], "classicalcrystalofletterswrap": 58, "e_8": [58, 211, 225, 227, 238], "f_4": [58, 211, 225, 227, 257, 265, 266, 273], "auxiliari": [58, 68, 173, 187, 273, 365], "248": [58, 80, 83], "crystalofbkklett": 58, "supercryst": [58, 68], "crystaloflett": [58, 66], "crystalofspin": [58, 66], "fit": [58, 120, 160, 174, 180, 187, 238, 354, 358], "abcdefghijklmnopqrstuvwxyz": 58, "crystalofqueerlett": 58, "queer": [58, 68, 69], "w_i": [58, 61, 69, 101, 128, 141, 172, 280, 303, 305, 359], "gjk": [58, 68, 69], "queerletter_el": 58, "crystal_of_letters_type_a_el": 58, "crystal_of_letters_type_b_el": 58, "crystal_of_letters_type_c_el": 58, "crystal_of_letters_type_d_el": 58, "crystal_of_letters_type_e6_el": 58, "lettertupl": 58, "crystal_of_letters_type_e6_element_du": 58, "crystal_of_letters_type_e7_el": 58, "crystal_of_letters_type_g_el": 58, "emptylett": 58, "thought": [58, 76, 101, 116, 160, 238, 302, 348], "deleg": 58, "__lt__": [58, 180], "parent1": 58, "parent2": 58, "l11": 58, "l12": 58, "l21": 58, "l22": 58, "letterwrap": 58, "shimozono": [59, 98, 211, 216, 227, 232, 233, 236, 241, 266, 276, 290, 296, 303, 304], "crystalofprojectedlevelzerolspath": 59, "infinitycrystaloflspath": 59, "littelmann_path": 59, "starting_weight_par": 59, "piecewis": [59, 160, 242], "your": [59, 76, 88, 89, 108, 140, 156, 162, 164, 187, 225, 238, 302, 343, 354], "compress": [59, 86], "parallel": [59, 80, 92, 94, 103, 136, 172, 187, 238, 337, 350], "dualiz": 59, "to_string_end": 59, "length_onli": 59, "endpoint": [59, 62, 115, 242, 349], "reflect_step": 59, "which_step": 59, "split_step": 59, "kirillovreshetikhinfromlspath": 59, "k1": [59, 101, 109, 154, 216, 218, 242, 271], "energy_funct": 59, "energi": [59, 236, 312], "mathbb": [59, 92, 108, 145, 160, 182, 354, 360], "sigma_0": [59, 315, 369], "sigma_1": [59, 145, 315, 346, 369], "dotsm": 59, "stackrel": 59, "beta_": [59, 143, 285, 300, 301, 303, 305], "w_k": [59, 62, 141, 271, 303], "lnsss2013": 59, "role": [59, 160, 164, 265, 347, 354], "doubl": [59, 66, 108, 145, 171, 172, 180, 182, 186, 187, 207, 212, 215, 225, 234, 236, 241, 307, 315, 340, 359], "scalar_factor": 59, "nu_": [59, 343], "sigma_2": [59, 174, 315, 346], "weyl_group_represent": 59, "nu_u": 59, "zz_": [59, 60, 61, 216, 226, 280], "maximal_vector": 59, "one_dimensional_configuration_sum": [59, 236], "group_compon": 59, "chamber": [59, 211, 234, 242, 273], "lz2011": 59, "f_seq": 59, "pi_": [59, 101, 122, 133, 143, 146, 183, 187, 343, 346], "positively_parallel_weight": 59, "y_": [60, 112, 234, 236, 241, 271], "boldsymbol": 60, "widehat": [60, 61, 162, 343], "ge0": [60, 374], "k_f": 60, "k_e": 60, "e_im": 60, "f_im": 60, "kks2007": 60, "ka2003": 60, "monomial_cryst": 60, "crystalofnakajimamonomi": 60, "infinitycrystalofnakajimamonomi": 60, "gm": 60, "sb": [60, 85, 193, 359], "crystalofnakajimamonomialsel": 60, "monomial_crystalsnakajimamonomi": 60, "e8": [60, 114, 221, 225, 238, 255, 256, 273], "set_vari": 60, "yg": 60, "bg": 60, "get_vari": 60, "lw": [60, 62, 215, 361], "k_1": [60, 83, 88, 101, 127, 144, 172, 188, 242, 271, 276, 314, 346], "y_1": [60, 187], "i_t": 60, "k_t": [60, 276], "y_t": 60, "weight_in_root_lattic": 60, "infinitycrystalofmultiseg": 61, "bz": 61, "jl2009": 61, "head": [61, 131, 140, 160], "simplifi": [61, 64, 72, 108, 128, 354, 362], "tail": [61, 124, 186], "formal": [61, 91, 96, 98, 109, 120, 146, 147, 159, 163, 192, 193, 227, 236, 243, 272, 275, 302, 303, 305, 310, 323, 343, 354], "Such": [61, 91, 92, 98, 104, 108, 129, 168, 226, 238, 244, 347, 350, 354], "aperiod": [61, 108, 359], "varnoth": [61, 122, 346], "ell_f": 61, "attain": [61, 115], "min_": [61, 180], "ell_": [61, 143], "ajl2011": 61, "ra": 61, "r_i": [61, 82, 84, 96, 121, 127, 145, 160, 162, 215, 219, 347, 374], "sl": [61, 162, 221, 225, 235, 271, 273, 362], "against": [61, 180, 216, 226, 236], "ltv1999": 61, "dinakar": [62, 63, 64, 223], "muthiah": [62, 63, 64, 223], "mv_polytop": [62, 242], "lusztig_datum": [62, 63, 64], "long_word": [62, 63, 64], "pbwcrystalel": [62, 63], "anim": [62, 362, 363], "reflection_hyperplan": [62, 238, 239, 242], "bounding_box": [62, 174, 238, 242, 350], "plot_mv_polytop": [62, 242], "circle_s": [62, 242], "wirefram": [62, 238, 242], "purpl": [62, 160, 238, 362, 363], "ax": [62, 85, 102, 181, 238, 311, 350, 362, 363], "delai": [62, 350, 359, 362, 363], "imagemagick": [62, 350, 363], "hull": [62, 187, 238, 240, 278, 340], "pbwcrystal": [62, 63], "rr": [62, 99, 102, 112, 138, 172, 187, 193, 225, 228, 244, 362, 363], "tropic": [62, 63, 64], "pl\u00fccker": [62, 63, 64], "proposit": [62, 64, 94, 114, 120, 144, 145, 172, 185, 192, 235, 236, 271, 285, 288, 293, 294, 296, 300, 301, 303], "bz01": [62, 64], "mu_w": 62, "ggm": 62, "mu_e": 62, "mu_": [62, 99, 160], "n_k": [62, 141], "lambda_j": [62, 266], "s_j": [62, 114, 227, 229, 239, 240], "negat": [62, 120, 144, 145, 242, 303], "default_long_word": [62, 63], "set_default_long_word": [62, 63], "to_highest_weight": [62, 63, 215], "sit": [62, 303], "to_lowest_weight": [62, 215], "kam2007": 62, "kam2010": 62, "latex_opt": [62, 101, 108, 130, 154, 211, 278], "mark_endpoint": [62, 242], "circl": [62, 99, 102, 108, 115, 116, 124, 158, 159, 172, 187, 242, 278, 311, 315, 342], "float": [62, 102, 278, 362], "pbw_crystal": 63, "x_m": [63, 147], "pbw_datum": 64, "pbwdata": 64, "convert_to_new_long_word": 64, "new_long_word": 64, "pbwdatum": 64, "new_datum": 64, "convert_to_long_word_with_first_lett": 64, "is_equivalent_to": 64, "other_pbw_datum": 64, "compute_new_lusztig_datum": 64, "enhanced_braid_chain": 64, "initial_lusztig_datum": 64, "braid_move_calcul": [64, 223], "braidmovecalcul": [64, 223], "enhance_braid_move_chain": 64, "chain_of_reduced_word": [64, 223], "braid_move_chain": 64, "off": [64, 98, 108, 120, 130, 153, 154, 225, 227, 236, 278, 313, 333, 344, 346, 348, 374], "submatric": [64, 226], "interval_of_chang": 64, "cartan_sub_matrix": 64, "submatrix": 64, "tropical_plucker_rel": 64, "polyhedral_r": 65, "infinitycrystalaspolyhedralr": 65, "b_j": [65, 68, 85, 89, 108, 193], "though": [65, 90, 95, 96, 100, 160, 225, 235, 302, 340, 346, 348, 354], "target": [65, 110, 117, 225, 284, 296], "zz_j": 65, "psi_j": [65, 146], "j_n": [65, 122, 146, 346], "analog": [65, 143, 146, 160, 242, 273, 313, 346, 348, 352], "n_j": [65, 172], "max_": [65, 68, 104, 129, 160], "tensorproductofcrystalsel": [65, 68, 69], "journal": [66, 70, 76, 77, 80, 90, 92, 93, 99, 101, 108, 139, 147, 151, 159, 172, 185, 293, 303, 304, 305, 310, 362, 369], "165": [66, 315], "1994": [66, 171, 302, 303], "crystalofspinsplu": 66, "crystalofspinsminu": 66, "genericcrystalofspin": 66, "spin_crystal_type_b_el": 66, "spin_crystal_type_d_el": 66, "star_cryst": 67, "starcryst": 67, "binf": 67, "antiautomorph": 67, "chevallei": [67, 172, 240], "mb_i": 67, "catalog_infinity_cryst": 67, "bstar": 67, "rcstar": 67, "nuj": 67, "mstar": 67, "ystar": 67, "tstar": 67, "jump": [67, 159, 180, 183, 187], "nu0star": 67, "nustar": 67, "thieri": [68, 69, 124, 128, 226, 227, 231, 232, 236, 302, 303], "refactor": [68, 69, 127, 188, 236, 276, 303], "tensor_product": 68, "crystalofqueertableaux": 68, "queersupercrystalsmixin": 68, "tensorproductofqueersupercrystalsel": [68, 69], "d_r": [68, 225], "s_r": [68, 145], "2r": [68, 99, 120, 225], "b_r": [68, 141, 225], "plactic": 68, "french": [68, 98, 131, 157, 160, 164, 313, 346, 348, 354], "fixm": [68, 112, 227], "increasingli": 68, "decreasingli": [68, 124], "1392": 68, "crystaloftableauxel": [68, 69], "294": [68, 235, 359], "fulltensorproductofcryst": 68, "fulltensorproductofqueersupercryst": 68, "fulltensorproductofregularcryst": [68, 218], "fulltensorproductofsupercryst": 68, "tensorproductofsupercrystalsel": [68, 69], "mixin": [68, 99, 162], "enlarg": [68, 238], "big": [68, 96, 102, 188, 210, 241], "underbrac": [68, 145, 160], "columnwis": 68, "did": [68, 159, 227, 249, 315], "14402": 68, "antikashiwara": 68, "tensorproductofcrystalswithgener": 68, "favor": 68, "tensorproductofregularcrystalswithgener": 68, "tensor_product_el": 69, "crystalofbkktableaux_with_categori": 69, "int": [69, 83, 87, 96, 105, 108, 139, 151, 160, 172, 173, 187, 191, 238, 315, 354, 367], "immutablelistwithpar": 69, "grantcharov": 69, "et": [69, 141, 146, 151, 171, 255, 257, 315, 343, 354, 359, 362, 363, 369], "position_of_first_unmatched_plu": 69, "unmatch": [69, 346], "position_of_last_unmatched_minu": 69, "positions_of_unmatched_minu": 69, "positions_of_unmatched_plu": 69, "reiner": [70, 98, 242, 276, 343], "stanton": 70, "white": [70, 134, 139, 174, 187, 278, 368], "rsw2004": 70, "cyclicsievingpolynomi": 70, "cyc_act": 70, "exhibit": [70, 303], "108": [70, 85, 90, 239, 315], "cyclicsievingcheck": 70, "q_binomi": [70, 188], "s42": 70, "get_ord": [70, 112], "orb": 70, "substr": [71, 172, 361], "debruijnsequ": 71, "string_rep": [71, 356, 372], "00010111": 71, "000": [71, 102, 115, 192, 359, 362, 363, 365], "001": [71, 136, 192, 359, 362, 367, 369], "010": [71, 154, 192, 356, 359, 362, 367, 369], "101": [71, 80, 83, 109, 120, 188, 192, 266, 354, 356, 359, 362], "011": [71, 192, 359], "00": [71, 79, 81, 108, 115, 192, 354, 359, 362, 363, 365, 369], "de_bruijn_sequ": 71, "eviatar": 71, "bach": 71, "nathann": [71, 72, 95, 96, 127, 138, 354], "cohen": [71, 72, 95, 96, 127, 138, 354], "__contain__": 71, "debruijn_sequ": 71, "frank": [71, 187], "ruskei": 71, "rubi": 71, "jona": 71, "elfstr\u00f6m": 71, "joe": [71, 152], "sadawa": 71, "2048": [71, 323], "ros2002": 71, "creation": [71, 108, 129, 145, 176, 192, 226, 231, 236, 275, 286, 293, 296, 303, 350, 362, 363], "significantli": [71, 77, 89, 108], "is_debruijn_sequ": 71, "degreesequ": 72, "networkx": [72, 77, 89, 156, 172], "erd\u0151": 72, "gallai": 72, "sum_i": [72, 91, 121, 144, 151, 160, 162, 193, 235, 242, 301, 303], "foral": [72, 88, 127, 160, 187], "d_j": 72, "havel": 72, "hakimi": 72, "Or": [72, 76, 81, 83, 85, 89, 91, 108, 127, 146, 193, 236, 241, 273, 315, 354], "bi": [72, 293, 349], "cours": [72, 76, 99, 108, 120, 146, 160, 186, 187, 227, 235, 242, 271, 313, 348], "erdo": 72, "criterion": 72, "rces1994": 72, "reduct": [72, 136, 306, 351], "xrightarrow": 72, "perfectli": [72, 238], "pick": [72, 92, 96, 122, 156, 346], "genfrac": [72, 172], "0pt": [72, 102, 172], "underlin": 72, "d_k": 72, "cubic": [72, 130], "alloc": [72, 217, 354], "obvious": [72, 172, 182, 350], "perman": [72, 315], "enum": [72, 101, 187, 302], "current_box": 72, "_box": 72, "moment": [72, 83, 108, 171, 187, 268, 354, 363], "bad": [72, 82, 98, 172, 354], "uselessli": 72, "minut": [72, 274], "alasdair": 73, "mcandrew": 73, "framework": [73, 120, 160, 172, 315], "standardpermutations_all_with_categori": 73, "bv2004": 73, "discard": [73, 89, 160], "macmahon": [73, 147], "x_k": [73, 83, 160, 187], "918": 73, "254": [73, 80, 363], "AT": 73, "cart": 73, "uncopyright": 73, "481066515734": 73, "satta": 73, "mpp2008": 73, "caret": 73, "essenc": 73, "descent_algebra": 74, "descentalgebra": [74, 145], "solomon": [74, 146, 185, 303], "sigma_n": [74, 160, 303], "pq": [74, 139, 172, 187, 276, 343], "b_p": 74, "gr1989": 74, "apart": [74, 347], "schocker": 74, "exposit": [74, 116, 163], "sch2004": 74, "at1992": 74, "mr1995": 74, "da": [74, 99, 145], "basis_b": 74, "d_t": 74, "xi": [74, 277, 285, 300, 301, 303, 305], "b_q": 74, "summand": [74, 108, 112, 144, 187, 303, 335, 340], "b_c": 74, "commonli": [74, 108, 145, 146, 160, 235, 303, 354], "mackei": 74, "per": [74, 79, 80, 85, 91, 92, 96, 303, 315, 359], "algebraswithbasi": [74, 112, 303], "to_d_basi": 74, "to_i_basi": 74, "i_q": 74, "to_nsym": 74, "s_p": 74, "occasion": [74, 146, 172], "ow": [74, 180, 305], "to_b_basi": 74, "to_symmetric_group_algebra_on_basi": 74, "straightforward": [74, 85, 173, 271, 365], "e2": [74, 85, 92, 130, 138, 255, 322, 323, 332], "descentalgebrabas": 74, "to_symmetric_group_algebra": [74, 110, 145, 343], "technic": [75, 108, 119, 139, 164, 187, 238, 271, 296, 303, 306, 354], "gather": [76, 81, 83, 84, 88, 91, 356, 372], "balanced_incomplete_block_design": [76, 80, 81, 89, 94], "bibd_from_td": 76, "td": [76, 80, 82, 83, 88, 89, 91, 92, 99, 227], "bibd_from_difference_famili": [76, 83], "bibd_from_pbd": 76, "pbd": [76, 80, 82, 88, 91, 92, 94], "pbd_from_td": 76, "steiner_triple_system": [76, 81, 82, 89], "v_5_1_bibd": 76, "v_4_1_bibd": 76, "pbd_4_5_8_9_12": 76, "bibd_5q_5_for_q_prime_pow": 76, "5q": 76, "k_v": 76, "k_4": [76, 83], "dougla": [76, 79, 90], "stinson": [76, 79, 90, 94], "stinson2004": [76, 83, 90, 91], "167": [76, 83, 94, 101, 108, 159], "clayton": 76, "smith": [76, 80, 187], "claytonsmith": 76, "argilo": 76, "balancedincompleteblockdesign": [76, 80, 89], "145": [76, 80, 83, 85, 315], "185": [76, 80, 108, 164, 315], "205": [76, 80, 216, 315], "305": [76, 83, 315], "405": [76, 80], "605": 76, "base_cas": 76, "useless": [76, 77, 84, 88, 89, 90, 91, 92, 94, 138], "cautiou": [76, 77, 84, 88, 89, 90, 91, 92, 94, 138], "gui": [76, 77, 84, 88, 89, 90, 91, 92, 94, 138], "is_pairwise_balanced_design": [76, 80, 82], "kv": 76, "v_1": [76, 89, 91, 104, 112, 120, 128, 141, 172, 186, 187, 276, 359], "v_k": [76, 91, 112, 172, 187, 359], "infty_1": [76, 91], "infty_k": 76, "blockdesign": [76, 77, 86, 89], "idea": [76, 83, 86, 108, 147, 160, 162, 302, 354, 365], "bibd_from_arc_in_desarguesian_projective_plan": 76, "arc": [76, 99, 115, 151, 278, 311], "denniston": 76, "denniston69": 76, "who": [76, 79, 120, 354], "desarguesian": [76, 77, 92], "mere": [76, 124, 138, 276, 300, 307, 314, 346, 363, 365], "232": [76, 83, 90, 151, 315, 367], "456": [76, 90, 359], "904": 76, "496": [76, 315], "976": 76, "1936": 76, "4000": 76, "8128": [76, 315], "1969": 76, "317": 76, "319": [76, 80, 83, 165], "doi": [76, 80, 83, 94, 108, 146, 151, 152, 165, 185, 187, 188, 189, 266, 276, 302, 303, 305, 310], "1016": [76, 80, 83, 94, 108, 152, 185, 187, 188, 235, 276], "s0021": [76, 185], "9800": [76, 185], "80095": 76, "lambd": [76, 80, 82, 83, 88], "b_b": [76, 278], "zmod": [76, 83, 85, 303], "pairwisebalanceddesign": [76, 82, 88], "caution": [76, 88, 89, 303], "integrality_toler": [76, 89, 91, 92, 127, 136, 187], "trace": [76, 89, 96, 132, 239, 344, 346, 363, 369], "arc_": 76, "projective_geometri": 76, "mixedintegerlinearprogram": [76, 89, 91, 92, 127, 136, 187], "quiet": [76, 89], "inexact": [76, 89, 91, 92, 127, 187], "get_valu": [76, 89, 91, 92, 127, 158, 187], "is_t_design": [76, 77, 80, 82, 86, 89, 94, 95], "return_paramet": [76, 77, 80, 83, 86, 89, 94], "mip": [76, 89, 136], "sa2": 76, "sa3": 76, "bruckryserchowla_check": 76, "bruck": [76, 77], "ryser": [76, 77, 127], "chowla": 76, "precondit": 76, "met": 76, "nonexist": [76, 77], "211": [76, 80, 83, 120, 186, 190, 359, 362], "168": [76, 80, 83, 89, 90, 315, 363], "16476": 76, "groupdivisibledesign": [76, 82, 88, 91], "besid": [76, 88, 91, 225, 238], "use_ljcr": 76, "jolla": [76, 79, 80, 81], "repositori": [76, 79, 80, 81], "best_known_covering_design_www": [76, 79], "handbook": [76, 79, 80, 83, 90, 91, 108], "216": [76, 80, 238, 315], "biplan": [76, 81], "k_n": [76, 83], "bose": [76, 83], "skolem": 76, "andhonk97": 76, "invalid": [76, 108, 109, 112, 115, 147, 154, 160, 163, 205, 215, 229, 276, 285, 288, 294, 300, 301, 303, 346], "emptyseterror": [76, 77, 83, 85, 90, 91, 129, 156, 336], "ian": [76, 80, 302], "anderson": 76, "iiro": 76, "honkala": 76, "1997": [76, 147, 211, 242, 292], "utu": 76, "fi": 76, "200": [76, 85, 90, 131, 138, 173, 182, 187, 315, 354, 362, 363], "member": [77, 95, 139], "block_design": [77, 86, 89], "designtheori": [77, 86, 89], "extrep": [77, 86], "node4": 77, "peter": [77, 86, 89, 92, 139, 300], "cameron": 77, "dobcsanyi": [77, 86, 89], "john": [77, 146, 238, 286, 291, 303], "morgan": 77, "leonard": [77, 89, 189], "soicher": [77, 89], "hu57": 77, "daniel": [77, 79, 108, 109, 132, 176, 192, 193, 232, 274], "canadian": 77, "1957": [77, 127], "cm": [77, 102, 171, 226, 229, 231, 274, 303, 359, 362], "cjm": 77, "v9": 77, "p378": 77, "we07": 77, "charl": [77, 79, 80, 90, 92], "weibel": 77, "survei": [77, 90, 94, 225], "notic": [77, 110, 145, 160, 162, 172, 211, 216, 238, 275, 276, 285, 300, 301, 302, 303, 305, 308, 323, 346, 359], "am": [77, 101, 159, 172, 189, 232], "vol": [77, 80, 83, 92, 93, 101, 108, 116, 165, 180, 187, 188, 227, 235, 236, 292, 302, 303, 369], "num": [77, 92], "1294": 77, "1303": [77, 80], "quentin": 77, "honor\u00e9": 77, "18527": 77, "rewrit": [77, 89, 108, 232, 305, 336], "16281": 77, "miller": [77, 172, 187, 278, 340], "desarguesian_plan": 77, "affinegeometrydesign": [77, 81, 89], "point_coordin": 77, "ag_d": 77, "projectivegeometrydesign": [77, 81], "euclidean": [77, 160, 227, 244, 363], "cremonarichmondconfigur": [77, 81, 89], "cremona": 77, "richmond": [77, 134], "tuttecoxetergraph": 77, "richmond_configur": 77, "incidence_graph": [77, 89], "desarguesianprojectiveplanedesign": [77, 81, 89], "projective_plan": [77, 81, 82, 89, 92, 96], "hadamard3design": [77, 81], "hadamarddesign": [77, 81], "cvl": 77, "incidence_matrix": [77, 89, 97, 362], "van": [77, 80, 91, 93, 143, 146, 197], "lint": 77, "london": [77, 303], "soc": [77, 102, 116, 147, 151, 172, 189, 225, 232, 241, 273, 289, 290, 303, 310, 311], "1991": [77, 94, 303], "nj": 77, "5j": 77, "hughesplan": [77, 81], "subfield": 77, "rest": [77, 146, 156, 186, 197, 255, 257, 275, 284, 338, 359], "hughes_plan": 77, "concurr": 77, "b_0_1": 77, "b_1_10": 77, "b_10_0": 77, "b_57_70": 77, "b_70_59": 77, "b_59_57": 77, "b_0_57": 77, "b_1_70": 77, "b_10_59": 77, "pg_d": 77, "pgpointflatblockdesign": 77, "gap_packag": [77, 89], "spkg": [77, 89], "pg": [77, 80, 92, 172], "155": [77, 80, 83, 101, 196, 242, 292, 315], "gap_package_design": [77, 80, 81, 89, 97], "wittdesign": [77, 80, 81, 89], "are_hyperplanes_in_projective_geometry_paramet": 77, "lmbda": [77, 82, 83, 84], "normalize_hughes_plane_point": 77, "xk": 77, "yk": 77, "zk": 77, "nearfield": 77, "finitefield": [77, 144, 303], "finite_projective_plan": 77, "lam": [77, 80, 145, 146, 164, 186, 235, 285, 290, 293, 296, 300, 302, 303, 305, 313, 343], "thiel": 77, "swiercz": 77, "1989": [77, 369], "canad": [77, 92, 151], "projective_plane_to_oa": 77, "pplane": 77, "pt": [77, 162, 170, 174, 242, 310], "transvers": [77, 91, 92], "q3_minus_one_matrix": 77, "companion": 77, "multiplicative_ord": 77, "tdesign_param": 77, "orthogonal_arrai": [78, 80, 81, 82, 90, 91, 92, 93], "is_covering_arrai": [78, 82], "ca_relabel": 78, "ca_standard_label": 78, "colb2004": 78, "smc2006": 78, "wc2007": 78, "aaron": [78, 99, 141], "dwyer": 78, "brett": 78, "steven": 78, "person": 79, "date": 79, "ljcr": [79, 81], "dmgordon": 79, "colbourn": [79, 80, 90, 91, 92], "jeffrei": [79, 80, 90, 92, 362], "dinitz": [79, 80, 90, 92], "hcd": 79, "covering_design": 79, "coveringdesign": 79, "low_bd": 79, "creator": 79, "timestamp": 79, "submit": [79, 81], "gino": 79, "fano": [79, 80, 89], "incidence_structur": [79, 81, 89, 91], "ground_set": [79, 89, 97], "is_cov": 79, "wast": [79, 238], "alter": [79, 127, 154, 278], "schonheim": 79, "1892": 79, "onlin": [79, 81, 315, 354], "messag": [79, 89, 193, 242, 363], "lex": [79, 81, 104, 129, 160, 173, 176, 303], "1996": [79, 81, 99, 139, 235, 305], "930": 79, "trivial_covering_design": 79, "2k": [79, 91, 99, 101, 115, 161, 182, 235], "anyth": [79, 101, 108, 115, 140, 157, 160, 164, 172, 173, 186, 226, 235, 239, 276, 333, 337, 356, 363], "designhandbook": [80, 90, 91, 92], "dream": 80, "knowledg": [80, 346], "julian": [80, 92, 93], "abel": [80, 92, 93], "160": [80, 90, 238], "176": [80, 83, 101, 315, 340], "208": [80, 92, 193, 235], "224": [80, 83], "352": [80, 90, 293], "416": 80, "469": 80, "520": [80, 90, 350], "522": [80, 90, 102, 235], "524": 80, "544": 80, "560": [80, 90], "640": 80, "796": 80, "896": [80, 346], "1078": 80, "1262": 80, "1612": [80, 235], "1620": 80, "103": [80, 83, 311, 369], "181": [80, 83, 85, 102, 315], "187": [80, 94, 108, 211, 324], "259": [80, 164, 290], "273": [80, 83, 244, 315], "391": 80, "409": [80, 315], "102": [80, 83, 90, 141, 311, 362], "116": [80, 83, 225, 227, 235, 346], "146": [80, 296], "162": [80, 83, 90, 141], "170": [80, 192, 193], "182": [80, 99], "188": [80, 138], "192": [80, 90, 141, 186, 235, 266, 274, 289], "198": [80, 83, 90], "206": [80, 102, 362], "210": [80, 90, 141, 192, 315], "212": [80, 83, 234, 315, 350, 359], "218": [80, 143, 354], "230": [80, 83], "242": [80, 90], "246": [80, 83, 315], "260": [80, 90, 363], "270": [80, 90], "288": [80, 90, 192], "290": 80, "296": [80, 151, 363], "300": [80, 90, 134, 138, 315, 356, 359], "302": [80, 315], "308": 80, "318": 80, "330": [80, 90], "336": [80, 85, 90], "338": 80, "356": [80, 138, 315, 356], "366": [80, 90, 146], "372": [80, 90, 235], "378": [80, 90, 235], "396": [80, 90], "402": [80, 310], "420": [80, 89, 90, 235, 293, 315], "450": [80, 235], "452": 80, "115": [80, 83, 91, 275, 363], "119": [80, 83, 134], "121": [80, 83, 85, 120, 234, 315, 356, 359], "129": [80, 83], "139": [80, 94], "141": [80, 83, 315], "149": [80, 83, 235, 315, 362], "161": [80, 83, 235, 340], "169": [80, 83, 85, 94, 315, 363], "189": [80, 92], "191": [80, 83, 124], "195": [80, 235], "203": [80, 83, 94, 99, 105, 161, 194, 315], "213": [80, 83, 188, 315, 359, 362], "223": [80, 83], "253": [80, 83], "265": [80, 83, 315], "269": [80, 182], "271": [80, 83], "275": [80, 83], "281": [80, 83, 290, 362], "289": [80, 146], "293": [80, 83, 235, 315, 369], "295": [80, 83], "303": [80, 108], "309": [80, 227, 315], "311": [80, 369], "321": [80, 83, 101, 237, 356, 359], "323": [80, 293, 315, 368], "335": [80, 83], "341": [80, 92, 315], "355": [80, 108, 315], "363": [80, 293], "379": [80, 83, 108], "383": [80, 236], "399": [80, 83, 130, 315], "401": [80, 83], "411": 80, "413": 80, "106": [80, 83, 90, 311], "136": [80, 90, 235], "196": [80, 90, 92, 93, 138, 164, 235, 315], "201": [80, 83, 108, 211, 303, 315], "175": [80, 108, 116, 289, 303], "217": [80, 83], "221": [80, 134, 186, 362], "901": 80, "225": [80, 83, 289, 315], "993": [80, 84], "109": [80, 83, 85, 141, 303, 362], "157": [80, 83, 85], "193": [80, 83, 85, 315, 324], "241": [80, 83, 315, 363], "313": 80, "337": [80, 83, 241, 273], "349": [80, 225], "361": [80, 83], "373": [80, 315], "421": [80, 83], "433": [80, 83], "457": 80, "529": 80, "541": [80, 280, 315], "577": [80, 315], "601": [80, 83, 109], "613": 80, "625": [80, 85, 94, 315], "661": [80, 83], "673": [80, 83, 91], "709": [80, 276], "733": 80, "757": [80, 83], "769": 80, "829": [80, 239], "841": [80, 83], "853": [80, 323], "877": [80, 99, 105, 315], "937": 80, "961": 80, "997": 80, "1009": [80, 83], "1021": 80, "1033": 80, "1069": 80, "1093": 80, "1117": 80, "1129": 80, "1153": [80, 83, 361], "1201": [80, 83], "1213": [80, 359, 361], "1237": 80, "1249": 80, "1297": 80, "1321": [80, 83], "1369": 80, "1381": [80, 83], "1429": 80, "1453": 80, "1489": 80, "1549": 80, "1609": 80, "1621": 80, "1657": 80, "1669": 80, "1681": [80, 83], "1693": 80, "1741": 80, "1753": 80, "1777": 80, "1789": 80, "1801": [80, 83], "1849": 80, "1861": [80, 83, 315], "1873": [80, 83, 302], "1933": 80, "1993": [80, 92, 146], "2029": 80, "2053": 80, "2089": 80, "2113": [80, 359], "2137": 80, "2161": 80, "2197": 80, "2209": 80, "2221": 80, "2269": [80, 83], "2281": 80, "2293": 80, "2341": [80, 274], "2377": 80, "2389": 80, "2401": [80, 315], "2437": [80, 83], "2473": 80, "2521": [80, 83], "2557": 80, "2593": 80, "2617": 80, "2677": 80, "2689": 80, "2713": 80, "2749": 80, "2797": 80, "2809": 80, "461": 80, "641": [80, 83], "701": [80, 83], "761": [80, 83, 147], "821": [80, 83], "881": [80, 83], "941": 80, "1061": 80, "1181": [80, 83], "1301": [80, 83], "1361": [80, 83], "1481": [80, 83], "1601": [80, 83, 225], "1721": 80, "1901": [80, 83], "151": [80, 83, 85], "331": [80, 83], "571": [80, 212, 218, 238], "631": [80, 83], "691": [80, 83], "751": [80, 235], "811": [80, 296], "991": 80, "1051": 80, "1171": [80, 147], "1231": [80, 234, 236, 359], "1291": 80, "1471": 80, "1531": [80, 83], "1831": [80, 83], "1951": 80, "463": [80, 83, 143], "547": [80, 83], "883": [80, 83], "967": [80, 83, 146], "1723": [80, 83], "449": [80, 83, 225], "617": 80, "953": 80, "1289": 80, "2ed": [80, 90, 94], "chapman": [80, 108], "crc": [80, 108], "aschbacher71": 80, "aschbach": 80, "collin": [80, 171], "ser": [80, 143, 347], "1971": 80, "272": [80, 216], "hall71": 80, "jr": [80, 291], "du": [80, 91, 95, 120, 368], "congr\u00e8": 80, "math\u00e9maticien": 80, "1970": [80, 276, 363], "222": [80, 83, 90], "gauthier": 80, "villar": 80, "bibd_106_6_1": 80, "bibd_111_6_1": 80, "bibd_126_6_1": 80, "vi": [80, 83, 91, 92, 225, 289], "bibd_136_6_1": 80, "bibd_141_6_1": 80, "bibd_171_6_1": 80, "bibd_196_6_1": 80, "bibd_201_6_1": 80, "bibd_45_9_8": 80, "codeword": 80, "extendedquadraticresiduecod": 80, "vii": [80, 85, 88, 92, 94, 171, 172, 225, 255, 289], "cite": 80, "ht95": 80, "huffman": 80, "tonchev": 80, "cryptographi": [80, 92], "septemb": [80, 107, 159, 302], "1995": [80, 83, 92, 143, 146, 147, 171, 241, 273, 289, 302, 362], "volum": [80, 90, 94, 101, 152, 216, 276, 293, 296, 302, 350], "bibd_56_11_2": 80, "incidencestructur": [80, 87, 88, 89, 91, 94, 96, 97], "bibd_66_6_1": 80, "ccrwest": [80, 81], "colin": 80, "barker": 80, "bibd_76_6_1": 80, "bibd_79_13_2": 80, "typo": [80, 83, 120, 138, 278, 346], "bibd_96_6_1": 80, "dm_12_6_1": 80, "hanani75": 80, "designs_pyx": [80, 82, 91, 92, 93], "is_difference_matrix": [80, 82, 84], "difference_matrix": [80, 81, 84], "haim": [80, 91, 95], "hanani": [80, 91, 95], "0012": [80, 94], "365x": [80, 94], "90040": 80, "1975": [80, 91, 225], "369": [80, 91], "dm_21_6_1": 80, "iii": [80, 92, 101, 225, 236, 273], "dm_24_8_1": 80, "dm_273_17_1": 80, "dm_28_6_1": 80, "dm_33_6_1": 80, "dm_35_6_1": 80, "dm_36_9_1": 80, "dm_39_6_1": 80, "dm_44_6_1": 80, "dm_45_7_1": 80, "deadli": 80, "kindli": 80, "dm_48_9_1": 80, "dm_51_6_1": 80, "dm_52_6_1": 80, "dm_55_7_1": 80, "dm_56_8_1": 80, "dm_57_8_1": 80, "dm_60_6_1": 80, "julianabel13": 80, "five": [80, 98, 187, 354], "onlinelibrari": 80, "wilei": 80, "1002": [80, 108, 359], "jcd": 80, "21384": 80, "dm_75_8_1": 80, "dm_993_32_1": 80, "higmansimsdesign": [80, 81], "higman": 80, "w_a": [80, 232], "w_b": 80, "ky04": 80, "bl1984": [80, 97], "higmansimsgraph": 80, "gh": [80, 146, 369], "automorphism_group": [80, 89, 318, 320, 324, 325, 327, 328, 329, 331, 334], "klee": 80, "yate": 80, "tight": 80, "subdesign": [80, 92], "rose": 80, "hulman": 80, "undergradu": 80, "edu": [80, 91, 101, 146, 159, 165, 172, 180, 187, 291], "mathjourn": 80, "archiv": [80, 152, 238], "vol5": [80, 362], "n2": [80, 83, 91, 92, 96, 211], "paper9": 80, "v5n2": 80, "9pd": 80, "mols_10_2": 80, "cecm": 80, "sfu": 80, "pols10": 80, "latin_squar": [80, 90], "are_mutually_orthogonal_latin_squar": [80, 90], "is_avail": [80, 90, 91], "mols_12_5": 80, "brendan": 80, "mckai": [80, 225], "mols_14_4": 80, "wanless": 80, "todorov12": 80, "todorov": 80, "367": 80, "mols_15_4": 80, "mols_18_3": 80, "oa_10_1620": 80, "brouwer": [80, 91, 92, 93], "ree": [80, 91, 92, 93, 187], "find_brouwer_van_rees_with_one_truncated_column": [80, 93], "incomplete_orthogonal_arrai": [80, 81, 91, 93], "is_orthogonal_arrai": [80, 82, 91, 92, 93], "oa_10_205": 80, "greig99": [80, 92], "coldin01": [80, 90], "baer": [80, 89, 92], "subplan": [80, 89, 92], "252": [80, 315], "204": [80, 83, 85, 141, 315], "oa_from_pbd": [80, 91, 92], "oa_10_469": 80, "brouwer80": [80, 92], "techniqu": [80, 124, 310, 354], "brouwer_separable_design": [80, 92, 93], "1407": 80, "oa_10_520": 80, "oa_520_plus_x": 80, "oa_10_796": 80, "ac07": [80, 92, 93], "hole": [80, 91, 139, 323, 346], "oa_11_160": [80, 91], "ab1995": [80, 91], "oa_n_times_2_pow_c_from_matrix": [80, 91], "oa_11_185": 80, "greig": [80, 92], "oa_11_254": 80, "oa_11_640": [80, 91], "oa_11_80": [80, 91], "oa_12_522": 80, "oa_14_524": 80, "oa_15_112": [80, 91], "oa_15_224": [80, 91], "oa_15_896": [80, 91], "2min": 80, "oa_16_176": [80, 91], "oa_16_208": [80, 91], "oa_17_560": 80, "corollari": [80, 83, 120, 122, 138, 193, 222, 235, 236, 301, 346], "thwart": [80, 92, 93], "oa_20_352": [80, 91], "oa_20_416": [80, 91], "oa_20_544": [80, 91], "1mn": 80, "oa_25_1262": 80, "1893": 80, "b_9": 80, "oa_7_18": 80, "oa_from_quasi_difference_matrix": [80, 91], "oa_7_66": 80, "oa_7_68": 80, "oa_7_74": 80, "oa_8_69": 80, "oa_8_76": 80, "oa_9_1078": 80, "oa_9_120": 80, "i_8": 80, "rbibd_120_8_1": 80, "oa_9_135": 80, "difference_famili": [80, 81, 83, 85, 138], "oa_9_1612": 80, "oa_9_40": [80, 91], "qdm_19_6_1_1_1": 80, "is_quasi_difference_matrix": [80, 82], "qdm_21_5_1_1_1": 80, "qdm_21_6_1_1_5": 80, "qdm_25_6_1_1_5": 80, "qdm_33_6_1_1_1": 80, "qdm_35_7_1_1_7": 80, "qdm_37_6_1_1_1": 80, "qdm_45_7_1_1_9": 80, "qdm_54_7_1_1_8": 80, "qdm_57_9_1_1_8": 80, "seiden": 80, "hyperov": 80, "dualis": 80, "slice": [80, 141, 238, 315, 347, 366, 374], "cyclic_shift": 80, "759": 81, "frequent": [81, 108, 186, 348], "best_known_covering_design_from_ljcr": 81, "resolvable_balanced_incomplete_block_design": [81, 94], "kirkman_triple_system": [81, 94], "mutually_orthogonal_latin_squar": [81, 90, 91], "transversal_design": [81, 82, 88, 89, 91, 94], "steiner_quadruple_system": [81, 89, 95], "gen_quadrangles_with_spread": [81, 87], "deriveddesign": 81, "complementarydesign": 81, "somewhat": [82, 108, 109, 187, 238, 323], "strength": [82, 91, 354], "covering_arrai": 82, "boolean_answ": [82, 89], "2u": [82, 91], "is_group_divisible_design": 82, "guessed_group": 82, "phrase": 82, "is_projective_plan": 82, "qdm": [82, 91], "lj": [82, 91], "are_complementary_difference_set": 83, "are_hadamard_difference_set_paramet": 83, "4n": [83, 95, 130, 138, 193, 354], "are_mcfarland_1973_paramet": 83, "mcf1973": 83, "block_stabil": 83, "complementary_difference_set": [83, 138], "complementary_difference_setsi": 83, "complementary_difference_setsii": 83, "complementary_difference_setsiii": 83, "4m": [83, 138], "df_q_6_1": 83, "get_fixed_relative_difference_set": 83, "group_law": 83, "hadamard_difference_set_product": 83, "is_difference_famili": [83, 85], "is_fixed_relative_difference_set": 83, "is_relative_difference_set": 83, "is_supplementary_difference_set": 83, "supplementari": [83, 138, 354], "mcfarland_1973_construct": 83, "one_cyclic_til": 83, "nz": [83, 233], "one_radical_difference_famili": 83, "radic": [83, 85, 108, 236, 354], "radical_difference_famili": [83, 85], "radical_difference_set": 83, "coset": [83, 85, 114, 139, 171, 172, 232, 233, 240, 346, 348, 350], "relative_difference_set_from_homomorph": [83, 138], "nd": [83, 154], "relative_difference_set_from_m_sequ": 83, "singer_difference_set": 83, "skew_supplementary_difference_set": [83, 138], "n_3": [83, 92, 138, 141], "n_4": [83, 138], "skew_supplementary_difference_set_over_polynomial_r": 83, "skew_supplementary_difference_set_with_paley_todd": 83, "palei": [83, 138], "todd": [83, 239, 240], "supplementary_difference_set": [83, 138], "2v": 83, "supplementary_difference_set_from_rel_diff_set": [83, 138], "supplementary_difference_set_hadamard": 83, "turyn_1965_3x3xk": 83, "c_3": [83, 187, 225, 244], "c_4": [83, 225], "twin_prime_powers_difference_set": 83, "bjl99": [83, 85, 88, 94], "beth": [83, 94, 216], "jungnickel": [83, 94], "lenz": [83, 94], "cambridg": [83, 94, 101, 235, 302, 362, 369], "press": [83, 94, 101, 116, 166, 171, 235, 289, 302, 362, 363, 369], "1999": [83, 92, 94, 101, 197, 293, 302, 363], "blj99": 83, "bo39": 83, "eugen": 83, "1939": 83, "353": 83, "bu95": 83, "buratti": 83, "tu1965": 83, "turyn": [83, 138, 345], "pacif": [83, 127, 276], "1965": [83, 232, 369], "346": [83, 90], "tu1984": 83, "williamson": [83, 138], "1984": [83, 146, 147, 187, 235, 303], "wi72": [83, 85], "cyclotomi": 83, "1972": 83, "sze1971": 83, "contraint": [83, 345], "98125": 83, "19500": 83, "3875": 83, "z8": 83, "galoi": [83, 356], "quadrat": [83, 138, 236, 241, 273, 287, 302, 343, 359, 362, 365], "octic": 83, "c_6": 83, "c_7": 83, "fourth": [83, 120, 138, 163, 315, 359], "2a": [83, 174, 225, 274, 315], "2b": [83, 174, 225, 274], "sz1969": [83, 138], "prime_pow": 83, "is_prime_pow": [83, 85], "df": [83, 85, 315], "zhen": 83, "wu": 83, "explain_construct": [83, 91, 92], "d_b": 83, "difference_set": 83, "troolean": [83, 91], "singer": 83, "mcfarland": 83, "1973": [83, 101, 185], "n1": [83, 91, 92, 93, 96, 193], "prime_power_mod": 83, "islic": [83, 108, 192, 193, 354, 366], "l6": 83, "3061": 83, "3121": [83, 359], "3181": 83, "l7": 83, "4621": 83, "4957": 83, "5167": 83, "2143": [83, 364], "2311": 83, "2647": 83, "4999": 83, "5041": [83, 235], "5209": 83, "2d": [83, 98, 102, 238, 242, 362, 363], "1998": [83, 101, 185, 211, 293], "1978": 83, "rel_diff_set": 83, "as_el": 83, "spe1975": [83, 138], "consider": [83, 85, 108, 354], "return_group": 83, "mul": [83, 343, 359], "inv": [83, 172, 239, 297, 359], "vectorspac": 83, "g11": 83, "d11": 83, "g12": 83, "d12": [83, 182, 187], "hadamard_difference_set_product_paramet": 83, "n_i": [83, 141, 149, 151, 235, 312], "2n_i": 83, "additiveabeliangroup": 83, "dihedralgroup": [83, 139, 354], "qd": 83, "param": 83, "eb1966": 83, "diffeenc": 83, "mn": [83, 90, 138, 146], "submodul": [83, 146], "_get_submodule_of_ord": 83, "why": [83, 90, 95, 227, 232, 241], "k_i": [83, 88, 141, 172, 188, 276, 278], "0097": 83, "3165": 83, "90031": 83, "print_til": 83, "xxx": [83, 138, 359], "xx": [83, 337, 359, 362, 372], "dlx": [83, 100, 136, 350], "observ": [83, 235, 239, 240, 354, 359], "llll": 83, "324": [83, 138, 293], "359": [83, 172, 236, 276], "444": 83, "237": 83, "404": [83, 138, 227], "357": [83, 225], "394": [83, 315], "249": [83, 182], "388": [83, 90], "441": [83, 128], "327": [83, 141], "197": [83, 92, 161, 315], "362": [83, 315, 356], "403": 83, "435": [83, 235], "382": [83, 90, 276], "285": [83, 216, 315], "371": [83, 94], "390": 83, "392": 83, "219": [83, 311], "228": [83, 90, 242], "247": [83, 362], "261": [83, 92, 93], "118": [83, 108, 143, 193], "138": [83, 90], "263": [83, 315], "279": [83, 97], "267": [83, 105, 315], "156": [83, 90, 138, 315], "209": [83, 211, 315], "264": [83, 235], "list_q": 83, "2000": [83, 92, 124, 292, 315, 350, 356], "divisor": [83, 174, 182, 186, 187, 289, 303, 310, 315], "820": [83, 138], "djo1994a": 83, "113": [83, 361], "163": [83, 266, 362], "djo1992a": [83, 138], "djo1992b": 83, "djo1992c": 83, "djo2008a": [83, 138], "djo2008b": 83, "djo2023b": 83, "dgk2014": 83, "dk2016": 83, "alpha_2": [83, 145, 227, 234, 238, 242, 257, 303], "sd": [83, 138], "k_2": [83, 101, 127, 144, 172, 188, 242, 271, 314, 346], "k_3": [83, 144], "239": [83, 141, 235, 315], "satifi": 83, "djo2008c": 83, "djo1994b": [83, 138], "251": 83, "difference_matric": 84, "k_max": [84, 93], "difference_matrix_product": 84, "lmbda1": 84, "lmbda2": 84, "find_product_decomposit": [84, 93], "616": 84, "evenlydistributedsetsbacktrack": 85, "evenly_distributed_set": 85, "hit": [85, 89, 101, 109, 366, 369], "he": [85, 108, 146, 347, 354], "dirichlet": [85, 116, 236], "to_difference_famili": 85, "approach": [85, 108, 129, 159, 302, 303, 354], "somehow": 85, "behaviour": [85, 90, 108, 159, 186, 187], "up_to_isomorph": 85, "intend": [85, 108, 163, 168, 302, 310, 348], "debug": [85, 225, 234, 273], "114": 85, "e1": [85, 92, 130, 138, 255], "precaut": 85, "xb": 85, "timeit": 85, "\u00b5": 85, "ext_rep": 86, "api": [86, 187], "xml": 86, "ext": [86, 310], "rep": [86, 273], "pars": [86, 107, 109, 193, 212, 274, 314], "expat": 86, "do2009": 86, "wealth": 86, "xtree": 86, "servic": 86, "_name": [86, 89, 99], "util": [86, 123, 169, 191], "pyrxp": 86, "robin": 86, "becker": 86, "reportlab": 86, "xtreeprocessor": 86, "event": [86, 108], "driven": 86, "parser": [86, 193], "stage": [86, 346, 348], "list_of_design": 86, "list_of_designs_proc": 86, "list_definit": 86, "list_definition_proc": 86, "info": [86, 158, 187, 193], "info_proc": 86, "block_design_proc": 86, "finish": [86, 108, 124, 205, 354], "xml_sourc": 86, "file_loc": 86, "dump_to_tmpfil": 86, "v2_b2_k2_icgsa": 86, "proc": [86, 147, 225, 232, 241, 273, 289, 293], "save_design": 86, "open_extrep_fil": 86, "check_dtrs_protocol": 86, "input_nam": 86, "input_pv": 86, "runtimeerror": [86, 91, 108, 192, 193], "dtrs_protocol": 86, "designs_from_xml": 86, "fname": 86, "designs_from_xml_url": 86, "url": 86, "v3": [86, 104, 108], "icgsa": 86, "txt": [86, 138, 315], "bz2": 86, "boo": 86, "open_extrep_url": 86, "uncompress": 86, "generalised_quadrangle_with_spread": 87, "325": [87, 235], "1105": 87, "gq2": 87, "generalised_quadrangle_hermitian_with_ovoid": 87, "gq3": 87, "_point": 87, "pt2009": [87, 89], "tp1994": 87, "generalized_quadrangl": [87, 89], "ivo": 87, "maffei": 87, "dual_gq_ovoid": 87, "is_generalized_quadrangl": [87, 89], "ovoid": 87, "constitut": 87, "intersection_graph": [87, 89], "is_strongly_regular": [87, 89, 97], "block_siz": [87, 89], "280": [87, 90, 97, 235], "is_gq_with_spread": 87, "group_divisible_design": 88, "gdd_4_2": 88, "2q": [88, 138], "495": 88, "k_l": 88, "m_1": [88, 92, 118, 121, 145, 146, 172, 294, 303, 348], "m_l": [88, 185, 348], "trigger": [88, 93, 343], "abcdefghiklm": 88, "bigcup": 88, "edge_color": [89, 134], "induced_substructur": 89, "substructur": 89, "is_berge_cycl": 89, "is_regular": [89, 160, 162, 182, 239, 310], "is_resolv": [89, 91, 94], "is_simpl": [89, 130, 172, 182, 363], "is_spread": 89, "is_uniform": [89, 182, 362], "isomorphic_substructures_iter": [89, 96], "h2": [89, 182, 276], "num_block": 89, "num_point": 89, "assmu": 89, "1992": [89, 101, 108, 225, 354], "hashabl": [89, 108, 112, 171, 187, 191, 275, 280, 336], "matter": [89, 107, 274, 275, 302, 305], "11333": 89, "_block": 89, "pgl": 89, "fano1": 89, "fano2": 89, "monochromat": 89, "chromat": [89, 187, 303], "petersengraph": [89, 97, 337], "s13": 89, "pkg": [89, 239], "htm": 89, "chap003": 89, "rare": [89, 273, 354], "occas": 89, "block_matrix": 89, "h_x": 89, "critic": [89, 123, 139, 187, 359, 369], "conveni": [89, 108, 167, 192, 221, 222, 225, 227, 238, 244, 354], "positiveinteg": 89, "claud": [89, 108], "v_": [89, 120, 128, 141, 235, 303, 359], "v_i": [89, 91, 120, 128, 172, 359], "fag1983": 89, "bh2012": [89, 97, 138], "explan": [89, 92, 108, 193, 236], "lp": [89, 115, 136, 145, 172, 173, 359], "report": [89, 101, 227, 242, 268, 270, 286], "cplex": [89, 136, 187], "gurobi": [89, 136, 187], "ag": [89, 92, 134, 180], "Their": [89, 110, 119, 172, 236, 303], "doesn": [89, 127, 145, 172, 233, 275, 354, 362, 363], "fano_block": 89, "s3_9": 89, "s4_8": 89, "s4_14": 89, "w12": [89, 128], "h_2": [89, 96, 138, 303, 345], "subhypergraph_search": [89, 96], "c_5": [89, 354], "petersen": [89, 306], "cyclegraph": 89, "ic": [89, 115, 312], "subgraph": [89, 97, 180, 182, 187, 337, 354], "has_edg": [89, 117, 187], "5616": 89, "packing_in_a_hypergraph": 89, "chr": [89, 182], "min_siz": 89, "p4": [89, 186, 187, 255, 257, 300, 301, 303], "break": [89, 141, 172, 186, 236, 336, 346, 359], "latin_square_product": 90, "mols_tabl": 90, "600": [90, 188, 193], "________________________________________________________________________________": 90, "130": [90, 235, 236, 369], "150": [90, 93, 97, 216, 359], "166": 90, "178": 90, "180": [90, 108, 120, 134, 158, 346, 350], "190": [90, 235], "220": [90, 193, 292, 303, 315, 363], "226": [90, 180], "250": [90, 182, 187, 193, 216], "262": [90, 171], "268": [90, 363], "282": [90, 126, 356], "292": [90, 216], "306": [90, 188], "310": [90, 193, 235], "316": 90, "320": [90, 235, 237, 359], "340": [90, 193, 276], "342": [90, 138, 241, 273, 305], "348": [90, 143], "358": [90, 151], "360": [90, 108, 315, 350], "380": [90, 289], "400": [90, 174, 187], "408": [90, 92, 93, 315], "430": [90, 235], "432": [90, 102, 146, 362], "438": 90, "440": 90, "442": 90, "448": 90, "460": 90, "466": [90, 304], "478": [90, 315], "480": 90, "486": 90, "490": [90, 143, 303], "498": [90, 102], "502": 90, "508": 90, "511": [90, 304, 315], "528": 90, "540": 90, "546": 90, "556": 90, "562": 90, "568": 90, "570": 90, "580": [90, 235], "586": 90, "592": [90, 235], "598": 90, "springer": [90, 146, 180, 227, 302], "brief": [90, 158], "plan": [90, 315, 354], "infer": [90, 120], "2001": [90, 101, 102, 172, 303, 362], "____________________________________________________________________________________________________": 90, "spars": [90, 100, 112, 137, 180, 187, 226, 305, 323], "largest_available_k": [90, 91, 93], "ask": [90, 91, 131, 158, 171, 239, 302, 303, 319, 322, 329, 335, 343, 354, 363, 369], "consol": 91, "orthogonal_arrays_build_recurs": [91, 92, 93], "orthogonal_arrays_find_recurs": [91, 92, 93], "is_transversal_design": 91, "wilson_construct": [91, 93], "rm": [91, 93, 300], "td_product": 91, "oa_find_disjoint_block": 91, "oa_relabel": 91, "oa_standard_label": 91, "oa_from_vmt": 91, "vert": 91, "oa_from_wider_oa": 91, "qdm_from_vmt": 91, "cd1996": 91, "oamainfunct": 91, "oa_7_50": 91, "statu": [91, 108], "565": 91, "master": 91, "154": [91, 193, 235], "add_col": 91, "fill_hol": 91, "itd_": 91, "infty_u": 91, "infty_i": 91, "2nu": 91, "web": 91, "petr": 91, "milehigh": 91, "x_g": [91, 182], "ac1994": 91, "y_j": 91, "implicitli": [91, 108, 109, 193, 348], "symbol_list": 91, "subscript": 91, "mx": 91, "my": [91, 336, 346, 368], "td1": 91, "td2": 91, "td_1": 91, "td_2": 91, "1_1": 91, "1_k": 91, "2_1": 91, "2_k": 91, "td6_84": 91, "transversaldesign": 91, "s_x": 91, "rise": [91, 97, 101, 130, 187, 190, 216, 236, 275], "ioa": 91, "missing_block": 91, "td_4_10": 91, "674": [91, 369], "u_i": [91, 93, 365], "b_t": [91, 92], "hananibibd": 91, "bvr1982": 91, "untrunc": 91, "i0": [91, 133, 232], "ip_i": 91, "find_wilson_decomposition_with_one_truncated_group": [91, 93], "oab": 91, "counterpart": [92, 172, 227, 238, 241], "construction_3_3": [92, 93], "construction_3_4": [92, 93], "construction_3_5": [92, 93], "construction_3_6": [92, 93], "construction_q_x": [92, 93], "oa_and_ov": 92, "thwart_lemma_3_5": [92, 93], "thwart_lemma_4_1": [92, 93], "three_factor_product": [92, 93], "n_1n_2n_3": [92, 93], "oval": 92, "colinear": 92, "systemat": [92, 187, 227, 236, 241, 264, 303], "comment": [92, 108, 124, 138, 160, 244], "doubt": 92, "find_brouwer_separable_design": [92, 93], "andri": 92, "european": [92, 108, 185], "1980": 92, "sciencedirect": [92, 143, 346], "scienc": [92, 108, 109, 143, 152, 192, 193, 289, 302, 346], "pii": [92, 143, 346], "s0195669880800199": 92, "e3": [92, 138, 255], "iv": [92, 127, 133, 147, 172, 225, 232, 273, 305], "e4": [92, 138, 255], "find_construction_3_3": [92, 93], "177": [92, 93, 146, 242], "nichola": [92, 93], "cavenagh": [92, 93], "concern": [92, 93, 273, 278], "eight": [92, 93, 238], "find_construction_3_4": [92, 93], "164": [92, 235], "find_construction_3_5": [92, 93], "find_construction_3_6": [92, 93], "756": [92, 138], "AND": 92, "find_q_x": [92, 93], "158": [92, 93, 108, 303, 315], "malcolm": 92, "374": 92, "n3": 92, "dukesling14": [92, 93], "rees93": 92, "rees00": 92, "sn_1": 92, "n_1n_2": [92, 93], "1_i": [92, 141], "promis": 92, "n_1n_3": 92, "smoothli": [92, 238], "find_three_factor_product": [92, 93], "648": [92, 93], "duke": [92, 134, 189], "alan": [92, 132, 182], "ling": 92, "1401": 92, "1466": 92, "rolf": 92, "257": [92, 94, 336], "enrich": 92, "m_x": 92, "accordingli": [92, 107, 127, 138, 141, 146, 182, 187, 196, 207, 271, 276, 362], "find_thwart_lemma_3_5": [92, 93], "mieczyslaw": 92, "wojta": 92, "1046": [92, 93], "os64": 92, "find_thwart_lemma_4_1": [92, 93], "ostrom": 92, "sherk": 92, "bull": [92, 102], "vol7": 92, "1964": [92, 108, 315], "find_recursive_construct": 93, "find_": 93, "find_wilson_decomposition_with_two_truncated_group": 93, "x_c": 93, "hypothes": 93, "stronger": [93, 182, 187], "1048": 93, "1059": 93, "1524": 93, "2164": 93, "3362": 93, "3992": 93, "3994": 93, "207": [93, 102, 108, 356], "int_as_sum": 93, "s_k": [93, 110, 145, 161, 188, 343], "kirkman": 94, "v_4_1_rbibd": 94, "pbd_4_7": 94, "pbd_4_7_from_i": 94, "3v": 94, "nn": [94, 114, 120, 124, 144, 145, 188, 191, 227, 247, 354, 358, 359, 362, 372], "stinson91": 94, "novemb": [94, 96, 146], "393": 94, "90294": 94, "rcw71": 94, "rai": [94, 98, 238, 240, 340], "chaudhuri": 94, "schoolgirl": 94, "proceed": [94, 144, 180, 188, 236], "symposia": 94, "pure": [94, 232, 292, 340, 352, 354, 362], "resolvable_bibd": 94, "ix": [94, 180], "kirkmman": 94, "0123456789abcd": 94, "to_nam": 94, "r_s_t": 94, "dai": [94, 108, 134, 180, 182], "07e": 94, "18e": 94, "29e": 94, "3ae": 94, "4be": 94, "5ce": 94, "6de": 94, "24a": 94, "35b": 94, "46c": 94, "05d": 94, "028": 94, "26b": 94, "03c": 94, "14d": 94, "049": 94, "15a": 94, "458": 94, "569": 94, "06a": 94, "01b": 94, "12c": 94, "23d": 94, "347": [94, 235], "acd": 94, "7bd": 94, "78c": 94, "89d": 94, "79a": 94, "8ab": 94, "9bc": 94, "kts15": 94, "3q": 94, "sqs_n": 95, "understand": [95, 107, 238, 369], "han1960": 95, "horan": 95, "hurlbert": 95, "hh2012": 95, "listen": 95, "pauvr": 95, "delahay": 95, "redistribut": 95, "two_n": 95, "three_n_minus_two": 95, "three_n_minus_eight": 95, "three_n_minus_four": 95, "four_n_minus_six": 95, "twelve_n_minus_ten": 95, "12n": 95, "sqs_": 95, "barp": 95, "ep": [95, 184, 215, 238, 354], "barp_system": 95, "k_": [95, 144, 276, 291, 293, 302, 369], "sq": [95, 286], "relabel_system": 95, "upl": 95, "sqs8": 95, "sqs4": 95, "aut": [96, 108, 160, 310], "bitset": 96, "struct": [96, 173], "limb": 96, "set_spac": 96, "uint64_t": 96, "address": [96, 114], "sizeof": 96, "void": 96, "induced_hypergraph": 96, "h1": [96, 108, 182, 276], "tmp1": 96, "trace_hypergraph64": 96, "subsetneq": 96, "r_0": [96, 121, 232], "rememb": [96, 225, 310], "qsort": 96, "qsort_r": 96, "slowdown": 96, "huge": [96, 108], "influenc": [96, 108], "heurist": [96, 124, 160], "relabel_heurist": 96, "airport": 96, "chennai": 96, "subhypergraphsearch": 96, "hard": [96, 136, 244, 303, 354], "cliqu": 96, "ti": [96, 127, 130, 240, 241], "seidel": [97, 138], "isol": [97, 359], "cf": [97, 108, 109, 121, 138, 186, 188, 239, 315, 354, 369], "dima": 97, "pasechnik": 97, "aug": 97, "is_regular_twograph": 97, "taylor_twograph": 97, "taylor": [97, 238, 323, 354], "is_twograph": 97, "twograph_descend": 97, "twograph": 97, "completegraph": [97, 187], "line_graph": 97, "pc": [97, 182, 187], "1260": 97, "pathgraph": 97, "hermitean": 97, "7e": 97, "strongly_regular_graph": 97, "northwest": [98, 116, 134, 160, 313, 352], "northwestdiagram": 98, "roth": [98, 172], "rothediagram": 98, "trevor": [98, 133, 172, 313, 314], "karn": [98, 133, 172, 313, 314], "n_row": 98, "n_col": 98, "absenc": [98, 354], "n_cell": 98, "number_of_cel": 98, "ncol": [98, 136, 139, 226, 238], "number_of_col": 98, "nrow": [98, 136, 139, 226, 238], "number_of_row": 98, "dgm": 98, "from_composit": 98, "vdash": [98, 133, 145, 160, 287, 303, 305, 323], "from_polyomino": 98, "from_zero_one_matrix": 98, "presenc": [98, 172], "j2": [98, 289, 343], "notn": 98, "implicit": [98, 359, 365], "peelable_tableaux": 98, "peelabl": 98, "plai": [98, 160, 164, 238, 244, 336, 347, 354, 362], "jeu": [98, 169, 170, 314, 346], "taquin": [98, 169, 170, 314, 346], "rs1995": 98, "nwd": 98, "251643": 98, "64817235": 98, "d_5": [98, 225], "d3": [98, 225, 253, 254], "remark": [98, 127, 145, 146, 222, 238, 242, 293, 354], "confid": 98, "live": [98, 104, 108, 129, 212, 236, 238, 242, 264, 271, 286, 289, 293, 296, 302, 340], "nwdgm": 98, "protyp": 98, "omega_j": 98, "rothe_diagram": [98, 172], "partiton": 98, "ferrers_diagram": [98, 160, 164, 313, 354], "altough": 98, "subtl": 98, "axi": [98, 101, 174, 182, 227, 359, 363], "from_skew_partit": 98, "from_parallelogram_polyomino": 98, "parallelogrampolyomino": [98, 158], "from_permut": [98, 196], "death": 98, "across": [98, 101, 120, 141, 174, 232, 238, 242, 243, 276, 343, 346, 348], "stephen": 99, "doti": 99, "lauv": [99, 141], "georg": [99, 163], "seeling": [99, 163], "brauer": [99, 273], "individu": [99, 124, 160, 164, 219, 235, 240, 302, 315, 332, 348, 369], "diagram_algebra": [99, 278], "abstractpartitiondiagram": 99, "abstractsetpartit": [99, 278], "pd": [99, 168, 278], "pd1": 99, "pd2": 99, "pd3": 99, "pd4": 99, "base_diagram": 99, "count_blocks_of_s": 99, "partitiondiagram": [99, 278], "flip": [99, 101, 297, 340, 346], "is_planar": [99, 161, 182, 354], "brauerdiagram": 99, "propagating_numb": [99, 161], "set_partit": [99, 180, 182, 278], "primari": [99, 139, 159, 310], "_diagram_func": 99, "elm": [99, 151, 163, 180, 182, 183, 187], "braueralgebra": 99, "subpartitionalgebra": 99, "unitdiagrammixin": 99, "jucys_murphi": [99, 343], "juci": [99, 343, 347], "murphi": [99, 343, 347], "naz96": 99, "nazarov": 99, "664": 99, "693": 99, "bd1": 99, "bd2": 99, "bijection_on_free_nod": 99, "two_lin": 99, "elm2": 99, "involution_permutation_tripl": 99, "curt": 99, "graham": [99, 315], "lehrer": [99, 303], "honest": [99, 313], "is_elementary_symmetr": 99, "from_involution_permutation_tripl": 99, "d1_d2_pi": 99, "gl1996": 99, "cellular": [99, 172, 343], "invention": 99, "mathematica": [99, 108, 187, 190, 216], "symmetric_diagram": 99, "placement": [99, 276, 278], "diagramalgebra": 99, "pa": [99, 161, 311], "diagrambasi": 99, "idealdiagram": 99, "orbitbasi": 99, "bh2017": 99, "moebiu": [99, 181, 182, 185, 315], "o2": [99, 141], "orbit_basi": 99, "ob": 99, "contrast": [99, 108, 109, 120, 303], "to_diagram_basi": 99, "to_orbit_basi": 99, "diagram_basi": 99, "sp": [99, 145, 151, 161, 197, 225, 278, 286, 302, 303, 304, 316, 332, 342, 344, 359], "o1": [99, 141], "o3": 99, "o4": 99, "nevertheless": [99, 108], "vivid": 99, "speak": [99, 120, 124, 139, 227, 268, 310, 347, 354, 362], "predefin": [99, 108, 225, 312], "excel": [99, 238, 302], "hr2005": 99, "Be": [99, 108, 156, 172, 358, 366, 369], "wish": [99, 133, 141, 238, 275], "00000000000000": [99, 115, 168, 244, 362, 363], "temperleyliebalgebra": 99, "sr": [99, 160, 193, 228, 236, 363], "fractionfield": [99, 286, 289, 290, 292, 293, 296, 302, 303], "l_i": [99, 101, 126, 182, 215, 216, 359], "eny2012": 99, "2i": [99, 138, 174, 352], "cre2020": 99, "eny2013": 99, "jucys_murphy_el": 99, "v1": [99, 104, 108, 109, 359], "lsum": 99, "floor": [99, 123, 124, 158, 315, 354], "ceil": [99, 123, 124, 315, 346], "p2h": 99, "generator_a": 99, "generator_": 99, "borrow": 99, "leading_term": 99, "planaralgebra": 99, "planardiagram": 99, "pld": 99, "propagatingid": 99, "tl_diagram_ascii_art": 99, "use_unicod": [99, 157], "ascii": [99, 101, 157, 158, 227, 239, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 265, 267, 268, 269, 270], "art": [99, 101, 107, 157, 227, 239, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 265, 267, 268, 269, 270, 302], "unicod": [99, 101, 157], "tl": 99, "temperleyliebdiagram": 99, "identity_set_partit": 99, "brauer_diagram": 99, "diagram_latex": 99, "edge_opt": 99, "edge_addit": 99, "1ex": 99, "tikzstyl": 99, "7pt": 99, "sep": [99, 102, 368], "1pt": 99, "control": [99, 112, 124, 192, 354], "ideal_diagram": 99, "all_diagram": 99, "partition_diagram": 99, "to_set_partit": [99, 161], "pair_to_graph": [99, 161], "15958": [99, 161], "sp3": [99, 161, 172], "sp4": [99, 161], "planar_diagram": 99, "da2": 99, "da5o2": 99, "planar_partitions_rec": 99, "rho_1": [99, 300, 303], "rho_k": 99, "loss": [99, 127], "to_brauer_partit": 99, "to_graph": [99, 161, 171], "allexactcov": [100, 137], "ajanki": 100, "dlxmatrix": 100, "initialsolut": 100, "i_11": [100, 137], "i_12": [100, 137], "i_1r": [100, 137], "i_m1": [100, 137], "i_m2": [100, 137], "i_jk": [100, 137], "1110": [100, 137], "1010": [100, 109, 137, 154, 192, 359, 365], "0100": [100, 137, 356, 367, 369], "0001": [100, 137, 185, 192, 276, 359], "dlxm": 100, "reserv": [100, 108, 120], "apologi": 100, "heartach": 100, "caus": [100, 156, 182, 221, 238, 275, 314, 343, 346, 348, 354, 366], "blame": 100, "yourself": 100, "permiss": 100, "highli": [100, 354], "sudoku": 100, "beautifulli": 100, "cur": 100, "best_column": 100, "uncov": 100, "oneexactcov": [100, 137], "sta": [101, 130, 146, 160, 276, 285, 300, 301, 302, 303, 305, 314, 346], "ec2": [101, 130, 146, 160, 276, 303, 314, 346], "stacat98": 101, "dan": [101, 154, 160, 172, 236], "drake": [101, 154, 160, 172], "dyckwordbacktrack": 101, "nondecreasingparkingfunct": [101, 153, 159], "area": [101, 123, 158, 159, 160, 348, 363], "dinv": [101, 159], "bounc": [101, 158], "jean": [101, 154, 239, 240, 292, 302, 303, 308, 362], "baptist": [101, 154, 308], "priez": [101, 154, 308], "richard": [101, 120, 187, 300, 302], "stanlei": [101, 120, 122, 147, 183, 187, 237, 285, 290, 300, 301, 302, 303, 305, 346], "excerpt": 101, "mit": 101, "rstan": 101, "ec": [101, 369], "hag2008": 101, "haglund": [101, 143, 147, 159, 236, 297], "harmon": [101, 146, 159, 239], "appendix": [101, 159, 236, 302], "pennsylvania": [101, 159], "philadelphia": [101, 159], "bk2001": 101, "bandlow": [101, 144, 146, 302, 346, 348], "killpatrick": 101, "to_inv": 101, "electron": [101, 108, 151, 302, 363], "ep2004": 101, "elizald": 101, "pak": [101, 122, 346], "jcta": [101, 305], "105": [101, 161, 164, 171, 187, 235, 303, 311, 315], "ck2008": 101, "claesson": 101, "kitaev": 101, "s\u00e9minair": 101, "lotharingien": 101, "combinatoir": [101, 362, 363], "0805": 101, "1325": 101, "knu1973": 101, "addison": 101, "weslei": 101, "ma": 101, "kra2001": 101, "krattenthal": 101, "adv": [101, 143, 171, 235, 292, 296, 302, 303, 340], "appl": [101, 108, 171, 293, 356, 362, 369], "510": 101, "530": [101, 306], "ds1992": 101, "denis": 101, "simion": [101, 172], "completedyckword": 101, "dyckword_complet": 101, "from_catalan_cod": 101, "from_area_sequ": 101, "to_area_sequ": [101, 159], "from_non_decreasing_parking_funct": 101, "pf": [101, 153, 159, 237], "from_noncrossing_partit": 101, "ncp": [101, 115], "noncrossing_partit": 101, "dw": [101, 130, 153, 154], "dws2": 101, "completedyckwords_al": 101, "dyckwords_al": 101, "height_poset": 101, "dw1": [101, 130], "dw2": [101, 130], "completedyckwords_s": 101, "dyckwords_s": 101, "ascend": 101, "lowest": [101, 130, 172, 173, 182, 235, 346, 363], "preced": [101, 108, 130, 225, 291, 293], "north": [101, 108, 134, 154, 155, 158, 160, 306, 346, 363], "east": [101, 134, 154, 155, 158, 160, 313, 363], "ne": [101, 155, 159, 160, 234, 236, 313, 363], "se": [101, 151, 160, 313, 359], "area_sequ": [101, 159], "heights_sequ": 101, "to_path_str": 101, "___": [101, 153, 154, 159], "ascent_prime_decomposit": 101, "associated_parenthesi": 101, "po": [101, 130, 158, 180, 182, 186, 238, 339, 359, 362], "parenthesi": [101, 346], "catalan_factor": 101, "cc1982": 101, "lot2005": 101, "quadrant": [101, 154], "from_height": 101, "min_from_height": 101, "closer": [101, 234, 278], "tikz_scal": [101, 130, 154, 278], "vallei": 101, "number_of_close_symbol": 101, "number_of_double_ris": 101, "number_of_open_symbol": 101, "number_of_peak": [101, 172], "number_of_vallei": 101, "position_of_first_return": 101, "positions_of_double_ris": 101, "underpath": [101, 154, 159], "south": [101, 108, 134, 158, 160, 313, 363], "_____": [101, 154, 159], "3x": [101, 159], "_______": [101, 159], "returns_to_zero": 101, "rise_composit": 101, "lower_dyck_word": [101, 130], "upper_dyck_word": [101, 130], "pad": [101, 108, 145, 160, 163, 193, 238, 303], "region": [101, 120, 160, 241, 350, 363], "subdivid": [101, 268], "ordin": [101, 182, 187], "l_0": [101, 182, 236], "hopefulli": [101, 241], "to_binary_tree_tamari": 101, "to_standard_tableau": [101, 131], "to_tamari_sorting_tupl": 101, "to_catalan_cod": 101, "touch_composit": [101, 159], "touch_point": [101, 159], "abscissa": 101, "compris": [101, 158, 275], "parenthes": [101, 113, 172, 333, 346, 354], "dwb": 101, "shouldn": 101, "saniti": [101, 197], "_rec": 101, "dyckwords_class": 101, "area_dinv_to_bounce_area_map": 101, "bounce_area_to_area_dinv_map": 101, "trail": [101, 108, 124, 127, 133, 160, 163, 174, 285, 300, 301, 303, 305, 314, 346, 359, 374], "billiard": 101, "ball": [101, 333, 340], "shot": 101, "west": [101, 134, 160, 363], "strike": 101, "j_r": [101, 141, 146], "bounce_path": [101, 158], "travel": 101, "characteristic_symmetric_funct": 101, "fraction_field": [101, 131, 146, 147, 151, 159, 234, 236, 241, 284, 286, 287, 289, 290, 292, 293, 296, 297, 302, 303, 354, 374], "nabla": [101, 134, 159, 293, 303], "decomposition_revers": 101, "haiman": [101, 120, 147, 183, 236, 241, 293, 297], "first_return_decomposit": 101, "list_parking_funct": 101, "number_of_parking_funct": 101, "pi_i": [101, 183, 187, 232, 233, 236, 241], "number_of_tunnel": 101, "tunnel_typ": 101, "tunnel": 101, "parking_funct": [101, 159], "pyramid_weight": 101, "pyramid": [101, 315], "reading_permut": 101, "furthest": 101, "to_321_avoiding_permut": 101, "to_alternating_sign_matrix": [101, 115, 172, 312], "to_non_decreasing_parking_funct": 101, "bian": 101, "stu2008": 101, "to_noncrossing_permut": 101, "mathieu": 101, "dutour": 101, "maj": [101, 141, 172, 297], "peal": 101, "to_ordered_tre": [101, 158], "to_pair_of_standard_tableaux": 101, "to_triangul": 101, "stai": 101, "co": [101, 141, 146, 147, 180, 182, 229, 236, 297, 313, 315], "chop": [101, 374], "recov": [101, 120, 122, 131, 136, 141, 163, 182, 187, 189, 191, 215, 219, 222, 234, 235, 236, 238, 241, 244, 272, 354], "cha2005": 101, "to_triangulation_as_graph": 101, "perimet": [101, 115, 120, 158, 363], "adw": 101, "dw32": 101, "surpass": [101, 314], "understood": [101, 107, 122, 146, 160, 187, 225, 276, 302, 303, 346, 364], "diagram_styl": [101, 154], "latex_bounce_path": 101, "latex_color": [101, 154], "latex_diagon": 101, "latex_line_width_scalar": [101, 130, 154], "latex_peak": 101, "latex_tikz_scal": [101, 130, 154], "latex_vallei": 101, "is_a": [101, 153, 159], "is_area_sequ": 101, "return_touch": 101, "replace_paren": 101, "open_symbol": 101, "close_symbol": 101, "replace_symbol": 101, "patch": [102, 108], "e1star": [102, 362], "ccc": 102, "bigcup_": [102, 354], "timo": [102, 362], "jolivet": [102, 362], "stepan": [102, 358, 362], "starosta": [102, 358, 362], "sebastien": [102, 360, 362, 363, 372], "labb": [102, 360, 362, 363, 372], "redesign": 102, "ai": [102, 365], "arnoux": [102, 362], "ito": [102, 362], "pisot": [102, 362], "belg": 102, "sano": [102, 362], "anal": [102, 293], "183": [102, 362], "e_one_star": [102, 362], "wordmorph": [102, 190, 356, 357, 359, 360, 362, 363, 366, 369, 372], "repaint": 102, "sequenti": 102, "yellow": [102, 134, 160, 183, 186, 350], "matplotlib": [102, 115, 187, 238, 359], "datad": [102, 359], "summer": 102, "hsv": [102, 359, 362], "3d": [102, 174, 238, 242, 354, 362, 363], "plot3d": [102, 174, 190, 238, 354], "plot_tikz": 102, "216506cm": 102, "125000cm": 102, "000000cm": 102, "250000cm": 102, "definecolor": 102, "facecolor": 102, "rgb": [102, 115, 238], "unimodular": [102, 116, 362], "enabl": [102, 172, 174, 192, 337, 354], "inverse_matrix": 102, "face_contour": 102, "contour": [102, 359], "faces_of_color": 102, "faces_of_typ": 102, "faces_of_vector": 102, "occurrences_of": 102, "projmat": 102, "opac": [102, 242, 362], "isometr": [102, 350], "print_tikz_env": 102, "edgecolor": 102, "drawzero": 102, "extra_code_befor": 102, "extra_code_aft": 102, "environ": [102, 157, 158], "602": [102, 235], "add_to_preambl": 102, "usepackag": [102, 108, 134], "shade": [102, 311], "7071": 102, "986": [102, 367], "433013cm": 102, "500000cm": 102, "50000000000000": [102, 170, 363], "80000000000000": [102, 116], "5mm": 102, "set1": 102, "colormap": [102, 362], "shortcut": [102, 145, 227, 273, 354, 358], "proofread": [103, 198, 317], "weightedintegervector": [103, 128, 354], "integervectorsmodpermutationgroup": [103, 104, 129], "permutationgroup": [103, 104, 129, 139, 346, 348], "finitesetmap": 103, "pairwisecompatiblesubset": [103, 187, 338], "orderedmultisetpartitionsintoset": [103, 141], "orderedmultisetpartitionintoset": [103, 141], "proemin": 103, "map_reduc": 103, "latticepolytop": [103, 190, 354], "enumeration_mod_permgroup": 104, "all_children": 104, "max_part": [104, 123, 124, 127, 129, 131, 140, 160, 190, 296, 354], "clonableintarrai": [104, 127, 129], "list_clone_demo": [104, 278], "increasingintarrai": 104, "canonical_children": 104, "sg": [104, 129], "is_canon": [104, 129], "strong_generating_system": 104, "ia": 104, "canonical_representative_of_orbit_of": 104, "lex_cmp": 104, "v2": [104, 108, 359], "v_2": [104, 141, 172, 187, 276, 359], "lex_cmp_parti": 104, "nick": [105, 315], "expnum": 105, "aa": [105, 138, 140, 359, 362, 363, 368, 372], "exponenti": [105, 108, 160, 236, 280, 285, 288, 294, 300, 301, 303, 315, 323, 332, 354, 359, 362], "4140": [105, 315], "21147": [105, 315], "expnums2": 105, "vanilla": 105, "compil": [105, 158], "monad": 107, "reader": [107, 147, 227, 302], "wiki": [107, 238, 369], "haskel": 107, "the_monad": 107, "previous_issu": 107, "sunko": 107, "shorter": [107, 145, 160, 231, 242, 302, 359], "tweak": [107, 244, 362], "fast_vector_partit": 107, "min_val": 107, "older": [107, 348], "fastvpart": 107, "vpart": 107, "vectorpartit": [107, 355], "686": [107, 315], "dickson": 107, "recursive_vector_partit": 107, "vl": 107, "recursive_within_from_to": 107, "use": 107, "flag": [107, 108, 134, 180, 187, 188, 239, 277, 345, 352], "ineffici": 107, "cumul": 107, "accumul": [107, 123, 315], "within_from_to": 107, "clip": [107, 238], "signific": [107, 108, 109, 187, 303, 354], "captur": 107, "transpar": [107, 187, 238, 242], "protect": 107, "preconstruct": 108, "iter_st": [108, 109], "iter_initial_st": 108, "final_st": [108, 109, 365], "iter_final_st": [108, 109], "iter_transit": 108, "induced_sub_finite_state_machin": 108, "accessible_compon": 108, "coaccessible_compon": 108, "coaccess": 108, "final_compon": 108, "empty_copi": 108, "deep": 108, "deepcopi": 108, "with_output": [108, 109], "add_stat": 108, "delete_st": 108, "add_transit": 108, "add_transitions_from_funct": 108, "input_alphabet": [108, 109], "output_alphabet": [108, 109], "on_duplicate_transit": 108, "add_from_transition_funct": 108, "delete_transit": 108, "remove_epsilon_transit": 108, "split_transit": 108, "determine_alphabet": 108, "determine_input_alphabet": 108, "determine_output_alphabet": 108, "construct_final_word_out": 108, "with_final_word_out": 108, "has_stat": 108, "has_initial_st": 108, "has_final_st": 108, "has_transit": 108, "is_determinist": 108, "is_equival": [108, 109], "is_markov_chain": 108, "is_monochromat": 108, "number_of_word": 108, "asymptotic_mo": 108, "varianc": 108, "moments_waiting_tim": 108, "wait": [108, 109, 238], "epsilon_successor": 108, "shannon_parry_markov_chain": 108, "parri": 108, "measur": [108, 160, 186, 350], "disjoint_union": [108, 187], "kleene_star": [108, 109], "kleen": 108, "product_finitestatemachin": 108, "input_project": 108, "output_project": 108, "determinis": 108, "iter_process": 108, "prepone_output": 108, "prepon": 108, "equivalence_class": 108, "merged_transit": 108, "markov_chain_simplif": 108, "adjacency_matrix": [108, 169, 365], "set_coordin": 108, "default_format_transition_label": 108, "format_letter_neg": 108, "format_transition_label_revers": 108, "final_word_out": [108, 109], "is_initi": 108, "initial_prob": 108, "fully_equ": 108, "from_stat": 108, "to_stat": 108, "word_in": 108, "word_out": [108, 109], "tape": 108, "preview_word": 108, "full_group_bi": 108, "startswith": [108, 315], "fsmlettersymbol": 108, "fsmwordsymbol": 108, "is_fsmstat": 108, "is_fsmtransit": 108, "is_finitestatemachin": 108, "duplicate_transition_ignor": 108, "duplicate_transition_raise_error": 108, "duplicate_transition_add_input": 108, "fsm": 108, "night": 108, "sunris": 108, "sunset": 108, "anyhow": 108, "got": [108, 236], "digit": [108, 109, 192, 315, 345, 354, 356, 359, 360, 366, 369], "arriv": [108, 172], "forbid": 108, "forbidden": [108, 134, 190, 354, 368], "containsword": [108, 109], "naf_neg": 108, "emptyword": [108, 109], "naf_posit": 108, "typeset": 108, "pgf": 108, "tol": 108, "1e": 108, "auto": [108, 188, 284, 289], "v0": [108, 109], "000000": [108, 115, 158], "texttt": 108, "anchor": [108, 183, 184, 186], "initial_wher": 108, "format_lett": 108, "format_state_label": 108, "usetikzlibrari": 108, "preambl": 108, "land": [108, 109, 314], "feed": 108, "1101": [108, 120, 369], "0010": [108, 192], "automatic_output_typ": 108, "tm": [108, 356, 359, 362, 369], "thuemorseword": [108, 356, 359, 369, 370], "0110100110010110100101100110100110010110": [108, 356, 360, 366, 369], "1001011001101001011010011001011001101001": 108, "remaind": [108, 127, 193, 285, 300, 301, 302, 303, 305, 337, 346], "state_from": 108, "state_to": 108, "gray_cod": [108, 109, 118], "bitwis": 108, "xor": 108, "easier": [108, 114, 199, 326], "shift_right_transit": 108, "shift_right_transduc": 108, "weird": 108, "enforc": [108, 187], "xor_transit": 108, "__xor__": 108, "xor_transduc": 108, "fed": 108, "product_transduc": 108, "gray_transduc": 108, "prepackag": 108, "graycod": [108, 109], "srang": [108, 109, 176, 193], "state_hook": 108, "finite_state_machin": 108, "transition_hook": 108, "rerun": 108, "check_epsilon_transit": 108, "serious": 108, "cleaner": [108, 238], "16538": 108, "usag": [108, 124, 187, 310, 354, 367], "update_count": 108, "next_stat": [108, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209], "elif": 108, "hkp2015": [108, 109], "clemen": [108, 109], "heuberg": [108, 109], "sara": [108, 109], "kropf": [108, 109], "helmut": 108, "proding": 108, "fluctuat": 108, "hkw2015": 108, "wagner": 108, "covari": 108, "ejc": 108, "004": 108, "krenn": [108, 109, 176, 192, 193], "releas": 108, "candid": [108, 123], "trac": [108, 160], "15078": 108, "bunch": [108, 160], "15841": 108, "15847": 108, "15848": 108, "15849": 108, "15850": 108, "15922": 108, "15923": 108, "15924": 108, "15925": 108, "15928": 108, "15960": 108, "15961": 108, "15962": 108, "15963": 108, "15975": 108, "16016": 108, "16024": 108, "16061": 108, "16128": 108, "16132": 108, "16138": 108, "16139": 108, "16140": 108, "16143": [108, 109], "16144": 108, "16145": 108, "16146": 108, "16191": 108, "16200": 108, "16205": 108, "16206": 108, "16207": 108, "16229": 108, "16253": 108, "16254": 108, "16255": 108, "16266": 108, "16355": 108, "16357": [108, 235], "16387": 108, "16425": 108, "16539": 108, "16555": 108, "16557": 108, "16588": 108, "16589": 108, "16666": 108, "16668": 108, "16674": 108, "16675": 108, "16677": 108, "18227": [108, 109], "acknowledg": [108, 109, 192, 193, 236, 302], "austrian": [108, 109, 192, 193], "fund": [108, 109, 192, 193], "fwf": [108, 109, 192, 193], "24644": [108, 109, 192, 193], "n26": [108, 109, 192, 193], "only_accessible_compon": 108, "pipe": [108, 149, 151, 278], "new_input_alphabet": 108, "aut1": 108, "aut2": 108, "frozenset": [108, 141, 182, 187, 280, 350], "unhash": 108, "19199": 108, "moor": [108, 346, 359], "brzozowski": 108, "b_tran": 108, "c_tran": 108, "input_tap": 108, "use_multitape_input": 108, "list_of_output": 108, "only_accept": 108, "full_output": 108, "always_include_output": 108, "format_output": 108, "readabl": [108, 238, 354], "write_final_word_out": 108, "activ": [108, 354, 365], "process_all_prefixes_of_input": 108, "process_iterator_class": 108, "experiment": [108, 239, 240], "condens": [108, 352], "exit": 108, "stationari": 108, "s1948": 108, "p1964": 108, "p_naf": 108, "hkp2015a": 108, "carri": [108, 114, 120, 149, 244, 275, 316, 365], "1503": 108, "08816": 108, "intrins": 108, "transact": 108, "american": [108, 188, 303, 369], "societi": [108, 188], "1090": [108, 188, 189, 310], "s0002": [108, 172, 188, 189, 310], "9947": [108, 172, 189, 310], "0161372": 108, "shannon": 108, "commun": [108, 211, 362], "1948": [108, 188, 189], "423": [108, 241], "1538": 108, "7305": 108, "tb01338": 108, "word_out_funct": 108, "fsmemptywordsymbol": 108, "thrown": 108, "visit": [108, 365], "invok": [108, 160, 242, 273], "tape_cach": 108, "finishedbranch": 108, "encapsul": [108, 164], "track_numb": 108, "return_word": [108, 359], "allow_label_non": 108, "distinguish": [108, 121, 130, 145, 183, 186, 187, 232, 233, 236, 239, 275, 303, 315, 352, 354], "subsequenti": 108, "shallow": 108, "memo": 108, "compare_color": 108, "store_states_dict": 108, "pendant": 108, "occurr": [108, 109, 114, 160, 186, 237, 336, 356, 359, 365, 368], "skip": [108, 124, 127, 180, 182, 187, 192, 193, 194, 216, 265, 286, 289, 343, 347, 354, 359], "lookuperror": 108, "emul": [108, 236], "iterator_typ": 108, "binary_invert": 108, "100100": 108, "fibonacciword": [108, 356, 359, 367, 369], "0100101001001010010100100101001001010010": [108, 356, 369], "1011010110110101101011011010110110101101": 108, "explore_existing_st": 108, "new_stat": 108, "output_word": 108, "transition_funct": [108, 365], "labels_as_input": 108, "label_as_input": 108, "state1": 108, "state2": 108, "en": [108, 154, 225, 273, 362, 363], "vn": 108, "cn": [108, 304], "degrad": 108, "rescal": [108, 146, 238], "trivari": 108, "ham": [108, 109], "adjacent_form": [108, 109], "hp2007": 108, "binary_27": 108, "naf_27": 108, "weight_transduc": 108, "nafweight": 108, "asymptot": [108, 354], "aim": 108, "vanish": [108, 121, 188, 307], "block10": 108, "countsubblockoccurr": [108, 109], "block11": 108, "correl": [108, 138], "block01": 108, "product_01x10": 108, "block_differ": 108, "periodica": 108, "hungarica": 108, "1007": 108, "s10998": 108, "007": 108, "3081": 108, "hd": 108, "awar": [108, 187, 244, 273], "w_1w_2": 108, "is_automaton": 108, "is_transduc": 108, "allow_non_fin": 108, "default_format_lett": 108, "blank": 108, "emptywordlatex": 108, "perhap": [108, 120, 131, 186, 217, 293], "restor": [108, 145], "format_transition_label": 108, "custom_format_transition_label": 108, "eras": [108, 172, 354, 362, 372], "words_in_out": 108, "18989": 108, "new_class": 108, "fe": [108, 236], "p_b": [108, 186], "mathit": [108, 192, 193], "fc": [108, 114], "customari": [108, 271], "sub_fsm": 108, "is_zero": [108, 109, 241], "sophist": 108, "trick": [108, 227, 238], "del": 108, "is_zero_polynomi": 108, "18556": 108, "simpler": [108, 193], "4r": 108, "multilett": 108, "undesir": 108, "loop_wher": 108, "accepting_styl": 108, "accepting_dist": 108, "accepting_wher": 108, "accepting_show_empti": 108, "equidistantli": 108, "radiu": [108, 278, 311, 350], "7ex": 108, "angl": [108, 238, 278, 350], "format_label": 108, "outlin": [108, 160, 278], "10ex": 108, "v4": 108, "333": 108, "328": [108, 350], "298": 108, "style": [108, 134, 154, 187, 221, 225, 232, 235, 242, 273, 303], "merger": 108, "expectation_onli": 108, "affect": [108, 112, 272, 305], "probabilist": 108, "fgt1992": 108, "eqn": 108, "fhp2015": 108, "unexpect": 108, "p_j": [108, 187], "frac1": 108, "displaystyl": 108, "biggl": 108, "2h": [108, 235], "biggr": 108, "s1986": 108, "theory_expect": 108, "theory_vari": 108, "all_count": 108, "adder": 108, "number_of_operand": [108, 109], "p_0": [108, 187, 276], "threshold": [108, 109], "r_v": 108, "alphabet_set": 108, "philipp": 108, "flajolet": 108, "dani\u00e8l": 108, "gardi": 108, "lo\u00ff": 108, "thimoni": 108, "birthdai": [108, 293], "paradox": 108, "coupon": 108, "collector": 108, "0166": [108, 187], "218x": [108, 187], "90177": 108, "uta": 108, "freiberg": 108, "smirnov": [108, 303], "08096": 108, "g\u00e1bor": 108, "sz\u00e9keli": 108, "reidel": 108, "compani": 108, "qqbar": [108, 303, 362], "eigenvalu": [108, 225, 226, 234, 236, 239, 241, 273, 293, 300, 302, 303, 343, 347, 362], "nafpm": 108, "nafp": 108, "170820393249937": 108, "618033988749895": 108, "1708203932499369": 108, "characteristic_polynomi": [108, 186, 187, 306], "numberfield": [108, 168], "golden_ratio": [108, 369], "jordan": [108, 121, 188, 310], "j3": [108, 343], "new_transit": 108, "old_transit": 108, "valid_input": 108, "earliest": 108, "inbound": 108, "routin": [108, 197], "outbound": 108, "inconsequenti": 108, "suppress": [108, 268, 343], "cdcd": 108, "ced": 108, "cdc": 108, "adcd": 108, "aed": 108, "adc": [108, 362], "final_funct": 108, "a_d": 108, "b_d": 108, "transition1": 108, "transition2": 108, "t_a": [108, 215, 346], "t_b": [108, 346], "fsmq": 108, "fsmq1": 108, "assertionerror": [108, 129, 236, 241, 244], "fsm1": 108, "fsm2": 108, "fsm3": 108, "fsm4": 108, "xyz": [108, 111, 113, 119, 187, 362, 372], "reverse_output_label": 108, "discuss": [108, 116, 134, 172, 182, 225, 227, 231, 264, 272, 302, 303, 313, 354], "path_word_out": 108, "respons": [108, 276], "realist": 108, "binary_transit": 108, "advertis": 108, "superflu": 108, "anymor": [108, 172, 238], "bcdbcdbe": 108, "cdbe": 108, "dbe": 108, "transducer1": 108, "transducer2": 108, "count_11": 108, "count_10": 108, "count_11x10": 108, "aut11": 108, "bawo2012": 108, "javier": 108, "baliosian": 108, "dina": 108, "wonsev": 108, "jiacun": 108, "wang": [108, 346, 348], "010011": 108, "101100": 108, "fsm_simplifi": 108, "identif": [108, 302], "stackoverflow": 108, "3844832": 108, "1052778": 108, "groupbi": 108, "prior": [108, 182, 187, 274, 372], "sortabl": [108, 172, 275, 362], "propos": [108, 365, 369], "15250161": 108, "suit": [108, 354], "is_fsmprocessiter": 108, "setup_latex_preambl": 108, "list_": 108, "tupleofwords_to_wordoftupl": 108, "tupleofword": 108, "wordoftuples_to_tupleofword": 108, "wordoftupl": 108, "anylett": 109, "recogn": [109, 232, 310, 354], "anyword": 109, "logic": [109, 128, 238], "subtract": [109, 120, 122, 130, 145, 163, 211, 272, 303, 315, 346], "subblock": 109, "transducergener": 109, "16141": 109, "16142": 109, "16186": 109, "finite_state_machine_gener": 109, "automatongener": 109, "unari": 109, "i_l": 109, "o_0": 109, "o_l": 109, "o_j": 109, "word_funct": 109, "output_r": 109, "recursionrul": 109, "arg1": 109, "argn": 109, "symbolicr": [109, 193], "pose": [109, 354], "whatev": [109, 124, 286], "ternari": 109, "ternary_expans": 109, "weight_sequ": 109, "naf": 109, "binary_expans": 109, "announc": 109, "bypass": 109, "artifici": [109, 173], "paperfold": 109, "question": [109, 124, 225, 236, 237, 278, 303, 354, 363], "kappa": [109, 121, 145, 160, 180, 340, 343, 347], "posed": 109, "0d": 109, "kd": 109, "operand": [109, 187, 296, 319, 322, 329, 335], "lor": 109, "hamming_weight": 109, "unary_weight": 109, "joint": [109, 236], "fqsymbas": 110, "omega_involut": [110, 145, 146, 284, 285, 288, 300, 301, 303], "f_u": 110, "g_u": 110, "abus": [110, 120, 145, 187, 227, 242, 247, 264, 266, 271, 272, 302], "psi_involut": [110, 145, 146], "iota": [110, 145, 215], "dualiti": [110, 120, 144, 145, 146, 147, 182, 244, 248, 251, 303], "to_qsym": 110, "descents_composit": [110, 159, 172, 303], "quasisymmetricfunct": [110, 144, 145, 146, 147, 303], "from_symmetric_group_algebra": 110, "sga4": 110, "f_x": 110, "f_y": 110, "f_z": 110, "succ": [110, 111, 146, 238, 242], "prec_by_coercion": 110, "succ_by_coercion": 110, "fqsymbasis_abstract": 110, "piec": [110, 134, 238, 315, 350, 362], "mr": [110, 146, 147], "grirei18": [110, 146, 303, 305], "treatment": [110, 354], "modern": [110, 130, 138], "s_l": [110, 188], "f_v": 110, "f_e": 110, "agusot05": 110, "aguiar": [110, 151], "sottil": 110, "sum_v": 110, "_v": 110, "unitriangular": [110, 298, 304], "mobiu": 110, "viewpoint": 110, "standard_permut": [110, 172, 314, 346, 359], "richer": [110, 354], "malvenuto": [110, 146, 183], "malvenutoreutenau": 110, "lr1998": [110, 111], "prec_product_on_basi": [110, 111], "succ_product_on_basi": [110, 111], "free_dendriform_algebra": 111, "dendriformfunctor": 111, "constructionfunctor": [111, 113], "freedendriform": 111, "hom": [111, 113, 151, 302], "functor": [111, 112, 113, 232, 333], "zt": [111, 113], "freedendriformalgebra": 111, "glue": 111, "operad": [111, 113], "algebra_gener": [111, 112, 113, 145, 343], "fgh": [111, 112, 113, 119], "xy": [111, 113, 119, 138, 174, 181, 185, 315, 352, 359, 362, 369, 372], "change_r": [111, 112, 113, 119, 168, 362], "rt": [111, 113, 119, 156, 197, 275], "indexerror": [111, 113, 119, 127, 315, 336, 346, 348, 359], "variable_nam": [111, 113, 119, 241], "free_modul": 112, "cartesianproductwithflatten": 112, "flatten": [112, 172, 275, 346, 361], "basis_kei": [112, 149, 185], "indexedgener": 112, "subcategori": [112, 176, 187], "moduleswithbasi": 112, "print_opt": [112, 145, 232], "commutative_additive_semigroup": 112, "commutativeadditivesemigroup": 112, "summat": [112, 354], "NOT": [112, 311, 348], "withbasi": [112, 302], "algebras_with_basi": 112, "hopf_algebras_with_basi": 112, "weightspac": [112, 242, 244, 264, 271, 272], "original_print_opt": 112, "iterate_kei": 112, "latex_bracket": 112, "latex_nam": 112, "latex_prefix": 112, "latex_scalar_mult": 112, "scalar_mult": 112, "sorting_kei": 112, "sorting_revers": 112, "string_quot": 112, "tensor_symbol": 112, "combinatorialfreemodule_cartesianproduct": 112, "combinatorialfreemodule_tensor": 112, "f_qq": 112, "vectorfunctor": 112, "synonym": [112, 146, 160, 273, 284, 285, 288, 300, 301, 303, 314], "_mul_": [112, 234], "magma": [112, 145, 187, 232], "__init_extra__": 112, "mro": [112, 156, 268], "freealgebra_with_categori": 112, "with_basi": 112, "indexed_el": 112, "_vector_": 112, "qs3": [112, 343], "qs2": [112, 343], "get_order_kei": 112, "finitedimensionalalgebraswithbasi": 112, "set_ord": 112, "akei": 112, "is_exact": 112, "groupalgebra": 112, "padicr": 112, "padic": 112, "linear_combin": 112, "iter_of_elements_coeff": 112, "factor_on_left": 112, "lambda_k": [112, 145, 160, 212], "iter_of_el": 112, "sum_of_term": [112, 211, 212, 236, 302, 303], "renam": [112, 124, 145, 180, 243, 293, 302, 315], "cartesian_embed": 112, "cartesian_factor": 112, "cartesian_project": 112, "summand_embed": 112, "summand_project": 112, "preexist": [112, 238, 265], "tensor_constructor": 112, "multilinear": 112, "phi_fg": 112, "phi_fgh": 112, "phi_fg_h": 112, "tensor_factor": 112, "free_prelie_algebra": 113, "freepreliealgebra": 113, "preli": 113, "properli": [113, 123, 131, 215, 234, 236, 238, 239, 272, 290, 302, 314, 323, 359], "freepreli": 113, "nap": [113, 275], "liv2006": 113, "nap_product": 113, "envelop": [113, 119, 123, 124, 303], "build_alphabet": [113, 119, 358], "rootedtre": [113, 119, 275], "meaning": [113, 119, 164, 242], "chaff": [113, 119], "chli": 113, "bracket_on_basi": 113, "pre_lie_product_on_basi": 113, "preliefunctor": 113, "nap_product_on_basi": 113, "pre_lie_product": 113, "ste1996": 114, "chase": 114, "meador": 114, "tianyuan": 114, "xu": 114, "draft": [114, 141, 193], "reu": 114, "colorado": 114, "boulder": 114, "rachel": 114, "castro": [114, 302], "joel": 114, "courtnei": 114, "magnuson": 114, "natali": 114, "schoenhal": 114, "fully_commutative_el": 114, "normalizedclonablelist": [114, 275], "cartier": 114, "foata": [114, 171, 172, 359], "gre2006": 114, "coset_decomposit": 114, "greedili": 114, "sw": [114, 159, 160, 313], "find_desc": 114, "group_el": 114, "has_desc": [114, 232, 242, 270, 274], "karg": 114, "gx2020": 114, "one_index": 114, "display_label": 114, "contigu": [114, 172, 314, 346], "n_valu": 114, "antichain": [114, 174, 180, 182, 186, 187], "b_5": 114, "repeatedli": [114, 120, 160, 278, 280, 365], "plot_heap": 114, "render": [114, 187], "graphicsobject": 114, "star_oper": 114, "kl1979": 114, "lus1985": 114, "paragraph": 114, "b_6": 114, "classfi": 114, "fall": [114, 119, 359], "seven": [114, 225], "e_n": [114, 180, 182, 183, 187, 305], "coxetermatrix": [114, 229, 230], "aforement": 114, "regardless": 114, "unnecessari": [114, 180, 183, 302, 354], "light": [114, 343], "b_3": [114, 225, 238, 244], "throw": [114, 139, 141, 227, 271], "fca3": 114, "b_8": 114, "fcb8": 114, "14299": 114, "fcaffinea2": 114, "iterate_to_length": 114, "xe8": 114, "knight": 115, "campbel": 115, "kevin": [115, 174], "dilk": [115, 174], "emili": 115, "gunawan": 115, "enhanc": 115, "fully_packed_loop": 115, "boundari": [115, 120, 130, 134, 158, 160, 168, 312, 346, 350, 363], "pro2001": 115, "fplb": 115, "sixvertexmodel": [115, 312], "boundary_condit": [115, 312], "rotated_ncp": 115, "perfectmatch": [115, 167, 171, 278], "mat": [115, 146, 225], "svm": 115, "str2015": 115, "nxn": 115, "loop_fil": 115, "curv": [115, 359], "link_": 115, "loop_": 115, "link_color": 115, "loop_color": 115, "color_map": 115, "link_color_map": 115, "loop_color_map": 115, "link_color_random": 115, "interior": [115, 146, 160], "pmatrix": [115, 138], "rainbow": [115, 359], "winter": 115, "graphics_arrai": 115, "00000000000": [115, 356], "0000000000000000": 115, "00000": [115, 359, 363], "0000": [115, 192, 359, 369], "00000000": 115, "0000000": 115, "0000000000": 115, "000000000000000": [115, 168, 359, 362, 363], "3x3": 115, "bbf": 116, "brubak": [116, 236], "friedberg": 116, "stud": [116, 292], "princeton": 116, "univ": [116, 146, 197, 344, 362], "jersei": 116, "gc50": 116, "cetlin": 116, "dokl": 116, "akad": 116, "nauk": 116, "sssr": 116, "825": 116, "828": 116, "1950": 116, "tok88": 116, "tokuyama": 116, "japan": 116, "671": 116, "685": 116, "1988": 116, "gelfand_tsetlin_pattern": 116, "zetlin": 116, "ccccccccc": 116, "ddot": 116, "strip": [116, 131, 134, 160, 342, 346, 348], "bmatrix": [116, 146, 216, 227, 231], "vdot": [116, 121], "tokuyama_coeffici": 116, "z_2": [116, 133, 145], "z_": [116, 133, 145, 286, 289, 302, 303, 323], "z_j": 116, "tz_i": 116, "bender_knuth_involut": [116, 170, 314, 346], "bender": [116, 170, 314, 346], "toggl": [116, 122, 170, 346], "berenstein": [116, 346], "boxed_entri": 116, "circled_entri": 116, "northeast": [116, 134, 160, 313, 346], "number_of_box": [116, 174], "number_of_circl": 116, "number_of_special_entri": 116, "special_entri": 116, "row_sum": [116, 126], "coin": [116, 136, 139, 216, 315], "top_row": 116, "tokuyama_formula": 116, "graph_path": 117, "graphpath": 117, "multiedg": [117, 180, 187], "graphpaths_al": 117, "graphpaths_common": 117, "incoming_edg": 117, "incom": [117, 187, 359, 365], "incoming_path": 117, "gp": [117, 276], "outgoing_edg": 117, "outgoing_path": 117, "paths_from_source_to_target": 117, "graphpaths_": 117, "graphpaths_st": 117, "graphpaths_t": 117, "revolv": 118, "door": 118, "knu2011": [118, 172], "m_0": 118, "m_k": [118, 121, 164, 215, 348], "loopless": 118, "radix": 118, "grossman_larson_algebra": 119, "grossmanlarsonalgebra": 119, "pana2002": 119, "grolar1": 119, "grossmanlarson": 119, "single_vertex_al": 119, "__": [119, 154, 174], "antipode_on_basi": [119, 145, 146, 150, 151, 300], "delta_xi": 119, "counit_on_basi": [119, 144, 149], "uv": [119, 187, 359], "tu": 119, "tv": 119, "single_vertex": 119, "freeli": [119, 232], "rulersk": [120, 276], "ruleburg": 120, "growthdiagram": 120, "llmssz2013": [120, 131, 160], "ls2007": 120, "accommod": 120, "invent": [120, 241], "sergei": [120, 302], "fom1994": 120, "fom1995": 120, "vast": 120, "forward": [120, 139, 172, 180, 187, 193, 276], "forward_rul": [120, 276], "out_label": 120, "p_symbol": 120, "q_symbol": 120, "alon": [120, 217], "backward_rul": [120, 276], "ruledomino": 120, "tradition": 120, "skewpartit": [120, 160, 197, 303, 313], "sundaram": [120, 303], "oscil": 120, "great": [120, 337], "reproduc": [120, 129, 138, 182, 186, 187, 276], "bruce": [120, 167, 168, 169, 170], "sagan": [120, 151, 344], "tom": [120, 122, 187, 273], "robi": [120, 122], "thesi": [120, 146, 306, 363], "rob1991": 120, "skewtableau": [120, 131, 167, 170, 196, 197, 314], "to_chain": [120, 307, 314, 346, 348], "conclud": [120, 227, 238, 343], "neighbour": [120, 354], "in_label": 120, "burg": 120, "viennot": [120, 156, 158, 171], "rulebinaryword": 120, "barbasch": 120, "vogan": 120, "ruleshiftedshap": 120, "worlei": 120, "rulesylvest": 120, "ruleyoungfibonacci": 120, "llm": 120, "rulellm": 120, "heart": [120, 354], "ud": [120, 312], "ri": [120, 343], "research": [120, 216, 276, 302, 354], "toler": 120, "deviat": 120, "rulepasc": 120, "attributeerror": 120, "is_p_edg": 120, "is_q_edg": 120, "_check_dual": 120, "zero_edg": 120, "clariti": 120, "has_multiple_edg": 120, "colour": [120, 307, 359], "v_n": [120, 172], "col": [120, 160, 164, 244], "p_chain": 120, "binaryword": 120, "1011": 120, "25631": 120, "q_chain": 120, "half_perimet": 120, "is_rectangular": [120, 346], "evacu": [120, 169, 170, 183, 187, 346], "to_biword": 120, "bw": 120, "semistandardtableau": [120, 170, 276, 314, 346], "normalize_vertex": 120, "mandatori": 120, "fine": 120, "myrul": 120, "my_fil": 120, "my_label": 120, "my_shap": 120, "deduc": [120, 146, 172, 187, 354], "quit": [120, 238, 354, 362], "bloom": 120, "saracino": 120, "bs2012": 120, "p_graph": 120, "mutati": 120, "mutandi": 120, "q_graph": 120, "upper_cov": [120, 160, 182, 186, 187, 313], "hello": 120, "kleitman": [120, 187], "vie1983": 120, "rulepartit": 120, "mu_1": [120, 160, 188, 287, 303, 313], "mu_n": [120, 313], "mu_i": [120, 160, 164, 280, 286, 287, 293], "kra2006": 120, "lam2004": 120, "llms3": 120, "strongtableau": [120, 131], "weaktableau": [120, 131], "llms4": 120, "sag1987": 120, "wor1984": 120, "hai1989": 120, "shiftedshap": 120, "ss1990": 120, "shiftedprimedtableau": [120, 307], "nze2007": 120, "__3__": 120, "__1__": 120, "increasing_tre": [120, 172], "_2_": 120, "__1___": 120, "_1_": 120, "_none_": 120, "yf": 120, "youngfibonacci": [120, 186], "1111": [120, 154, 192, 315, 359], "21211": [120, 359], "1121": [120, 245, 259], "2121": [120, 234], "11121": 120, "hall_polynomi": 121, "nilpot": [121, 188, 310], "subobject": [121, 296], "kappa_i": [121, 160], "richardson": [121, 134, 216, 292, 298, 304], "sch2006": 121, "r_n": [121, 315, 347], "2r_1": 121, "2r_2": 121, "r_3": [121, 188], "2r_": 121, "m_n": [121, 172, 310], "m_2": [121, 145, 146, 172, 294, 303], "l_k": 121, "sulzgrub": [122, 346], "rpp": [122, 346], "enumcomb2": [122, 285, 288, 294, 300, 301, 303], "sulzgr2017": [122, 346], "hilgra1976": 122, "hillman_grassl": [122, 346], "hillman_grassl_invers": [122, 346], "xi_": [122, 188, 300, 303, 346], "pak2002": [122, 346], "hopkins2017": [122, 346], "sulzgruber_correspond": [122, 346], "pak_correspond": [122, 346], "weakreverseplanepartit": [122, 346], "hgp": 122, "undon": 122, "standalon": [122, 346], "hgp_bare": 122, "gans1981": [122, 346], "northward": 122, "eastward": 122, "bottommost": [122, 276, 307, 314, 346], "aic": 122, "immateri": [122, 277, 346], "acc": 122, "integerlistsbackend": [123, 124, 125], "integer_list": [123, 124, 125, 127], "approxim": [123, 274, 354, 356], "consult": 123, "pointwis": [123, 239, 240, 302], "lookahead": [123, 124], "evolv": [123, 350], "adapt": [123, 172], "room": [123, 124, 160], "tend": [123, 238, 362], "limit_start": 123, "loos": [123, 227, 362], "earli": 123, "stone": [123, 180, 182, 186], "_contain": 123, "_iter": 123, "max_sum": [123, 124], "min_sum": [123, 124], "integerlistsbackend_invlex": 124, "port": [124, 128, 354], "gillespi": 124, "lack": [124, 236], "robust": [124, 239, 272, 303], "invlex": [124, 127], "integerlist": [124, 125], "engin": 124, "motzkin": [124, 315], "recommend": [124, 160, 238, 272, 280, 343], "element_constructor": [124, 187, 308, 339], "eventu": [124, 160, 187, 242, 354, 359], "discontinu": [124, 232], "worth": [124, 145, 225], "motzkin_numb": 124, "motzkin_word": 124, "a001006": [124, 315], "nonintersect": [124, 315], "chord": [124, 172, 315], "waiver": 124, "caveat": [124, 221, 238, 242, 244, 274, 313, 343], "undecid": 124, "improp": [124, 139], "ultim": [124, 359, 362], "hang": [124, 184, 186], "tip": [124, 130, 238], "flexibl": [124, 238, 354], "price": 124, "pai": 124, "semir": [124, 192, 247, 372], "3y": 124, "1z": 124, "dead": [124, 354], "roughli": [124, 186, 192, 310, 354], "proport": [124, 293, 354], "neglig": [124, 354], "18055": 124, "18056": 124, "17979": 124, "spec": [124, 302], "389": 124, "backend_class": [124, 125], "integerlistslexit": 124, "_current_list": 124, "_current_sum": 124, "_search_rang": 124, "push": [124, 235], "deeper": 124, "me": 124, "ye": [124, 264], "_next_stat": 124, "prescrib": [126, 141], "integer_matric": 126, "integermatric": 126, "column_sum": 126, "c_j": [126, 193], "im": 126, "to_composit": [126, 280, 342], "integer_matrices_gener": 126, "gale": 127, "stuff": 127, "bugfix": 127, "misnom": 127, "federico": 127, "poloni": 127, "integer_vector": 127, "34510": 127, "iv3": 127, "ivk3": 127, "iv33": 127, "br": [127, 160, 225], "trim": [127, 182], "iv53": 127, "essai": 127, "integervectorsconstraint": 127, "integervectors_al": 127, "integervectors_k": 127, "integervectors_n": 127, "integervectors_nk": 127, "albrecht": 127, "integervectors_nnondesc": 127, "bloc": 127, "gale_ryser_theorem": 127, "ryser63": 127, "gale57": 127, "justifi": [127, 160, 163, 354], "ahead": 127, "caru": 127, "monograph": [127, 302], "maa": 127, "1963": 127, "flow": [127, 187, 312], "network": [127, 187], "1073": 127, "1082": 127, "integer_vectors_nk_fast_it": 127, "is_gale_rys": 127, "sound": 127, "list2func": 127, "integer_vector_weight": 128, "weightedintegervectors_al": 128, "graded_compon": [128, 153, 159, 172], "iterator_fast": 128, "20491": 128, "integer_vectors_mod_permgroup": 129, "bla": [129, 238], "subquoti": 129, "integervectorsmodpermutationgroup_al": 129, "permutation_group": 129, "integervectorsmodpermutationgroup_with_constraint": 129, "transitivegroup": 129, "cp2015": 130, "pons2013": 130, "tam1962": 130, "cha2008": 130, "sent": [130, 145, 350], "is_initial_interv": 130, "is_final_interv": 130, "contains_binary_tre": 130, "contains_dyck_word": 130, "contains_interv": 130, "ip1": 130, "ip2": 130, "ip3": 130, "ip4": 130, "cubical_coordin": 130, "com2019": 130, "decomposition_to_tripl": 130, "recomposition_from_tripl": 130, "decreasing_children": 130, "decreasing_cover_rel": 130, "final_forest": 130, "decreasing_par": 130, "decreasing_root": 130, "initial_forest": 130, "grafting_tre": 130, "from_grafting_tre": 130, "pons2018": 130, "increasing_children": 130, "increasing_cover_rel": 130, "increasing_par": 130, "increasing_root": 130, "is_indecompos": [130, 226], "is_dext": 130, "dexter": [130, 186, 349], "exclus": [130, 160, 182, 187], "is_except": 130, "indecompos": [130, 226, 343], "is_infinitely_modern": 130, "is_modern": 130, "rog2018": 130, "is_linear_extens": [130, 180, 187], "tip4": 130, "tip3": 130, "is_synchron": 130, "synchron": 130, "fpr2015": 130, "a000139": 130, "line_width": 130, "color_decreas": 130, "color_increas": 130, "vspace": [130, 211], "left_branch_involut": 130, "rise_contact_involut": 130, "from_binary_tre": 130, "lower_contained_interv": 130, "lower_contains_interv": 130, "ldw_ff": 130, "from_dyck_word": [130, 153, 158], "max_linear_extens": 130, "maximal_chain_binary_tre": 130, "maximal_chain_dyck_word": 130, "maximal_chain_tamari_interv": 130, "min_linear_extens": 130, "new_decomposit": 130, "number_of_new_compon": 130, "ex": [130, 158, 285, 288, 294, 300, 301, 303], "nb": 130, "maximal_chain": [130, 186, 187, 349], "is_lattic": [130, 187], "contact": 130, "latex_color_decreas": 130, "sub_poset": 130, "renorm": 130, "subposet": [130, 180, 182, 187], "tamari_invers": 130, "tamari_inversions_it": 130, "upper_contains_interv": 130, "udw_if": 130, "check_poset": 130, "tree1": 130, "tree2": 130, "tree3": 130, "dw3": 130, "from_minimal_schnyder_wood": 130, "schnyder": [130, 187], "wood": 130, "bernardi": 130, "bonichon": 130, "bebo2009": 130, "exterior": [130, 225, 244, 273], "unori": 130, "set_embed": 130, "c0": 130, "data_emb": 130, "el1": 130, "el2": 130, "latex_color_increas": 130, "latex_hspac": 130, "latex_vspac": 130, "recompos": 130, "tamariintervalposets_al": 130, "tamariintervalposets_s": 130, "satur": 131, "llms2006": 131, "k_tableau": 131, "avi": 131, "dalal": [131, 134], "nate": 131, "gallup": 131, "charg": [131, 215, 346, 348, 359], "southeast": [131, 134, 160, 313, 352], "to_standard_list": 131, "cell_of_highest_head": 131, "cell_of_marked_head": 131, "cells_head_dictionari": 131, "cells_of_head": 131, "cells_of_marked_ribbon": 131, "portion": 131, "content_of_highest_head": 131, "content_of_marked_head": 131, "contents_of_head": 131, "entries_by_cont": [131, 314], "diag": 131, "entries_by_content_standard": 131, "follows_tableau": 131, "height_of_ribbon": 131, "occupi": [131, 346], "subtableau": [131, 348], "is_column_strict_with_weight": 131, "left_act": 131, "tij": 131, "number_of_connected_compon": 131, "ribbons_above_mark": 131, "set_weight": 131, "cores_length_with_categori": [131, 160], "sum_t": [131, 239], "ks3": [131, 296, 302], "kschur": [131, 296, 302], "realization_of": [131, 144, 145, 146, 147, 232, 290, 303, 305], "myks221": 131, "strongtableaux": 131, "spin_of_ribbon": 131, "to_list": [131, 160, 164, 313, 314, 342, 346, 348], "to_transposition_sequ": 131, "to_unmarked_list": 131, "to_unmarked_standard_list": 131, "classmethod": [131, 153, 192, 221, 227, 229, 230, 245, 264, 270], "add_mark": 131, "unmarkedt": 131, "follows_tableau_unsigned_standard": 131, "tlist": 131, "marked_cst_to_transposition_sequ": 131, "cst_to_tran": 131, "marked_given_unmarked_and_weight_iter": 131, "repr": [131, 138, 183, 196, 197, 222, 238, 307, 314, 346, 348], "standard_marked_iter": 131, "standard_unmarked_iter": 131, "transpositions_to_standard_strong": 131, "transeq": 131, "emptytableau": 131, "dispatch": 131, "subtableaux": 131, "factorized_permut": 131, "weaktableaux_core_with_categori": 131, "weaktableaux_bounded_with_categori": 131, "to_core_tableau": 131, "to_bounded_tableau": 131, "weaktableaux_factorized_permutation_with_categori": 131, "_represent": 131, "is_k_tableau": [131, 314, 346], "weaktableau_abstract": 131, "weaktableau_bound": 131, "from_core_tableau": 131, "k_charg": 131, "shape_bound": 131, "shape_cor": 131, "weaktableau_cor": 131, "dictionary_of_coordinates_at_residu": 131, "k_charge_i": 131, "k_charge_j": 131, "list_of_standard_cel": 131, "residues_of_entri": 131, "to_factorized_permutation_tableau": 131, "_inner_shap": 131, "weaktableau_factorized_permut": 131, "straighten_input": 131, "straighten": [131, 160, 164, 234], "weaktableaux": 131, "weaktableaux_abstract": 131, "_shape": 131, "weaktableaux_bound": 131, "weaktableaux_cor": 131, "circular_dist": 131, "cr": [131, 187], "weaktableaux_factorized_permut": 131, "nab": 131, "guo": 132, "r_tild": 132, "kazhdan_lusztig": [132, 185], "fun": 132, "laurentpolynomialr": [132, 241, 374], "kl": [132, 185, 236, 241], "coxeter3": [132, 228], "kazhdan_lusztig_polynomi": [132, 187], "fokko": 132, "ducloux": 132, "dy1993": 132, "weyl_charact": [133, 273], "weylcharact": [133, 220, 225, 235, 273], "demazure_charact": [133, 273], "key_polynomi": 133, "keypolynomi": 133, "keypolynomialbasi": 133, "divided_differ": [133, 277], "partial_w": [133, 273], "w2": [133, 238, 242, 308, 354, 359, 364, 369], "wm": 133, "partial_": [133, 239], "z_3": [133, 145], "z_0": [133, 354], "isobaric_divided_differ": 133, "pi_w": 133, "to_polynomi": 133, "poly_r": 133, "polynomial_r": [133, 374], "from_polynomi": [133, 146, 236, 241, 294, 302, 303], "specicfi": 133, "poly_coeff": 133, "inject_vari": [133, 273], "poly_gen": 133, "from_schubert_polynomi": 133, "schubertpolynomialr": [133, 277], "isobar": [133, 241], "idd": 133, "infinitepolynomialr": 133, "z_4": 133, "sorting_word": 133, "icerm": [134, 236], "avinash": 134, "allen": [134, 146], "afterward": [134, 162, 172, 173], "liz": 134, "beazlei": 134, "bk": [134, 170], "p22": 134, "0610538": 134, "vakil": 134, "0302294": 134, "purbhoo": 134, "mosaic": 134, "0705": 134, "1184": 134, "knutson_tao_puzzl": 134, "bk_piec": 134, "max_lett": [134, 141], "belkal": 134, "kumar": [134, 241], "rhombu": 134, "knutsonpurbhoo10": 134, "gl_n": [134, 232, 233, 242, 264, 265, 282, 302, 303, 310, 354], "1008": [134, 315], "4979": 134, "deltapiec": 134, "north_west": 134, "north_east": [134, 363], "puzzlepiec": 134, "clockwise_rot": 134, "half_turn_rot": 134, "ht_grassmannian_piec": 134, "toru": [134, 234], "equivari": [134, 234, 236, 241, 273, 303], "kt2003": 134, "terenc": 134, "2003": [134, 152, 211, 216, 241, 266, 315, 362, 369], "ht_two_step_piec": 134, "coskunvakil06": 134, "coskun": 134, "calculu": [134, 290, 296, 354], "t10": 134, "h_grassmannian_piec": 134, "ktw": 134, "christoph": [134, 293], "woodward": 134, "honeycomb": 134, "0107011": 134, "h_two_step_piec": 134, "buchkreschtamvakis03": 134, "buch": [134, 276], "kresch": [134, 276], "tamvaki": [134, 276], "gromov": 134, "witten": 134, "0306388": 134, "k_grassmannian_piec": 134, "buch00": 134, "0004137": 134, "puzzle_piec": 134, "ht": [134, 146, 147, 282, 293, 297, 302, 303, 352], "h2step": 134, "ht2step": 134, "0101": [134, 154, 359, 365], "soln": [134, 137], "glu": [134, 182], "rhombi": 134, "1001": [134, 154, 315, 359, 362, 365, 369], "extra_preambl": 134, "viewer": [134, 350], "01201": 134, "01021": 134, "10212": 134, "12012": 134, "12132": 134, "23112": 134, "south_label": 134, "lamda": 134, "structure_const": 134, "cp": [134, 149, 151, 172, 176, 219], "001001": 134, "001010": 134, "010100": 134, "01122": 134, "y4": 134, "nablapiec": 134, "south_east": 134, "south_west": 134, "southwest": [134, 160, 313, 346], "puzzlefil": 134, "north_west_label": 134, "north_east_label": 134, "add_piec": 134, "is_in_south_edg": 134, "kink": 134, "kink_coordin": 134, "north_east_label_of_kink": 134, "north_west_label_of_kink": 134, "orang": [134, 160, 186, 238, 242, 350], "forbidden_border_label": 134, "rhombus_piec": 134, "add_t_piec": 134, "label1": 134, "label2": 134, "_forbidden_border_label": 134, "add_forbidden_label": 134, "boundary_delta": 134, "delta_piec": 134, "nabla_piec": 134, "rhombuspiec": 134, "north_piec": 134, "south_piec": 134, "dancing_link": [136, 139], "dlx_solver": [136, 350], "number_of_solut": [136, 350], "all_solut": 136, "one_solut": 136, "ncpu": [136, 337, 350], "x_using_row_2": 136, "get_solut": 136, "reiniti": 136, "dancing_linkswrapp": 136, "carlo": [136, 139, 302], "hamalainen": [136, 139], "subprocess": [136, 350], "cpu": [136, 337, 350, 354], "subproblem": 136, "serial": [136, 350], "one_solution_using_milp_solv": 136, "cvxopt": 136, "ppl": [136, 222, 238], "interactivelp": 136, "sage_numerical_backends_gurobi": 136, "one_solution_using_sat_solv": 136, "sat": 136, "picosat": 136, "cryptominisat": 136, "glucos": 136, "syrup": 136, "recreat": [136, 238], "exhaust": [136, 354], "d_using_0": 136, "to_milp": 136, "mipvari": 136, "to_sat_solv": 136, "\u00ec": 136, "satsolv": 136, "pycryptosat": 136, "claus": [136, 354], "make_dlxwrapp": 136, "histor": 136, "unpickl": [136, 160, 172, 196, 197, 314, 346], "kept": [136, 172, 265, 368], "dlxcpp": 137, "sloahada": 138, "4k": 138, "skew_hadamard_matrix": 138, "is_hadamard_matrix": 138, "is_skew_hadamard_matrix": 138, "unknown_hadamard": 138, "668": 138, "716": 138, "892": 138, "1132": [138, 361], "unknown_skew_hadamard": 138, "428": 138, "476": 138, "596": 138, "612": 138, "708": 138, "712": 138, "764": [138, 315], "772": 138, "804": 138, "808": 138, "836": 138, "856": 138, "900": 138, "916": 138, "932": 138, "940": 138, "952": 138, "980": [138, 235], "996": 138, "1004": 138, "1012": 138, "1028": 138, "1036": 138, "1044": [138, 315], "1060": 138, "1076": 138, "1100": [138, 141], "1108": 138, "1140": 138, "1148": 138, "1156": 138, "1180": 138, "1192": 138, "1196": 138, "matteo": [138, 345], "cati": [138, 345], "2023": [138, 316], "hadawiki": 138, "hora": 138, "cp2023": 138, "gs_skew_hadamard_smallcas": 138, "goethal": 138, "circul": [138, 139], "williamson_goethals_seidel_skew_hadamard_matrix": 138, "gs70": 138, "wall71": 138, "236": [138, 235, 303], "fks2004": 138, "djo2023a": 138, "rshcd_324": 138, "324x324": 138, "jankokharaghanitonchevgraph": 138, "hx2010": 138, "162x162": 138, "rshcd": 138, "loc": [138, 346], "cit": 138, "interestingli": 138, "152": [138, 188], "2592": 138, "intransit": 138, "cp2016": 138, "amicable_hadamard_matric": 138, "amic": 138, "amicable_hadamard_matrices_w": 138, "wal1970b": 138, "are_amicable_hadamard_matric": 138, "seb2017": [138, 345], "construction_four_symbol_delta_code_i": 138, "n_x": [138, 345], "n_y": 138, "n_z": 138, "n_a": [138, 311, 345], "nonperiod": [138, 345], "a_ia_": 138, "tur1974": 138, "t_4": [138, 345], "construction_four_symbol_delta_code_ii": 138, "four_symbol_delta_code_smallcas": 138, "symobl": 138, "2985984": 138, "normalis": 138, "hadamard_matrix_156": 138, "bh1965": 138, "hadamard_matrix_cooper_wallis_construct": 138, "contruct": 138, "cw1972": 138, "entrywis": 138, "x_ix_i": 138, "ni_n": 138, "dd": [138, 231, 268, 362], "4mi_n": 138, "4nm": 138, "retur": 138, "t_sequenc": [138, 345], "t_sequences_smallcas": [138, 345], "hadamard_matrix_cooper_wallis_smallcas": 138, "cooper": [138, 145], "walli": 138, "williamson_type_quadruples_smallcas": 138, "saw1985": 138, "hadamard_matrix_from_sd": 138, "fist": 138, "plug": 138, "hadamard_matrix_miyamoto_construct": 138, "miyamoto": 138, "miy1991": 138, "hadamard_matrix_paleyi": 138, "identity_matrix": [138, 344], "hadamard_matrix_paleyii": 138, "hadamard_matrix_spence_construct": 138, "spenc": 138, "bolean": 138, "hadamard_matrix_turyn_typ": 138, "4ni": 138, "baumert": 138, "4t": 138, "4tn": 138, "_get_baumert_hall_unit": 138, "hadamard_matrix_williamson_typ": 138, "ha83": 138, "hadamard_matrix_www": 138, "url_fil": 138, "webpag": 138, "neilsloan": 138, "49152": 138, "normalise_hadamard": 138, "skew_norm": 138, "regular_symmetric_hadamard_matrix_with_constant_diagon": 138, "confer": [138, 180, 241], "676": 138, "rshcd_from_close_prime_pow": 138, "gs1970": 138, "sww1972": 138, "rshcd_from_prime_power_and_conference_matrix": 138, "ww1972": 138, "szekeres_difference_set_pair": 138, "symmetric_conference_matrix": 138, "36x36": 138, "adjust": 138, "skew_hadamard_matrix_from_complementary_difference_set": 138, "bs1969": 138, "skew_hadamard_matrix_from_good_matric": 138, "sze1988": 138, "rrrr": 138, "skew_hadamard_matrix_from_good_matrices_smallcas": 138, "e_sequ": 138, "a_m": [138, 146], "b_m": [138, 189, 280, 308], "d_0": 138, "d_m": [138, 284], "skew_hadamard_matrix_from_orthogonal_design": 138, "seb1978": 138, "skew_hadamard_matrix_spence_1975": 138, "spe1975b": 138, "skew_hadamard_matrix_spence_construct": 138, "construt": 138, "spe1977": 138, "skew_hadamard_matrix_whiteman_construct": 138, "whi1971": 138, "sec": 138, "symmetric_conference_matrix_palei": 138, "lon2013": 138, "szeker": 138, "turyn_type_hadamard_matrix_smallcas": 138, "typei_matrix_difference_set": 138, "wg": [138, 171], "kost08": 138, "williamson_hadamard_matrix_smallcas": 138, "dafault": 138, "bitrad": 139, "intuit": [139, 238], "latinsquar": 139, "is_partial_latin_squar": 139, "is_latin_squar": 139, "tau_i": [139, 183, 187, 236], "hypermap": 139, "jacobson": 139, "matthew": [139, 160, 163, 276, 341], "interfac": [139, 238, 354], "back_circul": 139, "alternating_group_bitrade_gener": 139, "bitrade_from_group": 139, "nr_filled_cel": 139, "isotop": 139, "nauti": [139, 354], "actual_row_col_sym_s": 139, "unus": 139, "apply_isotop": 139, "row_perm": 139, "col_perm": 139, "sym_perm": 139, "clear_cel": 139, "contained_in": 139, "elementary_abelian_2group": 139, "disjoint_mate_dlxcpp_rows_and_map": 139, "allow_subtrad": 139, "find_disjoint_m": 139, "dlxcpp_has_unique_complet": 139, "privat": [139, 271], "filled_cells_map": 139, "cells_map": 139, "nr_to_find": 139, "b0": [139, 362], "is_bitrad": 139, "manner": [139, 160, 359], "nowher": 139, "is_empty_column": 139, "is_empty_row": 139, "forward_circul": 139, "is_uniquely_complet": 139, "spyx": 139, "hline": 139, "nr_distinct_symbol": 139, "permissable_valu": 139, "random_empty_cel": 139, "top_left_empty_cel": 139, "vals_in_col": 139, "vals_in_row": 139, "latinsquare_gener": 139, "l_start": 139, "check_assert": 139, "bibtex": 139, "jacmat96": 139, "3m": 139, "caylei": [139, 238, 274, 359, 369, 373], "z_n": [139, 145], "rce": 139, "beta3": 139, "cells_map_as_squar": 139, "check_bitrade_gener": 139, "p3_group_bitrade_gener": 139, "simul": [139, 354], "fair": 139, "column_containing_sym": 139, "direct_product": 139, "l3": [139, 156, 292], "l4": 139, "subsquar": 139, "offset": [139, 160, 164, 193, 315, 346, 348, 374], "dlxcpp_find_complet": 139, "dlxcpp_rows_and_map": 139, "tau_1": [139, 183, 187], "tau_2": 139, "tau_3": 139, "geometria": 139, "dedicata": 139, "0710": 139, "0938": 139, "pq_group_bitrade_gener": 139, "group_to_latinsquar": 139, "libgap": [139, 187, 274], "is_disjoint": 139, "is_primary_bitrad": 139, "is_row_and_col_balanc": 139, "is_same_shap": 139, "next_conjug": 139, "row_containing_sym": 139, "tau1": [139, 310], "beta_3": 139, "beta_i": [139, 160, 164, 285, 300, 301, 303, 305, 347], "tau123": 139, "tau2": 139, "tau3": 139, "tau_to_bitrad": 139, "u2": 139, "doublylinkedlist": 140, "doubli": [140, 182], "hide": [140, 354], "unhid": 140, "dll": 140, "prev": [140, 172], "iterablefunctioncal": 140, "needn": 140, "enclos": 140, "bbb": [140, 359, 372], "check_integer_list_constraint": 140, "cilc": 140, "umbral_oper": 140, "poli": [140, 303, 352, 362], "umbral": [140, 160], "bchopsy2017": 141, "minimajcryst": 141, "hrw2015": 141, "hrs2016": 141, "lm2018": 141, "multiset_partition_into_sets_ord": 141, "stem": [141, 227], "to_tableaux_word": 141, "from_tableau": 141, "val": [141, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 354], "val_": 141, "c_r": [141, 225], "omp": 141, "deconcaten": [141, 146], "split_block": 141, "violat": [141, 180], "issubset": [141, 151, 187], "v_0": 141, "v_j": 141, "minimaj_word": 141, "minimaj_block": 141, "vu": [141, 187], "_multiset": 141, "as_dict": 141, "shape_from_cardin": 141, "shape_from_s": 141, "excis": 141, "therein": 141, "as_weak_comp": 141, "frequenc": [141, 310], "focu": 141, "min_ord": 141, "max_ord": 141, "chanc": 141, "allud": 141, "orderedmultisetpartitionsintosets_x": 141, "fat": 141, "orderedmultisetpartitionsintosets_x_constraint": 141, "orderedmultisetpartitionsintosets_all_constraint": 141, "orderedmultisetpartitionsintosets_alph_d": 141, "_order": 141, "_alphabet": 141, "orderedmultisetpartitionsintosets_alph_d_constraint": 141, "orderedmultisetpartitionsintosets_n": 141, "orderedmultisetpartitionsintosets_n_constraint": 141, "krob": [143, 146, 147, 303], "leclerc": [143, 146, 147, 162, 292, 303], "retakh": [143, 146, 147, 303], "qschur": [143, 145, 146], "luoto": [143, 146], "mason": [143, 146], "willigenburg": [143, 146], "s0097316509001745": 143, "0810": [143, 266], "2489v2": 143, "tev2007": [143, 145], "lenni": 143, "tevlin": [143, 145], "cauchi": [143, 303], "0712": 143, "2201v1": 143, "ncsf_qsym": [143, 144, 145, 146, 303], "coeff_dab": 143, "coeff_el": [143, 145], "coeff_lp": [143, 145], "lp_": 143, "coeff_pi": [143, 145], "coeff_sp": [143, 145], "sp_": [143, 146, 304], "compositions_ord": 143, "rhd": 143, "m_to_s_stat": 143, "number_of_ssrct": 143, "shape_comp": 143, "dqs_": [143, 145], "ssrct": 143, "content_comp": 143, "number_of_fct": 143, "immacul": [143, 145, 146], "bbssz2012": [143, 145, 146, 303], "jason": [144, 146, 302, 346, 348], "generic_basis_cod": 144, "algebramorph": 144, "on_gener": [144, 145], "modulemorphismbylinear": 144, "basesofqsymorncsf": 144, "homogeneous_degre": [144, 303], "degree_neg": [144, 303], "di": [144, 146, 147, 231], "dualimmacul": [144, 145, 146, 147], "skew_bi": [144, 145, 146, 147, 293, 302, 303, 313], "alternating_sum_of_composit": 144, "alternating_sum_of_finer_composit": 144, "alternating_sum_of_fatter_composit": 144, "realizations_of": 144, "duality_pairing_by_coercion": 144, "elementary_with_categori": 144, "sum_of_fatter_composit": 144, "sum_of_finer_composit": 144, "sum_of_partition_rearrang": 144, "par": [144, 310], "gradedmoduleswithinternalproduct": 144, "category_over_base_r": [144, 242, 271], "internal_product": [144, 145, 302, 303], "ncsf2": [144, 145, 146], "plainli": [144, 308], "gamma_k": 144, "j_a": 144, "notin": [144, 172], "gamma_": [144, 151, 287, 352], "k_p": 144, "k_k": 144, "alias": [144, 145], "itensor": [144, 302, 303], "kronecker_product": [144, 282, 302, 303], "tensor_incopr": [144, 303], "h_parent": 144, "partition_pair": [144, 303], "internal_coproduct": [144, 146, 149, 151, 303], "monomial_coeffici": [144, 145, 147, 305], "testal": 144, "int_pr_of_s_in_": 144, "bilinear": [144, 145, 146, 225, 229, 230, 303], "internal_product_on_basi": [144, 145], "bilinearli": [144, 242], "internal_product_by_coercion": 144, "realizationscategori": 144, "cocommut": [145, 146, 302], "idiom": [145, 187, 191, 238, 272, 302], "cumbersom": [145, 238, 302, 354], "unfortun": [145, 162, 303, 354], "everywher": [145, 302, 346, 350, 355, 362], "bialgebra": [145, 146, 151, 302], "apply_multilinear_morph": [145, 146, 147, 150, 151, 302], "ga": [145, 180, 182, 282], "pi_u": 145, "prod_i": [145, 149, 150, 151, 160, 285, 288, 300], "fetch": [145, 240], "coerce_map_from": [145, 343], "homset": 145, "dualquasisymmetric_schur": 145, "quasisymmetric_schur": [145, 146], "forgotten": [145, 147, 149, 275, 284, 302, 303], "hs_n": 145, "bernstein_creation_oper": [145, 303], "perp": [145, 146, 147, 293, 303], "alpha_1": [145, 152, 227, 234, 235, 236, 238, 239, 257, 303, 346], "alpha_m": 145, "immaculate_funct": 145, "immaculate_by_bernstein": 145, "chi": [145, 149, 150, 151, 160, 225, 237, 239, 273, 287, 302, 316, 344], "mayb": [145, 146, 172, 338], "left_padded_kronecker_product": [145, 303], "kroneck": [145, 146, 181, 185, 282, 302, 303, 343], "mar": 145, "mults1": [145, 303], "mults2": 145, "i2k": 145, "testpi": 145, "antihomomorph": [145, 146], "adjunct": [145, 146, 182, 284], "lmvw13": [145, 146], "to_descent_algebra": 145, "omega_n": 145, "descent_test": 145, "dad": 145, "to_ncsym": 145, "brrz08": [145, 151], "complianc": 145, "unexpectedli": [145, 146], "verschiebung": [145, 285, 300, 301, 303, 305], "psi_r": 145, "phi_r": 145, "nmid": [145, 285, 300, 301, 303, 305], "satisf": [145, 285, 300, 301, 303, 305], "Being": [145, 146, 303], "s_m": [145, 172, 302, 343], "test_comp": 145, "test_allcomp": 145, "to_symmetric_function_on_basi": 145, "tailor": [145, 146, 323, 343, 368], "thorough": 145, "bergeron": [145, 146, 151, 293, 359, 363, 366, 369, 372], "sensu": 145, "lato": 145, "garbag": [145, 172], "multiplicativebas": 145, "algebra_morph": 145, "endset": 145, "gradedhopfalgebraswithbasi": 145, "composition1": 145, "composition2": 145, "to_symmetric_function_on_gener": 145, "multiplicativebasesongrouplikeel": 145, "grouplik": 145, "f_3": 145, "coproduct_on_gener": [145, 285, 287, 288, 300], "multiplicativebasesonprimitiveel": 145, "antipode_on_gener": 145, "phi_k": 145, "log": [145, 172, 193, 359, 374], "psi_n": [145, 146], "dt": 145, "psi_k": 145, "test_psi": [145, 146], "internal_product_on_basis_by_bracket": 145, "zl": 145, "zassenhaus_left": 145, "zr": 145, "zassenhaus_right": 145, "zassenhau": 145, "hlnt09": [145, 146], "ncsf_n": 145, "m_3": [145, 146, 172, 303], "lambda_3": [145, 160, 235, 271, 300, 303, 305, 310], "dq": 145, "dyq": 145, "dualyoungquasisymmetric_schur": 145, "qs_": 145, "youngquasisymmetric_schur": 145, "gessel": [146, 147, 303], "multipartit": [146, 162], "contemp": [146, 303], "brandei": 146, "homepag": 146, "982": 146, "uniroma1": 146, "mal1993": 146, "claudia": 146, "produit": 146, "coproduit": 146, "fonction": [146, 188], "sym\u00e9triqu": 146, "alg\u00e8br": [146, 255, 257], "www1": 146, "haz2004": 146, "michiel": [146, 305], "hazewinkel": [146, 305], "0410366v1": 146, "rad1979": 146, "radford": 146, "1979": 146, "454": [146, 315], "israel": 146, "alain": [146, 241, 292, 344], "hep": [146, 303], "9407124v1": 146, "igm": 146, "mlv": [146, 344], "jyt": 146, "luqu": 146, "0912": [146, 303], "0184v2": 146, "kurt": 146, "stefan": [146, 177, 179], "mykytiuk": 146, "stephani": 146, "ubc": 146, "7esteph": 146, "quasischurbook": 146, "nantel": 146, "1208": [146, 159], "5191v3": 146, "hoff2015": 146, "michael": [146, 211, 304], "hoffman": 146, "kyushu": 146, "345": [146, 359], "2206": 146, "kyushujm": 146, "0401319v3": 146, "bdhmn2017": 146, "cristina": 146, "ballantin": 146, "zajj": 146, "daugherti": 146, "angela": 146, "hick": 146, "sarah": 146, "elizabeth": 146, "nies": 146, "1710": 146, "11613": 146, "ahm2018": 146, "edward": 146, "joshua": 146, "hallam": 146, "1606": 146, "03519": 146, "sw2010": [146, 303], "shareshian": [146, 303], "michel": [146, 239, 240, 303], "wach": [146, 278, 303], "0812": 146, "0764v2": 146, "hazwitt1": [146, 305], "devot": 146, "linear_morph": [146, 147], "is_symmetr": [146, 147, 150, 160, 345, 359, 366], "qp": [146, 147, 187, 286, 289, 296, 302, 303], "hall_littlewood": [146, 147, 286, 290, 293, 296, 302, 303], "qsymt": [146, 147], "ft": [146, 147, 352], "fqt": [146, 147], "mcdht": [146, 147, 293], "dendriform_leq": 146, "x_j": [146, 163, 172, 183], "dendriform_less": 146, "ni_1": 146, "ni_2": 146, "ni_3": 146, "adam": [146, 273, 300, 303], "plethysm": [146, 147, 225, 286, 300, 302, 303], "comultipl": [146, 295, 301, 302, 303, 305, 343], "topmost": [146, 158, 160, 314, 346], "hbox": 146, "appar": [146, 187, 348], "kronecker_coproduct": [146, 303], "confirm": [146, 225, 273], "incident": 146, "naive_internal_coproduct_on_m": 146, "m_list": 146, "row_m": 146, "col_m": 146, "first_zero": 146, "pain": 146, "compo": 146, "stuffl": 146, "ibidem": 146, "dex": 146, "hazewinkellambda": 146, "albeit": [146, 242], "unproven": 146, "gcd": [146, 152, 303, 338], "lambda_of_monomi": 146, "hwl": 146, "chen": [146, 188, 303], "fox": 146, "lyndon_factor": [146, 303, 359], "g_j": 146, "j_j": 146, "nonincreas": [146, 278, 307], "overshadow": 146, "ni_": 146, "cyclotomicfield": [146, 303, 316], "mistak": [146, 303, 315, 346], "unrel": [146, 187, 346, 348], "yq": [146, 147], "young_quasisymmetric_schur": 146, "phi_j": 146, "delta_": [146, 181, 185, 216, 240, 241, 277, 303, 343], "test_phi": 146, "centralizer_s": [146, 160, 284, 286], "briefli": [147, 302], "familiar": [147, 163, 302], "aros": [147, 216], "krewera": 147, "gl\u00e2nffrwd": 147, "hhl05": 147, "lw12": 147, "quasisymmetric_funct": 147, "chose": 147, "capit": 147, "lowercas": 147, "inject_shorthand": [147, 190, 302], "syntaxerror": 147, "powersum": [147, 149, 151, 283, 284, 285, 288, 294, 295, 300, 301, 302, 303, 305, 316], "loehr": [147, 236, 297], "amer": [147, 151, 172, 225, 232, 236, 241, 273, 290, 310, 311, 369], "2005": [147, 151, 216, 225, 235, 356, 362], "735": 147, "warrington": 147, "1159": 147, "kt97": 147, "339": [147, 293], "376": [147, 367], "multiplicativencsymbas": 149, "_b": [149, 150, 151], "symmetricfunctionsnoncommutingvari": [149, 150, 151], "ncsymbas": 149, "bz05": [149, 150, 151], "from_symmetric_funct": [149, 151], "sum_of_partit": [149, 150, 151], "elem": 149, "pow": [149, 151], "internal_coproduct_on_basi": [149, 151], "internal_coproduct_by_coercion": 149, "ncsymbasis_abstract": [149, 150, 151], "ncsymdualbas": 149, "dncsym": [149, 150], "ncsymorncsymdualbas": 149, "symmetricfunctionsnoncommutingvariablesdu": 150, "ncsymd": 150, "ik": 150, "hnt06": 150, "0605262v1": 150, "x02": 150, "x11": 150, "x20": 150, "x03": 150, "x30": 150, "x22": 150, "x13": 150, "x31": 150, "y02": 150, "y11": 150, "y20": 150, "uparrow_": 150, "sim_a": 151, "i_c": 151, "i_d": 151, "cofre": 151, "0509265v3": 151, "bhrz06": 151, "hohlweg": 151, "rosa": [151, 303], "rs06": 151, "tran": [151, 172, 189, 225, 310, 311, 363], "215": [151, 235, 356], "0208168": 151, "coinvari": [151, 239, 277], "0502082": 151, "bt13": 151, "thiem": 151, "supercharact": 151, "763": [151, 315], "1142": [151, 245, 259], "s0218196713400171": 151, "1112": [151, 361], "4901": 151, "eltm": 151, "elth": 151, "eltp": 151, "sh": [151, 314, 343], "coarse_powersum": 151, "leq_": [151, 187], "coarsen": [151, 278], "deformed_coarse_powersum": 151, "rho_a": 151, "nst": 151, "rnode": 151, "dimv": 151, "mon": [151, 303, 369], "wedg": [151, 172, 180, 182, 185], "infimum": [151, 278], "sum_a": 151, "lm2011": [151, 278], "gamma_1": 151, "ordered_set_partition_act": [151, 278], "atom": [151, 160, 180, 182, 240, 253, 278, 346, 354], "is_atom": [151, 182, 227, 253, 278], "chi_a": 151, "sum_b": 151, "superclass": [151, 156, 197, 275], "mu_b": 151, "chi2": 151, "x_basi": 151, "sawada": 152, "s0304": 152, "3975": 152, "00049": 152, "lyndonword": [152, 361], "necklaces_evalu": 152, "non_decreasing_parking_funct": 153, "ndpf": 153, "pf3": [153, 159, 237], "nondecreasingparkingfunctions_al": 153, "nondecreasingparkingfunctions_n": 153, "1430": [153, 315, 324, 354], "4862": [153, 354], "prv2017": [154, 155], "nu_dyck_word": 154, "nudyckword": 154, "nene": 154, "update_ndw_symbol": 154, "0101001": 154, "0110010": 154, "can_mut": 154, "ndw": 154, "10010100": 154, "00000111": 154, "1101110011010010001101111000110000": 154, "1010101010101010101010101010101010": 154, "110100": 154, "101010": [154, 192], "horizontal_dist": 154, "00001011": 154, "10011001000": 154, "00100101001": 154, "nu_opt": 154, "points_color": [154, 311], "show_grid": 154, "show_nu": 154, "show_point": 154, "110111001101001000110111100011000": 154, "101010101010101010101010101010101": 154, "_path": 154, "____": 154, "______": [154, 174], "________": 154, "1010010": 154, "100100100": 154, "pretty_output": 154, "latex_nu_opt": 154, "latex_points_color": 154, "latex_show_grid": 154, "latex_show_nu": 154, "latex_show_point": 154, "path_weakly_above_oth": 154, "weali": 154, "0110": [154, 359], "111100": 154, "replace_dyck_char": 154, "ndw_open_symbol": 154, "ndw_close_symbol": 154, "replace_dyck_symbol": 154, "open_char": 154, "close_char": 154, "to_word_path": 154, "wordpath": [154, 357, 362, 363], "finitewordpath_north_east": [154, 363], "wp": [154, 276, 305, 322, 323, 332], "neenenen": 154, "10010101": 154, "010010": [154, 356, 359], "1010110": 154, "1001101": 154, "nu_tamari_lattic": 155, "nutamarilattic": 155, "tamari_lattic": [155, 349], "tamarilattic": [155, 182, 186, 187, 349], "generalizedtamarilattic": [155, 349], "bmfpr": [155, 186, 349], "ordered_tre": [156, 275], "resolut": [156, 362], "t23": 156, "t223": 156, "sort_kei": [156, 275], "circumst": [156, 275], "t32": 156, "t23322": 156, "tt1": 156, "tt2": 156, "ot": [156, 167, 247], "_1__": 156, "edgecoloredorderedtre": 156, "balancedtre": 156, "balancedlabelledorderedtre": 156, "balancedorderedtre": 156, "former": [156, 160, 187, 305], "to_binary_tree_left_branch": 156, "to_binary_tree_right_branch": 156, "to_parallelogram_polyomino": 156, "socci": [156, 158], "delest": [156, 158], "orderedtrees_al": 156, "orderedtrees_s": 156, "matha": [157, 160, 162, 164, 346, 347, 348], "ascii_art_t": 157, "ascii_art_table_russian": 157, "russian": [157, 160, 346], "box_exist": 157, "tex_from_arrai": 157, "with_lin": 157, "tex_from_array_tupl": 157, "rotatebox": 157, "a_tupl": 157, "tex_from_skew_arrai": 157, "goal": [158, 350, 354], "parallelogram_polyomino": 158, "localopt": 158, "checker": 158, "delim": 158, "_repr_b": 158, "_repr_p": 158, "__repr__": 158, "_dispatch": 158, "global_opt": 158, "globalopt": 158, "tikz_opt": 158, "toto": 158, "set_opt": 158, "drawing_compon": 158, "bounce_0": 158, "bounce_1": 158, "box_is_nod": 158, "aval": 158, "box_is_root": 158, "cell_is_insid": 158, "degree_convex": 158, "get_bs_nod": 158, "get_arrai": 158, "get_left_bs_nod": 158, "get_node_position_from_box": 158, "box_posit": 158, "nb_crossed_nod": 158, "statr": 158, "get_opt": 158, "parallelogrampolyominoes_s": 158, "bounce_valu": 158, "color_bounce_0": 158, "color_bounce_1": 158, "color_lin": 158, "color_point": 158, "line_s": 158, "mirror": 158, "point_siz": [158, 362], "get_right_bs_nod": 158, "get_tikz_opt": 158, "is_flat": 158, "is_k_direct": 158, "lower_height": 158, "lower_path": 158, "upper_path": 158, "lower_width": 158, "upper_height": 158, "set_valu": 158, "_to_dyck_delest_viennot": 158, "derzak1980": 158, "brs2015": 158, "to_tikz": 158, "filldraw": 158, "5pt": 158, "upper_width": 158, "polici": 158, "parallelogrampolyominoesfactori": 158, "setfactori": 158, "parallelogrampolyominoesopt": 158, "opt": 158, "parallelogrampolyominoes_al": 158, "parentwithsetfactori": 158, "check_el": [158, 275, 347], "el": [158, 187, 275], "default_tikz_opt": 158, "beck": 159, "imagin": 159, "cul": 159, "sac": 159, "spot": [159, 238, 365], "car": 159, "street": 159, "narrow": 159, "stanford": 159, "octob": 159, "parkingbeck": 159, "hag08": 159, "shin": 159, "slide": [159, 160, 314, 359], "talk": 159, "emi": 159, "slc": 159, "wpaper": 159, "s61vortrag": 159, "gxz": 159, "garsia": [159, 293, 303], "xin": 159, "5796v1": 159, "decreasing_parking_funct": 159, "dorota": 159, "mazur": 159, "parkingfunct": 159, "labelled_dyck_word": 159, "to_labelled_dyck_word": 159, "cars_permut": 159, "characteristic_quasisymmetric_funct": 159, "ides_composit": 159, "cqf": 159, "diagonal_composit": 159, "diagonal_reading_word": 159, "diagonal_word": 159, "dinversion_pair": 159, "dinvers": 159, "secondari": 159, "divers": 159, "20555": 159, "6th": 159, "jump_list": 159, "displac": 159, "farther": [159, 160], "luck": 159, "lucky_car": 159, "parking_permut": 159, "1x": 159, "7x": 159, "5x": [159, 240, 274], "4x": 159, "6x": 159, "2x": [159, 307], "_________": 159, "primary_dinversion_pair": 159, "secondary_dinversion_pair": 159, "to_nondecreasingparkingfunct": 159, "to_labelling_area_sequence_pair": 159, "to_labelling_dyck_word_pair": 159, "to_labelling_permut": 159, "parkingfunctions_al": 159, "parkingfunctions_n": 159, "1296": [159, 315], "from_labelled_dyck_word": 159, "ldw": 159, "from_labelling_and_area_sequ": 159, "throughout": 160, "restrictedpartit": 160, "partitions_parts_in": 160, "partition_class": 160, "partitions_n": 160, "13072": 160, "partitionsrestrict": 160, "lancellotti": [160, 163, 276, 341], "get_part": 160, "forth": [160, 302], "to_exp": [160, 164, 294, 310], "from_zero_on": 160, "zero_one_sequ": 160, "frobenius_coordin": 160, "ql": 160, "orderedpartit": 160, "16384": [160, 315], "removable_cel": [160, 164, 303], "down_list": [160, 164, 293, 303, 346], "addable_cel": [160, 164, 303], "up_list": [160, 164, 303, 346], "add_cel": [160, 164], "add_horizontal_border_strip": 160, "add_vertical_border_strip": 160, "cocorn": [160, 346], "sag2001": [160, 313, 314], "outside_corn": [160, 164, 313, 314], "addable_cells_residu": 160, "outside_corners_residu": 160, "arm_cel": 160, "arm": [160, 164, 297, 346], "northwesternmost": [160, 346], "arm_length": [160, 164], "flat": [160, 238], "arms_legs_coeff": 160, "leg": [160, 164, 297, 346], "attacking_pair": [160, 346], "attack": [160, 278, 297, 346], "ke1991": 160, "beta_numb": 160, "multicharg": [160, 162, 164, 346, 347, 348], "quantum_characterist": [160, 164, 347, 348], "djm1998": [160, 164, 347, 348], "bk2009": [160, 162, 164, 347, 348], "northeasternmost": 160, "k_rim": 160, "k_boundari": 160, "cell_poset": [160, 313, 343], "nw": [160, 313], "standard_tableaux": [160, 164, 347, 348], "is_chain": [160, 180, 186, 187], "character_polynomi": 160, "ix_i": 160, "contents_tableau": 160, "behind": [160, 255, 257, 314], "corners_residu": 160, "crank": 160, "dyson": 160, "ag1988": 160, "defect": [160, 164, 359, 369], "tfrac12": [160, 164], "sum_r": [160, 164], "kappa_r": [160, 164, 347], "kappa_1": [160, 164, 347], "kappa_": [160, 164, 343], "phi_e": [160, 164], "gram": [160, 164], "semisimpl": [160, 164, 221, 232, 244, 273, 310, 343, 347], "iwahori": [160, 162, 232, 241, 273, 347], "phi_2": [160, 164], "phi_3": [160, 164], "phi_4": [160, 164], "phi_5": [160, 164], "prime_degre": [160, 164], "simplif": [160, 362, 372], "orv": 160, "paul": [160, 276, 354, 362], "olivi": 160, "dehay": 160, "dominated_partit": 160, "11435": 160, "dual_equivalence_graph": [160, 169], "inbetween": [160, 172], "brown": [160, 350], "as2008b": 160, "parikh": 160, "diagram_str": [160, 164, 313], "frobenius_rank": [160, 313], "nilcoxet": 160, "lm2006b": 160, "garnir_tableau": [160, 164], "garnir": [160, 164], "clearer": [160, 164], "_garnir_cel": [160, 164], "is_row_strict": [160, 346, 348], "is_column_strict": [160, 346, 348], "top_garnir_tableau": [160, 164], "generalized_pochhammer_symbol": 160, "pochhamm": [160, 188], "has_k_rectangl": 160, "is_k_reduc": 160, "is_k_irreduc": 160, "has_rectangl": 160, "hook_length": [160, 164], "hooklengthformula": [160, 346], "hook_polynomi": 160, "hook_product": [160, 177, 289], "horizontal_border_strip_cel": 160, "initial_column_tableau": [160, 164, 348], "initial_tableau": [160, 164, 346, 348], "inside_corn": 160, "inside_corners_residu": 160, "is_cor": 160, "is_k_bound": 160, "is_restrict": [160, 162], "jacobi_trudi": [160, 313], "jacobi": [160, 163, 303, 313], "trudi": [160, 163, 303, 313], "jt": 160, "k_atom": 160, "k_interior": 160, "k_column_length": 160, "k_row_length": 160, "row_length": [160, 313], "column_length": [160, 313], "k_conjug": [160, 296, 313], "k_irreduc": 160, "hm2011": 160, "bold": 160, "llms2013": 160, "k_size": 160, "k_skew": 160, "lm2004": 160, "k_split": 160, "larger_lex": 160, "rh": [160, 343, 354], "leg_cel": 160, "leg_length": [160, 164], "lower_hook": 160, "prime_j": 160, "lower_hook_length": 160, "next_within_bound": 160, "partition_typ": 160, "outer_rim": 160, "plancherel_measur": 160, "plancherel": 160, "random_element_plancherel": 160, "1440": [160, 301], "powermap": 160, "powerpartit": 160, "s_8": 160, "r_j": [160, 347], "jk1981": [160, 343], "reading_tableau": 160, "removable_cells_residu": 160, "remove_cel": [160, 164, 217], "remove_horizontal_border_strip": 160, "partitions_with_constraint": 160, "subpartit": 160, "row_standard_tableaux": [160, 164, 347, 348], "kernel": [160, 374], "zolotarev": 160, "legendr": 160, "modular": [160, 162, 164, 180, 182, 235], "multiplicative_gener": 160, "plist": 160, "kronecker_symbol": 160, "27s_lemma": 160, "stretch": 160, "suter_diagonal_slid": 160, "y_n": 160, "suter": 160, "sut2002": 160, "northwestern": 160, "lambda_m": 160, "dihedr": [160, 238, 242, 354], "p7": [160, 255, 354], "p5": [160, 255, 303, 354], "t_complet": [160, 303], "bor2009": [160, 303], "bdvo2012": [160, 303], "co2010": [160, 303], "northeastern": 160, "demarc": 160, "to_exp_dict": 160, "kmr2012": [160, 164], "brick": [160, 164, 340], "upper_hook": 160, "upper_hook_length": 160, "vertical_border_strip_cel": 160, "weighted_s": [160, 293], "young_subgroup": [160, 164], "young_subgroup_gener": [160, 164], "maya": 160, "comet": 160, "parts_in": 160, "15467": 160, "roger": 160, "ramanujan": [160, 235], "13605": 160, "brute": 160, "young_diagram": [160, 164, 313], "latex_diagram_str": [160, 164, 313], "partitionsgreatesteq": 160, "greatest": [160, 180, 182, 187, 289, 303], "partitionsgreatestl": 160, "partitions_al": 160, "from_beta_numb": 160, "mu_k": 160, "from_core_and_quoti": 160, "from_exp": 160, "from_frobenius_coordin": 160, "partitions_all_bound": 160, "partitions_constraint": 160, "partitions_end": 160, "ending_partit": 160, "fastest": [160, 240, 274], "thousand": [160, 354], "37338": 160, "190569292": 160, "reciproc": [160, 190], "default_prec": 160, "partition_": [160, 354], "number_theori": [160, 354], "random_element_uniform": 160, "ln": 160, "randpar": 160, "nw1978": 160, "aocp4": 160, "certainli": [160, 186, 227], "partitions_nk": 160, "hybrid": 160, "indirectli": [160, 238], "nrrestrictedpartit": 160, "partitions_start": 160, "starting_partit": 160, "regularpartit": 160, "regularpartitions_al": 160, "regularpartitions_bound": 160, "regularpartitions_n": 160, "regularpartitions_trunc": 160, "max_len": 160, "restrictedpartitions_al": 160, "restrictedpartitions_gener": 160, "restrictedpartitions_n": 160, "favour": 160, "100000": [160, 354, 362], "27493510569775696512677516320986352688173429315980054758203125984302147328114964173055050741660736621590157844774296248940493063070200461792764493033510116079342457190155718943509725312466108452006369558934464248716828789832182345009262853831404597021307130674510624419227311238999702284408609370935531629697851569569892196108480158600569421098519": [160, 354], "number_of_partitions_length": 160, "nrpartit": 160, "partition_algebra": 161, "partitionalgebraelement_ak": 161, "partitionalgebraelement_gener": 161, "partitionalgebraelement_bk": 161, "partitionalgebraelement_pk": 161, "partitionalgebraelement_prk": 161, "partitionalgebraelement_rk": 161, "partitionalgebraelement_sk": 161, "partitionalgebraelement_tk": 161, "partitionalgebra_ak": 161, "partitionalgebra_gener": 161, "partitionalgebra_bk": 161, "cclass": 161, "partitionalgebra_sk": 161, "t12": [161, 234], "partitionalgebra_pk": 161, "partitionalgebra_prk": 161, "partitionalgebra_rk": 161, "partitionalgebra_tk": 161, "setpartitionsak": 161, "a2p5": 161, "setpartitionsak_k": 161, "setpartitions_set": [161, 171, 278], "setpartitionsxkel": 161, "setpartitionsakhalf_k": 161, "setpartitionsbk": 161, "b2p5": 161, "setpartitionsbk_k": 161, "945": [161, 315], "setpartitionsbkhalf_k": 161, "setpartitionsik": 161, "i2p5": 161, "setpartitionsik_k": 161, "setpartitionsikhalf_k": 161, "setpartitionsprk": 161, "pr_k": 161, "setpartitionsprk_k": 161, "setpartitionsrk_k": 161, "setpartitionsprkhalf_k": 161, "setpartitionsrkhalf_k": 161, "setpartitionspk": 161, "p2p5": 161, "setpartitionspk_k": 161, "setpartitionspkhalf_k": 161, "setpartitionsrk": 161, "setpartitionssk": 161, "s3p5": 161, "setpartitionssk_k": 161, "setpartitionsskhalf_k": 161, "setpartitionstk": 161, "t_k": [161, 276, 343], "t2p5": 161, "setpartitionstk_k": 161, "setpartitionstkhalf_k": 161, "setpartitionxk": 161, "_e": [162, 347], "ariki": [162, 164, 347], "am2000": 162, "ak1994": 162, "ariki2001": 162, "brundan": [162, 346, 348], "categorif": [162, 164], "ariki1996": 162, "categorifi": [162, 164, 348], "klr": [162, 347], "kle1995": 162, "good_cel": 162, "llt1996": 162, "celebr": 162, "iwahori_hecke_algebra": 162, "lg": 162, "rg": [162, 291], "kplg": 162, "kpl": 162, "partition_kleshchev": 162, "kleshchevcrystalmixin": 162, "cogood_cel": 162, "cogood": [162, 164], "conorm": 162, "kp": 162, "conormal_cel": 162, "good_cell_sequ": 162, "kp3": 162, "kp4": 162, "good_residue_sequ": 162, "mullineux_conjug": 162, "mullineux": 162, "mat2015": 162, "sgn": [162, 344], "normal_cel": 162, "kleshchevpartitioncryst": 162, "kleshchevpartitiontupl": 162, "kle1996": 162, "bru1998": 162, "kleshchevpartitiontuplecryst": 162, "kle2009": 162, "kleshchevpartitions_al": 162, "r_t": 162, "_x": 162, "mg2": 162, "gc2": 162, "tingley2007": 162, "tingleyln": 162, "vazirani2002": 162, "kleshchevpartitions_s": 162, "partition_shifting_algebra": 163, "shiftingoperatoralgebra": 163, "x_r": 163, "surround": [163, 350, 363], "bmps2018": 163, "regist": [163, 302, 305], "build_and_register_convers": 163, "support_map": 163, "zero_map": 163, "supp_map": 163, "gsort": 163, "shiftingsequencespac": 163, "500000000000000": [163, 238], "ordinari": [164, 307, 323, 348, 374], "koik": [164, 304, 347], "fock": 164, "quantiz": 164, "varagnolo": 164, "vasserot": 164, "stroppel": 164, "webster": 164, "khovanov": 164, "lauda": 164, "rouquier": 164, "partitions_all_with_categori": 164, "partition_tupl": 164, "content_tableau": 164, "kappa_l": [164, 347], "532": 164, "phi_6": 164, "standardtableautupl": [164, 346, 347, 348], "728": 164, "ell_1": [164, 354], "ell_k": [164, 354], "ell_i": 164, "partitiontuples_al": 164, "partitiontuples_level": 164, "partitiontuples_level_s": 164, "eta": 164, "partitiontuples_s": 164, "regularpartitiontupl": 164, "regularpartitiontuples_al": 164, "regularpartitiontuples_level": 164, "rpt": 164, "regularpartitiontuples_level_s": 164, "regularpartitiontuples_s": 164, "jonathan": 165, "bober": 165, "wrote": 165, "partitions_c": 165, "heavi": 165, "zs1_iter": 165, "zs1": 165, "zs98": 165, "zoghbi": 165, "ivan": 165, "stojmenov": 165, "332": [165, 172, 189], "citeseerx": 165, "ist": 165, "psu": 165, "viewdoc": 165, "1287": 165, "zs1_iterator_nk": 165, "mild": 165, "vow": 165, "path_tableaux": [166, 167, 168, 169, 170], "quickli": 166, "cylindricaldiagram": [166, 168, 169, 170], "dyckpath": [166, 167, 169, 363], "friezepattern": [166, 168, 169], "semistandardpathtableau": [166, 170], "semistandardpathtableaux": [166, 170], "path_tableau": [167, 168, 169, 170], "pathtableau": [167, 168, 169, 170], "pedagog": 167, "westburi": [167, 168, 169, 170], "dyck_path": 167, "slogan": 167, "to_perfect_match": 167, "is_skew": [167, 168, 170, 345], "local_rul": [167, 168, 169, 170], "to_dyckword": 167, "pathtableaux": [167, 168, 169, 170], "conwai": 168, "coco1": 168, "coco2": 168, "2019": [168, 276, 307, 341], "fp": [168, 187, 362, 369], "hj18": 168, "polygen": [168, 187, 188, 352], "sqrt3": [168, 363], "sqrt2": 168, "realfield": [168, 363], "is_integr": [168, 170], "is_posit": 168, "uhp": 168, "hyperbol": [168, 226, 227, 229], "isometri": [168, 350], "poincar": 168, "disk": [168, 311], "km": [168, 290, 302], "klein": 168, "hyperboloid": 168, "notanumb": 168, "undefin": [168, 172, 215, 354], "rectif": [169, 170], "cactu": 169, "wes2017": 169, "henriqu": 169, "kamnitz": 169, "cylindr": 169, "commutor": [169, 170], "final_shap": 169, "initial_shap": 169, "coboundari": 169, "pt2": 170, "pt1": 170, "interleav": [170, 308], "rectifi": [170, 314], "to_pattern": 170, "semistandardskewtableau": 170, "fixpoint": 171, "hyperoctaedr": 171, "mcd": [171, 293, 302, 303], "valentin": 171, "ferai": 171, "number_of_cross": [171, 278], "medici": 171, "polyn\u00f4m": 171, "laguerr": 171, "zeilberg": [171, 354], "304": [171, 235, 369], "zonal": [171, 289, 302], "oxford": [171, 289, 302], "benoit": 171, "sho": 171, "matsumoto": 171, "weingarten": 171, "0903": 171, "5143": 171, "perfect_match": 171, "is_noncross": [171, 278], "weingarten_funct": 171, "o_n": 171, "loop_typ": 171, "loops_iter": 171, "number_of_loop": 171, "partner": [171, 172], "to_noncrossing_set_partit": 171, "weingarten_matrix": 171, "apply_map": 171, "base_set_cardin": [171, 278, 280], "despit": [172, 246, 253], "13742": 172, "danger": 172, "_left_to_right_multiply_on_right": 172, "trust": 172, "left_action_product": [172, 173, 343], "right_action_product": [172, 173, 343], "cycle_str": 172, "to_tableau_by_shap": 172, "forget_cycl": 172, "to_permutation_group_el": [172, 297], "sef": 172, "to_inversion_vector": 172, "stack_sort": 172, "to_digraph": [172, 365], "noninvers": [172, 343], "number_of_noninvers": [172, 343], "ishift": 172, "iswitch": 172, "longest_increasing_subsequ": 172, "longest_increasing_subsequences_numb": 172, "foata_biject": [172, 359], "foata_bijection_invers": 172, "fundamental_transform": 172, "renyi": 172, "schuetzenberg": [172, 346], "fundamental_transformation_invers": 172, "destandard": 172, "ordered_alphabet": 172, "to_lehmer_cocod": 172, "cocod": 172, "reduced_words_iter": 172, "reduced_word_lexmin": 172, "is_derang": 172, "recoil": 172, "number_of_recoil": 172, "recoils_composit": 172, "idesc": 172, "idescents_signatur": 172, "number_of_desc": 172, "number_of_idesc": 172, "descent_polynomi": 172, "imajor_index": 172, "to_major_cod": 172, "salianc": 172, "number_of_sali": 172, "bruhat_lequ": [172, 187], "bruhat_invers": 172, "bruhat_inversions_iter": 172, "bruhat_succ": 172, "bruhat_succ_iter": 172, "bruhat_pr": 172, "bruhat_pred_iter": 172, "bruhat_smal": 172, "bruhat_great": 172, "permutohedron_succ": 172, "permutohedron_pr": 172, "permutohedron_smal": 172, "permutohedron_great": 172, "right_permutohedron_interval_iter": 172, "right_permutohedron_interv": 172, "has_pattern": [172, 186, 354], "pattern_posit": 172, "patt": 172, "permutation_poset": 172, "robinson_schenst": [172, 190, 359], "increasing_tree_shap": 172, "rs_partit": 172, "remove_extra_fixed_point": 172, "retract_plain": [172, 343], "retract_direct_product": [172, 343], "retract_okounkov_vershik": [172, 343], "okounkov": [172, 343], "vershik": [172, 343], "hyperoctahedral_double_coset_typ": 172, "shifted_concaten": 172, "shifted_shuffl": [172, 359], "permutations_nk": 172, "permutations_mset": [172, 303], "permutations_set": 172, "permutations_msetk": 172, "permutations_setk": 172, "arrangements_msetk": 172, "arrangements_setk": 172, "standardpermutations_al": 172, "standardpermutations_n_abstract": 172, "standardpermutations_n": 172, "standardpermutations_desc": 172, "standardpermutations_recoilsfin": 172, "standardpermutations_recoilsfatt": 172, "standardpermutations_recoil": 172, "standardpermutations_bruhat_smal": 172, "standardpermutations_bruhat_great": 172, "cyclicpermut": 172, "cyclicpermutationsofpartit": 172, "standardpermutations_avoiding_12": 172, "standardpermutations_avoiding_21": 172, "standardpermutations_avoiding_132": 172, "standardpermutations_avoiding_123": 172, "standardpermutations_avoiding_321": 172, "standardpermutations_avoiding_231": 172, "standardpermutations_avoiding_312": 172, "standardpermutations_avoiding_213": 172, "standardpermutations_avoiding_gener": 172, "patternavoid": 172, "from_major_cod": 172, "from_permutation_group_el": 172, "pge": 172, "from_inversion_vector": 172, "from_cycl": 172, "rw": [172, 232, 242], "bistochastic_as_sum_of_permut": 172, "bistochast": 172, "bounded_affine_permut": 172, "descents_composition_list": 172, "descents_composition_first": 172, "descents_composition_last": 172, "to_standard": 172, "s\u00e9bastien": [172, 350, 356, 359, 362, 366, 369], "labb\u00e9": [172, 350, 356, 359, 362, 366, 369], "robinson_schensted_invers": 172, "amelior": 172, "14885": [172, 343], "expos": 172, "n_reduced_word": 172, "amrutha": 172, "shriya": [172, 355], "divya": 172, "aggarw": 172, "multimajor": 172, "0x": [172, 336], "certainti": 172, "asap": 172, "law": [172, 336, 339], "runtim": [172, 343], "standardpermutations_n_with_categori": 172, "absolute_length": 172, "cycle_tupl": 172, "decreasing_run": [172, 306], "as_tupl": 172, "gs1984": 172, "z1": [172, 294, 354], "z2": [172, 294], "z3": 172, "from_zero": 172, "113132": 172, "412": 172, "4125": 172, "45123": 172, "fs1978": [172, 359], "enumcomb1": [172, 182, 187], "k_m": [172, 188], "k_j": [172, 188], "s_6": 172, "rank_funct": [172, 180, 187], "cc2013": 172, "has_nth_root": 172, "nth_root": 172, "number_of_nth_root": 172, "mac1995": [172, 286, 293, 313, 359], "a111111": 172, "sch1961": 172, "31451": 172, "120770": 172, "multi_major_index": 172, "js2000": 172, "permutationinvers": 172, "noninv": [172, 343], "rsw2011": [172, 343], "number_of_reduced_word": 172, "greene_shap": [172, 187], "permutohedron_join": 172, "permutohedron_meet": 172, "markowski": 172, "mar1994": 172, "mistaken": 172, "schubert_polynomi": [172, 277], "finitari": 172, "vo2005": 172, "cst2010": 172, "rp": [172, 173, 193, 217], "check_standard": [172, 276], "permutationrun": 172, "admittedli": 172, "toi": 172, "landscap": 172, "portrait": 172, "subcal": 172, "p20": 172, "simion_schmidt": 172, "schmidt": 172, "sortable_permut": 172, "s_5": [172, 277, 302, 316], "s_3": [172, 238, 242, 343, 346], "is_cycl": 172, "strongly_connected_components_subgraph": 172, "carlitz": [172, 189, 303], "1954": [172, 189], "076": 172, "0060538": [172, 189], "skandera": 172, "s\u00e9m": 172, "lothar": [172, 302], "b46d": 172, "lehigh": 172, "mas906": 172, "mult": [172, 235, 343], "r2l": [172, 343], "l2r": [172, 343], "reading_word_permut": [172, 346], "recoils_fin": 172, "recoils_fatt": 172, "nonstandard": [172, 232, 323], "generator_nam": 172, "latex_empty_str": 172, "permutationsnk": 172, "multinomi": [172, 188], "n_t": 172, "30991": 172, "standardpermutations_all_avoid": 172, "vie1979": 172, "conjugacy_classes_iter": 172, "conjugacy_classes_repres": [172, 239], "element_in_conjugacy_class": 172, "sp0": 172, "__contains__": 172, "stochast": 172, "birkhoff": [172, 188, 303], "von": 172, "neumann": 172, "glad": 172, "learn": [172, 337], "as_sum_of_permut": 172, "decomp": 172, "kls2013": 172, "dc": [172, 359, 369], "from_lehmer_cocod": 172, "lcc": 172, "lc": [172, 359], "illeg": 172, "sem": [172, 302], "nearli": [173, 225, 354], "taocp": 173, "inher": 173, "pointer": [173, 238, 354], "ugli": [173, 238, 303], "willing": 173, "sacrific": 173, "permutation_cython": 173, "left_action_same_n": 173, "map_to_list": 173, "crash": 173, "next_perm": 173, "marknelson": 173, "2002": [173, 216, 227, 362, 369], "permutation_iterator_transposition_list": 173, "overflow": [173, 354], "encourag": 173, "4gb": 173, "cowardli": 173, "refus": 173, "right_action_same_n": 173, "jang": 174, "soo": 174, "kim": 174, "2021": [174, 192, 193], "plane_partit": 174, "planepartit": 174, "orthant": 174, "box_siz": 174, "tableau_onli": 174, "cyclically_rot": 174, "preserve_par": 174, "pp_rotat": 174, "is_cspp": 174, "is_csscpp": 174, "is_cstcpp": 174, "is_scpp": 174, "is_spp": 174, "is_sscpp": 174, "is_tcpp": 174, "is_tspp": 174, "is_tsscpp": 174, "maximal_box": 174, "show_box": 174, "visibl": 174, "yz": [174, 372], "zx": [174, 372], "lightgrai": [174, 187, 311], "darkgrai": 174, "graphics3d": [174, 222, 238, 242, 350, 363], "to_order_id": 174, "feasibli": 174, "ppp": 174, "x_tableau": 174, "y_tableau": 174, "xz": [174, 362, 372], "z_tableau": 174, "spp": 174, "cspp": 174, "tspp": 174, "scpp": 174, "tcpp": 174, "sscpp": 174, "cstcpp": 174, "csscpp": 174, "tsscpp": 174, "planepartitions_al": 174, "planepartitions_n": 174, "planepartitions_box": 174, "planepartitions_spp": 174, "planepartitions_cspp": 174, "planepartitions_tspp": 174, "planepartitions_scpp": 174, "planepartitions_tcpp": 174, "planepartitions_sscpp": 174, "planepartitions_cstcpp": 174, "planepartitions_csscpp": 174, "planepartitions_tsscpp": 174, "3i": 174, "from_antichain": 174, "acl": 174, "from_order_id": 174, "cylic": 174, "random_order_id": [174, 187], "order_ideals_lattic": [174, 187], "6i": 174, "4i": 174, "2c": [174, 225, 315], "2500": [174, 315], "2j": [174, 359], "116424": 174, "sigma_k": [174, 315, 369], "18334": 174, "finiteposet": [175, 179, 182, 183, 184, 186, 187], "finitelatticeposet": [175, 182, 187], "cartesianproductposet": [176, 187], "le_sum": 176, "chainposet": [176, 182, 183, 184, 186, 187], "le_lex": 176, "le_n": 176, "le_product": 176, "grosser": [177, 179], "d_complet": [177, 187], "dcompleteposet": 177, "hasse_diagram": [177, 179, 180, 182, 184, 187], "finitejoinsemilattic": [177, 182, 187], "proctor": 177, "proc1999": 177, "pdynk1999": 177, "proc2014": 177, "hook_length_formula": 177, "ky2019": 177, "poset_exampl": [177, 180, 183, 186, 187], "doubletaileddiamond": [177, 183, 184, 186, 187], "get_hook": 177, "elmt": [177, 187], "ydp321": 177, "youngdiagramposet": [177, 180, 183, 184, 186, 187], "_hasse_diagram": [177, 180], "joinsemilatticeel": [178, 182], "posetel": [178, 187], "latticeposetel": [178, 182], "meetsemilatticeel": [178, 182], "establish": [178, 343], "forestposet": [179, 183], "antichains_iter": [180, 187], "are_compar": 180, "are_incompar": 180, "incompar": [180, 187], "atoms_of_congruence_lattic": 180, "bottom_moebius_funct": 180, "closed_interv": [180, 187], "common_lower_cov": [180, 187], "common_upper_cov": [180, 187], "congruences_iter": 180, "cover_relations_iter": [180, 187], "find_nonsemidistributive_el": 180, "semidistribut": [180, 182], "find_nonsemimodular_pair": 180, "find_nontrivial_congru": 180, "frattini_sublattic": [180, 182, 187], "frattini": [180, 182, 187], "sublattic": [180, 182, 232], "greedy_linear_extensions_iter": 180, "has_bottom": [180, 187], "has_top": [180, 187], "interval_iter": 180, "is_antichain_of_poset": [180, 187], "is_bound": [180, 187], "is_compl": [180, 182], "is_congruence_norm": 180, "is_convex_subset": 180, "is_gequ": [180, 187], "is_greater_than": [180, 187], "is_join_semilattic": [180, 187], "is_lequ": [180, 187], "is_less_than": [180, 187, 278], "is_linear_interv": [180, 187], "t_min": 180, "t_max": 180, "is_meet_semilattic": [180, 187], "is_rank": [180, 187], "join_matrix": [180, 182], "kappa_du": 180, "lequal_matrix": [180, 187], "redefin": [180, 354], "lower_covers_iter": [180, 187], "maximal_sublattic": [180, 182], "meet_matrix": [180, 182], "moebius_funct": [180, 186, 187], "moebius_function_matrix": [180, 187], "neutral_el": [180, 182], "open_interv": [180, 187], "order_filt": [180, 187], "order_id": [180, 187], "order_ideal_cardin": [180, 187], "orthocomplementations_iter": 180, "orthocomplement": [180, 182], "prime_el": 180, "principal_congruences_poset": 180, "principal_order_filt": [180, 187], "principal_order_id": [180, 187], "pseudocompl": [180, 182], "skeleton": [180, 182], "sublattices_iter": 180, "supergreedy_linear_extensions_iter": 180, "supergreedi": [180, 183], "upper_covers_iter": [180, 187], "vertical_decomposit": [180, 182], "hassediagram": 180, "data_structur": [180, 303], "vertex_label": [180, 238], "convert_empty_dict_labels_to_non": 180, "hash_label": 180, "topolog": [180, 359], "pentagonposet": [180, 182, 183, 186, 187], "frees": 180, "jezek": 180, "nation": 180, "n5": [180, 182, 187], "hex": [180, 182], "con": [180, 182], "_precompute_interv": 180, "uc": [180, 187], "dag": [180, 187, 313], "stop_pair": 180, "disjoint_set": 180, "disjointset_class": 180, "quadrilater": 180, "dav1997": 180, "gy": 180, "oq": 180, "number_of_subset": 180, "coxeter_transform": [180, 187, 242], "ausland": [180, 187], "reiten": [180, 187], "__dict__": 180, "clear_cach": 180, "hi": [180, 236, 303, 313, 354], "integerpartit": [180, 182, 186, 187], "meet_or_join": 180, "OR": [180, 182], "semimodular": [180, 182], "hawaii": 180, "ralph": 180, "preprint": [180, 200, 236], "conlat": 180, "whichev": 180, "_leq_storag": 180, "precomput": [180, 305], "municip": 180, "og": [180, 182], "oqc": [180, 182], "g_c": [180, 182], "bo": [180, 182], "jb": 180, "inflat": 180, "_alternate_is_lequ": 180, "lin_ext": 180, "is_grad": [180, 182, 187], "p217": 180, "gec81": 180, "_join": 180, "uparrow": 180, "diamondposet": [180, 182, 186, 187], "_meet": 180, "gecseg": 180, "1981": [180, 225, 235], "fct": [180, 266], "szege": 180, "hungaria": 180, "august": 180, "verlag": [180, 302], "_moebius_function_matrix": 180, "bird": 180, "booleanlattic": [180, 181, 182, 183, 185, 186, 187], "orthocompl": 180, "coatom": [180, 182, 240], "dualli": [180, 182, 244, 264], "disjointset": [180, 278], "e_k": [180, 273, 284, 285, 288, 300, 301, 303, 362], "high": [180, 193, 310, 362], "withdraw": 180, "g_ext": 180, "sg_ext": 180, "return_list": 180, "latticeerror": [180, 182], "incidence_algebra": [181, 187], "incidencealgebra": [181, 187], "convolut": [181, 193], "is_unit": [181, 303], "reduced_subalgebra": 181, "ielt": 181, "reducedincidencealgebra": 181, "meetsemilattic": [182, 187], "joinsemilattic": [182, 187], "finitemeetsemilattic": [182, 187], "is_distribut": 182, "is_modular": 182, "is_lower_semimodular": 182, "is_upper_semimodular": 182, "is_semidistribut": 182, "is_join_semidistribut": 182, "is_meet_semidistribut": 182, "is_join_distribut": 182, "is_meet_distribut": 182, "is_coatom": 182, "is_extrem": 182, "is_sectionally_compl": 182, "is_cosectionally_compl": 182, "is_relatively_compl": 182, "is_pseudocompl": 182, "is_join_pseudocompl": 182, "is_orthocompl": 182, "is_supersolv": 182, "supersolv": 182, "is_dismantl": [182, 186], "dismantl": [182, 186], "is_interval_dismantl": 182, "is_sublattice_dismantl": 182, "is_ston": 182, "is_trim": 182, "is_vertically_decompos": 182, "nontrivi": [182, 332, 343], "is_isoform": 182, "isoform": 182, "is_subdirectly_reduc": 182, "is_constructible_by_doubl": 182, "double_irreduc": [182, 187], "join_prim": 182, "meet_prim": 182, "is_modular_el": 182, "is_left_modular_el": 182, "canonical_joinand": 182, "joinand": 182, "canonical_meetand": 182, "meetand": 182, "submeetsemilattic": 182, "subsemilattic": 182, "subjoinsemilattic": 182, "is_sublattic": 182, "sublattices_lattic": 182, "isomorphic_sublattices_iter": [182, 187], "moebius_algebra": [182, 185], "quantum_moebius_algebra": [182, 185], "vertical_composit": [182, 187], "unifi": 182, "day_doubl": 182, "subdirect_decomposit": 182, "subdirect": 182, "congruences_lattic": 182, "divisorlattic": [182, 186, 187], "pnum": 182, "palp": [182, 354], "ord": 182, "d10": 182, "c4": [182, 225, 227, 251, 252, 273], "meet_irreduc": 182, "join_irreduc": 182, "feichtner_yuzvinsky_r": 182, "use_defin": 182, "feichtner": 182, "yuzvinski": 182, "h_g": 182, "h_a": 182, "bigve": 182, "fy2004": 182, "motiv": [182, 348, 352, 354], "fy": 182, "h0": 182, "coron2023": 182, "hyperplanearrang": 182, "arr": 182, "intersection_poset": 182, "defining_id": 182, "groebner_basi": 182, "h3": [182, 239, 240, 261, 296, 343], "h4": [182, 240, 302], "h5": 182, "holm2016": 182, "mi": 182, "cosection": 182, "myi": 182, "weaker": [182, 187], "supset": [182, 303], "crown": [182, 186], "lessdot": [182, 187], "dl12": 182, "symmetricgroupweakorderposet": [182, 186, 187], "mark1992": 182, "subdivis": [182, 268], "distmantl": 182, "isotyp": [182, 323, 329, 332, 333, 354], "dilworth": [182, 187], "dil1940": 182, "semimodular_lattic": 182, "aaoe_": 182, "modular_lattic": 182, "d6": [182, 225, 254], "is_self_du": [182, 186, 187, 306], "scientif": [182, 216], "gw2014": 182, "platt1976": 182, "cover_relations_graph": [182, 187], "ordinal_product": [182, 187], "cha92": 182, "hyogc": 182, "selfdual": 182, "d72": 182, "subdirectli": 182, "cert": 182, "n5_": 182, "is_induced_subposet": [182, 187], "with_bound": [182, 187], "adjoin": [182, 187], "thom2006": 182, "ungrad": 182, "n6": 182, "n5_in_l": 182, "has_isomorphic_subposet": [182, 187], "isomorphic_subposets_iter": [182, 187], "subgraph_search_iter": [182, 187], "moebiusalgebra": [182, 185], "quantummoebiusalgebra": [182, 185], "theta_1": 182, "theta_2": 182, "theta_3": 182, "pseudocomplement": 182, "ldecomp": 182, "fac": 182, "sublat": 182, "sll": 182, "ordinal_sum": [182, 187], "elements_onli": 182, "lat": 182, "hat": [182, 187, 215, 266], "finitejoinsemilattice_with_categori": 182, "finitelatticeposet_with_categori": 182, "_test_an_el": [182, 187, 194], "is_parent_of": [182, 187], "finitemeetsemilattice_with_categori": 182, "linearextensionofposet": 183, "linearextensionsofposet": [183, 187], "linearextensionsofposetwithhook": 183, "linearextensionsofforest": 183, "pi_0": [183, 187], "pi_1": [183, 187, 303], "pi_j": [183, 187, 303], "sch\u00fctzenberg": [183, 187, 359], "stan2009": [183, 187, 346], "tau_": [183, 187, 242], "is_greedi": [183, 187], "is_supergreedi": 183, "x_t": 183, "receed": 183, "ktz1987": 183, "jump_count": 183, "jump_numb": [183, 187], "partial_i": 183, "atkinson": [183, 187], "linearextensionsofmobil": 183, "mobileposet": [183, 184, 186], "1098": 183, "ribbonposet": [183, 184, 186, 187], "361628701868606400": 183, "markov_chain_digraph": 183, "markov_chain_transition_matrix": 183, "ggmm2020": 184, "_ribbon": 184, "_anchor": 184, "_element_to_vertex": 184, "21399440939": 184, "basisabstract": 185, "solomon67": 185, "e_x": 185, "i_x": [185, 187], "mu_l": 185, "greene73": 185, "etienne98": 185, "loui": 185, "burnsid": [185, 310], "1967": 185, "80064": 185, "curti": [185, 276], "advanc": [185, 238, 276, 302, 303, 354], "8708": [185, 276], "90106": 185, "gwihen": 185, "etienn": 185, "1006": [185, 302, 305], "eujc": 185, "0227": 185, "moebiusalgebrabas": 185, "crk": 185, "e_z": 185, "corank": 185, "c_x": 185, "e_a": [185, 215], "b_x": 185, "epw14": [185, 187], "characteristic_basi": 185, "is_series_parallel": [186, 187], "antichainposet": [186, 187], "dextersemilattic": [186, 349], "integercomposit": 186, "integerpartitionsdominanceord": 186, "hanger": 186, "noncrossingpartit": [186, 352], "permutationpattern": 186, "permutationpatterninterv": 186, "permutationpatternoccurrenceinterv": 186, "powerposet": 186, "productofchain": 186, "randomlattic": 186, "randomposet": 186, "restrictedintegerpartit": 186, "shardposet": [186, 306], "sstposet": 186, "standardexampl": 186, "symmetricgroupabsoluteorderposet": 186, "symmetricgroupbruhatintervalposet": 186, "symmetricgroupbruhatorderposet": [186, 187], "tetrahedralposet": 186, "tetrahedr": [186, 315], "layer": 186, "updownposet": 186, "youngslattic": 186, "youngslatticeprincipalorderid": 186, "face_lattic": [186, 187], "facade_set": 186, "use_subset": 186, "coxetergroupabsoluteorderposet": 186, "use_reduced_word": 186, "chain_polynomi": [186, 187, 306, 349], "cha18": [186, 349], "p_l": 186, "q_2": [186, 234, 236, 241], "q_m": [186, 340], "q_j": 186, "ribbon_elmt": 186, "anchor_elmt": 186, "anchor_poset": 186, "v_m": 186, "permutation_pattern": 186, "st2010": 186, "bru1994": 186, "chain_length": 186, "littl": [186, 236, 343, 354], "set_random_se": [186, 187, 328], "995": 186, "shard_preorder_graph": [186, 306], "zeta_polynomi": [186, 187, 306], "gar2015": 186, "ros1999": 186, "ranks1": 186, "ranks2": 186, "silver": 186, "striker2011": 186, "join_irreducibles_poset": 186, "tet": 186, "zig": 186, "zag": 186, "fenc": 186, "somewher": 186, "y5": 186, "1211": [186, 236], "2111": 186, "_frozen_importlib_extern": 186, "_namespaceload": 186, "check_int": 186, "boilerpl": 186, "safeti": 186, "junk": 186, "finiteposets_n": 187, "is_poset": 187, "compare_el": 187, "relations_iter": 187, "relations_numb": 187, "magnitud": 187, "is_rank_symmetr": 187, "is_jump_crit": 187, "is_eulerian": 187, "is_incomparable_chain_fre": 187, "is_slend": 187, "slender": 187, "is_spern": 187, "sperner": 187, "rees_product": 187, "lexicographic_sum": 187, "star_product": 187, "without_bound": 187, "completion_by_cut": 187, "dedekind": 187, "macneil": 187, "intervals_poset": 187, "ordinal_summand": 187, "random_subposet": 187, "slant_sum": 187, "slant": 187, "is_chain_of_poset": 187, "maximal_antichain": 187, "maximal_chains_iter": 187, "maximal_chain_length": 187, "random_maximal_chain": 187, "random_maximal_antichain": 187, "linear_intervals_count": 187, "graphviz_str": 187, "readi": [187, 354], "flag_f_polynomi": 187, "h_polynomi": 187, "flag_h_polynomi": 187, "order_polynomi": 187, "m_triangl": [187, 352], "coxeter_polynomi": 187, "degree_polynomi": 187, "p_partition_enumer": 187, "chain_polytop": 187, "order_polytop": 187, "comparability_graph": 187, "incomparability_graph": 187, "frank_network": 187, "linear_extensions_graph": 187, "with_linear_extens": 187, "random_linear_extens": 187, "coxeter_smith_form": 187, "isomorphic_subposet": 187, "dilworth_decomposit": 187, "is_el_label": 187, "level_set": 187, "order_complex": 187, "unwrap": 187, "spectrum": [187, 362], "finiteposet_with_categori": 187, "softwar": [187, 277, 302], "gap_package_qpa": 187, "macaulay2": 187, "needspackag": 187, "_dual_class": 187, "elements_of_depth_iter": 187, "subsets_pairwis": [187, 338], "inlin": 187, "infrastructur": 187, "overhead": 187, "362880": 187, "at1990": 187, "ml": 187, "st1986": 187, "trafficsign": 187, "irreducibles_poset": 187, "mapl": [187, 190, 236, 291, 354], "frica": 187, "geq_p": 187, "jrj94": 187, "27s_theorem": 187, "v_3": 187, "dushnik": 187, "leq_p": 187, "order_dimens": 187, "greatli": 187, "25588": 187, "ft00": 187, "inc": 187, "architectur": [187, 227], "completebipartitegraph": 187, "liter": [187, 303, 314], "untouch": 187, "fpolynomi": 187, "topologi": 187, "cell_complex": 187, "genericcellcomplex": 187, "f_vector": 187, "feig1986": 187, "joan": 187, "feigenbaum": 187, "1986": 187, "90023": 187, "fl": 187, "bf1999": 187, "capac": [187, 354], "y_p": 187, "graph_str": 187, "edge_str": 187, "deg": [187, 310, 354], "hpolynomi": 187, "simplicial_complex": 187, "simplicialcomplex": [187, 340], "h_vector": 187, "intervals_numb": 187, "y_2": 187, "return_raising_chain": 187, "bj1980": 187, "is_d_complet": 187, "eulerian_poset": 187, "mww": 187, "compet": 187, "graded_poset": 187, "tier": 187, "semiord": 187, "ip6": 187, "chains_1_2": 187, "incomp": 187, "eric": [187, 278], "rowland": 187, "le_p": 187, "le_q": 187, "va": 187, "big_n": 187, "eponym": 187, "graetzer": 187, "kelli": 187, "bruhat_poset": [187, 190], "sperner_property_of_a_partially_ordered_set": 187, "eat": 187, "sys1987": 187, "suffic": [187, 276], "chi_g": 187, "p_g": 187, "chi_": 187, "2314": 187, "3421": [187, 359], "leqm": 187, "p_t": [187, 276], "linearextensionsofposet_with_categori": 187, "risk": 187, "chevron": 187, "lein2008": 187, "leinster": 187, "documenta": 187, "uni": [187, 289, 303, 323, 332], "bielefeld": 187, "golem": 187, "ph": [187, 211, 215, 306], "utexa": 187, "the_magnitude_of_an_enriched_c": 187, "noncrossing_partition_lattic": 187, "on_int": 187, "contract": 187, "upset": 187, "downset": 187, "order_ideal_plot": 187, "omega_p": 187, "284": 187, "jl": 187, "tup": 187, "sum_f": 187, "grinb2016a": 187, "dictat": [187, 255], "label_el": 187, "element_label": 187, "cover_label": 187, "element_color": 187, "element_shap": 187, "markers_api": 187, "element_s": 187, "cover_color": 187, "cover_styl": 187, "solid": [187, 238], "dash": 187, "dashdot": 187, "cover_labels_background": 187, "overal": [187, 227, 236, 276], "figsiz": [187, 238, 242, 362], "titl": 187, "fontsiz": [187, 340], "emphas": 187, "f_intern": 187, "nsublattic": 187, "randomli": [187, 346, 348, 354], "propp1997": 187, "is_order_filt": 187, "is_order_id": 187, "1243": [187, 364], "4312": 187, "4321": 187, "rk": [187, 311], "bj\u00f6rner": 187, "welker": [187, 343], "bjwe2005": 187, "mbre2011": 187, "lsw2012": 187, "b3t": 187, "rob": 187, "beezer": 187, "elm_lab": 187, "p_element": 187, "ss": [187, 343, 346], "allow_incompar": 187, "remove_dupl": 187, "top_p": 187, "bot_q": 187, "max_achain": 187, "dbinom": 187, "from_iter": 187, "a000112": 187, "fcn": 187, "dig": 187, "allows_multiple_edg": 187, "allows_loop": 187, "transitive_reduct": 187, "popular": 187, "surpris": [187, 242], "my_el": 187, "annoi": 187, "unsupport": [187, 296], "whatsoev": 187, "data1": 187, "data2": 187, "gaussian_multinomi": 188, "binomial_algorithm": 188, "q_multinomi": 188, "gaussian_binomial_coeffici": 188, "ch2006": 188, "030056160000": 188, "qing": 188, "hu": 188, "hou": 188, "1446": 188, "1449": 188, "disc": 188, "031": 188, "q_catalan_numb": 188, "fuss": 188, "q_factori": 188, "11411": 188, "q_int": 188, "q_jordan": 188, "f_t": 188, "ker": 188, "9765": 188, "1029": 188, "615195": 188, "40635": 188, "5643": 188, "2331": [188, 235], "1491": 188, "515": [188, 241, 273], "147": 188, "xavier": [188, 363], "caruso": 188, "q_pochhamm": 188, "aq": 188, "pochhammer_symbol": 188, "q_stirling_number1": 188, "ca1948": [188, 189], "ca1954": [188, 189], "q_stirling_number2": 188, "mil1978": 188, "q_subgroups_of_abelian_group": 188, "bu87": 188, "delsart": 188, "delsarte48": 188, "lambda_l": 188, "xi_1": 188, "xi_k": 188, "xi_2": 188, "butler": 188, "lynn": 188, "unimod": 188, "1987": [188, 241, 276, 304], "771": 188, "775": 188, "9939": 188, "0911049": 188, "sur": 188, "ab\u00e9lien": 188, "fini": 188, "annal": 188, "jul": [188, 303], "609": [188, 367], "jstor": 188, "1969047": 188, "amritanshu": [188, 310, 355], "prasad": [188, 310, 355], "tomer": 188, "bauer": 188, "qt_catalan_numb": 188, "q_bernoulli": 189, "beta_m": 189, "1215": 189, "s0012": 189, "7094": 189, "01588": 189, "q_bernoulli_polynomi": 189, "a000275": 190, "bessel": 190, "polcoeff": 190, "besselj": 190, "_michael": 190, "somos_": 190, "10000": [190, 354, 359, 362, 369], "3616": 190, "315650422081868605887952568754066420592310556052906916435144": 190, "schuetzenberger_involut": [190, 346, 359], "iv_3": 190, "nonnegativeinteg": [190, 354], "aaaa": 190, "cccc": 190, "aabcacbaa": 190, "is_palindrom": [190, 359, 363, 366], "abaababaabaababaababaabaababaabaababaaba": [190, 362, 366, 369], "random_matrix": [190, 354], "npoint": [190, 354], "some_flashy_featur": 190, "from_list": 191, "on_fli": 191, "fly": 191, "rank_from_list": 191, "blah": 191, "callabledict": 191, "callable_dict": 191, "__getitem__": [191, 227, 347, 362], "beyond": 191, "unrank_from_list": 191, "cfinite_sequ": [192, 193, 374], "recognizable_seri": 192, "prefixclosedset": 192, "create_by_alphabet": 192, "iterate_possible_addit": 192, "0011": [192, 359], "iterate_by_length": [192, 363, 372], "prefix_set": 192, "br2010a": 192, "recognizableseri": [192, 193], "moduleel": 192, "recognizableseriesspac": [192, 193], "rec": 192, "coefficient_of_word": 192, "multiply_left": 192, "multiply_right": 192, "coefficient_r": [192, 193], "hadamard_product": 192, "minimize_result": [192, 193], "seq2": [192, 193], "regularsequenc": [192, 193], "linear_represent": [192, 193], "is_trivial_zero": [192, 193], "totallyorderedfiniteset": [192, 358], "rec1": 192, "rec2": 192, "rec3": 192, "one_hadamard": [192, 193], "11111": [192, 315], "111111": [192, 315], "10101": 192, "2210": [192, 193], "regular_sequ": 193, "as2003": 193, "basicconfig": 193, "cached_funct": 193, "gabriel": 193, "lipnik": 193, "1230": [193, 235, 359], "degeneratedsequenceerror": 193, "allow_degenerated_sequ": 193, "regener": 193, "recurrencepars": 193, "from_recurr": [193, 374], "regularsequ": 193, "ind": [193, 303, 307], "uu": 193, "hkl2022": 193, "recurrence_rul": 193, "namedtupl": 193, "rrd": 193, "recurrence_rules_dim": 193, "inhomogen": [193, 315], "rem": 193, "correct_offset": 193, "initial_valu": 193, "parse_recurr": 193, "stern": 193, "brocot": 193, "sb_rule": 193, "unbord": 193, "thue": [193, 315, 356, 362, 369], "mors": [193, 290, 293, 296, 315, 346, 356, 362, 369], "ub_rul": 193, "g_r": 193, "472": 193, "parse_direct_argu": 193, "shifted_inhomogen": 193, "si": 193, "v_eval_n": 193, "last_value_need": 193, "backward_differ": 193, "coefficient_of_n": 193, "35894": 193, "include_n": 193, "forward_differ": 193, "satisfii": 193, "badli": [193, 239], "274": [193, 235], "n_0": [193, 235, 312], "shift_left": 193, "shift_right": 193, "s31": 193, "sbd": 193, "ut": 193, "utt": 193, "fulfil": 193, "ub": [193, 359], "lrs2017": 193, "n_verifi": 193, "max_expon": 193, "geq0": 193, "mathtt": 193, "_expon": 193, "bootstrap": 193, "is_odd": [193, 354], "getlogg": 193, "setlevel": 193, "pad_right": 193, "restricted_growth": 194, "restrictedgrowtharrai": 194, "_test_enumerated_set_contain": 194, "_test_some_el": 194, "ribbon_shaped_tableau": 196, "ribbonshapedtableau": [196, 314], "ribbonshapedtableaux": 196, "skewtableaux": [196, 314], "from_shape_and_word": [196, 314, 346], "ribbon_class": 196, "standardribbonshapedtableaux": 196, "standardskewtableaux": [196, 314, 346], "standardribbonshapedtableaux_shap": 196, "ribbon_tableau": 197, "multiskewtableau": 197, "inversion_pair": 197, "semistandardskewtableaux": [197, 314], "multiskewtableaux": 197, "multiskew": 197, "ribbontableau": 197, "expr": [197, 314], "2041100030": 197, "ribbontableau_class": 197, "ribbontableaux": 197, "vanleeuwen91": 197, "marc": [197, 354], "leeuwen": 197, "europ": 197, "wwwmathlabo": 197, "poitier": 197, "maavl": 197, "edgeseq": 197, "from_expr": [197, 314], "ribbontableaux_shape_weight_length": 197, "semistandardmultiskewtableaux": 197, "cospin_polynomi": 197, "cospin": [197, 292, 302, 303], "count_rec": 197, "graph_implementation_rec": 197, "skp": [197, 292, 313, 314], "insertion_tableau": 197, "list_rec": 197, "spin_polynomi": 197, "spin_polynomial_squar": 197, "spin_rec": 197, "constantli": 199, "_element": 199, "rigged_configur": [199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219], "bij_abstract_class": 199, "krttorcbijectionabstract": [199, 201], "tp_krt": [199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 215, 218], "krt": [199, 201, 205, 207, 209, 212, 215, 218, 219], "bij_type_a": [199, 201], "krttorcbijectiontypea": [199, 201, 204, 206, 207, 208], "pathlist": [199, 201, 205, 207, 209, 218, 219], "rctokrtbijectionabstract": [199, 201], "rc_element": [199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209], "build_graph": [199, 205, 207, 209, 215], "partition_list": [199, 201, 205, 207, 209, 213, 214, 215, 216, 217], "rctokrtbijectiontypea": [199, 201, 204, 206, 207, 208], "_graph": [199, 205, 207, 209], "mlt": 200, "1505": 200, "07040": 200, "bij_infin": 200, "fromrcisomorph": 200, "fromtableauisomorph": 200, "mlttorcbijectiontypeb": 200, "krttorcbijectiontypeb": [200, 205], "vct": [200, 213, 214, 215], "as_fold": [200, 213, 214, 215, 227, 266], "mlttorcbijectiontyp": 200, "krttorcbijectiontyp": [200, 207, 209], "rctomltbijectiontypeb": 200, "rctokrtbijectiontypeb": [200, 205], "rctomltbijectiontyp": 200, "rctokrtbijectiontyp": [200, 207, 209], "cur_path": 201, "cur_dim": 201, "bij_type_a2_du": 202, "krttorcbijectiontypea2du": 202, "krttorcbijectiontypec": [202, 203, 205, 206], "rctokrtbijectiontypea2du": 202, "rctokrtbijectiontypec": [202, 203, 205, 206], "bij_type_a2_even": 203, "krttorcbijectiontypea2even": [203, 209], "rctokrtbijectiontypea2even": [203, 209], "bij_type_a2_odd": 204, "krttorcbijectiontypea2odd": 204, "rctokrtbijectiontypea2odd": 204, "bij_type_b": 205, "other_outcom": 205, "pos_val": 205, "width_n": 205, "to_tensor_product_of_kirillov_reshetikhin_tableaux": [205, 215, 216, 219], "to_rigged_configur": [205, 215, 216, 218, 219], "bij_type_c": 206, "bij_type_d": 207, "doubling_map": 207, "vacanc": [207, 215, 216, 217], "halving_map": 207, "halv": [207, 215], "bij_type_d_tri": 208, "krttorcbijectiontypedtri": 208, "rctokrtbijectiontypedtri": 208, "bij_type_d_twist": 209, "krttorcbijectiontypedtwist": 209, "rctokrtbijectiontypedtwist": 209, "krttorcbiject": 210, "rctokrtbiject": 210, "rigged_configuration_elt": 210, "kleber1": 211, "kleber_tre": [211, 216], "klebertre": [211, 216], "classical_ct": 211, "virtualklebertre": [211, 216], "yangian": 211, "internat": 211, "kleber2": 211, "dissert": 211, "california": [211, 235], "berkelei": [211, 235], "qa": [211, 216, 218, 236, 311], "9809087": 211, "16876": 211, "klebertreenod": 211, "breadth_first_it": 211, "depth_first_it": 211, "75n": 211, "use_vector_not": 211, "parent_obj": 211, "node_weight": 211, "dominant_root": 211, "parent_nod": 211, "up_root": 211, "alpha_a": [211, 215, 216], "l_j": [211, 215], "klebertreetypea2even": 211, "gamma_a": 211, "all_nod": 211, "oss03": [211, 215, 216], "masato": [211, 212, 216, 218], "okado": [211, 212, 216, 218, 266], "phy": [211, 216, 225, 292, 303, 362], "0209082": 211, "base_tre": 211, "rigconbiject": [212, 215, 216, 219], "oss13": 212, "ss2015": [212, 213], "reiho": [212, 216, 218], "sakamoto": [212, 216, 218], "599": [212, 218], "1109": [212, 218], "3523": [212, 218], "kr_tableaux": 212, "krtableauxbn": 212, "krtableauxtypehorizon": 212, "reshetkhin": 212, "krtableauxspinel": 212, "from_kirillov_reshetikhin_cryst": 212, "krtableauxdtwistedspin": 212, "krtableauxrectangl": 212, "krtableauxspin": 212, "spinor": [212, 215, 219, 225], "left_split": [212, 215, 219], "to_arrai": 212, "krtableauxtypebox": 212, "krtableauxtypevert": 212, "krtableauxtypefromrc": 212, "krtableauxtypefromrcel": 212, "reshetkihn": 212, "oss2011": [212, 216, 218], "bijectiondn": [212, 215, 216, 219], "classifi": [212, 225, 227, 240], "column_shap": 212, "wsc": 212, "krcry": 212, "krtab": 212, "kirillov_reshetikhin_cryst": 212, "omega_k": 212, "right_split": [212, 215, 219], "to_classical_highest_weight": 212, "f_str": 212, "to_kirillov_reshetikhin_cryst": 212, "rc_crystal": 213, "crystalofnonsimplylacedrc": 213, "wlr": 213, "crystalofriggedconfigur": 213, "rchwnonsimplylacedel": [213, 215], "from_virtu": [213, 214, 216], "vrc": [213, 214, 216], "to_virtu": [213, 214, 216], "crysstructschilling06": [213, 215, 216], "ss2015ii": 213, "ss2017": 213, "rchighestweightel": [213, 215], "element_ascii_art": [213, 214, 216], "half_width_boxes_type_b": [213, 214, 216], "rc_infin": 214, "infinitycrystalofnonsimplylacedrc": 214, "infinitycrystalofriggedconfigur": 214, "rigged_partit": [214, 215, 217], "rcnonsimplylacedel": [214, 215], "rigging_list": [214, 215, 216], "vrc_elt": [214, 216], "velt": [214, 216], "f_a": [214, 215], "vg": 214, "riggedconfigurationel": [214, 215], "riggedpartit": [215, 217], "rigged_configuration_el": 215, "krrcnonsimplylacedel": [215, 216], "krriggedconfigurationel": 215, "cocharg": [215, 216, 346, 348, 359], "gamma_0": 215, "v_a": 215, "gamma_j": [215, 266], "krrcsimplylacedel": [215, 216], "alpha_b": 215, "krrctypea2dualel": [215, 216], "sc": [215, 340], "to_virtual_configur": 215, "varepsilon_a": 215, "varepsilon_n": 215, "varphi_a": 215, "varphi_n": 215, "rc_elt": [215, 218], "tp_krtab": 215, "tp_krcry": 215, "to_tensor_product_of_kirillov_reshetikhin_cryst": [215, 216, 218, 219], "lambda_a": [215, 216], "complement_rig": 215, "reverse_factor": 215, "corig": 215, "hwc": 215, "return_b": 215, "precompos": 215, "left_box": 215, "appeal": 215, "left_column_box": 215, "right_column_box": 215, "display_step": [215, 219], "bijectionlrt": [215, 216, 219], "bigotimes_i": [215, 219], "nonposit": 215, "colabel": 215, "use_vacancy_numb": 215, "rc2": [215, 216], "borcherd": [215, 226], "ss2018": 215, "imaginari": [215, 235, 242, 354], "nu0": 215, "partition_rigging_list": 215, "vacancy_numb": [215, 217], "rcnonsimplylac": 216, "rctypea2du": 216, "rctypea2even": 216, "750": 216, "kerov": 216, "ansatz": 216, "hkott2002": 216, "hatayama": 216, "kuniba": 216, "takagi": 216, "tsuboi": 216, "fermion": [216, 266, 342], "prog": 216, "97376": 216, "jing": [216, 296, 303], "world": 216, "334": 216, "anatol": 216, "selecta": 216, "mathscinet": 216, "mr1890195": 216, "tp_krc": [216, 218, 219], "kr1": [216, 218], "kr2": [216, 218], "fermionic_formula": 216, "only_highest_weight": 216, "subsum": 216, "sakamoto13": 216, "oss2003": 216, "0105017": 216, "1302": 216, "4562v1": 216, "tensor_product_of_kirillov_reshetikhin_cryst": [216, 218], "tensor_product_of_kirillov_reshetikhin_tableaux": 216, "get_num_cells_to_column": 217, "end_column": 217, "insert_cel": 217, "max_width": 217, "prepar": [217, 226], "num_cel": 217, "newli": 217, "riggedpartitiontypeb": 217, "tensor_product_kr_tableaux": 218, "highestweighttensorkrt": 218, "obei": 218, "eastern": 218, "eltlong": 218, "tensorproductofkirillovreshetikhintableauxel": [218, 219], "tensor_product_kr_tableaux_el": 219, "tpkrt": 219, "dynkindiagram": [220, 227, 231, 246], "complexreflectiongroup": [220, 239, 240], "fusion": [220, 273], "ambientspac": [221, 227, 242, 244, 245, 248, 251, 253, 255, 257, 259, 264, 265, 267, 268, 269, 270, 271], "smallest_base_r": [221, 245, 251, 259, 264, 270], "safe": 221, "ambient_lattic": [221, 236, 241, 242, 244, 245, 264, 270, 271], "type_a": [221, 227, 245], "type_b": [221, 248], "type_c": [221, 251], "type_d": [221, 253], "type_": [221, 255], "type_f": [221, 257], "type_g": [221, 259], "type_du": [221, 265], "type_affin": [221, 264], "ambientspaceel": [221, 270], "coroot_lattic": [221, 242, 243, 244, 264], "from_vector_not": 221, "codimens": [221, 222, 239], "e7": [221, 225, 255, 256, 273], "s_a": [221, 346], "simple_coroot": [221, 236, 238, 239, 241, 242, 243, 244, 259, 264, 265, 267, 268, 269, 270, 272, 273], "to_ambient_space_morph": [221, 242, 243, 272], "associated_coroot": [221, 242, 243, 264, 270], "coerce_to_e6": 221, "coerce_to_e7": 221, "coerce_to_sl": 221, "fw": [221, 225, 232, 273, 274, 354], "a2xa3": 221, "dot_product": [221, 270], "lambdacheck": [221, 232, 234, 235, 242, 243, 270, 272], "inner_product": [221, 264, 270, 273], "is_positive_root": [221, 243], "to_ambi": [221, 242, 243, 272], "associahedra": [222, 340], "ambient_dim": 222, "associahedra_bas": 222, "polyhedra": [222, 242], "associahedra_ppl_with_categori": 222, "importantli": [222, 239], "associahedra_cdd": 222, "polyhedra_qq_cdd": 222, "associahedron_class_cdd": 222, "associahedra_field": 222, "polyhedra_field": 222, "associahedron_class_field": 222, "associahedra_normaliz": 222, "polyhedra_qq_normaliz": 222, "associahedron_class_normaliz": 222, "associahedra_polymak": 222, "polyhedra_polymak": 222, "associahedron_class_polymak": 222, "associahedra_ppl": 222, "polyhedra_qq_ppl": 222, "associahedron_class_ppl": 222, "cfz2002": [222, 242], "cartantypefactori": [222, 227, 238], "asso": 222, "hrepresent": 222, "vrepresent": 222, "associahedron_class_bas": 222, "vrep": 222, "hrep": 222, "vertices_in_root_spac": 222, "polyhedron_qq_cdd": 222, "polyhedron_field": 222, "polyhedron_qq_normaliz": 222, "polyhedron_polymak": 222, "polyhedron_qq_ppl": 222, "start_word": 223, "end_word": 223, "stard_word": 223, "put_in_front": 223, "input_word": 223, "braid_orbit": 224, "braidorbit": 224, "branching_rul": [225, 273], "branchingrul": 225, "intermediate_typ": 225, "intermediate_nam": 225, "rtype": 225, "levi": [225, 273], "stype": 225, "maximal_subgroup": [225, 273], "no_r": 225, "branch_weyl_charact": [225, 273], "king": [225, 303, 354], "tan": 225, "willenbr": 225, "1626": 225, "patera": [225, 235], "marcel": 225, "dekker": 225, "fauser": 225, "jarvi": 225, "wybourn": 225, "2611": 225, "2655": 225, "orthogonal_sum": 225, "trialiti": [225, 273], "sbornik": 225, "1952": [225, 303], "try_default_rul": 225, "cue": 225, "e_r": [225, 285, 300, 301, 303, 305], "preprogram": 225, "a_8": 225, "a3xa3xa1": 225, "d7": 225, "a1xa1": [225, 227, 231], "hwv": [225, 244, 273], "a1xb1": 225, "exot": 225, "isotropi": 225, "involutori": 225, "d_6": 225, "d_8": 225, "b_4": [225, 267], "a2xa2xa2": [225, 273], "a5xa1": 225, "a3xa1": 225, "a2xa2": [225, 230], "a1xc3": [225, 235], "d6xa1": 225, "a5xa2": 225, "d8": 225, "d2xd2": 225, "a1xa1xa1xa1": 225, "d_7": 225, "a2xa1": 225, "b1xb1": 225, "c2xc1": 225, "b1xc1": 225, "symmetric_pow": [225, 273], "irreducibli": 225, "thematic_tutori": [225, 273], "fw1": [225, 273], "fw2": [225, 273], "fw3": [225, 354], "g2xa1": 225, "a2xg2": [225, 273], "g2xc3": 225, "f4xa1": 225, "g2xf4": 225, "a1xa2": [225, 268], "tabul": [225, 235], "testerman": 225, "635": 225, "644": 225, "roman": 225, "her": 225, "branching_rule_from_plethysm": 225, "ingredi": 225, "fifth": 225, "frobenius_schur_ind": [225, 273], "sym5rul": 225, "pullback": 225, "accident": 225, "ve": [225, 238], "proj1": 225, "proj2": 225, "proj13": 225, "a2xa2xg2": 225, "accomplish": [225, 354], "a3xa2": 225, "g2xg2": 225, "homemad": 225, "return_matrix": 225, "adjoint_represent": [225, 273], "get_branching_rul": 225, "print_rul": 225, "a1xc2": [225, 273], "c1xc2": 225, "matrix_integer_spars": 226, "cartantype_abstract": [226, 227, 231, 253, 267, 268, 269], "is_symmetriz": 226, "cartan_type_check": 226, "row_with_indic": 226, "column_with_indic": 226, "coxeter_diagram": [226, 227, 231, 240, 261, 262, 268, 269], "indecomposable_block": 226, "principal_submatric": 226, "is_hyperbol": 226, "is_indefinit": 226, "indefinit": [226, 314], "is_lorentzian": 226, "lorentzian": 226, "reflection_group": 226, "root_spac": [226, 238, 242, 243, 244], "subtyp": [226, 227, 231], "symmetrized_matrix": 226, "find_cartan_type_from_matrix": 226, "is_borcherds_cartan_matrix": 226, "is_generalized_cartan_matrix": 226, "sphinx": 227, "complain": 227, "sl_": 227, "bc_": [227, 369], "isbn": [227, 302], "978": 227, "3540426509": 227, "scratch": 227, "fairli": 227, "strive": 227, "rough": 227, "oop": 227, "cached_method": 227, "set_mut": 227, "delattr": 227, "a2xb2": [227, 244, 268], "is_reduc": [227, 230], "affinis": 227, "nonreduc": 227, "bc4": [227, 249], "bc1": [227, 249], "b5": 227, "bc5": 227, "a9": 227, "a10": 227, "differenti": [227, 247, 354, 362], "aoo": 227, "cartantype_crystallograph": [227, 248, 251, 257, 259, 265, 268], "cartantype_simply_lac": [227, 245, 253, 254, 255, 256], "cartantype_simpl": [227, 245, 247, 248, 251, 255, 257, 259, 261, 262], "cartantype_finit": [227, 265, 267, 268, 269], "cartantype_affin": [227, 236, 265, 267, 269], "cartantype_standard": [227, 247], "cartantype_standard_finit": [227, 245, 248, 251, 253, 255, 257, 259, 261, 262, 263], "cartantype_standard_affin": [227, 249], "cartantype_standard_untwisted_affin": [227, 246, 250, 252, 254, 256, 258, 260], "dual_latex": 227, "latex_mark": 227, "latex_relabel": 227, "mark_special_nod": 227, "marked_node_str": 227, "special_node_str": 227, "folding_of": [227, 266], "ccl": [227, 266], "type_fold": [227, 266], "cartantypefold": [227, 266], "coxeter_typ": [227, 229, 230], "is_compound": 227, "is_impl": 227, "a2xb3": [227, 231], "marked_nod": [227, 267], "bc3": [227, 231, 249, 267, 269], "vee_0": [227, 234, 242, 264], "col_annihil": [227, 264, 272], "acheck": 227, "alpha_0": [227, 234, 235, 236, 239, 242, 264, 271, 272], "alpha_n": [227, 234, 303, 346], "row_annihil": 227, "basic_untwist": [227, 249, 265, 267, 269], "vee_i": [227, 236, 238, 239, 242], "fss07": 227, "fourier": [227, 235, 343], "386": [227, 315], "0605451": 227, "special_nod": [227, 232, 233, 249, 265, 267, 269], "delete_vertex": 227, "is_untwisted_affin": [227, 246, 247, 250, 252, 254, 256, 258, 260, 267, 269], "other_affin": [227, 236], "translation_factor": [227, 271], "t_i": [227, 234, 236, 241, 273, 287, 302, 343], "coweight": [227, 232, 233, 236, 242, 244, 251, 264, 265, 271, 272], "alphacheck": [227, 234, 236, 238, 241, 242, 243, 244, 272], "coroot_spac": [227, 242, 244], "omega_2": 227, "omega1": [227, 271], "omega2": [227, 271], "hst09": 227, "jct": 227, "844": 227, "863": 227, "0804": [227, 305], "3781": 227, "index_set_bipartit": 227, "neat": 227, "norm": [227, 238, 242, 284, 303, 344], "cartantype_decor": [227, 265, 267, 269], "cartantype_simple_finit": 227, "coxeter_numb": [227, 235, 239, 245, 248, 251, 253, 255, 257, 259, 261, 262], "dual_coxeter_numb": [227, 235, 245, 248, 251, 253, 255, 257, 259], "type_i": [227, 247, 262], "opposition_automorph": 227, "supercartantype_standard": [227, 270], "coercibl": 228, "coxetermatrixgroup": 228, "236067977499790": 228, "gap3": [228, 239, 240, 340], "chevi": [228, 239, 240], "coxetertyp": [229, 230], "bilinear_form": [229, 230], "coxeter_graph": [229, 230], "higher_rank": 229, "check_coxeter_matrix": 229, "coxeter_matrix_as_funct": 229, "recognize_coxeter_type_from_matrix": 229, "coxetertypefromcartantyp": 230, "component_typ": [230, 268], "a4xb3": 230, "b3xb3": 230, "a_ij": 231, "a2xb2xf4": [231, 268], "ci": [231, 323], "cii": 231, "dii": 231, "dynkindiagram_class": 231, "odd_isotropic_root": 231, "an_inst": 231, "isotrop": 231, "dp": 231, "precheck": 231, "n_ge": 231, "orr": [232, 236], "extended_affine_weyl_group": 232, "extendedaffineweylgroup": 232, "general_linear": [232, 233], "mnemon": 232, "pv": 232, "pw0": 232, "w0p": 232, "wf": [232, 359], "pvw0": 232, "w0pv": 232, "semidirect": [232, 271], "print_tupl": 232, "tit": 232, "adic": [232, 369], "1966": [232, 369], "symp": 232, "bour": 232, "subsystem": [232, 242], "bc_n": 232, "rtime": 232, "ltime": 232, "from_endomorph": 232, "extendedaffineweylgroup_class_with_categori": 232, "fundamental_group": [232, 233], "lattice_basi": 232, "lv": 232, "dual_lattic": 232, "bv": [232, 359], "dual_lattice_basi": 232, "classical_weyl": 232, "affine_weyl": 232, "w0v": 232, "dual_classical_weyl": 232, "sx": 232, "pix": 232, "sx2": 232, "sx1": 232, "group_exp": 232, "groupexp": 232, "sl_n": [232, 233, 242, 264, 265], "w_e": 232, "from_fundament": 232, "extendedaffineweylgroup_class": 232, "extendedaffineweylgroupfw": 232, "groupsemidirectproduct": 232, "extendedaffineweylgroupfwel": 232, "from_affine_weyl": 232, "groupsemidirectproductel": 232, "action_on_affine_root": 232, "to_affine_weyl_right": 232, "from_transl": 232, "to_fundamental_group": 232, "extendedaffineweylgrouppw0": 232, "extendedaffineweylgrouppw0el": 232, "from_classical_weyl": 232, "to_classical_weyl": 232, "to_translation_left": 232, "extendedaffineweylgrouppvw0": 232, "extendedaffineweylgrouppvw0el": 232, "from_dual_classical_weyl": 232, "from_dual_transl": 232, "dual_act": 232, "to_dual_classical_weyl": 232, "to_dual_translation_left": 232, "extendedaffineweylgroupw0p": 232, "extendedaffineweylgroupw0pel": 232, "to_translation_right": 232, "extendedaffineweylgroupw0pv": 232, "extendedaffineweylgroupw0pvel": 232, "to_dual_translation_right": 232, "extendedaffineweylgroupwf": 232, "extendedaffineweylgroupwfel": 232, "r0": 232, "bruhat_l": 232, "vv": [232, 359, 360], "ww": 232, "to_affine_weyl_left": 232, "pw0_to_wf_func": 232, "alcove_walk_sign": 232, "nonextend": 232, "apply_simple_project": 232, "length_increas": 232, "vx": 232, "wx": 232, "coset_repres": 232, "face_data": 232, "first_desc": [232, 234, 242], "is_affine_grassmannian": 232, "is_grassmannian": 232, "is_transl": 232, "to_affine_grassmannian": 232, "wf_to_pw0_func": 232, "classical_weyl_to_affin": 232, "dual_classical_weyl_to_affin": 232, "exp_dual_lattic": 232, "exp_lattic": 232, "fundamentalgroupel": 233, "fundamentalgroupofextendedaffineweylgroup": 233, "act_on_affine_lattic": 233, "act_on_affine_weyl": 233, "fundamentalgroupgl": 233, "fundamentalgroupofextendedaffineweylgroup_class": 233, "privileg": 233, "fundamentalgroupglel": 233, "dual_nod": 233, "fam": 233, "act_on_classical_ambi": 233, "omega_0": 233, "cominuscul": 233, "minuscul": [233, 234, 236], "hecke_algebra_represent": [234, 236], "cherednikoperatorseigenvector": [234, 236], "t_y": 234, "cherednik": [234, 236, 241, 273], "kw": [234, 236], "demazure_lusztig_eigenvector": 234, "affine_lift": [234, 236], "affine_retract": [234, 236], "nonsymmetricmacdonaldpolynomi": [234, 236, 241, 297], "tent": 234, "y_index_set": 234, "e_w": 234, "hst2008": 234, "pcheck": 234, "wcheck": 234, "p0check": 234, "hecke_paramet": 234, "demazure_lusztig_oper": [234, 236, 241], "y_eigenvector": [234, 236], "123121": 234, "heckealgebrarepresent": [234, 236], "on_basi": [234, 241], "withequalitybyid": 234, "t_w": [234, 343], "tw": [234, 236, 241], "ti_inverse_on_basi": 234, "ti_on_basi": 234, "straighten_word": 234, "epsilon_1": [234, 257, 312], "epsilon_k": 234, "epsilon_i": [234, 312], "2312": 234, "tw_invers": [234, 236, 241], "12312": [234, 359], "12321": [234, 359], "1232": [234, 361], "y_lambdacheck": [234, 236], "integrable_represent": 235, "integrablerepresent": 235, "categoryobject": 235, "kmp": 235, "kass": 235, "slanski": 235, "1990": [235, 315], "kacpeterson": 235, "peterson": 235, "carter": 235, "supp": 235, "paraboloid": 235, "nullroot": 235, "print_str": 235, "665": 235, "2380": 235, "7658": 235, "22721": 235, "63120": 235, "166085": 235, "417295": 235, "1007601": 235, "2349655": 235, "1593": 235, "5274": 235, "16005": 235, "45324": 235, "121200": 235, "308829": 235, "754884": 235, "1779570": 235, "1056": 235, "3601": 235, "11199": 235, "32354": 235, "88009": 235, "227555": 235, "563390": 235, "1343178": 235, "107": [235, 304, 315], "1638": 235, "5367": 235, "16194": 235, "45687": 235, "121876": 235, "310056": 235, "757056": 235, "1783324": 235, "1165": 235, "4097": 235, "13120": 235, "38997": 235, "109036": 235, "289575": 235, "735870": 235, "1799620": 235, "590": 235, "2205": [235, 310], "7391": 235, "22780": 235, "65613": 235, "178660": 235, "463842": 235, "1155717": 235, "2777795": 235, "to_weight": 235, "from_weight": 235, "null_root": [235, 236, 241, 242, 264, 272], "354": [235, 302], "561": 235, "889": 235, "1368": 235, "2097": 235, "3153": 235, "4712": 235, "6936": 235, "10151": 235, "14677": 235, "501": 235, "788": [235, 315], "1880": [235, 306], "2850": 235, "4256": 235, "6303": 235, "9222": 235, "13396": 235, "19262": 235, "878": [235, 315], "2082": 235, "4690": 235, "10121": 235, "21055": 235, "194": [235, 314], "477": 235, "1084": 235, "2387": 235, "5010": 235, "10227": 235, "20198": 235, "872": [235, 236], "1941": 235, "4141": 235, "8523": 235, "17005": 235, "33019": 235, "721": 235, "3469": 235, "7176": 235, "14414": 235, "28124": 235, "467": 235, "2367": 235, "10191": 235, "38907": 235, "944": 235, "2460": 235, "6064": 235, "14300": 235, "31968": 235, "69020": 235, "144676": 235, "293916": 235, "588": 235, "1568": [235, 350], "3952": 235, "9520": 235, "21644": 235, "47456": 235, "100906": 235, "207536": 235, "800": 235, "2124": 235, "5288": 235, "12470": 235, "28116": 235, "61056": 235, "128304": 235, "261972": 235, "deltacheck": [235, 236, 241, 264], "2576": 235, "6244": 235, "14498": 235, "32480": 235, "69776": 235, "145528": 235, "832": 235, "2184": 235, "5388": 235, "12634": 235, "28390": 235, "61488": 235, "128976": 235, "492": 235, "1344": 235, "3428": 235, "8256": 235, "18960": 235, "41844": 235, "89208": 235, "184512": 235, "1584": 235, "4032": 235, "9552": 235, "21728": 235, "47776": 235, "101068": 235, "207888": 235, "2508": 235, "13707": 235, "64650": 235, "272211": 235, "1045470": 235, "3721815": 235, "12425064": 235, "39254163": 235, "118191378": 235, "234": [235, 237, 359, 362], "1690": 235, "9689": 235, "47313": 235, "204247": 235, "800029": 235, "2893198": 235, "9786257": 235, "31262198": 235, "95035357": 235, "1160": 235, "6920": 235, "34756": 235, "153523": 235, "612354": 235, "2248318": 235, "7702198": 235, "24875351": 235, "76341630": 235, "4779": 235, "25060": 235, "113971": 235, "464842": 235, "1736620": 235, "6034717": 235, "19723537": 235, "61152367": 235, "181068152": 235, "499": 235, "3349": 235, "18166": 235, "84836": 235, "353092": 235, "1341250": 235, "4725259": 235, "15625727": 235, "48938396": 235, "146190544": 235, "9186": 235, "45804": 235, "200073": 235, "789201": 235, "2866560": 235, "9723582": 235, "31120281": 235, "94724550": 235, "275919741": 235, "weyl_character_r": [235, 273], "a1xa1xa1": 235, "174": [235, 362], "a029552": 235, "dominant_maximal_weight": 235, "highest_weight": [235, 271, 273], "modular_characterist": 235, "722": 235, "1431": 235, "2741": 235, "3740": 235, "5096": 235, "6868": 235, "9233": 235, "12306": 235, "287": 235, "858": 235, "1206": 235, "1687": 235, "3206": 235, "4368": 235, "5922": 235, "7967": 235, "10670": 235, "14193": 235, "18803": 235, "_index_set": 235, "max_weight": 235, "1045": 235, "3736": 235, "6780": 235, "365": 235, "740": 235, "1445": 235, "2736": 235, "root_lattice_realization_algebra": [236, 241], "semest": 236, "bogdan": [236, 241], "ion": [236, 241], "arun": 236, "ram": [236, 271, 310], "siddhartha": 236, "sahi": 236, "patient": [236, 369], "non_symmetric_macdonald_polynomi": 236, "koornwind": 236, "hhl06": 236, "sf": [236, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305], "ns_macdonald": [236, 297], "kl0": [236, 241], "interpol": [236, 241], "root_lattice_r": [236, 238, 242, 245, 259], "rootlatticer": [236, 238, 242, 243, 244, 245, 259, 271], "_test_rel": [236, 241], "lcheck": 236, "coweight_lattic": [236, 242, 244, 271], "reduced_word_of_transl": [236, 238, 271], "signs_of_alcovewalk": [236, 271], "weightlatticer": [236, 242, 244, 264, 271, 272], "embed_at_level": [236, 241, 271], "q_project": [236, 241], "demazure_lusztig_operators_on_class": [236, 241], "compens": [236, 272, 354], "t0_check_on_basi": [236, 241], "twisted_demazure_lusztig_oper": [236, 241], "l_prime": 236, "coambient": [236, 244], "haimanicm": 236, "congress": [236, 302], "mathematician": 236, "madrid": 236, "lnsss12": 236, "lenart": 236, "naito": 236, "sagaki": 236, "2042": 236, "augment": [236, 354], "eig": [236, 362], "ee": 236, "weyl_act": [236, 242], "map_coeffici": [236, 302], "weight0": 236, "_t_y": 236, "ye1": 236, "ye2": 236, "yalpha0": 236, "yalpha1": 236, "yalpha2": 236, "e10": 236, "t0check": 236, "t0check_on_basi": 236, "e11": 236, "e1m1": 236, "to_sr": 236, "x_expand": 236, "null_coroot": [236, 242, 264, 271], "eomega1": 236, "tinv0": 236, "tinv1": 236, "tinv2": 236, "l_check": 236, "q_to_qcheck": 236, "reindex": 236, "eigenvalue_experiment": 236, "haiman06": [236, 241], "rho_prim": 236, "checkm": 236, "symmetric_macdonald_polynomi": 236, "nonintegr": 236, "om": 236, "pieri_factor": 237, "pierifactor": [237, 245, 246, 248, 250, 252, 254], "stanley_symmetric_funct": [237, 290], "waff": 237, "pfaff": 237, "generating_seri": [237, 318, 319, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336], "fosta1994": 237, "bh1994": 237, "lam1996": 237, "lam2008": 237, "lss2009": 237, "pon2010": 237, "default_weight": 237, "recursivelyenumeratedset_gener": 237, "pierifactors_affine_typ": 237, "maximal_elements_combinatori": 237, "_test_maximal_el": 237, "pierifactors_finite_typ": 237, "pierifactors_type_a": [237, 245], "stanley_symm_poly_weight": 237, "pierifactors_type_a_affin": [237, 246], "min_support": 237, "max_support": 237, "pierifactors_type_b": [237, 248], "pierifactors_type_b_affin": [237, 250], "3210": [237, 369], "023": 237, "pretend": 237, "pierifactors_type_c_affin": [237, 252], "pierifactors_type_d_affin": [237, 254], "2102": 237, "intimid": 238, "gadget": 238, "guid": 238, "subroutin": 238, "barycentr": [238, 242, 245, 259], "delimit": [238, 368], "crowd": 238, "556793440452": 238, "19694925177": 238, "0805477263944": 238, "385290876171": 238, "180913155536": 238, "160212955043": 238, "0990170516545": 238, "766360424875": 238, "338261212718": 238, "672816364803": 238, "171502564281": 238, "rational": 238, "cdd": [238, 240], "alcove_label": [238, 242], "4d": 238, "kill": [238, 239, 240, 242, 264], "bore": [238, 241, 242], "aspect_ratio": [238, 350], "vs_i": 238, "food": 238, "pred": [238, 242], "first_positive_root": 238, "sandwich": 238, "polish": 238, "positive_coroot": 238, "first_positive_coroot": 238, "fundamental_chamb": [238, 242], "simplex": [238, 340], "quicker": 238, "affine_grassmannian_elements_of_given_length": 238, "plot_fundamental_chamb": [238, 242], "plot_alcov": [238, 242], "plot_fundamental_weight": [238, 242], "wallpap": 238, "alcove_walk": [238, 242], "535": 238, "plot_root": [238, 242], "plot_reflection_hyperplan": [238, 242], "pollut": 238, "annoyingli": 238, "workaround": [238, 296], "plot_parse_opt": [238, 242], "plot_opt": 238, "plot_alcove_walk": [238, 242], "family_of_vector": 238, "w3": [238, 359], "hint": [238, 354], "ever": [238, 356], "scrap": 238, "behold": 238, "bitmap": 238, "postscript": 238, "svg": 238, "c21paper": 238, "ridicul": 238, "12553": 238, "handi": 238, "cayley_graph": [238, 274], "vertex_s": [238, 274], "pos3d": 238, "e8_3d": 238, "superpos": 238, "laid": 238, "firmli": 238, "enjoi": 238, "plotopt": [238, 242], "arrows": [238, 363], "index_of_object": 238, "draw_degener": 238, "as_polyhedron": 238, "legend_color": 238, "legend_label": 238, "rgbcolor": [238, 363], "zorder": 238, "emit": 238, "86602451838": 238, "525": 238, "909325744308": 238, "aspect": 238, "ratio": [238, 369], "obsolet": 238, "won": [238, 264, 272, 274], "lost": 238, "plot_coroot": [238, 242], "graphics3dgroup": 238, "in_bounding_box": 238, "bottleneck": 238, "intersection_at_level_1": 238, "989": [238, 245, 259], "widget": 238, "coucou": 238, "x3d_str": 238, "materi": 238, "diffusecolor": 238, "shini": 238, "specularcolor": 238, "barycentric_projection_matrix": 238, "retriev": [238, 242, 313, 365], "reflectiongroup": [239, 240, 340], "shephard": 239, "st4": [239, 240], "st31": 239, "download": [239, 240], "websit": [239, 240, 303], "drawback": 239, "hardli": 239, "reduced_word_in_reflect": 239, "is_shephard_group": 239, "is_generalized_coxeter_group": 239, "coexpon": 239, "torsten": 239, "hoge": 239, "distinguished_reflect": [239, 274], "matroid": 239, "invariant_form": 239, "reflection_group_r": [239, 240], "reflection_to_root": 239, "distinguished_reflection_to_positive_root": 239, "bmr": 239, "genericord": 239, "torusord": 239, "g_34": 239, "sagedir": 239, "jm5": 239, "tbl": 239, "discrimin": 239, "transfer": 239, "gap4": 239, "reflection_group_complex": 239, "w_type": [239, 240], "hyperplane_index_set": [239, 240], "permutationgroup_gener": [239, 274], "complexreflectiongroupel": 239, "reflection_length": 239, "in_unitary_group": 239, "unitari": 239, "apply_vector_field": 239, "vf": 239, "primitive_vector_field": 239, "braid_rel": 239, "is_integ": 239, "prod_h": 239, "alpha_h": 239, "e_h": 239, "discriminant_in_invariant_r": 239, "1658": 239, "213700": 239, "427400": 239, "22233750": 239, "44467500": 239, "438750": 239, "877500": 239, "1162187500": 239, "2324375000": 239, "74250000": 239, "148500000": 239, "28369140625": 239, "56738281250": 239, "1371093750": 239, "2742187500": 239, "1191796875": 239, "2383593750": 239, "175781250000": 239, "351562500000": 239, "131835937500": 239, "263671875000": 239, "100195312500": 239, "200390625000": 239, "395507812500": 239, "791015625000": 239, "fake_degre": 239, "hilbert": 239, "irredubile_charact": 239, "14400": 239, "fdeg": 239, "fundamental_invari": 239, "asdf": 239, "independent_root": [239, 274], "brute_forc": 239, "reynold": 239, "st7": 239, "invariant_form_standard": 239, "hermitian": 239, "iteration_tracking_word": 239, "jacobian_of_fundamental_invari": 239, "number_of_irreducible_compon": 239, "jacobian": 239, "reflection_charact": 239, "reflection_eigenvalu": 239, "is_class_repres": 239, "reflection_eigenvalues_famili": 239, "zeta_n": 239, "as_linear_funct": 239, "with_ord": 239, "complx": 239, "set_reflection_represent": 239, "refl_repr": 239, "irreduciblecomplexreflectiongroup": [239, 240], "is_coxeter_el": 239, "which_primit": 239, "is_h_regular": 239, "25478": 239, "multi_partit": 239, "irreduciblerealreflectiongroup": 240, "realreflectiongroup": 240, "realreflectiongroupel": [240, 274], "left_coset_repres": 240, "right_coset_repres": 240, "lcr": 240, "rcr": 240, "bipartite_index_set": 240, "bruhat_con": 240, "dy1994": 240, "js2021": 240, "a3xb3": 240, "tracking_word": [240, 274], "_reduced_word": [240, 274], "reflection_to_positive_root": 240, "root_to_reflect": 240, "simple_root_index": [240, 274], "shepard": 240, "is_chevie_avail": 240, "algebrascategori": 241, "acted_upon": 241, "investig": [241, 303, 354], "sum_of_monomi": [241, 273, 302, 303], "antidomin": [241, 242], "icm": [241, 302], "nonsens": 241, "some_weight": 241, "demazure_lusztig_operator_on_basi": 241, "demazure_lusztig_operator_on_classical_on_basi": 241, "isobaric_divided_difference_on_basi": 241, "lusztig1985": 241, "1985": [241, 273], "cherednik1995": 241, "imrn": [241, 273], "483": [241, 273, 306], "tbar": 241, "tdomin": 241, "tinv": 241, "is_extend": [241, 264, 271, 272], "ydelta": 241, "demazure_oper": 241, "lascoux2003": 241, "kumar1987": 241, "395": 241, "pi0": 241, "divided_difference_on_basi": 241, "cbm": 241, "q_project_on_basi": 241, "twisted_demazure_lusztig_operator_on_basi": 241, "q_1q_2": 241, "tester": 241, "asserttru": 241, "t0c": 241, "rootspac": [242, 243, 244], "alpha_6": 242, "affine_orbit": 242, "dot_orbit": 242, "associated_reflect": 242, "c3_rl": 242, "dot_act": 242, "affine_act": 242, "extraspecial_pair": 242, "extraspeci": 242, "positive_roots_by_height": 242, "highest_root": [242, 243, 245, 270, 273], "is_dominant_weight": [242, 270], "is_imaginary_root": 242, "is_long_root": 242, "is_parabolic_root": 242, "is_real_root": 242, "is_short_root": 242, "norm_squar": 242, "qc": 242, "alphac": 242, "eltc": 242, "use_coroot": 242, "alphave": [242, 243], "symmetric_form": [242, 271], "b4_r": 242, "to_class": 242, "alb": 242, "to_dominant_chamb": 242, "wl": 242, "to_dual_type_cospac": 242, "cospac": 242, "to_simple_root": 242, "caught": 242, "seemingli": [242, 362], "unnatur": 242, "mudom": 242, "weyl_stabil": 242, "a_long_simple_root": 242, "nodes_by_length": 242, "almost_positive_root_decomposit": 242, "tau_plus_minu": 242, "almost_positive_roots_decomposit": 242, "basic_imaginary_root": 242, "cohighest_root": 242, "dual_type_cospac": 242, "fundamental_weights_from_simple_root": 242, "catch": [242, 265], "generalized_nonnesting_partition_lattic": 242, "nonnest": [242, 278], "athanasiadi": 242, "arm06": 242, "nonnesting_partition_lattic": 242, "long_root": 242, "negative_root": [242, 245, 248, 251, 253, 255, 257, 259, 268, 270], "postnikov": 242, "reiner97": 242, "root_poset": [242, 244], "victor": [242, 276], "drew": 242, "armstrong": 242, "0611106": 242, "nonparabolic_positive_root_sum": 242, "nonparabolic_positive_root": 242, "plot_ls_path": 242, "plot_cryst": 242, "375": [242, 367], "pic": 242, "plot_bounding_box": 242, "plot_label": 242, "label_color": 242, "circle_thick": 242, "plot_hedron": 242, "colored_label": 242, "positive_imaginary_root": 242, "pir": 242, "positive_real_root": 242, "prr": 242, "positive_roots_nonparabol": 242, "positive_roots_nonparabolic_sum": 242, "positive_roots_parabol": 242, "to_neg": 242, "short_root": 242, "simple_project": 242, "simple_roots_tild": 242, "tau_epsilon_operator_on_almost_positive_root": 242, "eq": 242, "taup": 242, "taum": 242, "b2r": 242, "bigoplus_i": [243, 244, 272], "rootspaceel": 243, "to_coroot_space_morph": 243, "max_coroot_l": 243, "max_quantum_el": 243, "qvee": 243, "quantum_root": 243, "is_quantum_root": 243, "as_dual_of": 244, "abstractli": [244, 346], "game": [244, 337, 350, 354], "fire": 244, "failur": [244, 265, 359, 368], "_test_root_lattice_r": 244, "coambient_spac": 244, "coweight_spac": [244, 272], "weyldim": 244, "1274": 244, "650": 244, "_plot_project": [245, 259], "1189": [245, 259, 315], "type_a_affin": 246, "type_a_infin": 247, "type_bc_affin": 249, "bc2": 249, "type_b_affin": 250, "type_c_affin": 252, "type_d_affin": 254, "baser": 255, "planch": [255, 257], "i4": 255, "i5": [255, 262], "i6": 255, "i7": 255, "i8": 255, "p6": 255, "p8": 255, "caller": 255, "le6": 255, "type_e_affin": 256, "viii": 257, "epsilon_2": 257, "epsilon_3": 257, "epsilon_4": 257, "sadli": 257, "alpha_3": 257, "alpha_4": 257, "type_f_affin": 258, "type_g_affin": 260, "type_h": 261, "type_q": 263, "q_n": 263, "colevel": 264, "altogeth": 264, "canonical_inner_product": 264, "a31wl": 264, "b31wl": 264, "straightforwardli": 264, "b31v": 264, "pickl": [265, 302, 366], "_test_el": 265, "_test_pickl": [265, 347], "worri": [265, 271, 354], "cartantypedu": 265, "f4d": 265, "g21d": 265, "hack": [265, 302, 303], "gamma_i": 266, "osshimo03": 266, "bond": 266, "folding_orbit": 266, "2095": 266, "5067": 266, "type_mark": 267, "honour": 267, "type_reduc": 268, "inject_weight": 268, "a1xb2": 268, "_add_abstract_superclass": 268, "cartantype_with_superclass": 268, "sage_object": 268, "a4xbc5": 268, "xc3": 268, "f4xa2": 268, "a1xh3": 268, "a2xc2": 268, "ct1": [268, 274], "ct2": 268, "type_relabel": 269, "a41": 269, "reus": [269, 350], "13724": 269, "inadvert": 269, "type_super_a": 270, "negative_even_root": 270, "negative_odd_root": 270, "positive_even_root": 270, "alq": 271, "to_weight_spac": [271, 272], "dynkin_diagram_automorphism_of_alcove_morph": 271, "reduced_word_of_alcove_morph": 271, "faithfulli": 271, "bring": 271, "nota": 271, "bene": 271, "_test_reduced_word_of_transl": 271, "rho_class": 271, "y_0": 271, "y_k": 271, "rho_0": 271, "vee_": 271, "0601343v1": 271, "job": [271, 272], "parent_class": 271, "harmless": 271, "artefact": 271, "weyl_dimens": 271, "glitch": 272, "basis_extens": 272, "weightspaceel": 272, "with_apply_multi_module_morph": 272, "weightspacer": 272, "weightr": 273, "conduct": 273, "wd": 273, "weyl_group_act": 273, "demazure_lusztig": 273, "wt_repr": 273, "cyclotomic_ord": 273, "fusion_label": 273, "complexifi": 273, "analyt": [273, 354], "parametr": [273, 275], "lectur": 273, "broecker": 273, "dieck": 273, "goodman": 273, "wallach": 273, "humphrei": 273, "procesi": 273, "samelson": 273, "varadarajan": 273, "zhelobenko": 273, "su": 273, "ubiquit": 273, "adams_oper": [273, 300], "contragredi": 273, "exterior_pow": 273, "exterior_squar": 273, "quaternion": 273, "haar": 273, "orthonorm": [273, 302], "invariant_degre": 273, "h_k": [273, 284, 285, 288, 300, 301, 303], "symmetric_squar": 273, "weight_multipl": 273, "affine_reflect": 273, "b22": 273, "fusionr": 273, "char_from_weight": 273, "mdict": 273, "_space": 273, "dot_reduc": 273, "extended_dynkin_diagram": 273, "irr_repr": 273, "lift_on_basi": 273, "irr": [273, 310], "a1xa5": 273, "nonmaxim": 273, "believ": 273, "spin_plu": 273, "spin_minu": 273, "klimyk": 273, "irreducible_character_freudenth": 273, "freudenth": 273, "volker": 274, "braun": 274, "show3d": [274, 350], "edge_s": 274, "classicalweylsubgroup": 274, "weylgroup_gen": 274, "subrootsystem": 274, "1152": 274, "weylgroupel": 274, "matrixgroupelement_gap": 274, "beuargl": 274, "to_permutation_str": 274, "finitelygeneratedmatrixgroup_gap": 274, "character_t": [274, 302], "prefac": 274, "sizescreen": 274, "widen": 274, "screen": 274, "1a": 274, "4a": 274, "3a": [274, 315], "from_morph": 274, "long_element_hardcod": 274, "morphism_matrix": 274, "20027": 274, "refdict": 274, "weylgroup_permut": 274, "number_of_reflect": 274, "rooted_tre": 275, "xyy2": 275, "yxy2": 275, "yxy2crud": 275, "manag": 275, "rootedorderedtre": 275, "lb": 275, "labelledrootedtrees_al": 275, "32001010": 275, "graft_list": 275, "graft_on_root": 275, "rt1": 275, "rt2": 275, "_get_list": 275, "single_graft": 275, "grafting_funct": 275, "path_prefix": 275, "pitfal": 275, "rootedtrees_al": 275, "labelledrootedtrees_all_with_categori": 275, "rootedtrees_s": 275, "rt3": 275, "number_of_rooted_tre": 275, "sl000081": 275, "286": [275, 315], "a000081": 275, "chaman": [276, 307, 341], "agraw": [276, 307, 341], "rulestar": 276, "ruleeg": 276, "eg1987": 276, "ruleheck": 276, "bksty06": 276, "ruledualrsk": 276, "corsk": 276, "rulecorsk": 276, "gr2018v5sol": 276, "rulesuperrsk": 276, "muth2019": [276, 341], "reverse_insert": 276, "knu1970": 276, "donald": [276, 315], "727": 276, "projecteuclid": 276, "euclid": 276, "pjm": 276, "1102971948": 276, "90063": 276, "yong": 276, "0601514v1": 276, "1409": 276, "8356v5": 276, "anc": 276, "hopfcomb": 276, "v73": 276, "insertionrul": 276, "dualrsk": 276, "superrsk": 276, "obj1": 276, "obj2": 276, "q_0": [276, 295], "j_t": 276, "q_t": 276, "_rsk_iter": 276, "cobiword": 276, "typecast": 276, "14532": 276, "1322": [276, 361, 366], "_backward_format_output": 276, "_forward_format_output": 276, "to_pair": 276, "interpert": 276, "ful1997": [276, 314, 346], "1d": [276, 362], "1522": 276, "rook": [276, 278], "1212": [276, 310, 311, 359], "qr": 276, "0801": 276, "1319v2": 276, "bisect": [276, 315], "bisect_right": 276, "bisect_left": 276, "line1": 276, "line2": 276, "check_braid": 276, "pariti": [276, 341, 359], "3p": [276, 307], "2p": [276, 307, 341], "1p": [276, 307, 341], "semistandardsupertableau": [276, 341], "reversel": 276, "4p": 276, "y_po": 276, "superbiword": 276, "robinson_schensted_knuth": 276, "robinson_schensted_knuth_invers": 276, "54321": [277, 315], "sw0": 277, "ws_i": 277, "partial_2": 277, "schubertpolynomialring_xbasi": 277, "schubertpolynomial_class": 277, "symmetrica": [277, 286, 302, 303, 346], "delta_i": 277, "multiply_vari": 277, "scalar_product": [277, 344], "cal2005": 278, "max_block_s": 278, "standard_form": 278, "supremum": [278, 359], "__mul__": 278, "14140": [278, 280], "apply_permut": 278, "increasingarrai": 278, "crossings_iter": 278, "is_nonnest": 278, "1cm": 278, "show_label": 278, "nestings_iter": 278, "number_of_nest": 278, "s_q": 278, "c_c": 278, "base_set_dict": 278, "radii": [278, 311], "41421356237": 278, "sector": [278, 342], "785398163397": 278, "35619449019": 278, "70710678118": 278, "1213203435": 278, "3334523779": 278, "4142135623": 278, "strict_coarsen": 278, "reflex": [278, 338, 359], "maximis": 278, "to_restricted_growth_word": 278, "to_restricted_growth_word_block": 278, "to_restricted_growth_word_intertwin": 278, "from_restricted_growth_word": 278, "to_rook_plac": 278, "to_rook_placement_gamma": 278, "to_rook_placement_rho": 278, "to_rook_placement_psi": 278, "from_rook_plac": 278, "ww1991": 278, "from_rook_placement_gamma": 278, "yip": 278, "from_rook_placement_psi": 278, "yip2018": 278, "rs_j": 278, "from_rook_placement_rho": 278, "honor": [278, 293], "templ": 278, "aabcd": 278, "partition_of_a_set": 278, "from_arc": 278, "from_restricted_growth_word_intertwin": 278, "from_restricted_growth_word_block": 278, "is_strict_refin": 278, "setpartitions_al": 278, "f3b": 278, "setpartitions_setn": 278, "number_of_block": 278, "141999": 278, "setpartitions_setpart": 278, "600600": 278, "cyclic_permutations_of_set_partit": 278, "set_part": 278, "cyclic_permutations_of_set_partition_iter": 278, "set_partition_iter": 279, "set_partition_iterator_block": 279, "set_partition_ord": 280, "fubini": 280, "sum_n": 280, "a000670": [280, 315], "bdab": 280, "ordered_partition_of_a_set": 280, "bottom_up_osp": 280, "buo": 280, "b_l": 280, "wilson2016": 280, "strongly_fatt": 280, "strongly_fin": 280, "osp": 280, "to_packed_word": 280, "to_ordered_set_partit": [280, 359], "321313": 280, "12121": [280, 356, 359], "from_finite_word": 280, "abcabcabd": 280, "orderedsetpartitions_al": 280, "orderedsetpartitions_": 280, "orderedsetpartitions_scomp": 280, "orderedsetpartitions_sn": 280, "splitnk": 280, "multiset_permutation_next_lex": 280, "multiset_permutation_to_ordered_set_partit": 280, "oz2015": [282, 302], "orellana": [282, 303], "1510": 282, "00438": 282, "generic_charact": 282, "basis_nam": [282, 283, 284, 295, 299, 302, 303], "symmetricfunctionalgebra_gener": [282, 283, 286, 289, 292, 293, 298, 299, 302, 303, 304], "induced_trivial_character_basi": 282, "pfix": 282, "character_to_frobenius_imag": [282, 302, 303], "irreducible_character_basi": 282, "symmetricfunctionalgebra_class": [283, 284, 294, 295, 301], "symmetricfunctionalgebra_generic_el": [283, 286, 289, 292, 293, 299, 302, 303], "init": 283, "conversion_funct": 283, "t_schur_powsym_symmetrica": 283, "15312": 283, "hidem": 283, "symmetricfunctionalgebra_du": 284, "scalar_nam": [284, 303], "zee": [284, 286, 296, 299, 300, 301, 303, 342], "sfa": [284, 286, 299, 302, 303], "stripe": 284, "zee_hl": 284, "hh": [284, 352], "scalar_hl": [284, 286, 303], "transition_matrix": [284, 286, 287, 293, 296, 303], "symmetricfunctionalgebra_elementari": 285, "symmetricfunctionalgebra_multipl": [285, 287, 288, 295, 300, 305], "exponential_speci": [285, 288, 294, 300, 301, 303], "ex_q": [285, 288, 294, 300, 301, 303], "ps_q": [285, 288, 294, 300, 301, 303], "principal_speci": [285, 288, 294, 300, 301, 303], "ps_": [285, 288, 294, 300, 301, 303], "converg": [285, 288, 294, 300, 301, 303, 315, 354], "h_r": [285, 288, 293, 300, 301, 303, 305], "p_r": [285, 300, 301, 303, 305], "german": [285, 300, 301, 303, 305], "clumsier": [285, 300, 301, 303, 305], "stabli": [285, 300, 301, 303, 305], "halllittlewood": 286, "hl": 286, "hlp": [286, 290, 293, 302], "hlq": [286, 302], "hlqp": [286, 302, 303], "symmetric_function_r": [286, 289, 292, 293, 302, 303], "hl_creation_oper": [286, 296, 303], "hly": 286, "hlz": 286, "qpy": 286, "qpz": 286, "qy": 286, "qz": 286, "pz": [286, 302], "hall_littlewood_famili": 286, "halllittlewood_gener": 286, "halllittlewood_p": 286, "halllittlewood_q": 286, "_test_associ": [286, 289], "_test_distribut": [286, 289], "_test_prod": [286, 289], "halllittlewood_qp": 286, "_to_": 286, "_test_passoci": 286, "12969": 286, "heckecharact": 287, "mu_2": [287, 303, 313], "qbar": [287, 302], "hecke_charact": [287, 302], "ram1991": 287, "rr1997": 287, "symmetricfunctionalgebra_homogen": 288, "ma1995": 289, "jack1970": 289, "edinburgh": 289, "clarendon": [289, 302], "york": [289, 302, 363], "public": [289, 302], "jp": [289, 302], "jackj": [289, 302], "jackp": [289, 303], "jacka": 289, "jackb": 289, "jpa": 289, "jpb": 289, "jq": [289, 302, 303], "jackq": 289, "jqp": [289, 302], "_normal": 289, "jackpolynomials_gener": 289, "scalar_jack": [289, 303], "coproduct_by_coercion": [289, 303], "jack_famili": 289, "jackpolynomials_j": 289, "jackpolynomials_p": 289, "triangularli": [289, 293, 299, 301], "scalar_jack_basi": 289, "part1": [289, 293], "part2": [289, 293], "mc1995": 289, "_normalize_coeffici": 289, "jackpolynomials_q": 289, "jackpolynomials_qp": 289, "jackqp": 289, "symmetricfunctionalgebra_zon": 289, "scalar_zon": 289, "normalize_coeffici": 289, "part_scalar_jack": 289, "k_dual": [290, 302], "affineschurfunct": 290, "kboundedr": [290, 296], "kboundedquotientbasi": 290, "lam2006": 290, "dualkschurfunct": 290, "llmssz": [290, 296, 302], "lapoint": [290, 293, 346], "kboundedquoti": [290, 296, 302], "affineschur": [290, 302], "hlpk": 290, "khalllittlewoodp": [290, 302], "hlp3": [290, 302], "dk": [290, 296, 302], "dual_k_schur": [290, 302], "dks3": [290, 296, 302], "affinegrothendieckpolynomi": 290, "_affinegrothendieckpolynomi": 290, "khlp": [290, 302], "kmonomi": [290, 302], "kq": [290, 302], "rzn": 290, "kboundedquotientbas": 290, "khp": 290, "q3t": 290, "kqb": 290, "kbounded_halllittlewoodp": 290, "lsa": 291, "umich": 291, "kfpoli": 291, "kostkafoulkespolynomi": 291, "koskta": [291, 293], "dom": 291, "mup": 291, "snu": 291, "schur_to_hl": 291, "llt1997": 292, "bernard": 292, "yve": [292, 302, 303], "unipot": 292, "1041": 292, "1068": 292, "9512031v1": 292, "lt2000": 292, "kinokuniya": 292, "tokyo": 292, "9809122v3": 292, "llt_class": 292, "hc3": 292, "hcospin": [292, 302], "symxt": 292, "llt3x": 292, "llt3": [292, 302], "hs3x": 292, "hspin": [292, 302], "hs3t": 292, "hsp3": 292, "llt3t2": 292, "hc3t2": 292, "hcosp3": 292, "spin_squar": 292, "llt_cospin": 292, "llt_gener": 292, "qqz": 292, "llt_famili": 292, "llt_spin": 292, "gh1993": 293, "nat": 293, "acad": 293, "3607": 293, "3610": 293, "bght1999": 293, "tesler": 293, "llm1998": 293, "determinant": 293, "irmn": 293, "9808050": 293, "bh2013": 293, "833": 293, "852": [293, 296], "plethyst": [293, 302, 303, 305], "qt": [293, 303], "mcdh": [293, 303], "qt_kostka": 293, "mcdp": [293, 302], "mcdq": 293, "mcdj": [293, 302], "scalar_qt": [293, 302, 303], "macxi": 293, "macyz": 293, "maczx": 293, "mac": [293, 296, 302, 303, 308], "macdonaldpolynomials_gener": 293, "eigenfunct": 293, "macdonald_famili": 293, "macp": 293, "macdonaldpolynomials_h": 293, "macdonaldpolynomials_ht": 293, "macdonaldpolynomials_j": 293, "macdonaldpolynomials_p": 293, "scalar_qt_basi": 293, "macdonaldpolynomials_q": 293, "macdonaldpolynomials_": 293, "misnam": 293, "cmunu": 293, "bmu": 293, "cmunu1": 293, "symmetricfunctionalgebra_monomi": 294, "antipode_by_coercion": [294, 303], "difficult": [294, 303, 305, 323, 347], "from_polynomial_exp": 294, "qqx": [294, 295, 303], "silenc": 295, "coverag": 295, "new_kschur": [296, 302], "kboundedsubspac": [296, 302], "kb": [296, 302], "k_kschur": 296, "morse11": 296, "lamschillingshimozono10": 296, "2950": 296, "2984": 296, "compositio": 296, "khomogen": [296, 302], "kh3": 296, "ksplit": [296, 302], "ksp3": [296, 302], "kboundedsubspacebas": 296, "sz2001": [296, 303], "ks4": 296, "is_schur_posit": [296, 303], "omega_t_invers": 296, "kh": [296, 302], "ks3t": 296, "kbb": 296, "morse2011": 296, "lamschillingshimozono2010": 296, "k_k_schur_non_commutative_vari": 296, "homogeneous_basis_noncommutative_variables_zero_heck": 296, "_homogeneous_basi": 296, "kks3": 296, "cast": 296, "ks2": 296, "ks5": 296, "rid": [296, 302, 311], "_product_on_basis_via_rectangl": 296, "ksp": [296, 302], "symt": 296, "kbs3": 296, "kbs4": 296, "ksp4": 296, "augmentedlatticediagramfil": 297, "are_attack": 297, "attacking_box": 297, "basement": 297, "hhl": 297, "coeff_integr": 297, "coinv": 297, "is_non_attack": 297, "permuted_fil": 297, "reading_ord": 297, "reading_word": [297, 307], "25465321": 297, "0601693v3": 297, "e_integr": 297, "hht": 297, "latticediagram": 297, "arm_left": 297, "arm_right": 297, "boxes_same_and_lower_right": 297, "nonattackingbacktrack": 297, "_ending_posit": 297, "_initial_st": 297, "nonattackingfil": 297, "nonattack": 297, "nonattackingfillings_shap": 297, "symmetricfunctionalgebra_orthogon": [298, 302], "charikleber2000": [298, 304], "koiketerada1987": [298, 304], "shimozonozabrocki2006": [298, 304], "symmetricfunctionalgebra_orthotriang": 299, "orthotriang": 299, "leading_coeff": 299, "orthotriangular": 299, "symmetricfunctionalgebra_pow": 300, "nr": [300, 303, 311, 315, 339], "eval_at_permutation_root": [300, 302, 303], "rho_2": [300, 303], "rho_": [300, 303], "zeta_m": [300, 303], "bottom_schur_funct": 300, "unavoid": [300, 354], "noninteg": 300, "clst03": 300, "clifford": 300, "0311382v2": 300, "eval_at_permutation_roots_on_gener": 300, "xi_m": 300, "symmetricfunctionalgebra_schur": 301, "ex_": 301, "categor": 302, "nonincreasingli": 302, "predict": [302, 354], "inner_tensor": [302, 303], "inner_plethysm": [302, 303], "gl_m": [302, 303], "st94": 302, "conj": 302, "map_support": 302, "map_item": 302, "sz": 302, "w_d": [302, 305], "syms3": 302, "ks6": 302, "symq3": 302, "sfa_gener": 302, "_self_to_": 302, "_s_to_self": 302, "setmorph": 302, "sfa_st": 302, "hopfalgebra": 302, "register_coercion": 302, "_from_dict": 302, "theta_qt": [302, 303], "_monomial_coeffici": 302, "cmu": 302, "qqqt": [302, 303], "ht04": 302, "fd06": 302, "francoi": 302, "descouen": 302, "andr": 302, "iglesia": 302, "nobuki": 302, "takayama": 302, "editor": 302, "4151": 302, "lnc": [302, 369], "407": 302, "urdial": 302, "spain": 302, "0806": 302, "b51z": 302, "475": 302, "853489": 302, "foreword": 302, "gian": 302, "rota": 302, "xii": 302, "581": 302, "56069": 302, "78987": 302, "scharf": [302, 303], "104": [302, 303, 311, 315], "aima": 302, "1019": 302, "devis": 302, "coerce_h": [302, 305], "coerce_": [302, 305], "coerce_p": [302, 305], "induced_trivial_charact": 302, "irreducible_symmetric_group_charact": 302, "hzq": 302, "h1z": 302, "register_isomorph": 302, "only_convers": 302, "stupid": 302, "2p_": 302, "zorglub": 302, "module_morph": 302, "d_p": 302, "symmetricfunctionalgebra_symplect": [302, 304], "symmetricaconversiononbasi": 302, "quick": 302, "comprehens": 303, "get_print_styl": 303, "set_print_styl": 303, "maximal_part": 303, "filteredsymmetricfunctionsbas": 303, "gradedsymmetricfunctionsbas": 303, "degree_zero_coeffici": 303, "product_by_coercion": 303, "arithmetic_product": 303, "boxdot": 303, "limits_": 303, "lcm": [303, 315], "mu_j": 303, "mu_3": 303, "torsion": [303, 305], "138148": 303, "unsatisfactori": 303, "isn": [303, 305], "corresponding_basis_ov": 303, "clearli": [303, 310, 354, 362], "bernstein_creation_by_def": 303, "max_degre": 303, "derivative_with_respect_to_p1": 303, "qqt": 303, "errata": 303, "h_m": 303, "quickest": [303, 313], "quot": 303, "duncan": 303, "235": [303, 324], "remmel": 303, "axiomat": 303, "partition_pow": 303, "sensibl": 303, "schathi1994": 303, "258": [303, 315], "1974": 303, "1063": 303, "1666632": 303, "ftp": 303, "mathe2": 303, "bayreuth": 303, "axel": 303, "a_hopf_algebra_approach_to_inner_plethysm": 303, "gz": [303, 344], "quantit": 303, "pertain": 303, "mq": 303, "mh": 303, "9407124": 303, "tensor_copr": 303, "briand": 303, "0907": 303, "4652": 303, "_is_posit": 303, "reduced_kronecker_product": 303, "omega_qt": 303, "2976": 303, "h3h2": 303, "p3s21": 303, "lazysymmetricfunct": [303, 323], "fog": 303, "stream": 303, "stream_plethysm": 303, "murnaghan": 303, "gutschwag": 303, "4411v3": 303, "1938": [303, 369], "painfulli": 303, "restrict_degre": 303, "restrict_partition_length": 303, "restrict_part": 303, "scalar_t": 303, "rn": [303, 339], "_sym": 303, "symmetricfunctionsbas": 303, "carlitz_shareshian_wach": 303, "x_w": 303, "shawach2014": 303, "1405": 303, "4629v2": 303, "mj": 303, "foot": 303, "formal_series_r": 303, "lazili": 303, "gessel_reutenau": 303, "gr1993": 303, "sch2003b": 303, "cfl": 303, "p_d": 303, "l_3": 303, "subsect": 303, "afford": 303, "thrall": 303, "higher_lie_charact": 303, "gr_def2": 303, "gr_def1": 303, "permus_mset": 303, "coeff_of_m_mu_in_result": 303, "words_to_check": 303, "is_integral_domain": 303, "lehrer_solomon": 303, "whitnei": 303, "ls1986": 303, "hr2017": 303, "sun1994": 303, "pi_2": 303, "orlik": 303, "chu2012": 303, "sharp": 303, "whitney_homology_charact": 303, "skew_schur": 303, "ess": [303, 343], "is_symmetricfunct": 303, "is_symmetricfunctionalgebra": 303, "vyjayanthi": 304, "chari": 304, "0011161v1": 304, "terada": 304, "diagrammat": 304, "bn": 304, "dn": 304, "299": 304, "0404288": 304, "symmetricfunctionalgebra_witt": 305, "doraniv1996": 305, "w_3": 305, "ghost": 305, "borwi2004": 305, "3888v1": 305, "doran": 305, "344": [305, 359], "0056": 305, "borger": 305, "wieland": 305, "0407227v1": 305, "underscor": [305, 358], "wh": 305, "from_other_uncach": 305, "verif": [305, 354, 361], "fouc": 305, "w_r": 305, "shard_ord": 306, "shardposetel": 306, "p0": 306, "shard_poset": 306, "banc2011": 306, "bancroft": 306, "cambrian": 306, "carolina": 306, "pete2013": 306, "kyle": 306, "siam": 306, "1912": 306, "read2011": 306, "run_indic": 306, "dpg": 306, "preorder": 306, "spg": 306, "transitivetourna": 306, "kiril": 307, "paramonov": 307, "shifted_primed_tableau": 307, "crystalelementshiftedprimedtableau": 307, "preprocess": [307, 341], "hps2017": 307, "ao2018": 307, "spt": 307, "unprim": [307, 341], "primedentri": 307, "decrease_half": 307, "decrease_on": 307, "increase_half": 307, "increase_on": 307, "is_unprim": 307, "primed_diagon": 307, "11p": 307, "restriction_outer_shap": [307, 314], "restriction_shap": [307, 314, 346], "interlac": 307, "shiftedprimedtableaux_al": 307, "shiftedprimedtableaux_shap": 307, "sptc": 307, "tableau_cryst": 307, "tableau_digraph": 307, "tensor_cryst": 307, "tensor_digraph": 307, "3072": 307, "shiftedprimedtableaux_weight": 307, "shiftedprimedtableaux_weight_shap": 307, "geqslant": 308, "eilenberg": 308, "lane": 308, "1953": 308, "eillan53": 308, "shuffleproduct": 308, "samuel": 308, "saunder": 308, "setshuffleproduct": 308, "shuffleproduct_abstract": 308, "adbc": 308, "dabc": [308, 359], "abdc": [308, 362], "adebc": 308, "daebc": 308, "deabc": [308, 362], "adbec": 308, "dabec": 308, "abdec": 308, "mid_a": 308, "mid_b": 308, "addend": [308, 343], "shuffleproduct_w1w2": [308, 364], "shuffleproduct_overlapping_r": 308, "939": 308, "raum": 309, "sidon_set": 309, "sid": 309, "sidon_sets_rec": 309, "green55": 310, "qualit": 310, "monic": 310, "similarityclasstyp": 310, "class_card": 310, "centralizer_algebra_dim": 310, "centralizer_group_card": 310, "number_of_class": 310, "number_of_matric": 310, "matrices_with_rcf": 310, "rcf": 310, "similarity_class_typ": 310, "order_of_general_linear_group": 310, "simultaneous_similarity_class": 310, "kung": 310, "stong": 310, "morrison": 310, "morrison06": 310, "eleg": 310, "ramar\u00e9": 310, "r17": 310, "pr22": 310, "pss13": 310, "selftranspos": 310, "matrix_centralizer_cardinalities_length_two": 310, "1955": 310, "447": 310, "0072878": 310, "kent": 310, "uwaterloo": 310, "vol9": 310, "morrison37": 310, "singla": 310, "spallon": 310, "6157": 310, "touchard": 310, "riordan": 310, "11076": 310, "publ": 310, "debrecen": 310, "5486": 310, "pmd": 310, "7466": 310, "primarysimilarityclasstyp": 310, "dotsb": 310, "invariant_subspace_generating_funct": 310, "indermin": 310, "func": 310, "ptc": 310, "as_partition_dictionari": 310, "dimensiona": 310, "is_semisimpl": 310, "fq": 310, "stat": 310, "sumov": 310, "bursid": 310, "centralizer_group_cardin": 310, "dictionary_from_gener": 310, "ext_orbit_centr": 310, "input_data": 310, "input_pars": 310, "ext_orbit": 310, "matrix_centralizer_cardin": 310, "matrix_similarity_class": 310, "matrix_similarity_classes_length_two": 310, "salvator": 311, "stella": 311, "sinegordonysystem": 311, "nakanishi": 311, "wonder": [311, 354], "6853": 311, "sine_gordon": 311, "na": 311, "nl": [311, 315], "points_siz": 311, "triangulation_color": 311, "triangulation_thick": 311, "shading_color": 311, "neuter": 311, "reflections_color": 311, "reflections_thick": 311, "sixvertexconfigur": 312, "n_5": 312, "epsilon_5": 312, "lu": 312, "ld": 312, "ur": 312, "rd": 312, "type_model": 312, "kdp": 312, "ry": 312, "to_signed_matrix": 312, "outward": [312, 314], "inward": [312, 314], "vertex_model": 312, "partition_funct": 312, "temperatur": 312, "k_b": 312, "boltzmann": 312, "partition_function_": 312, "statistical_mechan": 312, "squareicemodel": 312, "outer_corn": [313, 314], "inner_corn": [313, 314], "skew_partit": 313, "columns_intersection_set": 313, "sta2002": 313, "is_overlap": [313, 359], "is_ribbon": [313, 314], "pieri_macdonald_coeff": 313, "rows_intersection_set": 313, "to_dag": 313, "from_row_and_column_length": 313, "rowl": 313, "coll": 313, "mismatch": 313, "unambigu": 313, "skp1": 313, "skp2": 313, "latex_marking_str": 313, "skewpartitions_al": 313, "skewpartitions_n": 313, "skewpartitions_rowlength": 313, "row_lengths_aux": 313, "backward_slid": 314, "skew_tableau": 314, "nameless": 314, "semistandardskewtableaux_al": 314, "semistandardskewtableaux_shap": 314, "semistandardskewtableaux_shape_weight": 314, "semistandardskewtableaux_s": 314, "semistandardskewtableaux_size_weight": 314, "reverse_slid": 314, "666": [314, 346], "cells_by_cont": 314, "cells_contain": [314, 346, 348], "liber": 314, "inner_s": 314, "is_semistandard": [314, 346], "outer_s": 314, "jdt": 314, "spaghetti": 314, "t2_new": 314, "t1_new": 314, "vacat": 314, "return_vac": 314, "p12": 314, "st2": [314, 346], "to_expr": 314, "stlist": 314, "to_word_by_row": [314, 346, 348], "to_ribbon": 314, "check_input": 314, "1324": [314, 364], "to_word_by_column": [314, 346, 348], "4231": 314, "skewtableau_class": 314, "from_chain": [314, 346], "standardskewtableaux_al": 314, "standardskewtableaux_shap": 314, "aitken": 314, "cor": 314, "standardskewtableaux_s": 314, "a000005": 315, "_eval": 315, "reset_nam": 315, "sloaneencyclopedia": 315, "jaap": 315, "spi": 315, "sloane_funct": 315, "a000001": 315, "sloanesequ": 315, "a000004": 315, "a000007": 315, "a000008": 315, "cent": 315, "gaski": 315, "a000009": 315, "a000010": 315, "totient": 315, "tot": 315, "euler_phi": 315, "a000012": 315, "a000015": 315, "307": 315, "a000016": 315, "251859545753048193000": 315, "a000027": 315, "a000030": 315, "a000032": 315, "627376215338105766356982006981782561278127": 315, "a000035": 315, "a000040": 315, "a000041": 315, "3972999029388": 315, "a000043": 315, "mersenn": [315, 354], "13466917": 315, "a000045": [315, 354], "plouff": 315, "gutenberg": 315, "ibiblio": 315, "pub": 315, "etext01": 315, "fbncc10": 315, "a000069": 315, "odiou": 315, "a000073": 315, "tribonacci": [315, 362, 363, 369], "a000079": 315, "1267650600228229401496703205376": 315, "a000085": 315, "140152": 315, "2620": 315, "9496": 315, "35696": 315, "a000100": 315, "a000108": [315, 354], "segner": 315, "2622127042276492108820": 315, "a000110": 315, "exponentialnumb": 315, "indistinguish": 315, "47585391276764833658790768841387207826363669686825611466616334637559114497892442622672724044217756306953557882560751": 315, "a000120": 315, "a000124": 315, "cater": 315, "pancak": 315, "a000129": 315, "recurrencesequence2": 315, "pell": 315, "a001333": 315, "13860": 315, "985": [315, 363, 367], "2378": 315, "5741": [315, 363], "a000142": 315, "40320": 315, "815915283247897734345611269596115894272000000000": 315, "5040": 315, "a000153": 315, "extremesofpermanentssequ": 315, "seok": 315, "zun": 315, "song": 315, "202": 315, "82508": 315, "10315043624498196944": 315, "1214": 315, "9403": 315, "a000165": 315, "10321920": 315, "2551082656125828464640000": 315, "3840": 315, "46080": 315, "645120": 315, "a000166": 315, "subfactori": 315, "14833": 315, "895014631192902121": 315, "1854": 315, "a000169": 315, "1000000000": 315, "7776": 315, "117649": 315, "2097152": [315, 323, 324], "43046721": 315, "25937424601": 315, "a000203": 315, "a000204": 315, "a000213": 315, "a000217": 315, "2001000": 315, "a000225": 315, "4095": 315, "1023": 315, "2047": 315, "a000244": 315, "177147": 315, "19683": 315, "59049": 315, "a000255": 315, "148329": 315, "9923922230666898717143": 315, "2119": 315, "16687": 315, "a000261": 315, "lin": 315, "30637": 315, "1801366114380914335441": 315, "3539": 315, "296967": 315, "a000272": 315, "100000000": 315, "16807": 315, "262144": 315, "4782969": 315, "2357947691": 315, "a000290": 315, "a000292": 315, "a000302": 315, "1048576": [315, 354], "1024": [315, 324], "4096": 315, "65536": 315, "4194304": 315, "a000312": 315, "endofunct": 315, "387420489": 315, "3125": 315, "46656": 315, "823543": 315, "16777216": 315, "10000000000": 315, "a000326": 315, "a000330": 315, "506": 315, "a000396": 315, "137438691328": 315, "33550336": 315, "8589869056": 315, "a000578": 315, "1331": 315, "a000583": 315, "a000587": 315, "imbal": 315, "397577026456518507969762382254187048845620355238545130875069912944235105204434466095862371032124545552161": 315, "a000668": 315, "053": 315, "946": 315, "170141183460469231731687303715884105727": 315, "8191": 315, "131071": 315, "524287": 315, "2147483647": 315, "preferenti": 315, "7087261": 315, "4683": 315, "47293": 315, "545835": 315, "a000720": 315, "primepi": 315, "a000796": 315, "decim": [315, 358], "lambert": 315, "meerten": 315, "a000961": 315, "a000984": 315, "12870": 315, "924": 315, "3432": 315, "15511": 315, "835": 315, "2188": 315, "5798": 315, "a001045": 315, "jacobsth": 315, "683": 315, "a001055": 315, "nwf": 315, "a001109": 315, "235416": 315, "1515330104844857898115857393785728383101709300": 315, "6930": 315, "40391": 315, "a001110": 315, "recurrencesequ": 315, "34a": 315, "55420693056": 315, "4446390382511295358038307980025": 315, "1225": 315, "41616": 315, "1413721": 315, "48024900": 315, "1631432881": 315, "a001147": 315, "2027025": 315, "319830986772877770815625": 315, "10395": 315, "135135": 315, "a001157": 315, "a001189": 315, "140151": 315, "2619": 315, "9495": 315, "35695": 315, "568503": 315, "a001221": 315, "84792": 315, "a001222": 315, "bigomega": 315, "a001227": 315, "8119": 315, "1393": 315, "3363": 315, "a001358": 315, "semiprim": 315, "biprim": 315, "669": 315, "a001405": 315, "a001477": 315, "3382789": 315, "a001694": 315, "squareful": 315, "3136": 315, "7225": 315, "is_pow": 315, "a001836": 315, "17798": 315, "578": 315, "743": 315, "893": 315, "a001906": 315, "701408733": 315, "6765": 315, "17711": 315, "a001909": 315, "8544": 315, "470033715095287415734": 315, "81901": 315, "870274": 315, "a001910": 315, "1909": 315, "98125321641110663023": 315, "227": 315, "18089": 315, "190435": 315, "2203319": 315, "a001969": 315, "evil": 315, "a002110": 315, "primori": 315, "9699690": 315, "1922760350154212639070": 315, "2310": 315, "30030": 315, "510510": 315, "a002113": 315, "palindrom": [315, 356, 359, 362, 369], "a002275": 315, "repunit": 315, "11111111": 315, "11111111111111111111": 315, "1111111": [315, 359], "a002378": 315, "oblong": 315, "pronic": 315, "heteromec": 315, "a002620": 315, "a002808": 315, "a003418": 315, "360360": 315, "840": 315, "2520": 315, "27720": 315, "a004086": 315, "3333": [315, 356], "12345": 315, "a004526": 315, "a005100": 315, "defici": 315, "a005101": 315, "abund": [315, 354], "exce": [315, 374], "a005117": 315, "a005408": 315, "a005843": 315, "a006318": 315, "schroeder": 315, "206098": 315, "1806": 315, "8558": 315, "41586": 315, "a006530": 315, "a006882": 315, "3715891200": 315, "a007318": 315, "715": 315, "nonn": 315, "a008275": 315, "a008277": 315, "a008683": 315, "a010060": 315, "a015521": 315, "13107": 315, "967140655691703339764941": 315, "819": 315, "3277": 315, "52429": 315, "209715": 315, "838861": 315, "a015523": 315, "17727": 315, "6173719566474529739091481": 315, "4229": 315, "74326": 315, "311613": 315, "1306469": 315, "a015530": 315, "41008": 315, "1900": 315, "8827": 315, "a015531": 315, "65104": 315, "144560289664733924534327040115992228190104": 315, "2604": 315, "13021": 315, "a015551": 315, "570216": 315, "7110606606530059736761484557155863822531970573036": 315, "12546": 315, "84581": 315, "a018252": 315, "nonprim": 315, "a020639": 315, "a046660": 315, "a049310": 315, "chebyshev": 315, "a051959": 315, "9969": 315, "42834431872413650": 315, "1688": 315, "4112": 315, "24114": 315, "58268": 315, "140728": 315, "a055790": 315, "extremesofpermanentssequence2": 315, "165016": 315, "10356214297533070441564": 315, "2428": 315, "18806": 315, "a061084": 315, "24476": 315, "a064553": 315, "a079922": 315, "school": 315, "girl": 315, "boi": 315, "nieuw": 315, "archief": 315, "voor": 315, "wiskund": 315, "decemb": 315, "2227": 315, "a079923": 315, "15458": 315, "738": 315, "2108": 315, "5794": 315, "a082411": 315, "407389224418": 315, "76343678551": 315, "483732902969": 315, "560076581520": 315, "2219759332689173": 315, "a083103": 315, "1786772701928802632268715130455793": 315, "1059683225053915111058165141686995": 315, "2846455926982717743326880272142788": 315, "3906139152036632854385045413829783": 315, "45481392851206651551714764671352204": 315, "14639253684254059531823985143948191708": 315, "a083104": 315, "331635635998274737472200656430763": 315, "1510028911088401971189590305498785": 315, "ronald": 315, "3351693458175078679851381267428333": 315, "36021870400834012982120004949074404": 315, "11601914177621826012468849361236300628": 315, "a083105": 315, "62638280004239857": 315, "49463435743205655": 315, "112101715747445512": 315, "161565151490651167": 315, "1853029790662436896": 315, "596510791500513098192": 315, "a083216": 315, "20615674205555510": 315, "3794765361567513": 315, "herbert": 315, "wilf": [315, 346], "347693837265139403": 315, "2738025383211084205003383": 315, "24410439567123023": 315, "28205204928690536": 315, "a090010": 315, "67741129": 315, "192416593029158989003270143": 315, "34754": 315, "398959": 315, "4996032": 315, "988344062": 315, "a090012": 315, "890901": 315, "129020386652297208795129": 315, "1395": 315, "10617": 315, "91911": 315, "9552387": 315, "a090013": 315, "3481096": 315, "1112998577171142607670336": 315, "536": 315, "4004": 315, "34176": 315, "327604": 315, "40585284": 315, "a090014": 315, "11016595": 315, "7469733600354446865509725": 315, "1135": [315, 361], "9545": 315, "90445": 315, "952175": 315, "138864365": 315, "a090015": 315, "29976192": 315, "41552258517692116794936876": 315, "2136": 315, "19998": 315, "208524": 315, "2393754": 315, "406446774": 315, "a090016": 315, "72737161": 315, "199341969448774341802426289": 315, "3689": 315, "38087": 315, "433713": 315, "5394991": 315, "1056085191": 315, "a109814": 315, "polite_numb": 315, "sheet": 315, "a111774": 315, "jaapspi": 315, "mathfil": 315, "problem2005": 315, "is_number_of_the_third_kind": 315, "a111775": 315, "a111787": 315, "2542": 315, "23799": 315, "inspect": 315, "__dir__": 315, "incorrectli": 315, "perm_mh": 315, "a079908": 315, "a079928": 315, "recur_gen2": 315, "recur_gen2b": 315, "recur_gen3": 315, "sga": [316, 343], "submodulewithbasi": 316, "r_d": 316, "c_d": 316, "s_4": 316, "spechtrepresent": [316, 344], "representation_matrix": [316, 344], "specht_module_rank": 316, "specht_module_spanning_set": 316, "blurb": 317, "characteristic_speci": 318, "characteristicspeci": [318, 321], "genericcombinatorialspeci": [318, 319, 320, 321, 322, 325, 327, 328, 329, 330, 331, 332, 334, 335], "isotype_generating_seri": [318, 321, 322, 323, 324, 327, 328, 331, 332, 334, 354], "cycle_index_seri": [318, 321, 323, 324, 332], "characteristicspeciesstructur": 318, "genericspeciesstructur": [318, 319, 320, 322, 325, 327, 328, 329, 331, 333, 334], "transport": [318, 319, 320, 325, 327, 328, 329, 331, 333, 334], "characteristicspecies_class": 318, "emptysetspeci": [318, 330, 333, 354], "emptysetspecies_class": 318, "singletonspeci": [318, 323, 329, 330, 332, 333, 354], "singletonspecies_class": 318, "composition_speci": 319, "compositionspeci": 319, "setspeci": [319, 322, 323, 326, 329, 331, 332, 333, 335], "cyclespeci": [319, 320, 323, 332], "weight_r": [319, 322, 329, 330, 332, 335], "compositionspeciesstructur": 319, "change_label": [319, 327, 329, 333], "compositionspecies_class": 319, "cycle_speci": 320, "cyclespeciesstructur": 320, "permutation_group_el": [320, 328], "cyclespecies_class": 320, "empty_speci": 321, "emptyspeci": 321, "empt": 321, "emptyspecies_class": 321, "functorial_composition_speci": 322, "functorialcompositionspeci": 322, "subsetspeci": [322, 323, 332, 333, 334], "functorial_composit": [322, 323, 332], "simplegraphspeci": [322, 323, 324], "functorialcompositionspecies_class": 322, "functorialcompositionstructur": 322, "ralf": [323, 332, 374], "hemmeck": [323, 332], "aldor": [323, 332], "risc": [323, 332], "linz": [323, 332], "aldorcombinat": [323, 332], "combinatse10": 323, "cycleindexseri": 323, "coeff_stream": 323, "coefficient_cycle_typ": 323, "cycleindexseriesr": 323, "linearorderspeci": [323, 325, 330, 332, 333], "exponentialcycleindexseri": 323, "binarytreespeci": [323, 324, 332], "binaryforestspeci": [323, 324], "partitionspeci": [323, 327, 333], "permutationspeci": [323, 328, 329, 332, 335], "logarithm": 323, "logarithmcycleindexseri": 323, "cg": 323, "hous": 323, "equigrad": 323, "lazypowerseriesr": [323, 354], "exponentialgeneratingseri": 323, "lazypowerseri": 323, "ordinarygeneratingseriesr": 323, "exponentialgeneratingseriesr": 323, "g_n": [323, 359], "bll1998": 323, "131072": 323, "315": 323, "536870912": 323, "2835": 323, "thoroughli": 323, "labelle2008": 323, "eplu": 323, "set_speci": [323, 331], "ordinarygeneratingseri": 323, "2721": 324, "49171": 324, "1084483": 324, "28245729": 324, "848456353": 324, "758": 324, "2504": 324, "907": 324, "1680": 324, "30240": 324, "665280": 324, "17297280": 324, "518918400": 324, "32768": 324, "268435456": 324, "68719476736": 324, "linear_order_speci": 325, "linearorderspeciesstructur": 325, "linearorderspecies_class": 325, "accept_s": 326, "change_support": 326, "change_perm": 326, "partition_speci": 327, "partitionspeciesstructur": 327, "partitionspecies_class": 327, "permutation_speci": 328, "permutationspeciesstructur": 328, "permutationspecies_class": 328, "product_speci": 329, "productspeci": 329, "left_factor": 329, "right_factor": 329, "productspeciesstructur": 329, "productspecies_class": 329, "recursive_speci": 330, "combinatorialspeci": [330, 332, 333, 354], "combinatorialspeciesstructur": 330, "speciesstructurewrapp": [330, 333, 335], "setspeciesstructur": 331, "setspecies_class": 331, "combinatse8": 332, "internal_nod": 332, "algebraic_equation_system": 332, "node3": 332, "vertex_iter": 332, "node0": 332, "is_weight": 332, "structure_class": [332, 333], "oooooo": 333, "isotypeswrapp": 333, "specieswrapp": 333, "simpleisotypeswrapp": 333, "simplestructureswrapp": 333, "speciesstructur": 333, "structureswrapp": 333, "_structur": 333, "subset_speci": 334, "subsetspeciesstructur": 334, "label_subset": 334, "subsetspecies_class": 334, "sum_speci": 335, "sumspeci": 335, "left_summand": 335, "right_summand": 335, "sumspeciesstructur": 335, "sumspecies_class": 335, "submultiset_": 336, "submultiset_sk": 336, "619": 336, "subsetssort": 336, "115792089237316195423570985008687907853269984665640564039457584007913129639936": 336, "14123091480": 336, "278826214642518400": 336, "1441231049": 336, "subsets_": 336, "lightweight": 336, "cliffordalgebra": 336, "3149254230": 336, "set_object_enumer": [336, 338], "aren": 336, "underlying_set": 336, "subsets_sk": 336, "dict_to_list": 336, "list_to_dict": 336, "powerset": 336, "nil": 336, "bruin": 336, "uniq": 336, "subsets_hereditari": 337, "subsets_with_hereditary_properti": 337, "max_obstruction_s": 337, "inclusionwis": 337, "win": 337, "coalit": 337, "dramat": 337, "thread": 337, "obstruct": 337, "num_cal": 337, "is_independent_set": 337, "suboptim": 338, "apparit": 338, "subset_rest": 338, "post_process": 338, "bnjr": 339, "bonjour": 339, "njo": 339, "nnu": 339, "enumeratedmultiset": 339, "subwords_w": 339, "subwords_wk": 339, "smallest_posit": 339, "shellabl": 340, "coxeter_sorting_word": 340, "root_configur": 340, "increasing_flip_poset": 340, "extended_weight_configur": 340, "brick_polytop": 340, "runtimewarn": 340, "pilaud": 340, "knumil": 340, "184": 340, "pilstu": 340, "spheric": 340, "subword_complex": 340, "barycent": 340, "brick_fan": 340, "weight_con": 340, "brick_vector": 340, "greedy_facet": [340, 352], "increasing_flip_graph": 340, "is_bal": 340, "is_double_root_fre": 340, "is_pur": 340, "is_root_independ": 340, "is_spher": 340, "kappa_preimag": 340, "minkowski_summand": 340, "minkowski": 340, "extended_root_configur": 340, "mathsf": 340, "smallsetminu": 340, "omega_": 340, "return_posit": 340, "is_vertex": 340, "root_con": 340, "list_color": 340, "pseudolin": 340, "upper_root_configur": 340, "weight_configur": 340, "wc": 340, "super_tableau": 341, "oddd": 341, "semistandardsupertableaux": 341, "semistandardtableaux": [341, 346], "sst": [341, 346], "semistandardsupertableaux_al": 341, "standardsupertableau": 341, "standardsupertableaux": 341, "standardsupertableaux_al": 341, "standardsupertableaux_shap": 341, "standardtableaux_shap": [341, 346], "6651216": [341, 346], "standardsupertableaux_s": 341, "standardtableaux_s": [341, 346], "27886995605342342839104615869259776": 341, "boson": 342, "semicolon": 342, "superpartit": 342, "jl2016": 342, "fermionic_degre": 342, "bosonic_degre": 342, "a_part": 342, "antisymmetr": [342, 343], "antisymmetric_part": 342, "add_horizontal_border_strip_star": 342, "add_horizontal_border_strip_star_bar": 342, "bi_degre": 342, "bidegre": 342, "bosonic_length": 342, "fermionic_sector": 342, "from_circled_diagram": 342, "from_cd": 342, "to_circled_diagram": 342, "s_part": 342, "symmetric_part": 342, "shape_circled_diagram": 342, "superpartitions_al": 342, "superpartitions_n": 342, "superpartitions_n_m": 342, "symmetric_group_algebra": 343, "heckealgebrasymmetricgroupt": 343, "t_j": [343, 346], "go1993": 343, "heckealgebrasymmetricgroup_gener": 343, "heckealgebrasymmetricgroup_t": 343, "perm1": 343, "perm2": 343, "t_action": 343, "t_action_on_basi": 343, "brave": 343, "qs4": 343, "qs0": 343, "qs1": 343, "awkward": 343, "_test_construct": 343, "symmetricgroupalgebra_n": 343, "groupalgebra_class": 343, "zs3": 343, "binary_unshuffle_sum": 343, "rsw": 343, "semi_rsw_el": 343, "rsw_shuffling_el": 343, "test_rsw": 343, "zsn": 343, "test_rsw_ncsf": 343, "canonical_embed": 343, "zs2": 343, "qs4g": 343, "zs2g": 343, "cell_modul": 343, "cell_module_indic": 343, "central_orthogonal_idempot": 343, "mur1983": 343, "idem": 343, "nakayama": 343, "dft": 343, "seminorm": [343, 344], "epsilon_ik": 343, "itab": 343, "ktab": 343, "seminormal_basi": 343, "test_sn1": 343, "qsn": 343, "qsn1": 343, "ett": 343, "test_sn2": 343, "pit": 343, "test_sn3": 343, "lh": 343, "j4": 343, "qs5": 343, "monomial_from_smaller_permut": 343, "qs5g": 343, "dret": 343, "sga3": 343, "sga5": 343, "pret": 343, "test_rsw_comm": 343, "bitableau": 343, "ram1997": 343, "artin": 343, "wedderburn": 343, "eghlsvi": 343, "unnorm": 343, "whenc": 343, "e_hat": 343, "e_ik": 343, "herein": 343, "pi_ik": 343, "seminormal_test": 343, "kerber": 343, "symmetric_group_represent": 344, "symmetricgrouprepresentation_generic_class": 344, "spc": 344, "scalar_product_matrix": 344, "cache_matric": 344, "symmetricgrouprepresentations_class": 344, "orth": 344, "verify_represent": 344, "_cache__representation_matrix": 344, "hasattr": 344, "phalanster": 344, "proccrac": 344, "to_charact": 344, "triv": 344, "def_rep": 344, "block_sum": 344, "snorm": 344, "youngrepresentation_orthogon": 344, "youngrepresentation_gener": 344, "youngrepresentation_seminorm": 344, "representation_matrix_for_simple_transposit": 344, "youngrepresentations_orthogon": 344, "youngrepresentations_seminorm": 344, "partition_to_vector_of_cont": 344, "autocorrel": 345, "4l": 345, "2l": 345, "familii": 345, "t_sequences_construction_from_base_sequ": 345, "base_sequ": 345, "ktr2005": 345, "0_": 345, "turyn_sequences_smallcas": 345, "t_sequences_construction_from_turyn_sequ": 345, "turyn_sequ": 345, "is_t_sequences_set": 345, "base_sequences_smallcas": 345, "crskky1989": 345, "base_sequences_construct": 345, "turyn_type_seq": 345, "is_base_sequences_tupl": 345, "turyn_type_sequences_smallcas": 345, "elemn": 345, "n_b": 345, "n_c": 345, "n_d": 345, "contiain": 345, "bdkr2013": 345, "begun": [346, 354], "katabol": 346, "catabol": 346, "oliv": 346, "pechenik": 346, "rowstandardtableau": [346, 348], "increasingtableau": 346, "rowstandardtableaux": 346, "increasingtableaux": 346, "tableaux_al": [346, 348], "tableaux_s": 346, "semistandardtableaux_al": 346, "semistandardtableaux_s": 346, "semistandardtableaux_size_inf": 346, "semistandardtableaux_size_weight": 346, "semistandardtableaux_shap": 346, "semistandardtableaux_shape_inf": 346, "semistandardtableaux_shape_weight": 346, "standardtableaux_al": [346, 348], "increasingtableaux_al": 346, "increasingtableaux_s": 346, "increasingtableaux_size_inf": 346, "increasingtableaux_size_weight": 346, "increasingtableaux_shap": 346, "increasingtableaux_shape_inf": 346, "increasingtableaux_shape_weight": 346, "rowstandardtableaux_al": [346, 348], "rowstandardtableaux_s": 346, "rowstandardtableaux_shap": 346, "tableaux_shap": 346, "IT": 346, "k_bender_knuth": 346, "dps2017": 346, "increasing": 346, "k_evacu": 346, "ty2009": 346, "k_promot": 346, "pec2014": 346, "k_promotion_invers": 346, "dual_k_evacu": 346, "1955457504": 346, "2352": 346, "208361017592001331200": 346, "kra1999": 346, "stoyanovskii": 346, "0012365x9290368p": 346, "kostka_numb": 346, "4225": 346, "hai1992": 346, "sag2011": 346, "speedup": 346, "bk_promotion_inverse7": 346, "standard_desc": 346, "standard_major_index": 346, "standard_number_of_desc": 346, "nijenhui": 346, "knuth_correspond": 346, "28273": 346, "423107565308608549951551753690": 346, "221285999236657443927937253376": 346, "syt": 346, "subinterv": 346, "add_entri": [346, 348], "anti_restrict": 346, "kb1995": 346, "bump_multipli": 346, "slide_multipli": 346, "catabolism_projector": 346, "catabolism_sequ": 346, "bkw2011": [346, 348], "column_stabil": [346, 348], "tableau_tupl": [346, 348], "first_column_desc": [346, 348], "first_row_desc": [346, 348], "sal2014": 346, "theta_i": 346, "southward": 346, "westward": 346, "insert_word": 346, "is_column_increas": 346, "is_increas": 346, "is_key_tableau": 346, "ls1990": 346, "wil2010": 346, "is_row_increas": 346, "k_weight": 346, "ive2012": 346, "lambda_catabol": 346, "last_letter_lequ": 346, "tab2": 346, "left_key_tableau": 346, "lesser": 346, "scan": 346, "secondtab": 346, "promotion_oper": 346, "sigma_m": 346, "symmetric_group_action_on_valu": 346, "llm2003": [346, 359], "raise_action_from_word": 346, "functool": 346, "14724": 346, "reduced_column_word": [346, 348], "reduced_lambda_catabol": 346, "reduced_row_word": [346, 348], "residue_sequ": [346, 347, 348], "tableau_residu": [346, 347, 348], "residuesequ": [346, 347, 348], "reverse_bump": 346, "right_key_tableau": 346, "rotate_180": 346, "row_stabil": [346, 348], "schensted_insert": 346, "socl": 346, "symmetric_group_action_on_entri": [346, 348], "loth02": [346, 369], "to_gelfand_tsetlin_pattern": 346, "to_sign_matrix": 346, "3412": [346, 364], "325146": 346, "321546": 346, "vertical_flip": 346, "tableau_class": 346, "4213": 346, "undergo": 346, "unmatched_plac": 346, "eigenspac": 347, "kappa_k": 347, "standardtableaux_residu": [347, 348], "standardtableaux_residue_shap": [347, 348], "rowstandardtableautuples_residu": [347, 348], "rowstandardtableautuples_residue_shap": [347, 348], "shadow": 347, "r_m": 347, "restrict_row": 347, "swap_residu": 347, "cell_residu": 347, "residuesequences_with_categori": 347, "criteria": 347, "multitableaux": 348, "rowstandardtableautupl": 348, "tableautuples_al": 348, "tableautuples_level": 348, "tableautuples_s": 348, "tableautuples_level_s": 348, "standardtableautuples_al": 348, "standardtableautuples_level": 348, "standardtableautuples_s": 348, "standardtableautuples_level_s": 348, "standardtableautuples_shap": 348, "rowstandardtableautuples_al": 348, "rowstandardtableautuples_level": 348, "rowstandardtableautuples_s": 348, "rowstandardtableautuples_level_s": 348, "rowstandardtableautuples_shap": 348, "rowtableau": 348, "rowtableaux": 348, "miwa": 348, "level_one_parent_class": 348, "stt": 348, "31936": 348, "std": 348, "36960": 348, "intim": 348, "a_l": 348, "catalogu": 349, "bousquet": 349, "melou": 349, "fusi": 349, "previl": 349, "ratel": 349, "1106": 349, "1498": 349, "paths_in_triangl": 349, "swap_dext": 349, "tilingsolv": 350, "knuth1": 350, "quantumino": 350, "juli": 350, "april": 350, "chessboard": 350, "vacant": 350, "magenta": [350, 363], "violet": 350, "pink": 350, "difference_upd": 350, "show2d": 350, "stick": 350, "cyan": 350, "tachyon": 350, "reusabl": [350, 362], "1696": 350, "0011047": 350, "deeppink": 350, "canonical_isometric_copi": 350, "orientation_preserv": 350, "mod_box_isometri": 350, "rbg": 350, "isometric_copi": 350, "sorted_list": 350, "isometric_copies_intersect": 350, "neighbor_edg": 350, "self_surround": 350, "remove_incomplete_copi": 350, "annulu": 350, "homotheti": 350, "translated_copi": 350, "translated_copies_intersect": 350, "common_prefix": 350, "hundredth": 350, "coord_to_int_dict": 350, "int_to_coord_dict": 350, "is_suit": 350, "nrows_per_piec": 350, "quantuminosolv": 350, "tiling_solv": 350, "672": 350, "_piec": 350, "row_to_polyomino": 350, "row_numb": 350, "rows_for_piec": 350, "starting_row": 350, "ncube_isometry_group": 350, "ncube_isometry_group_coset": 350, "parallelepip": 350, "transitive_id": 351, "halt": [351, 354], "unicode_art": 352, "f_triangl": 352, "triangles_fhm": 352, "h_triangl": 352, "gamma_triangl": 352, "flo": 352, "\u03b3": 352, "transmut": 352, "nc3": 352, "bare": 352, "dismiss": 352, "tuples_sk": 353, "unorderedtuples_sk": 353, "math\u00e9matiqu": [354, 362, 363], "avec": 354, "cms2012": 354, "physic": 354, "wider": 354, "offer": 354, "profus": 354, "fortiori": 354, "capabl": 354, "card": 354, "deck": 354, "spade": 354, "club": 354, "queen": 354, "mathrel": 354, "topic": 354, "player": 354, "2598960": 354, "thirteen": 354, "5148": 354, "16660": 354, "98079231692677": 354, "is_flush": 354, "nflush": 354, "poker_hand": 354, "grammar": 354, "autom": 354, "rigor": 354, "justif": 354, "parameter": 354, "valuabl": 354, "gold": 354, "mine": 354, "190000": 354, "fingerprint": 354, "biguplus_": 354, "approx": 354, "uplu": 354, "goldbach": 354, "1751": 354, "beauti": 354, "sy": 354, "solution_dict": 354, "aberr": 354, "instantan": 354, "227508830794229349661819540395688853956041682601541047340": 354, "recalcul": 354, "lazy_series_r": 354, "valuat": [354, 369], "129013158064429114001222907669676675134349530552728882499810851598901419013348319045534580850847735528275750122188940": 354, "seek": 354, "60000": 354, "ndigit": 354, "60198": 354, "confin": 354, "gfun": 354, "combstruct": 354, "decomposableobject": 354, "diff": 354, "px": 354, "qx": 354, "qxy": 354, "quo": 354, "ybar": 354, "modulu": [354, 362], "dz": 354, "legibli": 354, "4z": 354, "equadiff": 354, "simplify_r": 354, "function_factori": 354, "substitute_funct": 354, "sought": 354, "saw": [354, 359], "wide": 354, "elimin": 354, "gr\u00f6bner": 354, "algebro": 354, "gosper": 354, "progress": [354, 359], "2003529930406846464979072351560255750447825475569751419265016973": 354, "19728": 354, "19729": 354, "237102124": 354, "237102123": 354, "particl": 354, "overflowerror": 354, "rademach": 354, "partitions_n_with_categori": 354, "introspect": 354, "dollar": 354, "bill": 354, "integerrang": 354, "16999": 354, "up_to_four_edg": 354, "24637809253125004524383007491432768": 354, "discoveri": 354, "stori": 354, "gl_3": 354, "benefit": 354, "pleasant": 354, "circuit": 354, "quantiti": 354, "destroi": 354, "counter_exampl": 354, "999": 354, "x_y": 354, "econom": 354, "launch": 354, "interrupt": 354, "suspend": 354, "stupidest": 354, "narg": 354, "311411457046609920000": 354, "impract": 354, "prohibit": 354, "strategi": 354, "magic": 354, "hood": 354, "ell_0": 354, "compromis": 354, "decis": 354, "problemat": 354, "barvinok": 354, "latt": 354, "ei": 354, "stereograph": 354, "perspect": 354, "stipul": 354, "bt5": 354, "substanti": 354, "chemist": 354, "molecul": 354, "alkan": 354, "carbon": 354, "hydrogen": 354, "nonetheless": 354, "12005168": 354, "father": 354, "142": 354, "fashion": 354, "alexandr": 354, "casamay": 354, "guillaum": 354, "connan": 354, "dumont": 354, "fouss": 354, "fran\u00e7oi": 354, "maltei": 354, "matthia": 354, "meulien": 354, "mezzarobba": 354, "cl\u00e9ment": 354, "pernet": 354, "zimmermann": 354, "sagebook": 354, "is_repeat": 355, "vector_partit": 355, "integervectorsiter": 355, "vect": 355, "elementwis": 355, "vecpar": 355, "partition_at_vertex": 355, "vec": 355, "vp": 355, "vec_par": 355, "find_min": 355, "618": [356, 369], "codingofrotationword": [356, 359, 369], "longest_common_prefix": [356, 359, 367], "abstract_word": 356, "word_class": [356, 359, 360, 366, 368], "apply_morph": 356, "abba": [356, 359, 371], "ababa": [356, 359, 363, 368], "abbaabbaab": [356, 359], "8998988998898998988989988998988998898998": 356, "complete_return_words_iter": 356, "unic": [356, 362], "01101001100101101": 356, "01101001011001101": 356, "011010011001011001101": 356, "0110100101101": 356, "justin": 356, "vuillon": 356, "sturmian": [356, 359, 369], "episturmian": [356, 369], "theor": [356, 369], "0123456789": [356, 359, 366], "22112122": [356, 359], "22112": [356, 359], "555008": [356, 359], "aabbabaa": [356, 359], "1211222112112112221122211222112112112221": 356, "factor_occurrences_iter": [356, 359], "121213211213": [356, 359], "finite_differ": [356, 366], "131313131": 356, "first_occurr": [356, 359, 366], "01234567890123456789": 356, "3456": 356, "1003": [356, 372], "iterated_right_palindromic_closur": [356, 366], "1213121": [356, 359], "abacaba": [356, 359], "aaa": [356, 362, 363, 372], "abbab": [356, 359, 362, 365, 368], "ababaabababaababa": 356, "abbaabbaababbaabbaabbaababbaabbaab": 356, "ababaabababaababaabababaababaabababaabab": 356, "abaab": [356, 359], "abaabaababaabaaba": 356, "randomword": [356, 369], "pseudopalindrom": [356, 359], "sci": [356, 369], "rairo": 356, "informat": 356, "lex_great": 356, "abbb": [356, 359], "lex_less": 356, "0110100110": 356, "longest_periodic_prefix": 356, "finiteword_iter_with_cach": [356, 366], "0000000000000000000000000000000000000000": 356, "palindrome_prefixes_iter": 356, "abaaba": [356, 359], "aba": [356, 359, 362, 363, 365, 372], "01001010010": [356, 359], "0100101001001010010": 356, "01367146024": 356, "01323102020": 356, "01101100000": 356, "prefixes_iter": 356, "abaa": 356, "01001": 356, "0100101": 356, "01001010": [356, 359], "return_words_iter": 356, "baccabccbacbca": 356, "bacca": [356, 362], "bcc": [356, 362], "bac": 356, "011010011001": [356, 359], "011010010110": 356, "0110100110010110": 356, "01101001": [356, 359, 366], "abbabaab": [356, 359, 366, 370], "wordopt": [356, 357, 359, 371], "letter_separ": [356, 371], "sum_digit": 356, "1001110100111010111011001011101110011011": 356, "2100002020002221222121022221022122111022": 356, "0111111111111111111111111111111111111111": 356, "2350241354435041006132432241353546006304": 356, "nth": 356, "to_integer_word": [356, 359], "_to_integer_iter": 356, "abbacabba": 356, "011020110": 356, "finiteword": [357, 362, 363, 372], "infiniteword": [357, 360, 372], "punctuat": 358, "printabl": 358, "octal": 358, "radix64": 358, "__name__": 358, "totallyorderedfiniteset_with_categori": 358, "Theses": 358, "totally_ordered_finite_set": 358, "arnaud": [359, 363, 366, 369, 372], "glen": [359, 366, 369], "julien": [359, 362], "leroi": 359, "march": 359, "reduced_rauzy_graph": 359, "a057b98": 359, "0120120120120": 359, "abbccdef": 359, "abcccabba": 359, "abcccabba04883": 359, "04883abcccabba": 359, "abcccabbaabcccabbaabcccabba04883048": 359, "10015": 359, "048830488304883": 359, "ababab": [359, 363], "4450": 359, "400040000554450": 359, "4000445044504450400044504450445044500550": 359, "010120": 359, "abaabbba": 359, "is_lyndon": [359, 366], "number_of_factor": [359, 365, 369], "critical_expon": [359, 369], "aabbb": 359, "crochemore_factor": [359, 363], "suffix_tre": [359, 365], "word_label": [359, 365], "abaabababbbbbb": 359, "abaababa": 359, "xyxxyxyyi": 359, "hardwar": 359, "factor_iter": [359, 365], "6456": 359, "5645": 359, "4564": 359, "factor_set": [359, 362, 366], "564": 359, "645": 359, "rauzy_graph": [359, 366], "bispeci": 359, "number_of_left_special_factor": 359, "bispecial_factor": 359, "finite_word": [359, 368, 372], "callablefromlistofword": 359, "finiteword_class": [359, 363, 366, 368], "bwt": 359, "burrow": 359, "wheeler": 359, "bw1994": 359, "abaccaaba": 359, "cbaabaaca": 359, "bbaaa": 359, "bbabbaca": 359, "cbbbbaaa": 359, "aabaab": [359, 363], "bbaaaa": 359, "lz_decomposit": [359, 365], "crochemor": 359, "lempel": [359, 365], "ziv": [359, 365], "cro1983": 359, "abababb": [359, 365], "abab": [359, 363], "abaababacabba": [359, 365], "abelian_complex": 359, "abelian_vector": 359, "evaluation_dict": 359, "aaabbbbb": 359, "aabaa": 359, "apply_permutation_to_lett": 359, "badc": [359, 362], "dcba": 359, "apply_permutation_to_posit": 359, "fv2002": 359, "lot2002": 359, "001010101011": 359, "0101010101": 359, "11112222": 359, "is_balanc": 359, "011001": 359, "100110": 359, "10010110": 359, "bispecial_factors_iter": 359, "121212": 359, "ev": 359, "ev_i": 359, "ev_j": 359, "signal": 359, "baab": 359, "colored_vector": 359, "autumn": 359, "commutes_with": 359, "complete_return_word": 359, "jv2000": 359, "21331233213231": 359, "2132": 359, "213312": 359, "2332": 359, "abadafd": 359, "abadafd53587": 359, "12223": 359, "1222353587": 359, "12112": 359, "21121": 359, "conjugate_posit": 359, "12113": 359, "31211": 359, "12131": 359, "012345": 359, "123450": 359, "234501": 359, "345012": 359, "450123": 359, "501234": 359, "cbbca": 359, "bbcac": 359, "bcacb": 359, "cacbb": 359, "acbbc": 359, "abcabc": [359, 363], "bcabca": 359, "cabcab": 359, "conjugates_iter": 359, "0123": [359, 363], "2301": 359, "3012": 359, "number_of_letter_occurr": [359, 368], "number_of_factor_occurr": [359, 368], "dej1972": 359, "aaba": 359, "aabaaba": 359, "djp2001": [359, 369], "g_f": 359, "pal_f": 359, "bhnr2004": [359, 369], "star2011": 359, "ara": 359, "abcacba": 359, "sa": 359, "bbgl2008": 359, "abbabaabbaababba": 359, "cabc": 359, "abcaab": 359, "000000000000": 359, "0101001010001": 359, "deg_inv_lex_less": 359, "deg_lex_less": 359, "baba": 359, "deg_rev_lex_less": 359, "aabba": 359, "delta_deriv": 359, "12211": 359, "2112": 359, "2211": 359, "11222": 359, "delta_derivate_left": 359, "delta_derivate_right": 359, "delta_inv": 359, "112212": 359, "badbcdb": 359, "evaluation_partit": 359, "acdabda": 359, "evaluation_spars": 359, "abcaccab": 359, "factor_complex": 359, "1312": 359, "2131": 359, "121312": 359, "13121": 359, "21312": 359, "213121": 359, "12123": 359, "2123": [359, 361], "factor_occurrences_in": 359, "30187": 359, "word_str": 359, "abac": 359, "first_pos_in": 359, "131231": 359, "415": 359, "5414": 359, "54412": 359, "5441": 359, "154422": 359, "5442": 359, "1254423": 359, "112221": 359, "2122212211": 359, "good_suffix_t": 359, "boyer": 359, "bm1977": 359, "121321": 359, "12412": 359, "has_period": 359, "has_prefix": [359, 367, 368], "abbabaabababa": [359, 368], "has_suffix": [359, 365, 368], "worddatatype_str": [359, 363, 366, 368], "implicit_suffix_tre": 359, "compactif": [359, 365], "trie": [359, 365], "implicitsuffixtre": [359, 365], "cacao": [359, 365], "01011": [359, 365], "inv_lex_less": 359, "abbaba": [359, 363], "cfz2000": 359, "1122": [359, 361], "121333121": 359, "121122121": 359, "is_cad": 359, "cadenc": 359, "121132123": 359, "is_christoffel": 359, "christoffel": [359, 369], "ber2007": 359, "blrs2009": 359, "00100101": 359, "aab": [359, 362, 372], "123123123": 359, "00100": 359, "is_conjugate_with": 359, "is_cub": [359, 366], "012012012": 359, "01010101": 359, "012012": 359, "is_cube_fre": 359, "32221": 359, "is_factor": 359, "pu": 359, "123121332131233121132123": 359, "1231241231312312312": 359, "rich": 359, "pest2011": 359, "2194": 359, "lot1983": 359, "123132133": 359, "122112": 359, "123123": 359, "1231231": 359, "lab2008": 359, "azz2005": 359, "esop": 359, "ici": 359, "repos": 359, "esoperesteicietserepos": 359, "abbcbba": 359, "abcbdba": 359, "aababb": [359, 363], "abacbacbab": 359, "keyerror": 359, "is_prefix": [359, 368], "is_primit": [359, 362], "is_proper_prefix": 359, "is_proper_suffix": 359, "is_quasiperiod": 359, "quasiperiod": 359, "superposit": 359, "ae1993": 359, "mar2004": 359, "glr2008": 359, "abaababaabaababaaba": 359, "is_rich": 359, "is_smooth_prefix": 359, "bl2003": 359, "bdlv2006": 359, "is_squar": [359, 366, 367], "is_square_fre": [359, 366], "31212": 359, "is_sturmian_factor": 359, "0111011011011101101": 359, "lowermechanicalword": [359, 369], "characteristicsturmianword": [359, 369], "aabb": [359, 365], "kolakoskiword": [359, 369], "arn2002": 359, "ser1985": 359, "su2009": 359, "is_subword_of": 359, "lot1997": 359, "3211333213233321": 359, "11122212112122133111222332": 359, "longest_common_subword": 359, "number_of_subword_occurr": 359, "is_suffix": [359, 368], "56789": 359, "579": 359, "deluca2006": 359, "abbabab": 359, "aababaabba": 359, "aabbbaababba": 359, "is_tang": [359, 363], "tangent": 359, "01110110110111011101": 359, "aaabb": 359, "mon2010": 359, "is_yamanouchi": 359, "yamanouchi": 359, "iterated_left_palindromic_closur": 359, "3231323": 359, "abbaab": 359, "lacuna": 359, "unioccurr": 359, "bmbl2008": 359, "last_position_dict": 359, "1231232": 359, "left_special_factor": 359, "au": 359, "bu": 359, "1415": 359, "left_special_factors_iter": 359, "01010": 359, "length_bord": 359, "length_maximal_palindrom": 359, "0222220": 359, "abcdcbaxyzzyx": 359, "lengths_maximal_palindrom": 359, "lengths_unioccurrent_lp": 359, "h_w": 359, "bmbflr2008": 359, "lps_length": 359, "longest_backward_extens": 359, "0011001": [359, 365], "longest_common_subsequence_problem": 359, "1010101010101010101010101010101010101010": 359, "0011001100110011001100110011001100110011": 359, "00110011001100110011010101010": 359, "longest_common_suffix": [359, 367], "112345678": 359, "1115678": 359, "5678": 359, "549332345": 359, "longest_forward_extens": 359, "0111": 359, "011101": 359, "6667": 359, "33412321": 359, "pal": [359, 369], "bab": [359, 362, 372], "bbabaa": 359, "duv1983": 359, "010010010001000": 359, "10010010001000": 359, "abbababbaababba": 359, "abb": [359, 362, 368, 372], "ababb": [359, 362, 365], "bbababbaaba": 359, "bba": [359, 362, 369, 372], "minimal_conjug": 359, "lexicographically_minimal_string_rot": 359, "11212": 359, "211211211": 359, "112112112": 359, "minimal_period": [359, 366], "a_1a_2": 359, "ababaa": 359, "ababac": 359, "aaaaaa": 359, "nb_factor_occurrences_in": 359, "112332312313112332121123": 359, "11233231231311233221123": 359, "nb_subword_occurrences_in": 359, "lothair": [359, 362, 369], "sakarovitch": 359, "simon": [359, 362], "2604124996": 359, "20370432": 359, "mssy2001": 359, "blueberri": [359, 365], "number_of_right_special_factor": 359, "ua": 359, "ababaaba": 359, "overlap_partit": 359, "u_k": [359, 365], "v_0v_1": 359, "abc012345": 359, "01234": 359, "element_to_root_dict": 359, "56789567895678": 359, "01234567876543210": 359, "0110456654": 359, "palindrome_prefix": 359, "abbbbbbbbbb": 359, "palindromic_closur": 359, "1233": 359, "123321": 359, "12332": 359, "0110343": 359, "01103430110": 359, "3430110343": 359, "01105678": 359, "876501105678": 359, "abbababba": 359, "babaabbaba": 359, "palindromic_complex": 359, "palindromic_lacunas_studi": 359, "abbabaabbaab": 359, "baabbaab": 359, "aabbaa": 359, "divide_length": 359, "222222": 359, "212113": 359, "21215": 359, "aabbabaabaabba": 359, "a22222": 359, "2233": [359, 361], "prefix_function_t": 359, "1241245": 359, "primitive_length": 359, "abaababaaba": 359, "012": [359, 362], "567": 359, "678": [359, 362], "789": 359, "prolong": [359, 362, 369], "bdlgz2009": 359, "bps2008": 359, "3456789": 359, "01010010": 359, "abcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcd": 359, "abcdc": 359, "cdcdc": 359, "dur1998": 359, "hz1999": 359, "21331": 359, "return_words_deriv": 359, "dangl": 359, "12131221312313122": 359, "123242": 359, "rev_lex_less": 359, "124563": 359, "365421": 359, "rfind": [359, 368], "right_special_factor": 359, "right_special_factors_iter": 359, "00101": 359, "11010": 359, "7849631": 359, "011233": 359, "012133": 359, "012313": 359, "012331": 359, "021133": 359, "021313": 359, "021331": 359, "023113": 359, "023131": 359, "023311": 359, "201133": 359, "201313": 359, "201331": 359, "203113": 359, "203131": 359, "203311": 359, "230113": 359, "230131": 359, "230311": 359, "233011": 359, "acbd": 359, "acdb": 359, "cabd": 359, "cadb": 359, "cdab": 359, "caca": [359, 365], "00110011010": [359, 365], "00110011": [359, 365], "01100110": [359, 365], "standard_factor": [359, 369], "cfl1958": 359, "0010110011": 359, "001011": 359, "1223312": 359, "12233": 359, "001011001": 359, "123221": 359, "112223": 359, "12322121": 359, "11122223": 359, "32222111": 359, "aaabbb": 359, "bbbaaa": 359, "sturmian_desubstitute_as_poss": 359, "desubstitut": 359, "acceler": 359, "10111101101110111": 359, "01100101": 359, "azaazaaazaaazaazaaaz": 359, "az": 359, "subword_complementari": 359, "tamtam": 359, "mta": 359, "tam": 359, "mtam": 359, "amtm": 359, "tamm": 359, "suffix_tri": 359, "suffixtri": [359, 365], "swap_decreas": 359, "swap_increas": 359, "to_integer_list": 359, "10102": 359, "to_monoid_el": 359, "aaaaa": [359, 365], "topological_entropi": 359, "entropi": 359, "rate": 359, "lim_": [359, 369], "log_d": 359, "p_u": 359, "fog2002": 359, "935784974019201": 359, "topo": 359, "71699": 359, "48074": 359, "36396": 359, "28774": 359, "23628": 359, "20075": 359, "17270": 359, "14827": 359, "ok": 359, "word_to_ordered_set_partit": 359, "noob": 359, "hell": 359, "0488304883048830488304883048830488304883": 360, "0120120120120120120120120120120120120120": 360, "liner": 360, "4444444444444444444444444444444444444444": 360, "abbabaabbaababbabaababbaabbabaabbaababba": [360, 362, 369, 370], "babababababababababababababababababababa": 360, "infinite_word": [360, 372], "infiniteword_class": [360, 366], "0123450123450123450123450123450123450123": 360, "lyndon_word": 361, "2333": 361, "1315": 361, "1123": 361, "lyndonwords_class": 361, "lyndonwords_evalu": 361, "1223": 361, "lyndonwords_nk": 361, "1113": 361, "1333": 361, "2223": 361, "standardbracketedlyndonword": 361, "sblw33": 361, "standardbracketedlyndonwords_nk": 361, "standard_bracket": 361, "standard_unbracket": 361, "sblw": 361, "xyxsxss": 362, "xyss": 362, "0221": 362, "022122122102": 362, "0221221": 362, "22122102": 362, "xxxsy": 362, "xyxsxssxyxsxssxyxsxssxyssi": 362, "ysxyssxyxsxssysxyssxyss": 362, "xyxsxssysxyxsxssxyssxyxsxssxyssxyssysxi": 362, "is_ident": 362, "is_endomorph": 362, "periodicpointiter": 362, "periodic_point": 362, "cba": 362, "_cach": 362, "get_iter": 362, "666a": 362, "a6a": 362, "abelian_rotation_subspac": 362, "asd": 362, "bcdea": 362, "cdeab": 362, "zxy": 362, "dual_map": 362, "analys": 362, "extend_bi": 362, "varphi_2": 362, "abbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb": 362, "abcc": 362, "cbc": 362, "bcbbcbcbbcbbcbcbbcbcbbcbbcbcbbcbbcbcbbcb": 362, "baababbaabbabaababbabaabbaababbaabbabaab": 362, "abcaababcabcaabcaababcaababcabcaababcabc": 362, "cab": 362, "abcabbccabcabcabbccbccabcabbccabcabbccab": 362, "13668": 362, "s7": 362, "12232342": 362, "s7r": 362, "321331332133133": 362, "133321331332133133": 362, "2133133133321331332133133": 362, "growing_lett": 362, "is_grow": 362, "has_conjugate_in_classp": 362, "q_b": 362, "pq_b": 362, "pq_": 362, "hof": 362, "knill": 362, "schr\u00f6dinger": 362, "159": 362, "propriet": 362, "memoir": 362, "maitris": 362, "mathematiqu": 362, "montreal": [362, 369], "uqam": [362, 363], "is_in_classp": 362, "has_left_conjug": 362, "has_right_conjug": 362, "immortal_lett": 362, "immort": 362, "cac": [362, 365], "abbccccabca": 362, "infinite_repetitions_primitive_root": 362, "allow_grow": 362, "sake": 362, "ks2015": 362, "inf_rep": 362, "_language_na": 362, "1b5": 362, "fcg": 362, "dae": 362, "1432f2143f3214f4321f": 362, "5678g8567g7856g6785g": 362, "wabc": 362, "8674": 362, "adab": 362, "cbcd": 362, "is_eras": 362, "cassnic10": 362, "cassaign": [362, 369], "8618": 362, "bbaba": 362, "acbcc": 362, "acbab": 362, "acbba": 362, "sardina": 362, "patterson_algorithm": 362, "20001": 362, "is_involut": 362, "exercic": 362, "allouch": 362, "shallit": 362, "is_prolong": 362, "aac": 362, "8595": 362, "is_pushi": 362, "pushi": 362, "abca": 362, "bcb": 362, "is_repetit": 362, "morphic": [362, 366], "hanoi": 362, "cda": 362, "is_self_compos": 362, "is_unboundedly_repetit": 362, "unboundedli": 362, "dol": 362, "chacon": 362, "0001000101": 362, "0001010010": 362, "1010010001": 362, "1010010100": 362, "latex_layout": 362, "onelin": 362, "letter_growth_typ": 362, "mortal": 362, "perron": 362, "exponention": 362, "expo": 362, "cacd": 362, "debcd": 362, "list_of_conjug": 362, "triangleleft": 362, "bowti": 362, "babba": 362, "babab": 362, "baa": [362, 372], "partition_of_domain_alphabet": 362, "abbababbababbabababbababbabababbababbaba": 362, "31759": 362, "ababaaababaaabaabaababaaababaaabaabaabab": 362, "baaabaabaababaaabaababaaabaababaaababaaa": 362, "aababaaaababaababbabaababaababbabaababaa": 362, "8765432765432654325432432322176543265432": 362, "9876543287654327654326543254324323221876": 362, "6543254324323221543243232214323221322121": 362, "7654326543254324323221654325432432322154": 362, "31454": 362, "bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb": 362, "pisot_eigenvector_left": 362, "irreduct": 362, "aaaabbc": 362, "aaabbc": 362, "aabc": 362, "8392867552141611": 362, "5436890126920763": 362, "pisot_eigenvector_right": [362, 363], "2955977425220848": 362, "rauzy_fractal_plot": 362, "plot_origin": 362, "plot_basi": 362, "million": 362, "finitewordpath_al": [362, 363], "plot_project": [362, 363], "50000": 362, "size_alphabet": 362, "hokkaido": 362, "scatter": 362, "2122": 362, "1122233": 362, "300000": 362, "150000": 362, "funni": 362, "bernat": 362, "replic": 362, "30000": 362, "valeri": 362, "berth": 362, "siegel": 362, "ejcnt": 362, "rauzy_fractal_point": 362, "rauzy_fractal_project": 362, "41964337760708": 362, "606290729207199": 362, "771844506346038": 362, "11514250803994": 362, "restrict_domain": 362, "dsa": 362, "simplify_alphabet_s": 362, "ko2000": 362, "aca": [362, 365], "acab": 362, "zy": [362, 372], "xxzx": 362, "xyxz": 362, "abdd": 362, "xyi": 362, "xzy": 362, "xzz": 362, "xyyxyz": 362, "yx": [362, 372], "simplify_until_inject": 362, "quadruplet": 362, "get_cycl": 362, "subdomain": 362, "inertia": 363, "freeman": 363, "hierarchi": 363, "letters_to_step": 363, "abaccba": 363, "trajectori": 363, "is_clos": 363, "finitewordpath_2d_str": 363, "finitewordpath_2d": 363, "herit": 363, "rrr": 363, "rsr": 363, "rss": 363, "srr": 363, "ssr": 363, "sss": 363, "square_grid": 363, "abcdef": [363, 366], "triangle_grid": 363, "babaddefadabcadefaadfafabacdefa": 363, "abcabcabcabcaabacabcababcacbabacacabcaccbcac": 363, "rstu": 363, "rtusuusususuturrsust": 363, "end_point": 363, "cubepath": 363, "cube_grid": 363, "abcabaabcabaaaaa": 363, "012321232": 363, "0123012301": 363, "0321": 363, "1961": 363, "lipkin": 363, "rosenfeld": 363, "psychopictor": 363, "academ": 363, "braquelair": 363, "vialard": 363, "regular_til": 363, "aaababbb": 363, "abababababab": 363, "fibonacci_til": [363, 369], "gif": 363, "aababaabbbaa": 363, "abbaa": 363, "abaabb": 363, "ababcaabc": 363, "59807621135332": 363, "height_vector": 363, "abbba": 363, "pathopt": 363, "fillopt": 363, "startpoint": 363, "startopt": 363, "pointsiz": 363, "endarrow": 363, "arrowopt": 363, "gridlin": 363, "gridopt": 363, "abababaabab": 363, "abababaababb": 363, "abcdedededefab": 363, "abababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab": 363, "ababababab": 363, "plot_directive_vector": 363, "aaaccaccacacacaccccccbbdd": 363, "set_aspect_ratio": 363, "width_vector": 363, "xmax": 363, "0101013332": 363, "xmin": 363, "ymax": 363, "ymin": 363, "finitewordpath_2d_cal": 363, "worddatatype_cal": [363, 366, 370], "finitewordpath_2d_callable_with_cach": 363, "worddatatype_callable_with_cach": [363, 366, 370], "finitewordpath_2d_it": 363, "worddatatype_it": [363, 366, 370], "finitewordpath_2d_iter_with_cach": 363, "worddatatype_iter_with_cach": [363, 366, 370], "finitewordpath_2d_list": 363, "worddatatype_list": [363, 366, 368], "finitewordpath_2d_tupl": 363, "worddatatype_tupl": [363, 366, 368], "finitewordpath_3d": 363, "arrow_head": 363, "abcabcaabbc": 363, "finitewordpath_3d_cal": 363, "finitewordpath_3d_callable_with_cach": 363, "finitewordpath_3d_it": 363, "finitewordpath_3d_iter_with_cach": 363, "finitewordpath_3d_list": 363, "finitewordpath_3d_str": 363, "finitewordpath_3d_tupl": 363, "directive_vector": 363, "abababab": 363, "ababababcc": 363, "abcabababacaacccbbcac": 363, "aacacc": 363, "aabde": 363, "aabbabbab": 363, "include_last": 363, "projected_path": 363, "1213121121312121312112131213121121312121": 363, "projected_point_iter": 363, "526233343362516": 363, "220830337618112": 363, "477656250512816": 363, "305403005744404": 363, "100767309386062": 363, "400890564600664": 363, "425466033976454": 363, "78087": 363, "5617": 363, "93704": 363, "31235": 363, "0932": 363, "46852": 363, "15617": 363, "start_point": 363, "tikz_trajectori": 363, "866": [363, 369], "finitewordpath_all_cal": 363, "finitewordpath_all_callable_with_cach": 363, "finitewordpath_all_it": 363, "finitewordpath_all_iter_with_cach": 363, "finitewordpath_all_list": 363, "finitewordpath_all_str": 363, "finitewordpath_all_tupl": 363, "finitewordpath_cube_grid": 363, "finitewordpath_cube_grid_cal": 363, "finitewordpath_cube_grid_callable_with_cach": 363, "finitewordpath_cube_grid_it": 363, "finitewordpath_cube_grid_iter_with_cach": 363, "finitewordpath_cube_grid_list": 363, "finitewordpath_cube_grid_str": 363, "finitewordpath_cube_grid_tupl": 363, "finitewordpath_dyck": 363, "finitewordpath_dyck_cal": 363, "finitewordpath_dyck_callable_with_cach": 363, "finitewordpath_dyck_it": 363, "finitewordpath_dyck_iter_with_cach": 363, "finitewordpath_dyck_list": 363, "finitewordpath_dyck_str": 363, "finitewordpath_dyck_tupl": 363, "finitewordpath_hexagonal_grid": 363, "finitewordpath_triangle_grid": 363, "words_al": 363, "abstractword": 363, "aaabbbccddef": 363, "finitewordpath_hexagonal_grid_cal": 363, "finitewordpath_hexagonal_grid_callable_with_cach": 363, "finitewordpath_hexagonal_grid_it": 363, "finitewordpath_hexagonal_grid_iter_with_cach": 363, "finitewordpath_hexagonal_grid_list": 363, "finitewordpath_hexagonal_grid_str": 363, "finitewordpath_hexagonal_grid_tupl": 363, "finitewordpath_north_east_cal": 363, "finitewordpath_north_east_callable_with_cach": 363, "finitewordpath_north_east_it": 363, "finitewordpath_north_east_iter_with_cach": 363, "finitewordpath_north_east_list": 363, "finitewordpath_north_east_str": 363, "finitewordpath_north_east_tupl": 363, "finitewordpath_square_grid": 363, "aabbaabb": 363, "aabbabab": 363, "dual_fibonacci_til": [363, 369], "a001653": 363, "first_term": 363, "33461": 363, "195025": 363, "1136689": 363, "6625109": 363, "38613965": 363, "225058681": 363, "1311738121": 363, "7645370045": 363, "44560482149": 363, "259717522849": 363, "1513744654945": 363, "8822750406821": 363, "51422757785981": 363, "299713796309065": 363, "1746860020068409": 363, "10181446324101389": 363, "59341817924539925": 363, "ababaabb": 363, "aaabbbaabb": 363, "proven\u00e7": 363, "mot": 363, "g\u00e9ometri": 363, "discr\u00e8t": 363, "pavag": 363, "th\u00e8se": 363, "doctorat": 363, "montr\u00e9al": 363, "septembr": 363, "finitewordpath_square_grid_cal": 363, "finitewordpath_square_grid_callable_with_cach": 363, "finitewordpath_square_grid_it": 363, "finitewordpath_square_grid_iter_with_cach": 363, "finitewordpath_square_grid_list": 363, "finitewordpath_square_grid_str": 363, "finitewordpath_square_grid_tupl": 363, "abacacacababababcbcbac": 363, "66025403784439": 363, "866025403784439": 363, "finitewordpath_triangle_grid_cal": 363, "finitewordpath_triangle_grid_callable_with_cach": 363, "finitewordpath_triangle_grid_it": 363, "finitewordpath_triangle_grid_iter_with_cach": 363, "finitewordpath_triangle_grid_list": 363, "finitewordpath_triangle_grid_str": 363, "finitewordpath_triangle_grid_tupl": 363, "hexagonal_grid": 363, "cric": 363, "crac": 363, "croc": 363, "ruld": 363, "wordpaths_al": 363, "vector_spac": 363, "732050807568878": 363, "wordpaths_cube_grid": 363, "wordpaths_dyck": 363, "wordpaths_hexagonal_grid": 363, "wordpaths_triangle_grid": 363, "wordpaths_north_east": 363, "wordpaths_square_grid": 363, "shuffleproduct_shift": 364, "misbehav": 364, "1342": 364, "3124": 364, "1423": 364, "1432": 364, "143": [364, 367], "decoratedsuffixtre": 365, "ds2004": 365, "square_vocabulari": 365, "truli": 365, "ukkonen": 365, "ukko1995": 365, "dealt": 365, "closest": 365, "_active_st": 365, "storag": 365, "aco": 365, "factoris": 365, "ib": 365, "0000100101": 365, "active_st": 365, "edge_iter": 365, "acao": 365, "cao": 365, "leftmost_covering_set": 365, "abaabaabbaaabaaba": 365, "abaca": 365, "tree_root": 365, "tree_orient": 365, "vertex_color": 365, "process_lett": 365, "suffix_link": 365, "suffix_walk": 365, "aw": 365, "end_nod": 365, "00110111011": 365, "to_explicit_suffix_tre": 365, "transition_function_dictionari": 365, "trie_type_dict": 365, "uncompactifi": 365, "xa": 365, "node_to_word": 365, "abcba": 365, "abcb": 365, "ababba": 365, "ababbaa": 365, "_transition_funct": 365, "finiteword_cal": 366, "666666666333333333333333333333": 366, "finiteword_callable_with_cach": 366, "01201201201201201201201201201201": 366, "01201201201201201201201201201": 366, "finiteword_char": [366, 367], "worddatatype_char": [366, 367], "123456789123456789": 366, "randint": [366, 369], "finiteword_it": 366, "111111111": 366, "cdefab": 366, "finiteword_list": [366, 369], "0102010301020104010201030102010501020103": [366, 369], "finiteword_morph": 366, "worddatatype_morph": 366, "finiteword_str": 366, "finiteword_tupl": 366, "infiniteword_cal": 366, "braquet": 366, "infiniteword_callable_with_cach": 366, "infiniteword_it": 366, "letsgo": 366, "letsgoforeverforeverforeverforeverforev": 366, "infiniteword_iter_with_cach": 366, "9849849849849849849849849849849849849849": 366, "98498498498498498498498": 366, "infiniteword_morph": 366, "rsk_data": 366, "freemonoid": 366, "xxxyxzzx": 366, "word_it": 366, "1149114911491149114911491149114911491149": 366, "2112112112112112112112112112112112112112": 366, "word_iter_with_cach": 366, "1231231231231231231231231231231231231231": 366, "1101101101101101101101101101101101101101": 366, "word_char": 367, "worddatatyp": [367, 368, 370], "021000": 367, "5000": 367, "608": 367, "reversed_word_iter": 367, "__reversed__": 367, "word_datatyp": 368, "_parent": 368, "anywher": 368, "builtin": 368, "mytailorispoor": 368, "ispoor": 368, "3230301030323212323032321210121232121010": [368, 369], "0301030323212323032321210121232121010": 368, "papa": 368, "etait": 368, "un": 368, "petit": 368, "pioupiou": 368, "maxsplit": 368, "sentenc": 368, "poor": 368, "ababbabaaba": 368, "3230301030323212323032321": 368, "30301030": 368, "7543": 369, "ac03": 369, "adamczewski": 369, "transcend": 369, "bmbgl07": 369, "blondin": 369, "mass\u00e9": 369, "brlek": 369, "bmbgl09": 369, "garon": 369, "dgci": 369, "fogg": 369, "pythea": 369, "lirmm": 369, "pytheasfogg": 369, "adiqu": 369, "word_gener": 369, "lowerchristoffelword": 369, "00100100101": 369, "aabaabaabab": 369, "markoff_numb": 369, "markoff": 369, "m0": 369, "294685": 369, "7561": 369, "00100100100101": 369, "0101011010101101011": 369, "0101011010101101011010101101010110101101": 369, "wordgener": 369, "christoffelword": 369, "0010010100101": 369, "1311131221": 369, "1010110101101101011010110110101101101011": 369, "tmword": 369, "s_adic": 369, "abbaababbaabbaabbaababbaababbaabbaababba": 369, "baumsweetword": 369, "baum": 369, "sweet": 369, "submonoid": 369, "sweet_sequ": 369, "1101100101001001100100000100100101001001": 369, "bin": 369, "irrat": 369, "ac_": 369, "intercept": 369, "orderedalphabet": 369, "11110": 369, "01001001001001": 369, "0000001000000100000010000001000000100000": 369, "rsrrsrsrrsrrsrsrrsrsrrsrrsrsrrsrrsrsrrsr": 369, "0100100101001001001010010010010100100101": 369, "01001001": 369, "01001001010": 369, "010010010100100100101001001001": 369, "1101010101001010101011010101010010101010": 369, "yyxyxyxyxyxxyxyxyxyxyyxyxyxyxyxxyxyxyxyx": 369, "construction_method": 369, "golden": 369, "4144141441441414414144144141441441414414": 369, "fixedpointofmorph": 369, "first_lett": 369, "kolakoski": 369, "oldenburg": 369, "1221121221221121122121121221121121221221": 369, "2211212212211211221211212211211212212211": 369, "2255222225555522552255225555522222555552": 369, "kolakoski66": 369, "5304": 369, "monthli": 369, "necdet": 369, "\u00fc\u00e7oluk": 369, "681": 369, "0010010100100101001010010010100100101001": 369, "0000100001000010000100001000010000100001": 369, "0001001001001001001001000100100100100100": 369, "minimalsmoothprefix": 369, "bmp2007": 369, "1212212112": 369, "palindromicdefectword": 369, "hamel": 369, "nivat": 369, "abbbbbbbbbbabbbbbbbbbaabbbbbbbbbabbbbbbb": 369, "abbbabbaabbabbba": 369, "cdddcddccddcdddc": 369, "c333c33cc33c333c": 369, "0110100101": 369, "0322313320": 369, "2630644023642516442650025611300034413310": 369, "acebeaaccdbedbbbdeadeebbdeeebeaaacbadaac": 369, "dcacbbecbddebaadd": 369, "standardepisturmianword": 369, "directive_word": 369, "epistandard": 369, "x_1x_2x_3": 369, "jp2002": 369, "gj2007": 369, "abacabaabacababacabaabacabacabaabacababa": 369, "aabcabada": 369, "aabaacaabaaabaacaabaabaacaabaaabaacaabaa": 369, "abaabaababaabaabaababaabaababaabaabaabab": 369, "abaabaababaabaabaababaaba": 369, "abaabacabaabaabacabaababaabacabaabaabaca": 369, "brlek89": 369, "mh38": 369, "0112122012202001122020012001011212202001": 369, "0120112012201200120112012120122012001201": 369, "hedlund": 369, "815": 369, "upperchristoffelword": 369, "xui": 369, "yux": 369, "10100100100": 369, "uppermechanicalword": 369, "1010010100100101001010010010100100101001": 369, "1000010000100001000010000100001000010000": 369, "1001001001001001001001000100100100100100": 369, "32123032301030121012": 369, "3212303230103230321232101232123032123210": 369, "323030101212": 369, "hg": 369, "ef": 369, "ghhg": 369, "eca": 369, "ghhggh": 369, "ghghhg": 369, "hypothesi": 369, "ecb": 369, "versatil": 369, "tmwordtf": 369, "prandom": 369, "abbaabababbaababbaabbaababbaabababbaabba": 369, "abbaababbaabbaababbaababbaabbaababbaabba": 369, "abaaababaabaabaaababaabaaababaaababaabaa": 369, "cddc": 369, "cddcdccddccdcddcdccdcddccddcdccddccdcddc": 369, "bbba": 369, "bbbba": 369, "bbbbba": 369, "bbbbbba": 369, "bbbbbbba": 369, "x_h": 369, "3111": 369, "31111": 369, "3232232232322322322323223223232232232232": 369, "word_infinite_datatyp": 370, "_letter_cach": 370, "abbabaabbaababbabaababbaabbabaabbaababbaabbabaabab": 370, "abbabaababbabaababbabaababbabaababbabaab": 370, "_len": 370, "_last_index": 370, "word_opt": 371, "truncate_length": 371, "word_inheritance_howto": 372, "6571": 372, "19619": 372, "abstractlanguag": 372, "identity_morph": 372, "finiteorinfiniteword": 372, "iter_morph": 372, "transmit": 372, "5114325445423521544531411434451152142155": 372, "abbbabbaabbbabbabbaabaabbabbbbbbbbaabbbb": 372, "3333223322232233333223323223222233233233": 372, "words_n": 372, "96889010407": 372, "bbab": 372, "yang_baxter_graph": 373, "swapincreasingoper": 373, "swapoper": 373, "yangbaxtergraph": 373, "yangbaxtergraph_partit": 373, "yangbaxtergraph_gener": 373, "bubbl": 373, "bubbleswap": 373, "permutahedron": 373, "swapper": 373, "left_multiplication_bi": 373, "cyclicpermutationgroup": 373, "relabel_edg": 373, "edge_dict": 373, "relabel_op": 373, "relabel_vertic": 373, "relabel_oper": 373, "vertex_relabelling_dict": 373, "c_0a_n": 374, "c_1a_": 374, "cfinitesequ": 374, "gk1982": 374, "kp2011": 374, "sz1994": 374, "zei2011": 374, "ogf": 374, "fieldel": 374, "closed_form": 374, "binet": 374, "full_simplifi": 374, "recurrence_repr": 374, "laurent_series_ring_el": 374, "laurentseri": 374, "cfinitesequences_gener": 374, "commutativ": 374, "lll": 374, "bm": 374, "berlekamp": 374, "massei": 374, "ngen": 374}, "objects": {"sage.combinat": [[2, 0, 0, "-", "abstract_tree"], [3, 0, 0, "-", "affine_permutation"], [4, 0, 0, "-", "algebraic_combinatorics"], [5, 0, 0, "-", "all"], [6, 0, 0, "-", "alternating_sign_matrix"], [7, 0, 0, "-", "backtrack"], [8, 0, 0, "-", "baxter_permutations"], [9, 0, 0, "-", "bijectionist"], [10, 0, 0, "-", "binary_recurrence_sequences"], [11, 0, 0, "-", "binary_tree"], [12, 0, 0, "-", "blob_algebra"], [13, 0, 0, "-", "cartesian_product"], [14, 0, 0, "-", "catalog_partitions"], [24, 0, 0, "-", "cluster_complex"], [25, 0, 0, "-", "colored_permutations"], [26, 0, 0, "-", "combinat"], [27, 0, 0, "-", "combinat_cython"], [28, 0, 0, "-", "combination"], [29, 0, 0, "-", "combinatorial_map"], [30, 0, 0, "-", "composition"], [31, 0, 0, "-", "composition_signed"], [32, 0, 0, "-", "composition_tableau"], [33, 0, 0, "-", "constellation"], [34, 0, 0, "-", "core"], [35, 0, 0, "-", "counting"], [70, 0, 0, "-", "cyclic_sieving_phenomenon"], [71, 0, 0, "-", "debruijn_sequence"], [72, 0, 0, "-", "degree_sequences"], [73, 0, 0, "-", "derangements"], [74, 0, 0, "-", "descent_algebra"], [98, 0, 0, "-", "diagram"], [99, 0, 0, "-", "diagram_algebras"], [100, 0, 0, "-", "dlx"], [101, 0, 0, "-", "dyck_word"], [102, 0, 0, "-", "e_one_star"], [103, 0, 0, "-", "enumerated_sets"], [104, 0, 0, "-", "enumeration_mod_permgroup"], [105, 0, 0, "-", "expnums"], [106, 0, 0, "-", "family"], [107, 0, 0, "-", "fast_vector_partitions"], [108, 0, 0, "-", "finite_state_machine"], [109, 0, 0, "-", "finite_state_machine_generators"], [110, 0, 0, "-", "fqsym"], [111, 0, 0, "-", "free_dendriform_algebra"], [112, 0, 0, "-", "free_module"], [113, 0, 0, "-", "free_prelie_algebra"], [114, 0, 0, "-", "fully_commutative_elements"], [115, 0, 0, "-", "fully_packed_loop"], [116, 0, 0, "-", "gelfand_tsetlin_patterns"], [117, 0, 0, "-", "graph_path"], [118, 0, 0, "-", "gray_codes"], [119, 0, 0, "-", "grossman_larson_algebras"], [120, 0, 0, "-", "growth"], [121, 0, 0, "-", "hall_polynomial"], [122, 0, 0, "-", "hillman_grassl"], [126, 0, 0, "-", "integer_matrices"], [127, 0, 0, "-", "integer_vector"], [128, 0, 0, "-", "integer_vector_weighted"], [129, 0, 0, "-", "integer_vectors_mod_permgroup"], [130, 0, 0, "-", "interval_posets"], [131, 0, 0, "-", "k_tableau"], [132, 0, 0, "-", "kazhdan_lusztig"], [133, 0, 0, "-", "key_polynomial"], [134, 0, 0, "-", "knutson_tao_puzzles"], [140, 0, 0, "-", "misc"], [141, 0, 0, "-", "multiset_partition_into_sets_ordered"], [152, 0, 0, "-", "necklace"], [153, 0, 0, "-", "non_decreasing_parking_function"], [154, 0, 0, "-", "nu_dyck_word"], [155, 0, 0, "-", "nu_tamari_lattice"], [156, 0, 0, "-", "ordered_tree"], [157, 0, 0, "-", "output"], [158, 0, 0, "-", "parallelogram_polyomino"], [159, 0, 0, "-", "parking_functions"], [160, 0, 0, "-", "partition"], [161, 0, 0, "-", "partition_algebra"], [162, 0, 0, "-", "partition_kleshchev"], [163, 0, 0, "-", "partition_shifting_algebras"], [164, 0, 0, "-", "partition_tuple"], [165, 0, 0, "-", "partitions"], [171, 0, 0, "-", "perfect_matching"], [172, 0, 0, "-", "permutation"], [173, 0, 0, "-", "permutation_cython"], [174, 0, 0, "-", "plane_partition"], [188, 0, 0, "-", "q_analogues"], [189, 0, 0, "-", "q_bernoulli"], [190, 0, 0, "-", "quickref"], [191, 0, 0, "-", "ranker"], [192, 0, 0, "-", "recognizable_series"], [193, 0, 0, "-", "regular_sequence"], [194, 0, 0, "-", "restricted_growth"], [195, 0, 0, "-", "ribbon"], [196, 0, 0, "-", "ribbon_shaped_tableau"], [197, 0, 0, "-", "ribbon_tableau"], [275, 0, 0, "-", "rooted_tree"], [276, 0, 0, "-", "rsk"], [277, 0, 0, "-", "schubert_polynomial"], [278, 0, 0, "-", "set_partition"], [279, 0, 0, "-", "set_partition_iterator"], [280, 0, 0, "-", "set_partition_ordered"], [306, 0, 0, "-", "shard_order"], [307, 0, 0, "-", "shifted_primed_tableau"], [308, 0, 0, "-", "shuffle"], [309, 0, 0, "-", "sidon_sets"], [310, 0, 0, "-", "similarity_class_type"], [311, 0, 0, "-", "sine_gordon"], [312, 0, 0, "-", "six_vertex_model"], [313, 0, 0, "-", "skew_partition"], [314, 0, 0, "-", "skew_tableau"], [315, 0, 0, "-", "sloane_functions"], [316, 0, 0, "-", "specht_module"], [336, 0, 0, "-", "subset"], [337, 0, 0, "-", "subsets_hereditary"], [338, 0, 0, "-", "subsets_pairwise"], [339, 0, 0, "-", "subword"], [340, 0, 0, "-", "subword_complex"], [341, 0, 0, "-", "super_tableau"], [342, 0, 0, "-", "superpartition"], [343, 0, 0, "-", "symmetric_group_algebra"], [344, 0, 0, "-", "symmetric_group_representations"], [345, 0, 0, "-", "t_sequences"], [346, 0, 0, "-", "tableau"], [347, 0, 0, "-", "tableau_residues"], [348, 0, 0, "-", "tableau_tuple"], [349, 0, 0, "-", "tamari_lattices"], [350, 0, 0, "-", "tiling"], [351, 0, 0, "-", "tools"], [352, 0, 0, "-", "triangles_FHM"], [353, 0, 0, "-", "tuple"], [354, 0, 0, "-", "tutorial"], [355, 0, 0, "-", "vector_partition"], [373, 0, 0, "-", "yang_baxter_graph"]], "sage.combinat.abstract_tree": [[2, 1, 1, "", "AbstractClonableTree"], [2, 1, 1, "", "AbstractLabelledClonableTree"], [2, 1, 1, "", "AbstractLabelledTree"], [2, 1, 1, "", "AbstractTree"], [2, 3, 1, "", "from_hexacode"]], "sage.combinat.abstract_tree.AbstractClonableTree": [[2, 2, 1, "", "check"]], "sage.combinat.abstract_tree.AbstractLabelledClonableTree": [[2, 2, 1, "", "map_labels"], [2, 2, 1, "", "set_label"], [2, 2, 1, "", "set_root_label"]], "sage.combinat.abstract_tree.AbstractLabelledTree": [[2, 2, 1, "", "as_digraph"], [2, 2, 1, "", "label"], [2, 2, 1, "", "labels"], [2, 2, 1, "", "leaf_labels"], [2, 2, 1, "", "shape"]], "sage.combinat.abstract_tree.AbstractTree": [[2, 2, 1, "", "breadth_first_order_traversal"], [2, 2, 1, "", "canonical_labelling"], [2, 2, 1, "", "depth"], [2, 2, 1, "", "iterative_post_order_traversal"], [2, 2, 1, "", "iterative_pre_order_traversal"], [2, 2, 1, "", "node_number"], [2, 2, 1, "", "node_number_at_depth"], [2, 2, 1, "", "node_number_to_the_right"], [2, 2, 1, "", "paths"], [2, 2, 1, "", "paths_at_depth"], [2, 2, 1, "", "paths_to_the_right"], [2, 2, 1, "", "post_order_traversal"], [2, 2, 1, "", "post_order_traversal_iter"], [2, 2, 1, "", "pre_order_traversal"], [2, 2, 1, "", "pre_order_traversal_iter"], [2, 2, 1, "", "subtrees"], [2, 2, 1, "", "to_hexacode"], [2, 2, 1, "", "tree_factorial"]], "sage.combinat.affine_permutation": [[3, 1, 1, "", "AffinePermutation"], [3, 3, 1, "", "AffinePermutationGroup"], [3, 1, 1, "", "AffinePermutationGroupGeneric"], [3, 1, 1, "", "AffinePermutationGroupTypeA"], [3, 1, 1, "", "AffinePermutationGroupTypeB"], [3, 1, 1, "", "AffinePermutationGroupTypeC"], [3, 1, 1, "", "AffinePermutationGroupTypeD"], [3, 1, 1, "", "AffinePermutationGroupTypeG"], [3, 1, 1, "", "AffinePermutationTypeA"], [3, 1, 1, "", "AffinePermutationTypeB"], [3, 1, 1, "", "AffinePermutationTypeC"], [3, 1, 1, "", "AffinePermutationTypeD"], [3, 1, 1, "", "AffinePermutationTypeG"]], "sage.combinat.affine_permutation.AffinePermutation": [[3, 2, 1, "", "apply_simple_reflection"], [3, 2, 1, "", "grassmannian_quotient"], [3, 2, 1, "", "index_set"], [3, 2, 1, "", "is_i_grassmannian"], [3, 2, 1, "", "is_one"], [3, 2, 1, "", "lower_covers"], [3, 2, 1, "", "reduced_word"], [3, 2, 1, "", "signature"], [3, 2, 1, "", "to_weyl_group_element"]], "sage.combinat.affine_permutation.AffinePermutationGroupGeneric": [[3, 2, 1, "", "cartan_matrix"], [3, 2, 1, "", "cartan_type"], [3, 2, 1, "", "classical"], [3, 2, 1, "", "from_word"], [3, 2, 1, "", "index_set"], [3, 2, 1, "", "is_crystallographic"], [3, 2, 1, "", "random_element"], [3, 2, 1, "", "rank"], [3, 2, 1, "", "reflection_index_set"], [3, 2, 1, "", "weyl_group"]], "sage.combinat.affine_permutation.AffinePermutationGroupTypeA": [[3, 4, 1, "", "Element"], [3, 2, 1, "", "from_lehmer_code"], [3, 2, 1, "", "one"]], "sage.combinat.affine_permutation.AffinePermutationGroupTypeB": [[3, 4, 1, "", "Element"]], "sage.combinat.affine_permutation.AffinePermutationGroupTypeC": [[3, 4, 1, "", "Element"], [3, 2, 1, "", "one"]], "sage.combinat.affine_permutation.AffinePermutationGroupTypeD": [[3, 4, 1, "", "Element"]], "sage.combinat.affine_permutation.AffinePermutationGroupTypeG": [[3, 4, 1, "", "Element"], [3, 2, 1, "", "one"]], "sage.combinat.affine_permutation.AffinePermutationTypeA": [[3, 2, 1, "", "apply_simple_reflection_left"], [3, 2, 1, "", "apply_simple_reflection_right"], [3, 2, 1, "", "check"], [3, 2, 1, "", "flip_automorphism"], [3, 2, 1, "", "has_left_descent"], [3, 2, 1, "", "has_right_descent"], [3, 2, 1, "", "is_fully_commutative"], [3, 2, 1, "", "maximal_cyclic_decomposition"], [3, 2, 1, "", "maximal_cyclic_factor"], [3, 2, 1, "", "position"], [3, 2, 1, "", "promotion"], [3, 2, 1, "", "tableau_of_word"], [3, 2, 1, "", "to_bounded_partition"], [3, 2, 1, "", "to_core"], [3, 2, 1, "", "to_dominant"], [3, 2, 1, "", "to_lehmer_code"], [3, 2, 1, "", "to_type_a"], [3, 2, 1, "", "value"]], "sage.combinat.affine_permutation.AffinePermutationTypeB": [[3, 2, 1, "", "apply_simple_reflection_left"], [3, 2, 1, "", "apply_simple_reflection_right"], [3, 2, 1, "", "check"], [3, 2, 1, "", "has_left_descent"], [3, 2, 1, "", "has_right_descent"]], "sage.combinat.affine_permutation.AffinePermutationTypeC": [[3, 2, 1, "", "apply_simple_reflection_left"], [3, 2, 1, "", "apply_simple_reflection_right"], [3, 2, 1, "", "check"], [3, 2, 1, "", "has_left_descent"], [3, 2, 1, "", "has_right_descent"], [3, 2, 1, "", "position"], [3, 2, 1, "", "to_type_a"], [3, 2, 1, "", "value"]], "sage.combinat.affine_permutation.AffinePermutationTypeD": [[3, 2, 1, "", "apply_simple_reflection_left"], [3, 2, 1, "", "apply_simple_reflection_right"], [3, 2, 1, "", "check"], [3, 2, 1, "", "has_left_descent"], [3, 2, 1, "", "has_right_descent"]], "sage.combinat.affine_permutation.AffinePermutationTypeG": [[3, 2, 1, "", "apply_simple_reflection_left"], [3, 2, 1, "", "apply_simple_reflection_right"], [3, 2, 1, "", "check"], [3, 2, 1, "", "has_left_descent"], [3, 2, 1, "", "has_right_descent"], [3, 2, 1, "", "position"], [3, 2, 1, "", "to_type_a"], [3, 2, 1, "", "value"]], "sage.combinat.alternating_sign_matrix": [[6, 1, 1, "", "AlternatingSignMatrices"], [6, 1, 1, "", "AlternatingSignMatrix"], [6, 1, 1, "", "ContreTableaux"], [6, 1, 1, "", "ContreTableaux_n"], [6, 1, 1, "", "MonotoneTriangles"], [6, 1, 1, "", "TruncatedStaircases"], [6, 1, 1, "", "TruncatedStaircases_nlastcolumn"]], "sage.combinat.alternating_sign_matrix.AlternatingSignMatrices": [[6, 4, 1, "", "Element"], [6, 2, 1, "", "cardinality"], [6, 2, 1, "", "cover_relations"], [6, 2, 1, "", "first"], [6, 2, 1, "", "from_contre_tableau"], [6, 2, 1, "", "from_corner_sum"], [6, 2, 1, "", "from_height_function"], [6, 2, 1, "", "from_monotone_triangle"], [6, 2, 1, "", "gyration_orbit_sizes"], [6, 2, 1, "", "gyration_orbits"], [6, 2, 1, "", "last"], [6, 2, 1, "", "lattice"], [6, 2, 1, "", "matrix_space"], [6, 2, 1, "", "random_element"], [6, 2, 1, "", "size"]], "sage.combinat.alternating_sign_matrix.AlternatingSignMatrix": [[6, 2, 1, "", "ASM_compatible"], [6, 2, 1, "", "ASM_compatible_bigger"], [6, 2, 1, "", "ASM_compatible_smaller"], [6, 2, 1, "", "corner_sum_matrix"], [6, 2, 1, "", "gyration"], [6, 2, 1, "", "gyration_orbit"], [6, 2, 1, "", "height_function"], [6, 2, 1, "", "inversion_number"], [6, 2, 1, "", "is_permutation"], [6, 2, 1, "", "left_key"], [6, 2, 1, "", "left_key_as_permutation"], [6, 2, 1, "", "link_pattern"], [6, 2, 1, "", "number_negative_ones"], [6, 2, 1, "", "rotate_ccw"], [6, 2, 1, "", "rotate_cw"], [6, 2, 1, "", "to_dyck_word"], [6, 2, 1, "", "to_fully_packed_loop"], [6, 2, 1, "", "to_matrix"], [6, 2, 1, "", "to_monotone_triangle"], [6, 2, 1, "", "to_permutation"], [6, 2, 1, "", "to_semistandard_tableau"], [6, 2, 1, "", "to_six_vertex_model"], [6, 2, 1, "", "transpose"]], "sage.combinat.alternating_sign_matrix.ContreTableaux_n": [[6, 2, 1, "", "cardinality"]], "sage.combinat.alternating_sign_matrix.MonotoneTriangles": [[6, 2, 1, "", "cardinality"], [6, 2, 1, "", "cover_relations"], [6, 2, 1, "", "lattice"]], "sage.combinat.alternating_sign_matrix.TruncatedStaircases_nlastcolumn": [[6, 2, 1, "", "cardinality"]], "sage.combinat.backtrack": [[7, 1, 1, "", "GenericBacktracker"], [7, 1, 1, "", "PositiveIntegerSemigroup"]], "sage.combinat.backtrack.PositiveIntegerSemigroup": [[7, 2, 1, "", "children"], [7, 2, 1, "", "one"], [7, 2, 1, "", "roots"]], "sage.combinat.baxter_permutations": [[8, 1, 1, "", "BaxterPermutations"], [8, 1, 1, "", "BaxterPermutations_all"], [8, 1, 1, "", "BaxterPermutations_size"]], "sage.combinat.baxter_permutations.BaxterPermutations_all": [[8, 2, 1, "", "to_pair_of_twin_binary_trees"]], "sage.combinat.baxter_permutations.BaxterPermutations_size": [[8, 2, 1, "", "cardinality"]], "sage.combinat.bijectionist": [[9, 1, 1, "", "Bijectionist"]], "sage.combinat.bijectionist.Bijectionist": [[9, 2, 1, "", "constant_blocks"], [9, 2, 1, "", "minimal_subdistributions_blocks_iterator"], [9, 2, 1, "", "minimal_subdistributions_iterator"], [9, 2, 1, "", "possible_values"], [9, 2, 1, "", "set_constant_blocks"], [9, 2, 1, "", "set_distributions"], [9, 2, 1, "", "set_homomesic"], [9, 2, 1, "", "set_intertwining_relations"], [9, 2, 1, "", "set_quadratic_relation"], [9, 2, 1, "", "set_semi_conjugacy"], [9, 2, 1, "", "set_statistics"], [9, 2, 1, "", "set_value_restrictions"], [9, 2, 1, "", "solutions_iterator"], [9, 2, 1, "", "statistics_fibers"], [9, 2, 1, "", "statistics_table"]], "sage.combinat.binary_recurrence_sequences": [[10, 1, 1, "", "BinaryRecurrenceSequence"]], "sage.combinat.binary_recurrence_sequences.BinaryRecurrenceSequence": [[10, 2, 1, "", "is_arithmetic"], [10, 2, 1, "", "is_degenerate"], [10, 2, 1, "", "is_geometric"], [10, 2, 1, "", "is_quasigeometric"], [10, 2, 1, "", "period"], [10, 2, 1, "", "pthpowers"]], "sage.combinat.binary_tree": [[11, 1, 1, "", "BinaryTree"], [11, 1, 1, "", "BinaryTrees"], [11, 1, 1, "", "BinaryTrees_all"], [11, 1, 1, "", "BinaryTrees_size"], [11, 1, 1, "", "FullBinaryTrees_all"], [11, 1, 1, "", "FullBinaryTrees_size"], [11, 1, 1, "", "LabelledBinaryTree"], [11, 1, 1, "", "LabelledBinaryTrees"], [11, 3, 1, "", "binary_search_tree_shape"], [11, 3, 1, "", "from_tamari_sorting_tuple"]], "sage.combinat.binary_tree.BinaryTree": [[11, 2, 1, "", "as_ordered_tree"], [11, 2, 1, "", "canonical_labelling"], [11, 2, 1, "", "canopee"], [11, 2, 1, "", "check"], [11, 2, 1, "", "comb"], [11, 2, 1, "", "dendriform_shuffle"], [11, 2, 1, "", "graph"], [11, 2, 1, "", "hook_number"], [11, 2, 1, "", "in_order_traversal"], [11, 2, 1, "", "in_order_traversal_iter"], [11, 2, 1, "", "is_complete"], [11, 2, 1, "", "is_empty"], [11, 2, 1, "", "is_full"], [11, 2, 1, "", "is_perfect"], [11, 2, 1, "", "left_border_symmetry"], [11, 2, 1, "", "left_children_node_number"], [11, 2, 1, "", "left_right_symmetry"], [11, 2, 1, "", "left_rotate"], [11, 2, 1, "", "make_leaf"], [11, 2, 1, "", "make_node"], [11, 2, 1, "", "over"], [11, 2, 1, "", "over_decomposition"], [11, 2, 1, "", "prune"], [11, 2, 1, "", "q_hook_length_fraction"], [11, 2, 1, "", "right_rotate"], [11, 2, 1, "", "show"], [11, 2, 1, "", "single_edge_cut_shapes"], [11, 2, 1, "", "sylvester_class"], [11, 2, 1, "", "tamari_greater"], [11, 2, 1, "", "tamari_interval"], [11, 2, 1, "", "tamari_join"], [11, 2, 1, "", "tamari_lequal"], [11, 2, 1, "", "tamari_meet"], [11, 2, 1, "", "tamari_pred"], [11, 2, 1, "", "tamari_smaller"], [11, 2, 1, "", "tamari_sorting_tuple"], [11, 2, 1, "", "tamari_succ"], [11, 2, 1, "", "to_132_avoiding_permutation"], [11, 2, 1, "", "to_312_avoiding_permutation"], [11, 2, 1, "", "to_dyck_word"], [11, 2, 1, "", "to_dyck_word_tamari"], [11, 2, 1, "", "to_full"], [11, 2, 1, "", "to_ordered_tree_left_branch"], [11, 2, 1, "", "to_ordered_tree_right_branch"], [11, 2, 1, "", "to_poset"], [11, 2, 1, "", "to_tilting"], [11, 2, 1, "", "to_undirected_graph"], [11, 2, 1, "", "twisting_number"], [11, 2, 1, "", "under"], [11, 2, 1, "", "under_decomposition"]], "sage.combinat.binary_tree.BinaryTrees": [[11, 2, 1, "", "leaf"]], "sage.combinat.binary_tree.BinaryTrees_all": [[11, 4, 1, "", "Element"], [11, 2, 1, "", "labelled_trees"], [11, 2, 1, "", "unlabelled_trees"]], "sage.combinat.binary_tree.BinaryTrees_size": [[11, 2, 1, "", "cardinality"], [11, 2, 1, "", "random_element"]], "sage.combinat.binary_tree.FullBinaryTrees_size": [[11, 2, 1, "", "cardinality"], [11, 2, 1, "", "random_element"]], "sage.combinat.binary_tree.LabelledBinaryTree": [[11, 2, 1, "", "binary_search_insert"], [11, 2, 1, "", "heap_insert"], [11, 2, 1, "", "left_rotate"], [11, 2, 1, "", "right_rotate"], [11, 2, 1, "", "semistandard_insert"]], "sage.combinat.binary_tree.LabelledBinaryTrees": [[11, 4, 1, "", "Element"], [11, 2, 1, "", "labelled_trees"], [11, 2, 1, "", "unlabelled_trees"]], "sage.combinat.blob_algebra": [[12, 1, 1, "", "BlobAlgebra"], [12, 1, 1, "", "BlobDiagram"], [12, 1, 1, "", "BlobDiagrams"]], "sage.combinat.blob_algebra.BlobAlgebra": [[12, 2, 1, "", "one_basis"], [12, 2, 1, "", "order"], [12, 2, 1, "", "product_on_basis"]], "sage.combinat.blob_algebra.BlobDiagram": [[12, 2, 1, "", "temperley_lieb_diagram"]], "sage.combinat.blob_algebra.BlobDiagrams": [[12, 4, 1, "", "Element"], [12, 2, 1, "", "base_set"], [12, 2, 1, "", "cardinality"], [12, 2, 1, "", "order"]], "sage.combinat.cartesian_product": [[13, 1, 1, "", "CartesianProduct_iters"]], "sage.combinat.cartesian_product.CartesianProduct_iters": [[13, 2, 1, "", "cardinality"], [13, 2, 1, "", "is_finite"], [13, 2, 1, "", "list"], [13, 2, 1, "", "random_element"], [13, 2, 1, "", "unrank"]], "sage.combinat.chas": [[15, 0, 0, "-", "all"], [16, 0, 0, "-", "fsym"], [17, 0, 0, "-", "wqsym"]], "sage.combinat.chas.fsym": [[16, 1, 1, "", "FSymBases"], [16, 1, 1, "", "FSymBasis_abstract"], [16, 1, 1, "", "FreeSymmetricFunctions"], [16, 1, 1, "", "FreeSymmetricFunctions_Dual"], [16, 3, 1, "", "ascent_set"], [16, 3, 1, "", "descent_composition"], [16, 3, 1, "", "descent_set"], [16, 3, 1, "", "standardize"]], "sage.combinat.chas.fsym.FSymBases": [[16, 1, 1, "", "ElementMethods"], [16, 1, 1, "", "ParentMethods"], [16, 2, 1, "", "super_categories"]], "sage.combinat.chas.fsym.FSymBases.ElementMethods": [[16, 2, 1, "", "duality_pairing"]], "sage.combinat.chas.fsym.FSymBases.ParentMethods": [[16, 2, 1, "", "basis"], [16, 2, 1, "", "degree_on_basis"], [16, 2, 1, "", "duality_pairing"], [16, 2, 1, "", "duality_pairing_matrix"], [16, 2, 1, "", "one_basis"]], "sage.combinat.chas.fsym.FSymBasis_abstract": [[16, 2, 1, "", "some_elements"]], "sage.combinat.chas.fsym.FreeSymmetricFunctions": [[16, 1, 1, "", "Fundamental"], [16, 4, 1, "", "G"], [16, 2, 1, "", "a_realization"], [16, 2, 1, "", "dual"]], "sage.combinat.chas.fsym.FreeSymmetricFunctions.Fundamental": [[16, 1, 1, "", "Element"], [16, 2, 1, "", "coproduct_on_basis"], [16, 2, 1, "", "dual_basis"], [16, 2, 1, "", "product_on_basis"]], "sage.combinat.chas.fsym.FreeSymmetricFunctions.Fundamental.Element": [[16, 2, 1, "", "to_fqsym"], [16, 2, 1, "", "to_symmetric_function"]], "sage.combinat.chas.fsym.FreeSymmetricFunctions_Dual": [[16, 4, 1, "", "F"], [16, 1, 1, "", "FundamentalDual"], [16, 2, 1, "", "a_realization"], [16, 2, 1, "", "dual"]], "sage.combinat.chas.fsym.FreeSymmetricFunctions_Dual.FundamentalDual": [[16, 1, 1, "", "Element"], [16, 2, 1, "", "coproduct_on_basis"], [16, 2, 1, "", "dual_basis"], [16, 2, 1, "", "product_on_basis"]], "sage.combinat.chas.fsym.FreeSymmetricFunctions_Dual.FundamentalDual.Element": [[16, 2, 1, "", "to_quasisymmetric_function"]], "sage.combinat.chas.wqsym": [[17, 1, 1, "", "WQSymBases"], [17, 1, 1, "", "WQSymBasis_abstract"], [17, 1, 1, "", "WordQuasiSymmetricFunctions"]], "sage.combinat.chas.wqsym.WQSymBases": [[17, 1, 1, "", "ElementMethods"], [17, 1, 1, "", "ParentMethods"], [17, 2, 1, "", "super_categories"]], "sage.combinat.chas.wqsym.WQSymBases.ElementMethods": [[17, 2, 1, "", "algebraic_complement"], [17, 2, 1, "", "coalgebraic_complement"], [17, 2, 1, "", "star_involution"], [17, 2, 1, "", "to_quasisymmetric_function"]], "sage.combinat.chas.wqsym.WQSymBases.ParentMethods": [[17, 2, 1, "", "degree_on_basis"], [17, 2, 1, "", "is_commutative"], [17, 2, 1, "", "is_field"], [17, 2, 1, "", "one_basis"]], "sage.combinat.chas.wqsym.WQSymBasis_abstract": [[17, 2, 1, "", "an_element"], [17, 4, 1, "", "options"], [17, 2, 1, "", "some_elements"]], "sage.combinat.chas.wqsym.WordQuasiSymmetricFunctions": [[17, 4, 1, "", "C"], [17, 1, 1, "", "Characteristic"], [17, 1, 1, "", "Cone"], [17, 4, 1, "", "M"], [17, 1, 1, "", "Monomial"], [17, 4, 1, "", "Phi"], [17, 4, 1, "", "Q"], [17, 1, 1, "", "StronglyCoarser"], [17, 1, 1, "", "StronglyFiner"], [17, 4, 1, "", "X"], [17, 2, 1, "", "a_realization"], [17, 4, 1, "", "options"]], "sage.combinat.chas.wqsym.WordQuasiSymmetricFunctions.Characteristic": [[17, 1, 1, "", "Element"]], "sage.combinat.chas.wqsym.WordQuasiSymmetricFunctions.Characteristic.Element": [[17, 2, 1, "", "algebraic_complement"], [17, 2, 1, "", "coalgebraic_complement"], [17, 2, 1, "", "star_involution"]], "sage.combinat.chas.wqsym.WordQuasiSymmetricFunctions.Cone": [[17, 2, 1, "", "some_elements"]], "sage.combinat.chas.wqsym.WordQuasiSymmetricFunctions.Monomial": [[17, 2, 1, "", "coproduct_on_basis"], [17, 2, 1, "", "product_on_basis"]], "sage.combinat.chas.wqsym.WordQuasiSymmetricFunctions.StronglyCoarser": [[17, 1, 1, "", "Element"], [17, 2, 1, "", "coproduct_on_basis"], [17, 2, 1, "", "product_on_basis"], [17, 2, 1, "", "some_elements"]], "sage.combinat.chas.wqsym.WordQuasiSymmetricFunctions.StronglyCoarser.Element": [[17, 2, 1, "", "algebraic_complement"], [17, 2, 1, "", "coalgebraic_complement"], [17, 2, 1, "", "star_involution"]], "sage.combinat.chas.wqsym.WordQuasiSymmetricFunctions.StronglyFiner": [[17, 1, 1, "", "Element"], [17, 2, 1, "", "coproduct_on_basis"], [17, 2, 1, "", "product_on_basis"], [17, 2, 1, "", "some_elements"]], "sage.combinat.chas.wqsym.WordQuasiSymmetricFunctions.StronglyFiner.Element": [[17, 2, 1, "", "algebraic_complement"], [17, 2, 1, "", "coalgebraic_complement"], [17, 2, 1, "", "star_involution"]], "sage.combinat.cluster_algebra_quiver": [[18, 0, 0, "-", "all"], [19, 0, 0, "-", "cluster_seed"], [20, 0, 0, "-", "mutation_class"], [21, 0, 0, "-", "mutation_type"], [22, 0, 0, "-", "quiver"], [23, 0, 0, "-", "quiver_mutation_type"]], "sage.combinat.cluster_algebra_quiver.cluster_seed": [[19, 1, 1, "", "ClusterSeed"], [19, 1, 1, "", "ClusterVariable"], [19, 3, 1, "", "PathSubset"], [19, 3, 1, "", "SetToPath"], [19, 3, 1, "", "coeff_recurs"], [19, 3, 1, "", "get_green_vertices"], [19, 3, 1, "", "get_red_vertices"], [19, 3, 1, "", "is_LeeLiZel_allowable"]], "sage.combinat.cluster_algebra_quiver.cluster_seed.ClusterSeed": [[19, 2, 1, "", "LLM_gen_set"], [19, 2, 1, "", "b_matrix"], [19, 2, 1, "", "b_matrix_class"], [19, 2, 1, "", "b_matrix_class_iter"], [19, 2, 1, "", "c_matrix"], [19, 2, 1, "", "c_vector"], [19, 2, 1, "", "cluster"], [19, 2, 1, "", "cluster_class"], [19, 2, 1, "", "cluster_class_iter"], [19, 2, 1, "", "cluster_index"], [19, 2, 1, "", "cluster_variable"], [19, 2, 1, "", "coefficient"], [19, 2, 1, "", "coefficients"], [19, 2, 1, "", "d_matrix"], [19, 2, 1, "", "d_vector"], [19, 2, 1, "", "exchangeable_part"], [19, 2, 1, "", "f_polynomial"], [19, 2, 1, "", "f_polynomials"], [19, 2, 1, "", "find_upper_bound"], [19, 2, 1, "", "first_green_vertex"], [19, 2, 1, "", "first_red_vertex"], [19, 2, 1, "", "first_urban_renewal"], [19, 2, 1, "", "free_vertices"], [19, 2, 1, "", "frozen_vertices"], [19, 2, 1, "", "g_matrix"], [19, 2, 1, "", "g_vector"], [19, 2, 1, "", "get_upper_cluster_algebra_element"], [19, 2, 1, "", "greedy"], [19, 2, 1, "", "green_vertices"], [19, 2, 1, "", "ground_field"], [19, 2, 1, "", "highest_degree_denominator"], [19, 2, 1, "", "interact"], [19, 2, 1, "", "is_acyclic"], [19, 2, 1, "", "is_bipartite"], [19, 2, 1, "", "is_finite"], [19, 2, 1, "", "is_mutation_finite"], [19, 2, 1, "", "m"], [19, 2, 1, "", "most_decreased_denominator_after_mutation"], [19, 2, 1, "", "most_decreased_edge_after_mutation"], [19, 2, 1, "", "mutate"], [19, 2, 1, "", "mutation_analysis"], [19, 2, 1, "", "mutation_class"], [19, 2, 1, "", "mutation_class_iter"], [19, 2, 1, "", "mutation_sequence"], [19, 2, 1, "", "mutation_type"], [19, 2, 1, "", "mutations"], [19, 2, 1, "", "n"], [19, 2, 1, "", "oriented_exchange_graph"], [19, 2, 1, "", "plot"], [19, 2, 1, "", "principal_extension"], [19, 2, 1, "", "quiver"], [19, 2, 1, "", "red_vertices"], [19, 2, 1, "", "reorient"], [19, 2, 1, "", "reset_cluster"], [19, 2, 1, "", "reset_coefficients"], [19, 2, 1, "", "save_image"], [19, 2, 1, "", "set_c_matrix"], [19, 2, 1, "", "set_cluster"], [19, 2, 1, "", "show"], [19, 2, 1, "", "smallest_c_vector"], [19, 2, 1, "", "track_mutations"], [19, 2, 1, "", "universal_extension"], [19, 2, 1, "", "urban_renewals"], [19, 2, 1, "", "use_c_vectors"], [19, 2, 1, "", "use_d_vectors"], [19, 2, 1, "", "use_fpolys"], [19, 2, 1, "", "use_g_vectors"], [19, 2, 1, "", "variable_class"], [19, 2, 1, "", "variable_class_iter"], [19, 2, 1, "", "x"], [19, 2, 1, "", "y"]], "sage.combinat.cluster_algebra_quiver.cluster_seed.ClusterVariable": [[19, 2, 1, "", "almost_positive_root"]], "sage.combinat.cluster_algebra_quiver.mutation_type": [[21, 3, 1, "", "is_mutation_finite"], [21, 3, 1, "", "load_data"]], "sage.combinat.cluster_algebra_quiver.quiver": [[22, 1, 1, "", "ClusterQuiver"]], "sage.combinat.cluster_algebra_quiver.quiver.ClusterQuiver": [[22, 2, 1, "", "b_matrix"], [22, 2, 1, "", "canonical_label"], [22, 2, 1, "", "d_vector_fan"], [22, 2, 1, "", "digraph"], [22, 2, 1, "", "exchangeable_part"], [22, 2, 1, "", "first_sink"], [22, 2, 1, "", "first_source"], [22, 2, 1, "", "free_vertices"], [22, 2, 1, "", "frozen_vertices"], [22, 2, 1, "", "g_vector_fan"], [22, 2, 1, "", "interact"], [22, 2, 1, "", "is_acyclic"], [22, 2, 1, "", "is_bipartite"], [22, 2, 1, "", "is_finite"], [22, 2, 1, "", "is_mutation_finite"], [22, 2, 1, "", "m"], [22, 2, 1, "", "mutate"], [22, 2, 1, "", "mutation_class"], [22, 2, 1, "", "mutation_class_iter"], [22, 2, 1, "", "mutation_sequence"], [22, 2, 1, "", "mutation_type"], [22, 2, 1, "", "n"], [22, 2, 1, "", "number_of_edges"], [22, 2, 1, "", "plot"], [22, 2, 1, "", "poincare_semistable"], [22, 2, 1, "", "principal_extension"], [22, 2, 1, "", "qmu_save"], [22, 2, 1, "", "relabel"], [22, 2, 1, "", "reorient"], [22, 2, 1, "", "save_image"], [22, 2, 1, "", "show"], [22, 2, 1, "", "sinks"], [22, 2, 1, "", "sources"]], "sage.combinat.cluster_algebra_quiver.quiver_mutation_type": [[23, 3, 1, "", "QuiverMutationType"], [23, 1, 1, "", "QuiverMutationTypeFactory"], [23, 1, 1, "", "QuiverMutationType_Irreducible"], [23, 1, 1, "", "QuiverMutationType_Reducible"], [23, 1, 1, "", "QuiverMutationType_abstract"], [23, 3, 1, "", "save_quiver_data"]], "sage.combinat.cluster_algebra_quiver.quiver_mutation_type.QuiverMutationTypeFactory": [[23, 2, 1, "", "samples"]], "sage.combinat.cluster_algebra_quiver.quiver_mutation_type.QuiverMutationType_Irreducible": [[23, 2, 1, "", "class_size"], [23, 2, 1, "", "dual"], [23, 2, 1, "", "irreducible_components"]], "sage.combinat.cluster_algebra_quiver.quiver_mutation_type.QuiverMutationType_Reducible": [[23, 2, 1, "", "class_size"], [23, 2, 1, "", "dual"], [23, 2, 1, "", "irreducible_components"]], "sage.combinat.cluster_algebra_quiver.quiver_mutation_type.QuiverMutationType_abstract": [[23, 2, 1, "", "b_matrix"], [23, 2, 1, "", "cartan_matrix"], [23, 2, 1, "", "is_affine"], [23, 2, 1, "", "is_elliptic"], [23, 2, 1, "", "is_finite"], [23, 2, 1, "", "is_irreducible"], [23, 2, 1, "", "is_mutation_finite"], [23, 2, 1, "", "is_simply_laced"], [23, 2, 1, "", "is_skew_symmetric"], [23, 2, 1, "", "letter"], [23, 2, 1, "", "plot"], [23, 2, 1, "", "properties"], [23, 2, 1, "", "rank"], [23, 2, 1, "", "show"], [23, 2, 1, "", "standard_quiver"]], "sage.combinat.cluster_complex": [[24, 1, 1, "", "ClusterComplex"], [24, 1, 1, "", "ClusterComplexFacet"]], "sage.combinat.cluster_complex.ClusterComplex": [[24, 4, 1, "", "Element"], [24, 2, 1, "", "cyclic_rotation"], [24, 2, 1, "", "k"], [24, 2, 1, "", "minimal_nonfaces"]], "sage.combinat.cluster_complex.ClusterComplexFacet": [[24, 2, 1, "", "cluster"], [24, 2, 1, "", "product_of_upper_cluster"], [24, 2, 1, "", "upper_cluster"]], "sage.combinat.colored_permutations": [[25, 1, 1, "", "ColoredPermutation"], [25, 1, 1, "", "ColoredPermutations"], [25, 1, 1, "", "SignedPermutation"], [25, 1, 1, "", "SignedPermutations"]], "sage.combinat.colored_permutations.ColoredPermutation": [[25, 2, 1, "", "colors"], [25, 2, 1, "", "has_left_descent"], [25, 2, 1, "", "length"], [25, 2, 1, "", "one_line_form"], [25, 2, 1, "", "permutation"], [25, 2, 1, "", "reduced_word"], [25, 2, 1, "", "to_matrix"]], "sage.combinat.colored_permutations.ColoredPermutations": [[25, 4, 1, "", "Element"], [25, 2, 1, "", "as_permutation_group"], [25, 2, 1, "", "cardinality"], [25, 2, 1, "", "codegrees"], [25, 2, 1, "", "coxeter_matrix"], [25, 2, 1, "", "degrees"], [25, 2, 1, "", "fixed_point_polynomial"], [25, 2, 1, "", "gens"], [25, 2, 1, "", "index_set"], [25, 2, 1, "", "is_well_generated"], [25, 2, 1, "", "matrix_group"], [25, 2, 1, "", "number_of_reflection_hyperplanes"], [25, 2, 1, "", "one"], [25, 2, 1, "", "order"], [25, 2, 1, "", "random_element"], [25, 2, 1, "", "rank"], [25, 2, 1, "", "simple_reflection"]], "sage.combinat.colored_permutations.SignedPermutation": [[25, 2, 1, "", "cycle_type"], [25, 2, 1, "", "has_left_descent"], [25, 2, 1, "", "order"], [25, 2, 1, "", "to_cycles"], [25, 2, 1, "", "to_matrix"]], "sage.combinat.colored_permutations.SignedPermutations": [[25, 4, 1, "", "Element"], [25, 2, 1, "", "conjugacy_class_representative"], [25, 2, 1, "", "long_element"], [25, 2, 1, "", "one"], [25, 2, 1, "", "random_element"], [25, 2, 1, "", "simple_reflection"]], "sage.combinat.combinat": [[26, 1, 1, "", "CombinatorialClass"], [26, 1, 1, "", "CombinatorialElement"], [26, 1, 1, "", "CombinatorialObject"], [26, 1, 1, "", "FilteredCombinatorialClass"], [26, 1, 1, "", "InfiniteAbstractCombinatorialClass"], [26, 1, 1, "", "MapCombinatorialClass"], [26, 1, 1, "", "Permutations_CC"], [26, 1, 1, "", "UnionCombinatorialClass"], [26, 3, 1, "", "bell_number"], [26, 3, 1, "", "bell_polynomial"], [26, 3, 1, "", "bernoulli_polynomial"], [26, 3, 1, "", "catalan_number"], [26, 3, 1, "", "euler_number"], [26, 3, 1, "", "eulerian_number"], [26, 3, 1, "", "eulerian_polynomial"], [26, 3, 1, "", "fibonacci"], [26, 3, 1, "", "fibonacci_sequence"], [26, 3, 1, "", "fibonacci_xrange"], [26, 3, 1, "", "lucas_number1"], [26, 3, 1, "", "lucas_number2"], [26, 3, 1, "", "narayana_number"], [26, 3, 1, "", "number_of_tuples"], [26, 3, 1, "", "number_of_unordered_tuples"], [26, 3, 1, "", "polygonal_number"], [26, 3, 1, "", "stirling_number1"], [26, 3, 1, "", "stirling_number2"], [26, 3, 1, "", "tuples"], [26, 3, 1, "", "unordered_tuples"], [26, 3, 1, "", "unshuffle_iterator"]], "sage.combinat.combinat.CombinatorialClass": [[26, 4, 1, "", "Element"], [26, 2, 1, "", "cardinality"], [26, 2, 1, "", "element_class"], [26, 2, 1, "", "filter"], [26, 2, 1, "", "first"], [26, 2, 1, "", "is_finite"], [26, 2, 1, "", "last"], [26, 2, 1, "", "list"], [26, 2, 1, "", "map"], [26, 2, 1, "", "next"], [26, 2, 1, "", "previous"], [26, 2, 1, "", "random_element"], [26, 2, 1, "", "rank"], [26, 2, 1, "", "union"], [26, 2, 1, "", "unrank"]], "sage.combinat.combinat.CombinatorialObject": [[26, 2, 1, "", "index"]], "sage.combinat.combinat.FilteredCombinatorialClass": [[26, 2, 1, "", "cardinality"]], "sage.combinat.combinat.InfiniteAbstractCombinatorialClass": [[26, 2, 1, "", "cardinality"], [26, 2, 1, "", "list"]], "sage.combinat.combinat.UnionCombinatorialClass": [[26, 2, 1, "", "cardinality"], [26, 2, 1, "", "first"], [26, 2, 1, "", "last"], [26, 2, 1, "", "list"], [26, 2, 1, "", "rank"], [26, 2, 1, "", "unrank"]], "sage.combinat.combinat_cython": [[27, 3, 1, "", "conjugate"], [27, 3, 1, "", "lyndon_word_iterator"], [27, 3, 1, "", "perfect_matchings_iterator"], [27, 3, 1, "", "set_partition_composition"]], "sage.combinat.combination": [[28, 1, 1, "", "ChooseNK"], [28, 3, 1, "", "Combinations"], [28, 1, 1, "", "Combinations_mset"], [28, 1, 1, "", "Combinations_msetk"], [28, 1, 1, "", "Combinations_set"], [28, 1, 1, "", "Combinations_setk"], [28, 3, 1, "", "from_rank"], [28, 3, 1, "", "rank"]], "sage.combinat.combination.Combinations_mset": [[28, 2, 1, "", "cardinality"]], "sage.combinat.combination.Combinations_msetk": [[28, 2, 1, "", "cardinality"]], "sage.combinat.combination.Combinations_set": [[28, 2, 1, "", "cardinality"], [28, 2, 1, "", "rank"], [28, 2, 1, "", "unrank"]], "sage.combinat.combination.Combinations_setk": [[28, 2, 1, "", "cardinality"], [28, 2, 1, "", "list"], [28, 2, 1, "", "rank"], [28, 2, 1, "", "unrank"]], "sage.combinat.combinatorial_map": [[29, 1, 1, "", "CombinatorialMap"], [29, 3, 1, "", "combinatorial_map"], [29, 3, 1, "", "combinatorial_map_trivial"], [29, 3, 1, "", "combinatorial_map_wrapper"], [29, 3, 1, "", "combinatorial_maps_in_class"]], "sage.combinat.combinatorial_map.CombinatorialMap": [[29, 2, 1, "", "name"], [29, 2, 1, "", "order"], [29, 2, 1, "", "unbounded_map"]], "sage.combinat.composition": [[30, 1, 1, "", "Composition"], [30, 1, 1, "", "Compositions"], [30, 1, 1, "", "Compositions_all"], [30, 1, 1, "", "Compositions_constraints"], [30, 1, 1, "", "Compositions_n"], [30, 3, 1, "", "composition_iterator_fast"]], "sage.combinat.composition.Composition": [[30, 2, 1, "", "complement"], [30, 2, 1, "", "conjugate"], [30, 2, 1, "", "count"], [30, 2, 1, "", "descents"], [30, 2, 1, "", "fatten"], [30, 2, 1, "", "fatter"], [30, 2, 1, "", "finer"], [30, 2, 1, "", "inf"], [30, 2, 1, "", "is_finer"], [30, 2, 1, "", "join"], [30, 2, 1, "", "major_index"], [30, 2, 1, "", "meet"], [30, 2, 1, "", "near_concatenation"], [30, 2, 1, "", "partial_sums"], [30, 2, 1, "", "peaks"], [30, 2, 1, "", "refinement_splitting"], [30, 2, 1, "", "refinement_splitting_lengths"], [30, 2, 1, "", "reversed"], [30, 2, 1, "", "ribbon_decomposition"], [30, 2, 1, "", "shuffle_product"], [30, 2, 1, "", "size"], [30, 2, 1, "", "specht_module"], [30, 2, 1, "", "specht_module_dimension"], [30, 2, 1, "", "sum"], [30, 2, 1, "", "sup"], [30, 2, 1, "", "to_code"], [30, 2, 1, "", "to_partition"], [30, 2, 1, "", "to_skew_partition"], [30, 2, 1, "", "to_subset"], [30, 2, 1, "", "wll_gt"]], "sage.combinat.composition.Compositions": [[30, 4, 1, "", "Element"], [30, 2, 1, "", "from_code"], [30, 2, 1, "", "from_descents"], [30, 2, 1, "", "from_subset"]], "sage.combinat.composition.Compositions_all": [[30, 2, 1, "", "subset"], [30, 2, 1, "", "zero"]], "sage.combinat.composition.Compositions_n": [[30, 2, 1, "", "cardinality"], [30, 2, 1, "", "random_element"]], "sage.combinat.composition_signed": [[31, 1, 1, "", "SignedCompositions"]], "sage.combinat.composition_signed.SignedCompositions": [[31, 2, 1, "", "cardinality"]], "sage.combinat.composition_tableau": [[32, 1, 1, "", "CompositionTableau"], [32, 1, 1, "", "CompositionTableaux"], [32, 1, 1, "", "CompositionTableauxBacktracker"], [32, 1, 1, "", "CompositionTableaux_all"], [32, 1, 1, "", "CompositionTableaux_shape"], [32, 1, 1, "", "CompositionTableaux_size"]], "sage.combinat.composition_tableau.CompositionTableau": [[32, 2, 1, "", "descent_composition"], [32, 2, 1, "", "descent_set"], [32, 2, 1, "", "is_standard"], [32, 2, 1, "", "pp"], [32, 2, 1, "", "shape_composition"], [32, 2, 1, "", "shape_partition"], [32, 2, 1, "", "size"], [32, 2, 1, "", "weight"]], "sage.combinat.composition_tableau.CompositionTableaux": [[32, 4, 1, "", "Element"]], "sage.combinat.composition_tableau.CompositionTableauxBacktracker": [[32, 2, 1, "", "get_next_pos"]], "sage.combinat.composition_tableau.CompositionTableaux_all": [[32, 2, 1, "", "an_element"]], "sage.combinat.composition_tableau.CompositionTableaux_shape": [[32, 2, 1, "", "an_element"]], "sage.combinat.constellation": [[33, 3, 1, "", "Constellation"], [33, 1, 1, "", "Constellation_class"], [33, 3, 1, "", "Constellations"], [33, 1, 1, "", "Constellations_ld"], [33, 1, 1, "", "Constellations_p"], [33, 3, 1, "", "perm_conjugate"], [33, 3, 1, "", "perm_invert"], [33, 3, 1, "", "perm_sym_domain"], [33, 3, 1, "", "perms_are_connected"], [33, 3, 1, "", "perms_canonical_labels"], [33, 3, 1, "", "perms_canonical_labels_from"], [33, 3, 1, "", "perms_sym_init"]], "sage.combinat.constellation.Constellation_class": [[33, 2, 1, "", "braid_group_action"], [33, 2, 1, "", "braid_group_orbit"], [33, 2, 1, "", "connected_components"], [33, 2, 1, "", "copy"], [33, 2, 1, "", "degree"], [33, 2, 1, "", "euler_characteristic"], [33, 2, 1, "", "g"], [33, 2, 1, "", "genus"], [33, 2, 1, "", "is_connected"], [33, 2, 1, "", "is_isomorphic"], [33, 2, 1, "", "is_mutable"], [33, 2, 1, "", "length"], [33, 2, 1, "", "mutable_copy"], [33, 2, 1, "", "passport"], [33, 2, 1, "", "profile"], [33, 2, 1, "", "relabel"], [33, 2, 1, "", "set_immutable"], [33, 2, 1, "", "switch"]], "sage.combinat.constellation.Constellations_ld": [[33, 4, 1, "", "Element"], [33, 2, 1, "", "braid_group_action"], [33, 2, 1, "", "braid_group_orbits"], [33, 2, 1, "", "is_empty"], [33, 2, 1, "", "random_element"]], "sage.combinat.constellation.Constellations_p": [[33, 2, 1, "", "isomorphism_representatives"]], "sage.combinat.core": [[34, 1, 1, "", "Core"], [34, 3, 1, "", "Cores"], [34, 1, 1, "", "Cores_length"], [34, 1, 1, "", "Cores_size"]], "sage.combinat.core.Core": [[34, 2, 1, "", "affine_symmetric_group_action"], [34, 2, 1, "", "affine_symmetric_group_simple_action"], [34, 2, 1, "", "contains"], [34, 2, 1, "", "k"], [34, 2, 1, "", "length"], [34, 2, 1, "", "size"], [34, 2, 1, "", "strong_covers"], [34, 2, 1, "", "strong_down_list"], [34, 2, 1, "", "strong_le"], [34, 2, 1, "", "to_bounded_partition"], [34, 2, 1, "", "to_grassmannian"], [34, 2, 1, "", "to_partition"], [34, 2, 1, "", "weak_covers"], [34, 2, 1, "", "weak_le"]], "sage.combinat.core.Cores_length": [[34, 4, 1, "", "Element"], [34, 2, 1, "", "from_partition"], [34, 2, 1, "", "list"]], "sage.combinat.core.Cores_size": [[34, 4, 1, "", "Element"], [34, 2, 1, "", "from_partition"], [34, 2, 1, "", "list"]], "sage.combinat.crystals": [[36, 0, 0, "-", "affine"], [37, 0, 0, "-", "affine_factorization"], [38, 0, 0, "-", "affinization"], [39, 0, 0, "-", "alcove_path"], [40, 0, 0, "-", "all"], [41, 0, 0, "-", "bkk_crystals"], [42, 0, 0, "-", "catalog"], [43, 0, 0, "-", "catalog_elementary_crystals"], [44, 0, 0, "-", "catalog_infinity_crystals"], [45, 0, 0, "-", "catalog_kirillov_reshetikhin"], [46, 0, 0, "-", "crystals"], [47, 0, 0, "-", "direct_sum"], [48, 0, 0, "-", "elementary_crystals"], [49, 0, 0, "-", "fast_crystals"], [50, 0, 0, "-", "fully_commutative_stable_grothendieck"], [51, 0, 0, "-", "generalized_young_walls"], [52, 0, 0, "-", "highest_weight_crystals"], [53, 0, 0, "-", "induced_structure"], [54, 0, 0, "-", "infinity_crystals"], [55, 0, 0, "-", "kac_modules"], [56, 0, 0, "-", "kirillov_reshetikhin"], [57, 0, 0, "-", "kyoto_path_model"], [58, 0, 0, "-", "letters"], [59, 0, 0, "-", "littelmann_path"], [60, 0, 0, "-", "monomial_crystals"], [61, 0, 0, "-", "multisegments"], [62, 0, 0, "-", "mv_polytopes"], [63, 0, 0, "-", "pbw_crystal"], [64, 0, 0, "-", "pbw_datum"], [65, 0, 0, "-", "polyhedral_realization"], [66, 0, 0, "-", "spins"], [67, 0, 0, "-", "star_crystal"], [68, 0, 0, "-", "tensor_product"], [69, 0, 0, "-", "tensor_product_element"]], "sage.combinat.crystals.affine": [[36, 1, 1, "", "AffineCrystalFromClassical"], [36, 1, 1, "", "AffineCrystalFromClassicalAndPromotion"], [36, 1, 1, "", "AffineCrystalFromClassicalAndPromotionElement"], [36, 1, 1, "", "AffineCrystalFromClassicalElement"]], "sage.combinat.crystals.affine.AffineCrystalFromClassical": [[36, 4, 1, "", "Element"], [36, 2, 1, "", "cardinality"], [36, 2, 1, "", "lift"], [36, 2, 1, "", "retract"]], "sage.combinat.crystals.affine.AffineCrystalFromClassicalAndPromotion": [[36, 4, 1, "", "Element"], [36, 2, 1, "", "automorphism"], [36, 2, 1, "", "inverse_automorphism"]], "sage.combinat.crystals.affine.AffineCrystalFromClassicalAndPromotionElement": [[36, 2, 1, "", "e0"], [36, 2, 1, "", "epsilon0"], [36, 2, 1, "", "f0"], [36, 2, 1, "", "phi0"]], "sage.combinat.crystals.affine.AffineCrystalFromClassicalElement": [[36, 2, 1, "", "classical_weight"], [36, 2, 1, "", "e"], [36, 2, 1, "", "e0"], [36, 2, 1, "", "epsilon"], [36, 2, 1, "", "epsilon0"], [36, 2, 1, "", "f"], [36, 2, 1, "", "f0"], [36, 2, 1, "", "lift"], [36, 2, 1, "", "phi"], [36, 2, 1, "", "phi0"], [36, 2, 1, "", "pp"]], "sage.combinat.crystals.affine_factorization": [[37, 1, 1, "", "AffineFactorizationCrystal"], [37, 1, 1, "", "FactorizationToTableaux"], [37, 3, 1, "", "affine_factorizations"]], "sage.combinat.crystals.affine_factorization.AffineFactorizationCrystal": [[37, 1, 1, "", "Element"]], "sage.combinat.crystals.affine_factorization.AffineFactorizationCrystal.Element": [[37, 2, 1, "", "bracketing"], [37, 2, 1, "", "e"], [37, 2, 1, "", "f"], [37, 2, 1, "", "to_tableau"]], "sage.combinat.crystals.affine_factorization.FactorizationToTableaux": [[37, 2, 1, "", "is_embedding"], [37, 2, 1, "", "is_isomorphism"], [37, 2, 1, "", "is_surjective"]], "sage.combinat.crystals.affinization": [[38, 1, 1, "", "AffinizationOfCrystal"]], "sage.combinat.crystals.affinization.AffinizationOfCrystal": [[38, 1, 1, "", "Element"]], "sage.combinat.crystals.affinization.AffinizationOfCrystal.Element": [[38, 2, 1, "", "e"], [38, 2, 1, "", "epsilon"], [38, 2, 1, "", "f"], [38, 2, 1, "", "phi"], [38, 2, 1, "", "weight"]], "sage.combinat.crystals.alcove_path": [[39, 1, 1, "", "CrystalOfAlcovePaths"], [39, 1, 1, "", "CrystalOfAlcovePathsElement"], [39, 1, 1, "", "InfinityCrystalOfAlcovePaths"], [39, 1, 1, "", "RootsWithHeight"], [39, 1, 1, "", "RootsWithHeightElement"], [39, 3, 1, "", "compare_graphs"]], "sage.combinat.crystals.alcove_path.CrystalOfAlcovePaths": [[39, 4, 1, "", "Element"], [39, 2, 1, "", "vertices"]], "sage.combinat.crystals.alcove_path.CrystalOfAlcovePathsElement": [[39, 2, 1, "", "e"], [39, 2, 1, "", "epsilon"], [39, 2, 1, "", "f"], [39, 2, 1, "", "integer_sequence"], [39, 2, 1, "", "is_admissible"], [39, 2, 1, "", "path"], [39, 2, 1, "", "phi"], [39, 2, 1, "", "plot"], [39, 2, 1, "", "weight"]], "sage.combinat.crystals.alcove_path.InfinityCrystalOfAlcovePaths": [[39, 1, 1, "", "Element"]], "sage.combinat.crystals.alcove_path.InfinityCrystalOfAlcovePaths.Element": [[39, 2, 1, "", "e"], [39, 2, 1, "", "epsilon"], [39, 2, 1, "", "f"], [39, 2, 1, "", "phi"], [39, 2, 1, "", "projection"], [39, 2, 1, "", "weight"]], "sage.combinat.crystals.alcove_path.RootsWithHeight": [[39, 4, 1, "", "Element"], [39, 2, 1, "", "lambda_chain"], [39, 2, 1, "", "word"]], "sage.combinat.crystals.bkk_crystals": [[41, 1, 1, "", "CrystalOfBKKTableaux"]], "sage.combinat.crystals.bkk_crystals.CrystalOfBKKTableaux": [[41, 1, 1, "", "Element"], [41, 2, 1, "", "genuine_highest_weight_vectors"], [41, 2, 1, "", "shape"]], "sage.combinat.crystals.crystals": [[46, 1, 1, "", "CrystalBacktracker"]], "sage.combinat.crystals.direct_sum": [[47, 1, 1, "", "DirectSumOfCrystals"]], "sage.combinat.crystals.direct_sum.DirectSumOfCrystals": [[47, 1, 1, "", "Element"], [47, 2, 1, "", "weight_lattice_realization"]], "sage.combinat.crystals.direct_sum.DirectSumOfCrystals.Element": [[47, 2, 1, "", "e"], [47, 2, 1, "", "epsilon"], [47, 2, 1, "", "f"], [47, 2, 1, "", "phi"], [47, 2, 1, "", "weight"]], "sage.combinat.crystals.elementary_crystals": [[48, 1, 1, "", "AbstractSingleCrystalElement"], [48, 1, 1, "", "ComponentCrystal"], [48, 1, 1, "", "ElementaryCrystal"], [48, 1, 1, "", "RCrystal"], [48, 1, 1, "", "TCrystal"]], "sage.combinat.crystals.elementary_crystals.AbstractSingleCrystalElement": [[48, 2, 1, "", "e"], [48, 2, 1, "", "f"]], "sage.combinat.crystals.elementary_crystals.ComponentCrystal": [[48, 1, 1, "", "Element"], [48, 2, 1, "", "cardinality"], [48, 2, 1, "", "weight_lattice_realization"]], "sage.combinat.crystals.elementary_crystals.ComponentCrystal.Element": [[48, 2, 1, "", "epsilon"], [48, 2, 1, "", "phi"], [48, 2, 1, "", "weight"]], "sage.combinat.crystals.elementary_crystals.ElementaryCrystal": [[48, 1, 1, "", "Element"], [48, 2, 1, "", "weight_lattice_realization"]], "sage.combinat.crystals.elementary_crystals.ElementaryCrystal.Element": [[48, 2, 1, "", "e"], [48, 2, 1, "", "epsilon"], [48, 2, 1, "", "f"], [48, 2, 1, "", "phi"], [48, 2, 1, "", "weight"]], "sage.combinat.crystals.elementary_crystals.RCrystal": [[48, 1, 1, "", "Element"], [48, 2, 1, "", "cardinality"], [48, 2, 1, "", "weight_lattice_realization"]], "sage.combinat.crystals.elementary_crystals.RCrystal.Element": [[48, 2, 1, "", "epsilon"], [48, 2, 1, "", "phi"], [48, 2, 1, "", "weight"]], "sage.combinat.crystals.elementary_crystals.TCrystal": [[48, 1, 1, "", "Element"], [48, 2, 1, "", "cardinality"], [48, 2, 1, "", "weight_lattice_realization"]], "sage.combinat.crystals.elementary_crystals.TCrystal.Element": [[48, 2, 1, "", "epsilon"], [48, 2, 1, "", "phi"], [48, 2, 1, "", "weight"]], "sage.combinat.crystals.fast_crystals": [[49, 1, 1, "", "FastCrystal"]], "sage.combinat.crystals.fast_crystals.FastCrystal": [[49, 1, 1, "", "Element"], [49, 2, 1, "", "cmp_elements"], [49, 2, 1, "", "digraph"]], "sage.combinat.crystals.fast_crystals.FastCrystal.Element": [[49, 2, 1, "", "e"], [49, 2, 1, "", "f"], [49, 2, 1, "", "weight"]], "sage.combinat.crystals.fully_commutative_stable_grothendieck": [[50, 1, 1, "", "DecreasingHeckeFactorization"], [50, 1, 1, "", "DecreasingHeckeFactorizations"], [50, 1, 1, "", "FullyCommutativeStableGrothendieckCrystal"]], "sage.combinat.crystals.fully_commutative_stable_grothendieck.DecreasingHeckeFactorization": [[50, 2, 1, "", "to_increasing_hecke_biword"], [50, 2, 1, "", "to_word"], [50, 2, 1, "", "weight"]], "sage.combinat.crystals.fully_commutative_stable_grothendieck.DecreasingHeckeFactorizations": [[50, 4, 1, "", "Element"], [50, 2, 1, "", "list"]], "sage.combinat.crystals.fully_commutative_stable_grothendieck.FullyCommutativeStableGrothendieckCrystal": [[50, 1, 1, "", "Element"], [50, 2, 1, "", "module_generators"]], "sage.combinat.crystals.fully_commutative_stable_grothendieck.FullyCommutativeStableGrothendieckCrystal.Element": [[50, 2, 1, "", "bracketing"], [50, 2, 1, "", "e"], [50, 2, 1, "", "f"]], "sage.combinat.crystals.generalized_young_walls": [[51, 1, 1, "", "CrystalOfGeneralizedYoungWalls"], [51, 1, 1, "", "CrystalOfGeneralizedYoungWallsElement"], [51, 1, 1, "", "GeneralizedYoungWall"], [51, 1, 1, "", "InfinityCrystalOfGeneralizedYoungWalls"]], "sage.combinat.crystals.generalized_young_walls.CrystalOfGeneralizedYoungWalls": [[51, 4, 1, "", "Element"]], "sage.combinat.crystals.generalized_young_walls.CrystalOfGeneralizedYoungWallsElement": [[51, 2, 1, "", "e"], [51, 2, 1, "", "f"], [51, 2, 1, "", "phi"], [51, 2, 1, "", "weight"]], "sage.combinat.crystals.generalized_young_walls.GeneralizedYoungWall": [[51, 2, 1, "", "Epsilon"], [51, 2, 1, "", "Phi"], [51, 2, 1, "", "a"], [51, 2, 1, "", "column"], [51, 2, 1, "", "content"], [51, 2, 1, "", "e"], [51, 2, 1, "", "epsilon"], [51, 2, 1, "", "f"], [51, 2, 1, "", "generate_signature"], [51, 2, 1, "", "in_highest_weight_crystal"], [51, 2, 1, "", "latex_large"], [51, 2, 1, "", "number_of_parts"], [51, 2, 1, "", "phi"], [51, 2, 1, "", "pp"], [51, 2, 1, "", "raw_signature"], [51, 2, 1, "", "signature"], [51, 2, 1, "", "sum_of_weighted_row_lengths"], [51, 2, 1, "", "weight"]], "sage.combinat.crystals.generalized_young_walls.InfinityCrystalOfGeneralizedYoungWalls": [[51, 4, 1, "", "Element"]], "sage.combinat.crystals.highest_weight_crystals": [[52, 1, 1, "", "FiniteDimensionalHighestWeightCrystal_TypeE"], [52, 1, 1, "", "FiniteDimensionalHighestWeightCrystal_TypeE6"], [52, 1, 1, "", "FiniteDimensionalHighestWeightCrystal_TypeE7"], [52, 3, 1, "", "HighestWeightCrystal"]], "sage.combinat.crystals.highest_weight_crystals.FiniteDimensionalHighestWeightCrystal_TypeE": [[52, 4, 1, "", "Element"], [52, 2, 1, "", "module_generator"]], "sage.combinat.crystals.induced_structure": [[53, 1, 1, "", "InducedCrystal"], [53, 1, 1, "", "InducedFromCrystal"]], "sage.combinat.crystals.induced_structure.InducedCrystal": [[53, 1, 1, "", "Element"], [53, 2, 1, "", "cardinality"]], "sage.combinat.crystals.induced_structure.InducedCrystal.Element": [[53, 2, 1, "", "e"], [53, 2, 1, "", "epsilon"], [53, 2, 1, "", "f"], [53, 2, 1, "", "phi"], [53, 2, 1, "", "weight"]], "sage.combinat.crystals.induced_structure.InducedFromCrystal": [[53, 1, 1, "", "Element"], [53, 2, 1, "", "cardinality"]], "sage.combinat.crystals.induced_structure.InducedFromCrystal.Element": [[53, 2, 1, "", "e"], [53, 2, 1, "", "epsilon"], [53, 2, 1, "", "f"], [53, 2, 1, "", "phi"], [53, 2, 1, "", "weight"]], "sage.combinat.crystals.infinity_crystals": [[54, 1, 1, "", "DualInfinityQueerCrystalOfTableaux"], [54, 1, 1, "", "InfinityCrystalOfTableaux"], [54, 1, 1, "", "InfinityCrystalOfTableauxTypeD"]], "sage.combinat.crystals.infinity_crystals.DualInfinityQueerCrystalOfTableaux": [[54, 1, 1, "", "Element"], [54, 2, 1, "", "index_set"], [54, 2, 1, "", "module_generator"]], "sage.combinat.crystals.infinity_crystals.InfinityCrystalOfTableaux": [[54, 1, 1, "", "Element"], [54, 2, 1, "", "module_generator"]], "sage.combinat.crystals.infinity_crystals.InfinityCrystalOfTableaux.Element": [[54, 2, 1, "", "content"], [54, 2, 1, "", "phi"], [54, 2, 1, "", "reduced_form"], [54, 2, 1, "", "seg"], [54, 2, 1, "", "weight"]], "sage.combinat.crystals.infinity_crystals.InfinityCrystalOfTableauxTypeD": [[54, 1, 1, "", "Element"], [54, 2, 1, "", "module_generator"]], "sage.combinat.crystals.kac_modules": [[55, 1, 1, "", "CrystalOfKacModule"], [55, 1, 1, "", "CrystalOfOddNegativeRoots"], [55, 3, 1, "", "latex_dual"], [55, 3, 1, "", "to_dual_tableau"]], "sage.combinat.crystals.kac_modules.CrystalOfKacModule": [[55, 1, 1, "", "Element"], [55, 2, 1, "", "module_generator"]], "sage.combinat.crystals.kac_modules.CrystalOfKacModule.Element": [[55, 2, 1, "", "e"], [55, 2, 1, "", "f"], [55, 2, 1, "", "weight"]], "sage.combinat.crystals.kac_modules.CrystalOfOddNegativeRoots": [[55, 1, 1, "", "Element"], [55, 2, 1, "", "module_generator"]], "sage.combinat.crystals.kac_modules.CrystalOfOddNegativeRoots.Element": [[55, 2, 1, "", "e"], [55, 2, 1, "", "epsilon"], [55, 2, 1, "", "f"], [55, 2, 1, "", "phi"], [55, 2, 1, "", "weight"]], "sage.combinat.crystals.kirillov_reshetikhin": [[56, 1, 1, "", "AmbientRetractMap"], [56, 1, 1, "", "CrystalDiagramAutomorphism"], [56, 1, 1, "", "CrystalOfTableaux_E7"], [56, 1, 1, "", "KR_type_A"], [56, 1, 1, "", "KR_type_A2"], [56, 1, 1, "", "KR_type_A2Element"], [56, 1, 1, "", "KR_type_Bn"], [56, 1, 1, "", "KR_type_BnElement"], [56, 1, 1, "", "KR_type_C"], [56, 1, 1, "", "KR_type_CElement"], [56, 1, 1, "", "KR_type_Cn"], [56, 1, 1, "", "KR_type_CnElement"], [56, 1, 1, "", "KR_type_D_tri1"], [56, 1, 1, "", "KR_type_Dn_twisted"], [56, 1, 1, "", "KR_type_Dn_twistedElement"], [56, 1, 1, "", "KR_type_E6"], [56, 1, 1, "", "KR_type_E7"], [56, 1, 1, "", "KR_type_box"], [56, 1, 1, "", "KR_type_boxElement"], [56, 1, 1, "", "KR_type_spin"], [56, 1, 1, "", "KR_type_vertical"], [56, 3, 1, "", "KashiwaraNakashimaTableaux"], [56, 3, 1, "", "KirillovReshetikhinCrystal"], [56, 3, 1, "", "KirillovReshetikhinCrystalFromLSPaths"], [56, 1, 1, "", "KirillovReshetikhinCrystalFromPromotion"], [56, 1, 1, "", "KirillovReshetikhinCrystalFromPromotionElement"], [56, 1, 1, "", "KirillovReshetikhinGenericCrystal"], [56, 1, 1, "", "KirillovReshetikhinGenericCrystalElement"], [56, 1, 1, "", "PMDiagram"], [56, 3, 1, "", "horizontal_dominoes_removed"], [56, 3, 1, "", "partitions_in_box"], [56, 3, 1, "", "vertical_dominoes_removed"]], "sage.combinat.crystals.kirillov_reshetikhin.CrystalDiagramAutomorphism": [[56, 2, 1, "", "is_embedding"], [56, 2, 1, "", "is_isomorphism"], [56, 2, 1, "", "is_strict"], [56, 2, 1, "", "is_surjective"]], "sage.combinat.crystals.kirillov_reshetikhin.CrystalOfTableaux_E7": [[56, 2, 1, "", "module_generator"]], "sage.combinat.crystals.kirillov_reshetikhin.KR_type_A": [[56, 2, 1, "", "classical_decomposition"], [56, 2, 1, "", "dynkin_diagram_automorphism"], [56, 2, 1, "", "promotion"], [56, 2, 1, "", "promotion_inverse"]], "sage.combinat.crystals.kirillov_reshetikhin.KR_type_A2": [[56, 4, 1, "", "Element"], [56, 2, 1, "", "ambient_crystal"], [56, 2, 1, "", "ambient_dict_pm_diagrams"], [56, 2, 1, "", "ambient_highest_weight_dict"], [56, 2, 1, "", "classical_decomposition"], [56, 2, 1, "", "from_ambient_crystal"], [56, 2, 1, "", "highest_weight_dict"], [56, 2, 1, "", "module_generator"], [56, 2, 1, "", "to_ambient_crystal"]], "sage.combinat.crystals.kirillov_reshetikhin.KR_type_A2Element": [[56, 2, 1, "", "e0"], [56, 2, 1, "", "epsilon0"], [56, 2, 1, "", "f0"], [56, 2, 1, "", "phi0"]], "sage.combinat.crystals.kirillov_reshetikhin.KR_type_Bn": [[56, 4, 1, "", "Element"], [56, 2, 1, "", "ambient_crystal"], [56, 2, 1, "", "ambient_highest_weight_dict"], [56, 2, 1, "", "classical_decomposition"], [56, 2, 1, "", "from_ambient_crystal"], [56, 2, 1, "", "highest_weight_dict"], [56, 2, 1, "", "similarity_factor"], [56, 2, 1, "", "to_ambient_crystal"]], "sage.combinat.crystals.kirillov_reshetikhin.KR_type_BnElement": [[56, 2, 1, "", "e0"], [56, 2, 1, "", "epsilon0"], [56, 2, 1, "", "f0"], [56, 2, 1, "", "phi0"]], "sage.combinat.crystals.kirillov_reshetikhin.KR_type_C": [[56, 4, 1, "", "Element"], [56, 2, 1, "", "ambient_crystal"], [56, 2, 1, "", "ambient_dict_pm_diagrams"], [56, 2, 1, "", "ambient_highest_weight_dict"], [56, 2, 1, "", "classical_decomposition"], [56, 2, 1, "", "from_ambient_crystal"], [56, 2, 1, "", "highest_weight_dict"], [56, 2, 1, "", "to_ambient_crystal"]], "sage.combinat.crystals.kirillov_reshetikhin.KR_type_CElement": [[56, 2, 1, "", "e0"], [56, 2, 1, "", "epsilon0"], [56, 2, 1, "", "f0"], [56, 2, 1, "", "phi0"]], "sage.combinat.crystals.kirillov_reshetikhin.KR_type_Cn": [[56, 4, 1, "", "Element"], [56, 2, 1, "", "classical_decomposition"], [56, 2, 1, "", "from_highest_weight_vector_to_pm_diagram"], [56, 2, 1, "", "from_pm_diagram_to_highest_weight_vector"]], "sage.combinat.crystals.kirillov_reshetikhin.KR_type_CnElement": [[56, 2, 1, "", "e0"], [56, 2, 1, "", "epsilon0"], [56, 2, 1, "", "f0"], [56, 2, 1, "", "phi0"]], "sage.combinat.crystals.kirillov_reshetikhin.KR_type_D_tri1": [[56, 1, 1, "", "Element"], [56, 2, 1, "", "classical_decomposition"], [56, 2, 1, "", "from_coordinates"]], "sage.combinat.crystals.kirillov_reshetikhin.KR_type_D_tri1.Element": [[56, 2, 1, "", "coordinates"], [56, 2, 1, "", "e0"], [56, 2, 1, "", "epsilon0"], [56, 2, 1, "", "f0"], [56, 2, 1, "", "phi0"]], "sage.combinat.crystals.kirillov_reshetikhin.KR_type_Dn_twisted": [[56, 4, 1, "", "Element"], [56, 2, 1, "", "classical_decomposition"], [56, 2, 1, "", "from_highest_weight_vector_to_pm_diagram"], [56, 2, 1, "", "from_pm_diagram_to_highest_weight_vector"]], "sage.combinat.crystals.kirillov_reshetikhin.KR_type_Dn_twistedElement": [[56, 2, 1, "", "e0"], [56, 2, 1, "", "epsilon0"], [56, 2, 1, "", "f0"], [56, 2, 1, "", "phi0"]], "sage.combinat.crystals.kirillov_reshetikhin.KR_type_E6": [[56, 2, 1, "", "affine_weight"], [56, 2, 1, "", "automorphism_on_affine_weight"], [56, 2, 1, "", "classical_decomposition"], [56, 2, 1, "", "dynkin_diagram_automorphism"], [56, 2, 1, "", "highest_weight_dict"], [56, 2, 1, "", "highest_weight_dict_inv"], [56, 2, 1, "", "hw_auxiliary"], [56, 2, 1, "", "promotion"], [56, 2, 1, "", "promotion_inverse"], [56, 2, 1, "", "promotion_on_highest_weight_vectors"], [56, 2, 1, "", "promotion_on_highest_weight_vectors_function"]], "sage.combinat.crystals.kirillov_reshetikhin.KR_type_E7": [[56, 2, 1, "", "A7_decomposition"], [56, 1, 1, "", "Element"], [56, 2, 1, "", "classical_decomposition"], [56, 2, 1, "", "from_A7_crystal"], [56, 2, 1, "", "to_A7_crystal"]], "sage.combinat.crystals.kirillov_reshetikhin.KR_type_E7.Element": [[56, 2, 1, "", "e0"], [56, 2, 1, "", "f0"]], "sage.combinat.crystals.kirillov_reshetikhin.KR_type_box": [[56, 4, 1, "", "Element"], [56, 2, 1, "", "ambient_crystal"], [56, 2, 1, "", "ambient_highest_weight_dict"], [56, 2, 1, "", "classical_decomposition"], [56, 2, 1, "", "from_ambient_crystal"], [56, 2, 1, "", "highest_weight_dict"], [56, 2, 1, "", "similarity_factor"], [56, 2, 1, "", "to_ambient_crystal"]], "sage.combinat.crystals.kirillov_reshetikhin.KR_type_boxElement": [[56, 2, 1, "", "e0"], [56, 2, 1, "", "epsilon0"], [56, 2, 1, "", "f0"], [56, 2, 1, "", "phi0"]], "sage.combinat.crystals.kirillov_reshetikhin.KR_type_spin": [[56, 2, 1, "", "classical_decomposition"], [56, 2, 1, "", "dynkin_diagram_automorphism"], [56, 2, 1, "", "promotion"], [56, 2, 1, "", "promotion_inverse"], [56, 2, 1, "", "promotion_on_highest_weight_vectors"], [56, 2, 1, "", "promotion_on_highest_weight_vectors_inverse"]], "sage.combinat.crystals.kirillov_reshetikhin.KR_type_vertical": [[56, 2, 1, "", "classical_decomposition"], [56, 2, 1, "", "dynkin_diagram_automorphism"], [56, 2, 1, "", "from_highest_weight_vector_to_pm_diagram"], [56, 2, 1, "", "from_pm_diagram_to_highest_weight_vector"], [56, 2, 1, "", "promotion"], [56, 2, 1, "", "promotion_inverse"], [56, 2, 1, "", "promotion_on_highest_weight_vector"]], "sage.combinat.crystals.kirillov_reshetikhin.KirillovReshetikhinCrystalFromPromotion": [[56, 4, 1, "", "Element"]], "sage.combinat.crystals.kirillov_reshetikhin.KirillovReshetikhinGenericCrystal": [[56, 4, 1, "", "Element"], [56, 2, 1, "", "classically_highest_weight_vectors"], [56, 2, 1, "", "kirillov_reshetikhin_tableaux"], [56, 2, 1, "", "module_generator"], [56, 2, 1, "", "r"], [56, 2, 1, "", "s"]], "sage.combinat.crystals.kirillov_reshetikhin.KirillovReshetikhinGenericCrystalElement": [[56, 2, 1, "", "lusztig_involution"], [56, 2, 1, "", "pp"], [56, 2, 1, "", "to_kirillov_reshetikhin_tableau"], [56, 2, 1, "", "to_tableau"]], "sage.combinat.crystals.kirillov_reshetikhin.PMDiagram": [[56, 2, 1, "", "heights_of_addable_plus"], [56, 2, 1, "", "heights_of_minus"], [56, 2, 1, "", "inner_shape"], [56, 2, 1, "", "intermediate_shape"], [56, 2, 1, "", "outer_shape"], [56, 2, 1, "", "pp"], [56, 2, 1, "", "sigma"]], "sage.combinat.crystals.kyoto_path_model": [[57, 1, 1, "", "KyotoPathModel"]], "sage.combinat.crystals.kyoto_path_model.KyotoPathModel": [[57, 1, 1, "", "Element"], [57, 2, 1, "", "finite_tensor_product"], [57, 2, 1, "", "weight_lattice_realization"]], "sage.combinat.crystals.kyoto_path_model.KyotoPathModel.Element": [[57, 2, 1, "", "e"], [57, 2, 1, "", "epsilon"], [57, 2, 1, "", "f"], [57, 2, 1, "", "phi"], [57, 2, 1, "", "truncate"], [57, 2, 1, "", "weight"]], "sage.combinat.crystals.letters": [[58, 1, 1, "", "BKKLetter"], [58, 1, 1, "", "ClassicalCrystalOfLetters"], [58, 1, 1, "", "ClassicalCrystalOfLettersWrapped"], [58, 1, 1, "", "CrystalOfBKKLetters"], [58, 3, 1, "", "CrystalOfLetters"], [58, 1, 1, "", "CrystalOfQueerLetters"], [58, 1, 1, "", "Crystal_of_letters_type_A_element"], [58, 1, 1, "", "Crystal_of_letters_type_B_element"], [58, 1, 1, "", "Crystal_of_letters_type_C_element"], [58, 1, 1, "", "Crystal_of_letters_type_D_element"], [58, 1, 1, "", "Crystal_of_letters_type_E6_element"], [58, 1, 1, "", "Crystal_of_letters_type_E6_element_dual"], [58, 1, 1, "", "Crystal_of_letters_type_E7_element"], [58, 1, 1, "", "Crystal_of_letters_type_G_element"], [58, 1, 1, "", "EmptyLetter"], [58, 1, 1, "", "Letter"], [58, 1, 1, "", "LetterTuple"], [58, 1, 1, "", "LetterWrapped"], [58, 1, 1, "", "QueerLetter_element"]], "sage.combinat.crystals.letters.BKKLetter": [[58, 2, 1, "", "e"], [58, 2, 1, "", "f"], [58, 2, 1, "", "weight"]], "sage.combinat.crystals.letters.ClassicalCrystalOfLetters": [[58, 2, 1, "", "list"], [58, 2, 1, "", "lt_elements"]], "sage.combinat.crystals.letters.CrystalOfBKKLetters": [[58, 4, 1, "", "Element"]], "sage.combinat.crystals.letters.CrystalOfQueerLetters": [[58, 4, 1, "", "Element"], [58, 2, 1, "", "index_set"]], "sage.combinat.crystals.letters.Crystal_of_letters_type_A_element": [[58, 2, 1, "", "e"], [58, 2, 1, "", "epsilon"], [58, 2, 1, "", "f"], [58, 2, 1, "", "phi"], [58, 2, 1, "", "weight"]], "sage.combinat.crystals.letters.Crystal_of_letters_type_B_element": [[58, 2, 1, "", "e"], [58, 2, 1, "", "epsilon"], [58, 2, 1, "", "f"], [58, 2, 1, "", "phi"], [58, 2, 1, "", "weight"]], "sage.combinat.crystals.letters.Crystal_of_letters_type_C_element": [[58, 2, 1, "", "e"], [58, 2, 1, "", "epsilon"], [58, 2, 1, "", "f"], [58, 2, 1, "", "phi"], [58, 2, 1, "", "weight"]], "sage.combinat.crystals.letters.Crystal_of_letters_type_D_element": [[58, 2, 1, "", "e"], [58, 2, 1, "", "epsilon"], [58, 2, 1, "", "f"], [58, 2, 1, "", "phi"], [58, 2, 1, "", "weight"]], "sage.combinat.crystals.letters.Crystal_of_letters_type_E6_element": [[58, 2, 1, "", "e"], [58, 2, 1, "", "f"], [58, 2, 1, "", "weight"]], "sage.combinat.crystals.letters.Crystal_of_letters_type_E6_element_dual": [[58, 2, 1, "", "e"], [58, 2, 1, "", "f"], [58, 2, 1, "", "lift"], [58, 2, 1, "", "retract"], [58, 2, 1, "", "weight"]], "sage.combinat.crystals.letters.Crystal_of_letters_type_E7_element": [[58, 2, 1, "", "e"], [58, 2, 1, "", "f"], [58, 2, 1, "", "weight"]], "sage.combinat.crystals.letters.Crystal_of_letters_type_G_element": [[58, 2, 1, "", "e"], [58, 2, 1, "", "epsilon"], [58, 2, 1, "", "f"], [58, 2, 1, "", "phi"], [58, 2, 1, "", "weight"]], "sage.combinat.crystals.letters.EmptyLetter": [[58, 2, 1, "", "e"], [58, 2, 1, "", "epsilon"], [58, 2, 1, "", "f"], [58, 2, 1, "", "phi"], [58, 4, 1, "", "value"], [58, 2, 1, "", "weight"]], "sage.combinat.crystals.letters.Letter": [[58, 4, 1, "", "value"]], "sage.combinat.crystals.letters.LetterTuple": [[58, 2, 1, "", "epsilon"], [58, 2, 1, "", "phi"], [58, 4, 1, "", "value"]], "sage.combinat.crystals.letters.LetterWrapped": [[58, 2, 1, "", "e"], [58, 2, 1, "", "epsilon"], [58, 2, 1, "", "f"], [58, 2, 1, "", "phi"], [58, 4, 1, "", "value"]], "sage.combinat.crystals.letters.QueerLetter_element": [[58, 2, 1, "", "e"], [58, 2, 1, "", "epsilon"], [58, 2, 1, "", "f"], [58, 2, 1, "", "phi"], [58, 2, 1, "", "weight"]], "sage.combinat.crystals.littelmann_path": [[59, 1, 1, "", "CrystalOfLSPaths"], [59, 1, 1, "", "CrystalOfProjectedLevelZeroLSPaths"], [59, 1, 1, "", "InfinityCrystalOfLSPaths"], [59, 3, 1, "", "positively_parallel_weights"]], "sage.combinat.crystals.littelmann_path.CrystalOfLSPaths": [[59, 1, 1, "", "Element"], [59, 2, 1, "", "weight_lattice_realization"]], "sage.combinat.crystals.littelmann_path.CrystalOfLSPaths.Element": [[59, 2, 1, "", "compress"], [59, 2, 1, "", "dualize"], [59, 2, 1, "", "e"], [59, 2, 1, "", "endpoint"], [59, 2, 1, "", "epsilon"], [59, 2, 1, "", "f"], [59, 2, 1, "", "phi"], [59, 2, 1, "", "reflect_step"], [59, 2, 1, "", "s"], [59, 2, 1, "", "split_step"], [59, 2, 1, "", "weight"]], "sage.combinat.crystals.littelmann_path.CrystalOfProjectedLevelZeroLSPaths": [[59, 1, 1, "", "Element"], [59, 2, 1, "", "classically_highest_weight_vectors"], [59, 2, 1, "", "is_perfect"], [59, 2, 1, "", "maximal_vector"], [59, 2, 1, "", "one_dimensional_configuration_sum"]], "sage.combinat.crystals.littelmann_path.CrystalOfProjectedLevelZeroLSPaths.Element": [[59, 2, 1, "", "energy_function"], [59, 2, 1, "", "scalar_factors"], [59, 2, 1, "", "weyl_group_representation"]], "sage.combinat.crystals.littelmann_path.InfinityCrystalOfLSPaths": [[59, 1, 1, "", "Element"], [59, 2, 1, "", "module_generator"], [59, 2, 1, "", "weight_lattice_realization"]], "sage.combinat.crystals.littelmann_path.InfinityCrystalOfLSPaths.Element": [[59, 2, 1, "", "e"], [59, 2, 1, "", "f"], [59, 2, 1, "", "phi"], [59, 2, 1, "", "weight"]], "sage.combinat.crystals.monomial_crystals": [[60, 1, 1, "", "CrystalOfNakajimaMonomials"], [60, 1, 1, "", "CrystalOfNakajimaMonomialsElement"], [60, 1, 1, "", "InfinityCrystalOfNakajimaMonomials"], [60, 1, 1, "", "NakajimaMonomial"]], "sage.combinat.crystals.monomial_crystals.CrystalOfNakajimaMonomials": [[60, 4, 1, "", "Element"], [60, 2, 1, "", "cardinality"]], "sage.combinat.crystals.monomial_crystals.CrystalOfNakajimaMonomialsElement": [[60, 2, 1, "", "f"], [60, 2, 1, "", "weight"]], "sage.combinat.crystals.monomial_crystals.InfinityCrystalOfNakajimaMonomials": [[60, 4, 1, "", "Element"], [60, 2, 1, "", "c"], [60, 2, 1, "", "cardinality"], [60, 2, 1, "", "get_variables"], [60, 2, 1, "", "set_variables"]], "sage.combinat.crystals.monomial_crystals.NakajimaMonomial": [[60, 2, 1, "", "e"], [60, 2, 1, "", "epsilon"], [60, 2, 1, "", "f"], [60, 2, 1, "", "phi"], [60, 2, 1, "", "weight"], [60, 2, 1, "", "weight_in_root_lattice"]], "sage.combinat.crystals.multisegments": [[61, 1, 1, "", "InfinityCrystalOfMultisegments"]], "sage.combinat.crystals.multisegments.InfinityCrystalOfMultisegments": [[61, 1, 1, "", "Element"], [61, 2, 1, "", "highest_weight_vector"], [61, 2, 1, "", "weight_lattice_realization"]], "sage.combinat.crystals.multisegments.InfinityCrystalOfMultisegments.Element": [[61, 2, 1, "", "e"], [61, 2, 1, "", "epsilon"], [61, 2, 1, "", "f"], [61, 2, 1, "", "phi"], [61, 2, 1, "", "weight"]], "sage.combinat.crystals.mv_polytopes": [[62, 1, 1, "", "MVPolytope"], [62, 1, 1, "", "MVPolytopes"]], "sage.combinat.crystals.mv_polytopes.MVPolytope": [[62, 2, 1, "", "plot"], [62, 2, 1, "", "polytope"]], "sage.combinat.crystals.mv_polytopes.MVPolytopes": [[62, 4, 1, "", "Element"], [62, 2, 1, "", "latex_options"], [62, 2, 1, "", "set_latex_options"]], "sage.combinat.crystals.pbw_crystal": [[63, 1, 1, "", "PBWCrystal"], [63, 1, 1, "", "PBWCrystalElement"]], "sage.combinat.crystals.pbw_crystal.PBWCrystal": [[63, 4, 1, "", "Element"], [63, 2, 1, "", "default_long_word"], [63, 2, 1, "", "set_default_long_word"]], "sage.combinat.crystals.pbw_crystal.PBWCrystalElement": [[63, 2, 1, "", "e"], [63, 2, 1, "", "epsilon"], [63, 2, 1, "", "f"], [63, 2, 1, "", "lusztig_datum"], [63, 2, 1, "", "phi"], [63, 2, 1, "", "star"], [63, 2, 1, "", "weight"]], "sage.combinat.crystals.pbw_datum": [[64, 1, 1, "", "PBWData"], [64, 1, 1, "", "PBWDatum"], [64, 3, 1, "", "compute_new_lusztig_datum"], [64, 3, 1, "", "enhance_braid_move_chain"], [64, 3, 1, "", "tropical_plucker_relation"]], "sage.combinat.crystals.pbw_datum.PBWData": [[64, 2, 1, "", "convert_to_new_long_word"]], "sage.combinat.crystals.pbw_datum.PBWDatum": [[64, 2, 1, "", "convert_to_long_word_with_first_letter"], [64, 2, 1, "", "convert_to_new_long_word"], [64, 2, 1, "", "is_equivalent_to"], [64, 2, 1, "", "star"], [64, 2, 1, "", "weight"]], "sage.combinat.crystals.polyhedral_realization": [[65, 1, 1, "", "InfinityCrystalAsPolyhedralRealization"]], "sage.combinat.crystals.polyhedral_realization.InfinityCrystalAsPolyhedralRealization": [[65, 1, 1, "", "Element"], [65, 2, 1, "", "finite_tensor_product"]], "sage.combinat.crystals.polyhedral_realization.InfinityCrystalAsPolyhedralRealization.Element": [[65, 2, 1, "", "e"], [65, 2, 1, "", "epsilon"], [65, 2, 1, "", "f"], [65, 2, 1, "", "phi"], [65, 2, 1, "", "truncate"]], "sage.combinat.crystals.spins": [[66, 3, 1, "", "CrystalOfSpins"], [66, 3, 1, "", "CrystalOfSpinsMinus"], [66, 3, 1, "", "CrystalOfSpinsPlus"], [66, 1, 1, "", "GenericCrystalOfSpins"], [66, 1, 1, "", "Spin"], [66, 1, 1, "", "Spin_crystal_type_B_element"], [66, 1, 1, "", "Spin_crystal_type_D_element"]], "sage.combinat.crystals.spins.GenericCrystalOfSpins": [[66, 2, 1, "", "lt_elements"]], "sage.combinat.crystals.spins.Spin": [[66, 2, 1, "", "pp"], [66, 2, 1, "", "signature"], [66, 4, 1, "", "value"], [66, 2, 1, "", "weight"]], "sage.combinat.crystals.spins.Spin_crystal_type_B_element": [[66, 2, 1, "", "e"], [66, 2, 1, "", "epsilon"], [66, 2, 1, "", "f"], [66, 2, 1, "", "phi"]], "sage.combinat.crystals.spins.Spin_crystal_type_D_element": [[66, 2, 1, "", "e"], [66, 2, 1, "", "epsilon"], [66, 2, 1, "", "f"], [66, 2, 1, "", "phi"]], "sage.combinat.crystals.star_crystal": [[67, 1, 1, "", "StarCrystal"]], "sage.combinat.crystals.star_crystal.StarCrystal": [[67, 1, 1, "", "Element"]], "sage.combinat.crystals.star_crystal.StarCrystal.Element": [[67, 2, 1, "", "e"], [67, 2, 1, "", "epsilon"], [67, 2, 1, "", "f"], [67, 2, 1, "", "jump"], [67, 2, 1, "", "phi"], [67, 2, 1, "", "weight"]], "sage.combinat.crystals.tensor_product": [[68, 1, 1, "", "CrystalOfQueerTableaux"], [68, 1, 1, "", "CrystalOfTableaux"], [68, 1, 1, "", "CrystalOfWords"], [68, 1, 1, "", "FullTensorProductOfCrystals"], [68, 1, 1, "", "FullTensorProductOfQueerSuperCrystals"], [68, 1, 1, "", "FullTensorProductOfRegularCrystals"], [68, 1, 1, "", "FullTensorProductOfSuperCrystals"], [68, 1, 1, "", "QueerSuperCrystalsMixin"], [68, 1, 1, "", "TensorProductOfCrystals"], [68, 1, 1, "", "TensorProductOfCrystalsWithGenerators"], [68, 1, 1, "", "TensorProductOfRegularCrystalsWithGenerators"]], "sage.combinat.crystals.tensor_product.CrystalOfQueerTableaux": [[68, 1, 1, "", "Element"]], "sage.combinat.crystals.tensor_product.CrystalOfQueerTableaux.Element": [[68, 2, 1, "", "rows"]], "sage.combinat.crystals.tensor_product.CrystalOfTableaux": [[68, 1, 1, "", "Element"], [68, 2, 1, "", "cartan_type"], [68, 2, 1, "", "module_generator"]], "sage.combinat.crystals.tensor_product.CrystalOfWords": [[68, 1, 1, "", "Element"]], "sage.combinat.crystals.tensor_product.FullTensorProductOfCrystals": [[68, 2, 1, "", "cardinality"], [68, 2, 1, "", "weight_lattice_realization"]], "sage.combinat.crystals.tensor_product.FullTensorProductOfQueerSuperCrystals": [[68, 1, 1, "", "Element"]], "sage.combinat.crystals.tensor_product.FullTensorProductOfRegularCrystals": [[68, 1, 1, "", "Element"]], "sage.combinat.crystals.tensor_product.FullTensorProductOfSuperCrystals": [[68, 1, 1, "", "Element"]], "sage.combinat.crystals.tensor_product.QueerSuperCrystalsMixin": [[68, 2, 1, "", "index_set"]], "sage.combinat.crystals.tensor_product.TensorProductOfCrystals": [[68, 4, 1, "", "options"]], "sage.combinat.crystals.tensor_product.TensorProductOfRegularCrystalsWithGenerators": [[68, 1, 1, "", "Element"]], "sage.combinat.crystals.tensor_product_element": [[69, 1, 1, "", "CrystalOfBKKTableauxElement"], [69, 1, 1, "", "CrystalOfTableauxElement"], [69, 1, 1, "", "ImmutableListWithParent"], [69, 1, 1, "", "InfinityCrystalOfTableauxElement"], [69, 1, 1, "", "InfinityCrystalOfTableauxElementTypeD"], [69, 1, 1, "", "InfinityQueerCrystalOfTableauxElement"], [69, 1, 1, "", "TensorProductOfCrystalsElement"], [69, 1, 1, "", "TensorProductOfQueerSuperCrystalsElement"], [69, 1, 1, "", "TensorProductOfRegularCrystalsElement"], [69, 1, 1, "", "TensorProductOfSuperCrystalsElement"]], "sage.combinat.crystals.tensor_product_element.CrystalOfBKKTableauxElement": [[69, 2, 1, "", "pp"], [69, 2, 1, "", "to_tableau"]], "sage.combinat.crystals.tensor_product_element.CrystalOfTableauxElement": [[69, 2, 1, "", "pp"], [69, 2, 1, "", "promotion"], [69, 2, 1, "", "promotion_inverse"], [69, 2, 1, "", "shape"], [69, 2, 1, "", "to_tableau"]], "sage.combinat.crystals.tensor_product_element.InfinityCrystalOfTableauxElement": [[69, 2, 1, "", "e"], [69, 2, 1, "", "f"]], "sage.combinat.crystals.tensor_product_element.InfinityCrystalOfTableauxElementTypeD": [[69, 2, 1, "", "e"], [69, 2, 1, "", "f"]], "sage.combinat.crystals.tensor_product_element.InfinityQueerCrystalOfTableauxElement": [[69, 2, 1, "", "e"], [69, 2, 1, "", "epsilon"], [69, 2, 1, "", "f"], [69, 2, 1, "", "rows"], [69, 2, 1, "", "weight"]], "sage.combinat.crystals.tensor_product_element.TensorProductOfCrystalsElement": [[69, 2, 1, "", "e"], [69, 2, 1, "", "epsilon"], [69, 2, 1, "", "f"], [69, 2, 1, "", "phi"], [69, 2, 1, "", "pp"], [69, 2, 1, "", "weight"]], "sage.combinat.crystals.tensor_product_element.TensorProductOfQueerSuperCrystalsElement": [[69, 2, 1, "", "e"], [69, 2, 1, "", "epsilon"], [69, 2, 1, "", "f"], [69, 2, 1, "", "phi"]], "sage.combinat.crystals.tensor_product_element.TensorProductOfRegularCrystalsElement": [[69, 2, 1, "", "e"], [69, 2, 1, "", "epsilon"], [69, 2, 1, "", "f"], [69, 2, 1, "", "phi"], [69, 2, 1, "", "position_of_first_unmatched_plus"], [69, 2, 1, "", "position_of_last_unmatched_minus"], [69, 2, 1, "", "positions_of_unmatched_minus"], [69, 2, 1, "", "positions_of_unmatched_plus"]], "sage.combinat.crystals.tensor_product_element.TensorProductOfSuperCrystalsElement": [[69, 2, 1, "", "e"], [69, 2, 1, "", "epsilon"], [69, 2, 1, "", "f"], [69, 2, 1, "", "phi"]], "sage.combinat.cyclic_sieving_phenomenon": [[70, 3, 1, "", "CyclicSievingCheck"], [70, 3, 1, "", "CyclicSievingPolynomial"], [70, 3, 1, "", "orbit_decomposition"]], "sage.combinat.debruijn_sequence": [[71, 1, 1, "", "DeBruijnSequences"], [71, 3, 1, "", "debruijn_sequence"], [71, 3, 1, "", "is_debruijn_sequence"]], "sage.combinat.debruijn_sequence.DeBruijnSequences": [[71, 2, 1, "", "an_element"], [71, 2, 1, "", "cardinality"]], "sage.combinat.degree_sequences": [[72, 1, 1, "", "DegreeSequences"]], "sage.combinat.derangements": [[73, 1, 1, "", "Derangement"], [73, 1, 1, "", "Derangements"]], "sage.combinat.derangements.Derangement": [[73, 2, 1, "", "to_permutation"]], "sage.combinat.derangements.Derangements": [[73, 4, 1, "", "Element"], [73, 2, 1, "", "cardinality"], [73, 2, 1, "", "random_element"]], "sage.combinat.descent_algebra": [[74, 1, 1, "", "DescentAlgebra"], [74, 1, 1, "", "DescentAlgebraBases"]], "sage.combinat.descent_algebra.DescentAlgebra": [[74, 1, 1, "", "B"], [74, 1, 1, "", "D"], [74, 1, 1, "", "I"], [74, 2, 1, "", "a_realization"], [74, 4, 1, "", "idempotent"], [74, 4, 1, "", "standard"], [74, 4, 1, "", "subset"]], "sage.combinat.descent_algebra.DescentAlgebra.B": [[74, 2, 1, "", "one_basis"], [74, 2, 1, "", "product_on_basis"], [74, 2, 1, "", "to_D_basis"], [74, 2, 1, "", "to_I_basis"], [74, 2, 1, "", "to_nsym"]], "sage.combinat.descent_algebra.DescentAlgebra.D": [[74, 2, 1, "", "one_basis"], [74, 2, 1, "", "product_on_basis"], [74, 2, 1, "", "to_B_basis"], [74, 2, 1, "", "to_symmetric_group_algebra_on_basis"]], "sage.combinat.descent_algebra.DescentAlgebra.I": [[74, 2, 1, "", "idempotent"], [74, 2, 1, "", "one"], [74, 2, 1, "", "one_basis"], [74, 2, 1, "", "product_on_basis"], [74, 2, 1, "", "to_B_basis"]], "sage.combinat.descent_algebra.DescentAlgebraBases": [[74, 1, 1, "", "ElementMethods"], [74, 1, 1, "", "ParentMethods"], [74, 2, 1, "", "super_categories"]], "sage.combinat.descent_algebra.DescentAlgebraBases.ElementMethods": [[74, 2, 1, "", "to_symmetric_group_algebra"]], "sage.combinat.descent_algebra.DescentAlgebraBases.ParentMethods": [[74, 2, 1, "", "is_commutative"], [74, 2, 1, "", "is_field"], [74, 2, 1, "", "to_symmetric_group_algebra"], [74, 2, 1, "", "to_symmetric_group_algebra_on_basis"]], "sage.combinat.designs": [[75, 0, 0, "-", "all"], [76, 0, 0, "-", "bibd"], [77, 0, 0, "-", "block_design"], [78, 0, 0, "-", "covering_array"], [79, 0, 0, "-", "covering_design"], [80, 0, 0, "-", "database"], [81, 0, 0, "-", "design_catalog"], [82, 0, 0, "-", "designs_pyx"], [83, 0, 0, "-", "difference_family"], [84, 0, 0, "-", "difference_matrices"], [85, 0, 0, "-", "evenly_distributed_sets"], [86, 0, 0, "-", "ext_rep"], [87, 0, 0, "-", "gen_quadrangles_with_spread"], [88, 0, 0, "-", "group_divisible_designs"], [89, 0, 0, "-", "incidence_structures"], [90, 0, 0, "-", "latin_squares"], [91, 0, 0, "-", "orthogonal_arrays"], [92, 0, 0, "-", "orthogonal_arrays_build_recursive"], [93, 0, 0, "-", "orthogonal_arrays_find_recursive"], [94, 0, 0, "-", "resolvable_bibd"], [95, 0, 0, "-", "steiner_quadruple_systems"], [96, 0, 0, "-", "subhypergraph_search"], [97, 0, 0, "-", "twographs"]], "sage.combinat.designs.bibd": [[76, 4, 1, "", "BIBD"], [76, 3, 1, "", "BIBD_5q_5_for_q_prime_power"], [76, 3, 1, "", "BIBD_from_PBD"], [76, 3, 1, "", "BIBD_from_TD"], [76, 3, 1, "", "BIBD_from_arc_in_desarguesian_projective_plane"], [76, 3, 1, "", "BIBD_from_difference_family"], [76, 1, 1, "", "BalancedIncompleteBlockDesign"], [76, 3, 1, "", "BruckRyserChowla_check"], [76, 3, 1, "", "PBD_4_5_8_9_12"], [76, 3, 1, "", "PBD_from_TD"], [76, 1, 1, "", "PairwiseBalancedDesign"], [76, 3, 1, "", "balanced_incomplete_block_design"], [76, 3, 1, "", "biplane"], [76, 3, 1, "", "steiner_triple_system"], [76, 3, 1, "", "v_4_1_BIBD"], [76, 3, 1, "", "v_5_1_BIBD"]], "sage.combinat.designs.bibd.BalancedIncompleteBlockDesign": [[76, 2, 1, "", "arc"]], "sage.combinat.designs.block_design": [[77, 3, 1, "", "AffineGeometryDesign"], [77, 3, 1, "", "CremonaRichmondConfiguration"], [77, 3, 1, "", "DesarguesianProjectivePlaneDesign"], [77, 3, 1, "", "Hadamard3Design"], [77, 3, 1, "", "HadamardDesign"], [77, 3, 1, "", "HughesPlane"], [77, 3, 1, "", "ProjectiveGeometryDesign"], [77, 3, 1, "", "WittDesign"], [77, 3, 1, "", "are_hyperplanes_in_projective_geometry_parameters"], [77, 3, 1, "", "normalize_hughes_plane_point"], [77, 3, 1, "", "projective_plane"], [77, 3, 1, "", "projective_plane_to_OA"], [77, 3, 1, "", "q3_minus_one_matrix"], [77, 3, 1, "", "tdesign_params"]], "sage.combinat.designs.covering_design": [[79, 1, 1, "", "CoveringDesign"], [79, 3, 1, "", "best_known_covering_design_www"], [79, 3, 1, "", "schonheim"], [79, 3, 1, "", "trivial_covering_design"]], "sage.combinat.designs.covering_design.CoveringDesign": [[79, 2, 1, "", "creator"], [79, 2, 1, "", "incidence_structure"], [79, 2, 1, "", "is_covering"], [79, 2, 1, "", "k"], [79, 2, 1, "", "low_bd"], [79, 2, 1, "", "method"], [79, 2, 1, "", "size"], [79, 2, 1, "", "t"], [79, 2, 1, "", "timestamp"], [79, 2, 1, "", "v"]], "sage.combinat.designs.database": [[80, 3, 1, "", "BIBD_106_6_1"], [80, 3, 1, "", "BIBD_111_6_1"], [80, 3, 1, "", "BIBD_126_6_1"], [80, 3, 1, "", "BIBD_136_6_1"], [80, 3, 1, "", "BIBD_141_6_1"], [80, 3, 1, "", "BIBD_171_6_1"], [80, 3, 1, "", "BIBD_196_6_1"], [80, 3, 1, "", "BIBD_201_6_1"], [80, 3, 1, "", "BIBD_45_9_8"], [80, 3, 1, "", "BIBD_56_11_2"], [80, 3, 1, "", "BIBD_66_6_1"], [80, 3, 1, "", "BIBD_76_6_1"], [80, 3, 1, "", "BIBD_79_13_2"], [80, 3, 1, "", "BIBD_96_6_1"], [80, 3, 1, "", "DM_12_6_1"], [80, 3, 1, "", "DM_21_6_1"], [80, 3, 1, "", "DM_24_8_1"], [80, 3, 1, "", "DM_273_17_1"], [80, 3, 1, "", "DM_28_6_1"], [80, 3, 1, "", "DM_33_6_1"], [80, 3, 1, "", "DM_35_6_1"], [80, 3, 1, "", "DM_36_9_1"], [80, 3, 1, "", "DM_39_6_1"], [80, 3, 1, "", "DM_44_6_1"], [80, 3, 1, "", "DM_45_7_1"], [80, 3, 1, "", "DM_48_9_1"], [80, 3, 1, "", "DM_51_6_1"], [80, 3, 1, "", "DM_52_6_1"], [80, 3, 1, "", "DM_55_7_1"], [80, 3, 1, "", "DM_56_8_1"], [80, 3, 1, "", "DM_57_8_1"], [80, 3, 1, "", "DM_60_6_1"], [80, 3, 1, "", "DM_75_8_1"], [80, 3, 1, "", "DM_993_32_1"], [80, 3, 1, "", "HigmanSimsDesign"], [80, 3, 1, "", "MOLS_10_2"], [80, 3, 1, "", "MOLS_12_5"], [80, 3, 1, "", "MOLS_14_4"], [80, 3, 1, "", "MOLS_15_4"], [80, 3, 1, "", "MOLS_18_3"], [80, 3, 1, "", "OA_10_1620"], [80, 3, 1, "", "OA_10_205"], [80, 3, 1, "", "OA_10_469"], [80, 3, 1, "", "OA_10_520"], [80, 3, 1, "", "OA_10_796"], [80, 3, 1, "", "OA_11_160"], [80, 3, 1, "", "OA_11_185"], [80, 3, 1, "", "OA_11_254"], [80, 3, 1, "", "OA_11_640"], [80, 3, 1, "", "OA_11_80"], [80, 3, 1, "", "OA_12_522"], [80, 3, 1, "", "OA_14_524"], [80, 3, 1, "", "OA_15_112"], [80, 3, 1, "", "OA_15_224"], [80, 3, 1, "", "OA_15_896"], [80, 3, 1, "", "OA_16_176"], [80, 3, 1, "", "OA_16_208"], [80, 3, 1, "", "OA_17_560"], [80, 3, 1, "", "OA_20_352"], [80, 3, 1, "", "OA_20_416"], [80, 3, 1, "", "OA_20_544"], [80, 3, 1, "", "OA_25_1262"], [80, 3, 1, "", "OA_520_plus_x"], [80, 3, 1, "", "OA_7_18"], [80, 3, 1, "", "OA_7_66"], [80, 3, 1, "", "OA_7_68"], [80, 3, 1, "", "OA_7_74"], [80, 3, 1, "", "OA_8_69"], [80, 3, 1, "", "OA_8_76"], [80, 3, 1, "", "OA_9_1078"], [80, 3, 1, "", "OA_9_120"], [80, 3, 1, "", "OA_9_135"], [80, 3, 1, "", "OA_9_1612"], [80, 3, 1, "", "OA_9_40"], [80, 3, 1, "", "QDM_19_6_1_1_1"], [80, 3, 1, "", "QDM_21_5_1_1_1"], [80, 3, 1, "", "QDM_21_6_1_1_5"], [80, 3, 1, "", "QDM_25_6_1_1_5"], [80, 3, 1, "", "QDM_33_6_1_1_1"], [80, 3, 1, "", "QDM_35_7_1_1_7"], [80, 3, 1, "", "QDM_37_6_1_1_1"], [80, 3, 1, "", "QDM_45_7_1_1_9"], [80, 3, 1, "", "QDM_54_7_1_1_8"], [80, 3, 1, "", "QDM_57_9_1_1_8"], [80, 3, 1, "", "RBIBD_120_8_1"], [80, 3, 1, "", "cyclic_shift"], [80, 3, 1, "", "f"]], "sage.combinat.designs.designs_pyx": [[82, 3, 1, "", "is_covering_array"], [82, 3, 1, "", "is_difference_matrix"], [82, 3, 1, "", "is_group_divisible_design"], [82, 3, 1, "", "is_orthogonal_array"], [82, 3, 1, "", "is_pairwise_balanced_design"], [82, 3, 1, "", "is_projective_plane"], [82, 3, 1, "", "is_quasi_difference_matrix"]], "sage.combinat.designs.difference_family": [[83, 3, 1, "", "are_complementary_difference_sets"], [83, 3, 1, "", "are_hadamard_difference_set_parameters"], [83, 3, 1, "", "are_mcfarland_1973_parameters"], [83, 3, 1, "", "block_stabilizer"], [83, 3, 1, "", "complementary_difference_sets"], [83, 3, 1, "", "complementary_difference_setsI"], [83, 3, 1, "", "complementary_difference_setsII"], [83, 3, 1, "", "complementary_difference_setsIII"], [83, 3, 1, "", "df_q_6_1"], [83, 3, 1, "", "difference_family"], [83, 3, 1, "", "get_fixed_relative_difference_set"], [83, 3, 1, "", "group_law"], [83, 3, 1, "", "hadamard_difference_set_product"], [83, 3, 1, "", "hadamard_difference_set_product_parameters"], [83, 3, 1, "", "is_difference_family"], [83, 3, 1, "", "is_fixed_relative_difference_set"], [83, 3, 1, "", "is_relative_difference_set"], [83, 3, 1, "", "is_supplementary_difference_set"], [83, 3, 1, "", "mcfarland_1973_construction"], [83, 3, 1, "", "one_cyclic_tiling"], [83, 3, 1, "", "one_radical_difference_family"], [83, 3, 1, "", "radical_difference_family"], [83, 3, 1, "", "radical_difference_set"], [83, 3, 1, "", "relative_difference_set_from_homomorphism"], [83, 3, 1, "", "relative_difference_set_from_m_sequence"], [83, 3, 1, "", "singer_difference_set"], [83, 3, 1, "", "skew_supplementary_difference_set"], [83, 3, 1, "", "skew_supplementary_difference_set_over_polynomial_ring"], [83, 3, 1, "", "skew_supplementary_difference_set_with_paley_todd"], [83, 3, 1, "", "supplementary_difference_set"], [83, 3, 1, "", "supplementary_difference_set_from_rel_diff_set"], [83, 3, 1, "", "supplementary_difference_set_hadamard"], [83, 3, 1, "", "turyn_1965_3x3xK"], [83, 3, 1, "", "twin_prime_powers_difference_set"]], "sage.combinat.designs.difference_matrices": [[84, 3, 1, "", "difference_matrix"], [84, 3, 1, "", "difference_matrix_product"], [84, 3, 1, "", "find_product_decomposition"]], "sage.combinat.designs.evenly_distributed_sets": [[85, 1, 1, "", "EvenlyDistributedSetsBacktracker"]], "sage.combinat.designs.evenly_distributed_sets.EvenlyDistributedSetsBacktracker": [[85, 2, 1, "", "an_element"], [85, 2, 1, "", "cardinality"], [85, 2, 1, "", "to_difference_family"]], "sage.combinat.designs.ext_rep": [[86, 1, 1, "", "XTree"], [86, 1, 1, "", "XTreeProcessor"], [86, 3, 1, "", "check_dtrs_protocols"], [86, 3, 1, "", "designs_from_XML"], [86, 3, 1, "", "designs_from_XML_url"], [86, 3, 1, "", "dump_to_tmpfile"], [86, 3, 1, "", "open_extrep_file"], [86, 3, 1, "", "open_extrep_url"]], "sage.combinat.designs.ext_rep.XTreeProcessor": [[86, 2, 1, "", "parse"]], "sage.combinat.designs.gen_quadrangles_with_spread": [[87, 3, 1, "", "dual_GQ_ovoid"], [87, 3, 1, "", "generalised_quadrangle_hermitian_with_ovoid"], [87, 3, 1, "", "generalised_quadrangle_with_spread"], [87, 3, 1, "", "is_GQ_with_spread"]], "sage.combinat.designs.group_divisible_designs": [[88, 3, 1, "", "GDD_4_2"], [88, 1, 1, "", "GroupDivisibleDesign"], [88, 3, 1, "", "group_divisible_design"]], "sage.combinat.designs.group_divisible_designs.GroupDivisibleDesign": [[88, 2, 1, "", "groups"]], "sage.combinat.designs.incidence_structures": [[89, 1, 1, "", "IncidenceStructure"]], "sage.combinat.designs.incidence_structures.IncidenceStructure": [[89, 2, 1, "", "automorphism_group"], [89, 2, 1, "", "block_sizes"], [89, 2, 1, "", "blocks"], [89, 2, 1, "", "canonical_label"], [89, 2, 1, "", "coloring"], [89, 2, 1, "", "complement"], [89, 2, 1, "", "copy"], [89, 2, 1, "", "degree"], [89, 2, 1, "", "degrees"], [89, 2, 1, "", "dual"], [89, 2, 1, "", "edge_coloring"], [89, 2, 1, "", "ground_set"], [89, 2, 1, "", "incidence_graph"], [89, 2, 1, "", "incidence_matrix"], [89, 2, 1, "", "induced_substructure"], [89, 2, 1, "", "intersection_graph"], [89, 2, 1, "", "is_berge_cyclic"], [89, 2, 1, "", "is_connected"], [89, 2, 1, "", "is_generalized_quadrangle"], [89, 2, 1, "", "is_isomorphic"], [89, 2, 1, "", "is_regular"], [89, 2, 1, "", "is_resolvable"], [89, 2, 1, "", "is_simple"], [89, 2, 1, "", "is_spread"], [89, 2, 1, "", "is_t_design"], [89, 2, 1, "", "is_uniform"], [89, 2, 1, "", "isomorphic_substructures_iterator"], [89, 2, 1, "", "num_blocks"], [89, 2, 1, "", "num_points"], [89, 2, 1, "", "packing"], [89, 2, 1, "", "rank"], [89, 2, 1, "", "relabel"], [89, 2, 1, "", "trace"]], "sage.combinat.designs.latin_squares": [[90, 3, 1, "", "MOLS_table"], [90, 3, 1, "", "are_mutually_orthogonal_latin_squares"], [90, 3, 1, "", "latin_square_product"], [90, 3, 1, "", "mutually_orthogonal_latin_squares"]], "sage.combinat.designs.orthogonal_arrays": [[91, 1, 1, "", "OAMainFunctions"], [91, 3, 1, "", "OA_find_disjoint_blocks"], [91, 3, 1, "", "OA_from_PBD"], [91, 3, 1, "", "OA_from_Vmt"], [91, 3, 1, "", "OA_from_quasi_difference_matrix"], [91, 3, 1, "", "OA_from_wider_OA"], [91, 3, 1, "", "OA_n_times_2_pow_c_from_matrix"], [91, 3, 1, "", "OA_relabel"], [91, 3, 1, "", "OA_standard_label"], [91, 3, 1, "", "QDM_from_Vmt"], [91, 3, 1, "", "TD_product"], [91, 1, 1, "", "TransversalDesign"], [91, 3, 1, "", "incomplete_orthogonal_array"], [91, 3, 1, "", "is_transversal_design"], [91, 3, 1, "", "largest_available_k"], [91, 3, 1, "", "orthogonal_array"], [91, 3, 1, "", "transversal_design"], [91, 3, 1, "", "wilson_construction"]], "sage.combinat.designs.orthogonal_arrays.OAMainFunctions": [[91, 2, 1, "", "build"], [91, 2, 1, "", "exists"], [91, 2, 1, "", "explain_construction"], [91, 2, 1, "", "is_available"], [91, 2, 1, "", "largest_available_k"]], "sage.combinat.designs.orthogonal_arrays_build_recursive": [[92, 3, 1, "", "OA_and_oval"], [92, 3, 1, "", "brouwer_separable_design"], [92, 3, 1, "", "construction_3_3"], [92, 3, 1, "", "construction_3_4"], [92, 3, 1, "", "construction_3_5"], [92, 3, 1, "", "construction_3_6"], [92, 3, 1, "", "construction_q_x"], [92, 3, 1, "", "three_factor_product"], [92, 3, 1, "", "thwart_lemma_3_5"], [92, 3, 1, "", "thwart_lemma_4_1"]], "sage.combinat.designs.orthogonal_arrays_find_recursive": [[93, 3, 1, "", "find_brouwer_separable_design"], [93, 3, 1, "", "find_brouwer_van_rees_with_one_truncated_column"], [93, 3, 1, "", "find_construction_3_3"], [93, 3, 1, "", "find_construction_3_4"], [93, 3, 1, "", "find_construction_3_5"], [93, 3, 1, "", "find_construction_3_6"], [93, 3, 1, "", "find_product_decomposition"], [93, 3, 1, "", "find_q_x"], [93, 3, 1, "", "find_recursive_construction"], [93, 3, 1, "", "find_three_factor_product"], [93, 3, 1, "", "find_thwart_lemma_3_5"], [93, 3, 1, "", "find_thwart_lemma_4_1"], [93, 3, 1, "", "find_wilson_decomposition_with_one_truncated_group"], [93, 3, 1, "", "find_wilson_decomposition_with_two_truncated_groups"], [93, 3, 1, "", "int_as_sum"]], "sage.combinat.designs.resolvable_bibd": [[94, 3, 1, "", "PBD_4_7"], [94, 3, 1, "", "PBD_4_7_from_Y"], [94, 3, 1, "", "kirkman_triple_system"], [94, 3, 1, "", "resolvable_balanced_incomplete_block_design"], [94, 3, 1, "", "v_4_1_rbibd"]], "sage.combinat.designs.steiner_quadruple_systems": [[95, 3, 1, "", "P"], [95, 3, 1, "", "barP"], [95, 3, 1, "", "barP_system"], [95, 3, 1, "", "four_n_minus_six"], [95, 3, 1, "", "relabel_system"], [95, 3, 1, "", "steiner_quadruple_system"], [95, 3, 1, "", "three_n_minus_eight"], [95, 3, 1, "", "three_n_minus_four"], [95, 3, 1, "", "three_n_minus_two"], [95, 3, 1, "", "twelve_n_minus_ten"], [95, 3, 1, "", "two_n"]], "sage.combinat.designs.subhypergraph_search": [[96, 1, 1, "", "SubHypergraphSearch"]], "sage.combinat.designs.subhypergraph_search.SubHypergraphSearch": [[96, 2, 1, "", "relabel_heuristic"]], "sage.combinat.designs.twographs": [[97, 1, 1, "", "TwoGraph"], [97, 3, 1, "", "is_twograph"], [97, 3, 1, "", "taylor_twograph"], [97, 3, 1, "", "twograph_descendant"]], "sage.combinat.designs.twographs.TwoGraph": [[97, 2, 1, "", "complement"], [97, 2, 1, "", "descendant"], [97, 2, 1, "", "is_regular_twograph"]], "sage.combinat.diagram": [[98, 1, 1, "", "Diagram"], [98, 1, 1, "", "Diagrams"], [98, 1, 1, "", "NorthwestDiagram"], [98, 1, 1, "", "NorthwestDiagrams"], [98, 3, 1, "", "RotheDiagram"]], "sage.combinat.diagram.Diagram": [[98, 2, 1, "", "cells"], [98, 2, 1, "", "check"], [98, 2, 1, "", "n_cells"], [98, 2, 1, "", "ncols"], [98, 2, 1, "", "nrows"], [98, 2, 1, "", "number_of_cells"], [98, 2, 1, "", "number_of_cols"], [98, 2, 1, "", "number_of_rows"], [98, 2, 1, "", "pp"], [98, 2, 1, "", "size"], [98, 2, 1, "", "specht_module"], [98, 2, 1, "", "specht_module_dimension"]], "sage.combinat.diagram.Diagrams": [[98, 4, 1, "", "Element"], [98, 2, 1, "", "from_composition"], [98, 2, 1, "", "from_polyomino"], [98, 2, 1, "", "from_zero_one_matrix"]], "sage.combinat.diagram.NorthwestDiagram": [[98, 2, 1, "", "check"], [98, 2, 1, "", "peelable_tableaux"]], "sage.combinat.diagram.NorthwestDiagrams": [[98, 4, 1, "", "Element"], [98, 2, 1, "", "from_parallelogram_polyomino"], [98, 2, 1, "", "from_partition"], [98, 2, 1, "", "from_permutation"], [98, 2, 1, "", "from_skew_partition"], [98, 2, 1, "", "rothe_diagram"]], "sage.combinat.diagram_algebras": [[99, 1, 1, "", "AbstractPartitionDiagram"], [99, 1, 1, "", "AbstractPartitionDiagrams"], [99, 1, 1, "", "BrauerAlgebra"], [99, 1, 1, "", "BrauerDiagram"], [99, 1, 1, "", "BrauerDiagrams"], [99, 1, 1, "", "DiagramAlgebra"], [99, 1, 1, "", "DiagramBasis"], [99, 1, 1, "", "IdealDiagram"], [99, 1, 1, "", "IdealDiagrams"], [99, 1, 1, "", "OrbitBasis"], [99, 1, 1, "", "PartitionAlgebra"], [99, 1, 1, "", "PartitionDiagram"], [99, 1, 1, "", "PartitionDiagrams"], [99, 1, 1, "", "PlanarAlgebra"], [99, 1, 1, "", "PlanarDiagram"], [99, 1, 1, "", "PlanarDiagrams"], [99, 1, 1, "", "PropagatingIdeal"], [99, 1, 1, "", "SubPartitionAlgebra"], [99, 3, 1, "", "TL_diagram_ascii_art"], [99, 1, 1, "", "TemperleyLiebAlgebra"], [99, 1, 1, "", "TemperleyLiebDiagram"], [99, 1, 1, "", "TemperleyLiebDiagrams"], [99, 1, 1, "", "UnitDiagramMixin"], [99, 3, 1, "", "brauer_diagrams"], [99, 3, 1, "", "diagram_latex"], [99, 3, 1, "", "ideal_diagrams"], [99, 3, 1, "", "identity_set_partition"], [99, 3, 1, "", "is_planar"], [99, 3, 1, "", "pair_to_graph"], [99, 3, 1, "", "partition_diagrams"], [99, 3, 1, "", "planar_diagrams"], [99, 3, 1, "", "planar_partitions_rec"], [99, 3, 1, "", "propagating_number"], [99, 3, 1, "", "temperley_lieb_diagrams"], [99, 3, 1, "", "to_Brauer_partition"], [99, 3, 1, "", "to_graph"], [99, 3, 1, "", "to_set_partition"]], "sage.combinat.diagram_algebras.AbstractPartitionDiagram": [[99, 2, 1, "", "base_diagram"], [99, 2, 1, "", "check"], [99, 2, 1, "", "compose"], [99, 2, 1, "", "count_blocks_of_size"], [99, 2, 1, "", "diagram"], [99, 2, 1, "", "dual"], [99, 2, 1, "", "is_planar"], [99, 2, 1, "", "order"], [99, 2, 1, "", "propagating_number"], [99, 2, 1, "", "set_partition"]], "sage.combinat.diagram_algebras.AbstractPartitionDiagrams": [[99, 4, 1, "", "Element"]], "sage.combinat.diagram_algebras.BrauerAlgebra": [[99, 2, 1, "", "jucys_murphy"], [99, 4, 1, "", "options"]], "sage.combinat.diagram_algebras.BrauerDiagram": [[99, 2, 1, "", "bijection_on_free_nodes"], [99, 2, 1, "", "check"], [99, 2, 1, "", "involution_permutation_triple"], [99, 2, 1, "", "is_elementary_symmetric"], [99, 4, 1, "", "options"], [99, 2, 1, "", "perm"]], "sage.combinat.diagram_algebras.BrauerDiagrams": [[99, 4, 1, "", "Element"], [99, 2, 1, "", "cardinality"], [99, 2, 1, "", "from_involution_permutation_triple"], [99, 4, 1, "", "options"], [99, 2, 1, "", "symmetric_diagrams"]], "sage.combinat.diagram_algebras.DiagramAlgebra": [[99, 1, 1, "", "Element"], [99, 2, 1, "", "order"], [99, 2, 1, "", "set_partitions"]], "sage.combinat.diagram_algebras.DiagramAlgebra.Element": [[99, 2, 1, "", "diagram"], [99, 2, 1, "", "diagrams"]], "sage.combinat.diagram_algebras.DiagramBasis": [[99, 2, 1, "", "product_on_basis"]], "sage.combinat.diagram_algebras.IdealDiagram": [[99, 2, 1, "", "check"]], "sage.combinat.diagram_algebras.IdealDiagrams": [[99, 4, 1, "", "Element"]], "sage.combinat.diagram_algebras.OrbitBasis": [[99, 1, 1, "", "Element"], [99, 2, 1, "", "diagram_basis"], [99, 2, 1, "", "one"], [99, 2, 1, "", "product_on_basis"]], "sage.combinat.diagram_algebras.OrbitBasis.Element": [[99, 2, 1, "", "to_diagram_basis"]], "sage.combinat.diagram_algebras.PartitionAlgebra": [[99, 1, 1, "", "Element"], [99, 2, 1, "", "L"], [99, 2, 1, "", "a"], [99, 2, 1, "", "e"], [99, 2, 1, "", "generator_a"], [99, 2, 1, "", "generator_e"], [99, 2, 1, "", "generator_s"], [99, 2, 1, "", "jucys_murphy_element"], [99, 2, 1, "", "orbit_basis"], [99, 2, 1, "", "s"], [99, 2, 1, "", "sigma"]], "sage.combinat.diagram_algebras.PartitionAlgebra.Element": [[99, 2, 1, "", "dual"], [99, 2, 1, "", "to_orbit_basis"]], "sage.combinat.diagram_algebras.PartitionDiagrams": [[99, 4, 1, "", "Element"], [99, 2, 1, "", "cardinality"]], "sage.combinat.diagram_algebras.PlanarDiagram": [[99, 2, 1, "", "check"]], "sage.combinat.diagram_algebras.PlanarDiagrams": [[99, 4, 1, "", "Element"], [99, 2, 1, "", "cardinality"]], "sage.combinat.diagram_algebras.PropagatingIdeal": [[99, 1, 1, "", "Element"]], "sage.combinat.diagram_algebras.SubPartitionAlgebra": [[99, 1, 1, "", "Element"], [99, 2, 1, "", "ambient"], [99, 2, 1, "", "lift"], [99, 2, 1, "", "retract"]], "sage.combinat.diagram_algebras.SubPartitionAlgebra.Element": [[99, 2, 1, "", "to_orbit_basis"]], "sage.combinat.diagram_algebras.TemperleyLiebDiagram": [[99, 2, 1, "", "check"]], "sage.combinat.diagram_algebras.TemperleyLiebDiagrams": [[99, 4, 1, "", "Element"], [99, 2, 1, "", "cardinality"]], "sage.combinat.diagram_algebras.UnitDiagramMixin": [[99, 2, 1, "", "one_basis"]], "sage.combinat.dlx": [[100, 3, 1, "", "AllExactCovers"], [100, 1, 1, "", "DLXMatrix"], [100, 3, 1, "", "OneExactCover"]], "sage.combinat.dlx.DLXMatrix": [[100, 2, 1, "", "next"]], "sage.combinat.dyck_word": [[101, 1, 1, "", "CompleteDyckWords"], [101, 1, 1, "", "CompleteDyckWords_all"], [101, 1, 1, "", "CompleteDyckWords_size"], [101, 1, 1, "", "DyckWord"], [101, 1, 1, "", "DyckWordBacktracker"], [101, 1, 1, "", "DyckWord_complete"], [101, 1, 1, "", "DyckWords"], [101, 1, 1, "", "DyckWords_all"], [101, 1, 1, "", "DyckWords_size"], [101, 3, 1, "", "is_a"], [101, 3, 1, "", "is_area_sequence"], [101, 3, 1, "", "pealing"], [101, 3, 1, "", "replace_parens"], [101, 3, 1, "", "replace_symbols"]], "sage.combinat.dyck_word.CompleteDyckWords": [[101, 4, 1, "", "Element"], [101, 2, 1, "", "from_Catalan_code"], [101, 2, 1, "", "from_area_sequence"], [101, 2, 1, "", "from_non_decreasing_parking_function"], [101, 2, 1, "", "from_noncrossing_partition"]], "sage.combinat.dyck_word.CompleteDyckWords_all": [[101, 1, 1, "", "height_poset"]], "sage.combinat.dyck_word.CompleteDyckWords_all.height_poset": [[101, 2, 1, "", "le"]], "sage.combinat.dyck_word.CompleteDyckWords_size": [[101, 2, 1, "", "cardinality"], [101, 2, 1, "", "random_element"]], "sage.combinat.dyck_word.DyckWord": [[101, 2, 1, "", "ascent_prime_decomposition"], [101, 2, 1, "", "associated_parenthesis"], [101, 2, 1, "", "catalan_factorization"], [101, 2, 1, "", "height"], [101, 2, 1, "", "heights"], [101, 2, 1, "", "is_complete"], [101, 2, 1, "", "latex_options"], [101, 2, 1, "", "length"], [101, 2, 1, "", "number_of_close_symbols"], [101, 2, 1, "", "number_of_double_rises"], [101, 2, 1, "", "number_of_initial_rises"], [101, 2, 1, "", "number_of_open_symbols"], [101, 2, 1, "", "number_of_peaks"], [101, 2, 1, "", "number_of_touch_points"], [101, 2, 1, "", "number_of_valleys"], [101, 2, 1, "", "peaks"], [101, 2, 1, "", "plot"], [101, 2, 1, "", "position_of_first_return"], [101, 2, 1, "", "positions_of_double_rises"], [101, 2, 1, "", "pp"], [101, 2, 1, "", "pretty_print"], [101, 2, 1, "", "returns_to_zero"], [101, 2, 1, "", "rise_composition"], [101, 2, 1, "", "set_latex_options"], [101, 2, 1, "", "tamari_interval"], [101, 2, 1, "", "to_area_sequence"], [101, 2, 1, "", "to_binary_tree"], [101, 2, 1, "", "to_binary_tree_tamari"], [101, 2, 1, "", "to_path_string"], [101, 2, 1, "", "to_standard_tableau"], [101, 2, 1, "", "to_tamari_sorting_tuple"], [101, 2, 1, "", "touch_composition"], [101, 2, 1, "", "touch_points"], [101, 2, 1, "", "valleys"]], "sage.combinat.dyck_word.DyckWord_complete": [[101, 2, 1, "", "area"], [101, 2, 1, "", "area_dinv_to_bounce_area_map"], [101, 2, 1, "", "bounce"], [101, 2, 1, "", "bounce_area_to_area_dinv_map"], [101, 2, 1, "", "bounce_path"], [101, 2, 1, "", "characteristic_symmetric_function"], [101, 2, 1, "", "decomposition_reverse"], [101, 2, 1, "", "dinv"], [101, 2, 1, "", "first_return_decomposition"], [101, 2, 1, "", "list_parking_functions"], [101, 2, 1, "", "major_index"], [101, 2, 1, "", "number_of_parking_functions"], [101, 2, 1, "", "number_of_tunnels"], [101, 2, 1, "", "parking_functions"], [101, 2, 1, "", "pyramid_weight"], [101, 2, 1, "", "reading_permutation"], [101, 2, 1, "", "reverse"], [101, 2, 1, "", "semilength"], [101, 2, 1, "", "to_132_avoiding_permutation"], [101, 2, 1, "", "to_312_avoiding_permutation"], [101, 2, 1, "", "to_321_avoiding_permutation"], [101, 2, 1, "", "to_Catalan_code"], [101, 2, 1, "", "to_alternating_sign_matrix"], [101, 2, 1, "", "to_non_decreasing_parking_function"], [101, 2, 1, "", "to_noncrossing_partition"], [101, 2, 1, "", "to_noncrossing_permutation"], [101, 2, 1, "", "to_ordered_tree"], [101, 2, 1, "", "to_pair_of_standard_tableaux"], [101, 2, 1, "", "to_partition"], [101, 2, 1, "", "to_permutation"], [101, 2, 1, "", "to_triangulation"], [101, 2, 1, "", "to_triangulation_as_graph"], [101, 2, 1, "", "tunnels"]], "sage.combinat.dyck_word.DyckWords": [[101, 4, 1, "", "Element"], [101, 2, 1, "", "from_heights"], [101, 2, 1, "", "min_from_heights"], [101, 4, 1, "", "options"]], "sage.combinat.dyck_word.DyckWords_size": [[101, 2, 1, "", "cardinality"]], "sage.combinat.e_one_star": [[102, 1, 1, "", "E1Star"], [102, 1, 1, "", "Face"], [102, 1, 1, "", "Patch"]], "sage.combinat.e_one_star.E1Star": [[102, 2, 1, "", "inverse_matrix"], [102, 2, 1, "", "matrix"], [102, 2, 1, "", "sigma"]], "sage.combinat.e_one_star.Face": [[102, 2, 1, "", "color"], [102, 2, 1, "", "type"], [102, 2, 1, "", "vector"]], "sage.combinat.e_one_star.Patch": [[102, 2, 1, "", "difference"], [102, 2, 1, "", "dimension"], [102, 2, 1, "", "faces_of_color"], [102, 2, 1, "", "faces_of_type"], [102, 2, 1, "", "faces_of_vector"], [102, 2, 1, "", "occurrences_of"], [102, 2, 1, "", "plot"], [102, 2, 1, "", "plot3d"], [102, 2, 1, "", "plot_tikz"], [102, 2, 1, "", "repaint"], [102, 2, 1, "", "translate"], [102, 2, 1, "", "union"]], "sage.combinat.enumeration_mod_permgroup": [[104, 3, 1, "", "all_children"], [104, 3, 1, "", "canonical_children"], [104, 3, 1, "", "canonical_representative_of_orbit_of"], [104, 3, 1, "", "is_canonical"], [104, 3, 1, "", "lex_cmp"], [104, 3, 1, "", "lex_cmp_partial"], [104, 3, 1, "", "orbit"]], "sage.combinat.expnums": [[105, 3, 1, "", "expnums"], [105, 3, 1, "", "expnums2"]], "sage.combinat.fast_vector_partitions": [[107, 3, 1, "", "fast_vector_partitions"], [107, 3, 1, "", "recursive_vector_partitions"], [107, 3, 1, "", "recursive_within_from_to"], [107, 3, 1, "", "within_from_to"]], "sage.combinat.finite_state_machine": [[108, 1, 1, "", "Automaton"], [108, 3, 1, "", "FSMLetterSymbol"], [108, 1, 1, "", "FSMProcessIterator"], [108, 1, 1, "", "FSMState"], [108, 1, 1, "", "FSMTransition"], [108, 3, 1, "", "FSMWordSymbol"], [108, 1, 1, "", "FiniteStateMachine"], [108, 1, 1, "", "Transducer"], [108, 3, 1, "", "duplicate_transition_add_input"], [108, 3, 1, "", "duplicate_transition_ignore"], [108, 3, 1, "", "duplicate_transition_raise_error"], [108, 3, 1, "", "equal"], [108, 3, 1, "", "full_group_by"], [108, 3, 1, "", "is_Automaton"], [108, 3, 1, "", "is_FSMProcessIterator"], [108, 3, 1, "", "is_FSMState"], [108, 3, 1, "", "is_FSMTransition"], [108, 3, 1, "", "is_FiniteStateMachine"], [108, 3, 1, "", "is_Transducer"], [108, 3, 1, "", "setup_latex_preamble"], [108, 3, 1, "", "startswith"], [108, 3, 1, "", "tupleofwords_to_wordoftuples"], [108, 3, 1, "", "wordoftuples_to_tupleofwords"]], "sage.combinat.finite_state_machine.Automaton": [[108, 2, 1, "", "cartesian_product"], [108, 2, 1, "", "complement"], [108, 2, 1, "", "determinisation"], [108, 2, 1, "", "intersection"], [108, 2, 1, "", "is_equivalent"], [108, 2, 1, "", "language"], [108, 2, 1, "", "minimization"], [108, 2, 1, "", "process"], [108, 2, 1, "", "shannon_parry_markov_chain"], [108, 2, 1, "", "with_output"]], "sage.combinat.finite_state_machine.FSMProcessIterator": [[108, 1, 1, "", "Current"], [108, 1, 1, "", "FinishedBranch"], [108, 2, 1, "", "next"], [108, 2, 1, "", "preview_word"], [108, 2, 1, "", "result"]], "sage.combinat.finite_state_machine.FSMProcessIterator.FinishedBranch": [[108, 4, 1, "", "accept"], [108, 4, 1, "", "output"], [108, 4, 1, "", "state"]], "sage.combinat.finite_state_machine.FSMState": [[108, 2, 1, "", "copy"], [108, 2, 1, "", "deepcopy"], [108, 5, 1, "", "final_word_out"], [108, 2, 1, "", "fully_equal"], [108, 4, 1, "", "initial_probability"], [108, 5, 1, "", "is_final"], [108, 4, 1, "", "is_initial"], [108, 2, 1, "", "label"], [108, 2, 1, "", "relabeled"]], "sage.combinat.finite_state_machine.FSMTransition": [[108, 2, 1, "", "copy"], [108, 2, 1, "", "deepcopy"], [108, 4, 1, "", "from_state"], [108, 4, 1, "", "to_state"], [108, 4, 1, "", "word_in"], [108, 4, 1, "", "word_out"]], "sage.combinat.finite_state_machine.FiniteStateMachine": [[108, 2, 1, "", "__call__"], [108, 2, 1, "", "accessible_components"], [108, 2, 1, "", "add_from_transition_function"], [108, 2, 1, "", "add_state"], [108, 2, 1, "", "add_states"], [108, 2, 1, "", "add_transition"], [108, 2, 1, "", "add_transitions_from_function"], [108, 2, 1, "", "adjacency_matrix"], [108, 2, 1, "", "asymptotic_moments"], [108, 2, 1, "", "coaccessible_components"], [108, 2, 1, "", "completion"], [108, 2, 1, "", "composition"], [108, 2, 1, "", "concatenation"], [108, 2, 1, "", "construct_final_word_out"], [108, 2, 1, "", "copy"], [108, 2, 1, "", "deepcopy"], [108, 4, 1, "", "default_format_letter"], [108, 2, 1, "", "default_format_transition_label"], [108, 2, 1, "", "delete_state"], [108, 2, 1, "", "delete_transition"], [108, 2, 1, "", "determine_alphabets"], [108, 2, 1, "", "determine_input_alphabet"], [108, 2, 1, "", "determine_output_alphabet"], [108, 2, 1, "", "digraph"], [108, 2, 1, "", "disjoint_union"], [108, 2, 1, "", "empty_copy"], [108, 2, 1, "", "epsilon_successors"], [108, 2, 1, "", "equivalence_classes"], [108, 2, 1, "", "final_components"], [108, 2, 1, "", "final_states"], [108, 4, 1, "", "format_letter"], [108, 2, 1, "", "format_letter_negative"], [108, 2, 1, "", "format_transition_label"], [108, 2, 1, "", "format_transition_label_reversed"], [108, 2, 1, "", "graph"], [108, 2, 1, "", "has_final_state"], [108, 2, 1, "", "has_final_states"], [108, 2, 1, "", "has_initial_state"], [108, 2, 1, "", "has_initial_states"], [108, 2, 1, "", "has_state"], [108, 2, 1, "", "has_transition"], [108, 2, 1, "", "induced_sub_finite_state_machine"], [108, 2, 1, "", "initial_states"], [108, 4, 1, "", "input_alphabet"], [108, 2, 1, "", "input_projection"], [108, 2, 1, "", "intersection"], [108, 2, 1, "", "is_Markov_chain"], [108, 2, 1, "", "is_complete"], [108, 2, 1, "", "is_connected"], [108, 2, 1, "", "is_deterministic"], [108, 2, 1, "", "is_monochromatic"], [108, 2, 1, "", "iter_final_states"], [108, 2, 1, "", "iter_initial_states"], [108, 2, 1, "", "iter_process"], [108, 2, 1, "", "iter_states"], [108, 2, 1, "", "iter_transitions"], [108, 2, 1, "", "kleene_star"], [108, 2, 1, "", "language"], [108, 2, 1, "", "latex_options"], [108, 2, 1, "", "markov_chain_simplification"], [108, 2, 1, "", "merged_transitions"], [108, 2, 1, "", "moments_waiting_time"], [108, 2, 1, "", "number_of_words"], [108, 2, 1, "", "on_duplicate_transition"], [108, 4, 1, "", "output_alphabet"], [108, 2, 1, "", "output_projection"], [108, 2, 1, "", "plot"], [108, 2, 1, "", "predecessors"], [108, 2, 1, "", "prepone_output"], [108, 2, 1, "", "process"], [108, 2, 1, "", "product_FiniteStateMachine"], [108, 2, 1, "", "projection"], [108, 2, 1, "", "quotient"], [108, 2, 1, "", "relabeled"], [108, 2, 1, "", "remove_epsilon_transitions"], [108, 2, 1, "", "set_coordinates"], [108, 2, 1, "", "split_transitions"], [108, 2, 1, "", "state"], [108, 2, 1, "", "states"], [108, 2, 1, "", "transition"], [108, 2, 1, "", "transitions"], [108, 2, 1, "", "transposition"], [108, 2, 1, "", "with_final_word_out"]], "sage.combinat.finite_state_machine.Transducer": [[108, 2, 1, "", "cartesian_product"], [108, 2, 1, "", "intersection"], [108, 2, 1, "", "process"], [108, 2, 1, "", "simplification"]], "sage.combinat.finite_state_machine_generators": [[109, 1, 1, "", "AutomatonGenerators"], [109, 1, 1, "", "TransducerGenerators"]], "sage.combinat.finite_state_machine_generators.AutomatonGenerators": [[109, 2, 1, "", "AnyLetter"], [109, 2, 1, "", "AnyWord"], [109, 2, 1, "", "ContainsWord"], [109, 2, 1, "", "EmptyWord"], [109, 2, 1, "", "Word"]], "sage.combinat.finite_state_machine_generators.TransducerGenerators": [[109, 2, 1, "", "CountSubblockOccurrences"], [109, 2, 1, "", "GrayCode"], [109, 2, 1, "", "Identity"], [109, 2, 1, "", "Recursion"], [109, 1, 1, "", "RecursionRule"], [109, 2, 1, "", "Wait"], [109, 2, 1, "", "abs"], [109, 2, 1, "", "add"], [109, 2, 1, "", "all"], [109, 2, 1, "", "any"], [109, 2, 1, "", "map"], [109, 2, 1, "", "operator"], [109, 2, 1, "", "sub"], [109, 2, 1, "", "weight"]], "sage.combinat.finite_state_machine_generators.TransducerGenerators.RecursionRule": [[109, 4, 1, "", "K"], [109, 4, 1, "", "k"], [109, 4, 1, "", "r"], [109, 4, 1, "", "s"], [109, 4, 1, "", "t"]], "sage.combinat.fqsym": [[110, 1, 1, "", "FQSymBases"], [110, 1, 1, "", "FQSymBasis_abstract"], [110, 1, 1, "", "FreeQuasisymmetricFunctions"]], "sage.combinat.fqsym.FQSymBases": [[110, 1, 1, "", "ElementMethods"], [110, 1, 1, "", "ParentMethods"], [110, 2, 1, "", "super_categories"]], "sage.combinat.fqsym.FQSymBases.ElementMethods": [[110, 2, 1, "", "omega_involution"], [110, 2, 1, "", "psi_involution"], [110, 2, 1, "", "star_involution"], [110, 2, 1, "", "to_qsym"], [110, 2, 1, "", "to_symmetric_group_algebra"], [110, 2, 1, "", "to_wqsym"]], "sage.combinat.fqsym.FQSymBases.ParentMethods": [[110, 2, 1, "", "basis"], [110, 2, 1, "", "from_symmetric_group_algebra"], [110, 2, 1, "", "is_commutative"], [110, 2, 1, "", "is_field"], [110, 2, 1, "", "one_basis"], [110, 2, 1, "", "prec"], [110, 2, 1, "", "prec_by_coercion"], [110, 2, 1, "", "some_elements"], [110, 2, 1, "", "succ"], [110, 2, 1, "", "succ_by_coercion"]], "sage.combinat.fqsym.FQSymBasis_abstract": [[110, 2, 1, "", "an_element"]], "sage.combinat.fqsym.FreeQuasisymmetricFunctions": [[110, 1, 1, "", "F"], [110, 1, 1, "", "G"], [110, 1, 1, "", "M"], [110, 2, 1, "", "a_realization"]], "sage.combinat.fqsym.FreeQuasisymmetricFunctions.F": [[110, 1, 1, "", "Element"], [110, 2, 1, "", "coproduct_on_basis"], [110, 2, 1, "", "degree_on_basis"], [110, 2, 1, "", "prec_product_on_basis"], [110, 2, 1, "", "product_on_basis"], [110, 2, 1, "", "succ_product_on_basis"]], "sage.combinat.fqsym.FreeQuasisymmetricFunctions.F.Element": [[110, 2, 1, "", "to_symmetric_group_algebra"]], "sage.combinat.fqsym.FreeQuasisymmetricFunctions.G": [[110, 2, 1, "", "degree_on_basis"]], "sage.combinat.fqsym.FreeQuasisymmetricFunctions.M": [[110, 1, 1, "", "Element"], [110, 2, 1, "", "coproduct_on_basis"], [110, 2, 1, "", "degree_on_basis"]], "sage.combinat.fqsym.FreeQuasisymmetricFunctions.M.Element": [[110, 2, 1, "", "star_involution"]], "sage.combinat.free_dendriform_algebra": [[111, 1, 1, "", "DendriformFunctor"], [111, 1, 1, "", "FreeDendriformAlgebra"]], "sage.combinat.free_dendriform_algebra.DendriformFunctor": [[111, 2, 1, "", "merge"], [111, 4, 1, "", "rank"]], "sage.combinat.free_dendriform_algebra.FreeDendriformAlgebra": [[111, 2, 1, "", "algebra_generators"], [111, 2, 1, "", "an_element"], [111, 2, 1, "", "change_ring"], [111, 2, 1, "", "construction"], [111, 2, 1, "", "coproduct_on_basis"], [111, 2, 1, "", "degree_on_basis"], [111, 2, 1, "", "gen"], [111, 2, 1, "", "gens"], [111, 2, 1, "", "one_basis"], [111, 2, 1, "", "over"], [111, 2, 1, "", "prec"], [111, 2, 1, "", "prec_product_on_basis"], [111, 2, 1, "", "product_on_basis"], [111, 2, 1, "", "some_elements"], [111, 2, 1, "", "succ"], [111, 2, 1, "", "succ_product_on_basis"], [111, 2, 1, "", "under"], [111, 2, 1, "", "variable_names"]], "sage.combinat.free_module": [[112, 1, 1, "", "CartesianProductWithFlattening"], [112, 1, 1, "", "CombinatorialFreeModule"], [112, 1, 1, "", "CombinatorialFreeModule_CartesianProduct"], [112, 1, 1, "", "CombinatorialFreeModule_Tensor"]], "sage.combinat.free_module.CombinatorialFreeModule": [[112, 4, 1, "", "CartesianProduct"], [112, 4, 1, "", "Element"], [112, 4, 1, "", "Tensor"], [112, 2, 1, "", "change_ring"], [112, 2, 1, "", "construction"], [112, 2, 1, "", "dimension"], [112, 2, 1, "", "element_class"], [112, 2, 1, "", "from_vector"], [112, 2, 1, "", "get_order"], [112, 2, 1, "", "get_order_key"], [112, 2, 1, "", "is_exact"], [112, 2, 1, "", "linear_combination"], [112, 2, 1, "", "monomial"], [112, 2, 1, "", "rank"], [112, 2, 1, "", "set_order"], [112, 2, 1, "", "sum"], [112, 2, 1, "", "sum_of_terms"], [112, 2, 1, "", "term"], [112, 2, 1, "", "zero"]], "sage.combinat.free_module.CombinatorialFreeModule_CartesianProduct": [[112, 1, 1, "", "Element"], [112, 2, 1, "", "cartesian_embedding"], [112, 2, 1, "", "cartesian_factors"], [112, 2, 1, "", "cartesian_projection"], [112, 2, 1, "", "summand_embedding"], [112, 2, 1, "", "summand_projection"]], "sage.combinat.free_module.CombinatorialFreeModule_Tensor": [[112, 2, 1, "", "tensor_constructor"], [112, 2, 1, "", "tensor_factors"]], "sage.combinat.free_prelie_algebra": [[113, 1, 1, "", "FreePreLieAlgebra"], [113, 1, 1, "", "PreLieFunctor"]], "sage.combinat.free_prelie_algebra.FreePreLieAlgebra": [[113, 1, 1, "", "Element"], [113, 2, 1, "", "algebra_generators"], [113, 2, 1, "", "an_element"], [113, 2, 1, "", "bracket_on_basis"], [113, 2, 1, "", "change_ring"], [113, 2, 1, "", "construction"], [113, 2, 1, "", "degree_on_basis"], [113, 2, 1, "", "gen"], [113, 2, 1, "", "gens"], [113, 2, 1, "", "nap_product"], [113, 2, 1, "", "nap_product_on_basis"], [113, 2, 1, "", "pre_Lie_product"], [113, 2, 1, "", "pre_Lie_product_on_basis"], [113, 2, 1, "", "product_on_basis"], [113, 2, 1, "", "some_elements"], [113, 2, 1, "", "variable_names"]], "sage.combinat.free_prelie_algebra.FreePreLieAlgebra.Element": [[113, 2, 1, "", "lift"]], "sage.combinat.free_prelie_algebra.PreLieFunctor": [[113, 2, 1, "", "merge"], [113, 4, 1, "", "rank"]], "sage.combinat.fully_commutative_elements": [[114, 1, 1, "", "FullyCommutativeElement"], [114, 1, 1, "", "FullyCommutativeElements"]], "sage.combinat.fully_commutative_elements.FullyCommutativeElement": [[114, 2, 1, "", "check"], [114, 2, 1, "", "coset_decomposition"], [114, 2, 1, "", "descents"], [114, 2, 1, "", "find_descent"], [114, 2, 1, "", "group_element"], [114, 2, 1, "", "has_descent"], [114, 2, 1, "", "heap"], [114, 2, 1, "", "is_fully_commutative"], [114, 2, 1, "", "n_value"], [114, 2, 1, "", "normalize"], [114, 2, 1, "", "plot_heap"], [114, 2, 1, "", "star_operation"]], "sage.combinat.fully_commutative_elements.FullyCommutativeElements": [[114, 4, 1, "", "Element"], [114, 2, 1, "", "coxeter_group"], [114, 2, 1, "", "iterate_to_length"]], "sage.combinat.fully_packed_loop": [[115, 1, 1, "", "FullyPackedLoop"], [115, 1, 1, "", "FullyPackedLoops"]], "sage.combinat.fully_packed_loop.FullyPackedLoop": [[115, 2, 1, "", "gyration"], [115, 2, 1, "", "link_pattern"], [115, 2, 1, "", "plot"], [115, 2, 1, "", "six_vertex_model"], [115, 2, 1, "", "to_alternating_sign_matrix"]], "sage.combinat.fully_packed_loop.FullyPackedLoops": [[115, 4, 1, "", "Element"], [115, 2, 1, "", "cardinality"], [115, 2, 1, "", "size"]], "sage.combinat.gelfand_tsetlin_patterns": [[116, 1, 1, "", "GelfandTsetlinPattern"], [116, 1, 1, "", "GelfandTsetlinPatterns"], [116, 1, 1, "", "GelfandTsetlinPatternsTopRow"]], "sage.combinat.gelfand_tsetlin_patterns.GelfandTsetlinPattern": [[116, 2, 1, "", "Tokuyama_coefficient"], [116, 2, 1, "", "bender_knuth_involution"], [116, 2, 1, "", "boxed_entries"], [116, 2, 1, "", "check"], [116, 2, 1, "", "circled_entries"], [116, 2, 1, "", "is_strict"], [116, 2, 1, "", "number_of_boxes"], [116, 2, 1, "", "number_of_circles"], [116, 2, 1, "", "number_of_special_entries"], [116, 2, 1, "", "pp"], [116, 2, 1, "", "row_sums"], [116, 2, 1, "", "special_entries"], [116, 2, 1, "", "to_tableau"], [116, 2, 1, "", "weight"]], "sage.combinat.gelfand_tsetlin_patterns.GelfandTsetlinPatterns": [[116, 4, 1, "", "Element"], [116, 2, 1, "", "random_element"]], "sage.combinat.gelfand_tsetlin_patterns.GelfandTsetlinPatternsTopRow": [[116, 2, 1, "", "Tokuyama_formula"], [116, 2, 1, "", "random_element"], [116, 2, 1, "", "top_row"]], "sage.combinat.graph_path": [[117, 3, 1, "", "GraphPaths"], [117, 1, 1, "", "GraphPaths_all"], [117, 1, 1, "", "GraphPaths_common"], [117, 1, 1, "", "GraphPaths_s"], [117, 1, 1, "", "GraphPaths_st"], [117, 1, 1, "", "GraphPaths_t"]], "sage.combinat.graph_path.GraphPaths_all": [[117, 2, 1, "", "list"]], "sage.combinat.graph_path.GraphPaths_common": [[117, 2, 1, "", "incoming_edges"], [117, 2, 1, "", "incoming_paths"], [117, 2, 1, "", "outgoing_edges"], [117, 2, 1, "", "outgoing_paths"], [117, 2, 1, "", "paths"], [117, 2, 1, "", "paths_from_source_to_target"]], "sage.combinat.graph_path.GraphPaths_s": [[117, 2, 1, "", "list"]], "sage.combinat.graph_path.GraphPaths_st": [[117, 2, 1, "", "list"]], "sage.combinat.graph_path.GraphPaths_t": [[117, 2, 1, "", "list"]], "sage.combinat.gray_codes": [[118, 3, 1, "", "combinations"], [118, 3, 1, "", "product"]], "sage.combinat.grossman_larson_algebras": [[119, 1, 1, "", "GrossmanLarsonAlgebra"]], "sage.combinat.grossman_larson_algebras.GrossmanLarsonAlgebra": [[119, 2, 1, "", "an_element"], [119, 2, 1, "", "antipode_on_basis"], [119, 2, 1, "", "change_ring"], [119, 2, 1, "", "coproduct_on_basis"], [119, 2, 1, "", "counit_on_basis"], [119, 2, 1, "", "degree_on_basis"], [119, 2, 1, "", "one_basis"], [119, 2, 1, "", "product_on_basis"], [119, 2, 1, "", "single_vertex"], [119, 2, 1, "", "single_vertex_all"], [119, 2, 1, "", "some_elements"], [119, 2, 1, "", "variable_names"]], "sage.combinat.growth": [[120, 1, 1, "", "GrowthDiagram"], [120, 1, 1, "", "Rule"], [120, 1, 1, "", "RuleBinaryWord"], [120, 1, 1, "", "RuleBurge"], [120, 1, 1, "", "RuleDomino"], [120, 1, 1, "", "RuleLLMS"], [120, 1, 1, "", "RulePartitions"], [120, 1, 1, "", "RuleRSK"], [120, 1, 1, "", "RuleShiftedShapes"], [120, 1, 1, "", "RuleSylvester"], [120, 1, 1, "", "RuleYoungFibonacci"], [120, 1, 1, "", "Rules"]], "sage.combinat.growth.GrowthDiagram": [[120, 2, 1, "", "P_chain"], [120, 2, 1, "", "P_symbol"], [120, 2, 1, "", "Q_chain"], [120, 2, 1, "", "Q_symbol"], [120, 2, 1, "", "conjugate"], [120, 2, 1, "", "filling"], [120, 2, 1, "", "half_perimeter"], [120, 2, 1, "", "in_labels"], [120, 2, 1, "", "is_rectangular"], [120, 2, 1, "", "out_labels"], [120, 2, 1, "", "rotate"], [120, 4, 1, "", "rules"], [120, 2, 1, "", "shape"], [120, 2, 1, "", "to_biword"], [120, 2, 1, "", "to_word"]], "sage.combinat.growth.Rule": [[120, 2, 1, "", "P_graph"], [120, 2, 1, "", "Q_graph"], [120, 4, 1, "", "has_multiple_edges"], [120, 2, 1, "", "normalize_vertex"], [120, 4, 1, "", "r"], [120, 4, 1, "", "zero_edge"]], "sage.combinat.growth.RuleBinaryWord": [[120, 2, 1, "", "backward_rule"], [120, 2, 1, "", "forward_rule"], [120, 2, 1, "", "is_P_edge"], [120, 2, 1, "", "is_Q_edge"], [120, 2, 1, "", "normalize_vertex"], [120, 2, 1, "", "rank"], [120, 2, 1, "", "vertices"], [120, 4, 1, "", "zero"]], "sage.combinat.growth.RuleBurge": [[120, 2, 1, "", "backward_rule"], [120, 2, 1, "", "forward_rule"]], "sage.combinat.growth.RuleDomino": [[120, 2, 1, "", "P_symbol"], [120, 2, 1, "", "Q_symbol"], [120, 2, 1, "", "forward_rule"], [120, 2, 1, "", "is_P_edge"], [120, 2, 1, "", "is_Q_edge"], [120, 2, 1, "", "normalize_vertex"], [120, 4, 1, "", "r"], [120, 2, 1, "", "rank"], [120, 2, 1, "", "vertices"], [120, 4, 1, "", "zero"]], "sage.combinat.growth.RuleLLMS": [[120, 2, 1, "", "P_symbol"], [120, 2, 1, "", "Q_symbol"], [120, 2, 1, "", "forward_rule"], [120, 4, 1, "", "has_multiple_edges"], [120, 2, 1, "", "is_P_edge"], [120, 2, 1, "", "is_Q_edge"], [120, 2, 1, "", "normalize_vertex"], [120, 2, 1, "", "rank"], [120, 2, 1, "", "vertices"], [120, 4, 1, "", "zero_edge"]], "sage.combinat.growth.RulePartitions": [[120, 2, 1, "", "P_symbol"], [120, 2, 1, "", "Q_symbol"], [120, 2, 1, "", "normalize_vertex"], [120, 2, 1, "", "rank"], [120, 2, 1, "", "vertices"], [120, 4, 1, "", "zero"]], "sage.combinat.growth.RuleRSK": [[120, 2, 1, "", "backward_rule"], [120, 2, 1, "", "forward_rule"]], "sage.combinat.growth.RuleShiftedShapes": [[120, 2, 1, "", "P_symbol"], [120, 2, 1, "", "Q_symbol"], [120, 2, 1, "", "backward_rule"], [120, 2, 1, "", "forward_rule"], [120, 4, 1, "", "has_multiple_edges"], [120, 2, 1, "", "is_P_edge"], [120, 2, 1, "", "is_Q_edge"], [120, 2, 1, "", "normalize_vertex"], [120, 2, 1, "", "rank"], [120, 2, 1, "", "vertices"], [120, 4, 1, "", "zero"]], "sage.combinat.growth.RuleSylvester": [[120, 2, 1, "", "P_symbol"], [120, 2, 1, "", "Q_symbol"], [120, 2, 1, "", "backward_rule"], [120, 2, 1, "", "forward_rule"], [120, 2, 1, "", "is_P_edge"], [120, 2, 1, "", "is_Q_edge"], [120, 2, 1, "", "normalize_vertex"], [120, 2, 1, "", "rank"], [120, 2, 1, "", "vertices"], [120, 4, 1, "", "zero"]], "sage.combinat.growth.RuleYoungFibonacci": [[120, 2, 1, "", "backward_rule"], [120, 2, 1, "", "forward_rule"], [120, 2, 1, "", "is_P_edge"], [120, 2, 1, "", "is_Q_edge"], [120, 2, 1, "", "normalize_vertex"], [120, 2, 1, "", "rank"], [120, 2, 1, "", "vertices"], [120, 4, 1, "", "zero"]], "sage.combinat.growth.Rules": [[120, 4, 1, "", "BinaryWord"], [120, 4, 1, "", "Burge"], [120, 4, 1, "", "Domino"], [120, 4, 1, "", "LLMS"], [120, 4, 1, "", "RSK"], [120, 4, 1, "", "ShiftedShapes"], [120, 4, 1, "", "Sylvester"], [120, 4, 1, "", "YoungFibonacci"]], "sage.combinat.hall_polynomial": [[121, 3, 1, "", "hall_polynomial"]], "sage.combinat.hillman_grassl": [[122, 1, 1, "", "WeakReversePlanePartition"], [122, 1, 1, "", "WeakReversePlanePartitions"], [122, 3, 1, "", "hillman_grassl"], [122, 3, 1, "", "hillman_grassl_inverse"], [122, 3, 1, "", "pak_correspondence"], [122, 3, 1, "", "sulzgruber_correspondence"], [122, 3, 1, "", "transpose"]], "sage.combinat.hillman_grassl.WeakReversePlanePartition": [[122, 2, 1, "", "conjugate"], [122, 2, 1, "", "hillman_grassl_inverse"], [122, 2, 1, "", "pak_correspondence"]], "sage.combinat.hillman_grassl.WeakReversePlanePartitions": [[122, 4, 1, "", "Element"], [122, 2, 1, "", "an_element"]], "sage.combinat.integer_lists": [[123, 0, 0, "-", "base"], [124, 0, 0, "-", "invlex"], [125, 0, 0, "-", "lists"]], "sage.combinat.integer_lists.base": [[123, 1, 1, "", "Envelope"], [123, 1, 1, "", "IntegerListsBackend"]], "sage.combinat.integer_lists.base.Envelope": [[123, 2, 1, "", "adapt"], [123, 2, 1, "", "limit"], [123, 2, 1, "", "limit_start"], [123, 4, 1, "", "max_part"], [123, 4, 1, "", "max_slope"], [123, 4, 1, "", "min_slope"], [123, 4, 1, "", "sign"]], "sage.combinat.integer_lists.base.IntegerListsBackend": [[123, 4, 1, "", "ceiling"], [123, 4, 1, "", "floor"], [123, 4, 1, "", "max_length"], [123, 4, 1, "", "max_part"], [123, 4, 1, "", "max_slope"], [123, 4, 1, "", "max_sum"], [123, 4, 1, "", "min_length"], [123, 4, 1, "", "min_part"], [123, 4, 1, "", "min_slope"], [123, 4, 1, "", "min_sum"]], "sage.combinat.integer_lists.invlex": [[124, 1, 1, "", "IntegerListsBackend_invlex"], [124, 1, 1, "", "IntegerListsLex"], [124, 1, 1, "", "IntegerListsLexIter"]], "sage.combinat.integer_lists.invlex.IntegerListsBackend_invlex": [[124, 4, 1, "", "check"]], "sage.combinat.integer_lists.invlex.IntegerListsLex": [[124, 4, 1, "", "backend_class"]], "sage.combinat.integer_lists.lists": [[125, 1, 1, "", "IntegerList"], [125, 1, 1, "", "IntegerLists"]], "sage.combinat.integer_lists.lists.IntegerList": [[125, 2, 1, "", "check"]], "sage.combinat.integer_lists.lists.IntegerLists": [[125, 4, 1, "", "Element"], [125, 4, 1, "", "backend"], [125, 4, 1, "", "backend_class"]], "sage.combinat.integer_matrices": [[126, 1, 1, "", "IntegerMatrices"], [126, 3, 1, "", "integer_matrices_generator"]], "sage.combinat.integer_matrices.IntegerMatrices": [[126, 2, 1, "", "cardinality"], [126, 2, 1, "", "column_sums"], [126, 2, 1, "", "row_sums"], [126, 2, 1, "", "to_composition"]], "sage.combinat.integer_vector": [[127, 1, 1, "", "IntegerVector"], [127, 1, 1, "", "IntegerVectors"], [127, 1, 1, "", "IntegerVectorsConstraints"], [127, 1, 1, "", "IntegerVectors_all"], [127, 1, 1, "", "IntegerVectors_k"], [127, 1, 1, "", "IntegerVectors_n"], [127, 1, 1, "", "IntegerVectors_nk"], [127, 1, 1, "", "IntegerVectors_nnondescents"], [127, 3, 1, "", "gale_ryser_theorem"], [127, 3, 1, "", "integer_vectors_nk_fast_iter"], [127, 3, 1, "", "is_gale_ryser"], [127, 3, 1, "", "list2func"]], "sage.combinat.integer_vector.IntegerVector": [[127, 2, 1, "", "check"], [127, 2, 1, "", "specht_module"], [127, 2, 1, "", "specht_module_dimension"], [127, 2, 1, "", "trim"]], "sage.combinat.integer_vector.IntegerVectors": [[127, 4, 1, "", "Element"]], "sage.combinat.integer_vector.IntegerVectorsConstraints": [[127, 2, 1, "", "cardinality"]], "sage.combinat.integer_vector.IntegerVectors_nk": [[127, 2, 1, "", "rank"]], "sage.combinat.integer_vector_weighted": [[128, 1, 1, "", "WeightedIntegerVectors"], [128, 1, 1, "", "WeightedIntegerVectors_all"], [128, 3, 1, "", "iterator_fast"]], "sage.combinat.integer_vector_weighted.WeightedIntegerVectors": [[128, 4, 1, "", "Element"]], "sage.combinat.integer_vector_weighted.WeightedIntegerVectors_all": [[128, 2, 1, "", "grading"], [128, 2, 1, "", "subset"]], "sage.combinat.integer_vectors_mod_permgroup": [[129, 1, 1, "", "IntegerVectorsModPermutationGroup"], [129, 1, 1, "", "IntegerVectorsModPermutationGroup_All"], [129, 1, 1, "", "IntegerVectorsModPermutationGroup_with_constraints"]], "sage.combinat.integer_vectors_mod_permgroup.IntegerVectorsModPermutationGroup_All": [[129, 1, 1, "", "Element"], [129, 2, 1, "", "ambient"], [129, 2, 1, "", "children"], [129, 2, 1, "", "is_canonical"], [129, 2, 1, "", "lift"], [129, 2, 1, "", "orbit"], [129, 2, 1, "", "permutation_group"], [129, 2, 1, "", "retract"], [129, 2, 1, "", "roots"], [129, 2, 1, "", "subset"]], "sage.combinat.integer_vectors_mod_permgroup.IntegerVectorsModPermutationGroup_All.Element": [[129, 2, 1, "", "check"]], "sage.combinat.integer_vectors_mod_permgroup.IntegerVectorsModPermutationGroup_with_constraints": [[129, 1, 1, "", "Element"], [129, 2, 1, "", "ambient"], [129, 2, 1, "", "an_element"], [129, 2, 1, "", "children"], [129, 2, 1, "", "is_canonical"], [129, 2, 1, "", "lift"], [129, 2, 1, "", "orbit"], [129, 2, 1, "", "permutation_group"], [129, 2, 1, "", "retract"], [129, 2, 1, "", "roots"]], "sage.combinat.integer_vectors_mod_permgroup.IntegerVectorsModPermutationGroup_with_constraints.Element": [[129, 2, 1, "", "check"]], "sage.combinat.interval_posets": [[130, 4, 1, "", "TIP"], [130, 1, 1, "", "TamariIntervalPoset"], [130, 1, 1, "", "TamariIntervalPosets"], [130, 1, 1, "", "TamariIntervalPosets_all"], [130, 1, 1, "", "TamariIntervalPosets_size"]], "sage.combinat.interval_posets.TamariIntervalPoset": [[130, 2, 1, "", "binary_trees"], [130, 2, 1, "", "complement"], [130, 2, 1, "", "contains_binary_tree"], [130, 2, 1, "", "contains_dyck_word"], [130, 2, 1, "", "contains_interval"], [130, 2, 1, "", "cubical_coordinates"], [130, 2, 1, "", "decomposition_to_triple"], [130, 2, 1, "", "decreasing_children"], [130, 2, 1, "", "decreasing_cover_relations"], [130, 2, 1, "", "decreasing_parent"], [130, 2, 1, "", "decreasing_roots"], [130, 2, 1, "", "dyck_words"], [130, 2, 1, "", "factor"], [130, 2, 1, "", "final_forest"], [130, 2, 1, "", "ge"], [130, 2, 1, "", "grafting_tree"], [130, 2, 1, "", "gt"], [130, 2, 1, "", "increasing_children"], [130, 2, 1, "", "increasing_cover_relations"], [130, 2, 1, "", "increasing_parent"], [130, 2, 1, "", "increasing_roots"], [130, 2, 1, "", "initial_forest"], [130, 2, 1, "", "insertion"], [130, 2, 1, "", "intersection"], [130, 2, 1, "", "interval_cardinality"], [130, 2, 1, "", "is_connected"], [130, 2, 1, "", "is_dexter"], [130, 2, 1, "", "is_exceptional"], [130, 2, 1, "", "is_final_interval"], [130, 2, 1, "", "is_indecomposable"], [130, 2, 1, "", "is_infinitely_modern"], [130, 2, 1, "", "is_initial_interval"], [130, 2, 1, "", "is_linear_extension"], [130, 2, 1, "", "is_modern"], [130, 2, 1, "", "is_new"], [130, 2, 1, "", "is_simple"], [130, 2, 1, "", "is_synchronized"], [130, 2, 1, "", "latex_options"], [130, 2, 1, "", "le"], [130, 2, 1, "", "left_branch_involution"], [130, 2, 1, "", "linear_extensions"], [130, 2, 1, "", "lower_binary_tree"], [130, 2, 1, "", "lower_contained_intervals"], [130, 2, 1, "", "lower_contains_interval"], [130, 2, 1, "", "lower_dyck_word"], [130, 2, 1, "", "lt"], [130, 2, 1, "", "max_linear_extension"], [130, 2, 1, "", "maximal_chain_binary_trees"], [130, 2, 1, "", "maximal_chain_dyck_words"], [130, 2, 1, "", "maximal_chain_tamari_intervals"], [130, 2, 1, "", "min_linear_extension"], [130, 2, 1, "", "new_decomposition"], [130, 2, 1, "", "number_of_new_components"], [130, 2, 1, "", "number_of_tamari_inversions"], [130, 2, 1, "", "plot"], [130, 2, 1, "", "poset"], [130, 2, 1, "", "rise_contact_involution"], [130, 2, 1, "", "set_latex_options"], [130, 2, 1, "", "size"], [130, 2, 1, "", "sub_poset"], [130, 2, 1, "", "subposet"], [130, 2, 1, "", "tamari_inversions"], [130, 2, 1, "", "tamari_inversions_iter"], [130, 2, 1, "", "upper_binary_tree"], [130, 2, 1, "", "upper_contains_interval"], [130, 2, 1, "", "upper_dyck_word"]], "sage.combinat.interval_posets.TamariIntervalPosets": [[130, 2, 1, "", "check_poset"], [130, 2, 1, "", "final_forest"], [130, 2, 1, "", "from_binary_trees"], [130, 2, 1, "", "from_dyck_words"], [130, 2, 1, "", "from_grafting_tree"], [130, 2, 1, "", "from_minimal_schnyder_wood"], [130, 2, 1, "", "initial_forest"], [130, 2, 1, "", "le"], [130, 4, 1, "", "options"], [130, 2, 1, "", "recomposition_from_triple"]], "sage.combinat.interval_posets.TamariIntervalPosets_all": [[130, 4, 1, "", "Element"], [130, 2, 1, "", "one"]], "sage.combinat.interval_posets.TamariIntervalPosets_size": [[130, 2, 1, "", "cardinality"], [130, 2, 1, "", "element_class"], [130, 2, 1, "", "random_element"]], "sage.combinat.k_tableau": [[131, 1, 1, "", "StrongTableau"], [131, 1, 1, "", "StrongTableaux"], [131, 3, 1, "", "WeakTableau"], [131, 1, 1, "", "WeakTableau_abstract"], [131, 1, 1, "", "WeakTableau_bounded"], [131, 1, 1, "", "WeakTableau_core"], [131, 1, 1, "", "WeakTableau_factorized_permutation"], [131, 3, 1, "", "WeakTableaux"], [131, 1, 1, "", "WeakTableaux_abstract"], [131, 1, 1, "", "WeakTableaux_bounded"], [131, 1, 1, "", "WeakTableaux_core"], [131, 1, 1, "", "WeakTableaux_factorized_permutation"], [131, 3, 1, "", "intermediate_shapes"], [131, 3, 1, "", "nabs"]], "sage.combinat.k_tableau.StrongTableau": [[131, 2, 1, "", "cell_of_highest_head"], [131, 2, 1, "", "cell_of_marked_head"], [131, 2, 1, "", "cells_head_dictionary"], [131, 2, 1, "", "cells_of_heads"], [131, 2, 1, "", "cells_of_marked_ribbon"], [131, 2, 1, "", "check"], [131, 2, 1, "", "content_of_highest_head"], [131, 2, 1, "", "content_of_marked_head"], [131, 2, 1, "", "contents_of_heads"], [131, 2, 1, "", "entries_by_content"], [131, 2, 1, "", "entries_by_content_standard"], [131, 2, 1, "", "follows_tableau"], [131, 2, 1, "", "height_of_ribbon"], [131, 2, 1, "", "inner_shape"], [131, 2, 1, "", "intermediate_shapes"], [131, 2, 1, "", "is_column_strict_with_weight"], [131, 2, 1, "", "left_action"], [131, 2, 1, "", "number_of_connected_components"], [131, 2, 1, "", "outer_shape"], [131, 2, 1, "", "pp"], [131, 2, 1, "", "restrict"], [131, 2, 1, "", "ribbons_above_marked"], [131, 2, 1, "", "set_weight"], [131, 2, 1, "", "shape"], [131, 2, 1, "", "size"], [131, 2, 1, "", "spin"], [131, 2, 1, "", "spin_of_ribbon"], [131, 2, 1, "", "to_list"], [131, 2, 1, "", "to_standard_list"], [131, 2, 1, "", "to_standard_tableau"], [131, 2, 1, "", "to_transposition_sequence"], [131, 2, 1, "", "to_unmarked_list"], [131, 2, 1, "", "to_unmarked_standard_list"], [131, 2, 1, "", "weight"]], "sage.combinat.k_tableau.StrongTableaux": [[131, 4, 1, "", "Element"], [131, 2, 1, "", "add_marking"], [131, 2, 1, "", "an_element"], [131, 2, 1, "", "cells_head_dictionary"], [131, 2, 1, "", "follows_tableau_unsigned_standard"], [131, 2, 1, "", "inner_shape"], [131, 2, 1, "", "marked_CST_to_transposition_sequence"], [131, 2, 1, "", "marked_given_unmarked_and_weight_iterator"], [131, 4, 1, "", "options"], [131, 2, 1, "", "outer_shape"], [131, 2, 1, "", "shape"], [131, 2, 1, "", "standard_marked_iterator"], [131, 2, 1, "", "standard_unmarked_iterator"], [131, 2, 1, "", "transpositions_to_standard_strong"]], "sage.combinat.k_tableau.WeakTableau_abstract": [[131, 2, 1, "", "intermediate_shapes"], [131, 2, 1, "", "pp"], [131, 2, 1, "", "representation"], [131, 2, 1, "", "shape"], [131, 2, 1, "", "size"], [131, 2, 1, "", "weight"]], "sage.combinat.k_tableau.WeakTableau_bounded": [[131, 2, 1, "", "check"], [131, 2, 1, "", "from_core_tableau"], [131, 2, 1, "", "k_charge"], [131, 2, 1, "", "shape_bounded"], [131, 2, 1, "", "shape_core"], [131, 2, 1, "", "to_core_tableau"]], "sage.combinat.k_tableau.WeakTableau_core": [[131, 2, 1, "", "check"], [131, 2, 1, "", "dictionary_of_coordinates_at_residues"], [131, 2, 1, "", "k_charge"], [131, 2, 1, "", "k_charge_I"], [131, 2, 1, "", "k_charge_J"], [131, 2, 1, "", "list_of_standard_cells"], [131, 2, 1, "", "residues_of_entries"], [131, 2, 1, "", "shape_bounded"], [131, 2, 1, "", "shape_core"], [131, 2, 1, "", "to_bounded_tableau"], [131, 2, 1, "", "to_factorized_permutation_tableau"]], "sage.combinat.k_tableau.WeakTableau_factorized_permutation": [[131, 2, 1, "", "check"], [131, 2, 1, "", "from_core_tableau"], [131, 2, 1, "", "k_charge"], [131, 2, 1, "", "shape_bounded"], [131, 2, 1, "", "shape_core"], [131, 2, 1, "", "straighten_input"], [131, 2, 1, "", "to_core_tableau"]], "sage.combinat.k_tableau.WeakTableaux_abstract": [[131, 2, 1, "", "representation"], [131, 2, 1, "", "shape"], [131, 2, 1, "", "size"]], "sage.combinat.k_tableau.WeakTableaux_bounded": [[131, 4, 1, "", "Element"]], "sage.combinat.k_tableau.WeakTableaux_core": [[131, 4, 1, "", "Element"], [131, 2, 1, "", "circular_distance"], [131, 2, 1, "", "diag"]], "sage.combinat.k_tableau.WeakTableaux_factorized_permutation": [[131, 4, 1, "", "Element"]], "sage.combinat.kazhdan_lusztig": [[132, 1, 1, "", "KazhdanLusztigPolynomial"]], "sage.combinat.kazhdan_lusztig.KazhdanLusztigPolynomial": [[132, 2, 1, "", "P"], [132, 2, 1, "", "R"], [132, 2, 1, "", "R_tilde"]], "sage.combinat.key_polynomial": [[133, 1, 1, "", "KeyPolynomial"], [133, 1, 1, "", "KeyPolynomialBasis"], [133, 3, 1, "", "divided_difference"], [133, 3, 1, "", "isobaric_divided_difference"], [133, 3, 1, "", "sorting_word"]], "sage.combinat.key_polynomial.KeyPolynomial": [[133, 2, 1, "", "divided_difference"], [133, 2, 1, "", "expand"], [133, 2, 1, "", "isobaric_divided_difference"], [133, 2, 1, "", "pi"], [133, 2, 1, "", "to_polynomial"]], "sage.combinat.key_polynomial.KeyPolynomialBasis": [[133, 4, 1, "", "Element"], [133, 2, 1, "", "degree_on_basis"], [133, 2, 1, "", "from_polynomial"], [133, 2, 1, "", "from_schubert_polynomial"], [133, 2, 1, "", "one_basis"], [133, 2, 1, "", "poly_gens"], [133, 2, 1, "", "polynomial_ring"]], "sage.combinat.knutson_tao_puzzles": [[134, 3, 1, "", "BK_pieces"], [134, 1, 1, "", "DeltaPiece"], [134, 3, 1, "", "HT_grassmannian_pieces"], [134, 3, 1, "", "HT_two_step_pieces"], [134, 3, 1, "", "H_grassmannian_pieces"], [134, 3, 1, "", "H_two_step_pieces"], [134, 3, 1, "", "K_grassmannian_pieces"], [134, 1, 1, "", "KnutsonTaoPuzzleSolver"], [134, 1, 1, "", "NablaPiece"], [134, 1, 1, "", "PuzzleFilling"], [134, 1, 1, "", "PuzzlePiece"], [134, 1, 1, "", "PuzzlePieces"], [134, 1, 1, "", "RhombusPiece"]], "sage.combinat.knutson_tao_puzzles.DeltaPiece": [[134, 2, 1, "", "clockwise_rotation"], [134, 2, 1, "", "edges"], [134, 2, 1, "", "half_turn_rotation"]], "sage.combinat.knutson_tao_puzzles.KnutsonTaoPuzzleSolver": [[134, 2, 1, "", "plot"], [134, 2, 1, "", "puzzle_pieces"], [134, 2, 1, "", "solutions"], [134, 2, 1, "", "structure_constants"]], "sage.combinat.knutson_tao_puzzles.NablaPiece": [[134, 2, 1, "", "clockwise_rotation"], [134, 2, 1, "", "edges"], [134, 2, 1, "", "half_turn_rotation"]], "sage.combinat.knutson_tao_puzzles.PuzzleFilling": [[134, 2, 1, "", "add_piece"], [134, 2, 1, "", "add_pieces"], [134, 2, 1, "", "contribution"], [134, 2, 1, "", "copy"], [134, 2, 1, "", "is_completed"], [134, 2, 1, "", "is_in_south_edge"], [134, 2, 1, "", "kink_coordinates"], [134, 2, 1, "", "north_east_label_of_kink"], [134, 2, 1, "", "north_west_label_of_kink"], [134, 2, 1, "", "plot"], [134, 2, 1, "", "south_labels"]], "sage.combinat.knutson_tao_puzzles.PuzzlePiece": [[134, 2, 1, "", "border"], [134, 2, 1, "", "color"], [134, 2, 1, "", "edge_color"], [134, 2, 1, "", "edge_label"]], "sage.combinat.knutson_tao_puzzles.PuzzlePieces": [[134, 2, 1, "", "add_T_piece"], [134, 2, 1, "", "add_forbidden_label"], [134, 2, 1, "", "add_piece"], [134, 2, 1, "", "boundary_deltas"], [134, 2, 1, "", "delta_pieces"], [134, 2, 1, "", "nabla_pieces"], [134, 2, 1, "", "rhombus_pieces"]], "sage.combinat.knutson_tao_puzzles.RhombusPiece": [[134, 2, 1, "", "edges"], [134, 2, 1, "", "north_piece"], [134, 2, 1, "", "south_piece"]], "sage.combinat.matrices": [[135, 0, 0, "-", "all"], [136, 0, 0, "-", "dancing_links"], [137, 0, 0, "-", "dlxcpp"], [138, 0, 0, "-", "hadamard_matrix"], [139, 0, 0, "-", "latin"]], "sage.combinat.matrices.dancing_links": [[136, 1, 1, "", "dancing_linksWrapper"], [136, 3, 1, "", "dlx_solver"], [136, 3, 1, "", "make_dlxwrapper"]], "sage.combinat.matrices.dancing_links.dancing_linksWrapper": [[136, 2, 1, "", "all_solutions"], [136, 2, 1, "", "get_solution"], [136, 2, 1, "", "ncols"], [136, 2, 1, "", "nrows"], [136, 2, 1, "", "number_of_solutions"], [136, 2, 1, "", "one_solution"], [136, 2, 1, "", "one_solution_using_milp_solver"], [136, 2, 1, "", "one_solution_using_sat_solver"], [136, 2, 1, "", "reinitialize"], [136, 2, 1, "", "restrict"], [136, 2, 1, "", "rows"], [136, 2, 1, "", "search"], [136, 2, 1, "", "solutions_iterator"], [136, 2, 1, "", "split"], [136, 2, 1, "", "to_milp"], [136, 2, 1, "", "to_sat_solver"]], "sage.combinat.matrices.dlxcpp": [[137, 3, 1, "", "AllExactCovers"], [137, 3, 1, "", "DLXCPP"], [137, 3, 1, "", "OneExactCover"]], "sage.combinat.matrices.hadamard_matrix": [[138, 3, 1, "", "GS_skew_hadamard_smallcases"], [138, 3, 1, "", "RSHCD_324"], [138, 3, 1, "", "amicable_hadamard_matrices"], [138, 3, 1, "", "amicable_hadamard_matrices_wallis"], [138, 3, 1, "", "are_amicable_hadamard_matrices"], [138, 3, 1, "", "construction_four_symbol_delta_code_I"], [138, 3, 1, "", "construction_four_symbol_delta_code_II"], [138, 3, 1, "", "four_symbol_delta_code_smallcases"], [138, 3, 1, "", "hadamard_matrix"], [138, 3, 1, "", "hadamard_matrix_156"], [138, 3, 1, "", "hadamard_matrix_cooper_wallis_construction"], [138, 3, 1, "", "hadamard_matrix_cooper_wallis_smallcases"], [138, 3, 1, "", "hadamard_matrix_from_sds"], [138, 3, 1, "", "hadamard_matrix_miyamoto_construction"], [138, 3, 1, "", "hadamard_matrix_paleyI"], [138, 3, 1, "", "hadamard_matrix_paleyII"], [138, 3, 1, "", "hadamard_matrix_spence_construction"], [138, 3, 1, "", "hadamard_matrix_turyn_type"], [138, 3, 1, "", "hadamard_matrix_williamson_type"], [138, 3, 1, "", "hadamard_matrix_www"], [138, 3, 1, "", "is_hadamard_matrix"], [138, 3, 1, "", "is_skew_hadamard_matrix"], [138, 3, 1, "", "normalise_hadamard"], [138, 3, 1, "", "regular_symmetric_hadamard_matrix_with_constant_diagonal"], [138, 3, 1, "", "rshcd_from_close_prime_powers"], [138, 3, 1, "", "rshcd_from_prime_power_and_conference_matrix"], [138, 3, 1, "", "skew_hadamard_matrix"], [138, 3, 1, "", "skew_hadamard_matrix_from_complementary_difference_sets"], [138, 3, 1, "", "skew_hadamard_matrix_from_good_matrices"], [138, 3, 1, "", "skew_hadamard_matrix_from_good_matrices_smallcases"], [138, 3, 1, "", "skew_hadamard_matrix_from_orthogonal_design"], [138, 3, 1, "", "skew_hadamard_matrix_spence_1975"], [138, 3, 1, "", "skew_hadamard_matrix_spence_construction"], [138, 3, 1, "", "skew_hadamard_matrix_whiteman_construction"], [138, 3, 1, "", "symmetric_conference_matrix"], [138, 3, 1, "", "symmetric_conference_matrix_paley"], [138, 3, 1, "", "szekeres_difference_set_pair"], [138, 3, 1, "", "turyn_type_hadamard_matrix_smallcases"], [138, 3, 1, "", "typeI_matrix_difference_set"], [138, 3, 1, "", "williamson_goethals_seidel_skew_hadamard_matrix"], [138, 3, 1, "", "williamson_hadamard_matrix_smallcases"], [138, 3, 1, "", "williamson_type_quadruples_smallcases"]], "sage.combinat.matrices.latin": [[139, 1, 1, "", "LatinSquare"], [139, 3, 1, "", "LatinSquare_generator"], [139, 3, 1, "", "alternating_group_bitrade_generators"], [139, 3, 1, "", "back_circulant"], [139, 3, 1, "", "beta1"], [139, 3, 1, "", "beta2"], [139, 3, 1, "", "beta3"], [139, 3, 1, "", "bitrade"], [139, 3, 1, "", "bitrade_from_group"], [139, 3, 1, "", "cells_map_as_square"], [139, 3, 1, "", "check_bitrade_generators"], [139, 3, 1, "", "coin"], [139, 3, 1, "", "column_containing_sym"], [139, 3, 1, "", "direct_product"], [139, 3, 1, "", "dlxcpp_find_completions"], [139, 3, 1, "", "dlxcpp_rows_and_map"], [139, 3, 1, "", "elementary_abelian_2group"], [139, 3, 1, "", "forward_circulant"], [139, 3, 1, "", "genus"], [139, 3, 1, "", "group_to_LatinSquare"], [139, 3, 1, "", "is_bitrade"], [139, 3, 1, "", "is_disjoint"], [139, 3, 1, "", "is_primary_bitrade"], [139, 3, 1, "", "is_row_and_col_balanced"], [139, 3, 1, "", "is_same_shape"], [139, 3, 1, "", "isotopism"], [139, 3, 1, "", "next_conjugate"], [139, 3, 1, "", "p3_group_bitrade_generators"], [139, 3, 1, "", "pq_group_bitrade_generators"], [139, 3, 1, "", "row_containing_sym"], [139, 3, 1, "", "tau1"], [139, 3, 1, "", "tau123"], [139, 3, 1, "", "tau2"], [139, 3, 1, "", "tau3"], [139, 3, 1, "", "tau_to_bitrade"]], "sage.combinat.matrices.latin.LatinSquare": [[139, 2, 1, "", "actual_row_col_sym_sizes"], [139, 2, 1, "", "apply_isotopism"], [139, 2, 1, "", "clear_cells"], [139, 2, 1, "", "column"], [139, 2, 1, "", "contained_in"], [139, 2, 1, "", "disjoint_mate_dlxcpp_rows_and_map"], [139, 2, 1, "", "dlxcpp_has_unique_completion"], [139, 2, 1, "", "dumps"], [139, 2, 1, "", "filled_cells_map"], [139, 2, 1, "", "find_disjoint_mates"], [139, 2, 1, "", "gcs"], [139, 2, 1, "", "is_completable"], [139, 2, 1, "", "is_empty_column"], [139, 2, 1, "", "is_empty_row"], [139, 2, 1, "", "is_latin_square"], [139, 2, 1, "", "is_partial_latin_square"], [139, 2, 1, "", "is_uniquely_completable"], [139, 2, 1, "", "latex"], [139, 2, 1, "", "list"], [139, 2, 1, "", "ncols"], [139, 2, 1, "", "nr_distinct_symbols"], [139, 2, 1, "", "nr_filled_cells"], [139, 2, 1, "", "nrows"], [139, 2, 1, "", "permissable_values"], [139, 2, 1, "", "random_empty_cell"], [139, 2, 1, "", "row"], [139, 2, 1, "", "set_immutable"], [139, 2, 1, "", "top_left_empty_cell"], [139, 2, 1, "", "vals_in_col"], [139, 2, 1, "", "vals_in_row"]], "sage.combinat.misc": [[140, 1, 1, "", "DoublyLinkedList"], [140, 1, 1, "", "IterableFunctionCall"], [140, 3, 1, "", "check_integer_list_constraints"], [140, 3, 1, "", "umbral_operation"]], "sage.combinat.misc.DoublyLinkedList": [[140, 2, 1, "", "head"], [140, 2, 1, "", "hide"], [140, 2, 1, "", "next"], [140, 2, 1, "", "prev"], [140, 2, 1, "", "unhide"]], "sage.combinat.multiset_partition_into_sets_ordered": [[141, 1, 1, "", "MinimajCrystal"], [141, 1, 1, "", "OrderedMultisetPartitionIntoSets"], [141, 1, 1, "", "OrderedMultisetPartitionsIntoSets"], [141, 1, 1, "", "OrderedMultisetPartitionsIntoSets_X"], [141, 1, 1, "", "OrderedMultisetPartitionsIntoSets_X_constraints"], [141, 1, 1, "", "OrderedMultisetPartitionsIntoSets_all_constraints"], [141, 1, 1, "", "OrderedMultisetPartitionsIntoSets_alph_d"], [141, 1, 1, "", "OrderedMultisetPartitionsIntoSets_alph_d_constraints"], [141, 1, 1, "", "OrderedMultisetPartitionsIntoSets_n"], [141, 1, 1, "", "OrderedMultisetPartitionsIntoSets_n_constraints"]], "sage.combinat.multiset_partition_into_sets_ordered.MinimajCrystal": [[141, 1, 1, "", "Element"], [141, 2, 1, "", "from_tableau"], [141, 2, 1, "", "val"]], "sage.combinat.multiset_partition_into_sets_ordered.MinimajCrystal.Element": [[141, 2, 1, "", "e"], [141, 2, 1, "", "f"], [141, 2, 1, "", "to_tableaux_words"]], "sage.combinat.multiset_partition_into_sets_ordered.OrderedMultisetPartitionIntoSets": [[141, 2, 1, "", "check"], [141, 2, 1, "", "deconcatenate"], [141, 2, 1, "", "fatten"], [141, 2, 1, "", "fatter"], [141, 2, 1, "", "finer"], [141, 2, 1, "", "is_finer"], [141, 2, 1, "", "length"], [141, 2, 1, "", "letters"], [141, 2, 1, "", "major_index"], [141, 2, 1, "", "max_letter"], [141, 2, 1, "", "minimaj"], [141, 2, 1, "", "minimaj_blocks"], [141, 2, 1, "", "minimaj_word"], [141, 2, 1, "", "multiset"], [141, 2, 1, "", "order"], [141, 2, 1, "", "reversal"], [141, 2, 1, "", "shape_from_cardinality"], [141, 2, 1, "", "shape_from_size"], [141, 2, 1, "", "shuffle_product"], [141, 2, 1, "", "size"], [141, 2, 1, "", "split_blocks"], [141, 2, 1, "", "to_tableaux_words"], [141, 2, 1, "", "weight"]], "sage.combinat.multiset_partition_into_sets_ordered.OrderedMultisetPartitionsIntoSets": [[141, 4, 1, "", "Element"], [141, 2, 1, "", "subset"]], "sage.combinat.multiset_partition_into_sets_ordered.OrderedMultisetPartitionsIntoSets_X": [[141, 2, 1, "", "cardinality"], [141, 2, 1, "", "random_element"]], "sage.combinat.multiset_partition_into_sets_ordered.OrderedMultisetPartitionsIntoSets_alph_d": [[141, 2, 1, "", "cardinality"], [141, 2, 1, "", "random_element"]], "sage.combinat.multiset_partition_into_sets_ordered.OrderedMultisetPartitionsIntoSets_n": [[141, 2, 1, "", "cardinality"], [141, 2, 1, "", "random_element"]], "sage.combinat.ncsf_qsym": [[142, 0, 0, "-", "all"], [143, 0, 0, "-", "combinatorics"], [144, 0, 0, "-", "generic_basis_code"], [145, 0, 0, "-", "ncsf"], [146, 0, 0, "-", "qsym"], [147, 0, 0, "-", "tutorial"]], "sage.combinat.ncsf_qsym.combinatorics": [[143, 3, 1, "", "coeff_dab"], [143, 3, 1, "", "coeff_ell"], [143, 3, 1, "", "coeff_lp"], [143, 3, 1, "", "coeff_pi"], [143, 3, 1, "", "coeff_sp"], [143, 3, 1, "", "compositions_order"], [143, 3, 1, "", "m_to_s_stat"], [143, 3, 1, "", "number_of_SSRCT"], [143, 3, 1, "", "number_of_fCT"]], "sage.combinat.ncsf_qsym.generic_basis_code": [[144, 1, 1, "", "AlgebraMorphism"], [144, 1, 1, "", "BasesOfQSymOrNCSF"], [144, 1, 1, "", "GradedModulesWithInternalProduct"]], "sage.combinat.ncsf_qsym.generic_basis_code.BasesOfQSymOrNCSF": [[144, 1, 1, "", "ElementMethods"], [144, 1, 1, "", "ParentMethods"], [144, 2, 1, "", "super_categories"]], "sage.combinat.ncsf_qsym.generic_basis_code.BasesOfQSymOrNCSF.ElementMethods": [[144, 2, 1, "", "degree"], [144, 2, 1, "", "degree_negation"], [144, 2, 1, "", "duality_pairing"], [144, 2, 1, "", "skew_by"]], "sage.combinat.ncsf_qsym.generic_basis_code.BasesOfQSymOrNCSF.ParentMethods": [[144, 2, 1, "", "alternating_sum_of_compositions"], [144, 2, 1, "", "alternating_sum_of_fatter_compositions"], [144, 2, 1, "", "alternating_sum_of_finer_compositions"], [144, 2, 1, "", "counit_on_basis"], [144, 2, 1, "", "degree_negation"], [144, 2, 1, "", "degree_on_basis"], [144, 2, 1, "", "duality_pairing"], [144, 2, 1, "", "duality_pairing_by_coercion"], [144, 2, 1, "", "duality_pairing_matrix"], [144, 2, 1, "", "one_basis"], [144, 2, 1, "", "skew"], [144, 2, 1, "", "sum_of_fatter_compositions"], [144, 2, 1, "", "sum_of_finer_compositions"], [144, 2, 1, "", "sum_of_partition_rearrangements"]], "sage.combinat.ncsf_qsym.generic_basis_code.GradedModulesWithInternalProduct": [[144, 1, 1, "", "ElementMethods"], [144, 1, 1, "", "ParentMethods"], [144, 1, 1, "", "Realizations"], [144, 2, 1, "", "super_categories"]], "sage.combinat.ncsf_qsym.generic_basis_code.GradedModulesWithInternalProduct.ElementMethods": [[144, 2, 1, "", "internal_product"], [144, 2, 1, "", "itensor"], [144, 2, 1, "", "kronecker_product"]], "sage.combinat.ncsf_qsym.generic_basis_code.GradedModulesWithInternalProduct.ParentMethods": [[144, 2, 1, "", "internal_product"], [144, 2, 1, "", "internal_product_on_basis"], [144, 2, 1, "", "itensor"], [144, 2, 1, "", "kronecker_product"]], "sage.combinat.ncsf_qsym.generic_basis_code.GradedModulesWithInternalProduct.Realizations": [[144, 1, 1, "", "ParentMethods"]], "sage.combinat.ncsf_qsym.generic_basis_code.GradedModulesWithInternalProduct.Realizations.ParentMethods": [[144, 2, 1, "", "internal_product_by_coercion"]], "sage.combinat.ncsf_qsym.ncsf": [[145, 1, 1, "", "NonCommutativeSymmetricFunctions"]], "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions": [[145, 1, 1, "", "Bases"], [145, 1, 1, "", "Complete"], [145, 1, 1, "", "Elementary"], [145, 4, 1, "", "I"], [145, 1, 1, "", "Immaculate"], [145, 4, 1, "", "L"], [145, 1, 1, "", "Monomial"], [145, 1, 1, "", "MultiplicativeBases"], [145, 1, 1, "", "MultiplicativeBasesOnGroupLikeElements"], [145, 1, 1, "", "MultiplicativeBasesOnPrimitiveElements"], [145, 1, 1, "", "Phi"], [145, 1, 1, "", "Psi"], [145, 4, 1, "", "R"], [145, 1, 1, "", "Ribbon"], [145, 4, 1, "", "S"], [145, 4, 1, "", "ZL"], [145, 4, 1, "", "ZR"], [145, 1, 1, "", "Zassenhaus_left"], [145, 1, 1, "", "Zassenhaus_right"], [145, 2, 1, "", "a_realization"], [145, 4, 1, "", "complete"], [145, 4, 1, "", "dQS"], [145, 4, 1, "", "dYQS"], [145, 2, 1, "", "dual"], [145, 1, 1, "", "dualQuasisymmetric_Schur"], [145, 1, 1, "", "dualYoungQuasisymmetric_Schur"], [145, 4, 1, "", "elementary"], [145, 4, 1, "", "monomial"], [145, 4, 1, "", "nM"], [145, 4, 1, "", "ribbon"]], "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.Bases": [[145, 1, 1, "", "ElementMethods"], [145, 1, 1, "", "ParentMethods"], [145, 2, 1, "", "super_categories"]], "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.Bases.ElementMethods": [[145, 2, 1, "", "bernstein_creation_operator"], [145, 2, 1, "", "chi"], [145, 2, 1, "", "expand"], [145, 2, 1, "", "left_padded_kronecker_product"], [145, 2, 1, "", "omega_involution"], [145, 2, 1, "", "psi_involution"], [145, 2, 1, "", "star_involution"], [145, 2, 1, "", "to_descent_algebra"], [145, 2, 1, "", "to_fqsym"], [145, 2, 1, "", "to_fsym"], [145, 2, 1, "", "to_ncsym"], [145, 2, 1, "", "to_symmetric_function"], [145, 2, 1, "", "to_symmetric_group_algebra"], [145, 2, 1, "", "verschiebung"]], "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.Bases.ParentMethods": [[145, 2, 1, "", "immaculate_function"], [145, 2, 1, "", "to_symmetric_function"], [145, 2, 1, "", "to_symmetric_function_on_basis"]], "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.Complete": [[145, 1, 1, "", "Element"], [145, 2, 1, "", "dual"], [145, 2, 1, "", "internal_product_on_basis"], [145, 2, 1, "", "to_symmetric_function"], [145, 2, 1, "", "to_symmetric_function_on_basis"]], "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.Complete.Element": [[145, 2, 1, "", "psi_involution"]], "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.Elementary": [[145, 1, 1, "", "Element"]], "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.Elementary.Element": [[145, 2, 1, "", "psi_involution"], [145, 2, 1, "", "star_involution"], [145, 2, 1, "", "verschiebung"]], "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.Immaculate": [[145, 1, 1, "", "Element"], [145, 2, 1, "", "dual"]], "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.Immaculate.Element": [[145, 2, 1, "", "bernstein_creation_operator"]], "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.MultiplicativeBases": [[145, 1, 1, "", "ParentMethods"], [145, 2, 1, "", "super_categories"]], "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.MultiplicativeBases.ParentMethods": [[145, 2, 1, "", "algebra_generators"], [145, 2, 1, "", "algebra_morphism"], [145, 2, 1, "", "antipode"], [145, 2, 1, "", "coproduct"], [145, 2, 1, "", "product_on_basis"], [145, 2, 1, "", "to_symmetric_function"], [145, 2, 1, "", "to_symmetric_function_on_generators"]], "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.MultiplicativeBasesOnGroupLikeElements": [[145, 1, 1, "", "ParentMethods"], [145, 2, 1, "", "super_categories"]], "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.MultiplicativeBasesOnGroupLikeElements.ParentMethods": [[145, 2, 1, "", "antipode_on_basis"], [145, 2, 1, "", "coproduct_on_generators"]], "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.MultiplicativeBasesOnPrimitiveElements": [[145, 1, 1, "", "ParentMethods"], [145, 2, 1, "", "super_categories"]], "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.MultiplicativeBasesOnPrimitiveElements.ParentMethods": [[145, 2, 1, "", "antipode_on_generators"], [145, 2, 1, "", "coproduct_on_generators"]], "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.Phi": [[145, 1, 1, "", "Element"]], "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.Phi.Element": [[145, 2, 1, "", "psi_involution"], [145, 2, 1, "", "star_involution"], [145, 2, 1, "", "verschiebung"]], "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.Psi": [[145, 1, 1, "", "Element"], [145, 2, 1, "", "internal_product_on_basis_by_bracketing"]], "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.Psi.Element": [[145, 2, 1, "", "verschiebung"]], "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.Ribbon": [[145, 1, 1, "", "Element"], [145, 2, 1, "", "antipode_on_basis"], [145, 2, 1, "", "dual"], [145, 2, 1, "", "product_on_basis"], [145, 2, 1, "", "to_symmetric_function_on_basis"]], "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.Ribbon.Element": [[145, 2, 1, "", "star_involution"], [145, 2, 1, "", "verschiebung"]], "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.dualQuasisymmetric_Schur": [[145, 2, 1, "", "dual"], [145, 2, 1, "", "to_symmetric_function_on_basis"]], "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.dualYoungQuasisymmetric_Schur": [[145, 2, 1, "", "dual"], [145, 2, 1, "", "to_symmetric_function_on_basis"]], "sage.combinat.ncsf_qsym.qsym": [[146, 1, 1, "", "QuasiSymmetricFunctions"]], "sage.combinat.ncsf_qsym.qsym.QuasiSymmetricFunctions": [[146, 1, 1, "", "Bases"], [146, 4, 1, "", "E"], [146, 1, 1, "", "Essential"], [146, 4, 1, "", "F"], [146, 1, 1, "", "Fundamental"], [146, 1, 1, "", "HazewinkelLambda"], [146, 4, 1, "", "M"], [146, 1, 1, "", "Monomial"], [146, 4, 1, "", "QS"], [146, 1, 1, "", "Quasisymmetric_Schur"], [146, 4, 1, "", "YQS"], [146, 1, 1, "", "Young_Quasisymmetric_Schur"], [146, 2, 1, "", "a_realization"], [146, 4, 1, "", "dI"], [146, 2, 1, "", "dual"], [146, 1, 1, "", "dualImmaculate"], [146, 2, 1, "", "from_polynomial"], [146, 1, 1, "", "phi"], [146, 1, 1, "", "psi"]], "sage.combinat.ncsf_qsym.qsym.QuasiSymmetricFunctions.Bases": [[146, 1, 1, "", "ElementMethods"], [146, 1, 1, "", "ParentMethods"], [146, 2, 1, "", "super_categories"]], "sage.combinat.ncsf_qsym.qsym.QuasiSymmetricFunctions.Bases.ElementMethods": [[146, 2, 1, "", "dendriform_leq"], [146, 2, 1, "", "dendriform_less"], [146, 2, 1, "", "expand"], [146, 2, 1, "", "frobenius"], [146, 2, 1, "", "internal_coproduct"], [146, 2, 1, "", "is_symmetric"], [146, 2, 1, "", "kronecker_coproduct"], [146, 2, 1, "", "omega_involution"], [146, 2, 1, "", "psi_involution"], [146, 2, 1, "", "star_involution"], [146, 2, 1, "", "to_symmetric_function"]], "sage.combinat.ncsf_qsym.qsym.QuasiSymmetricFunctions.Bases.ParentMethods": [[146, 2, 1, "", "Eulerian"], [146, 2, 1, "", "from_polynomial"]], "sage.combinat.ncsf_qsym.qsym.QuasiSymmetricFunctions.Essential": [[146, 2, 1, "", "antipode_on_basis"], [146, 2, 1, "", "coproduct_on_basis"], [146, 2, 1, "", "product_on_basis"]], "sage.combinat.ncsf_qsym.qsym.QuasiSymmetricFunctions.Fundamental": [[146, 1, 1, "", "Element"], [146, 2, 1, "", "Eulerian"], [146, 2, 1, "", "antipode_on_basis"], [146, 2, 1, "", "coproduct_on_basis"], [146, 2, 1, "", "dual"]], "sage.combinat.ncsf_qsym.qsym.QuasiSymmetricFunctions.Fundamental.Element": [[146, 2, 1, "", "internal_coproduct"], [146, 2, 1, "", "kronecker_coproduct"], [146, 2, 1, "", "star_involution"]], "sage.combinat.ncsf_qsym.qsym.QuasiSymmetricFunctions.HazewinkelLambda": [[146, 2, 1, "", "product_on_basis"]], "sage.combinat.ncsf_qsym.qsym.QuasiSymmetricFunctions.Monomial": [[146, 1, 1, "", "Element"], [146, 2, 1, "", "antipode_on_basis"], [146, 2, 1, "", "coproduct_on_basis"], [146, 2, 1, "", "dual"], [146, 2, 1, "", "lambda_of_monomial"], [146, 2, 1, "", "product_on_basis"]], "sage.combinat.ncsf_qsym.qsym.QuasiSymmetricFunctions.Monomial.Element": [[146, 2, 1, "", "expand"], [146, 2, 1, "", "is_symmetric"], [146, 2, 1, "", "psi_involution"], [146, 2, 1, "", "to_symmetric_function"]], "sage.combinat.ncsf_qsym.qsym.QuasiSymmetricFunctions.Quasisymmetric_Schur": [[146, 2, 1, "", "dual"]], "sage.combinat.ncsym": [[148, 0, 0, "-", "all"], [149, 0, 0, "-", "bases"], [150, 0, 0, "-", "dual"], [151, 0, 0, "-", "ncsym"]], "sage.combinat.ncsym.bases": [[149, 1, 1, "", "MultiplicativeNCSymBases"], [149, 1, 1, "", "NCSymBases"], [149, 1, 1, "", "NCSymBasis_abstract"], [149, 1, 1, "", "NCSymDualBases"], [149, 1, 1, "", "NCSymOrNCSymDualBases"]], "sage.combinat.ncsym.bases.MultiplicativeNCSymBases": [[149, 1, 1, "", "ElementMethods"], [149, 1, 1, "", "ParentMethods"], [149, 2, 1, "", "super_categories"]], "sage.combinat.ncsym.bases.MultiplicativeNCSymBases.ParentMethods": [[149, 2, 1, "", "product_on_basis"]], "sage.combinat.ncsym.bases.NCSymBases": [[149, 1, 1, "", "ElementMethods"], [149, 1, 1, "", "ParentMethods"], [149, 2, 1, "", "super_categories"]], "sage.combinat.ncsym.bases.NCSymBases.ElementMethods": [[149, 2, 1, "", "expand"], [149, 2, 1, "", "internal_coproduct"], [149, 2, 1, "", "omega"], [149, 2, 1, "", "to_symmetric_function"], [149, 2, 1, "", "to_wqsym"]], "sage.combinat.ncsym.bases.NCSymBases.ParentMethods": [[149, 2, 1, "", "from_symmetric_function"], [149, 2, 1, "", "internal_coproduct"], [149, 2, 1, "", "internal_coproduct_by_coercion"], [149, 2, 1, "", "internal_coproduct_on_basis"], [149, 2, 1, "", "primitive"]], "sage.combinat.ncsym.bases.NCSymDualBases": [[149, 2, 1, "", "super_categories"]], "sage.combinat.ncsym.bases.NCSymOrNCSymDualBases": [[149, 1, 1, "", "ElementMethods"], [149, 1, 1, "", "ParentMethods"], [149, 2, 1, "", "super_categories"]], "sage.combinat.ncsym.bases.NCSymOrNCSymDualBases.ElementMethods": [[149, 2, 1, "", "duality_pairing"]], "sage.combinat.ncsym.bases.NCSymOrNCSymDualBases.ParentMethods": [[149, 2, 1, "", "counit_on_basis"], [149, 2, 1, "", "duality_pairing"], [149, 2, 1, "", "duality_pairing_matrix"], [149, 2, 1, "", "one_basis"]], "sage.combinat.ncsym.dual": [[150, 1, 1, "", "SymmetricFunctionsNonCommutingVariablesDual"]], "sage.combinat.ncsym.dual.SymmetricFunctionsNonCommutingVariablesDual": [[150, 2, 1, "", "a_realization"], [150, 2, 1, "", "dual"], [150, 1, 1, "", "w"]], "sage.combinat.ncsym.dual.SymmetricFunctionsNonCommutingVariablesDual.w": [[150, 1, 1, "", "Element"], [150, 2, 1, "", "antipode_on_basis"], [150, 2, 1, "", "coproduct_on_basis"], [150, 2, 1, "", "dual_basis"], [150, 2, 1, "", "duality_pairing"], [150, 2, 1, "", "product_on_basis"], [150, 2, 1, "", "sum_of_partitions"], [150, 2, 1, "", "to_symmetric_function"]], "sage.combinat.ncsym.dual.SymmetricFunctionsNonCommutingVariablesDual.w.Element": [[150, 2, 1, "", "expand"], [150, 2, 1, "", "is_symmetric"], [150, 2, 1, "", "to_symmetric_function"]], "sage.combinat.ncsym.ncsym": [[151, 1, 1, "", "SymmetricFunctionsNonCommutingVariables"], [151, 3, 1, "", "matchings"], [151, 3, 1, "", "nesting"]], "sage.combinat.ncsym.ncsym.SymmetricFunctionsNonCommutingVariables": [[151, 2, 1, "", "a_realization"], [151, 4, 1, "", "chi"], [151, 1, 1, "", "coarse_powersum"], [151, 4, 1, "", "cp"], [151, 1, 1, "", "deformed_coarse_powersum"], [151, 2, 1, "", "dual"], [151, 4, 1, "", "e"], [151, 1, 1, "", "elementary"], [151, 4, 1, "", "h"], [151, 1, 1, "", "homogeneous"], [151, 4, 1, "", "m"], [151, 1, 1, "", "monomial"], [151, 4, 1, "", "p"], [151, 1, 1, "", "powersum"], [151, 4, 1, "", "rho"], [151, 1, 1, "", "supercharacter"], [151, 4, 1, "", "x"], [151, 1, 1, "", "x_basis"]], "sage.combinat.ncsym.ncsym.SymmetricFunctionsNonCommutingVariables.deformed_coarse_powersum": [[151, 2, 1, "", "q"]], "sage.combinat.ncsym.ncsym.SymmetricFunctionsNonCommutingVariables.elementary": [[151, 1, 1, "", "Element"]], "sage.combinat.ncsym.ncsym.SymmetricFunctionsNonCommutingVariables.elementary.Element": [[151, 2, 1, "", "omega"], [151, 2, 1, "", "to_symmetric_function"]], "sage.combinat.ncsym.ncsym.SymmetricFunctionsNonCommutingVariables.homogeneous": [[151, 1, 1, "", "Element"]], "sage.combinat.ncsym.ncsym.SymmetricFunctionsNonCommutingVariables.homogeneous.Element": [[151, 2, 1, "", "omega"], [151, 2, 1, "", "to_symmetric_function"]], "sage.combinat.ncsym.ncsym.SymmetricFunctionsNonCommutingVariables.monomial": [[151, 1, 1, "", "Element"], [151, 2, 1, "", "coproduct_on_basis"], [151, 2, 1, "", "dual_basis"], [151, 2, 1, "", "duality_pairing"], [151, 2, 1, "", "from_symmetric_function"], [151, 2, 1, "", "internal_coproduct_on_basis"], [151, 2, 1, "", "product_on_basis"], [151, 2, 1, "", "sum_of_partitions"]], "sage.combinat.ncsym.ncsym.SymmetricFunctionsNonCommutingVariables.monomial.Element": [[151, 2, 1, "", "expand"], [151, 2, 1, "", "to_symmetric_function"]], "sage.combinat.ncsym.ncsym.SymmetricFunctionsNonCommutingVariables.powersum": [[151, 1, 1, "", "Element"], [151, 2, 1, "", "antipode_on_basis"], [151, 2, 1, "", "coproduct_on_basis"], [151, 2, 1, "", "internal_coproduct_on_basis"], [151, 2, 1, "", "primitive"]], "sage.combinat.ncsym.ncsym.SymmetricFunctionsNonCommutingVariables.powersum.Element": [[151, 2, 1, "", "to_symmetric_function"]], "sage.combinat.ncsym.ncsym.SymmetricFunctionsNonCommutingVariables.supercharacter": [[151, 2, 1, "", "q"]], "sage.combinat.necklace": [[152, 3, 1, "", "Necklaces"], [152, 1, 1, "", "Necklaces_evaluation"]], "sage.combinat.necklace.Necklaces_evaluation": [[152, 2, 1, "", "cardinality"], [152, 2, 1, "", "content"]], "sage.combinat.non_decreasing_parking_function": [[153, 1, 1, "", "NonDecreasingParkingFunction"], [153, 3, 1, "", "NonDecreasingParkingFunctions"], [153, 1, 1, "", "NonDecreasingParkingFunctions_all"], [153, 1, 1, "", "NonDecreasingParkingFunctions_n"], [153, 3, 1, "", "is_a"]], "sage.combinat.non_decreasing_parking_function.NonDecreasingParkingFunction": [[153, 2, 1, "", "from_dyck_word"], [153, 2, 1, "", "grade"], [153, 2, 1, "", "to_dyck_word"]], "sage.combinat.non_decreasing_parking_function.NonDecreasingParkingFunctions_all": [[153, 2, 1, "", "graded_component"]], "sage.combinat.non_decreasing_parking_function.NonDecreasingParkingFunctions_n": [[153, 4, 1, "", "Element"], [153, 2, 1, "", "cardinality"], [153, 2, 1, "", "one"], [153, 2, 1, "", "random_element"]], "sage.combinat.nu_dyck_word": [[154, 1, 1, "", "NuDyckWord"], [154, 1, 1, "", "NuDyckWords"], [154, 3, 1, "", "path_weakly_above_other"], [154, 3, 1, "", "replace_dyck_char"], [154, 3, 1, "", "replace_dyck_symbol"], [154, 3, 1, "", "to_word_path"], [154, 3, 1, "", "update_ndw_symbols"]], "sage.combinat.nu_dyck_word.NuDyckWord": [[154, 2, 1, "", "can_mutate"], [154, 2, 1, "", "height"], [154, 2, 1, "", "heights"], [154, 2, 1, "", "horizontal_distance"], [154, 2, 1, "", "latex_options"], [154, 2, 1, "", "length"], [154, 2, 1, "", "mutate"], [154, 2, 1, "", "path"], [154, 2, 1, "", "plot"], [154, 2, 1, "", "points"], [154, 2, 1, "", "pp"], [154, 2, 1, "", "pretty_print"], [154, 2, 1, "", "set_latex_options"], [154, 2, 1, "", "width"], [154, 2, 1, "", "widths"]], "sage.combinat.nu_dyck_word.NuDyckWords": [[154, 4, 1, "", "Element"], [154, 2, 1, "", "cardinality"], [154, 4, 1, "", "options"]], "sage.combinat.nu_tamari_lattice": [[155, 3, 1, "", "NuTamariLattice"]], "sage.combinat.ordered_tree": [[156, 1, 1, "", "LabelledOrderedTree"], [156, 1, 1, "", "LabelledOrderedTrees"], [156, 1, 1, "", "OrderedTree"], [156, 1, 1, "", "OrderedTrees"], [156, 1, 1, "", "OrderedTrees_all"], [156, 1, 1, "", "OrderedTrees_size"]], "sage.combinat.ordered_tree.LabelledOrderedTree": [[156, 2, 1, "", "left_right_symmetry"], [156, 2, 1, "", "sort_key"]], "sage.combinat.ordered_tree.LabelledOrderedTrees": [[156, 4, 1, "", "Element"], [156, 2, 1, "", "cardinality"], [156, 2, 1, "", "labelled_trees"], [156, 2, 1, "", "unlabelled_trees"]], "sage.combinat.ordered_tree.OrderedTree": [[156, 2, 1, "", "is_empty"], [156, 2, 1, "", "left_right_symmetry"], [156, 2, 1, "", "normalize"], [156, 2, 1, "", "plot"], [156, 2, 1, "", "sort_key"], [156, 2, 1, "", "to_binary_tree_left_branch"], [156, 2, 1, "", "to_binary_tree_right_branch"], [156, 2, 1, "", "to_dyck_word"], [156, 2, 1, "", "to_parallelogram_polyomino"], [156, 2, 1, "", "to_poset"], [156, 2, 1, "", "to_undirected_graph"]], "sage.combinat.ordered_tree.OrderedTrees": [[156, 2, 1, "", "leaf"]], "sage.combinat.ordered_tree.OrderedTrees_all": [[156, 4, 1, "", "Element"], [156, 2, 1, "", "labelled_trees"], [156, 2, 1, "", "unlabelled_trees"]], "sage.combinat.ordered_tree.OrderedTrees_size": [[156, 2, 1, "", "cardinality"], [156, 2, 1, "", "element_class"], [156, 2, 1, "", "random_element"]], "sage.combinat.output": [[157, 3, 1, "", "ascii_art_table"], [157, 3, 1, "", "ascii_art_table_russian"], [157, 3, 1, "", "box_exists"], [157, 3, 1, "", "tex_from_array"], [157, 3, 1, "", "tex_from_array_tuple"], [157, 3, 1, "", "tex_from_skew_array"]], "sage.combinat.parallelogram_polyomino": [[158, 1, 1, "", "LocalOptions"], [158, 1, 1, "", "ParallelogramPolyomino"], [158, 3, 1, "", "ParallelogramPolyominoes"], [158, 1, 1, "", "ParallelogramPolyominoesFactory"], [158, 6, 1, "", "ParallelogramPolyominoesOptions"], [158, 1, 1, "", "ParallelogramPolyominoes_all"], [158, 1, 1, "", "ParallelogramPolyominoes_size"], [158, 6, 1, "", "default_tikz_options"]], "sage.combinat.parallelogram_polyomino.LocalOptions": [[158, 2, 1, "", "keys"]], "sage.combinat.parallelogram_polyomino.ParallelogramPolyomino": [[158, 2, 1, "", "area"], [158, 2, 1, "", "bounce"], [158, 2, 1, "", "bounce_path"], [158, 2, 1, "", "box_is_node"], [158, 2, 1, "", "box_is_root"], [158, 2, 1, "", "cell_is_inside"], [158, 2, 1, "", "check"], [158, 2, 1, "", "degree_convexity"], [158, 2, 1, "", "from_dyck_word"], [158, 2, 1, "", "geometry"], [158, 2, 1, "", "get_BS_nodes"], [158, 2, 1, "", "get_array"], [158, 2, 1, "", "get_left_BS_nodes"], [158, 2, 1, "", "get_node_position_from_box"], [158, 2, 1, "", "get_options"], [158, 2, 1, "", "get_right_BS_nodes"], [158, 2, 1, "", "get_tikz_options"], [158, 2, 1, "", "height"], [158, 2, 1, "", "heights"], [158, 2, 1, "", "is_flat"], [158, 2, 1, "", "is_k_directed"], [158, 2, 1, "", "lower_heights"], [158, 2, 1, "", "lower_path"], [158, 2, 1, "", "lower_widths"], [158, 2, 1, "", "plot"], [158, 2, 1, "", "reflect"], [158, 2, 1, "", "rotate"], [158, 2, 1, "", "set_options"], [158, 2, 1, "", "size"], [158, 2, 1, "", "to_binary_tree"], [158, 2, 1, "", "to_dyck_word"], [158, 2, 1, "", "to_ordered_tree"], [158, 2, 1, "", "to_tikz"], [158, 2, 1, "", "upper_heights"], [158, 2, 1, "", "upper_path"], [158, 2, 1, "", "upper_widths"], [158, 2, 1, "", "width"], [158, 2, 1, "", "widths"]], "sage.combinat.parallelogram_polyomino.ParallelogramPolyominoes_all": [[158, 2, 1, "", "check_element"], [158, 2, 1, "", "get_options"], [158, 4, 1, "", "options"], [158, 2, 1, "", "set_options"]], "sage.combinat.parallelogram_polyomino.ParallelogramPolyominoes_size": [[158, 2, 1, "", "an_element"], [158, 2, 1, "", "cardinality"], [158, 2, 1, "", "check_element"], [158, 2, 1, "", "get_options"], [158, 4, 1, "", "options"], [158, 2, 1, "", "set_options"], [158, 2, 1, "", "size"]], "sage.combinat.parking_functions": [[159, 4, 1, "", "PF"], [159, 1, 1, "", "ParkingFunction"], [159, 1, 1, "", "ParkingFunctions"], [159, 1, 1, "", "ParkingFunctions_all"], [159, 1, 1, "", "ParkingFunctions_n"], [159, 3, 1, "", "from_labelled_dyck_word"], [159, 3, 1, "", "from_labelling_and_area_sequence"], [159, 3, 1, "", "is_a"]], "sage.combinat.parking_functions.ParkingFunction": [[159, 2, 1, "", "area"], [159, 2, 1, "", "cars_permutation"], [159, 2, 1, "", "characteristic_quasisymmetric_function"], [159, 2, 1, "", "check"], [159, 2, 1, "", "diagonal_composition"], [159, 2, 1, "", "diagonal_reading_word"], [159, 2, 1, "", "diagonal_word"], [159, 2, 1, "", "dinv"], [159, 2, 1, "", "dinversion_pairs"], [159, 2, 1, "", "grade"], [159, 2, 1, "", "ides"], [159, 2, 1, "", "ides_composition"], [159, 2, 1, "", "jump"], [159, 2, 1, "", "jump_list"], [159, 2, 1, "", "luck"], [159, 2, 1, "", "lucky_cars"], [159, 2, 1, "", "parking_permutation"], [159, 2, 1, "", "pretty_print"], [159, 2, 1, "", "primary_dinversion_pairs"], [159, 2, 1, "", "secondary_dinversion_pairs"], [159, 2, 1, "", "to_NonDecreasingParkingFunction"], [159, 2, 1, "", "to_area_sequence"], [159, 2, 1, "", "to_dyck_word"], [159, 2, 1, "", "to_labelled_dyck_word"], [159, 2, 1, "", "to_labelling_area_sequence_pair"], [159, 2, 1, "", "to_labelling_dyck_word_pair"], [159, 2, 1, "", "to_labelling_permutation"], [159, 2, 1, "", "touch_composition"], [159, 2, 1, "", "touch_points"]], "sage.combinat.parking_functions.ParkingFunctions_all": [[159, 4, 1, "", "Element"], [159, 2, 1, "", "graded_component"]], "sage.combinat.parking_functions.ParkingFunctions_n": [[159, 4, 1, "", "Element"], [159, 2, 1, "", "cardinality"], [159, 2, 1, "", "random_element"]], "sage.combinat.partition": [[160, 1, 1, "", "OrderedPartitions"], [160, 1, 1, "", "Partition"], [160, 1, 1, "", "Partitions"], [160, 1, 1, "", "PartitionsGreatestEQ"], [160, 1, 1, "", "PartitionsGreatestLE"], [160, 1, 1, "", "PartitionsInBox"], [160, 1, 1, "", "Partitions_all"], [160, 1, 1, "", "Partitions_all_bounded"], [160, 1, 1, "", "Partitions_constraints"], [160, 1, 1, "", "Partitions_ending"], [160, 1, 1, "", "Partitions_n"], [160, 1, 1, "", "Partitions_nk"], [160, 1, 1, "", "Partitions_parts_in"], [160, 1, 1, "", "Partitions_starting"], [160, 1, 1, "", "Partitions_with_constraints"], [160, 1, 1, "", "RegularPartitions"], [160, 1, 1, "", "RegularPartitions_all"], [160, 1, 1, "", "RegularPartitions_bounded"], [160, 1, 1, "", "RegularPartitions_n"], [160, 1, 1, "", "RegularPartitions_truncated"], [160, 1, 1, "", "RestrictedPartitions_all"], [160, 1, 1, "", "RestrictedPartitions_generic"], [160, 1, 1, "", "RestrictedPartitions_n"], [160, 3, 1, "", "number_of_partitions"], [160, 3, 1, "", "number_of_partitions_length"]], "sage.combinat.partition.OrderedPartitions": [[160, 2, 1, "", "cardinality"], [160, 2, 1, "", "list"]], "sage.combinat.partition.Partition": [[160, 2, 1, "", "add_cell"], [160, 2, 1, "", "add_horizontal_border_strip"], [160, 2, 1, "", "add_vertical_border_strip"], [160, 2, 1, "", "addable_cells"], [160, 2, 1, "", "addable_cells_residue"], [160, 2, 1, "", "arm_cells"], [160, 2, 1, "", "arm_length"], [160, 2, 1, "", "arm_lengths"], [160, 2, 1, "", "arms_legs_coeff"], [160, 2, 1, "", "atom"], [160, 2, 1, "", "attacking_pairs"], [160, 2, 1, "", "aut"], [160, 2, 1, "", "beta_numbers"], [160, 2, 1, "", "block"], [160, 2, 1, "", "boundary"], [160, 2, 1, "", "cell_poset"], [160, 2, 1, "", "cells"], [160, 2, 1, "", "centralizer_size"], [160, 2, 1, "", "character_polynomial"], [160, 2, 1, "", "components"], [160, 2, 1, "", "conjugacy_class_size"], [160, 2, 1, "", "conjugate"], [160, 2, 1, "", "contains"], [160, 2, 1, "", "content"], [160, 2, 1, "", "contents_tableau"], [160, 2, 1, "", "core"], [160, 2, 1, "", "corners"], [160, 2, 1, "", "corners_residue"], [160, 2, 1, "", "crank"], [160, 2, 1, "", "defect"], [160, 2, 1, "", "degree"], [160, 2, 1, "", "dimension"], [160, 2, 1, "", "dominated_partitions"], [160, 2, 1, "", "dominates"], [160, 2, 1, "", "down"], [160, 2, 1, "", "down_list"], [160, 2, 1, "", "dual_equivalence_graph"], [160, 2, 1, "", "evaluation"], [160, 2, 1, "", "ferrers_diagram"], [160, 2, 1, "", "frobenius_coordinates"], [160, 2, 1, "", "frobenius_rank"], [160, 2, 1, "", "from_kbounded_to_grassmannian"], [160, 2, 1, "", "from_kbounded_to_reduced_word"], [160, 2, 1, "", "garnir_tableau"], [160, 2, 1, "", "generalized_pochhammer_symbol"], [160, 2, 1, "", "get_part"], [160, 2, 1, "", "has_k_rectangle"], [160, 2, 1, "", "has_rectangle"], [160, 2, 1, "", "hook_length"], [160, 2, 1, "", "hook_lengths"], [160, 2, 1, "", "hook_polynomial"], [160, 2, 1, "", "hook_product"], [160, 2, 1, "", "hooks"], [160, 2, 1, "", "horizontal_border_strip_cells"], [160, 2, 1, "", "initial_column_tableau"], [160, 2, 1, "", "initial_tableau"], [160, 2, 1, "", "inside_corners"], [160, 2, 1, "", "inside_corners_residue"], [160, 2, 1, "", "is_core"], [160, 2, 1, "", "is_empty"], [160, 2, 1, "", "is_k_bounded"], [160, 2, 1, "", "is_k_irreducible"], [160, 2, 1, "", "is_k_reducible"], [160, 2, 1, "", "is_regular"], [160, 2, 1, "", "is_restricted"], [160, 2, 1, "", "is_symmetric"], [160, 2, 1, "", "jacobi_trudi"], [160, 2, 1, "", "k_atom"], [160, 2, 1, "", "k_boundary"], [160, 2, 1, "", "k_column_lengths"], [160, 2, 1, "", "k_conjugate"], [160, 2, 1, "", "k_interior"], [160, 2, 1, "", "k_irreducible"], [160, 2, 1, "", "k_rim"], [160, 2, 1, "", "k_row_lengths"], [160, 2, 1, "", "k_size"], [160, 2, 1, "", "k_skew"], [160, 2, 1, "", "k_split"], [160, 2, 1, "", "larger_lex"], [160, 2, 1, "", "leg_cells"], [160, 2, 1, "", "leg_length"], [160, 2, 1, "", "leg_lengths"], [160, 2, 1, "", "length"], [160, 2, 1, "", "level"], [160, 2, 1, "", "lower_hook"], [160, 2, 1, "", "lower_hook_lengths"], [160, 2, 1, "", "next"], [160, 2, 1, "", "next_within_bounds"], [160, 2, 1, "", "outer_rim"], [160, 2, 1, "", "outline"], [160, 2, 1, "", "outside_corners"], [160, 2, 1, "", "outside_corners_residue"], [160, 2, 1, "", "plancherel_measure"], [160, 2, 1, "", "power"], [160, 2, 1, "", "pp"], [160, 2, 1, "", "prime_degree"], [160, 2, 1, "", "quotient"], [160, 2, 1, "", "reading_tableau"], [160, 2, 1, "", "removable_cells"], [160, 2, 1, "", "removable_cells_residue"], [160, 2, 1, "", "remove_cell"], [160, 2, 1, "", "remove_horizontal_border_strip"], [160, 2, 1, "", "residue"], [160, 2, 1, "", "rim"], [160, 2, 1, "", "row_standard_tableaux"], [160, 2, 1, "", "sign"], [160, 2, 1, "", "size"], [160, 2, 1, "", "specht_module"], [160, 2, 1, "", "specht_module_dimension"], [160, 2, 1, "", "standard_tableaux"], [160, 2, 1, "", "stretch"], [160, 2, 1, "", "suter_diagonal_slide"], [160, 2, 1, "", "t_completion"], [160, 2, 1, "", "to_core"], [160, 2, 1, "", "to_dyck_word"], [160, 2, 1, "", "to_exp"], [160, 2, 1, "", "to_exp_dict"], [160, 2, 1, "", "to_list"], [160, 2, 1, "", "top_garnir_tableau"], [160, 2, 1, "", "up"], [160, 2, 1, "", "up_list"], [160, 2, 1, "", "upper_hook"], [160, 2, 1, "", "upper_hook_lengths"], [160, 2, 1, "", "vertical_border_strip_cells"], [160, 2, 1, "", "weighted_size"], [160, 2, 1, "", "young_subgroup"], [160, 2, 1, "", "young_subgroup_generators"], [160, 2, 1, "", "zero_one_sequence"]], "sage.combinat.partition.Partitions": [[160, 4, 1, "", "Element"], [160, 4, 1, "", "options"], [160, 2, 1, "", "subset"]], "sage.combinat.partition.PartitionsGreatestEQ": [[160, 4, 1, "", "Element"], [160, 2, 1, "", "cardinality"], [160, 4, 1, "", "options"]], "sage.combinat.partition.PartitionsGreatestLE": [[160, 4, 1, "", "Element"], [160, 2, 1, "", "cardinality"], [160, 4, 1, "", "options"]], "sage.combinat.partition.PartitionsInBox": [[160, 2, 1, "", "cardinality"], [160, 2, 1, "", "list"]], "sage.combinat.partition.Partitions_all": [[160, 2, 1, "", "from_beta_numbers"], [160, 2, 1, "", "from_core_and_quotient"], [160, 2, 1, "", "from_exp"], [160, 2, 1, "", "from_frobenius_coordinates"], [160, 2, 1, "", "from_zero_one"], [160, 2, 1, "", "subset"]], "sage.combinat.partition.Partitions_ending": [[160, 2, 1, "", "first"], [160, 2, 1, "", "next"]], "sage.combinat.partition.Partitions_n": [[160, 2, 1, "", "cardinality"], [160, 2, 1, "", "first"], [160, 2, 1, "", "last"], [160, 2, 1, "", "next"], [160, 2, 1, "", "random_element"], [160, 2, 1, "", "random_element_plancherel"], [160, 2, 1, "", "random_element_uniform"], [160, 2, 1, "", "subset"]], "sage.combinat.partition.Partitions_nk": [[160, 2, 1, "", "cardinality"], [160, 2, 1, "", "subset"]], "sage.combinat.partition.Partitions_parts_in": [[160, 2, 1, "", "cardinality"], [160, 2, 1, "", "first"], [160, 2, 1, "", "last"]], "sage.combinat.partition.Partitions_starting": [[160, 2, 1, "", "first"], [160, 2, 1, "", "next"]], "sage.combinat.partition.Partitions_with_constraints": [[160, 4, 1, "", "Element"], [160, 4, 1, "", "options"]], "sage.combinat.partition.RegularPartitions": [[160, 2, 1, "", "ell"]], "sage.combinat.partition.RegularPartitions_n": [[160, 2, 1, "", "cardinality"]], "sage.combinat.partition.RegularPartitions_truncated": [[160, 2, 1, "", "max_length"]], "sage.combinat.partition.RestrictedPartitions_generic": [[160, 2, 1, "", "ell"]], "sage.combinat.partition.RestrictedPartitions_n": [[160, 2, 1, "", "cardinality"]], "sage.combinat.partition_algebra": [[161, 1, 1, "", "PartitionAlgebraElement_ak"], [161, 1, 1, "", "PartitionAlgebraElement_bk"], [161, 1, 1, "", "PartitionAlgebraElement_generic"], [161, 1, 1, "", "PartitionAlgebraElement_pk"], [161, 1, 1, "", "PartitionAlgebraElement_prk"], [161, 1, 1, "", "PartitionAlgebraElement_rk"], [161, 1, 1, "", "PartitionAlgebraElement_sk"], [161, 1, 1, "", "PartitionAlgebraElement_tk"], [161, 1, 1, "", "PartitionAlgebra_ak"], [161, 1, 1, "", "PartitionAlgebra_bk"], [161, 1, 1, "", "PartitionAlgebra_generic"], [161, 1, 1, "", "PartitionAlgebra_pk"], [161, 1, 1, "", "PartitionAlgebra_prk"], [161, 1, 1, "", "PartitionAlgebra_rk"], [161, 1, 1, "", "PartitionAlgebra_sk"], [161, 1, 1, "", "PartitionAlgebra_tk"], [161, 3, 1, "", "SetPartitionsAk"], [161, 1, 1, "", "SetPartitionsAk_k"], [161, 1, 1, "", "SetPartitionsAkhalf_k"], [161, 3, 1, "", "SetPartitionsBk"], [161, 1, 1, "", "SetPartitionsBk_k"], [161, 1, 1, "", "SetPartitionsBkhalf_k"], [161, 3, 1, "", "SetPartitionsIk"], [161, 1, 1, "", "SetPartitionsIk_k"], [161, 1, 1, "", "SetPartitionsIkhalf_k"], [161, 3, 1, "", "SetPartitionsPRk"], [161, 1, 1, "", "SetPartitionsPRk_k"], [161, 1, 1, "", "SetPartitionsPRkhalf_k"], [161, 3, 1, "", "SetPartitionsPk"], [161, 1, 1, "", "SetPartitionsPk_k"], [161, 1, 1, "", "SetPartitionsPkhalf_k"], [161, 3, 1, "", "SetPartitionsRk"], [161, 1, 1, "", "SetPartitionsRk_k"], [161, 1, 1, "", "SetPartitionsRkhalf_k"], [161, 3, 1, "", "SetPartitionsSk"], [161, 1, 1, "", "SetPartitionsSk_k"], [161, 1, 1, "", "SetPartitionsSkhalf_k"], [161, 3, 1, "", "SetPartitionsTk"], [161, 1, 1, "", "SetPartitionsTk_k"], [161, 1, 1, "", "SetPartitionsTkhalf_k"], [161, 1, 1, "", "SetPartitionsXkElement"], [161, 3, 1, "", "identity"], [161, 3, 1, "", "is_planar"], [161, 3, 1, "", "pair_to_graph"], [161, 3, 1, "", "propagating_number"], [161, 3, 1, "", "set_partition_composition"], [161, 3, 1, "", "to_graph"], [161, 3, 1, "", "to_set_partition"]], "sage.combinat.partition_algebra.PartitionAlgebra_generic": [[161, 2, 1, "", "one_basis"], [161, 2, 1, "", "product_on_basis"]], "sage.combinat.partition_algebra.SetPartitionsAk_k": [[161, 4, 1, "", "Element"]], "sage.combinat.partition_algebra.SetPartitionsAkhalf_k": [[161, 4, 1, "", "Element"]], "sage.combinat.partition_algebra.SetPartitionsBk_k": [[161, 2, 1, "", "cardinality"]], "sage.combinat.partition_algebra.SetPartitionsBkhalf_k": [[161, 2, 1, "", "cardinality"]], "sage.combinat.partition_algebra.SetPartitionsIk_k": [[161, 2, 1, "", "cardinality"]], "sage.combinat.partition_algebra.SetPartitionsIkhalf_k": [[161, 2, 1, "", "cardinality"]], "sage.combinat.partition_algebra.SetPartitionsPRk_k": [[161, 2, 1, "", "cardinality"]], "sage.combinat.partition_algebra.SetPartitionsPRkhalf_k": [[161, 2, 1, "", "cardinality"]], "sage.combinat.partition_algebra.SetPartitionsPk_k": [[161, 2, 1, "", "cardinality"]], "sage.combinat.partition_algebra.SetPartitionsPkhalf_k": [[161, 2, 1, "", "cardinality"]], "sage.combinat.partition_algebra.SetPartitionsRk_k": [[161, 2, 1, "", "cardinality"]], "sage.combinat.partition_algebra.SetPartitionsRkhalf_k": [[161, 2, 1, "", "cardinality"]], "sage.combinat.partition_algebra.SetPartitionsSk_k": [[161, 2, 1, "", "cardinality"]], "sage.combinat.partition_algebra.SetPartitionsSkhalf_k": [[161, 2, 1, "", "cardinality"]], "sage.combinat.partition_algebra.SetPartitionsTk_k": [[161, 2, 1, "", "cardinality"]], "sage.combinat.partition_algebra.SetPartitionsTkhalf_k": [[161, 2, 1, "", "cardinality"]], "sage.combinat.partition_algebra.SetPartitionsXkElement": [[161, 2, 1, "", "check"]], "sage.combinat.partition_kleshchev": [[162, 1, 1, "", "KleshchevCrystalMixin"], [162, 1, 1, "", "KleshchevPartition"], [162, 1, 1, "", "KleshchevPartitionCrystal"], [162, 1, 1, "", "KleshchevPartitionTuple"], [162, 1, 1, "", "KleshchevPartitionTupleCrystal"], [162, 1, 1, "", "KleshchevPartitions"], [162, 1, 1, "", "KleshchevPartitions_all"], [162, 1, 1, "", "KleshchevPartitions_size"]], "sage.combinat.partition_kleshchev.KleshchevCrystalMixin": [[162, 2, 1, "", "Epsilon"], [162, 2, 1, "", "Phi"], [162, 2, 1, "", "epsilon"], [162, 2, 1, "", "phi"], [162, 2, 1, "", "weight"]], "sage.combinat.partition_kleshchev.KleshchevPartition": [[162, 2, 1, "", "cogood_cells"], [162, 2, 1, "", "conormal_cells"], [162, 2, 1, "", "good_cell_sequence"], [162, 2, 1, "", "good_cells"], [162, 2, 1, "", "good_residue_sequence"], [162, 2, 1, "", "is_regular"], [162, 2, 1, "", "is_restricted"], [162, 2, 1, "", "mullineux_conjugate"], [162, 2, 1, "", "normal_cells"]], "sage.combinat.partition_kleshchev.KleshchevPartitionCrystal": [[162, 2, 1, "", "e"], [162, 2, 1, "", "f"]], "sage.combinat.partition_kleshchev.KleshchevPartitionTuple": [[162, 2, 1, "", "cogood_cells"], [162, 2, 1, "", "conormal_cells"], [162, 2, 1, "", "good_cell_sequence"], [162, 2, 1, "", "good_cells"], [162, 2, 1, "", "good_residue_sequence"], [162, 2, 1, "", "is_regular"], [162, 2, 1, "", "is_restricted"], [162, 2, 1, "", "mullineux_conjugate"], [162, 2, 1, "", "normal_cells"]], "sage.combinat.partition_kleshchev.KleshchevPartitionTupleCrystal": [[162, 2, 1, "", "e"], [162, 2, 1, "", "f"]], "sage.combinat.partition_kleshchev.KleshchevPartitions": [[162, 2, 1, "", "convention"], [162, 2, 1, "", "multicharge"]], "sage.combinat.partition_kleshchev.KleshchevPartitions_size": [[162, 4, 1, "", "Element"]], "sage.combinat.partition_shifting_algebras": [[163, 1, 1, "", "ShiftingOperatorAlgebra"], [163, 1, 1, "", "ShiftingSequenceSpace"]], "sage.combinat.partition_shifting_algebras.ShiftingOperatorAlgebra": [[163, 1, 1, "", "Element"], [163, 2, 1, "", "build_and_register_conversion"], [163, 2, 1, "", "ij"], [163, 2, 1, "", "one_basis"], [163, 2, 1, "", "product_on_basis"]], "sage.combinat.partition_shifting_algebras.ShiftingSequenceSpace": [[163, 2, 1, "", "check"]], "sage.combinat.partition_tuple": [[164, 1, 1, "", "PartitionTuple"], [164, 1, 1, "", "PartitionTuples"], [164, 1, 1, "", "PartitionTuples_all"], [164, 1, 1, "", "PartitionTuples_level"], [164, 1, 1, "", "PartitionTuples_level_size"], [164, 1, 1, "", "PartitionTuples_size"], [164, 1, 1, "", "RegularPartitionTuples"], [164, 1, 1, "", "RegularPartitionTuples_all"], [164, 1, 1, "", "RegularPartitionTuples_level"], [164, 1, 1, "", "RegularPartitionTuples_level_size"], [164, 1, 1, "", "RegularPartitionTuples_size"]], "sage.combinat.partition_tuple.PartitionTuple": [[164, 4, 1, "", "Element"], [164, 2, 1, "", "add_cell"], [164, 2, 1, "", "addable_cells"], [164, 2, 1, "", "arm_length"], [164, 2, 1, "", "block"], [164, 2, 1, "", "cells"], [164, 2, 1, "", "components"], [164, 2, 1, "", "conjugate"], [164, 2, 1, "", "contains"], [164, 2, 1, "", "content"], [164, 2, 1, "", "content_tableau"], [164, 2, 1, "", "corners"], [164, 2, 1, "", "defect"], [164, 2, 1, "", "degree"], [164, 2, 1, "", "diagram"], [164, 2, 1, "", "dominates"], [164, 2, 1, "", "down"], [164, 2, 1, "", "down_list"], [164, 2, 1, "", "ferrers_diagram"], [164, 2, 1, "", "garnir_tableau"], [164, 2, 1, "", "hook_length"], [164, 2, 1, "", "initial_column_tableau"], [164, 2, 1, "", "initial_tableau"], [164, 2, 1, "", "leg_length"], [164, 2, 1, "", "level"], [164, 2, 1, "", "outside_corners"], [164, 2, 1, "", "pp"], [164, 2, 1, "", "prime_degree"], [164, 2, 1, "", "removable_cells"], [164, 2, 1, "", "remove_cell"], [164, 2, 1, "", "row_standard_tableaux"], [164, 2, 1, "", "size"], [164, 2, 1, "", "standard_tableaux"], [164, 2, 1, "", "to_exp"], [164, 2, 1, "", "to_list"], [164, 2, 1, "", "top_garnir_tableau"], [164, 2, 1, "", "up"], [164, 2, 1, "", "up_list"], [164, 2, 1, "", "young_subgroup"], [164, 2, 1, "", "young_subgroup_generators"]], "sage.combinat.partition_tuple.PartitionTuples": [[164, 4, 1, "", "Element"], [164, 2, 1, "", "level"], [164, 4, 1, "", "options"], [164, 2, 1, "", "size"]], "sage.combinat.partition_tuple.PartitionTuples_level_size": [[164, 2, 1, "", "cardinality"]], "sage.combinat.partitions": [[165, 3, 1, "", "ZS1_iterator"], [165, 3, 1, "", "ZS1_iterator_nk"]], "sage.combinat.path_tableaux": [[166, 0, 0, "-", "catalog"], [167, 0, 0, "-", "dyck_path"], [168, 0, 0, "-", "frieze"], [169, 0, 0, "-", "path_tableau"], [170, 0, 0, "-", "semistandard"]], "sage.combinat.path_tableaux.dyck_path": [[167, 1, 1, "", "DyckPath"], [167, 1, 1, "", "DyckPaths"]], "sage.combinat.path_tableaux.dyck_path.DyckPath": [[167, 2, 1, "", "check"], [167, 2, 1, "", "descents"], [167, 2, 1, "", "is_skew"], [167, 2, 1, "", "local_rule"], [167, 2, 1, "", "to_DyckWord"], [167, 2, 1, "", "to_perfect_matching"], [167, 2, 1, "", "to_tableau"], [167, 2, 1, "", "to_word"]], "sage.combinat.path_tableaux.dyck_path.DyckPaths": [[167, 4, 1, "", "Element"]], "sage.combinat.path_tableaux.frieze": [[168, 1, 1, "", "FriezePattern"], [168, 1, 1, "", "FriezePatterns"]], "sage.combinat.path_tableaux.frieze.FriezePattern": [[168, 2, 1, "", "change_ring"], [168, 2, 1, "", "check"], [168, 2, 1, "", "is_integral"], [168, 2, 1, "", "is_positive"], [168, 2, 1, "", "is_skew"], [168, 2, 1, "", "local_rule"], [168, 2, 1, "", "plot"], [168, 2, 1, "", "triangulation"], [168, 2, 1, "", "width"]], "sage.combinat.path_tableaux.frieze.FriezePatterns": [[168, 4, 1, "", "Element"]], "sage.combinat.path_tableaux.path_tableau": [[169, 1, 1, "", "CylindricalDiagram"], [169, 1, 1, "", "PathTableau"], [169, 1, 1, "", "PathTableaux"]], "sage.combinat.path_tableaux.path_tableau.CylindricalDiagram": [[169, 2, 1, "", "pp"]], "sage.combinat.path_tableaux.path_tableau.PathTableau": [[169, 2, 1, "", "cactus"], [169, 2, 1, "", "commutor"], [169, 2, 1, "", "dual_equivalence_graph"], [169, 2, 1, "", "evacuation"], [169, 2, 1, "", "final_shape"], [169, 2, 1, "", "initial_shape"], [169, 2, 1, "", "local_rule"], [169, 2, 1, "", "orbit"], [169, 2, 1, "", "promotion"], [169, 2, 1, "", "size"]], "sage.combinat.path_tableaux.semistandard": [[170, 1, 1, "", "SemistandardPathTableau"], [170, 1, 1, "", "SemistandardPathTableaux"]], "sage.combinat.path_tableaux.semistandard.SemistandardPathTableau": [[170, 2, 1, "", "check"], [170, 2, 1, "", "is_integral"], [170, 2, 1, "", "is_skew"], [170, 2, 1, "", "local_rule"], [170, 2, 1, "", "rectify"], [170, 2, 1, "", "size"], [170, 2, 1, "", "to_pattern"], [170, 2, 1, "", "to_tableau"]], "sage.combinat.path_tableaux.semistandard.SemistandardPathTableaux": [[170, 4, 1, "", "Element"]], "sage.combinat.perfect_matching": [[171, 1, 1, "", "PerfectMatching"], [171, 1, 1, "", "PerfectMatchings"]], "sage.combinat.perfect_matching.PerfectMatching": [[171, 2, 1, "", "Weingarten_function"], [171, 2, 1, "", "loop_type"], [171, 2, 1, "", "loops"], [171, 2, 1, "", "loops_iterator"], [171, 2, 1, "", "number_of_loops"], [171, 2, 1, "", "partner"], [171, 2, 1, "", "standardization"], [171, 2, 1, "", "to_graph"], [171, 2, 1, "", "to_noncrossing_set_partition"]], "sage.combinat.perfect_matching.PerfectMatchings": [[171, 4, 1, "", "Element"], [171, 2, 1, "", "Weingarten_matrix"], [171, 2, 1, "", "base_set"], [171, 2, 1, "", "base_set_cardinality"], [171, 2, 1, "", "cardinality"], [171, 2, 1, "", "random_element"]], "sage.combinat.permutation": [[172, 1, 1, "", "Arrangements"], [172, 1, 1, "", "Arrangements_msetk"], [172, 1, 1, "", "Arrangements_setk"], [172, 1, 1, "", "CyclicPermutations"], [172, 1, 1, "", "CyclicPermutationsOfPartition"], [172, 1, 1, "", "PatternAvoider"], [172, 1, 1, "", "Permutation"], [172, 1, 1, "", "Permutations"], [172, 1, 1, "", "PermutationsNK"], [172, 1, 1, "", "Permutations_mset"], [172, 1, 1, "", "Permutations_msetk"], [172, 1, 1, "", "Permutations_nk"], [172, 1, 1, "", "Permutations_set"], [172, 1, 1, "", "Permutations_setk"], [172, 1, 1, "", "StandardPermutations_all"], [172, 1, 1, "", "StandardPermutations_all_avoiding"], [172, 1, 1, "", "StandardPermutations_avoiding_12"], [172, 1, 1, "", "StandardPermutations_avoiding_123"], [172, 1, 1, "", "StandardPermutations_avoiding_132"], [172, 1, 1, "", "StandardPermutations_avoiding_21"], [172, 1, 1, "", "StandardPermutations_avoiding_213"], [172, 1, 1, "", "StandardPermutations_avoiding_231"], [172, 1, 1, "", "StandardPermutations_avoiding_312"], [172, 1, 1, "", "StandardPermutations_avoiding_321"], [172, 1, 1, "", "StandardPermutations_avoiding_generic"], [172, 1, 1, "", "StandardPermutations_bruhat_greater"], [172, 1, 1, "", "StandardPermutations_bruhat_smaller"], [172, 1, 1, "", "StandardPermutations_descents"], [172, 1, 1, "", "StandardPermutations_n"], [172, 1, 1, "", "StandardPermutations_n_abstract"], [172, 1, 1, "", "StandardPermutations_recoils"], [172, 1, 1, "", "StandardPermutations_recoilsfatter"], [172, 1, 1, "", "StandardPermutations_recoilsfiner"], [172, 3, 1, "", "bistochastic_as_sum_of_permutations"], [172, 3, 1, "", "bounded_affine_permutation"], [172, 3, 1, "", "bruhat_lequal"], [172, 3, 1, "", "descents_composition_first"], [172, 3, 1, "", "descents_composition_last"], [172, 3, 1, "", "descents_composition_list"], [172, 3, 1, "", "from_cycles"], [172, 3, 1, "", "from_inversion_vector"], [172, 3, 1, "", "from_lehmer_cocode"], [172, 3, 1, "", "from_lehmer_code"], [172, 3, 1, "", "from_major_code"], [172, 3, 1, "", "from_permutation_group_element"], [172, 3, 1, "", "from_rank"], [172, 3, 1, "", "from_reduced_word"], [172, 3, 1, "", "permutohedron_lequal"], [172, 3, 1, "", "to_standard"]], "sage.combinat.permutation.Arrangements": [[172, 2, 1, "", "cardinality"]], "sage.combinat.permutation.CyclicPermutations": [[172, 2, 1, "", "iterator"], [172, 2, 1, "", "list"]], "sage.combinat.permutation.CyclicPermutationsOfPartition": [[172, 1, 1, "", "Element"], [172, 2, 1, "", "iterator"], [172, 2, 1, "", "list"]], "sage.combinat.permutation.CyclicPermutationsOfPartition.Element": [[172, 2, 1, "", "check"]], "sage.combinat.permutation.Permutation": [[172, 2, 1, "", "RS_partition"], [172, 2, 1, "", "absolute_length"], [172, 2, 1, "", "action"], [172, 2, 1, "", "avoids"], [172, 2, 1, "", "binary_search_tree"], [172, 2, 1, "", "binary_search_tree_shape"], [172, 2, 1, "", "bruhat_greater"], [172, 2, 1, "", "bruhat_inversions"], [172, 2, 1, "", "bruhat_inversions_iterator"], [172, 2, 1, "", "bruhat_lequal"], [172, 2, 1, "", "bruhat_pred"], [172, 2, 1, "", "bruhat_pred_iterator"], [172, 2, 1, "", "bruhat_smaller"], [172, 2, 1, "", "bruhat_succ"], [172, 2, 1, "", "bruhat_succ_iterator"], [172, 2, 1, "", "complement"], [172, 2, 1, "", "cycle_string"], [172, 2, 1, "", "cycle_tuples"], [172, 2, 1, "", "cycle_type"], [172, 2, 1, "", "decreasing_runs"], [172, 2, 1, "", "descent_polynomial"], [172, 2, 1, "", "descents"], [172, 2, 1, "", "descents_composition"], [172, 2, 1, "", "destandardize"], [172, 2, 1, "", "dict"], [172, 2, 1, "", "fixed_points"], [172, 2, 1, "", "foata_bijection"], [172, 2, 1, "", "foata_bijection_inverse"], [172, 2, 1, "", "forget_cycles"], [172, 2, 1, "", "fundamental_transformation"], [172, 2, 1, "", "fundamental_transformation_inverse"], [172, 2, 1, "", "grade"], [172, 2, 1, "", "has_nth_root"], [172, 2, 1, "", "has_pattern"], [172, 2, 1, "", "hyperoctahedral_double_coset_type"], [172, 2, 1, "", "idescents"], [172, 2, 1, "", "idescents_signature"], [172, 2, 1, "", "imajor_index"], [172, 2, 1, "", "increasing_tree"], [172, 2, 1, "", "increasing_tree_shape"], [172, 2, 1, "", "inverse"], [172, 2, 1, "", "inversions"], [172, 2, 1, "", "is_derangement"], [172, 2, 1, "", "is_even"], [172, 2, 1, "", "is_simple"], [172, 2, 1, "", "ishift"], [172, 2, 1, "", "iswitch"], [172, 2, 1, "", "left_action_product"], [172, 2, 1, "", "left_tableau"], [172, 2, 1, "", "length"], [172, 2, 1, "", "longest_increasing_subsequence_length"], [172, 2, 1, "", "longest_increasing_subsequences"], [172, 2, 1, "", "longest_increasing_subsequences_number"], [172, 2, 1, "", "major_index"], [172, 2, 1, "", "multi_major_index"], [172, 2, 1, "", "next"], [172, 2, 1, "", "noninversions"], [172, 2, 1, "", "nth_roots"], [172, 2, 1, "", "number_of_descents"], [172, 2, 1, "", "number_of_fixed_points"], [172, 2, 1, "", "number_of_idescents"], [172, 2, 1, "", "number_of_inversions"], [172, 2, 1, "", "number_of_noninversions"], [172, 2, 1, "", "number_of_nth_roots"], [172, 2, 1, "", "number_of_peaks"], [172, 2, 1, "", "number_of_recoils"], [172, 2, 1, "", "number_of_reduced_words"], [172, 2, 1, "", "number_of_saliances"], [172, 2, 1, "", "pattern_positions"], [172, 2, 1, "", "peaks"], [172, 2, 1, "", "permutation_poset"], [172, 2, 1, "", "permutohedron_greater"], [172, 2, 1, "", "permutohedron_join"], [172, 2, 1, "", "permutohedron_lequal"], [172, 2, 1, "", "permutohedron_meet"], [172, 2, 1, "", "permutohedron_pred"], [172, 2, 1, "", "permutohedron_smaller"], [172, 2, 1, "", "permutohedron_succ"], [172, 2, 1, "", "prev"], [172, 2, 1, "", "rank"], [172, 2, 1, "", "recoils"], [172, 2, 1, "", "recoils_composition"], [172, 2, 1, "", "reduced_word"], [172, 2, 1, "", "reduced_word_lexmin"], [172, 2, 1, "", "reduced_words"], [172, 2, 1, "", "reduced_words_iterator"], [172, 2, 1, "", "remove_extra_fixed_points"], [172, 2, 1, "", "retract_direct_product"], [172, 2, 1, "", "retract_okounkov_vershik"], [172, 2, 1, "", "retract_plain"], [172, 2, 1, "", "reverse"], [172, 2, 1, "", "right_action_product"], [172, 2, 1, "", "right_permutohedron_interval"], [172, 2, 1, "", "right_permutohedron_interval_iterator"], [172, 2, 1, "", "right_tableau"], [172, 2, 1, "", "robinson_schensted"], [172, 2, 1, "", "rothe_diagram"], [172, 2, 1, "", "runs"], [172, 2, 1, "", "saliances"], [172, 2, 1, "", "shifted_concatenation"], [172, 2, 1, "", "shifted_shuffle"], [172, 2, 1, "", "show"], [172, 2, 1, "", "sign"], [172, 2, 1, "", "signature"], [172, 2, 1, "", "simion_schmidt"], [172, 2, 1, "", "size"], [172, 2, 1, "", "stack_sort"], [172, 2, 1, "", "sylvester_class"], [172, 2, 1, "", "to_alternating_sign_matrix"], [172, 2, 1, "", "to_cycles"], [172, 2, 1, "", "to_digraph"], [172, 2, 1, "", "to_inversion_vector"], [172, 2, 1, "", "to_lehmer_cocode"], [172, 2, 1, "", "to_lehmer_code"], [172, 2, 1, "", "to_major_code"], [172, 2, 1, "", "to_matrix"], [172, 2, 1, "", "to_permutation_group_element"], [172, 2, 1, "", "to_tableau_by_shape"], [172, 2, 1, "", "weak_excedences"]], "sage.combinat.permutation.Permutations": [[172, 4, 1, "", "Element"], [172, 4, 1, "", "options"]], "sage.combinat.permutation.Permutations_mset": [[172, 1, 1, "", "Element"], [172, 2, 1, "", "cardinality"], [172, 2, 1, "", "rank"], [172, 2, 1, "", "unrank"]], "sage.combinat.permutation.Permutations_mset.Element": [[172, 2, 1, "", "check"]], "sage.combinat.permutation.Permutations_msetk": [[172, 2, 1, "", "cardinality"]], "sage.combinat.permutation.Permutations_nk": [[172, 1, 1, "", "Element"], [172, 2, 1, "", "cardinality"], [172, 2, 1, "", "random_element"]], "sage.combinat.permutation.Permutations_nk.Element": [[172, 2, 1, "", "check"]], "sage.combinat.permutation.Permutations_set": [[172, 1, 1, "", "Element"], [172, 2, 1, "", "cardinality"], [172, 2, 1, "", "random_element"]], "sage.combinat.permutation.Permutations_set.Element": [[172, 2, 1, "", "check"]], "sage.combinat.permutation.Permutations_setk": [[172, 2, 1, "", "random_element"]], "sage.combinat.permutation.StandardPermutations_all": [[172, 2, 1, "", "graded_component"]], "sage.combinat.permutation.StandardPermutations_all_avoiding": [[172, 2, 1, "", "patterns"]], "sage.combinat.permutation.StandardPermutations_avoiding_12": [[172, 2, 1, "", "cardinality"]], "sage.combinat.permutation.StandardPermutations_avoiding_123": [[172, 2, 1, "", "cardinality"]], "sage.combinat.permutation.StandardPermutations_avoiding_132": [[172, 2, 1, "", "cardinality"]], "sage.combinat.permutation.StandardPermutations_avoiding_21": [[172, 2, 1, "", "cardinality"]], "sage.combinat.permutation.StandardPermutations_avoiding_213": [[172, 2, 1, "", "cardinality"]], "sage.combinat.permutation.StandardPermutations_avoiding_231": [[172, 2, 1, "", "cardinality"]], "sage.combinat.permutation.StandardPermutations_avoiding_312": [[172, 2, 1, "", "cardinality"]], "sage.combinat.permutation.StandardPermutations_avoiding_321": [[172, 2, 1, "", "cardinality"]], "sage.combinat.permutation.StandardPermutations_avoiding_generic": [[172, 5, 1, "", "a"], [172, 2, 1, "", "cardinality"], [172, 2, 1, "", "patterns"]], "sage.combinat.permutation.StandardPermutations_descents": [[172, 2, 1, "", "cardinality"], [172, 2, 1, "", "first"], [172, 2, 1, "", "last"]], "sage.combinat.permutation.StandardPermutations_n": [[172, 1, 1, "", "Element"], [172, 2, 1, "", "algebra"], [172, 2, 1, "", "as_permutation_group"], [172, 2, 1, "", "cardinality"], [172, 2, 1, "", "cartan_type"], [172, 2, 1, "", "codegrees"], [172, 2, 1, "", "conjugacy_class"], [172, 2, 1, "", "conjugacy_classes"], [172, 2, 1, "", "conjugacy_classes_iterator"], [172, 2, 1, "", "conjugacy_classes_representatives"], [172, 2, 1, "", "degree"], [172, 2, 1, "", "degrees"], [172, 2, 1, "", "element_in_conjugacy_classes"], [172, 2, 1, "", "identity"], [172, 2, 1, "", "index_set"], [172, 2, 1, "", "one"], [172, 2, 1, "", "random_element"], [172, 2, 1, "", "rank"], [172, 2, 1, "", "simple_reflection"], [172, 2, 1, "", "unrank"]], "sage.combinat.permutation.StandardPermutations_n.Element": [[172, 2, 1, "", "apply_simple_reflection_left"], [172, 2, 1, "", "apply_simple_reflection_right"], [172, 2, 1, "", "has_left_descent"], [172, 2, 1, "", "has_right_descent"], [172, 2, 1, "", "inverse"]], "sage.combinat.permutation_cython": [[173, 3, 1, "", "left_action_product"], [173, 3, 1, "", "left_action_same_n"], [173, 3, 1, "", "map_to_list"], [173, 3, 1, "", "next_perm"], [173, 3, 1, "", "permutation_iterator_transposition_list"], [173, 3, 1, "", "right_action_product"], [173, 3, 1, "", "right_action_same_n"]], "sage.combinat.plane_partition": [[174, 1, 1, "", "PlanePartition"], [174, 1, 1, "", "PlanePartitions"], [174, 1, 1, "", "PlanePartitions_CSPP"], [174, 1, 1, "", "PlanePartitions_CSSCPP"], [174, 1, 1, "", "PlanePartitions_CSTCPP"], [174, 1, 1, "", "PlanePartitions_SCPP"], [174, 1, 1, "", "PlanePartitions_SPP"], [174, 1, 1, "", "PlanePartitions_SSCPP"], [174, 1, 1, "", "PlanePartitions_TCPP"], [174, 1, 1, "", "PlanePartitions_TSPP"], [174, 1, 1, "", "PlanePartitions_TSSCPP"], [174, 1, 1, "", "PlanePartitions_all"], [174, 1, 1, "", "PlanePartitions_box"], [174, 1, 1, "", "PlanePartitions_n"]], "sage.combinat.plane_partition.PlanePartition": [[174, 2, 1, "", "bounding_box"], [174, 2, 1, "", "cells"], [174, 2, 1, "", "check"], [174, 2, 1, "", "complement"], [174, 2, 1, "", "contains"], [174, 2, 1, "", "cyclically_rotate"], [174, 2, 1, "", "is_CSPP"], [174, 2, 1, "", "is_CSSCPP"], [174, 2, 1, "", "is_CSTCPP"], [174, 2, 1, "", "is_SCPP"], [174, 2, 1, "", "is_SPP"], [174, 2, 1, "", "is_SSCPP"], [174, 2, 1, "", "is_TCPP"], [174, 2, 1, "", "is_TSPP"], [174, 2, 1, "", "is_TSSCPP"], [174, 2, 1, "", "maximal_boxes"], [174, 2, 1, "", "number_of_boxes"], [174, 2, 1, "", "plot"], [174, 2, 1, "", "plot3d"], [174, 2, 1, "", "pp"], [174, 2, 1, "", "to_order_ideal"], [174, 2, 1, "", "to_tableau"], [174, 2, 1, "", "transpose"], [174, 2, 1, "", "x_tableau"], [174, 2, 1, "", "y_tableau"], [174, 2, 1, "", "z_tableau"]], "sage.combinat.plane_partition.PlanePartitions": [[174, 4, 1, "", "Element"], [174, 2, 1, "", "box"], [174, 2, 1, "", "symmetry"]], "sage.combinat.plane_partition.PlanePartitions_CSPP": [[174, 2, 1, "", "cardinality"], [174, 2, 1, "", "from_antichain"], [174, 2, 1, "", "from_order_ideal"], [174, 2, 1, "", "random_element"], [174, 2, 1, "", "to_poset"]], "sage.combinat.plane_partition.PlanePartitions_CSSCPP": [[174, 2, 1, "", "cardinality"]], "sage.combinat.plane_partition.PlanePartitions_CSTCPP": [[174, 2, 1, "", "cardinality"]], "sage.combinat.plane_partition.PlanePartitions_SCPP": [[174, 2, 1, "", "cardinality"]], "sage.combinat.plane_partition.PlanePartitions_SPP": [[174, 2, 1, "", "cardinality"], [174, 2, 1, "", "from_antichain"], [174, 2, 1, "", "from_order_ideal"], [174, 2, 1, "", "random_element"], [174, 2, 1, "", "to_poset"]], "sage.combinat.plane_partition.PlanePartitions_SSCPP": [[174, 2, 1, "", "cardinality"]], "sage.combinat.plane_partition.PlanePartitions_TCPP": [[174, 2, 1, "", "cardinality"]], "sage.combinat.plane_partition.PlanePartitions_TSPP": [[174, 2, 1, "", "cardinality"], [174, 2, 1, "", "from_antichain"], [174, 2, 1, "", "from_order_ideal"], [174, 2, 1, "", "to_poset"]], "sage.combinat.plane_partition.PlanePartitions_TSSCPP": [[174, 2, 1, "", "cardinality"], [174, 2, 1, "", "from_antichain"], [174, 2, 1, "", "from_order_ideal"], [174, 2, 1, "", "to_poset"]], "sage.combinat.plane_partition.PlanePartitions_all": [[174, 2, 1, "", "an_element"]], "sage.combinat.plane_partition.PlanePartitions_box": [[174, 2, 1, "", "cardinality"], [174, 2, 1, "", "from_antichain"], [174, 2, 1, "", "from_order_ideal"], [174, 2, 1, "", "random_element"], [174, 2, 1, "", "to_poset"]], "sage.combinat.plane_partition.PlanePartitions_n": [[174, 2, 1, "", "cardinality"]], "sage.combinat.posets": [[175, 0, 0, "-", "all"], [176, 0, 0, "-", "cartesian_product"], [177, 0, 0, "-", "d_complete"], [178, 0, 0, "-", "elements"], [179, 0, 0, "-", "forest"], [180, 0, 0, "-", "hasse_diagram"], [181, 0, 0, "-", "incidence_algebras"], [182, 0, 0, "-", "lattices"], [183, 0, 0, "-", "linear_extensions"], [184, 0, 0, "-", "mobile"], [185, 0, 0, "-", "moebius_algebra"], [186, 0, 0, "-", "poset_examples"], [187, 0, 0, "-", "posets"]], "sage.combinat.posets.cartesian_product": [[176, 1, 1, "", "CartesianProductPoset"]], "sage.combinat.posets.cartesian_product.CartesianProductPoset": [[176, 1, 1, "", "Element"], [176, 2, 1, "", "le"], [176, 2, 1, "", "le_lex"], [176, 2, 1, "", "le_native"], [176, 2, 1, "", "le_product"]], "sage.combinat.posets.d_complete": [[177, 1, 1, "", "DCompletePoset"]], "sage.combinat.posets.d_complete.DCompletePoset": [[177, 2, 1, "", "get_hook"], [177, 2, 1, "", "get_hooks"], [177, 2, 1, "", "hook_product"]], "sage.combinat.posets.elements": [[178, 1, 1, "", "JoinSemilatticeElement"], [178, 1, 1, "", "LatticePosetElement"], [178, 1, 1, "", "MeetSemilatticeElement"], [178, 1, 1, "", "PosetElement"]], "sage.combinat.posets.forest": [[179, 1, 1, "", "ForestPoset"]], "sage.combinat.posets.hasse_diagram": [[180, 1, 1, "", "HasseDiagram"], [180, 7, 1, "", "LatticeError"]], "sage.combinat.posets.hasse_diagram.HasseDiagram": [[180, 2, 1, "", "antichains"], [180, 2, 1, "", "antichains_iterator"], [180, 2, 1, "", "are_comparable"], [180, 2, 1, "", "are_incomparable"], [180, 2, 1, "", "atoms_of_congruence_lattice"], [180, 2, 1, "", "bottom"], [180, 2, 1, "", "bottom_moebius_function"], [180, 2, 1, "", "cardinality"], [180, 2, 1, "", "chains"], [180, 2, 1, "", "closed_interval"], [180, 2, 1, "", "common_lower_covers"], [180, 2, 1, "", "common_upper_covers"], [180, 2, 1, "", "congruence"], [180, 2, 1, "", "congruences_iterator"], [180, 2, 1, "", "cover_relations"], [180, 2, 1, "", "cover_relations_iterator"], [180, 2, 1, "", "covers"], [180, 2, 1, "", "coxeter_transformation"], [180, 2, 1, "", "diamonds"], [180, 2, 1, "", "dual"], [180, 2, 1, "", "find_nonsemidistributive_elements"], [180, 2, 1, "", "find_nonsemimodular_pair"], [180, 2, 1, "", "find_nontrivial_congruence"], [180, 2, 1, "", "frattini_sublattice"], [180, 2, 1, "", "greedy_linear_extensions_iterator"], [180, 2, 1, "", "has_bottom"], [180, 2, 1, "", "has_top"], [180, 2, 1, "", "interval"], [180, 2, 1, "", "interval_iterator"], [180, 2, 1, "", "is_antichain_of_poset"], [180, 2, 1, "", "is_bounded"], [180, 2, 1, "", "is_chain"], [180, 2, 1, "", "is_complemented"], [180, 2, 1, "", "is_congruence_normal"], [180, 2, 1, "", "is_convex_subset"], [180, 2, 1, "", "is_gequal"], [180, 2, 1, "", "is_greater_than"], [180, 2, 1, "", "is_join_semilattice"], [180, 2, 1, "", "is_lequal"], [180, 2, 1, "", "is_less_than"], [180, 2, 1, "", "is_linear_extension"], [180, 2, 1, "", "is_linear_interval"], [180, 2, 1, "", "is_meet_semilattice"], [180, 2, 1, "", "is_ranked"], [180, 2, 1, "", "join_matrix"], [180, 2, 1, "", "kappa"], [180, 2, 1, "", "kappa_dual"], [180, 2, 1, "", "lequal_matrix"], [180, 2, 1, "", "linear_extension"], [180, 2, 1, "", "linear_extensions"], [180, 2, 1, "", "lower_covers_iterator"], [180, 2, 1, "", "maximal_elements"], [180, 2, 1, "", "maximal_sublattices"], [180, 2, 1, "", "meet_matrix"], [180, 2, 1, "", "minimal_elements"], [180, 2, 1, "", "moebius_function"], [180, 2, 1, "", "moebius_function_matrix"], [180, 2, 1, "", "neutral_elements"], [180, 2, 1, "", "open_interval"], [180, 2, 1, "", "order_filter"], [180, 2, 1, "", "order_ideal"], [180, 2, 1, "", "order_ideal_cardinality"], [180, 2, 1, "", "orthocomplementations_iterator"], [180, 2, 1, "", "prime_elements"], [180, 2, 1, "", "principal_congruences_poset"], [180, 2, 1, "", "principal_order_filter"], [180, 2, 1, "", "principal_order_ideal"], [180, 2, 1, "", "pseudocomplement"], [180, 2, 1, "", "rank"], [180, 2, 1, "", "rank_function"], [180, 2, 1, "", "skeleton"], [180, 2, 1, "", "sublattices_iterator"], [180, 2, 1, "", "supergreedy_linear_extensions_iterator"], [180, 2, 1, "", "top"], [180, 2, 1, "", "upper_covers_iterator"], [180, 2, 1, "", "vertical_decomposition"]], "sage.combinat.posets.incidence_algebras": [[181, 1, 1, "", "IncidenceAlgebra"], [181, 1, 1, "", "ReducedIncidenceAlgebra"]], "sage.combinat.posets.incidence_algebras.IncidenceAlgebra": [[181, 1, 1, "", "Element"], [181, 2, 1, "", "delta"], [181, 2, 1, "", "moebius"], [181, 2, 1, "", "one"], [181, 2, 1, "", "poset"], [181, 2, 1, "", "product_on_basis"], [181, 2, 1, "", "reduced_subalgebra"], [181, 2, 1, "", "some_elements"], [181, 2, 1, "", "zeta"]], "sage.combinat.posets.incidence_algebras.IncidenceAlgebra.Element": [[181, 2, 1, "", "is_unit"], [181, 2, 1, "", "to_matrix"]], "sage.combinat.posets.incidence_algebras.ReducedIncidenceAlgebra": [[181, 1, 1, "", "Element"], [181, 2, 1, "", "delta"], [181, 2, 1, "", "lift"], [181, 2, 1, "", "moebius"], [181, 2, 1, "", "one_basis"], [181, 2, 1, "", "poset"], [181, 2, 1, "", "some_elements"], [181, 2, 1, "", "zeta"]], "sage.combinat.posets.incidence_algebras.ReducedIncidenceAlgebra.Element": [[181, 2, 1, "", "is_unit"], [181, 2, 1, "", "lift"], [181, 2, 1, "", "to_matrix"]], "sage.combinat.posets.lattices": [[182, 1, 1, "", "FiniteJoinSemilattice"], [182, 1, 1, "", "FiniteLatticePoset"], [182, 1, 1, "", "FiniteMeetSemilattice"], [182, 3, 1, "", "JoinSemilattice"], [182, 3, 1, "", "LatticePoset"], [182, 3, 1, "", "MeetSemilattice"]], "sage.combinat.posets.lattices.FiniteJoinSemilattice": [[182, 4, 1, "", "Element"], [182, 2, 1, "", "coatoms"], [182, 2, 1, "", "join"], [182, 2, 1, "", "join_matrix"]], "sage.combinat.posets.lattices.FiniteLatticePoset": [[182, 4, 1, "", "Element"], [182, 2, 1, "", "adjunct"], [182, 2, 1, "", "breadth"], [182, 2, 1, "", "canonical_joinands"], [182, 2, 1, "", "canonical_meetands"], [182, 2, 1, "", "center"], [182, 2, 1, "", "complements"], [182, 2, 1, "", "congruence"], [182, 2, 1, "", "congruences_lattice"], [182, 2, 1, "", "day_doubling"], [182, 2, 1, "", "double_irreducibles"], [182, 2, 1, "", "feichtner_yuzvinsky_ring"], [182, 2, 1, "", "frattini_sublattice"], [182, 2, 1, "", "is_atomic"], [182, 2, 1, "", "is_coatomic"], [182, 2, 1, "", "is_complemented"], [182, 2, 1, "", "is_constructible_by_doublings"], [182, 2, 1, "", "is_cosectionally_complemented"], [182, 2, 1, "", "is_dismantlable"], [182, 2, 1, "", "is_distributive"], [182, 2, 1, "", "is_extremal"], [182, 2, 1, "", "is_geometric"], [182, 2, 1, "", "is_interval_dismantlable"], [182, 2, 1, "", "is_isoform"], [182, 2, 1, "", "is_join_distributive"], [182, 2, 1, "", "is_join_pseudocomplemented"], [182, 2, 1, "", "is_join_semidistributive"], [182, 2, 1, "", "is_left_modular_element"], [182, 2, 1, "", "is_lower_semimodular"], [182, 2, 1, "", "is_meet_distributive"], [182, 2, 1, "", "is_meet_semidistributive"], [182, 2, 1, "", "is_modular"], [182, 2, 1, "", "is_modular_element"], [182, 2, 1, "", "is_orthocomplemented"], [182, 2, 1, "", "is_planar"], [182, 2, 1, "", "is_pseudocomplemented"], [182, 2, 1, "", "is_regular"], [182, 2, 1, "", "is_relatively_complemented"], [182, 2, 1, "", "is_sectionally_complemented"], [182, 2, 1, "", "is_semidistributive"], [182, 2, 1, "", "is_simple"], [182, 2, 1, "", "is_stone"], [182, 2, 1, "", "is_subdirectly_reducible"], [182, 2, 1, "", "is_sublattice"], [182, 2, 1, "", "is_sublattice_dismantlable"], [182, 2, 1, "", "is_supersolvable"], [182, 2, 1, "", "is_trim"], [182, 2, 1, "", "is_uniform"], [182, 2, 1, "", "is_upper_semimodular"], [182, 2, 1, "", "is_vertically_decomposable"], [182, 2, 1, "", "isomorphic_sublattices_iterator"], [182, 2, 1, "", "join_primes"], [182, 2, 1, "", "maximal_sublattices"], [182, 2, 1, "", "meet_primes"], [182, 2, 1, "", "moebius_algebra"], [182, 2, 1, "", "neutral_elements"], [182, 2, 1, "", "quantum_moebius_algebra"], [182, 2, 1, "", "quotient"], [182, 2, 1, "", "skeleton"], [182, 2, 1, "", "subdirect_decomposition"], [182, 2, 1, "", "sublattice"], [182, 2, 1, "", "sublattices"], [182, 2, 1, "", "sublattices_lattice"], [182, 2, 1, "", "vertical_composition"], [182, 2, 1, "", "vertical_decomposition"]], "sage.combinat.posets.lattices.FiniteMeetSemilattice": [[182, 4, 1, "", "Element"], [182, 2, 1, "", "atoms"], [182, 2, 1, "", "meet"], [182, 2, 1, "", "meet_matrix"], [182, 2, 1, "", "pseudocomplement"], [182, 2, 1, "", "subjoinsemilattice"], [182, 2, 1, "", "submeetsemilattice"]], "sage.combinat.posets.linear_extensions": [[183, 1, 1, "", "LinearExtensionOfPoset"], [183, 1, 1, "", "LinearExtensionsOfForest"], [183, 1, 1, "", "LinearExtensionsOfMobile"], [183, 1, 1, "", "LinearExtensionsOfPoset"], [183, 1, 1, "", "LinearExtensionsOfPosetWithHooks"]], "sage.combinat.posets.linear_extensions.LinearExtensionOfPoset": [[183, 2, 1, "", "check"], [183, 2, 1, "", "evacuation"], [183, 2, 1, "", "is_greedy"], [183, 2, 1, "", "is_supergreedy"], [183, 2, 1, "", "jump_count"], [183, 2, 1, "", "poset"], [183, 2, 1, "", "promotion"], [183, 2, 1, "", "tau"], [183, 2, 1, "", "to_poset"]], "sage.combinat.posets.linear_extensions.LinearExtensionsOfForest": [[183, 2, 1, "", "cardinality"]], "sage.combinat.posets.linear_extensions.LinearExtensionsOfMobile": [[183, 2, 1, "", "cardinality"]], "sage.combinat.posets.linear_extensions.LinearExtensionsOfPoset": [[183, 4, 1, "", "Element"], [183, 2, 1, "", "cardinality"], [183, 2, 1, "", "markov_chain_digraph"], [183, 2, 1, "", "markov_chain_transition_matrix"], [183, 2, 1, "", "poset"]], "sage.combinat.posets.linear_extensions.LinearExtensionsOfPosetWithHooks": [[183, 2, 1, "", "cardinality"]], "sage.combinat.posets.mobile": [[184, 1, 1, "", "MobilePoset"]], "sage.combinat.posets.mobile.MobilePoset": [[184, 2, 1, "", "anchor"], [184, 2, 1, "", "ribbon"]], "sage.combinat.posets.moebius_algebra": [[185, 1, 1, "", "BasisAbstract"], [185, 1, 1, "", "MoebiusAlgebra"], [185, 1, 1, "", "MoebiusAlgebraBases"], [185, 1, 1, "", "QuantumMoebiusAlgebra"]], "sage.combinat.posets.moebius_algebra.MoebiusAlgebra": [[185, 1, 1, "", "E"], [185, 1, 1, "", "I"], [185, 2, 1, "", "a_realization"], [185, 4, 1, "", "idempotent"], [185, 2, 1, "", "lattice"], [185, 4, 1, "", "natural"]], "sage.combinat.posets.moebius_algebra.MoebiusAlgebra.E": [[185, 2, 1, "", "one"], [185, 2, 1, "", "product_on_basis"]], "sage.combinat.posets.moebius_algebra.MoebiusAlgebra.I": [[185, 2, 1, "", "one"], [185, 2, 1, "", "product_on_basis"]], "sage.combinat.posets.moebius_algebra.MoebiusAlgebraBases": [[185, 1, 1, "", "ElementMethods"], [185, 1, 1, "", "ParentMethods"], [185, 2, 1, "", "super_categories"]], "sage.combinat.posets.moebius_algebra.MoebiusAlgebraBases.ParentMethods": [[185, 2, 1, "", "one"], [185, 2, 1, "", "product_on_basis"]], "sage.combinat.posets.moebius_algebra.QuantumMoebiusAlgebra": [[185, 1, 1, "", "C"], [185, 1, 1, "", "E"], [185, 1, 1, "", "KL"], [185, 2, 1, "", "a_realization"], [185, 4, 1, "", "characteristic_basis"], [185, 4, 1, "", "kazhdan_lusztig"], [185, 2, 1, "", "lattice"], [185, 4, 1, "", "natural"]], "sage.combinat.posets.moebius_algebra.QuantumMoebiusAlgebra.E": [[185, 2, 1, "", "one"], [185, 2, 1, "", "product_on_basis"]], "sage.combinat.posets.poset_examples": [[186, 1, 1, "", "Posets"], [186, 3, 1, "", "check_int"], [186, 4, 1, "", "posets"]], "sage.combinat.posets.poset_examples.Posets": [[186, 2, 1, "", "AntichainPoset"], [186, 2, 1, "", "BooleanLattice"], [186, 2, 1, "", "ChainPoset"], [186, 2, 1, "", "CoxeterGroupAbsoluteOrderPoset"], [186, 2, 1, "", "Crown"], [186, 2, 1, "", "DexterSemilattice"], [186, 2, 1, "", "DiamondPoset"], [186, 2, 1, "", "DivisorLattice"], [186, 2, 1, "", "DoubleTailedDiamond"], [186, 2, 1, "", "IntegerCompositions"], [186, 2, 1, "", "IntegerPartitions"], [186, 2, 1, "", "IntegerPartitionsDominanceOrder"], [186, 2, 1, "", "MobilePoset"], [186, 2, 1, "", "NoncrossingPartitions"], [186, 2, 1, "", "PentagonPoset"], [186, 2, 1, "", "PermutationPattern"], [186, 2, 1, "", "PermutationPatternInterval"], [186, 2, 1, "", "PermutationPatternOccurrenceInterval"], [186, 2, 1, "", "PowerPoset"], [186, 2, 1, "", "ProductOfChains"], [186, 2, 1, "", "RandomLattice"], [186, 2, 1, "", "RandomPoset"], [186, 2, 1, "", "RestrictedIntegerPartitions"], [186, 2, 1, "", "RibbonPoset"], [186, 2, 1, "", "SSTPoset"], [186, 2, 1, "", "SetPartitions"], [186, 2, 1, "", "ShardPoset"], [186, 2, 1, "", "StandardExample"], [186, 2, 1, "", "SymmetricGroupAbsoluteOrderPoset"], [186, 2, 1, "", "SymmetricGroupBruhatIntervalPoset"], [186, 2, 1, "", "SymmetricGroupBruhatOrderPoset"], [186, 2, 1, "", "SymmetricGroupWeakOrderPoset"], [186, 2, 1, "", "TamariLattice"], [186, 2, 1, "", "TetrahedralPoset"], [186, 2, 1, "", "UpDownPoset"], [186, 2, 1, "", "YoungDiagramPoset"], [186, 2, 1, "", "YoungFibonacci"], [186, 2, 1, "", "YoungsLattice"], [186, 2, 1, "", "YoungsLatticePrincipalOrderIdeal"], [186, 4, 1, "", "sage"]], "sage.combinat.posets.posets": [[187, 1, 1, "", "FinitePoset"], [187, 1, 1, "", "FinitePosets_n"], [187, 3, 1, "", "Poset"], [187, 3, 1, "", "is_poset"]], "sage.combinat.posets.posets.FinitePoset": [[187, 4, 1, "", "Element"], [187, 2, 1, "", "M_triangle"], [187, 2, 1, "", "antichains"], [187, 2, 1, "", "antichains_iterator"], [187, 2, 1, "", "atkinson"], [187, 2, 1, "", "bottom"], [187, 2, 1, "", "canonical_label"], [187, 2, 1, "", "cardinality"], [187, 2, 1, "", "chain_polynomial"], [187, 2, 1, "", "chain_polytope"], [187, 2, 1, "", "chains"], [187, 2, 1, "", "characteristic_polynomial"], [187, 2, 1, "", "closed_interval"], [187, 2, 1, "", "common_lower_covers"], [187, 2, 1, "", "common_upper_covers"], [187, 2, 1, "", "comparability_graph"], [187, 2, 1, "", "compare_elements"], [187, 2, 1, "", "completion_by_cuts"], [187, 2, 1, "", "connected_components"], [187, 2, 1, "", "cover_relations"], [187, 2, 1, "", "cover_relations_graph"], [187, 2, 1, "", "cover_relations_iterator"], [187, 2, 1, "", "covers"], [187, 2, 1, "", "coxeter_polynomial"], [187, 2, 1, "", "coxeter_smith_form"], [187, 2, 1, "", "coxeter_transformation"], [187, 2, 1, "", "cuts"], [187, 2, 1, "", "degree_polynomial"], [187, 2, 1, "", "diamonds"], [187, 2, 1, "", "dilworth_decomposition"], [187, 2, 1, "", "dimension"], [187, 2, 1, "", "disjoint_union"], [187, 2, 1, "", "dual"], [187, 2, 1, "", "evacuation"], [187, 2, 1, "", "f_polynomial"], [187, 2, 1, "", "factor"], [187, 2, 1, "", "flag_f_polynomial"], [187, 2, 1, "", "flag_h_polynomial"], [187, 2, 1, "", "frank_network"], [187, 2, 1, "", "ge"], [187, 2, 1, "", "graphviz_string"], [187, 2, 1, "", "greene_shape"], [187, 2, 1, "", "gt"], [187, 2, 1, "", "h_polynomial"], [187, 2, 1, "", "has_bottom"], [187, 2, 1, "", "has_isomorphic_subposet"], [187, 2, 1, "", "has_top"], [187, 2, 1, "", "hasse_diagram"], [187, 2, 1, "", "height"], [187, 2, 1, "", "incidence_algebra"], [187, 2, 1, "", "incomparability_graph"], [187, 2, 1, "", "interval"], [187, 2, 1, "", "intervals_number"], [187, 2, 1, "", "intervals_poset"], [187, 2, 1, "", "is_EL_labelling"], [187, 2, 1, "", "is_antichain_of_poset"], [187, 2, 1, "", "is_bounded"], [187, 2, 1, "", "is_chain"], [187, 2, 1, "", "is_chain_of_poset"], [187, 2, 1, "", "is_connected"], [187, 2, 1, "", "is_d_complete"], [187, 2, 1, "", "is_eulerian"], [187, 2, 1, "", "is_gequal"], [187, 2, 1, "", "is_graded"], [187, 2, 1, "", "is_greater_than"], [187, 2, 1, "", "is_greedy"], [187, 2, 1, "", "is_incomparable_chain_free"], [187, 2, 1, "", "is_induced_subposet"], [187, 2, 1, "", "is_isomorphic"], [187, 2, 1, "", "is_join_semilattice"], [187, 2, 1, "", "is_jump_critical"], [187, 2, 1, "", "is_lequal"], [187, 2, 1, "", "is_less_than"], [187, 2, 1, "", "is_linear_extension"], [187, 2, 1, "", "is_linear_interval"], [187, 2, 1, "", "is_meet_semilattice"], [187, 2, 1, "", "is_parent_of"], [187, 2, 1, "", "is_rank_symmetric"], [187, 2, 1, "", "is_ranked"], [187, 2, 1, "", "is_series_parallel"], [187, 2, 1, "", "is_slender"], [187, 2, 1, "", "is_sperner"], [187, 2, 1, "", "isomorphic_subposets"], [187, 2, 1, "", "isomorphic_subposets_iterator"], [187, 2, 1, "", "join"], [187, 2, 1, "", "jump_number"], [187, 2, 1, "", "kazhdan_lusztig_polynomial"], [187, 2, 1, "", "le"], [187, 2, 1, "", "lequal_matrix"], [187, 2, 1, "", "level_sets"], [187, 2, 1, "", "lexicographic_sum"], [187, 2, 1, "", "linear_extension"], [187, 2, 1, "", "linear_extensions"], [187, 2, 1, "", "linear_extensions_graph"], [187, 2, 1, "", "linear_intervals_count"], [187, 2, 1, "", "list"], [187, 2, 1, "", "lower_covers"], [187, 2, 1, "", "lower_covers_iterator"], [187, 2, 1, "", "lt"], [187, 2, 1, "", "magnitude"], [187, 2, 1, "", "maximal_antichains"], [187, 2, 1, "", "maximal_chain_length"], [187, 2, 1, "", "maximal_chains"], [187, 2, 1, "", "maximal_chains_iterator"], [187, 2, 1, "", "maximal_elements"], [187, 2, 1, "", "meet"], [187, 2, 1, "", "minimal_elements"], [187, 2, 1, "", "moebius_function"], [187, 2, 1, "", "moebius_function_matrix"], [187, 2, 1, "", "open_interval"], [187, 2, 1, "", "order_complex"], [187, 2, 1, "", "order_filter"], [187, 2, 1, "", "order_ideal"], [187, 2, 1, "", "order_ideal_cardinality"], [187, 2, 1, "", "order_ideal_plot"], [187, 2, 1, "", "order_polynomial"], [187, 2, 1, "", "order_polytope"], [187, 2, 1, "", "ordinal_product"], [187, 2, 1, "", "ordinal_sum"], [187, 2, 1, "", "ordinal_summands"], [187, 2, 1, "", "p_partition_enumerator"], [187, 2, 1, "", "plot"], [187, 2, 1, "", "product"], [187, 2, 1, "", "promotion"], [187, 2, 1, "", "random_linear_extension"], [187, 2, 1, "", "random_maximal_antichain"], [187, 2, 1, "", "random_maximal_chain"], [187, 2, 1, "", "random_order_ideal"], [187, 2, 1, "", "random_subposet"], [187, 2, 1, "", "rank"], [187, 2, 1, "", "rank_function"], [187, 2, 1, "", "rees_product"], [187, 2, 1, "", "relabel"], [187, 2, 1, "", "relations"], [187, 2, 1, "", "relations_iterator"], [187, 2, 1, "", "relations_number"], [187, 2, 1, "", "show"], [187, 2, 1, "", "slant_sum"], [187, 2, 1, "", "sorted"], [187, 2, 1, "", "spectrum"], [187, 2, 1, "", "star_product"], [187, 2, 1, "", "subposet"], [187, 2, 1, "", "top"], [187, 2, 1, "", "unwrap"], [187, 2, 1, "", "upper_covers"], [187, 2, 1, "", "upper_covers_iterator"], [187, 2, 1, "", "width"], [187, 2, 1, "", "with_bounds"], [187, 2, 1, "", "with_linear_extension"], [187, 2, 1, "", "without_bounds"], [187, 2, 1, "", "zeta_polynomial"]], "sage.combinat.posets.posets.FinitePosets_n": [[187, 2, 1, "", "cardinality"]], "sage.combinat.q_analogues": [[188, 3, 1, "", "gaussian_binomial"], [188, 3, 1, "", "gaussian_multinomial"], [188, 3, 1, "", "q_binomial"], [188, 3, 1, "", "q_catalan_number"], [188, 3, 1, "", "q_factorial"], [188, 3, 1, "", "q_int"], [188, 3, 1, "", "q_jordan"], [188, 3, 1, "", "q_multinomial"], [188, 3, 1, "", "q_pochhammer"], [188, 3, 1, "", "q_stirling_number1"], [188, 3, 1, "", "q_stirling_number2"], [188, 3, 1, "", "q_subgroups_of_abelian_group"], [188, 3, 1, "", "qt_catalan_number"]], "sage.combinat.q_bernoulli": [[189, 3, 1, "", "q_bernoulli"], [189, 3, 1, "", "q_bernoulli_polynomial"]], "sage.combinat.ranker": [[191, 3, 1, "", "from_list"], [191, 3, 1, "", "on_fly"], [191, 3, 1, "", "rank_from_list"], [191, 3, 1, "", "unrank"], [191, 3, 1, "", "unrank_from_list"]], "sage.combinat.recognizable_series": [[192, 1, 1, "", "PrefixClosedSet"], [192, 1, 1, "", "RecognizableSeries"], [192, 1, 1, "", "RecognizableSeriesSpace"], [192, 3, 1, "", "minimize_result"]], "sage.combinat.recognizable_series.PrefixClosedSet": [[192, 2, 1, "", "add"], [192, 2, 1, "", "create_by_alphabet"], [192, 2, 1, "", "iterate_possible_additions"], [192, 2, 1, "", "prefix_set"]], "sage.combinat.recognizable_series.RecognizableSeries": [[192, 2, 1, "", "coefficient_of_word"], [192, 2, 1, "", "dimension"], [192, 2, 1, "", "hadamard_product"], [192, 2, 1, "", "is_trivial_zero"], [192, 5, 1, "", "left"], [192, 2, 1, "", "linear_representation"], [192, 2, 1, "", "minimized"], [192, 5, 1, "", "mu"], [192, 5, 1, "", "right"], [192, 2, 1, "", "transposed"]], "sage.combinat.recognizable_series.RecognizableSeriesSpace": [[192, 4, 1, "", "Element"], [192, 2, 1, "", "alphabet"], [192, 2, 1, "", "coefficient_ring"], [192, 2, 1, "", "indices"], [192, 5, 1, "", "minimize_results"], [192, 2, 1, "", "one"], [192, 2, 1, "", "one_hadamard"], [192, 2, 1, "", "some_elements"]], "sage.combinat.regular_sequence": [[193, 7, 1, "", "DegeneratedSequenceError"], [193, 1, 1, "", "RecurrenceParser"], [193, 1, 1, "", "RegularSequence"], [193, 1, 1, "", "RegularSequenceRing"], [193, 3, 1, "", "pad_right"], [193, 3, 1, "", "value"]], "sage.combinat.regular_sequence.RecurrenceParser": [[193, 2, 1, "", "ind"], [193, 2, 1, "", "left"], [193, 2, 1, "", "matrix"], [193, 2, 1, "", "parameters"], [193, 2, 1, "", "parse_direct_arguments"], [193, 2, 1, "", "parse_recurrence"], [193, 2, 1, "", "right"], [193, 2, 1, "", "shifted_inhomogeneities"], [193, 2, 1, "", "v_eval_n"], [193, 2, 1, "", "values"]], "sage.combinat.regular_sequence.RegularSequence": [[193, 2, 1, "", "backward_differences"], [193, 2, 1, "", "coefficient_of_n"], [193, 2, 1, "", "convolution"], [193, 2, 1, "", "forward_differences"], [193, 2, 1, "", "is_degenerated"], [193, 2, 1, "", "partial_sums"], [193, 2, 1, "", "regenerated"], [193, 2, 1, "", "shift_left"], [193, 2, 1, "", "shift_right"], [193, 2, 1, "", "subsequence"], [193, 2, 1, "", "transposed"]], "sage.combinat.regular_sequence.RegularSequenceRing": [[193, 4, 1, "", "Element"], [193, 2, 1, "", "from_recurrence"], [193, 2, 1, "", "guess"], [193, 2, 1, "", "one"], [193, 2, 1, "", "some_elements"]], "sage.combinat.restricted_growth": [[194, 1, 1, "", "RestrictedGrowthArrays"]], "sage.combinat.restricted_growth.RestrictedGrowthArrays": [[194, 2, 1, "", "cardinality"]], "sage.combinat.ribbon_shaped_tableau": [[196, 1, 1, "", "RibbonShapedTableau"], [196, 1, 1, "", "RibbonShapedTableaux"], [196, 1, 1, "", "Ribbon_class"], [196, 1, 1, "", "StandardRibbonShapedTableaux"], [196, 1, 1, "", "StandardRibbonShapedTableaux_shape"]], "sage.combinat.ribbon_shaped_tableau.RibbonShapedTableau": [[196, 2, 1, "", "height"], [196, 2, 1, "", "spin"], [196, 2, 1, "", "width"]], "sage.combinat.ribbon_shaped_tableau.RibbonShapedTableaux": [[196, 4, 1, "", "Element"], [196, 2, 1, "", "from_shape_and_word"], [196, 4, 1, "", "options"]], "sage.combinat.ribbon_shaped_tableau.StandardRibbonShapedTableaux": [[196, 4, 1, "", "Element"], [196, 2, 1, "", "from_permutation"], [196, 2, 1, "", "from_shape_and_word"], [196, 4, 1, "", "options"]], "sage.combinat.ribbon_shaped_tableau.StandardRibbonShapedTableaux_shape": [[196, 2, 1, "", "first"], [196, 2, 1, "", "last"]], "sage.combinat.ribbon_tableau": [[197, 1, 1, "", "MultiSkewTableau"], [197, 1, 1, "", "MultiSkewTableaux"], [197, 1, 1, "", "RibbonTableau"], [197, 1, 1, "", "RibbonTableau_class"], [197, 1, 1, "", "RibbonTableaux"], [197, 1, 1, "", "RibbonTableaux_shape_weight_length"], [197, 1, 1, "", "SemistandardMultiSkewTableaux"], [197, 3, 1, "", "cospin_polynomial"], [197, 3, 1, "", "count_rec"], [197, 3, 1, "", "graph_implementation_rec"], [197, 3, 1, "", "insertion_tableau"], [197, 3, 1, "", "list_rec"], [197, 3, 1, "", "spin_polynomial"], [197, 3, 1, "", "spin_polynomial_square"], [197, 3, 1, "", "spin_rec"]], "sage.combinat.ribbon_tableau.MultiSkewTableau": [[197, 2, 1, "", "inversion_pairs"], [197, 2, 1, "", "inversions"], [197, 2, 1, "", "shape"], [197, 2, 1, "", "size"], [197, 2, 1, "", "weight"]], "sage.combinat.ribbon_tableau.MultiSkewTableaux": [[197, 4, 1, "", "Element"]], "sage.combinat.ribbon_tableau.RibbonTableau": [[197, 2, 1, "", "length"], [197, 2, 1, "", "to_word"]], "sage.combinat.ribbon_tableau.RibbonTableaux": [[197, 4, 1, "", "Element"], [197, 2, 1, "", "from_expr"], [197, 4, 1, "", "options"]], "sage.combinat.ribbon_tableau.RibbonTableaux_shape_weight_length": [[197, 2, 1, "", "cardinality"]], "sage.combinat.rigged_configurations": [[198, 0, 0, "-", "all"], [199, 0, 0, "-", "bij_abstract_class"], [200, 0, 0, "-", "bij_infinity"], [201, 0, 0, "-", "bij_type_A"], [202, 0, 0, "-", "bij_type_A2_dual"], [203, 0, 0, "-", "bij_type_A2_even"], [204, 0, 0, "-", "bij_type_A2_odd"], [205, 0, 0, "-", "bij_type_B"], [206, 0, 0, "-", "bij_type_C"], [207, 0, 0, "-", "bij_type_D"], [208, 0, 0, "-", "bij_type_D_tri"], [209, 0, 0, "-", "bij_type_D_twisted"], [210, 0, 0, "-", "bijection"], [211, 0, 0, "-", "kleber_tree"], [212, 0, 0, "-", "kr_tableaux"], [213, 0, 0, "-", "rc_crystal"], [214, 0, 0, "-", "rc_infinity"], [215, 0, 0, "-", "rigged_configuration_element"], [216, 0, 0, "-", "rigged_configurations"], [217, 0, 0, "-", "rigged_partition"], [218, 0, 0, "-", "tensor_product_kr_tableaux"], [219, 0, 0, "-", "tensor_product_kr_tableaux_element"]], "sage.combinat.rigged_configurations.bij_abstract_class": [[199, 1, 1, "", "KRTToRCBijectionAbstract"], [199, 1, 1, "", "RCToKRTBijectionAbstract"]], "sage.combinat.rigged_configurations.bij_abstract_class.KRTToRCBijectionAbstract": [[199, 2, 1, "", "next_state"], [199, 2, 1, "", "run"]], "sage.combinat.rigged_configurations.bij_abstract_class.RCToKRTBijectionAbstract": [[199, 2, 1, "", "next_state"], [199, 2, 1, "", "run"]], "sage.combinat.rigged_configurations.bij_infinity": [[200, 1, 1, "", "FromRCIsomorphism"], [200, 1, 1, "", "FromTableauIsomorphism"], [200, 1, 1, "", "MLTToRCBijectionTypeB"], [200, 1, 1, "", "MLTToRCBijectionTypeD"], [200, 1, 1, "", "RCToMLTBijectionTypeB"], [200, 1, 1, "", "RCToMLTBijectionTypeD"]], "sage.combinat.rigged_configurations.bij_infinity.MLTToRCBijectionTypeB": [[200, 2, 1, "", "run"]], "sage.combinat.rigged_configurations.bij_infinity.MLTToRCBijectionTypeD": [[200, 2, 1, "", "run"]], "sage.combinat.rigged_configurations.bij_infinity.RCToMLTBijectionTypeB": [[200, 2, 1, "", "run"]], "sage.combinat.rigged_configurations.bij_infinity.RCToMLTBijectionTypeD": [[200, 2, 1, "", "run"]], "sage.combinat.rigged_configurations.bij_type_A": [[201, 1, 1, "", "KRTToRCBijectionTypeA"], [201, 1, 1, "", "RCToKRTBijectionTypeA"]], "sage.combinat.rigged_configurations.bij_type_A.KRTToRCBijectionTypeA": [[201, 2, 1, "", "next_state"]], "sage.combinat.rigged_configurations.bij_type_A.RCToKRTBijectionTypeA": [[201, 2, 1, "", "next_state"]], "sage.combinat.rigged_configurations.bij_type_A2_dual": [[202, 1, 1, "", "KRTToRCBijectionTypeA2Dual"], [202, 1, 1, "", "RCToKRTBijectionTypeA2Dual"]], "sage.combinat.rigged_configurations.bij_type_A2_dual.KRTToRCBijectionTypeA2Dual": [[202, 2, 1, "", "next_state"]], "sage.combinat.rigged_configurations.bij_type_A2_dual.RCToKRTBijectionTypeA2Dual": [[202, 2, 1, "", "next_state"]], "sage.combinat.rigged_configurations.bij_type_A2_even": [[203, 1, 1, "", "KRTToRCBijectionTypeA2Even"], [203, 1, 1, "", "RCToKRTBijectionTypeA2Even"]], "sage.combinat.rigged_configurations.bij_type_A2_even.KRTToRCBijectionTypeA2Even": [[203, 2, 1, "", "next_state"]], "sage.combinat.rigged_configurations.bij_type_A2_even.RCToKRTBijectionTypeA2Even": [[203, 2, 1, "", "next_state"]], "sage.combinat.rigged_configurations.bij_type_A2_odd": [[204, 1, 1, "", "KRTToRCBijectionTypeA2Odd"], [204, 1, 1, "", "RCToKRTBijectionTypeA2Odd"]], "sage.combinat.rigged_configurations.bij_type_A2_odd.KRTToRCBijectionTypeA2Odd": [[204, 2, 1, "", "next_state"]], "sage.combinat.rigged_configurations.bij_type_A2_odd.RCToKRTBijectionTypeA2Odd": [[204, 2, 1, "", "next_state"]], "sage.combinat.rigged_configurations.bij_type_B": [[205, 1, 1, "", "KRTToRCBijectionTypeB"], [205, 1, 1, "", "RCToKRTBijectionTypeB"]], "sage.combinat.rigged_configurations.bij_type_B.KRTToRCBijectionTypeB": [[205, 2, 1, "", "next_state"], [205, 2, 1, "", "other_outcome"], [205, 2, 1, "", "run"]], "sage.combinat.rigged_configurations.bij_type_B.RCToKRTBijectionTypeB": [[205, 2, 1, "", "next_state"], [205, 2, 1, "", "run"]], "sage.combinat.rigged_configurations.bij_type_C": [[206, 1, 1, "", "KRTToRCBijectionTypeC"], [206, 1, 1, "", "RCToKRTBijectionTypeC"]], "sage.combinat.rigged_configurations.bij_type_C.KRTToRCBijectionTypeC": [[206, 2, 1, "", "next_state"]], "sage.combinat.rigged_configurations.bij_type_C.RCToKRTBijectionTypeC": [[206, 2, 1, "", "next_state"]], "sage.combinat.rigged_configurations.bij_type_D": [[207, 1, 1, "", "KRTToRCBijectionTypeD"], [207, 1, 1, "", "RCToKRTBijectionTypeD"]], "sage.combinat.rigged_configurations.bij_type_D.KRTToRCBijectionTypeD": [[207, 2, 1, "", "doubling_map"], [207, 2, 1, "", "halving_map"], [207, 2, 1, "", "next_state"], [207, 2, 1, "", "run"]], "sage.combinat.rigged_configurations.bij_type_D.RCToKRTBijectionTypeD": [[207, 2, 1, "", "doubling_map"], [207, 2, 1, "", "halving_map"], [207, 2, 1, "", "next_state"], [207, 2, 1, "", "run"]], "sage.combinat.rigged_configurations.bij_type_D_tri": [[208, 1, 1, "", "KRTToRCBijectionTypeDTri"], [208, 1, 1, "", "RCToKRTBijectionTypeDTri"]], "sage.combinat.rigged_configurations.bij_type_D_tri.KRTToRCBijectionTypeDTri": [[208, 2, 1, "", "next_state"]], "sage.combinat.rigged_configurations.bij_type_D_tri.RCToKRTBijectionTypeDTri": [[208, 2, 1, "", "next_state"]], "sage.combinat.rigged_configurations.bij_type_D_twisted": [[209, 1, 1, "", "KRTToRCBijectionTypeDTwisted"], [209, 1, 1, "", "RCToKRTBijectionTypeDTwisted"]], "sage.combinat.rigged_configurations.bij_type_D_twisted.KRTToRCBijectionTypeDTwisted": [[209, 2, 1, "", "next_state"], [209, 2, 1, "", "run"]], "sage.combinat.rigged_configurations.bij_type_D_twisted.RCToKRTBijectionTypeDTwisted": [[209, 2, 1, "", "next_state"], [209, 2, 1, "", "run"]], "sage.combinat.rigged_configurations.bijection": [[210, 3, 1, "", "KRTToRCBijection"], [210, 3, 1, "", "RCToKRTBijection"]], "sage.combinat.rigged_configurations.kleber_tree": [[211, 1, 1, "", "KleberTree"], [211, 1, 1, "", "KleberTreeNode"], [211, 1, 1, "", "KleberTreeTypeA2Even"], [211, 1, 1, "", "VirtualKleberTree"]], "sage.combinat.rigged_configurations.kleber_tree.KleberTree": [[211, 4, 1, "", "Element"], [211, 2, 1, "", "breadth_first_iter"], [211, 2, 1, "", "cartan_type"], [211, 2, 1, "", "depth_first_iter"], [211, 2, 1, "", "digraph"], [211, 2, 1, "", "latex_options"], [211, 2, 1, "", "plot"]], "sage.combinat.rigged_configurations.kleber_tree.KleberTreeNode": [[211, 2, 1, "", "depth"], [211, 2, 1, "", "multiplicity"]], "sage.combinat.rigged_configurations.kleber_tree.KleberTreeTypeA2Even": [[211, 2, 1, "", "breadth_first_iter"], [211, 2, 1, "", "depth_first_iter"]], "sage.combinat.rigged_configurations.kleber_tree.VirtualKleberTree": [[211, 2, 1, "", "base_tree"], [211, 2, 1, "", "breadth_first_iter"], [211, 2, 1, "", "depth_first_iter"]], "sage.combinat.rigged_configurations.kr_tableaux": [[212, 1, 1, "", "KRTableauxBn"], [212, 1, 1, "", "KRTableauxDTwistedSpin"], [212, 1, 1, "", "KRTableauxRectangle"], [212, 1, 1, "", "KRTableauxSpin"], [212, 1, 1, "", "KRTableauxSpinElement"], [212, 1, 1, "", "KRTableauxTypeBox"], [212, 1, 1, "", "KRTableauxTypeFromRC"], [212, 1, 1, "", "KRTableauxTypeFromRCElement"], [212, 1, 1, "", "KRTableauxTypeHorizonal"], [212, 1, 1, "", "KRTableauxTypeVertical"], [212, 1, 1, "", "KirillovReshetikhinTableaux"], [212, 1, 1, "", "KirillovReshetikhinTableauxElement"]], "sage.combinat.rigged_configurations.kr_tableaux.KRTableauxBn": [[212, 4, 1, "", "Element"], [212, 2, 1, "", "from_kirillov_reshetikhin_crystal"]], "sage.combinat.rigged_configurations.kr_tableaux.KRTableauxDTwistedSpin": [[212, 4, 1, "", "Element"]], "sage.combinat.rigged_configurations.kr_tableaux.KRTableauxRectangle": [[212, 2, 1, "", "from_kirillov_reshetikhin_crystal"]], "sage.combinat.rigged_configurations.kr_tableaux.KRTableauxSpin": [[212, 4, 1, "", "Element"]], "sage.combinat.rigged_configurations.kr_tableaux.KRTableauxSpinElement": [[212, 2, 1, "", "classical_weight"], [212, 2, 1, "", "e"], [212, 2, 1, "", "epsilon"], [212, 2, 1, "", "f"], [212, 2, 1, "", "left_split"], [212, 2, 1, "", "phi"], [212, 2, 1, "", "to_array"]], "sage.combinat.rigged_configurations.kr_tableaux.KRTableauxTypeFromRC": [[212, 4, 1, "", "Element"], [212, 2, 1, "", "module_generators"]], "sage.combinat.rigged_configurations.kr_tableaux.KRTableauxTypeFromRCElement": [[212, 2, 1, "", "e"], [212, 2, 1, "", "epsilon"], [212, 2, 1, "", "f"], [212, 2, 1, "", "phi"]], "sage.combinat.rigged_configurations.kr_tableaux.KRTableauxTypeHorizonal": [[212, 2, 1, "", "from_kirillov_reshetikhin_crystal"]], "sage.combinat.rigged_configurations.kr_tableaux.KRTableauxTypeVertical": [[212, 2, 1, "", "from_kirillov_reshetikhin_crystal"]], "sage.combinat.rigged_configurations.kr_tableaux.KirillovReshetikhinTableaux": [[212, 4, 1, "", "Element"], [212, 2, 1, "", "classical_decomposition"], [212, 2, 1, "", "from_kirillov_reshetikhin_crystal"], [212, 2, 1, "", "kirillov_reshetikhin_crystal"], [212, 2, 1, "", "module_generator"], [212, 2, 1, "", "r"], [212, 2, 1, "", "s"], [212, 2, 1, "", "tensor"]], "sage.combinat.rigged_configurations.kr_tableaux.KirillovReshetikhinTableauxElement": [[212, 2, 1, "", "classical_weight"], [212, 2, 1, "", "e"], [212, 2, 1, "", "epsilon"], [212, 2, 1, "", "f"], [212, 2, 1, "", "left_split"], [212, 2, 1, "", "phi"], [212, 2, 1, "", "pp"], [212, 2, 1, "", "right_split"], [212, 2, 1, "", "to_array"], [212, 2, 1, "", "to_classical_highest_weight"], [212, 2, 1, "", "to_kirillov_reshetikhin_crystal"], [212, 2, 1, "", "to_tableau"], [212, 2, 1, "", "weight"]], "sage.combinat.rigged_configurations.rc_crystal": [[213, 1, 1, "", "CrystalOfNonSimplyLacedRC"], [213, 1, 1, "", "CrystalOfRiggedConfigurations"]], "sage.combinat.rigged_configurations.rc_crystal.CrystalOfNonSimplyLacedRC": [[213, 4, 1, "", "Element"], [213, 2, 1, "", "from_virtual"], [213, 2, 1, "", "to_virtual"], [213, 2, 1, "", "virtual"]], "sage.combinat.rigged_configurations.rc_crystal.CrystalOfRiggedConfigurations": [[213, 4, 1, "", "Element"], [213, 4, 1, "", "options"], [213, 2, 1, "", "weight_lattice_realization"]], "sage.combinat.rigged_configurations.rc_infinity": [[214, 1, 1, "", "InfinityCrystalOfNonSimplyLacedRC"], [214, 1, 1, "", "InfinityCrystalOfRiggedConfigurations"]], "sage.combinat.rigged_configurations.rc_infinity.InfinityCrystalOfNonSimplyLacedRC": [[214, 1, 1, "", "Element"], [214, 2, 1, "", "from_virtual"], [214, 2, 1, "", "to_virtual"], [214, 2, 1, "", "virtual"]], "sage.combinat.rigged_configurations.rc_infinity.InfinityCrystalOfNonSimplyLacedRC.Element": [[214, 2, 1, "", "weight"]], "sage.combinat.rigged_configurations.rc_infinity.InfinityCrystalOfRiggedConfigurations": [[214, 1, 1, "", "Element"], [214, 4, 1, "", "options"], [214, 2, 1, "", "weight_lattice_realization"]], "sage.combinat.rigged_configurations.rc_infinity.InfinityCrystalOfRiggedConfigurations.Element": [[214, 2, 1, "", "weight"]], "sage.combinat.rigged_configurations.rigged_configuration_element": [[215, 1, 1, "", "KRRCNonSimplyLacedElement"], [215, 1, 1, "", "KRRCSimplyLacedElement"], [215, 1, 1, "", "KRRCTypeA2DualElement"], [215, 1, 1, "", "KRRiggedConfigurationElement"], [215, 1, 1, "", "RCHWNonSimplyLacedElement"], [215, 1, 1, "", "RCHighestWeightElement"], [215, 1, 1, "", "RCNonSimplyLacedElement"], [215, 1, 1, "", "RiggedConfigurationElement"]], "sage.combinat.rigged_configurations.rigged_configuration_element.KRRCNonSimplyLacedElement": [[215, 2, 1, "", "cc"], [215, 2, 1, "", "cocharge"], [215, 2, 1, "", "e"], [215, 2, 1, "", "f"]], "sage.combinat.rigged_configurations.rigged_configuration_element.KRRCSimplyLacedElement": [[215, 2, 1, "", "cc"], [215, 2, 1, "", "charge"], [215, 2, 1, "", "cocharge"]], "sage.combinat.rigged_configurations.rigged_configuration_element.KRRCTypeA2DualElement": [[215, 2, 1, "", "cc"], [215, 2, 1, "", "cocharge"], [215, 2, 1, "", "epsilon"], [215, 2, 1, "", "phi"]], "sage.combinat.rigged_configurations.rigged_configuration_element.KRRiggedConfigurationElement": [[215, 2, 1, "", "check"], [215, 2, 1, "", "classical_weight"], [215, 2, 1, "", "complement_rigging"], [215, 2, 1, "", "delta"], [215, 2, 1, "", "e"], [215, 2, 1, "", "epsilon"], [215, 2, 1, "", "f"], [215, 2, 1, "", "left_box"], [215, 2, 1, "", "left_column_box"], [215, 2, 1, "", "left_split"], [215, 2, 1, "", "phi"], [215, 2, 1, "", "right_column_box"], [215, 2, 1, "", "right_split"], [215, 2, 1, "", "to_tensor_product_of_kirillov_reshetikhin_crystals"], [215, 2, 1, "", "to_tensor_product_of_kirillov_reshetikhin_tableaux"], [215, 2, 1, "", "weight"]], "sage.combinat.rigged_configurations.rigged_configuration_element.RCHWNonSimplyLacedElement": [[215, 2, 1, "", "check"], [215, 2, 1, "", "f"], [215, 2, 1, "", "weight"]], "sage.combinat.rigged_configurations.rigged_configuration_element.RCHighestWeightElement": [[215, 2, 1, "", "check"], [215, 2, 1, "", "f"], [215, 2, 1, "", "weight"]], "sage.combinat.rigged_configurations.rigged_configuration_element.RCNonSimplyLacedElement": [[215, 2, 1, "", "e"], [215, 2, 1, "", "f"], [215, 2, 1, "", "to_virtual_configuration"]], "sage.combinat.rigged_configurations.rigged_configuration_element.RiggedConfigurationElement": [[215, 2, 1, "", "check"], [215, 2, 1, "", "e"], [215, 2, 1, "", "epsilon"], [215, 2, 1, "", "f"], [215, 2, 1, "", "nu"], [215, 2, 1, "", "partition_rigging_lists"], [215, 2, 1, "", "phi"], [215, 2, 1, "", "vacancy_number"]], "sage.combinat.rigged_configurations.rigged_configurations": [[216, 3, 1, "", "KirillovReshetikhinCrystal"], [216, 1, 1, "", "RCNonSimplyLaced"], [216, 1, 1, "", "RCTypeA2Dual"], [216, 1, 1, "", "RCTypeA2Even"], [216, 1, 1, "", "RiggedConfigurations"]], "sage.combinat.rigged_configurations.rigged_configurations.RCNonSimplyLaced": [[216, 4, 1, "", "Element"], [216, 2, 1, "", "from_virtual"], [216, 2, 1, "", "kleber_tree"], [216, 2, 1, "", "module_generators"], [216, 2, 1, "", "to_virtual"], [216, 2, 1, "", "virtual"]], "sage.combinat.rigged_configurations.rigged_configurations.RCTypeA2Dual": [[216, 4, 1, "", "Element"], [216, 2, 1, "", "from_virtual"], [216, 2, 1, "", "module_generators"], [216, 2, 1, "", "to_virtual"]], "sage.combinat.rigged_configurations.rigged_configurations.RCTypeA2Even": [[216, 2, 1, "", "cardinality"], [216, 2, 1, "", "from_virtual"], [216, 2, 1, "", "to_virtual"], [216, 2, 1, "", "virtual"]], "sage.combinat.rigged_configurations.rigged_configurations.RiggedConfigurations": [[216, 4, 1, "", "Element"], [216, 2, 1, "", "classically_highest_weight_vectors"], [216, 2, 1, "", "fermionic_formula"], [216, 2, 1, "", "kleber_tree"], [216, 2, 1, "", "module_generators"], [216, 4, 1, "", "options"], [216, 2, 1, "", "tensor"], [216, 2, 1, "", "tensor_product_of_kirillov_reshetikhin_crystals"], [216, 2, 1, "", "tensor_product_of_kirillov_reshetikhin_tableaux"]], "sage.combinat.rigged_configurations.rigged_partition": [[217, 1, 1, "", "RiggedPartition"], [217, 1, 1, "", "RiggedPartitionTypeB"]], "sage.combinat.rigged_configurations.rigged_partition.RiggedPartition": [[217, 2, 1, "", "get_num_cells_to_column"], [217, 2, 1, "", "insert_cell"], [217, 2, 1, "", "remove_cell"], [217, 4, 1, "", "rigging"], [217, 4, 1, "", "vacancy_numbers"]], "sage.combinat.rigged_configurations.tensor_product_kr_tableaux": [[218, 1, 1, "", "HighestWeightTensorKRT"], [218, 1, 1, "", "TensorProductOfKirillovReshetikhinTableaux"]], "sage.combinat.rigged_configurations.tensor_product_kr_tableaux.HighestWeightTensorKRT": [[218, 2, 1, "", "cardinality"]], "sage.combinat.rigged_configurations.tensor_product_kr_tableaux.TensorProductOfKirillovReshetikhinTableaux": [[218, 4, 1, "", "Element"], [218, 2, 1, "", "rigged_configurations"], [218, 2, 1, "", "tensor"], [218, 2, 1, "", "tensor_product_of_kirillov_reshetikhin_crystals"]], "sage.combinat.rigged_configurations.tensor_product_kr_tableaux_element": [[219, 1, 1, "", "TensorProductOfKirillovReshetikhinTableauxElement"]], "sage.combinat.rigged_configurations.tensor_product_kr_tableaux_element.TensorProductOfKirillovReshetikhinTableauxElement": [[219, 2, 1, "", "classical_weight"], [219, 2, 1, "", "left_split"], [219, 2, 1, "", "lusztig_involution"], [219, 2, 1, "", "pp"], [219, 2, 1, "", "right_split"], [219, 2, 1, "", "to_rigged_configuration"], [219, 2, 1, "", "to_tensor_product_of_kirillov_reshetikhin_crystals"]], "sage.combinat.root_system": [[220, 0, 0, "-", "all"], [221, 0, 0, "-", "ambient_space"], [222, 0, 0, "-", "associahedron"], [223, 0, 0, "-", "braid_move_calculator"], [224, 0, 0, "-", "braid_orbit"], [225, 0, 0, "-", "branching_rules"], [226, 0, 0, "-", "cartan_matrix"], [227, 0, 0, "-", "cartan_type"], [228, 0, 0, "-", "coxeter_group"], [229, 0, 0, "-", "coxeter_matrix"], [230, 0, 0, "-", "coxeter_type"], [231, 0, 0, "-", "dynkin_diagram"], [232, 0, 0, "-", "extended_affine_weyl_group"], [233, 0, 0, "-", "fundamental_group"], [234, 0, 0, "-", "hecke_algebra_representation"], [235, 0, 0, "-", "integrable_representations"], [236, 0, 0, "-", "non_symmetric_macdonald_polynomials"], [237, 0, 0, "-", "pieri_factors"], [238, 0, 0, "-", "plot"], [239, 0, 0, "-", "reflection_group_complex"], [240, 0, 0, "-", "reflection_group_real"], [241, 0, 0, "-", "root_lattice_realization_algebras"], [242, 0, 0, "-", "root_lattice_realizations"], [243, 0, 0, "-", "root_space"], [244, 0, 0, "-", "root_system"], [245, 0, 0, "-", "type_A"], [246, 0, 0, "-", "type_A_affine"], [247, 0, 0, "-", "type_A_infinity"], [248, 0, 0, "-", "type_B"], [249, 0, 0, "-", "type_BC_affine"], [250, 0, 0, "-", "type_B_affine"], [251, 0, 0, "-", "type_C"], [252, 0, 0, "-", "type_C_affine"], [253, 0, 0, "-", "type_D"], [254, 0, 0, "-", "type_D_affine"], [255, 0, 0, "-", "type_E"], [256, 0, 0, "-", "type_E_affine"], [257, 0, 0, "-", "type_F"], [258, 0, 0, "-", "type_F_affine"], [259, 0, 0, "-", "type_G"], [260, 0, 0, "-", "type_G_affine"], [261, 0, 0, "-", "type_H"], [262, 0, 0, "-", "type_I"], [263, 0, 0, "-", "type_Q"], [264, 0, 0, "-", "type_affine"], [265, 0, 0, "-", "type_dual"], [266, 0, 0, "-", "type_folded"], [267, 0, 0, "-", "type_marked"], [268, 0, 0, "-", "type_reducible"], [269, 0, 0, "-", "type_relabel"], [270, 0, 0, "-", "type_super_A"], [271, 0, 0, "-", "weight_lattice_realizations"], [272, 0, 0, "-", "weight_space"], [273, 0, 0, "-", "weyl_characters"], [274, 0, 0, "-", "weyl_group"]], "sage.combinat.root_system.ambient_space": [[221, 1, 1, "", "AmbientSpace"], [221, 1, 1, "", "AmbientSpaceElement"]], "sage.combinat.root_system.ambient_space.AmbientSpace": [[221, 4, 1, "", "Element"], [221, 2, 1, "", "coroot_lattice"], [221, 2, 1, "", "dimension"], [221, 2, 1, "", "from_vector_notation"], [221, 2, 1, "", "fundamental_weight"], [221, 2, 1, "", "reflection"], [221, 2, 1, "", "simple_coroot"], [221, 2, 1, "", "smallest_base_ring"], [221, 2, 1, "", "to_ambient_space_morphism"]], "sage.combinat.root_system.ambient_space.AmbientSpaceElement": [[221, 2, 1, "", "associated_coroot"], [221, 2, 1, "", "coerce_to_e6"], [221, 2, 1, "", "coerce_to_e7"], [221, 2, 1, "", "coerce_to_sl"], [221, 2, 1, "", "dot_product"], [221, 2, 1, "", "inner_product"], [221, 2, 1, "", "is_positive_root"], [221, 2, 1, "", "scalar"], [221, 2, 1, "", "to_ambient"]], "sage.combinat.root_system.associahedron": [[222, 3, 1, "", "Associahedra"], [222, 1, 1, "", "Associahedra_base"], [222, 1, 1, "", "Associahedra_cdd"], [222, 1, 1, "", "Associahedra_field"], [222, 1, 1, "", "Associahedra_normaliz"], [222, 1, 1, "", "Associahedra_polymake"], [222, 1, 1, "", "Associahedra_ppl"], [222, 3, 1, "", "Associahedron"], [222, 1, 1, "", "Associahedron_class_base"], [222, 1, 1, "", "Associahedron_class_cdd"], [222, 1, 1, "", "Associahedron_class_field"], [222, 1, 1, "", "Associahedron_class_normaliz"], [222, 1, 1, "", "Associahedron_class_polymake"], [222, 1, 1, "", "Associahedron_class_ppl"]], "sage.combinat.root_system.associahedron.Associahedra_cdd": [[222, 4, 1, "", "Element"]], "sage.combinat.root_system.associahedron.Associahedra_field": [[222, 4, 1, "", "Element"]], "sage.combinat.root_system.associahedron.Associahedra_normaliz": [[222, 4, 1, "", "Element"]], "sage.combinat.root_system.associahedron.Associahedra_polymake": [[222, 4, 1, "", "Element"]], "sage.combinat.root_system.associahedron.Associahedra_ppl": [[222, 4, 1, "", "Element"]], "sage.combinat.root_system.associahedron.Associahedron_class_base": [[222, 2, 1, "", "cartan_type"], [222, 2, 1, "", "vertices_in_root_space"]], "sage.combinat.root_system.braid_move_calculator": [[223, 1, 1, "", "BraidMoveCalculator"]], "sage.combinat.root_system.braid_move_calculator.BraidMoveCalculator": [[223, 2, 1, "", "chain_of_reduced_words"], [223, 2, 1, "", "put_in_front"]], "sage.combinat.root_system.braid_orbit": [[224, 3, 1, "", "BraidOrbit"], [224, 3, 1, "", "is_fully_commutative"]], "sage.combinat.root_system.branching_rules": [[225, 1, 1, "", "BranchingRule"], [225, 3, 1, "", "branch_weyl_character"], [225, 3, 1, "", "branching_rule"], [225, 3, 1, "", "branching_rule_from_plethysm"], [225, 3, 1, "", "get_branching_rule"], [225, 3, 1, "", "maximal_subgroups"]], "sage.combinat.root_system.branching_rules.BranchingRule": [[225, 2, 1, "", "Rtype"], [225, 2, 1, "", "Stype"], [225, 2, 1, "", "branch"], [225, 2, 1, "", "describe"]], "sage.combinat.root_system.cartan_matrix": [[226, 1, 1, "", "CartanMatrix"], [226, 3, 1, "", "find_cartan_type_from_matrix"], [226, 3, 1, "", "is_borcherds_cartan_matrix"], [226, 3, 1, "", "is_generalized_cartan_matrix"]], "sage.combinat.root_system.cartan_matrix.CartanMatrix": [[226, 2, 1, "", "cartan_matrix"], [226, 2, 1, "", "cartan_type"], [226, 2, 1, "", "column_with_indices"], [226, 2, 1, "", "coxeter_diagram"], [226, 2, 1, "", "coxeter_matrix"], [226, 2, 1, "", "dual"], [226, 2, 1, "", "dynkin_diagram"], [226, 2, 1, "", "indecomposable_blocks"], [226, 2, 1, "", "index_set"], [226, 2, 1, "", "is_affine"], [226, 2, 1, "", "is_crystallographic"], [226, 2, 1, "", "is_finite"], [226, 2, 1, "", "is_hyperbolic"], [226, 2, 1, "", "is_indecomposable"], [226, 2, 1, "", "is_indefinite"], [226, 2, 1, "", "is_lorentzian"], [226, 2, 1, "", "is_simply_laced"], [226, 2, 1, "", "matrix_space"], [226, 2, 1, "", "principal_submatrices"], [226, 2, 1, "", "rank"], [226, 2, 1, "", "reflection_group"], [226, 2, 1, "", "relabel"], [226, 2, 1, "", "root_space"], [226, 2, 1, "", "root_system"], [226, 2, 1, "", "row_with_indices"], [226, 2, 1, "", "subtype"], [226, 2, 1, "", "symmetrized_matrix"], [226, 2, 1, "", "symmetrizer"]], "sage.combinat.root_system.cartan_type": [[227, 3, 1, "", "CartanType"], [227, 1, 1, "", "CartanTypeFactory"], [227, 1, 1, "", "CartanType_abstract"], [227, 1, 1, "", "CartanType_affine"], [227, 1, 1, "", "CartanType_crystallographic"], [227, 1, 1, "", "CartanType_decorator"], [227, 1, 1, "", "CartanType_finite"], [227, 1, 1, "", "CartanType_simple"], [227, 1, 1, "", "CartanType_simple_finite"], [227, 1, 1, "", "CartanType_simply_laced"], [227, 1, 1, "", "CartanType_standard"], [227, 1, 1, "", "CartanType_standard_affine"], [227, 1, 1, "", "CartanType_standard_finite"], [227, 1, 1, "", "CartanType_standard_untwisted_affine"], [227, 1, 1, "", "SuperCartanType_standard"]], "sage.combinat.root_system.cartan_type.CartanTypeFactory": [[227, 2, 1, "", "color"], [227, 4, 1, "", "options"], [227, 2, 1, "", "samples"]], "sage.combinat.root_system.cartan_type.CartanType_abstract": [[227, 2, 1, "", "as_folding"], [227, 2, 1, "", "coxeter_diagram"], [227, 2, 1, "", "coxeter_matrix"], [227, 2, 1, "", "coxeter_type"], [227, 2, 1, "", "dual"], [227, 2, 1, "", "index_set"], [227, 2, 1, "", "is_affine"], [227, 2, 1, "", "is_atomic"], [227, 2, 1, "", "is_compound"], [227, 2, 1, "", "is_crystallographic"], [227, 2, 1, "", "is_finite"], [227, 2, 1, "", "is_implemented"], [227, 2, 1, "", "is_irreducible"], [227, 2, 1, "", "is_reducible"], [227, 2, 1, "", "is_simply_laced"], [227, 2, 1, "", "marked_nodes"], [227, 4, 1, "", "options"], [227, 2, 1, "", "rank"], [227, 2, 1, "", "relabel"], [227, 2, 1, "", "root_system"], [227, 2, 1, "", "subtype"], [227, 2, 1, "", "type"]], "sage.combinat.root_system.cartan_type.CartanType_affine": [[227, 4, 1, "", "AmbientSpace"], [227, 2, 1, "", "a"], [227, 2, 1, "", "acheck"], [227, 2, 1, "", "basic_untwisted"], [227, 2, 1, "", "c"], [227, 2, 1, "", "classical"], [227, 2, 1, "", "col_annihilator"], [227, 2, 1, "", "is_affine"], [227, 2, 1, "", "is_finite"], [227, 2, 1, "", "is_untwisted_affine"], [227, 2, 1, "", "other_affinization"], [227, 2, 1, "", "row_annihilator"], [227, 2, 1, "", "special_node"], [227, 2, 1, "", "special_nodes"], [227, 2, 1, "", "translation_factors"]], "sage.combinat.root_system.cartan_type.CartanType_crystallographic": [[227, 2, 1, "", "ascii_art"], [227, 2, 1, "", "cartan_matrix"], [227, 2, 1, "", "coxeter_diagram"], [227, 2, 1, "", "dynkin_diagram"], [227, 2, 1, "", "index_set_bipartition"], [227, 2, 1, "", "is_crystallographic"], [227, 2, 1, "", "symmetrizer"]], "sage.combinat.root_system.cartan_type.CartanType_decorator": [[227, 2, 1, "", "index_set"], [227, 2, 1, "", "is_affine"], [227, 2, 1, "", "is_crystallographic"], [227, 2, 1, "", "is_finite"], [227, 2, 1, "", "is_irreducible"], [227, 2, 1, "", "rank"]], "sage.combinat.root_system.cartan_type.CartanType_finite": [[227, 2, 1, "", "is_affine"], [227, 2, 1, "", "is_finite"]], "sage.combinat.root_system.cartan_type.CartanType_simple": [[227, 2, 1, "", "is_irreducible"]], "sage.combinat.root_system.cartan_type.CartanType_simply_laced": [[227, 2, 1, "", "dual"], [227, 2, 1, "", "is_simply_laced"]], "sage.combinat.root_system.cartan_type.CartanType_standard_affine": [[227, 2, 1, "", "index_set"], [227, 2, 1, "", "rank"], [227, 2, 1, "", "special_node"], [227, 2, 1, "", "type"]], "sage.combinat.root_system.cartan_type.CartanType_standard_finite": [[227, 2, 1, "", "affine"], [227, 2, 1, "", "coxeter_number"], [227, 2, 1, "", "dual_coxeter_number"], [227, 2, 1, "", "index_set"], [227, 2, 1, "", "opposition_automorphism"], [227, 2, 1, "", "rank"], [227, 2, 1, "", "type"]], "sage.combinat.root_system.cartan_type.CartanType_standard_untwisted_affine": [[227, 2, 1, "", "basic_untwisted"], [227, 2, 1, "", "classical"], [227, 2, 1, "", "is_untwisted_affine"]], "sage.combinat.root_system.cartan_type.SuperCartanType_standard": [[227, 4, 1, "", "options"]], "sage.combinat.root_system.coxeter_group": [[228, 3, 1, "", "CoxeterGroup"]], "sage.combinat.root_system.coxeter_matrix": [[229, 1, 1, "", "CoxeterMatrix"], [229, 3, 1, "", "check_coxeter_matrix"], [229, 3, 1, "", "coxeter_matrix_as_function"], [229, 3, 1, "", "recognize_coxeter_type_from_matrix"]], "sage.combinat.root_system.coxeter_matrix.CoxeterMatrix": [[229, 2, 1, "", "bilinear_form"], [229, 2, 1, "", "coxeter_graph"], [229, 2, 1, "", "coxeter_matrix"], [229, 2, 1, "", "coxeter_type"], [229, 2, 1, "", "index_set"], [229, 2, 1, "", "is_affine"], [229, 2, 1, "", "is_crystallographic"], [229, 2, 1, "", "is_finite"], [229, 2, 1, "", "is_irreducible"], [229, 2, 1, "", "is_simply_laced"], [229, 2, 1, "", "rank"], [229, 2, 1, "", "relabel"], [229, 2, 1, "", "samples"]], "sage.combinat.root_system.coxeter_type": [[230, 1, 1, "", "CoxeterType"], [230, 1, 1, "", "CoxeterTypeFromCartanType"]], "sage.combinat.root_system.coxeter_type.CoxeterType": [[230, 2, 1, "", "bilinear_form"], [230, 2, 1, "", "coxeter_graph"], [230, 2, 1, "", "coxeter_matrix"], [230, 2, 1, "", "index_set"], [230, 2, 1, "", "is_affine"], [230, 2, 1, "", "is_crystallographic"], [230, 2, 1, "", "is_finite"], [230, 2, 1, "", "is_simply_laced"], [230, 2, 1, "", "rank"], [230, 2, 1, "", "samples"]], "sage.combinat.root_system.coxeter_type.CoxeterTypeFromCartanType": [[230, 2, 1, "", "cartan_type"], [230, 2, 1, "", "component_types"], [230, 2, 1, "", "coxeter_graph"], [230, 2, 1, "", "coxeter_matrix"], [230, 2, 1, "", "index_set"], [230, 2, 1, "", "is_affine"], [230, 2, 1, "", "is_crystallographic"], [230, 2, 1, "", "is_finite"], [230, 2, 1, "", "is_irreducible"], [230, 2, 1, "", "is_reducible"], [230, 2, 1, "", "is_simply_laced"], [230, 2, 1, "", "rank"], [230, 2, 1, "", "relabel"], [230, 2, 1, "", "type"]], "sage.combinat.root_system.dynkin_diagram": [[231, 3, 1, "", "DynkinDiagram"], [231, 1, 1, "", "DynkinDiagram_class"], [231, 3, 1, "", "precheck"]], "sage.combinat.root_system.dynkin_diagram.DynkinDiagram_class": [[231, 2, 1, "", "add_edge"], [231, 2, 1, "", "an_instance"], [231, 2, 1, "", "cartan_matrix"], [231, 2, 1, "", "cartan_type"], [231, 2, 1, "", "column"], [231, 2, 1, "", "coxeter_diagram"], [231, 2, 1, "", "dual"], [231, 2, 1, "", "dynkin_diagram"], [231, 2, 1, "", "index_set"], [231, 2, 1, "", "is_affine"], [231, 2, 1, "", "is_crystallographic"], [231, 2, 1, "", "is_finite"], [231, 2, 1, "", "is_irreducible"], [231, 2, 1, "", "odd_isotropic_roots"], [231, 2, 1, "", "rank"], [231, 2, 1, "", "relabel"], [231, 2, 1, "", "row"], [231, 2, 1, "", "subtype"], [231, 2, 1, "", "symmetrizer"]], "sage.combinat.root_system.extended_affine_weyl_group": [[232, 3, 1, "", "ExtendedAffineWeylGroup"], [232, 1, 1, "", "ExtendedAffineWeylGroup_Class"]], "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class": [[232, 1, 1, "", "ExtendedAffineWeylGroupFW"], [232, 1, 1, "", "ExtendedAffineWeylGroupFWElement"], [232, 1, 1, "", "ExtendedAffineWeylGroupPW0"], [232, 1, 1, "", "ExtendedAffineWeylGroupPW0Element"], [232, 1, 1, "", "ExtendedAffineWeylGroupPvW0"], [232, 1, 1, "", "ExtendedAffineWeylGroupPvW0Element"], [232, 1, 1, "", "ExtendedAffineWeylGroupW0P"], [232, 1, 1, "", "ExtendedAffineWeylGroupW0PElement"], [232, 1, 1, "", "ExtendedAffineWeylGroupW0Pv"], [232, 1, 1, "", "ExtendedAffineWeylGroupW0PvElement"], [232, 1, 1, "", "ExtendedAffineWeylGroupWF"], [232, 1, 1, "", "ExtendedAffineWeylGroupWFElement"], [232, 2, 1, "", "FW"], [232, 2, 1, "", "PW0"], [232, 2, 1, "", "PW0_to_WF_func"], [232, 2, 1, "", "PvW0"], [232, 1, 1, "", "Realizations"], [232, 2, 1, "", "W0P"], [232, 2, 1, "", "W0Pv"], [232, 2, 1, "", "WF"], [232, 2, 1, "", "WF_to_PW0_func"], [232, 2, 1, "", "a_realization"], [232, 2, 1, "", "affine_weyl"], [232, 2, 1, "", "cartan_type"], [232, 2, 1, "", "classical_weyl"], [232, 2, 1, "", "classical_weyl_to_affine"], [232, 2, 1, "", "dual_classical_weyl"], [232, 2, 1, "", "dual_classical_weyl_to_affine"], [232, 2, 1, "", "dual_lattice"], [232, 2, 1, "", "dual_lattice_basis"], [232, 2, 1, "", "exp_dual_lattice"], [232, 2, 1, "", "exp_lattice"], [232, 2, 1, "", "fundamental_group"], [232, 2, 1, "", "group_generators"], [232, 2, 1, "", "lattice"], [232, 2, 1, "", "lattice_basis"]], "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.ExtendedAffineWeylGroupFW": [[232, 4, 1, "", "Element"], [232, 2, 1, "", "from_affine_weyl"], [232, 2, 1, "", "from_fundamental"], [232, 2, 1, "", "simple_reflections"]], "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.ExtendedAffineWeylGroupFWElement": [[232, 2, 1, "", "action_on_affine_roots"], [232, 2, 1, "", "has_descent"], [232, 2, 1, "", "to_affine_weyl_right"], [232, 2, 1, "", "to_fundamental_group"]], "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.ExtendedAffineWeylGroupPW0": [[232, 4, 1, "", "Element"], [232, 2, 1, "", "S0"], [232, 2, 1, "", "from_classical_weyl"], [232, 2, 1, "", "from_translation"], [232, 2, 1, "", "simple_reflection"], [232, 2, 1, "", "simple_reflections"]], "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.ExtendedAffineWeylGroupPW0Element": [[232, 2, 1, "", "action"], [232, 2, 1, "", "has_descent"], [232, 2, 1, "", "to_classical_weyl"], [232, 2, 1, "", "to_translation_left"]], "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.ExtendedAffineWeylGroupPvW0": [[232, 4, 1, "", "Element"], [232, 2, 1, "", "from_dual_classical_weyl"], [232, 2, 1, "", "from_dual_translation"], [232, 2, 1, "", "simple_reflections"]], "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.ExtendedAffineWeylGroupPvW0Element": [[232, 2, 1, "", "dual_action"], [232, 2, 1, "", "has_descent"], [232, 2, 1, "", "to_dual_classical_weyl"], [232, 2, 1, "", "to_dual_translation_left"]], "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.ExtendedAffineWeylGroupW0P": [[232, 4, 1, "", "Element"], [232, 2, 1, "", "S0"], [232, 2, 1, "", "from_classical_weyl"], [232, 2, 1, "", "from_translation"], [232, 2, 1, "", "simple_reflection"], [232, 2, 1, "", "simple_reflections"]], "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.ExtendedAffineWeylGroupW0PElement": [[232, 2, 1, "", "has_descent"], [232, 2, 1, "", "to_classical_weyl"], [232, 2, 1, "", "to_translation_right"]], "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.ExtendedAffineWeylGroupW0Pv": [[232, 4, 1, "", "Element"], [232, 2, 1, "", "from_dual_classical_weyl"], [232, 2, 1, "", "from_dual_translation"], [232, 2, 1, "", "simple_reflections"]], "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.ExtendedAffineWeylGroupW0PvElement": [[232, 2, 1, "", "dual_action"], [232, 2, 1, "", "has_descent"], [232, 2, 1, "", "to_dual_classical_weyl"], [232, 2, 1, "", "to_dual_translation_right"]], "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.ExtendedAffineWeylGroupWF": [[232, 4, 1, "", "Element"], [232, 2, 1, "", "from_affine_weyl"], [232, 2, 1, "", "from_fundamental"], [232, 2, 1, "", "simple_reflections"]], "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.ExtendedAffineWeylGroupWFElement": [[232, 2, 1, "", "bruhat_le"], [232, 2, 1, "", "has_descent"], [232, 2, 1, "", "to_affine_weyl_left"], [232, 2, 1, "", "to_fundamental_group"]], "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.Realizations": [[232, 1, 1, "", "ElementMethods"], [232, 1, 1, "", "ParentMethods"], [232, 2, 1, "", "super_categories"]], "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.Realizations.ElementMethods": [[232, 2, 1, "", "action"], [232, 2, 1, "", "action_on_affine_roots"], [232, 2, 1, "", "alcove_walk_signs"], [232, 2, 1, "", "apply_simple_projection"], [232, 2, 1, "", "apply_simple_reflection"], [232, 2, 1, "", "bruhat_le"], [232, 2, 1, "", "coset_representative"], [232, 2, 1, "", "dual_action"], [232, 2, 1, "", "face_data"], [232, 2, 1, "", "first_descent"], [232, 2, 1, "", "has_descent"], [232, 2, 1, "", "is_affine_grassmannian"], [232, 2, 1, "", "is_grassmannian"], [232, 2, 1, "", "is_translation"], [232, 2, 1, "", "length"], [232, 2, 1, "", "to_affine_grassmannian"], [232, 2, 1, "", "to_affine_weyl_left"], [232, 2, 1, "", "to_affine_weyl_right"], [232, 2, 1, "", "to_classical_weyl"], [232, 2, 1, "", "to_dual_classical_weyl"], [232, 2, 1, "", "to_dual_translation_left"], [232, 2, 1, "", "to_dual_translation_right"], [232, 2, 1, "", "to_fundamental_group"], [232, 2, 1, "", "to_translation_left"], [232, 2, 1, "", "to_translation_right"]], "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.Realizations.ParentMethods": [[232, 2, 1, "", "from_affine_weyl"], [232, 2, 1, "", "from_classical_weyl"], [232, 2, 1, "", "from_dual_classical_weyl"], [232, 2, 1, "", "from_dual_translation"], [232, 2, 1, "", "from_fundamental"], [232, 2, 1, "", "from_reduced_word"], [232, 2, 1, "", "from_translation"], [232, 2, 1, "", "simple_reflection"], [232, 2, 1, "", "simple_reflections"]], "sage.combinat.root_system.fundamental_group": [[233, 1, 1, "", "FundamentalGroupElement"], [233, 1, 1, "", "FundamentalGroupGL"], [233, 1, 1, "", "FundamentalGroupGLElement"], [233, 3, 1, "", "FundamentalGroupOfExtendedAffineWeylGroup"], [233, 1, 1, "", "FundamentalGroupOfExtendedAffineWeylGroup_Class"]], "sage.combinat.root_system.fundamental_group.FundamentalGroupElement": [[233, 2, 1, "", "act_on_affine_lattice"], [233, 2, 1, "", "act_on_affine_weyl"], [233, 2, 1, "", "value"]], "sage.combinat.root_system.fundamental_group.FundamentalGroupGL": [[233, 4, 1, "", "Element"], [233, 2, 1, "", "action"], [233, 2, 1, "", "an_element"], [233, 2, 1, "", "dual_node"], [233, 2, 1, "", "family"], [233, 2, 1, "", "group_generators"], [233, 2, 1, "", "one"], [233, 2, 1, "", "product"], [233, 2, 1, "", "reduced_word"], [233, 2, 1, "", "some_elements"]], "sage.combinat.root_system.fundamental_group.FundamentalGroupGLElement": [[233, 2, 1, "", "act_on_classical_ambient"]], "sage.combinat.root_system.fundamental_group.FundamentalGroupOfExtendedAffineWeylGroup_Class": [[233, 4, 1, "", "Element"], [233, 2, 1, "", "action"], [233, 2, 1, "", "an_element"], [233, 2, 1, "", "cartan_type"], [233, 2, 1, "", "dual_node"], [233, 2, 1, "", "group_generators"], [233, 2, 1, "", "index_set"], [233, 2, 1, "", "one"], [233, 2, 1, "", "product"], [233, 2, 1, "", "reduced_word"], [233, 2, 1, "", "special_nodes"]], "sage.combinat.root_system.hecke_algebra_representation": [[234, 1, 1, "", "CherednikOperatorsEigenvectors"], [234, 1, 1, "", "HeckeAlgebraRepresentation"]], "sage.combinat.root_system.hecke_algebra_representation.CherednikOperatorsEigenvectors": [[234, 2, 1, "", "Y"], [234, 2, 1, "", "affine_lift"], [234, 2, 1, "", "affine_retract"], [234, 2, 1, "", "cartan_type"], [234, 2, 1, "", "domain"], [234, 2, 1, "", "eigenvalue"], [234, 2, 1, "", "eigenvalues"], [234, 2, 1, "", "hecke_parameters"], [234, 2, 1, "", "keys"], [234, 2, 1, "", "recursion"], [234, 2, 1, "", "seed"], [234, 2, 1, "", "twist"]], "sage.combinat.root_system.hecke_algebra_representation.HeckeAlgebraRepresentation": [[234, 2, 1, "", "Ti_inverse_on_basis"], [234, 2, 1, "", "Ti_on_basis"], [234, 2, 1, "", "Tw"], [234, 2, 1, "", "Tw_inverse"], [234, 2, 1, "", "Y"], [234, 2, 1, "", "Y_eigenvectors"], [234, 2, 1, "", "Y_lambdacheck"], [234, 2, 1, "", "cartan_type"], [234, 2, 1, "", "domain"], [234, 2, 1, "", "on_basis"], [234, 2, 1, "", "parameters"], [234, 2, 1, "", "straighten_word"]], "sage.combinat.root_system.integrable_representations": [[235, 1, 1, "", "IntegrableRepresentation"]], "sage.combinat.root_system.integrable_representations.IntegrableRepresentation": [[235, 2, 1, "", "branch"], [235, 2, 1, "", "cartan_type"], [235, 2, 1, "", "coxeter_number"], [235, 2, 1, "", "dominant_maximal_weights"], [235, 2, 1, "", "dual_coxeter_number"], [235, 2, 1, "", "from_weight"], [235, 2, 1, "", "highest_weight"], [235, 2, 1, "", "level"], [235, 2, 1, "", "m"], [235, 2, 1, "", "modular_characteristic"], [235, 2, 1, "", "mult"], [235, 2, 1, "", "print_strings"], [235, 2, 1, "", "root_lattice"], [235, 2, 1, "", "s"], [235, 2, 1, "", "string"], [235, 2, 1, "", "strings"], [235, 2, 1, "", "to_dominant"], [235, 2, 1, "", "to_weight"], [235, 2, 1, "", "weight_lattice"]], "sage.combinat.root_system.non_symmetric_macdonald_polynomials": [[236, 1, 1, "", "NonSymmetricMacdonaldPolynomials"]], "sage.combinat.root_system.non_symmetric_macdonald_polynomials.NonSymmetricMacdonaldPolynomials": [[236, 2, 1, "", "KL0"], [236, 2, 1, "", "L"], [236, 2, 1, "", "L0"], [236, 2, 1, "", "L_check"], [236, 2, 1, "", "L_prime"], [236, 2, 1, "", "Q_to_Qcheck"], [236, 2, 1, "", "Y"], [236, 2, 1, "", "affine_lift"], [236, 2, 1, "", "affine_retract"], [236, 2, 1, "", "cartan_type"], [236, 2, 1, "", "eigenvalue_experimental"], [236, 2, 1, "", "rho_prime"], [236, 2, 1, "", "seed"], [236, 2, 1, "", "symmetric_macdonald_polynomial"], [236, 2, 1, "", "twist"]], "sage.combinat.root_system.pieri_factors": [[237, 1, 1, "", "PieriFactors"], [237, 1, 1, "", "PieriFactors_affine_type"], [237, 1, 1, "", "PieriFactors_finite_type"], [237, 1, 1, "", "PieriFactors_type_A"], [237, 1, 1, "", "PieriFactors_type_A_affine"], [237, 1, 1, "", "PieriFactors_type_B"], [237, 1, 1, "", "PieriFactors_type_B_affine"], [237, 1, 1, "", "PieriFactors_type_C_affine"], [237, 1, 1, "", "PieriFactors_type_D_affine"]], "sage.combinat.root_system.pieri_factors.PieriFactors": [[237, 2, 1, "", "default_weight"], [237, 2, 1, "", "elements"], [237, 2, 1, "", "generating_series"], [237, 2, 1, "", "max_length"]], "sage.combinat.root_system.pieri_factors.PieriFactors_affine_type": [[237, 2, 1, "", "maximal_elements"]], "sage.combinat.root_system.pieri_factors.PieriFactors_finite_type": [[237, 2, 1, "", "maximal_elements"]], "sage.combinat.root_system.pieri_factors.PieriFactors_type_A": [[237, 2, 1, "", "maximal_elements_combinatorial"], [237, 2, 1, "", "stanley_symm_poly_weight"]], "sage.combinat.root_system.pieri_factors.PieriFactors_type_A_affine": [[237, 2, 1, "", "cardinality"], [237, 2, 1, "", "generating_series"], [237, 2, 1, "", "maximal_elements_combinatorial"], [237, 2, 1, "", "stanley_symm_poly_weight"], [237, 2, 1, "", "subset"]], "sage.combinat.root_system.pieri_factors.PieriFactors_type_B": [[237, 2, 1, "", "maximal_elements_combinatorial"], [237, 2, 1, "", "stanley_symm_poly_weight"]], "sage.combinat.root_system.pieri_factors.PieriFactors_type_B_affine": [[237, 2, 1, "", "maximal_elements_combinatorial"], [237, 2, 1, "", "stanley_symm_poly_weight"]], "sage.combinat.root_system.pieri_factors.PieriFactors_type_C_affine": [[237, 2, 1, "", "maximal_elements_combinatorial"], [237, 2, 1, "", "stanley_symm_poly_weight"]], "sage.combinat.root_system.pieri_factors.PieriFactors_type_D_affine": [[237, 2, 1, "", "maximal_elements_combinatorial"], [237, 2, 1, "", "stanley_symm_poly_weight"]], "sage.combinat.root_system.plot": [[238, 1, 1, "", "PlotOptions"], [238, 3, 1, "", "barycentric_projection_matrix"]], "sage.combinat.root_system.plot.PlotOptions": [[238, 2, 1, "", "color"], [238, 2, 1, "", "cone"], [238, 2, 1, "", "empty"], [238, 2, 1, "", "family_of_vectors"], [238, 2, 1, "", "finalize"], [238, 2, 1, "", "in_bounding_box"], [238, 2, 1, "", "index_of_object"], [238, 2, 1, "", "intersection_at_level_1"], [238, 2, 1, "", "projection"], [238, 2, 1, "", "reflection_hyperplane"], [238, 2, 1, "", "text"], [238, 2, 1, "", "thickness"]], "sage.combinat.root_system.reflection_group_complex": [[239, 1, 1, "", "ComplexReflectionGroup"], [239, 1, 1, "", "IrreducibleComplexReflectionGroup"], [239, 3, 1, "", "multi_partitions"], [239, 3, 1, "", "power"]], "sage.combinat.root_system.reflection_group_complex.ComplexReflectionGroup": [[239, 1, 1, "", "Element"], [239, 2, 1, "", "apply_vector_field"], [239, 2, 1, "", "braid_relations"], [239, 2, 1, "", "cartan_matrix"], [239, 2, 1, "", "codegrees"], [239, 2, 1, "", "conjugacy_classes"], [239, 2, 1, "", "conjugacy_classes_representatives"], [239, 2, 1, "", "coxeter_number"], [239, 2, 1, "", "degrees"], [239, 2, 1, "", "discriminant"], [239, 2, 1, "", "discriminant_in_invariant_ring"], [239, 2, 1, "", "distinguished_reflection"], [239, 2, 1, "", "distinguished_reflections"], [239, 2, 1, "", "fake_degrees"], [239, 2, 1, "", "fundamental_invariants"], [239, 2, 1, "", "hyperplane_index_set"], [239, 2, 1, "", "independent_roots"], [239, 2, 1, "", "index_set"], [239, 2, 1, "", "invariant_form"], [239, 2, 1, "", "invariant_form_standardization"], [239, 2, 1, "", "irreducible_components"], [239, 2, 1, "", "is_crystallographic"], [239, 2, 1, "", "iteration_tracking_words"], [239, 2, 1, "", "jacobian_of_fundamental_invariants"], [239, 2, 1, "", "number_of_irreducible_components"], [239, 2, 1, "", "primitive_vector_field"], [239, 2, 1, "", "rank"], [239, 2, 1, "", "reflection"], [239, 2, 1, "", "reflection_character"], [239, 2, 1, "", "reflection_eigenvalues"], [239, 2, 1, "", "reflection_eigenvalues_family"], [239, 2, 1, "", "reflection_hyperplane"], [239, 2, 1, "", "reflection_hyperplanes"], [239, 2, 1, "", "reflection_index_set"], [239, 2, 1, "", "reflections"], [239, 2, 1, "", "roots"], [239, 2, 1, "", "series"], [239, 2, 1, "", "set_reflection_representation"], [239, 2, 1, "", "simple_coroot"], [239, 2, 1, "", "simple_coroots"], [239, 2, 1, "", "simple_reflection"], [239, 2, 1, "", "simple_root"], [239, 2, 1, "", "simple_roots"]], "sage.combinat.root_system.reflection_group_complex.ComplexReflectionGroup.Element": [[239, 2, 1, "", "conjugacy_class"], [239, 2, 1, "", "conjugacy_class_representative"], [239, 2, 1, "", "reflection_length"]], "sage.combinat.root_system.reflection_group_complex.IrreducibleComplexReflectionGroup": [[239, 1, 1, "", "Element"]], "sage.combinat.root_system.reflection_group_complex.IrreducibleComplexReflectionGroup.Element": [[239, 2, 1, "", "is_coxeter_element"], [239, 2, 1, "", "is_h_regular"], [239, 2, 1, "", "is_regular"]], "sage.combinat.root_system.reflection_group_real": [[240, 1, 1, "", "IrreducibleRealReflectionGroup"], [240, 1, 1, "", "RealReflectionGroup"], [240, 3, 1, "", "ReflectionGroup"], [240, 3, 1, "", "is_chevie_available"]], "sage.combinat.root_system.reflection_group_real.IrreducibleRealReflectionGroup": [[240, 1, 1, "", "Element"]], "sage.combinat.root_system.reflection_group_real.RealReflectionGroup": [[240, 1, 1, "", "Element"], [240, 2, 1, "", "almost_positive_roots"], [240, 2, 1, "", "bipartite_index_set"], [240, 2, 1, "", "bruhat_cone"], [240, 2, 1, "", "cartan_type"], [240, 2, 1, "", "coxeter_diagram"], [240, 2, 1, "", "coxeter_matrix"], [240, 2, 1, "", "fundamental_weight"], [240, 2, 1, "", "fundamental_weights"], [240, 2, 1, "", "iteration"], [240, 2, 1, "", "positive_roots"], [240, 2, 1, "", "reflection_to_positive_root"], [240, 2, 1, "", "right_coset_representatives"], [240, 2, 1, "", "root_to_reflection"], [240, 2, 1, "", "simple_root_index"]], "sage.combinat.root_system.reflection_group_real.RealReflectionGroup.Element": [[240, 2, 1, "", "left_coset_representatives"], [240, 2, 1, "", "right_coset_representatives"]], "sage.combinat.root_system.root_lattice_realization_algebras": [[241, 1, 1, "", "Algebras"]], "sage.combinat.root_system.root_lattice_realization_algebras.Algebras": [[241, 1, 1, "", "ElementMethods"], [241, 1, 1, "", "ParentMethods"]], "sage.combinat.root_system.root_lattice_realization_algebras.Algebras.ElementMethods": [[241, 2, 1, "", "acted_upon"], [241, 2, 1, "", "expand"]], "sage.combinat.root_system.root_lattice_realization_algebras.Algebras.ParentMethods": [[241, 2, 1, "", "T0_check_on_basis"], [241, 2, 1, "", "cartan_type"], [241, 2, 1, "", "classical"], [241, 2, 1, "", "demazure_lusztig_operator_on_basis"], [241, 2, 1, "", "demazure_lusztig_operator_on_classical_on_basis"], [241, 2, 1, "", "demazure_lusztig_operators"], [241, 2, 1, "", "demazure_lusztig_operators_on_classical"], [241, 2, 1, "", "demazure_operators"], [241, 2, 1, "", "divided_difference_on_basis"], [241, 2, 1, "", "from_polynomial"], [241, 2, 1, "", "isobaric_divided_difference_on_basis"], [241, 2, 1, "", "q_project"], [241, 2, 1, "", "q_project_on_basis"], [241, 2, 1, "", "some_elements"], [241, 2, 1, "", "twisted_demazure_lusztig_operator_on_basis"], [241, 2, 1, "", "twisted_demazure_lusztig_operators"]], "sage.combinat.root_system.root_lattice_realizations": [[242, 1, 1, "", "RootLatticeRealizations"]], "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations": [[242, 4, 1, "", "Algebras"], [242, 1, 1, "", "ElementMethods"], [242, 1, 1, "", "ParentMethods"], [242, 2, 1, "", "super_categories"]], "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ElementMethods": [[242, 2, 1, "", "affine_orbit"], [242, 2, 1, "", "associated_coroot"], [242, 2, 1, "", "associated_reflection"], [242, 2, 1, "", "descents"], [242, 2, 1, "", "dot_action"], [242, 2, 1, "", "dot_orbit"], [242, 2, 1, "", "extraspecial_pair"], [242, 2, 1, "", "first_descent"], [242, 2, 1, "", "greater"], [242, 2, 1, "", "has_descent"], [242, 2, 1, "", "height"], [242, 2, 1, "", "is_dominant"], [242, 2, 1, "", "is_dominant_weight"], [242, 2, 1, "", "is_imaginary_root"], [242, 2, 1, "", "is_long_root"], [242, 2, 1, "", "is_parabolic_root"], [242, 2, 1, "", "is_real_root"], [242, 2, 1, "", "is_short_root"], [242, 2, 1, "", "level"], [242, 2, 1, "", "norm_squared"], [242, 2, 1, "", "orbit"], [242, 2, 1, "", "pred"], [242, 2, 1, "", "reduced_word"], [242, 2, 1, "", "reflection"], [242, 2, 1, "", "scalar"], [242, 2, 1, "", "simple_reflection"], [242, 2, 1, "", "simple_reflections"], [242, 2, 1, "", "smaller"], [242, 2, 1, "", "succ"], [242, 2, 1, "", "symmetric_form"], [242, 2, 1, "", "to_ambient"], [242, 2, 1, "", "to_classical"], [242, 2, 1, "", "to_dominant_chamber"], [242, 2, 1, "", "to_dual_type_cospace"], [242, 2, 1, "", "to_simple_root"], [242, 2, 1, "", "translation"], [242, 2, 1, "", "weyl_action"], [242, 2, 1, "", "weyl_stabilizer"]], "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ParentMethods": [[242, 2, 1, "", "a_long_simple_root"], [242, 2, 1, "", "almost_positive_roots"], [242, 2, 1, "", "almost_positive_roots_decomposition"], [242, 2, 1, "", "alpha"], [242, 2, 1, "", "alphacheck"], [242, 2, 1, "", "basic_imaginary_roots"], [242, 2, 1, "", "cartan_type"], [242, 2, 1, "", "classical"], [242, 2, 1, "", "cohighest_root"], [242, 2, 1, "", "coroot_lattice"], [242, 2, 1, "", "coroot_space"], [242, 2, 1, "", "dual_type_cospace"], [242, 2, 1, "", "dynkin_diagram"], [242, 2, 1, "", "fundamental_weights_from_simple_roots"], [242, 2, 1, "", "generalized_nonnesting_partition_lattice"], [242, 2, 1, "", "highest_root"], [242, 2, 1, "", "index_set"], [242, 2, 1, "", "long_roots"], [242, 2, 1, "", "negative_roots"], [242, 2, 1, "", "nonnesting_partition_lattice"], [242, 2, 1, "", "nonparabolic_positive_root_sum"], [242, 2, 1, "", "nonparabolic_positive_roots"], [242, 2, 1, "", "null_coroot"], [242, 2, 1, "", "null_root"], [242, 2, 1, "", "plot"], [242, 2, 1, "", "plot_alcove_walk"], [242, 2, 1, "", "plot_alcoves"], [242, 2, 1, "", "plot_bounding_box"], [242, 2, 1, "", "plot_coroots"], [242, 2, 1, "", "plot_crystal"], [242, 2, 1, "", "plot_fundamental_chamber"], [242, 2, 1, "", "plot_fundamental_weights"], [242, 2, 1, "", "plot_hedron"], [242, 2, 1, "", "plot_ls_paths"], [242, 2, 1, "", "plot_mv_polytope"], [242, 2, 1, "", "plot_parse_options"], [242, 2, 1, "", "plot_reflection_hyperplanes"], [242, 2, 1, "", "plot_roots"], [242, 2, 1, "", "positive_imaginary_roots"], [242, 2, 1, "", "positive_real_roots"], [242, 2, 1, "", "positive_roots"], [242, 2, 1, "", "positive_roots_by_height"], [242, 2, 1, "", "positive_roots_nonparabolic"], [242, 2, 1, "", "positive_roots_nonparabolic_sum"], [242, 2, 1, "", "positive_roots_parabolic"], [242, 2, 1, "", "projection"], [242, 2, 1, "", "reflection"], [242, 2, 1, "", "root_poset"], [242, 2, 1, "", "roots"], [242, 2, 1, "", "s"], [242, 2, 1, "", "short_roots"], [242, 2, 1, "", "simple_coroot"], [242, 2, 1, "", "simple_coroots"], [242, 2, 1, "", "simple_projection"], [242, 2, 1, "", "simple_projections"], [242, 2, 1, "", "simple_reflection"], [242, 2, 1, "", "simple_reflections"], [242, 2, 1, "", "simple_root"], [242, 2, 1, "", "simple_roots"], [242, 2, 1, "", "simple_roots_tilde"], [242, 2, 1, "", "some_elements"], [242, 2, 1, "", "tau_epsilon_operator_on_almost_positive_roots"], [242, 2, 1, "", "tau_plus_minus"], [242, 2, 1, "", "to_ambient_space_morphism"], [242, 2, 1, "", "weyl_group"]], "sage.combinat.root_system.root_space": [[243, 1, 1, "", "RootSpace"], [243, 1, 1, "", "RootSpaceElement"]], "sage.combinat.root_system.root_space.RootSpace": [[243, 4, 1, "", "Element"], [243, 2, 1, "", "simple_root"], [243, 2, 1, "", "to_ambient_space_morphism"], [243, 2, 1, "", "to_coroot_space_morphism"]], "sage.combinat.root_system.root_space.RootSpaceElement": [[243, 2, 1, "", "associated_coroot"], [243, 2, 1, "", "is_positive_root"], [243, 2, 1, "", "max_coroot_le"], [243, 2, 1, "", "max_quantum_element"], [243, 2, 1, "", "quantum_root"], [243, 2, 1, "", "scalar"], [243, 2, 1, "", "to_ambient"]], "sage.combinat.root_system.root_system": [[244, 1, 1, "", "RootSystem"], [244, 3, 1, "", "WeylDim"]], "sage.combinat.root_system.root_system.RootSystem": [[244, 2, 1, "", "ambient_lattice"], [244, 2, 1, "", "ambient_space"], [244, 2, 1, "", "cartan_matrix"], [244, 2, 1, "", "cartan_type"], [244, 2, 1, "", "coambient_space"], [244, 2, 1, "", "coroot_lattice"], [244, 2, 1, "", "coroot_space"], [244, 2, 1, "", "coweight_lattice"], [244, 2, 1, "", "coweight_space"], [244, 2, 1, "", "dynkin_diagram"], [244, 2, 1, "", "index_set"], [244, 2, 1, "", "is_finite"], [244, 2, 1, "", "is_irreducible"], [244, 2, 1, "", "root_lattice"], [244, 2, 1, "", "root_poset"], [244, 2, 1, "", "root_space"], [244, 2, 1, "", "weight_lattice"], [244, 2, 1, "", "weight_space"]], "sage.combinat.root_system.type_A": [[245, 1, 1, "", "AmbientSpace"], [245, 1, 1, "", "CartanType"]], "sage.combinat.root_system.type_A.AmbientSpace": [[245, 2, 1, "", "det"], [245, 2, 1, "", "dimension"], [245, 2, 1, "", "fundamental_weight"], [245, 2, 1, "", "highest_root"], [245, 2, 1, "", "negative_roots"], [245, 2, 1, "", "positive_roots"], [245, 2, 1, "", "root"], [245, 2, 1, "", "simple_root"], [245, 2, 1, "", "smallest_base_ring"]], "sage.combinat.root_system.type_A.CartanType": [[245, 4, 1, "", "AmbientSpace"], [245, 4, 1, "", "PieriFactors"], [245, 2, 1, "", "ascii_art"], [245, 2, 1, "", "coxeter_number"], [245, 2, 1, "", "dual_coxeter_number"], [245, 2, 1, "", "dynkin_diagram"]], "sage.combinat.root_system.type_A_affine": [[246, 1, 1, "", "CartanType"]], "sage.combinat.root_system.type_A_affine.CartanType": [[246, 4, 1, "", "PieriFactors"], [246, 2, 1, "", "ascii_art"], [246, 2, 1, "", "dual"], [246, 2, 1, "", "dynkin_diagram"]], "sage.combinat.root_system.type_A_infinity": [[247, 1, 1, "", "CartanType"]], "sage.combinat.root_system.type_A_infinity.CartanType": [[247, 2, 1, "", "ascii_art"], [247, 2, 1, "", "dual"], [247, 2, 1, "", "index_set"], [247, 2, 1, "", "is_affine"], [247, 2, 1, "", "is_crystallographic"], [247, 2, 1, "", "is_finite"], [247, 2, 1, "", "is_simply_laced"], [247, 2, 1, "", "is_untwisted_affine"], [247, 2, 1, "", "rank"], [247, 2, 1, "", "type"]], "sage.combinat.root_system.type_B": [[248, 1, 1, "", "AmbientSpace"], [248, 1, 1, "", "CartanType"]], "sage.combinat.root_system.type_B.AmbientSpace": [[248, 2, 1, "", "dimension"], [248, 2, 1, "", "fundamental_weight"], [248, 2, 1, "", "negative_roots"], [248, 2, 1, "", "positive_roots"], [248, 2, 1, "", "root"], [248, 2, 1, "", "simple_root"]], "sage.combinat.root_system.type_B.CartanType": [[248, 4, 1, "", "AmbientSpace"], [248, 4, 1, "", "PieriFactors"], [248, 2, 1, "", "ascii_art"], [248, 2, 1, "", "coxeter_number"], [248, 2, 1, "", "dual"], [248, 2, 1, "", "dual_coxeter_number"], [248, 2, 1, "", "dynkin_diagram"]], "sage.combinat.root_system.type_BC_affine": [[249, 1, 1, "", "CartanType"]], "sage.combinat.root_system.type_BC_affine.CartanType": [[249, 2, 1, "", "ascii_art"], [249, 2, 1, "", "basic_untwisted"], [249, 2, 1, "", "classical"], [249, 2, 1, "", "dynkin_diagram"]], "sage.combinat.root_system.type_B_affine": [[250, 1, 1, "", "CartanType"]], "sage.combinat.root_system.type_B_affine.CartanType": [[250, 4, 1, "", "PieriFactors"], [250, 2, 1, "", "ascii_art"], [250, 2, 1, "", "dynkin_diagram"]], "sage.combinat.root_system.type_C": [[251, 1, 1, "", "AmbientSpace"], [251, 1, 1, "", "CartanType"]], "sage.combinat.root_system.type_C.AmbientSpace": [[251, 2, 1, "", "dimension"], [251, 2, 1, "", "fundamental_weight"], [251, 2, 1, "", "negative_roots"], [251, 2, 1, "", "positive_roots"], [251, 2, 1, "", "root"], [251, 2, 1, "", "simple_root"]], "sage.combinat.root_system.type_C.CartanType": [[251, 4, 1, "", "AmbientSpace"], [251, 2, 1, "", "ascii_art"], [251, 2, 1, "", "coxeter_number"], [251, 2, 1, "", "dual"], [251, 2, 1, "", "dual_coxeter_number"], [251, 2, 1, "", "dynkin_diagram"]], "sage.combinat.root_system.type_C_affine": [[252, 1, 1, "", "CartanType"]], "sage.combinat.root_system.type_C_affine.CartanType": [[252, 4, 1, "", "PieriFactors"], [252, 2, 1, "", "ascii_art"], [252, 2, 1, "", "dynkin_diagram"]], "sage.combinat.root_system.type_D": [[253, 1, 1, "", "AmbientSpace"], [253, 1, 1, "", "CartanType"]], "sage.combinat.root_system.type_D.AmbientSpace": [[253, 2, 1, "", "dimension"], [253, 2, 1, "", "fundamental_weight"], [253, 2, 1, "", "negative_roots"], [253, 2, 1, "", "positive_roots"], [253, 2, 1, "", "root"], [253, 2, 1, "", "simple_root"]], "sage.combinat.root_system.type_D.CartanType": [[253, 4, 1, "", "AmbientSpace"], [253, 2, 1, "", "ascii_art"], [253, 2, 1, "", "coxeter_number"], [253, 2, 1, "", "dual_coxeter_number"], [253, 2, 1, "", "dynkin_diagram"], [253, 2, 1, "", "is_atomic"]], "sage.combinat.root_system.type_D_affine": [[254, 1, 1, "", "CartanType"]], "sage.combinat.root_system.type_D_affine.CartanType": [[254, 4, 1, "", "PieriFactors"], [254, 2, 1, "", "ascii_art"], [254, 2, 1, "", "dynkin_diagram"]], "sage.combinat.root_system.type_E": [[255, 1, 1, "", "AmbientSpace"], [255, 1, 1, "", "CartanType"]], "sage.combinat.root_system.type_E.AmbientSpace": [[255, 2, 1, "", "dimension"], [255, 2, 1, "", "fundamental_weights"], [255, 2, 1, "", "negative_roots"], [255, 2, 1, "", "positive_roots"], [255, 2, 1, "", "root"], [255, 2, 1, "", "simple_root"]], "sage.combinat.root_system.type_E.CartanType": [[255, 4, 1, "", "AmbientSpace"], [255, 2, 1, "", "ascii_art"], [255, 2, 1, "", "coxeter_number"], [255, 2, 1, "", "dual_coxeter_number"], [255, 2, 1, "", "dynkin_diagram"]], "sage.combinat.root_system.type_E_affine": [[256, 1, 1, "", "CartanType"]], "sage.combinat.root_system.type_E_affine.CartanType": [[256, 2, 1, "", "ascii_art"], [256, 2, 1, "", "dynkin_diagram"]], "sage.combinat.root_system.type_F": [[257, 1, 1, "", "AmbientSpace"], [257, 1, 1, "", "CartanType"]], "sage.combinat.root_system.type_F.AmbientSpace": [[257, 2, 1, "", "dimension"], [257, 2, 1, "", "fundamental_weights"], [257, 2, 1, "", "negative_roots"], [257, 2, 1, "", "positive_roots"], [257, 2, 1, "", "root"], [257, 2, 1, "", "simple_root"]], "sage.combinat.root_system.type_F.CartanType": [[257, 4, 1, "", "AmbientSpace"], [257, 2, 1, "", "ascii_art"], [257, 2, 1, "", "coxeter_number"], [257, 2, 1, "", "dual"], [257, 2, 1, "", "dual_coxeter_number"], [257, 2, 1, "", "dynkin_diagram"]], "sage.combinat.root_system.type_F_affine": [[258, 1, 1, "", "CartanType"]], "sage.combinat.root_system.type_F_affine.CartanType": [[258, 2, 1, "", "ascii_art"], [258, 2, 1, "", "dynkin_diagram"]], "sage.combinat.root_system.type_G": [[259, 1, 1, "", "AmbientSpace"], [259, 1, 1, "", "CartanType"]], "sage.combinat.root_system.type_G.AmbientSpace": [[259, 2, 1, "", "dimension"], [259, 2, 1, "", "fundamental_weights"], [259, 2, 1, "", "negative_roots"], [259, 2, 1, "", "positive_roots"], [259, 2, 1, "", "simple_root"]], "sage.combinat.root_system.type_G.CartanType": [[259, 4, 1, "", "AmbientSpace"], [259, 2, 1, "", "ascii_art"], [259, 2, 1, "", "coxeter_number"], [259, 2, 1, "", "dual"], [259, 2, 1, "", "dual_coxeter_number"], [259, 2, 1, "", "dynkin_diagram"]], "sage.combinat.root_system.type_G_affine": [[260, 1, 1, "", "CartanType"]], "sage.combinat.root_system.type_G_affine.CartanType": [[260, 2, 1, "", "ascii_art"], [260, 2, 1, "", "dynkin_diagram"]], "sage.combinat.root_system.type_H": [[261, 1, 1, "", "CartanType"]], "sage.combinat.root_system.type_H.CartanType": [[261, 2, 1, "", "coxeter_diagram"], [261, 2, 1, "", "coxeter_number"]], "sage.combinat.root_system.type_I": [[262, 1, 1, "", "CartanType"]], "sage.combinat.root_system.type_I.CartanType": [[262, 2, 1, "", "coxeter_diagram"], [262, 2, 1, "", "coxeter_number"], [262, 2, 1, "", "index_set"], [262, 2, 1, "", "rank"]], "sage.combinat.root_system.type_Q": [[263, 1, 1, "", "CartanType"]], "sage.combinat.root_system.type_Q.CartanType": [[263, 2, 1, "", "dual"], [263, 2, 1, "", "index_set"], [263, 2, 1, "", "is_irreducible"], [263, 2, 1, "", "is_simply_laced"], [263, 2, 1, "", "root_system"]], "sage.combinat.root_system.type_affine": [[264, 1, 1, "", "AmbientSpace"]], "sage.combinat.root_system.type_affine.AmbientSpace": [[264, 1, 1, "", "Element"], [264, 2, 1, "", "coroot_lattice"], [264, 2, 1, "", "fundamental_weight"], [264, 2, 1, "", "is_extended"], [264, 2, 1, "", "simple_coroot"], [264, 2, 1, "", "simple_root"], [264, 2, 1, "", "smallest_base_ring"]], "sage.combinat.root_system.type_affine.AmbientSpace.Element": [[264, 2, 1, "", "associated_coroot"], [264, 2, 1, "", "inner_product"], [264, 2, 1, "", "scalar"]], "sage.combinat.root_system.type_dual": [[265, 1, 1, "", "AmbientSpace"], [265, 1, 1, "", "CartanType"], [265, 1, 1, "", "CartanType_affine"], [265, 1, 1, "", "CartanType_finite"]], "sage.combinat.root_system.type_dual.AmbientSpace": [[265, 2, 1, "", "dimension"], [265, 2, 1, "", "fundamental_weights"], [265, 2, 1, "", "simple_root"]], "sage.combinat.root_system.type_dual.CartanType": [[265, 2, 1, "", "ascii_art"], [265, 2, 1, "", "dual"], [265, 2, 1, "", "dynkin_diagram"]], "sage.combinat.root_system.type_dual.CartanType_affine": [[265, 2, 1, "", "basic_untwisted"], [265, 2, 1, "", "classical"], [265, 2, 1, "", "special_node"]], "sage.combinat.root_system.type_dual.CartanType_finite": [[265, 4, 1, "", "AmbientSpace"]], "sage.combinat.root_system.type_folded": [[266, 1, 1, "", "CartanTypeFolded"]], "sage.combinat.root_system.type_folded.CartanTypeFolded": [[266, 2, 1, "", "cartan_type"], [266, 2, 1, "", "folding_of"], [266, 2, 1, "", "folding_orbit"], [266, 2, 1, "", "scaling_factors"]], "sage.combinat.root_system.type_marked": [[267, 1, 1, "", "AmbientSpace"], [267, 1, 1, "", "CartanType"], [267, 1, 1, "", "CartanType_affine"], [267, 1, 1, "", "CartanType_finite"]], "sage.combinat.root_system.type_marked.AmbientSpace": [[267, 2, 1, "", "dimension"], [267, 2, 1, "", "fundamental_weight"], [267, 2, 1, "", "simple_root"]], "sage.combinat.root_system.type_marked.CartanType": [[267, 2, 1, "", "ascii_art"], [267, 2, 1, "", "dual"], [267, 2, 1, "", "dynkin_diagram"], [267, 2, 1, "", "marked_nodes"], [267, 2, 1, "", "relabel"], [267, 2, 1, "", "type"]], "sage.combinat.root_system.type_marked.CartanType_affine": [[267, 2, 1, "", "basic_untwisted"], [267, 2, 1, "", "classical"], [267, 2, 1, "", "is_untwisted_affine"], [267, 2, 1, "", "special_node"]], "sage.combinat.root_system.type_marked.CartanType_finite": [[267, 4, 1, "", "AmbientSpace"], [267, 2, 1, "", "affine"]], "sage.combinat.root_system.type_reducible": [[268, 1, 1, "", "AmbientSpace"], [268, 1, 1, "", "CartanType"]], "sage.combinat.root_system.type_reducible.AmbientSpace": [[268, 2, 1, "", "ambient_spaces"], [268, 2, 1, "", "cartan_type"], [268, 2, 1, "", "component_types"], [268, 2, 1, "", "dimension"], [268, 2, 1, "", "fundamental_weights"], [268, 2, 1, "", "inject_weights"], [268, 2, 1, "", "negative_roots"], [268, 2, 1, "", "positive_roots"], [268, 2, 1, "", "simple_coroot"], [268, 2, 1, "", "simple_root"]], "sage.combinat.root_system.type_reducible.CartanType": [[268, 4, 1, "", "AmbientSpace"], [268, 2, 1, "", "ascii_art"], [268, 2, 1, "", "cartan_matrix"], [268, 2, 1, "", "component_types"], [268, 2, 1, "", "coxeter_diagram"], [268, 2, 1, "", "dual"], [268, 2, 1, "", "dynkin_diagram"], [268, 2, 1, "", "index_set"], [268, 2, 1, "", "is_affine"], [268, 2, 1, "", "is_finite"], [268, 2, 1, "", "is_irreducible"], [268, 2, 1, "", "rank"], [268, 2, 1, "", "type"]], "sage.combinat.root_system.type_relabel": [[269, 1, 1, "", "AmbientSpace"], [269, 1, 1, "", "CartanType"], [269, 1, 1, "", "CartanType_affine"], [269, 1, 1, "", "CartanType_finite"]], "sage.combinat.root_system.type_relabel.AmbientSpace": [[269, 2, 1, "", "dimension"], [269, 2, 1, "", "fundamental_weight"], [269, 2, 1, "", "simple_root"]], "sage.combinat.root_system.type_relabel.CartanType": [[269, 2, 1, "", "ascii_art"], [269, 2, 1, "", "coxeter_diagram"], [269, 2, 1, "", "dual"], [269, 2, 1, "", "dynkin_diagram"], [269, 2, 1, "", "index_set"], [269, 2, 1, "", "type"]], "sage.combinat.root_system.type_relabel.CartanType_affine": [[269, 2, 1, "", "basic_untwisted"], [269, 2, 1, "", "classical"], [269, 2, 1, "", "is_untwisted_affine"], [269, 2, 1, "", "special_node"]], "sage.combinat.root_system.type_relabel.CartanType_finite": [[269, 4, 1, "", "AmbientSpace"], [269, 2, 1, "", "affine"]], "sage.combinat.root_system.type_super_A": [[270, 1, 1, "", "AmbientSpace"], [270, 1, 1, "", "CartanType"]], "sage.combinat.root_system.type_super_A.AmbientSpace": [[270, 1, 1, "", "Element"], [270, 2, 1, "", "dimension"], [270, 2, 1, "", "fundamental_weight"], [270, 2, 1, "", "highest_root"], [270, 2, 1, "", "negative_even_roots"], [270, 2, 1, "", "negative_odd_roots"], [270, 2, 1, "", "negative_roots"], [270, 2, 1, "", "positive_even_roots"], [270, 2, 1, "", "positive_odd_roots"], [270, 2, 1, "", "positive_roots"], [270, 2, 1, "", "simple_coroot"], [270, 2, 1, "", "simple_root"], [270, 2, 1, "", "smallest_base_ring"]], "sage.combinat.root_system.type_super_A.AmbientSpace.Element": [[270, 2, 1, "", "associated_coroot"], [270, 2, 1, "", "dot_product"], [270, 2, 1, "", "has_descent"], [270, 2, 1, "", "inner_product"], [270, 2, 1, "", "is_dominant_weight"], [270, 2, 1, "", "scalar"]], "sage.combinat.root_system.type_super_A.CartanType": [[270, 4, 1, "", "AmbientSpace"], [270, 2, 1, "", "ascii_art"], [270, 2, 1, "", "cartan_matrix"], [270, 2, 1, "", "dual"], [270, 2, 1, "", "dynkin_diagram"], [270, 2, 1, "", "index_set"], [270, 2, 1, "", "is_affine"], [270, 2, 1, "", "is_finite"], [270, 2, 1, "", "is_irreducible"], [270, 2, 1, "", "relabel"], [270, 2, 1, "", "root_system"], [270, 2, 1, "", "symmetrizer"], [270, 2, 1, "", "type"]], "sage.combinat.root_system.weight_lattice_realizations": [[271, 1, 1, "", "WeightLatticeRealizations"]], "sage.combinat.root_system.weight_lattice_realizations.WeightLatticeRealizations": [[271, 1, 1, "", "ElementMethods"], [271, 1, 1, "", "ParentMethods"], [271, 2, 1, "", "super_categories"]], "sage.combinat.root_system.weight_lattice_realizations.WeightLatticeRealizations.ElementMethods": [[271, 2, 1, "", "symmetric_form"], [271, 2, 1, "", "to_weight_space"]], "sage.combinat.root_system.weight_lattice_realizations.WeightLatticeRealizations.ParentMethods": [[271, 2, 1, "", "dynkin_diagram_automorphism_of_alcove_morphism"], [271, 2, 1, "", "embed_at_level"], [271, 2, 1, "", "fundamental_weight"], [271, 2, 1, "", "fundamental_weights"], [271, 2, 1, "", "is_extended"], [271, 2, 1, "", "reduced_word_of_alcove_morphism"], [271, 2, 1, "", "reduced_word_of_translation"], [271, 2, 1, "", "rho"], [271, 2, 1, "", "rho_classical"], [271, 2, 1, "", "signs_of_alcovewalk"], [271, 2, 1, "", "simple_root"], [271, 2, 1, "", "weyl_dimension"]], "sage.combinat.root_system.weight_space": [[272, 1, 1, "", "WeightSpace"], [272, 1, 1, "", "WeightSpaceElement"]], "sage.combinat.root_system.weight_space.WeightSpace": [[272, 4, 1, "", "Element"], [272, 2, 1, "", "basis_extension"], [272, 2, 1, "", "fundamental_weight"], [272, 2, 1, "", "is_extended"], [272, 2, 1, "", "simple_root"], [272, 2, 1, "", "to_ambient_space_morphism"]], "sage.combinat.root_system.weight_space.WeightSpaceElement": [[272, 2, 1, "", "is_dominant"], [272, 2, 1, "", "scalar"], [272, 2, 1, "", "to_ambient"], [272, 2, 1, "", "to_weight_space"]], "sage.combinat.root_system.weyl_characters": [[273, 1, 1, "", "WeightRing"], [273, 1, 1, "", "WeylCharacterRing"], [273, 3, 1, "", "irreducible_character_freudenthal"]], "sage.combinat.root_system.weyl_characters.WeightRing": [[273, 1, 1, "", "Element"], [273, 2, 1, "", "cartan_type"], [273, 2, 1, "", "fundamental_weights"], [273, 2, 1, "", "one_basis"], [273, 2, 1, "", "parent"], [273, 2, 1, "", "positive_roots"], [273, 2, 1, "", "product_on_basis"], [273, 2, 1, "", "simple_roots"], [273, 2, 1, "", "some_elements"], [273, 2, 1, "", "space"], [273, 2, 1, "", "weyl_character_ring"], [273, 2, 1, "", "wt_repr"]], "sage.combinat.root_system.weyl_characters.WeightRing.Element": [[273, 2, 1, "", "cartan_type"], [273, 2, 1, "", "character"], [273, 2, 1, "", "demazure"], [273, 2, 1, "", "demazure_lusztig"], [273, 2, 1, "", "scale"], [273, 2, 1, "", "shift"], [273, 2, 1, "", "weyl_group_action"]], "sage.combinat.root_system.weyl_characters.WeylCharacterRing": [[273, 1, 1, "", "Element"], [273, 2, 1, "", "adjoint_representation"], [273, 2, 1, "", "affine_reflect"], [273, 2, 1, "", "ambient"], [273, 2, 1, "", "base_ring"], [273, 2, 1, "", "cartan_type"], [273, 2, 1, "", "char_from_weights"], [273, 2, 1, "", "demazure_character"], [273, 2, 1, "", "dot_reduce"], [273, 2, 1, "", "dynkin_diagram"], [273, 2, 1, "", "extended_dynkin_diagram"], [273, 2, 1, "", "fundamental_weights"], [273, 2, 1, "", "highest_root"], [273, 2, 1, "", "irr_repr"], [273, 2, 1, "", "level"], [273, 2, 1, "", "lift"], [273, 2, 1, "", "lift_on_basis"], [273, 2, 1, "", "maximal_subgroup"], [273, 2, 1, "", "maximal_subgroups"], [273, 2, 1, "", "one_basis"], [273, 2, 1, "", "positive_roots"], [273, 2, 1, "", "product_on_basis"], [273, 2, 1, "", "rank"], [273, 2, 1, "", "retract"], [273, 2, 1, "", "simple_coroots"], [273, 2, 1, "", "simple_roots"], [273, 2, 1, "", "some_elements"], [273, 2, 1, "", "space"]], "sage.combinat.root_system.weyl_characters.WeylCharacterRing.Element": [[273, 2, 1, "", "adams_operation"], [273, 2, 1, "", "adams_operator"], [273, 2, 1, "", "branch"], [273, 2, 1, "", "cartan_type"], [273, 2, 1, "", "degree"], [273, 2, 1, "", "dual"], [273, 2, 1, "", "exterior_power"], [273, 2, 1, "", "exterior_square"], [273, 2, 1, "", "frobenius_schur_indicator"], [273, 2, 1, "", "highest_weight"], [273, 2, 1, "", "inner_product"], [273, 2, 1, "", "invariant_degree"], [273, 2, 1, "", "is_irreducible"], [273, 2, 1, "", "multiplicity"], [273, 2, 1, "", "symmetric_power"], [273, 2, 1, "", "symmetric_square"], [273, 2, 1, "", "weight_multiplicities"]], "sage.combinat.root_system.weyl_group": [[274, 1, 1, "", "ClassicalWeylSubgroup"], [274, 3, 1, "", "WeylGroup"], [274, 1, 1, "", "WeylGroupElement"], [274, 1, 1, "", "WeylGroup_gens"], [274, 1, 1, "", "WeylGroup_permutation"]], "sage.combinat.root_system.weyl_group.ClassicalWeylSubgroup": [[274, 2, 1, "", "cartan_type"], [274, 2, 1, "", "simple_reflections"], [274, 2, 1, "", "weyl_group"]], "sage.combinat.root_system.weyl_group.WeylGroupElement": [[274, 2, 1, "", "action"], [274, 2, 1, "", "apply_simple_reflection"], [274, 2, 1, "", "domain"], [274, 2, 1, "", "has_descent"], [274, 2, 1, "", "has_left_descent"], [274, 2, 1, "", "has_right_descent"], [274, 2, 1, "", "to_matrix"], [274, 2, 1, "", "to_permutation"], [274, 2, 1, "", "to_permutation_string"]], "sage.combinat.root_system.weyl_group.WeylGroup_gens": [[274, 4, 1, "", "Element"], [274, 2, 1, "", "cartan_type"], [274, 2, 1, "", "character_table"], [274, 2, 1, "", "classical"], [274, 2, 1, "", "domain"], [274, 2, 1, "", "from_morphism"], [274, 2, 1, "", "index_set"], [274, 2, 1, "", "long_element_hardcoded"], [274, 2, 1, "", "morphism_matrix"], [274, 2, 1, "", "one"], [274, 2, 1, "", "reflections"], [274, 2, 1, "", "simple_reflection"], [274, 2, 1, "", "simple_reflections"], [274, 2, 1, "", "unit"]], "sage.combinat.root_system.weyl_group.WeylGroup_permutation": [[274, 1, 1, "", "Element"], [274, 2, 1, "", "cartan_type"], [274, 2, 1, "", "distinguished_reflections"], [274, 2, 1, "", "independent_roots"], [274, 2, 1, "", "index_set"], [274, 2, 1, "", "iteration"], [274, 2, 1, "", "number_of_reflections"], [274, 2, 1, "", "positive_roots"], [274, 2, 1, "", "rank"], [274, 2, 1, "", "reflection_index_set"], [274, 2, 1, "", "reflections"], [274, 2, 1, "", "roots"], [274, 2, 1, "", "simple_reflection"], [274, 2, 1, "", "simple_root_index"], [274, 2, 1, "", "simple_roots"]], "sage.combinat.rooted_tree": [[275, 1, 1, "", "LabelledRootedTree"], [275, 1, 1, "", "LabelledRootedTrees"], [275, 1, 1, "", "LabelledRootedTrees_all"], [275, 1, 1, "", "RootedTree"], [275, 1, 1, "", "RootedTrees"], [275, 1, 1, "", "RootedTrees_all"], [275, 1, 1, "", "RootedTrees_size"], [275, 3, 1, "", "number_of_rooted_trees"]], "sage.combinat.rooted_tree.LabelledRootedTree": [[275, 2, 1, "", "sort_key"]], "sage.combinat.rooted_tree.LabelledRootedTrees_all": [[275, 4, 1, "", "Element"], [275, 2, 1, "", "labelled_trees"], [275, 2, 1, "", "unlabelled_trees"]], "sage.combinat.rooted_tree.RootedTree": [[275, 2, 1, "", "graft_list"], [275, 2, 1, "", "graft_on_root"], [275, 2, 1, "", "is_empty"], [275, 2, 1, "", "normalize"], [275, 2, 1, "", "single_graft"], [275, 2, 1, "", "sort_key"]], "sage.combinat.rooted_tree.RootedTrees_all": [[275, 4, 1, "", "Element"], [275, 2, 1, "", "labelled_trees"], [275, 2, 1, "", "leaf"], [275, 2, 1, "", "unlabelled_trees"]], "sage.combinat.rooted_tree.RootedTrees_size": [[275, 2, 1, "", "cardinality"], [275, 2, 1, "", "check_element"], [275, 2, 1, "", "element_class"]], "sage.combinat.rsk": [[276, 1, 1, "", "InsertionRules"], [276, 3, 1, "", "RSK"], [276, 3, 1, "", "RSK_inverse"], [276, 1, 1, "", "Rule"], [276, 1, 1, "", "RuleCoRSK"], [276, 1, 1, "", "RuleDualRSK"], [276, 1, 1, "", "RuleEG"], [276, 1, 1, "", "RuleHecke"], [276, 1, 1, "", "RuleRSK"], [276, 1, 1, "", "RuleStar"], [276, 1, 1, "", "RuleSuperRSK"], [276, 3, 1, "", "robinson_schensted_knuth"], [276, 3, 1, "", "robinson_schensted_knuth_inverse"], [276, 3, 1, "", "to_matrix"]], "sage.combinat.rsk.InsertionRules": [[276, 4, 1, "", "EG"], [276, 4, 1, "", "Hecke"], [276, 4, 1, "", "RSK"], [276, 4, 1, "", "Star"], [276, 4, 1, "", "coRSK"], [276, 4, 1, "", "dualRSK"], [276, 4, 1, "", "superRSK"]], "sage.combinat.rsk.Rule": [[276, 2, 1, "", "backward_rule"], [276, 2, 1, "", "forward_rule"], [276, 2, 1, "", "to_pairs"]], "sage.combinat.rsk.RuleCoRSK": [[276, 2, 1, "", "backward_rule"], [276, 2, 1, "", "to_pairs"]], "sage.combinat.rsk.RuleDualRSK": [[276, 2, 1, "", "insertion"], [276, 2, 1, "", "reverse_insertion"], [276, 2, 1, "", "to_pairs"]], "sage.combinat.rsk.RuleEG": [[276, 2, 1, "", "insertion"], [276, 2, 1, "", "reverse_insertion"]], "sage.combinat.rsk.RuleHecke": [[276, 2, 1, "", "backward_rule"], [276, 2, 1, "", "forward_rule"], [276, 2, 1, "", "insertion"], [276, 2, 1, "", "reverse_insertion"]], "sage.combinat.rsk.RuleRSK": [[276, 2, 1, "", "insertion"], [276, 2, 1, "", "reverse_insertion"]], "sage.combinat.rsk.RuleStar": [[276, 2, 1, "", "backward_rule"], [276, 2, 1, "", "forward_rule"], [276, 2, 1, "", "insertion"], [276, 2, 1, "", "reverse_insertion"]], "sage.combinat.rsk.RuleSuperRSK": [[276, 2, 1, "", "backward_rule"], [276, 2, 1, "", "forward_rule"], [276, 2, 1, "", "insertion"], [276, 2, 1, "", "reverse_insertion"], [276, 2, 1, "", "to_pairs"]], "sage.combinat.schubert_polynomial": [[277, 3, 1, "", "SchubertPolynomialRing"], [277, 1, 1, "", "SchubertPolynomialRing_xbasis"], [277, 1, 1, "", "SchubertPolynomial_class"]], "sage.combinat.schubert_polynomial.SchubertPolynomialRing_xbasis": [[277, 4, 1, "", "Element"], [277, 2, 1, "", "one_basis"], [277, 2, 1, "", "product_on_basis"], [277, 2, 1, "", "some_elements"]], "sage.combinat.schubert_polynomial.SchubertPolynomial_class": [[277, 2, 1, "", "divided_difference"], [277, 2, 1, "", "expand"], [277, 2, 1, "", "multiply_variable"], [277, 2, 1, "", "scalar_product"]], "sage.combinat.set_partition": [[278, 1, 1, "", "AbstractSetPartition"], [278, 1, 1, "", "SetPartition"], [278, 1, 1, "", "SetPartitions"], [278, 1, 1, "", "SetPartitions_all"], [278, 1, 1, "", "SetPartitions_set"], [278, 1, 1, "", "SetPartitions_setn"], [278, 1, 1, "", "SetPartitions_setparts"], [278, 3, 1, "", "cyclic_permutations_of_set_partition"], [278, 3, 1, "", "cyclic_permutations_of_set_partition_iterator"]], "sage.combinat.set_partition.AbstractSetPartition": [[278, 2, 1, "", "base_set"], [278, 2, 1, "", "base_set_cardinality"], [278, 2, 1, "", "coarsenings"], [278, 2, 1, "", "conjugate"], [278, 2, 1, "", "inf"], [278, 2, 1, "", "max_block_size"], [278, 2, 1, "", "standard_form"], [278, 2, 1, "", "sup"]], "sage.combinat.set_partition.SetPartition": [[278, 2, 1, "", "apply_permutation"], [278, 2, 1, "", "arcs"], [278, 2, 1, "", "cardinality"], [278, 2, 1, "", "check"], [278, 2, 1, "", "closers"], [278, 2, 1, "", "crossings"], [278, 2, 1, "", "crossings_iterator"], [278, 2, 1, "", "is_atomic"], [278, 2, 1, "", "is_noncrossing"], [278, 2, 1, "", "is_nonnesting"], [278, 2, 1, "", "latex_options"], [278, 2, 1, "", "nestings"], [278, 2, 1, "", "nestings_iterator"], [278, 2, 1, "", "number_of_crossings"], [278, 2, 1, "", "number_of_nestings"], [278, 2, 1, "", "openers"], [278, 2, 1, "", "ordered_set_partition_action"], [278, 2, 1, "", "pipe"], [278, 2, 1, "", "plot"], [278, 2, 1, "", "refinements"], [278, 2, 1, "", "restriction"], [278, 2, 1, "", "set_latex_options"], [278, 2, 1, "", "shape"], [278, 2, 1, "", "shape_partition"], [278, 2, 1, "", "size"], [278, 2, 1, "", "standardization"], [278, 2, 1, "", "strict_coarsenings"], [278, 2, 1, "", "to_partition"], [278, 2, 1, "", "to_permutation"], [278, 2, 1, "", "to_restricted_growth_word"], [278, 2, 1, "", "to_restricted_growth_word_blocks"], [278, 2, 1, "", "to_restricted_growth_word_intertwining"], [278, 2, 1, "", "to_rook_placement"], [278, 2, 1, "", "to_rook_placement_gamma"], [278, 2, 1, "", "to_rook_placement_psi"], [278, 2, 1, "", "to_rook_placement_rho"]], "sage.combinat.set_partition.SetPartitions": [[278, 4, 1, "", "Element"], [278, 2, 1, "", "from_arcs"], [278, 2, 1, "", "from_restricted_growth_word"], [278, 2, 1, "", "from_restricted_growth_word_blocks"], [278, 2, 1, "", "from_restricted_growth_word_intertwining"], [278, 2, 1, "", "from_rook_placement"], [278, 2, 1, "", "from_rook_placement_gamma"], [278, 2, 1, "", "from_rook_placement_psi"], [278, 2, 1, "", "from_rook_placement_rho"], [278, 2, 1, "", "is_less_than"], [278, 2, 1, "", "is_strict_refinement"], [278, 2, 1, "", "lt"]], "sage.combinat.set_partition.SetPartitions_all": [[278, 2, 1, "", "subset"]], "sage.combinat.set_partition.SetPartitions_set": [[278, 2, 1, "", "base_set"], [278, 2, 1, "", "base_set_cardinality"], [278, 2, 1, "", "cardinality"], [278, 2, 1, "", "random_element"]], "sage.combinat.set_partition.SetPartitions_setn": [[278, 2, 1, "", "cardinality"], [278, 2, 1, "", "number_of_blocks"], [278, 2, 1, "", "random_element"]], "sage.combinat.set_partition.SetPartitions_setparts": [[278, 2, 1, "", "cardinality"], [278, 2, 1, "", "random_element"], [278, 2, 1, "", "shape"]], "sage.combinat.set_partition_iterator": [[279, 3, 1, "", "set_partition_iterator"], [279, 3, 1, "", "set_partition_iterator_blocks"]], "sage.combinat.set_partition_ordered": [[280, 1, 1, "", "OrderedSetPartition"], [280, 1, 1, "", "OrderedSetPartitions"], [280, 1, 1, "", "OrderedSetPartitions_all"], [280, 1, 1, "", "OrderedSetPartitions_s"], [280, 1, 1, "", "OrderedSetPartitions_scomp"], [280, 1, 1, "", "OrderedSetPartitions_sn"], [280, 1, 1, "", "SplitNK"], [280, 3, 1, "", "multiset_permutation_next_lex"], [280, 3, 1, "", "multiset_permutation_to_ordered_set_partition"]], "sage.combinat.set_partition_ordered.OrderedSetPartition": [[280, 2, 1, "", "base_set"], [280, 2, 1, "", "base_set_cardinality"], [280, 2, 1, "", "bottom_up_osp"], [280, 2, 1, "", "check"], [280, 2, 1, "", "complement"], [280, 2, 1, "", "fatten"], [280, 2, 1, "", "fatter"], [280, 2, 1, "", "finer"], [280, 2, 1, "", "is_finer"], [280, 2, 1, "", "is_strongly_finer"], [280, 2, 1, "", "length"], [280, 2, 1, "", "number_of_inversions"], [280, 2, 1, "", "reversed"], [280, 2, 1, "", "size"], [280, 2, 1, "", "strongly_fatter"], [280, 2, 1, "", "strongly_finer"], [280, 2, 1, "", "sum"], [280, 2, 1, "", "to_composition"], [280, 2, 1, "", "to_packed_word"]], "sage.combinat.set_partition_ordered.OrderedSetPartitions": [[280, 4, 1, "", "Element"], [280, 2, 1, "", "from_finite_word"]], "sage.combinat.set_partition_ordered.OrderedSetPartitions_all": [[280, 1, 1, "", "Element"], [280, 2, 1, "", "subset"]], "sage.combinat.set_partition_ordered.OrderedSetPartitions_s": [[280, 2, 1, "", "cardinality"]], "sage.combinat.set_partition_ordered.OrderedSetPartitions_scomp": [[280, 2, 1, "", "cardinality"]], "sage.combinat.set_partition_ordered.OrderedSetPartitions_sn": [[280, 2, 1, "", "cardinality"]], "sage.combinat.sf": [[281, 0, 0, "-", "all"], [282, 0, 0, "-", "character"], [283, 0, 0, "-", "classical"], [284, 0, 0, "-", "dual"], [285, 0, 0, "-", "elementary"], [286, 0, 0, "-", "hall_littlewood"], [287, 0, 0, "-", "hecke"], [288, 0, 0, "-", "homogeneous"], [289, 0, 0, "-", "jack"], [290, 0, 0, "-", "k_dual"], [291, 0, 0, "-", "kfpoly"], [292, 0, 0, "-", "llt"], [293, 0, 0, "-", "macdonald"], [294, 0, 0, "-", "monomial"], [295, 0, 0, "-", "multiplicative"], [296, 0, 0, "-", "new_kschur"], [297, 0, 0, "-", "ns_macdonald"], [298, 0, 0, "-", "orthogonal"], [299, 0, 0, "-", "orthotriang"], [300, 0, 0, "-", "powersum"], [301, 0, 0, "-", "schur"], [302, 0, 0, "-", "sf"], [303, 0, 0, "-", "sfa"], [304, 0, 0, "-", "symplectic"], [305, 0, 0, "-", "witt"]], "sage.combinat.sf.character": [[282, 1, 1, "", "generic_character"], [282, 1, 1, "", "induced_trivial_character_basis"], [282, 1, 1, "", "irreducible_character_basis"]], "sage.combinat.sf.classical": [[283, 1, 1, "", "SymmetricFunctionAlgebra_classical"], [283, 3, 1, "", "init"]], "sage.combinat.sf.classical.SymmetricFunctionAlgebra_classical": [[283, 1, 1, "", "Element"]], "sage.combinat.sf.dual": [[284, 1, 1, "", "SymmetricFunctionAlgebra_dual"]], "sage.combinat.sf.dual.SymmetricFunctionAlgebra_dual": [[284, 1, 1, "", "Element"], [284, 2, 1, "", "product"], [284, 2, 1, "", "transition_matrix"]], "sage.combinat.sf.dual.SymmetricFunctionAlgebra_dual.Element": [[284, 2, 1, "", "dual"], [284, 2, 1, "", "expand"], [284, 2, 1, "", "omega"], [284, 2, 1, "", "omega_involution"], [284, 2, 1, "", "scalar"], [284, 2, 1, "", "scalar_hl"]], "sage.combinat.sf.elementary": [[285, 1, 1, "", "SymmetricFunctionAlgebra_elementary"]], "sage.combinat.sf.elementary.SymmetricFunctionAlgebra_elementary": [[285, 1, 1, "", "Element"], [285, 2, 1, "", "coproduct_on_generators"]], "sage.combinat.sf.elementary.SymmetricFunctionAlgebra_elementary.Element": [[285, 2, 1, "", "expand"], [285, 2, 1, "", "exponential_specialization"], [285, 2, 1, "", "omega"], [285, 2, 1, "", "omega_involution"], [285, 2, 1, "", "principal_specialization"], [285, 2, 1, "", "verschiebung"]], "sage.combinat.sf.hall_littlewood": [[286, 1, 1, "", "HallLittlewood"], [286, 1, 1, "", "HallLittlewood_generic"], [286, 1, 1, "", "HallLittlewood_p"], [286, 1, 1, "", "HallLittlewood_q"], [286, 1, 1, "", "HallLittlewood_qp"]], "sage.combinat.sf.hall_littlewood.HallLittlewood": [[286, 2, 1, "", "P"], [286, 2, 1, "", "Q"], [286, 2, 1, "", "Qp"], [286, 2, 1, "", "base_ring"], [286, 2, 1, "", "symmetric_function_ring"]], "sage.combinat.sf.hall_littlewood.HallLittlewood_generic": [[286, 1, 1, "", "Element"], [286, 2, 1, "", "hall_littlewood_family"], [286, 2, 1, "", "product"], [286, 2, 1, "", "transition_matrix"]], "sage.combinat.sf.hall_littlewood.HallLittlewood_generic.Element": [[286, 2, 1, "", "expand"], [286, 2, 1, "", "scalar"], [286, 2, 1, "", "scalar_hl"]], "sage.combinat.sf.hall_littlewood.HallLittlewood_p": [[286, 1, 1, "", "Element"]], "sage.combinat.sf.hall_littlewood.HallLittlewood_q": [[286, 1, 1, "", "Element"]], "sage.combinat.sf.hall_littlewood.HallLittlewood_qp": [[286, 1, 1, "", "Element"]], "sage.combinat.sf.hecke": [[287, 1, 1, "", "HeckeCharacter"]], "sage.combinat.sf.hecke.HeckeCharacter": [[287, 2, 1, "", "coproduct_on_generators"]], "sage.combinat.sf.homogeneous": [[288, 1, 1, "", "SymmetricFunctionAlgebra_homogeneous"]], "sage.combinat.sf.homogeneous.SymmetricFunctionAlgebra_homogeneous": [[288, 1, 1, "", "Element"], [288, 2, 1, "", "coproduct_on_generators"]], "sage.combinat.sf.homogeneous.SymmetricFunctionAlgebra_homogeneous.Element": [[288, 2, 1, "", "expand"], [288, 2, 1, "", "exponential_specialization"], [288, 2, 1, "", "omega"], [288, 2, 1, "", "omega_involution"], [288, 2, 1, "", "principal_specialization"]], "sage.combinat.sf.jack": [[289, 1, 1, "", "Jack"], [289, 1, 1, "", "JackPolynomials_generic"], [289, 1, 1, "", "JackPolynomials_j"], [289, 1, 1, "", "JackPolynomials_p"], [289, 1, 1, "", "JackPolynomials_q"], [289, 1, 1, "", "JackPolynomials_qp"], [289, 1, 1, "", "SymmetricFunctionAlgebra_zonal"], [289, 3, 1, "", "c1"], [289, 3, 1, "", "c2"], [289, 3, 1, "", "normalize_coefficients"], [289, 3, 1, "", "part_scalar_jack"]], "sage.combinat.sf.jack.Jack": [[289, 2, 1, "", "J"], [289, 2, 1, "", "P"], [289, 2, 1, "", "Q"], [289, 2, 1, "", "Qp"], [289, 2, 1, "", "base_ring"], [289, 2, 1, "", "symmetric_function_ring"]], "sage.combinat.sf.jack.JackPolynomials_generic": [[289, 1, 1, "", "Element"], [289, 2, 1, "", "c1"], [289, 2, 1, "", "c2"], [289, 2, 1, "", "coproduct_by_coercion"], [289, 2, 1, "", "jack_family"], [289, 2, 1, "", "product"]], "sage.combinat.sf.jack.JackPolynomials_generic.Element": [[289, 2, 1, "", "scalar_jack"]], "sage.combinat.sf.jack.JackPolynomials_j": [[289, 1, 1, "", "Element"]], "sage.combinat.sf.jack.JackPolynomials_p": [[289, 1, 1, "", "Element"], [289, 2, 1, "", "product"], [289, 2, 1, "", "scalar_jack_basis"]], "sage.combinat.sf.jack.JackPolynomials_p.Element": [[289, 2, 1, "", "scalar_jack"]], "sage.combinat.sf.jack.JackPolynomials_q": [[289, 1, 1, "", "Element"]], "sage.combinat.sf.jack.JackPolynomials_qp": [[289, 1, 1, "", "Element"], [289, 2, 1, "", "coproduct_by_coercion"], [289, 2, 1, "", "product"]], "sage.combinat.sf.jack.SymmetricFunctionAlgebra_zonal": [[289, 1, 1, "", "Element"], [289, 2, 1, "", "product"]], "sage.combinat.sf.jack.SymmetricFunctionAlgebra_zonal.Element": [[289, 2, 1, "", "scalar_zonal"]], "sage.combinat.sf.k_dual": [[290, 1, 1, "", "AffineSchurFunctions"], [290, 1, 1, "", "DualkSchurFunctions"], [290, 1, 1, "", "KBoundedQuotient"], [290, 1, 1, "", "KBoundedQuotientBases"], [290, 1, 1, "", "KBoundedQuotientBasis"], [290, 1, 1, "", "kMonomial"], [290, 1, 1, "", "kbounded_HallLittlewoodP"]], "sage.combinat.sf.k_dual.KBoundedQuotient": [[290, 2, 1, "", "AffineGrothendieckPolynomial"], [290, 2, 1, "", "F"], [290, 2, 1, "", "a_realization"], [290, 2, 1, "", "affineSchur"], [290, 2, 1, "", "ambient"], [290, 2, 1, "", "an_element"], [290, 2, 1, "", "dks"], [290, 2, 1, "", "dual_k_Schur"], [290, 2, 1, "", "kHLP"], [290, 2, 1, "", "kHallLittlewoodP"], [290, 2, 1, "", "km"], [290, 2, 1, "", "kmonomial"], [290, 2, 1, "", "lift"], [290, 2, 1, "", "one"], [290, 2, 1, "", "realizations"], [290, 2, 1, "", "retract"]], "sage.combinat.sf.k_dual.KBoundedQuotientBases": [[290, 1, 1, "", "ElementMethods"], [290, 1, 1, "", "ParentMethods"], [290, 2, 1, "", "super_categories"]], "sage.combinat.sf.k_dual.KBoundedQuotientBases.ParentMethods": [[290, 2, 1, "", "ambient"], [290, 2, 1, "", "antipode"], [290, 2, 1, "", "coproduct"], [290, 2, 1, "", "counit"], [290, 2, 1, "", "degree_on_basis"], [290, 2, 1, "", "indices"], [290, 2, 1, "", "lift"], [290, 2, 1, "", "one_basis"], [290, 2, 1, "", "product"], [290, 2, 1, "", "retract"]], "sage.combinat.sf.k_dual.kMonomial": [[290, 2, 1, "", "lift"], [290, 2, 1, "", "retract"]], "sage.combinat.sf.k_dual.kbounded_HallLittlewoodP": [[290, 2, 1, "", "lift"], [290, 2, 1, "", "retract"]], "sage.combinat.sf.kfpoly": [[291, 3, 1, "", "KostkaFoulkesPolynomial"], [291, 3, 1, "", "compat"], [291, 3, 1, "", "dom"], [291, 3, 1, "", "kfpoly"], [291, 3, 1, "", "riggings"], [291, 3, 1, "", "schur_to_hl"], [291, 3, 1, "", "weight"]], "sage.combinat.sf.llt": [[292, 1, 1, "", "LLT_class"], [292, 1, 1, "", "LLT_cospin"], [292, 1, 1, "", "LLT_generic"], [292, 1, 1, "", "LLT_spin"]], "sage.combinat.sf.llt.LLT_class": [[292, 2, 1, "", "base_ring"], [292, 2, 1, "", "cospin"], [292, 2, 1, "", "hcospin"], [292, 2, 1, "", "hspin"], [292, 2, 1, "", "level"], [292, 2, 1, "", "spin_square"], [292, 2, 1, "", "symmetric_function_ring"]], "sage.combinat.sf.llt.LLT_cospin": [[292, 1, 1, "", "Element"]], "sage.combinat.sf.llt.LLT_generic": [[292, 1, 1, "", "Element"], [292, 2, 1, "", "level"], [292, 2, 1, "", "llt_family"], [292, 2, 1, "", "product"]], "sage.combinat.sf.llt.LLT_spin": [[292, 1, 1, "", "Element"]], "sage.combinat.sf.macdonald": [[293, 1, 1, "", "Macdonald"], [293, 1, 1, "", "MacdonaldPolynomials_generic"], [293, 1, 1, "", "MacdonaldPolynomials_h"], [293, 1, 1, "", "MacdonaldPolynomials_ht"], [293, 1, 1, "", "MacdonaldPolynomials_j"], [293, 1, 1, "", "MacdonaldPolynomials_p"], [293, 1, 1, "", "MacdonaldPolynomials_q"], [293, 1, 1, "", "MacdonaldPolynomials_s"], [293, 3, 1, "", "c1"], [293, 3, 1, "", "c2"], [293, 3, 1, "", "cmunu"], [293, 3, 1, "", "cmunu1"], [293, 3, 1, "", "qt_kostka"]], "sage.combinat.sf.macdonald.Macdonald": [[293, 2, 1, "", "H"], [293, 2, 1, "", "Ht"], [293, 2, 1, "", "J"], [293, 2, 1, "", "P"], [293, 2, 1, "", "Q"], [293, 2, 1, "", "S"], [293, 2, 1, "", "base_ring"], [293, 2, 1, "", "symmetric_function_ring"]], "sage.combinat.sf.macdonald.MacdonaldPolynomials_generic": [[293, 1, 1, "", "Element"], [293, 2, 1, "", "c1"], [293, 2, 1, "", "c2"], [293, 2, 1, "", "macdonald_family"], [293, 2, 1, "", "product"]], "sage.combinat.sf.macdonald.MacdonaldPolynomials_generic.Element": [[293, 2, 1, "", "nabla"]], "sage.combinat.sf.macdonald.MacdonaldPolynomials_h": [[293, 1, 1, "", "Element"]], "sage.combinat.sf.macdonald.MacdonaldPolynomials_ht": [[293, 1, 1, "", "Element"]], "sage.combinat.sf.macdonald.MacdonaldPolynomials_ht.Element": [[293, 2, 1, "", "nabla"]], "sage.combinat.sf.macdonald.MacdonaldPolynomials_j": [[293, 1, 1, "", "Element"]], "sage.combinat.sf.macdonald.MacdonaldPolynomials_p": [[293, 1, 1, "", "Element"], [293, 2, 1, "", "scalar_qt_basis"]], "sage.combinat.sf.macdonald.MacdonaldPolynomials_q": [[293, 1, 1, "", "Element"]], "sage.combinat.sf.macdonald.MacdonaldPolynomials_s": [[293, 1, 1, "", "Element"], [293, 2, 1, "", "product"]], "sage.combinat.sf.macdonald.MacdonaldPolynomials_s.Element": [[293, 2, 1, "", "creation"]], "sage.combinat.sf.monomial": [[294, 1, 1, "", "SymmetricFunctionAlgebra_monomial"]], "sage.combinat.sf.monomial.SymmetricFunctionAlgebra_monomial": [[294, 1, 1, "", "Element"], [294, 2, 1, "", "antipode_by_coercion"], [294, 2, 1, "", "from_polynomial"], [294, 2, 1, "", "from_polynomial_exp"], [294, 2, 1, "", "product"]], "sage.combinat.sf.monomial.SymmetricFunctionAlgebra_monomial.Element": [[294, 2, 1, "", "expand"], [294, 2, 1, "", "exponential_specialization"], [294, 2, 1, "", "principal_specialization"]], "sage.combinat.sf.multiplicative": [[295, 1, 1, "", "SymmetricFunctionAlgebra_multiplicative"]], "sage.combinat.sf.multiplicative.SymmetricFunctionAlgebra_multiplicative": [[295, 2, 1, "", "coproduct_on_basis"], [295, 2, 1, "", "product_on_basis"]], "sage.combinat.sf.new_kschur": [[296, 1, 1, "", "KBoundedSubspace"], [296, 1, 1, "", "KBoundedSubspaceBases"], [296, 1, 1, "", "K_kSchur"], [296, 1, 1, "", "kHomogeneous"], [296, 1, 1, "", "kSchur"], [296, 1, 1, "", "kSplit"]], "sage.combinat.sf.new_kschur.KBoundedSubspace": [[296, 2, 1, "", "K_kschur"], [296, 2, 1, "", "khomogeneous"], [296, 2, 1, "", "kschur"], [296, 2, 1, "", "ksplit"], [296, 2, 1, "", "realizations"], [296, 2, 1, "", "retract"]], "sage.combinat.sf.new_kschur.KBoundedSubspaceBases": [[296, 1, 1, "", "ElementMethods"], [296, 1, 1, "", "ParentMethods"], [296, 2, 1, "", "super_categories"]], "sage.combinat.sf.new_kschur.KBoundedSubspaceBases.ElementMethods": [[296, 2, 1, "", "expand"], [296, 2, 1, "", "hl_creation_operator"], [296, 2, 1, "", "is_schur_positive"], [296, 2, 1, "", "omega"], [296, 2, 1, "", "omega_t_inverse"], [296, 2, 1, "", "scalar"]], "sage.combinat.sf.new_kschur.KBoundedSubspaceBases.ParentMethods": [[296, 2, 1, "", "an_element"], [296, 2, 1, "", "antipode"], [296, 2, 1, "", "coproduct"], [296, 2, 1, "", "counit"], [296, 2, 1, "", "degree_on_basis"], [296, 2, 1, "", "one_basis"], [296, 2, 1, "", "transition_matrix"]], "sage.combinat.sf.new_kschur.K_kSchur": [[296, 2, 1, "", "K_k_Schur_non_commutative_variables"], [296, 2, 1, "", "homogeneous_basis_noncommutative_variables_zero_Hecke"], [296, 2, 1, "", "lift"], [296, 2, 1, "", "product"], [296, 2, 1, "", "retract"]], "sage.combinat.sf.new_kschur.kSchur": [[296, 2, 1, "", "product_on_basis"]], "sage.combinat.sf.ns_macdonald": [[297, 1, 1, "", "AugmentedLatticeDiagramFilling"], [297, 3, 1, "", "E"], [297, 3, 1, "", "E_integral"], [297, 3, 1, "", "Ht"], [297, 1, 1, "", "LatticeDiagram"], [297, 1, 1, "", "NonattackingBacktracker"], [297, 3, 1, "", "NonattackingFillings"], [297, 1, 1, "", "NonattackingFillings_shape"]], "sage.combinat.sf.ns_macdonald.AugmentedLatticeDiagramFilling": [[297, 2, 1, "", "are_attacking"], [297, 2, 1, "", "attacking_boxes"], [297, 2, 1, "", "boxes"], [297, 2, 1, "", "coeff"], [297, 2, 1, "", "coeff_integral"], [297, 2, 1, "", "coinv"], [297, 2, 1, "", "descents"], [297, 2, 1, "", "inv"], [297, 2, 1, "", "inversions"], [297, 2, 1, "", "is_non_attacking"], [297, 2, 1, "", "maj"], [297, 2, 1, "", "permuted_filling"], [297, 2, 1, "", "reading_order"], [297, 2, 1, "", "reading_word"], [297, 2, 1, "", "shape"], [297, 2, 1, "", "weight"]], "sage.combinat.sf.ns_macdonald.LatticeDiagram": [[297, 2, 1, "", "a"], [297, 2, 1, "", "arm"], [297, 2, 1, "", "arm_left"], [297, 2, 1, "", "arm_right"], [297, 2, 1, "", "boxes"], [297, 2, 1, "", "boxes_same_and_lower_right"], [297, 2, 1, "", "flip"], [297, 2, 1, "", "l"], [297, 2, 1, "", "leg"], [297, 2, 1, "", "size"]], "sage.combinat.sf.ns_macdonald.NonattackingBacktracker": [[297, 2, 1, "", "get_next_pos"]], "sage.combinat.sf.ns_macdonald.NonattackingFillings_shape": [[297, 2, 1, "", "flip"]], "sage.combinat.sf.orthogonal": [[298, 1, 1, "", "SymmetricFunctionAlgebra_orthogonal"]], "sage.combinat.sf.orthotriang": [[299, 1, 1, "", "SymmetricFunctionAlgebra_orthotriang"]], "sage.combinat.sf.orthotriang.SymmetricFunctionAlgebra_orthotriang": [[299, 1, 1, "", "Element"], [299, 2, 1, "", "product"]], "sage.combinat.sf.powersum": [[300, 1, 1, "", "SymmetricFunctionAlgebra_power"]], "sage.combinat.sf.powersum.SymmetricFunctionAlgebra_power": [[300, 1, 1, "", "Element"], [300, 2, 1, "", "antipode_on_basis"], [300, 2, 1, "", "bottom_schur_function"], [300, 2, 1, "", "coproduct_on_generators"], [300, 2, 1, "", "eval_at_permutation_roots_on_generators"]], "sage.combinat.sf.powersum.SymmetricFunctionAlgebra_power.Element": [[300, 2, 1, "", "adams_operation"], [300, 2, 1, "", "eval_at_permutation_roots"], [300, 2, 1, "", "expand"], [300, 2, 1, "", "exponential_specialization"], [300, 2, 1, "", "frobenius"], [300, 2, 1, "", "omega"], [300, 2, 1, "", "omega_involution"], [300, 2, 1, "", "principal_specialization"], [300, 2, 1, "", "scalar"], [300, 2, 1, "", "verschiebung"]], "sage.combinat.sf.schur": [[301, 1, 1, "", "SymmetricFunctionAlgebra_schur"]], "sage.combinat.sf.schur.SymmetricFunctionAlgebra_schur": [[301, 1, 1, "", "Element"], [301, 2, 1, "", "coproduct_on_basis"], [301, 2, 1, "", "product_on_basis"]], "sage.combinat.sf.schur.SymmetricFunctionAlgebra_schur.Element": [[301, 2, 1, "", "expand"], [301, 2, 1, "", "exponential_specialization"], [301, 2, 1, "", "omega"], [301, 2, 1, "", "omega_involution"], [301, 2, 1, "", "principal_specialization"], [301, 2, 1, "", "scalar"], [301, 2, 1, "", "verschiebung"]], "sage.combinat.sf.sf": [[302, 1, 1, "", "SymmetricFunctions"], [302, 1, 1, "", "SymmetricaConversionOnBasis"]], "sage.combinat.sf.sf.SymmetricFunctions": [[302, 2, 1, "", "Schur"], [302, 2, 1, "", "Witt"], [302, 2, 1, "", "a_realization"], [302, 2, 1, "", "complete"], [302, 2, 1, "", "e"], [302, 2, 1, "", "elementary"], [302, 2, 1, "", "f"], [302, 2, 1, "", "forgotten"], [302, 2, 1, "", "from_polynomial"], [302, 2, 1, "", "h"], [302, 2, 1, "", "hall_littlewood"], [302, 2, 1, "", "hecke_character"], [302, 2, 1, "", "homogeneous"], [302, 2, 1, "", "ht"], [302, 2, 1, "", "induced_trivial_character"], [302, 2, 1, "", "irreducible_symmetric_group_character"], [302, 2, 1, "", "jack"], [302, 2, 1, "", "kBoundedQuotient"], [302, 2, 1, "", "kBoundedSubspace"], [302, 2, 1, "", "khomogeneous"], [302, 2, 1, "", "kschur"], [302, 2, 1, "", "ksplit"], [302, 2, 1, "", "llt"], [302, 2, 1, "", "m"], [302, 2, 1, "", "macdonald"], [302, 2, 1, "", "monomial"], [302, 2, 1, "", "o"], [302, 2, 1, "", "orthogonal"], [302, 2, 1, "", "p"], [302, 2, 1, "", "power"], [302, 2, 1, "", "powersum"], [302, 2, 1, "", "qbar"], [302, 2, 1, "", "register_isomorphism"], [302, 2, 1, "", "s"], [302, 2, 1, "", "schur"], [302, 2, 1, "", "sp"], [302, 2, 1, "", "st"], [302, 2, 1, "", "symplectic"], [302, 2, 1, "", "w"], [302, 2, 1, "", "witt"], [302, 2, 1, "", "zonal"]], "sage.combinat.sf.sfa": [[303, 1, 1, "", "FilteredSymmetricFunctionsBases"], [303, 1, 1, "", "GradedSymmetricFunctionsBases"], [303, 1, 1, "", "SymmetricFunctionAlgebra_generic"], [303, 1, 1, "", "SymmetricFunctionAlgebra_generic_Element"], [303, 1, 1, "", "SymmetricFunctionsBases"], [303, 3, 1, "", "is_SymmetricFunction"], [303, 3, 1, "", "is_SymmetricFunctionAlgebra"], [303, 3, 1, "", "zee"]], "sage.combinat.sf.sfa.FilteredSymmetricFunctionsBases": [[303, 2, 1, "", "super_categories"]], "sage.combinat.sf.sfa.GradedSymmetricFunctionsBases": [[303, 1, 1, "", "ElementMethods"], [303, 1, 1, "", "ParentMethods"], [303, 2, 1, "", "super_categories"]], "sage.combinat.sf.sfa.GradedSymmetricFunctionsBases.ElementMethods": [[303, 2, 1, "", "degree_negation"], [303, 2, 1, "", "degree_zero_coefficient"], [303, 2, 1, "", "is_unit"]], "sage.combinat.sf.sfa.GradedSymmetricFunctionsBases.ParentMethods": [[303, 2, 1, "", "antipode_by_coercion"], [303, 2, 1, "", "counit"], [303, 2, 1, "", "degree_negation"]], "sage.combinat.sf.sfa.SymmetricFunctionAlgebra_generic": [[303, 4, 1, "", "Element"], [303, 2, 1, "", "basis_name"], [303, 2, 1, "", "coproduct_by_coercion"], [303, 2, 1, "", "dual_basis"], [303, 2, 1, "", "from_polynomial"], [303, 2, 1, "", "get_print_style"], [303, 2, 1, "", "prefix"], [303, 2, 1, "", "product_by_coercion"], [303, 2, 1, "", "set_print_style"], [303, 2, 1, "", "symmetric_function_ring"], [303, 2, 1, "", "transition_matrix"]], "sage.combinat.sf.sfa.SymmetricFunctionAlgebra_generic_Element": [[303, 2, 1, "", "arithmetic_product"], [303, 2, 1, "", "bernstein_creation_operator"], [303, 2, 1, "", "character_to_frobenius_image"], [303, 2, 1, "", "degree"], [303, 2, 1, "", "derivative_with_respect_to_p1"], [303, 2, 1, "", "eval_at_permutation_roots"], [303, 2, 1, "", "expand"], [303, 2, 1, "", "exponential_specialization"], [303, 2, 1, "", "factor"], [303, 2, 1, "", "frobenius"], [303, 2, 1, "", "gcd"], [303, 2, 1, "", "hl_creation_operator"], [303, 2, 1, "", "inner_plethysm"], [303, 2, 1, "", "inner_tensor"], [303, 2, 1, "", "internal_coproduct"], [303, 2, 1, "", "internal_product"], [303, 2, 1, "", "is_schur_positive"], [303, 2, 1, "", "itensor"], [303, 2, 1, "", "kronecker_coproduct"], [303, 2, 1, "", "kronecker_product"], [303, 2, 1, "", "left_padded_kronecker_product"], [303, 2, 1, "", "nabla"], [303, 2, 1, "", "omega"], [303, 2, 1, "", "omega_involution"], [303, 2, 1, "", "omega_qt"], [303, 2, 1, "", "plethysm"], [303, 2, 1, "", "principal_specialization"], [303, 2, 1, "", "reduced_kronecker_product"], [303, 2, 1, "", "restrict_degree"], [303, 2, 1, "", "restrict_partition_lengths"], [303, 2, 1, "", "restrict_parts"], [303, 2, 1, "", "scalar"], [303, 2, 1, "", "scalar_hl"], [303, 2, 1, "", "scalar_jack"], [303, 2, 1, "", "scalar_qt"], [303, 2, 1, "", "scalar_t"], [303, 2, 1, "", "skew_by"], [303, 2, 1, "", "theta"], [303, 2, 1, "", "theta_qt"], [303, 2, 1, "", "verschiebung"]], "sage.combinat.sf.sfa.SymmetricFunctionsBases": [[303, 1, 1, "", "ParentMethods"], [303, 2, 1, "", "super_categories"]], "sage.combinat.sf.sfa.SymmetricFunctionsBases.ParentMethods": [[303, 2, 1, "", "Eulerian"], [303, 2, 1, "", "carlitz_shareshian_wachs"], [303, 2, 1, "", "corresponding_basis_over"], [303, 2, 1, "", "degree_on_basis"], [303, 2, 1, "", "formal_series_ring"], [303, 2, 1, "", "gessel_reutenauer"], [303, 2, 1, "", "higher_lie_character"], [303, 2, 1, "", "is_commutative"], [303, 2, 1, "", "is_field"], [303, 2, 1, "", "is_integral_domain"], [303, 2, 1, "", "lehrer_solomon"], [303, 2, 1, "", "one_basis"], [303, 2, 1, "", "skew_schur"], [303, 2, 1, "", "whitney_homology_character"]], "sage.combinat.sf.symplectic": [[304, 1, 1, "", "SymmetricFunctionAlgebra_symplectic"]], "sage.combinat.sf.witt": [[305, 1, 1, "", "SymmetricFunctionAlgebra_witt"]], "sage.combinat.sf.witt.SymmetricFunctionAlgebra_witt": [[305, 2, 1, "", "coproduct"], [305, 2, 1, "", "from_other_uncached"], [305, 2, 1, "", "verschiebung"]], "sage.combinat.shard_order": [[306, 1, 1, "", "ShardPosetElement"], [306, 3, 1, "", "shard_poset"], [306, 3, 1, "", "shard_preorder_graph"]], "sage.combinat.shifted_primed_tableau": [[307, 1, 1, "", "CrystalElementShiftedPrimedTableau"], [307, 1, 1, "", "PrimedEntry"], [307, 1, 1, "", "ShiftedPrimedTableau"], [307, 1, 1, "", "ShiftedPrimedTableaux"], [307, 1, 1, "", "ShiftedPrimedTableaux_all"], [307, 1, 1, "", "ShiftedPrimedTableaux_shape"], [307, 1, 1, "", "ShiftedPrimedTableaux_weight"], [307, 1, 1, "", "ShiftedPrimedTableaux_weight_shape"]], "sage.combinat.shifted_primed_tableau.CrystalElementShiftedPrimedTableau": [[307, 2, 1, "", "e"], [307, 2, 1, "", "f"], [307, 2, 1, "", "is_highest_weight"], [307, 2, 1, "", "reading_word"], [307, 2, 1, "", "weight"]], "sage.combinat.shifted_primed_tableau.PrimedEntry": [[307, 2, 1, "", "decrease_half"], [307, 2, 1, "", "decrease_one"], [307, 2, 1, "", "increase_half"], [307, 2, 1, "", "increase_one"], [307, 2, 1, "", "integer"], [307, 2, 1, "", "is_primed"], [307, 2, 1, "", "is_unprimed"], [307, 2, 1, "", "primed"], [307, 2, 1, "", "unprimed"]], "sage.combinat.shifted_primed_tableau.ShiftedPrimedTableau": [[307, 2, 1, "", "check"], [307, 2, 1, "", "is_standard"], [307, 2, 1, "", "max_entry"], [307, 2, 1, "", "pp"], [307, 2, 1, "", "restrict"], [307, 2, 1, "", "restriction_outer_shape"], [307, 2, 1, "", "restriction_shape"], [307, 2, 1, "", "shape"], [307, 2, 1, "", "to_chain"], [307, 2, 1, "", "weight"]], "sage.combinat.shifted_primed_tableau.ShiftedPrimedTableaux": [[307, 4, 1, "", "Element"], [307, 4, 1, "", "options"]], "sage.combinat.shifted_primed_tableau.ShiftedPrimedTableaux_shape": [[307, 2, 1, "", "module_generators"], [307, 2, 1, "", "shape"]], "sage.combinat.shuffle": [[308, 1, 1, "", "SetShuffleProduct"], [308, 1, 1, "", "ShuffleProduct"], [308, 1, 1, "", "ShuffleProduct_abstract"], [308, 1, 1, "", "ShuffleProduct_overlapping"], [308, 1, 1, "", "ShuffleProduct_overlapping_r"]], "sage.combinat.shuffle.SetShuffleProduct": [[308, 2, 1, "", "cardinality"]], "sage.combinat.shuffle.ShuffleProduct": [[308, 2, 1, "", "cardinality"]], "sage.combinat.sidon_sets": [[309, 3, 1, "", "sidon_sets"], [309, 3, 1, "", "sidon_sets_rec"]], "sage.combinat.similarity_class_type": [[310, 1, 1, "", "PrimarySimilarityClassType"], [310, 1, 1, "", "PrimarySimilarityClassTypes"], [310, 1, 1, "", "SimilarityClassType"], [310, 1, 1, "", "SimilarityClassTypes"], [310, 3, 1, "", "centralizer_algebra_dim"], [310, 3, 1, "", "centralizer_group_cardinality"], [310, 3, 1, "", "dictionary_from_generator"], [310, 3, 1, "", "ext_orbit_centralizers"], [310, 3, 1, "", "ext_orbits"], [310, 3, 1, "", "fq"], [310, 3, 1, "", "input_parsing"], [310, 3, 1, "", "invariant_subspace_generating_function"], [310, 3, 1, "", "matrix_centralizer_cardinalities"], [310, 3, 1, "", "matrix_centralizer_cardinalities_length_two"], [310, 3, 1, "", "matrix_similarity_classes"], [310, 3, 1, "", "matrix_similarity_classes_length_two"], [310, 3, 1, "", "order_of_general_linear_group"], [310, 3, 1, "", "primitives"]], "sage.combinat.similarity_class_type.PrimarySimilarityClassType": [[310, 2, 1, "", "centralizer_algebra_dim"], [310, 2, 1, "", "centralizer_group_card"], [310, 2, 1, "", "degree"], [310, 2, 1, "", "invariant_subspace_generating_function"], [310, 2, 1, "", "partition"], [310, 2, 1, "", "size"], [310, 2, 1, "", "statistic"]], "sage.combinat.similarity_class_type.PrimarySimilarityClassTypes": [[310, 4, 1, "", "Element"], [310, 2, 1, "", "size"]], "sage.combinat.similarity_class_type.SimilarityClassType": [[310, 2, 1, "", "as_partition_dictionary"], [310, 2, 1, "", "centralizer_algebra_dim"], [310, 2, 1, "", "centralizer_group_card"], [310, 2, 1, "", "class_card"], [310, 2, 1, "", "invariant_subspace_generating_function"], [310, 2, 1, "", "is_regular"], [310, 2, 1, "", "is_semisimple"], [310, 2, 1, "", "number_of_classes"], [310, 2, 1, "", "number_of_matrices"], [310, 2, 1, "", "rcf"], [310, 2, 1, "", "size"], [310, 2, 1, "", "statistic"]], "sage.combinat.similarity_class_type.SimilarityClassTypes": [[310, 4, 1, "", "Element"], [310, 2, 1, "", "size"], [310, 2, 1, "", "sum"]], "sage.combinat.sine_gordon": [[311, 1, 1, "", "SineGordonYsystem"]], "sage.combinat.sine_gordon.SineGordonYsystem": [[311, 2, 1, "", "F"], [311, 2, 1, "", "intervals"], [311, 2, 1, "", "na"], [311, 2, 1, "", "pa"], [311, 2, 1, "", "plot"], [311, 2, 1, "", "qa"], [311, 2, 1, "", "r"], [311, 2, 1, "", "rk"], [311, 2, 1, "", "triangulation"], [311, 2, 1, "", "type"], [311, 2, 1, "", "vertices"]], "sage.combinat.six_vertex_model": [[312, 1, 1, "", "SixVertexConfiguration"], [312, 1, 1, "", "SixVertexModel"], [312, 1, 1, "", "SquareIceModel"]], "sage.combinat.six_vertex_model.SixVertexConfiguration": [[312, 2, 1, "", "check"], [312, 2, 1, "", "energy"], [312, 2, 1, "", "plot"], [312, 2, 1, "", "to_signed_matrix"]], "sage.combinat.six_vertex_model.SixVertexModel": [[312, 4, 1, "", "Element"], [312, 2, 1, "", "boundary_conditions"], [312, 2, 1, "", "partition_function"]], "sage.combinat.six_vertex_model.SquareIceModel": [[312, 1, 1, "", "Element"], [312, 2, 1, "", "from_alternating_sign_matrix"]], "sage.combinat.six_vertex_model.SquareIceModel.Element": [[312, 2, 1, "", "to_alternating_sign_matrix"]], "sage.combinat.skew_partition": [[313, 1, 1, "", "SkewPartition"], [313, 1, 1, "", "SkewPartitions"], [313, 1, 1, "", "SkewPartitions_all"], [313, 1, 1, "", "SkewPartitions_n"], [313, 1, 1, "", "SkewPartitions_rowlengths"], [313, 3, 1, "", "row_lengths_aux"]], "sage.combinat.skew_partition.SkewPartition": [[313, 2, 1, "", "cell_poset"], [313, 2, 1, "", "cells"], [313, 2, 1, "", "column_lengths"], [313, 2, 1, "", "columns_intersection_set"], [313, 2, 1, "", "conjugate"], [313, 2, 1, "", "diagram"], [313, 2, 1, "", "ferrers_diagram"], [313, 2, 1, "", "frobenius_rank"], [313, 2, 1, "", "inner"], [313, 2, 1, "", "inner_corners"], [313, 2, 1, "", "is_connected"], [313, 2, 1, "", "is_overlap"], [313, 2, 1, "", "is_ribbon"], [313, 2, 1, "", "jacobi_trudi"], [313, 2, 1, "", "k_conjugate"], [313, 2, 1, "", "outer"], [313, 2, 1, "", "outer_corners"], [313, 2, 1, "", "outside_corners"], [313, 2, 1, "", "overlap"], [313, 2, 1, "", "pieri_macdonald_coeffs"], [313, 2, 1, "", "pp"], [313, 2, 1, "", "quotient"], [313, 2, 1, "", "row_lengths"], [313, 2, 1, "", "rows_intersection_set"], [313, 2, 1, "", "size"], [313, 2, 1, "", "specht_module"], [313, 2, 1, "", "specht_module_dimension"], [313, 2, 1, "", "to_dag"], [313, 2, 1, "", "to_list"]], "sage.combinat.skew_partition.SkewPartitions": [[313, 4, 1, "", "Element"], [313, 2, 1, "", "from_row_and_column_length"], [313, 4, 1, "", "options"]], "sage.combinat.skew_partition.SkewPartitions_n": [[313, 2, 1, "", "cardinality"]], "sage.combinat.skew_tableau": [[314, 1, 1, "", "SemistandardSkewTableaux"], [314, 1, 1, "", "SemistandardSkewTableaux_all"], [314, 1, 1, "", "SemistandardSkewTableaux_shape"], [314, 1, 1, "", "SemistandardSkewTableaux_shape_weight"], [314, 1, 1, "", "SemistandardSkewTableaux_size"], [314, 1, 1, "", "SemistandardSkewTableaux_size_weight"], [314, 1, 1, "", "SkewTableau"], [314, 1, 1, "", "SkewTableau_class"], [314, 1, 1, "", "SkewTableaux"], [314, 1, 1, "", "StandardSkewTableaux"], [314, 1, 1, "", "StandardSkewTableaux_all"], [314, 1, 1, "", "StandardSkewTableaux_shape"], [314, 1, 1, "", "StandardSkewTableaux_size"]], "sage.combinat.skew_tableau.SemistandardSkewTableaux_shape": [[314, 2, 1, "", "cardinality"]], "sage.combinat.skew_tableau.SemistandardSkewTableaux_size": [[314, 2, 1, "", "cardinality"]], "sage.combinat.skew_tableau.SemistandardSkewTableaux_size_weight": [[314, 2, 1, "", "cardinality"]], "sage.combinat.skew_tableau.SkewTableau": [[314, 2, 1, "", "backward_slide"], [314, 2, 1, "", "bender_knuth_involution"], [314, 2, 1, "", "cells"], [314, 2, 1, "", "cells_by_content"], [314, 2, 1, "", "cells_containing"], [314, 2, 1, "", "check"], [314, 2, 1, "", "conjugate"], [314, 2, 1, "", "entries_by_content"], [314, 2, 1, "", "evaluation"], [314, 2, 1, "", "filling"], [314, 2, 1, "", "inner_shape"], [314, 2, 1, "", "inner_size"], [314, 2, 1, "", "is_k_tableau"], [314, 2, 1, "", "is_ribbon"], [314, 2, 1, "", "is_semistandard"], [314, 2, 1, "", "is_standard"], [314, 2, 1, "", "outer_shape"], [314, 2, 1, "", "outer_size"], [314, 2, 1, "", "pp"], [314, 2, 1, "", "rectify"], [314, 2, 1, "", "restrict"], [314, 2, 1, "", "restriction_outer_shape"], [314, 2, 1, "", "restriction_shape"], [314, 2, 1, "", "reverse_slide"], [314, 2, 1, "", "shape"], [314, 2, 1, "", "shuffle"], [314, 2, 1, "", "size"], [314, 2, 1, "", "slide"], [314, 2, 1, "", "standardization"], [314, 2, 1, "", "to_chain"], [314, 2, 1, "", "to_expr"], [314, 2, 1, "", "to_list"], [314, 2, 1, "", "to_permutation"], [314, 2, 1, "", "to_ribbon"], [314, 2, 1, "", "to_tableau"], [314, 2, 1, "", "to_word"], [314, 2, 1, "", "to_word_by_column"], [314, 2, 1, "", "to_word_by_row"], [314, 2, 1, "", "weight"]], "sage.combinat.skew_tableau.SkewTableaux": [[314, 4, 1, "", "Element"], [314, 2, 1, "", "from_chain"], [314, 2, 1, "", "from_expr"], [314, 2, 1, "", "from_shape_and_word"], [314, 4, 1, "", "options"]], "sage.combinat.skew_tableau.StandardSkewTableaux_shape": [[314, 2, 1, "", "cardinality"]], "sage.combinat.skew_tableau.StandardSkewTableaux_size": [[314, 2, 1, "", "cardinality"]], "sage.combinat.sloane_functions": [[315, 1, 1, "", "A000001"], [315, 1, 1, "", "A000004"], [315, 1, 1, "", "A000005"], [315, 1, 1, "", "A000007"], [315, 1, 1, "", "A000008"], [315, 1, 1, "", "A000009"], [315, 1, 1, "", "A000010"], [315, 1, 1, "", "A000012"], [315, 1, 1, "", "A000015"], [315, 1, 1, "", "A000016"], [315, 1, 1, "", "A000027"], [315, 1, 1, "", "A000030"], [315, 1, 1, "", "A000032"], [315, 1, 1, "", "A000035"], [315, 1, 1, "", "A000040"], [315, 1, 1, "", "A000041"], [315, 1, 1, "", "A000043"], [315, 1, 1, "", "A000045"], [315, 1, 1, "", "A000069"], [315, 1, 1, "", "A000073"], [315, 1, 1, "", "A000079"], [315, 1, 1, "", "A000085"], [315, 1, 1, "", "A000100"], [315, 1, 1, "", "A000108"], [315, 1, 1, "", "A000110"], [315, 1, 1, "", "A000120"], [315, 1, 1, "", "A000124"], [315, 1, 1, "", "A000129"], [315, 1, 1, "", "A000142"], [315, 1, 1, "", "A000153"], [315, 1, 1, "", "A000165"], [315, 1, 1, "", "A000166"], [315, 1, 1, "", "A000169"], [315, 1, 1, "", "A000203"], [315, 1, 1, "", "A000204"], [315, 1, 1, "", "A000213"], [315, 1, 1, "", "A000217"], [315, 1, 1, "", "A000225"], [315, 1, 1, "", "A000244"], [315, 1, 1, "", "A000255"], [315, 1, 1, "", "A000261"], [315, 1, 1, "", "A000272"], [315, 1, 1, "", "A000290"], [315, 1, 1, "", "A000292"], [315, 1, 1, "", "A000302"], [315, 1, 1, "", "A000312"], [315, 1, 1, "", "A000326"], [315, 1, 1, "", "A000330"], [315, 1, 1, "", "A000396"], [315, 1, 1, "", "A000578"], [315, 1, 1, "", "A000583"], [315, 1, 1, "", "A000587"], [315, 1, 1, "", "A000668"], [315, 1, 1, "", "A000670"], [315, 1, 1, "", "A000720"], [315, 1, 1, "", "A000796"], [315, 1, 1, "", "A000961"], [315, 1, 1, "", "A000984"], [315, 1, 1, "", "A001006"], [315, 1, 1, "", "A001045"], [315, 1, 1, "", "A001055"], [315, 1, 1, "", "A001109"], [315, 1, 1, "", "A001110"], [315, 1, 1, "", "A001147"], [315, 1, 1, "", "A001157"], [315, 1, 1, "", "A001189"], [315, 1, 1, "", "A001221"], [315, 1, 1, "", "A001222"], [315, 1, 1, "", "A001227"], [315, 1, 1, "", "A001333"], [315, 1, 1, "", "A001358"], [315, 1, 1, "", "A001405"], [315, 1, 1, "", "A001477"], [315, 1, 1, "", "A001694"], [315, 1, 1, "", "A001836"], [315, 1, 1, "", "A001906"], [315, 1, 1, "", "A001909"], [315, 1, 1, "", "A001910"], [315, 1, 1, "", "A001969"], [315, 1, 1, "", "A002110"], [315, 1, 1, "", "A002113"], [315, 1, 1, "", "A002275"], [315, 1, 1, "", "A002378"], [315, 1, 1, "", "A002620"], [315, 1, 1, "", "A002808"], [315, 1, 1, "", "A003418"], [315, 1, 1, "", "A004086"], [315, 1, 1, "", "A004526"], [315, 1, 1, "", "A005100"], [315, 1, 1, "", "A005101"], [315, 1, 1, "", "A005117"], [315, 1, 1, "", "A005408"], [315, 1, 1, "", "A005843"], [315, 1, 1, "", "A006318"], [315, 1, 1, "", "A006530"], [315, 1, 1, "", "A006882"], [315, 1, 1, "", "A007318"], [315, 1, 1, "", "A008275"], [315, 1, 1, "", "A008277"], [315, 1, 1, "", "A008683"], [315, 1, 1, "", "A010060"], [315, 1, 1, "", "A015521"], [315, 1, 1, "", "A015523"], [315, 1, 1, "", "A015530"], [315, 1, 1, "", "A015531"], [315, 1, 1, "", "A015551"], [315, 1, 1, "", "A018252"], [315, 1, 1, "", "A020639"], [315, 1, 1, "", "A046660"], [315, 1, 1, "", "A049310"], [315, 1, 1, "", "A051959"], [315, 1, 1, "", "A055790"], [315, 1, 1, "", "A061084"], [315, 1, 1, "", "A064553"], [315, 1, 1, "", "A079922"], [315, 1, 1, "", "A079923"], [315, 1, 1, "", "A082411"], [315, 1, 1, "", "A083103"], [315, 1, 1, "", "A083104"], [315, 1, 1, "", "A083105"], [315, 1, 1, "", "A083216"], [315, 1, 1, "", "A090010"], [315, 1, 1, "", "A090012"], [315, 1, 1, "", "A090013"], [315, 1, 1, "", "A090014"], [315, 1, 1, "", "A090015"], [315, 1, 1, "", "A090016"], [315, 1, 1, "", "A109814"], [315, 1, 1, "", "A111774"], [315, 1, 1, "", "A111775"], [315, 1, 1, "", "A111787"], [315, 1, 1, "", "ExponentialNumbers"], [315, 1, 1, "", "ExtremesOfPermanentsSequence"], [315, 1, 1, "", "ExtremesOfPermanentsSequence2"], [315, 1, 1, "", "RecurrenceSequence"], [315, 1, 1, "", "RecurrenceSequence2"], [315, 1, 1, "", "Sloane"], [315, 1, 1, "", "SloaneSequence"], [315, 3, 1, "", "perm_mh"], [315, 3, 1, "", "recur_gen2"], [315, 3, 1, "", "recur_gen2b"], [315, 3, 1, "", "recur_gen3"]], "sage.combinat.sloane_functions.A000009": [[315, 2, 1, "", "cf"], [315, 2, 1, "", "list"]], "sage.combinat.sloane_functions.A000027": [[315, 4, 1, "", "link"]], "sage.combinat.sloane_functions.A000045": [[315, 2, 1, "", "fib"], [315, 2, 1, "", "list"]], "sage.combinat.sloane_functions.A000073": [[315, 2, 1, "", "list"]], "sage.combinat.sloane_functions.A000120": [[315, 2, 1, "", "f"]], "sage.combinat.sloane_functions.A000213": [[315, 2, 1, "", "list"]], "sage.combinat.sloane_functions.A000796": [[315, 2, 1, "", "list"], [315, 2, 1, "", "pi"]], "sage.combinat.sloane_functions.A000961": [[315, 2, 1, "", "list"]], "sage.combinat.sloane_functions.A001055": [[315, 2, 1, "", "nwf"]], "sage.combinat.sloane_functions.A001110": [[315, 2, 1, "", "g"], [315, 4, 1, "", "link"]], "sage.combinat.sloane_functions.A001358": [[315, 2, 1, "", "list"]], "sage.combinat.sloane_functions.A001694": [[315, 2, 1, "", "is_powerful"], [315, 2, 1, "", "list"]], "sage.combinat.sloane_functions.A001836": [[315, 2, 1, "", "list"]], "sage.combinat.sloane_functions.A002113": [[315, 2, 1, "", "list"]], "sage.combinat.sloane_functions.A002808": [[315, 2, 1, "", "list"]], "sage.combinat.sloane_functions.A005100": [[315, 2, 1, "", "list"]], "sage.combinat.sloane_functions.A005101": [[315, 2, 1, "", "list"]], "sage.combinat.sloane_functions.A005117": [[315, 2, 1, "", "list"]], "sage.combinat.sloane_functions.A006882": [[315, 2, 1, "", "df"], [315, 2, 1, "", "list"]], "sage.combinat.sloane_functions.A007318": [[315, 4, 1, "", "keyword"]], "sage.combinat.sloane_functions.A008275": [[315, 4, 1, "", "keyword"], [315, 2, 1, "", "s"]], "sage.combinat.sloane_functions.A008277": [[315, 4, 1, "", "keyword"], [315, 2, 1, "", "s2"]], "sage.combinat.sloane_functions.A020639": [[315, 2, 1, "", "list"]], "sage.combinat.sloane_functions.A049310": [[315, 4, 1, "", "keyword"]], "sage.combinat.sloane_functions.A051959": [[315, 2, 1, "", "g"]], "sage.combinat.sloane_functions.A061084": [[315, 4, 1, "", "keyword"]], "sage.combinat.sloane_functions.A111774": [[315, 2, 1, "", "is_number_of_the_third_kind"], [315, 2, 1, "", "list"]], "sage.combinat.sloane_functions.ExtremesOfPermanentsSequence": [[315, 2, 1, "", "gen"], [315, 2, 1, "", "list"]], "sage.combinat.sloane_functions.ExtremesOfPermanentsSequence2": [[315, 2, 1, "", "gen"]], "sage.combinat.sloane_functions.RecurrenceSequence": [[315, 2, 1, "", "list"]], "sage.combinat.sloane_functions.RecurrenceSequence2": [[315, 2, 1, "", "list"]], "sage.combinat.sloane_functions.SloaneSequence": [[315, 2, 1, "", "list"]], "sage.combinat.specht_module": [[316, 1, 1, "", "SpechtModule"], [316, 3, 1, "", "specht_module_rank"], [316, 3, 1, "", "specht_module_spanning_set"]], "sage.combinat.specht_module.SpechtModule": [[316, 1, 1, "", "Element"], [316, 2, 1, "", "frobenius_image"], [316, 2, 1, "", "representation_matrix"]], "sage.combinat.species": [[317, 0, 0, "-", "all"], [318, 0, 0, "-", "characteristic_species"], [319, 0, 0, "-", "composition_species"], [320, 0, 0, "-", "cycle_species"], [321, 0, 0, "-", "empty_species"], [322, 0, 0, "-", "functorial_composition_species"], [323, 0, 0, "-", "generating_series"], [324, 0, 0, "-", "library"], [325, 0, 0, "-", "linear_order_species"], [326, 0, 0, "-", "misc"], [327, 0, 0, "-", "partition_species"], [328, 0, 0, "-", "permutation_species"], [329, 0, 0, "-", "product_species"], [330, 0, 0, "-", "recursive_species"], [331, 0, 0, "-", "set_species"], [332, 0, 0, "-", "species"], [333, 0, 0, "-", "structure"], [334, 0, 0, "-", "subset_species"], [335, 0, 0, "-", "sum_species"]], "sage.combinat.species.characteristic_species": [[318, 1, 1, "", "CharacteristicSpecies"], [318, 1, 1, "", "CharacteristicSpeciesStructure"], [318, 4, 1, "", "CharacteristicSpecies_class"], [318, 1, 1, "", "EmptySetSpecies"], [318, 4, 1, "", "EmptySetSpecies_class"], [318, 1, 1, "", "SingletonSpecies"], [318, 4, 1, "", "SingletonSpecies_class"]], "sage.combinat.species.characteristic_species.CharacteristicSpeciesStructure": [[318, 2, 1, "", "automorphism_group"], [318, 2, 1, "", "canonical_label"], [318, 2, 1, "", "transport"]], "sage.combinat.species.composition_species": [[319, 1, 1, "", "CompositionSpecies"], [319, 1, 1, "", "CompositionSpeciesStructure"], [319, 4, 1, "", "CompositionSpecies_class"]], "sage.combinat.species.composition_species.CompositionSpecies": [[319, 2, 1, "", "weight_ring"]], "sage.combinat.species.composition_species.CompositionSpeciesStructure": [[319, 2, 1, "", "change_labels"], [319, 2, 1, "", "transport"]], "sage.combinat.species.cycle_species": [[320, 1, 1, "", "CycleSpecies"], [320, 1, 1, "", "CycleSpeciesStructure"], [320, 4, 1, "", "CycleSpecies_class"]], "sage.combinat.species.cycle_species.CycleSpeciesStructure": [[320, 2, 1, "", "automorphism_group"], [320, 2, 1, "", "canonical_label"], [320, 2, 1, "", "permutation_group_element"], [320, 2, 1, "", "transport"]], "sage.combinat.species.empty_species": [[321, 1, 1, "", "EmptySpecies"], [321, 4, 1, "", "EmptySpecies_class"]], "sage.combinat.species.functorial_composition_species": [[322, 1, 1, "", "FunctorialCompositionSpecies"], [322, 4, 1, "", "FunctorialCompositionSpecies_class"], [322, 1, 1, "", "FunctorialCompositionStructure"]], "sage.combinat.species.functorial_composition_species.FunctorialCompositionSpecies": [[322, 2, 1, "", "weight_ring"]], "sage.combinat.species.generating_series": [[323, 1, 1, "", "CycleIndexSeries"], [323, 1, 1, "", "CycleIndexSeriesRing"], [323, 3, 1, "", "ExponentialCycleIndexSeries"], [323, 1, 1, "", "ExponentialGeneratingSeries"], [323, 1, 1, "", "ExponentialGeneratingSeriesRing"], [323, 3, 1, "", "LogarithmCycleIndexSeries"], [323, 1, 1, "", "OrdinaryGeneratingSeries"], [323, 1, 1, "", "OrdinaryGeneratingSeriesRing"]], "sage.combinat.species.generating_series.CycleIndexSeries": [[323, 2, 1, "", "coefficient_cycle_type"], [323, 2, 1, "", "count"], [323, 2, 1, "", "derivative"], [323, 2, 1, "", "exponential"], [323, 2, 1, "", "generating_series"], [323, 2, 1, "", "isotype_generating_series"], [323, 2, 1, "", "logarithm"], [323, 2, 1, "", "pointing"]], "sage.combinat.species.generating_series.CycleIndexSeriesRing": [[323, 4, 1, "", "Element"]], "sage.combinat.species.generating_series.ExponentialGeneratingSeries": [[323, 2, 1, "", "count"], [323, 2, 1, "", "counts"], [323, 2, 1, "", "functorial_composition"]], "sage.combinat.species.generating_series.ExponentialGeneratingSeriesRing": [[323, 4, 1, "", "Element"]], "sage.combinat.species.generating_series.OrdinaryGeneratingSeries": [[323, 2, 1, "", "count"], [323, 2, 1, "", "counts"]], "sage.combinat.species.generating_series.OrdinaryGeneratingSeriesRing": [[323, 4, 1, "", "Element"]], "sage.combinat.species.library": [[324, 3, 1, "", "BinaryForestSpecies"], [324, 3, 1, "", "BinaryTreeSpecies"], [324, 3, 1, "", "SimpleGraphSpecies"]], "sage.combinat.species.linear_order_species": [[325, 1, 1, "", "LinearOrderSpecies"], [325, 1, 1, "", "LinearOrderSpeciesStructure"], [325, 4, 1, "", "LinearOrderSpecies_class"]], "sage.combinat.species.linear_order_species.LinearOrderSpeciesStructure": [[325, 2, 1, "", "automorphism_group"], [325, 2, 1, "", "canonical_label"], [325, 2, 1, "", "transport"]], "sage.combinat.species.misc": [[326, 3, 1, "", "accept_size"], [326, 3, 1, "", "change_support"]], "sage.combinat.species.partition_species": [[327, 1, 1, "", "PartitionSpecies"], [327, 1, 1, "", "PartitionSpeciesStructure"], [327, 4, 1, "", "PartitionSpecies_class"]], "sage.combinat.species.partition_species.PartitionSpeciesStructure": [[327, 2, 1, "", "automorphism_group"], [327, 2, 1, "", "canonical_label"], [327, 2, 1, "", "change_labels"], [327, 2, 1, "", "transport"]], "sage.combinat.species.permutation_species": [[328, 1, 1, "", "PermutationSpecies"], [328, 1, 1, "", "PermutationSpeciesStructure"], [328, 4, 1, "", "PermutationSpecies_class"]], "sage.combinat.species.permutation_species.PermutationSpeciesStructure": [[328, 2, 1, "", "automorphism_group"], [328, 2, 1, "", "canonical_label"], [328, 2, 1, "", "permutation_group_element"], [328, 2, 1, "", "transport"]], "sage.combinat.species.product_species": [[329, 1, 1, "", "ProductSpecies"], [329, 1, 1, "", "ProductSpeciesStructure"], [329, 4, 1, "", "ProductSpecies_class"]], "sage.combinat.species.product_species.ProductSpecies": [[329, 2, 1, "", "left_factor"], [329, 2, 1, "", "right_factor"], [329, 2, 1, "", "weight_ring"]], "sage.combinat.species.product_species.ProductSpeciesStructure": [[329, 2, 1, "", "automorphism_group"], [329, 2, 1, "", "canonical_label"], [329, 2, 1, "", "change_labels"], [329, 2, 1, "", "transport"]], "sage.combinat.species.recursive_species": [[330, 1, 1, "", "CombinatorialSpecies"], [330, 1, 1, "", "CombinatorialSpeciesStructure"]], "sage.combinat.species.recursive_species.CombinatorialSpecies": [[330, 2, 1, "", "define"], [330, 2, 1, "", "weight_ring"]], "sage.combinat.species.set_species": [[331, 1, 1, "", "SetSpecies"], [331, 1, 1, "", "SetSpeciesStructure"], [331, 4, 1, "", "SetSpecies_class"]], "sage.combinat.species.set_species.SetSpeciesStructure": [[331, 2, 1, "", "automorphism_group"], [331, 2, 1, "", "canonical_label"], [331, 2, 1, "", "transport"]], "sage.combinat.species.species": [[332, 1, 1, "", "GenericCombinatorialSpecies"]], "sage.combinat.species.species.GenericCombinatorialSpecies": [[332, 2, 1, "", "algebraic_equation_system"], [332, 2, 1, "", "composition"], [332, 2, 1, "", "cycle_index_series"], [332, 2, 1, "", "digraph"], [332, 2, 1, "", "functorial_composition"], [332, 2, 1, "", "generating_series"], [332, 2, 1, "", "is_weighted"], [332, 2, 1, "", "isotype_generating_series"], [332, 2, 1, "", "isotypes"], [332, 2, 1, "", "product"], [332, 2, 1, "", "restricted"], [332, 2, 1, "", "structures"], [332, 2, 1, "", "sum"], [332, 2, 1, "", "weight_ring"], [332, 2, 1, "", "weighted"]], "sage.combinat.species.structure": [[333, 1, 1, "", "GenericSpeciesStructure"], [333, 1, 1, "", "IsotypesWrapper"], [333, 1, 1, "", "SimpleIsotypesWrapper"], [333, 1, 1, "", "SimpleStructuresWrapper"], [333, 4, 1, "", "SpeciesStructure"], [333, 1, 1, "", "SpeciesStructureWrapper"], [333, 1, 1, "", "SpeciesWrapper"], [333, 1, 1, "", "StructuresWrapper"]], "sage.combinat.species.structure.GenericSpeciesStructure": [[333, 2, 1, "", "change_labels"], [333, 2, 1, "", "is_isomorphic"], [333, 2, 1, "", "labels"], [333, 2, 1, "", "parent"]], "sage.combinat.species.structure.SpeciesStructureWrapper": [[333, 2, 1, "", "canonical_label"], [333, 2, 1, "", "change_labels"], [333, 2, 1, "", "transport"]], "sage.combinat.species.structure.SpeciesWrapper": [[333, 2, 1, "", "cardinality"], [333, 2, 1, "", "labels"]], "sage.combinat.species.subset_species": [[334, 1, 1, "", "SubsetSpecies"], [334, 1, 1, "", "SubsetSpeciesStructure"], [334, 4, 1, "", "SubsetSpecies_class"]], "sage.combinat.species.subset_species.SubsetSpeciesStructure": [[334, 2, 1, "", "automorphism_group"], [334, 2, 1, "", "canonical_label"], [334, 2, 1, "", "complement"], [334, 2, 1, "", "label_subset"], [334, 2, 1, "", "transport"]], "sage.combinat.species.sum_species": [[335, 1, 1, "", "SumSpecies"], [335, 1, 1, "", "SumSpeciesStructure"], [335, 4, 1, "", "SumSpecies_class"]], "sage.combinat.species.sum_species.SumSpecies": [[335, 2, 1, "", "left_summand"], [335, 2, 1, "", "right_summand"], [335, 2, 1, "", "weight_ring"]], "sage.combinat.subset": [[336, 1, 1, "", "SubMultiset_s"], [336, 1, 1, "", "SubMultiset_sk"], [336, 3, 1, "", "Subsets"], [336, 1, 1, "", "SubsetsSorted"], [336, 1, 1, "", "Subsets_s"], [336, 1, 1, "", "Subsets_sk"], [336, 3, 1, "", "dict_to_list"], [336, 3, 1, "", "list_to_dict"], [336, 3, 1, "", "powerset"], [336, 3, 1, "", "subsets"], [336, 3, 1, "", "uniq"]], "sage.combinat.subset.SubMultiset_s": [[336, 2, 1, "", "cardinality"], [336, 4, 1, "", "element_class"], [336, 2, 1, "", "generating_serie"], [336, 2, 1, "", "random_element"]], "sage.combinat.subset.SubMultiset_sk": [[336, 2, 1, "", "cardinality"], [336, 2, 1, "", "generating_serie"], [336, 2, 1, "", "random_element"]], "sage.combinat.subset.SubsetsSorted": [[336, 4, 1, "", "element_class"], [336, 2, 1, "", "first"], [336, 2, 1, "", "last"], [336, 2, 1, "", "random_element"], [336, 2, 1, "", "unrank"]], "sage.combinat.subset.Subsets_s": [[336, 2, 1, "", "cardinality"], [336, 4, 1, "", "element_class"], [336, 2, 1, "", "first"], [336, 2, 1, "", "last"], [336, 2, 1, "", "lattice"], [336, 2, 1, "", "random_element"], [336, 2, 1, "", "rank"], [336, 2, 1, "", "underlying_set"], [336, 2, 1, "", "unrank"]], "sage.combinat.subset.Subsets_sk": [[336, 2, 1, "", "an_element"], [336, 2, 1, "", "cardinality"], [336, 2, 1, "", "first"], [336, 2, 1, "", "last"], [336, 2, 1, "", "random_element"], [336, 2, 1, "", "rank"], [336, 2, 1, "", "unrank"]], "sage.combinat.subsets_hereditary": [[337, 3, 1, "", "subsets_with_hereditary_property"]], "sage.combinat.subsets_pairwise": [[338, 1, 1, "", "PairwiseCompatibleSubsets"]], "sage.combinat.subsets_pairwise.PairwiseCompatibleSubsets": [[338, 2, 1, "", "children"], [338, 2, 1, "", "post_process"]], "sage.combinat.subword": [[339, 3, 1, "", "Subwords"], [339, 1, 1, "", "Subwords_w"], [339, 1, 1, "", "Subwords_wk"], [339, 3, 1, "", "smallest_positions"]], "sage.combinat.subword.Subwords_w": [[339, 2, 1, "", "cardinality"], [339, 2, 1, "", "first"], [339, 2, 1, "", "last"], [339, 2, 1, "", "random_element"]], "sage.combinat.subword.Subwords_wk": [[339, 2, 1, "", "cardinality"], [339, 2, 1, "", "first"], [339, 2, 1, "", "last"], [339, 2, 1, "", "random_element"]], "sage.combinat.subword_complex": [[340, 1, 1, "", "SubwordComplex"], [340, 1, 1, "", "SubwordComplexFacet"]], "sage.combinat.subword_complex.SubwordComplex": [[340, 4, 1, "", "Element"], [340, 2, 1, "", "barycenter"], [340, 2, 1, "", "brick_fan"], [340, 2, 1, "", "brick_polytope"], [340, 2, 1, "", "brick_vectors"], [340, 2, 1, "", "cartan_type"], [340, 2, 1, "", "cover_relations"], [340, 2, 1, "", "dimension"], [340, 2, 1, "", "facets"], [340, 2, 1, "", "greedy_facet"], [340, 2, 1, "", "group"], [340, 2, 1, "", "increasing_flip_graph"], [340, 2, 1, "", "increasing_flip_poset"], [340, 2, 1, "", "interval"], [340, 2, 1, "", "is_ball"], [340, 2, 1, "", "is_double_root_free"], [340, 2, 1, "", "is_pure"], [340, 2, 1, "", "is_root_independent"], [340, 2, 1, "", "is_sphere"], [340, 2, 1, "", "kappa_preimages"], [340, 2, 1, "", "minkowski_summand"], [340, 2, 1, "", "pi"], [340, 2, 1, "", "word"]], "sage.combinat.subword_complex.SubwordComplexFacet": [[340, 2, 1, "", "brick_vector"], [340, 2, 1, "", "extended_root_configuration"], [340, 2, 1, "", "extended_weight_configuration"], [340, 2, 1, "", "flip"], [340, 2, 1, "", "is_vertex"], [340, 2, 1, "", "kappa_preimage"], [340, 2, 1, "", "plot"], [340, 2, 1, "", "root_cone"], [340, 2, 1, "", "root_configuration"], [340, 2, 1, "", "show"], [340, 2, 1, "", "upper_root_configuration"], [340, 2, 1, "", "weight_cone"], [340, 2, 1, "", "weight_configuration"]], "sage.combinat.super_tableau": [[341, 1, 1, "", "SemistandardSuperTableau"], [341, 1, 1, "", "SemistandardSuperTableaux"], [341, 1, 1, "", "SemistandardSuperTableaux_all"], [341, 1, 1, "", "StandardSuperTableau"], [341, 1, 1, "", "StandardSuperTableaux"], [341, 1, 1, "", "StandardSuperTableaux_all"], [341, 1, 1, "", "StandardSuperTableaux_shape"], [341, 1, 1, "", "StandardSuperTableaux_size"]], "sage.combinat.super_tableau.SemistandardSuperTableau": [[341, 2, 1, "", "check"]], "sage.combinat.super_tableau.SemistandardSuperTableaux": [[341, 4, 1, "", "Element"]], "sage.combinat.super_tableau.StandardSuperTableau": [[341, 2, 1, "", "check"], [341, 2, 1, "", "is_standard"]], "sage.combinat.super_tableau.StandardSuperTableaux": [[341, 4, 1, "", "Element"]], "sage.combinat.super_tableau.StandardSuperTableaux_shape": [[341, 2, 1, "", "cardinality"]], "sage.combinat.super_tableau.StandardSuperTableaux_size": [[341, 2, 1, "", "cardinality"]], "sage.combinat.superpartition": [[342, 1, 1, "", "SuperPartition"], [342, 1, 1, "", "SuperPartitions"], [342, 1, 1, "", "SuperPartitions_all"], [342, 1, 1, "", "SuperPartitions_n"], [342, 1, 1, "", "SuperPartitions_n_m"]], "sage.combinat.superpartition.SuperPartition": [[342, 2, 1, "", "a_part"], [342, 2, 1, "", "add_horizontal_border_strip_star"], [342, 2, 1, "", "add_horizontal_border_strip_star_bar"], [342, 2, 1, "", "antisymmetric_part"], [342, 2, 1, "", "bi_degree"], [342, 2, 1, "", "bosonic_degree"], [342, 2, 1, "", "bosonic_length"], [342, 2, 1, "", "check"], [342, 2, 1, "", "conjugate"], [342, 2, 1, "", "degree"], [342, 2, 1, "", "dominates"], [342, 2, 1, "", "fermionic_degree"], [342, 2, 1, "", "fermionic_sector"], [342, 2, 1, "", "from_circled_diagram"], [342, 2, 1, "", "length"], [342, 2, 1, "", "s_part"], [342, 2, 1, "", "shape_circled_diagram"], [342, 2, 1, "", "sign"], [342, 2, 1, "", "symmetric_part"], [342, 2, 1, "", "to_circled_diagram"], [342, 2, 1, "", "to_composition"], [342, 2, 1, "", "to_list"], [342, 2, 1, "", "to_partition"], [342, 2, 1, "", "zee"]], "sage.combinat.superpartition.SuperPartitions": [[342, 4, 1, "", "Element"], [342, 4, 1, "", "options"]], "sage.combinat.symmetric_group_algebra": [[343, 3, 1, "", "HeckeAlgebraSymmetricGroupT"], [343, 1, 1, "", "HeckeAlgebraSymmetricGroup_generic"], [343, 1, 1, "", "HeckeAlgebraSymmetricGroup_t"], [343, 3, 1, "", "SymmetricGroupAlgebra"], [343, 1, 1, "", "SymmetricGroupAlgebra_n"], [343, 3, 1, "", "a"], [343, 3, 1, "", "b"], [343, 3, 1, "", "e"], [343, 3, 1, "", "e_hat"], [343, 3, 1, "", "e_ik"], [343, 3, 1, "", "epsilon"], [343, 3, 1, "", "epsilon_ik"], [343, 3, 1, "", "kappa"], [343, 3, 1, "", "pi_ik"], [343, 3, 1, "", "seminormal_test"]], "sage.combinat.symmetric_group_algebra.HeckeAlgebraSymmetricGroup_generic": [[343, 2, 1, "", "one_basis"], [343, 2, 1, "", "q"]], "sage.combinat.symmetric_group_algebra.HeckeAlgebraSymmetricGroup_t": [[343, 2, 1, "", "algebra_generators"], [343, 2, 1, "", "jucys_murphy"], [343, 2, 1, "", "product_on_basis"], [343, 2, 1, "", "t"], [343, 2, 1, "", "t_action"], [343, 2, 1, "", "t_action_on_basis"]], "sage.combinat.symmetric_group_algebra.SymmetricGroupAlgebra_n": [[343, 2, 1, "", "algebra_generators"], [343, 2, 1, "", "antipode"], [343, 2, 1, "", "binary_unshuffle_sum"], [343, 2, 1, "", "canonical_embedding"], [343, 2, 1, "", "cell_module"], [343, 2, 1, "", "cell_module_indices"], [343, 2, 1, "", "cell_poset"], [343, 2, 1, "", "central_orthogonal_idempotent"], [343, 2, 1, "", "central_orthogonal_idempotents"], [343, 2, 1, "", "dft"], [343, 2, 1, "", "epsilon_ik"], [343, 2, 1, "", "jucys_murphy"], [343, 2, 1, "", "left_action_product"], [343, 2, 1, "", "monomial_from_smaller_permutation"], [343, 2, 1, "", "retract_direct_product"], [343, 2, 1, "", "retract_okounkov_vershik"], [343, 2, 1, "", "retract_plain"], [343, 2, 1, "", "right_action_product"], [343, 2, 1, "", "rsw_shuffling_element"], [343, 2, 1, "", "semi_rsw_element"], [343, 2, 1, "", "seminormal_basis"], [343, 2, 1, "", "specht_module"], [343, 2, 1, "", "specht_module_dimension"]], "sage.combinat.symmetric_group_representations": [[344, 1, 1, "", "SpechtRepresentation"], [344, 1, 1, "", "SpechtRepresentations"], [344, 3, 1, "", "SymmetricGroupRepresentation"], [344, 1, 1, "", "SymmetricGroupRepresentation_generic_class"], [344, 3, 1, "", "SymmetricGroupRepresentations"], [344, 1, 1, "", "SymmetricGroupRepresentations_class"], [344, 1, 1, "", "YoungRepresentation_Orthogonal"], [344, 1, 1, "", "YoungRepresentation_Seminormal"], [344, 1, 1, "", "YoungRepresentation_generic"], [344, 1, 1, "", "YoungRepresentations_Orthogonal"], [344, 1, 1, "", "YoungRepresentations_Seminormal"], [344, 3, 1, "", "partition_to_vector_of_contents"]], "sage.combinat.symmetric_group_representations.SpechtRepresentation": [[344, 2, 1, "", "representation_matrix"], [344, 2, 1, "", "scalar_product"], [344, 2, 1, "", "scalar_product_matrix"]], "sage.combinat.symmetric_group_representations.SpechtRepresentations": [[344, 4, 1, "", "Element"]], "sage.combinat.symmetric_group_representations.SymmetricGroupRepresentation_generic_class": [[344, 2, 1, "", "to_character"], [344, 2, 1, "", "verify_representation"]], "sage.combinat.symmetric_group_representations.SymmetricGroupRepresentations_class": [[344, 2, 1, "", "cardinality"]], "sage.combinat.symmetric_group_representations.YoungRepresentation_generic": [[344, 2, 1, "", "representation_matrix"], [344, 2, 1, "", "representation_matrix_for_simple_transposition"]], "sage.combinat.symmetric_group_representations.YoungRepresentations_Orthogonal": [[344, 4, 1, "", "Element"]], "sage.combinat.symmetric_group_representations.YoungRepresentations_Seminormal": [[344, 4, 1, "", "Element"]], "sage.combinat.t_sequences": [[345, 3, 1, "", "T_sequences_construction_from_base_sequences"], [345, 3, 1, "", "T_sequences_construction_from_turyn_sequences"], [345, 3, 1, "", "T_sequences_smallcases"], [345, 3, 1, "", "base_sequences_construction"], [345, 3, 1, "", "base_sequences_smallcases"], [345, 3, 1, "", "is_T_sequences_set"], [345, 3, 1, "", "is_base_sequences_tuple"], [345, 3, 1, "", "is_skew"], [345, 3, 1, "", "is_symmetric"], [345, 3, 1, "", "turyn_sequences_smallcases"], [345, 3, 1, "", "turyn_type_sequences_smallcases"]], "sage.combinat.tableau": [[346, 1, 1, "", "IncreasingTableau"], [346, 1, 1, "", "IncreasingTableaux"], [346, 1, 1, "", "IncreasingTableaux_all"], [346, 1, 1, "", "IncreasingTableaux_shape"], [346, 1, 1, "", "IncreasingTableaux_shape_inf"], [346, 1, 1, "", "IncreasingTableaux_shape_weight"], [346, 1, 1, "", "IncreasingTableaux_size"], [346, 1, 1, "", "IncreasingTableaux_size_inf"], [346, 1, 1, "", "IncreasingTableaux_size_weight"], [346, 1, 1, "", "RowStandardTableau"], [346, 1, 1, "", "RowStandardTableaux"], [346, 1, 1, "", "RowStandardTableaux_all"], [346, 1, 1, "", "RowStandardTableaux_shape"], [346, 1, 1, "", "RowStandardTableaux_size"], [346, 1, 1, "", "SemistandardTableau"], [346, 1, 1, "", "SemistandardTableaux"], [346, 1, 1, "", "SemistandardTableaux_all"], [346, 1, 1, "", "SemistandardTableaux_shape"], [346, 1, 1, "", "SemistandardTableaux_shape_inf"], [346, 1, 1, "", "SemistandardTableaux_shape_weight"], [346, 1, 1, "", "SemistandardTableaux_size"], [346, 1, 1, "", "SemistandardTableaux_size_inf"], [346, 1, 1, "", "SemistandardTableaux_size_weight"], [346, 1, 1, "", "StandardTableau"], [346, 1, 1, "", "StandardTableaux"], [346, 1, 1, "", "StandardTableaux_all"], [346, 1, 1, "", "StandardTableaux_shape"], [346, 1, 1, "", "StandardTableaux_size"], [346, 1, 1, "", "Tableau"], [346, 1, 1, "", "Tableau_class"], [346, 1, 1, "", "Tableaux"], [346, 1, 1, "", "Tableaux_all"], [346, 1, 1, "", "Tableaux_size"], [346, 3, 1, "", "from_chain"], [346, 3, 1, "", "from_shape_and_word"], [346, 3, 1, "", "symmetric_group_action_on_values"], [346, 3, 1, "", "unmatched_places"]], "sage.combinat.tableau.IncreasingTableau": [[346, 2, 1, "", "K_bender_knuth"], [346, 2, 1, "", "K_evacuation"], [346, 2, 1, "", "K_promotion"], [346, 2, 1, "", "K_promotion_inverse"], [346, 2, 1, "", "check"], [346, 2, 1, "", "descent_set"], [346, 2, 1, "", "dual_K_evacuation"]], "sage.combinat.tableau.IncreasingTableaux": [[346, 4, 1, "", "Element"]], "sage.combinat.tableau.RowStandardTableau": [[346, 2, 1, "", "check"]], "sage.combinat.tableau.RowStandardTableaux": [[346, 4, 1, "", "Element"]], "sage.combinat.tableau.RowStandardTableaux_shape": [[346, 2, 1, "", "cardinality"]], "sage.combinat.tableau.RowStandardTableaux_size": [[346, 2, 1, "", "an_element"]], "sage.combinat.tableau.SemistandardTableau": [[346, 2, 1, "", "check"]], "sage.combinat.tableau.SemistandardTableaux": [[346, 4, 1, "", "Element"]], "sage.combinat.tableau.SemistandardTableaux_all": [[346, 2, 1, "", "list"]], "sage.combinat.tableau.SemistandardTableaux_shape": [[346, 2, 1, "", "cardinality"], [346, 2, 1, "", "random_element"]], "sage.combinat.tableau.SemistandardTableaux_shape_weight": [[346, 2, 1, "", "cardinality"], [346, 2, 1, "", "list"]], "sage.combinat.tableau.SemistandardTableaux_size": [[346, 2, 1, "", "cardinality"], [346, 2, 1, "", "random_element"]], "sage.combinat.tableau.SemistandardTableaux_size_inf": [[346, 2, 1, "", "list"]], "sage.combinat.tableau.SemistandardTableaux_size_weight": [[346, 2, 1, "", "cardinality"]], "sage.combinat.tableau.StandardTableau": [[346, 2, 1, "", "check"], [346, 2, 1, "", "dominates"], [346, 2, 1, "", "down"], [346, 2, 1, "", "down_list"], [346, 2, 1, "", "is_standard"], [346, 2, 1, "", "promotion"], [346, 2, 1, "", "promotion_inverse"], [346, 2, 1, "", "standard_descents"], [346, 2, 1, "", "standard_major_index"], [346, 2, 1, "", "standard_number_of_descents"], [346, 2, 1, "", "up"], [346, 2, 1, "", "up_list"]], "sage.combinat.tableau.StandardTableaux": [[346, 4, 1, "", "Element"]], "sage.combinat.tableau.StandardTableaux_shape": [[346, 2, 1, "", "cardinality"], [346, 2, 1, "", "list"], [346, 2, 1, "", "random_element"]], "sage.combinat.tableau.StandardTableaux_size": [[346, 2, 1, "", "cardinality"], [346, 2, 1, "", "random_element"]], "sage.combinat.tableau.Tableau": [[346, 2, 1, "", "add_entry"], [346, 2, 1, "", "anti_restrict"], [346, 2, 1, "", "atom"], [346, 2, 1, "", "bender_knuth_involution"], [346, 2, 1, "", "bump"], [346, 2, 1, "", "bump_multiply"], [346, 2, 1, "", "catabolism"], [346, 2, 1, "", "catabolism_projector"], [346, 2, 1, "", "catabolism_sequence"], [346, 2, 1, "", "cells"], [346, 2, 1, "", "cells_containing"], [346, 2, 1, "", "charge"], [346, 2, 1, "", "check"], [346, 2, 1, "", "cocharge"], [346, 2, 1, "", "codegree"], [346, 2, 1, "", "column_stabilizer"], [346, 2, 1, "", "components"], [346, 2, 1, "", "conjugate"], [346, 2, 1, "", "content"], [346, 2, 1, "", "corners"], [346, 2, 1, "", "degree"], [346, 2, 1, "", "descents"], [346, 2, 1, "", "entries"], [346, 2, 1, "", "entry"], [346, 2, 1, "", "evacuation"], [346, 2, 1, "", "evaluation"], [346, 2, 1, "", "first_column_descent"], [346, 2, 1, "", "first_row_descent"], [346, 2, 1, "", "flush"], [346, 2, 1, "", "height"], [346, 2, 1, "", "hillman_grassl"], [346, 2, 1, "", "insert_word"], [346, 2, 1, "", "inversion_number"], [346, 2, 1, "", "inversions"], [346, 2, 1, "", "is_column_increasing"], [346, 2, 1, "", "is_column_strict"], [346, 2, 1, "", "is_increasing"], [346, 2, 1, "", "is_k_tableau"], [346, 2, 1, "", "is_key_tableau"], [346, 2, 1, "", "is_rectangular"], [346, 2, 1, "", "is_row_increasing"], [346, 2, 1, "", "is_row_strict"], [346, 2, 1, "", "is_semistandard"], [346, 2, 1, "", "is_standard"], [346, 2, 1, "", "k_weight"], [346, 2, 1, "", "lambda_catabolism"], [346, 2, 1, "", "last_letter_lequal"], [346, 2, 1, "", "left_key_tableau"], [346, 2, 1, "", "leq"], [346, 2, 1, "", "level"], [346, 2, 1, "", "major_index"], [346, 2, 1, "", "plot"], [346, 2, 1, "", "pp"], [346, 2, 1, "", "promotion"], [346, 2, 1, "", "promotion_inverse"], [346, 2, 1, "", "promotion_operator"], [346, 2, 1, "", "raise_action_from_words"], [346, 2, 1, "", "reading_word_permutation"], [346, 2, 1, "", "reduced_column_word"], [346, 2, 1, "", "reduced_lambda_catabolism"], [346, 2, 1, "", "reduced_row_word"], [346, 2, 1, "", "residue"], [346, 2, 1, "", "residue_sequence"], [346, 2, 1, "", "restrict"], [346, 2, 1, "", "restriction_shape"], [346, 2, 1, "", "reverse_bump"], [346, 2, 1, "", "right_key_tableau"], [346, 2, 1, "", "rotate_180"], [346, 2, 1, "", "row_stabilizer"], [346, 2, 1, "", "schensted_insert"], [346, 2, 1, "", "schuetzenberger_involution"], [346, 2, 1, "", "seg"], [346, 2, 1, "", "shape"], [346, 2, 1, "", "size"], [346, 2, 1, "", "slide_multiply"], [346, 2, 1, "", "socle"], [346, 2, 1, "", "standardization"], [346, 2, 1, "", "sulzgruber_correspondence"], [346, 2, 1, "", "symmetric_group_action_on_entries"], [346, 2, 1, "", "symmetric_group_action_on_values"], [346, 2, 1, "", "to_Gelfand_Tsetlin_pattern"], [346, 2, 1, "", "to_chain"], [346, 2, 1, "", "to_list"], [346, 2, 1, "", "to_sign_matrix"], [346, 2, 1, "", "to_word"], [346, 2, 1, "", "to_word_by_column"], [346, 2, 1, "", "to_word_by_row"], [346, 2, 1, "", "vertical_flip"], [346, 2, 1, "", "weight"]], "sage.combinat.tableau.Tableaux": [[346, 4, 1, "", "Element"], [346, 4, 1, "", "options"]], "sage.combinat.tableau.Tableaux_all": [[346, 2, 1, "", "an_element"]], "sage.combinat.tableau.Tableaux_size": [[346, 2, 1, "", "an_element"]], "sage.combinat.tableau_residues": [[347, 1, 1, "", "ResidueSequence"], [347, 1, 1, "", "ResidueSequences"]], "sage.combinat.tableau_residues.ResidueSequence": [[347, 2, 1, "", "base_ring"], [347, 2, 1, "", "block"], [347, 2, 1, "", "check"], [347, 2, 1, "", "level"], [347, 2, 1, "", "multicharge"], [347, 2, 1, "", "negative"], [347, 2, 1, "", "quantum_characteristic"], [347, 2, 1, "", "residues"], [347, 2, 1, "", "restrict"], [347, 2, 1, "", "restrict_row"], [347, 2, 1, "", "row_standard_tableaux"], [347, 2, 1, "", "size"], [347, 2, 1, "", "standard_tableaux"], [347, 2, 1, "", "swap_residues"]], "sage.combinat.tableau_residues.ResidueSequences": [[347, 4, 1, "", "Element"], [347, 2, 1, "", "an_element"], [347, 2, 1, "", "cell_residue"], [347, 2, 1, "", "check_element"]], "sage.combinat.tableau_tuple": [[348, 1, 1, "", "RowStandardTableauTuple"], [348, 1, 1, "", "RowStandardTableauTuples"], [348, 1, 1, "", "RowStandardTableauTuples_all"], [348, 1, 1, "", "RowStandardTableauTuples_level"], [348, 1, 1, "", "RowStandardTableauTuples_level_size"], [348, 1, 1, "", "RowStandardTableauTuples_residue"], [348, 1, 1, "", "RowStandardTableauTuples_residue_shape"], [348, 1, 1, "", "RowStandardTableauTuples_shape"], [348, 1, 1, "", "RowStandardTableauTuples_size"], [348, 1, 1, "", "StandardTableauTuple"], [348, 1, 1, "", "StandardTableauTuples"], [348, 1, 1, "", "StandardTableauTuples_all"], [348, 1, 1, "", "StandardTableauTuples_level"], [348, 1, 1, "", "StandardTableauTuples_level_size"], [348, 1, 1, "", "StandardTableauTuples_shape"], [348, 1, 1, "", "StandardTableauTuples_size"], [348, 1, 1, "", "StandardTableaux_residue"], [348, 1, 1, "", "StandardTableaux_residue_shape"], [348, 1, 1, "", "TableauTuple"], [348, 1, 1, "", "TableauTuples"], [348, 1, 1, "", "TableauTuples_all"], [348, 1, 1, "", "TableauTuples_level"], [348, 1, 1, "", "TableauTuples_level_size"], [348, 1, 1, "", "TableauTuples_size"]], "sage.combinat.tableau_tuple.RowStandardTableauTuple": [[348, 2, 1, "", "codegree"], [348, 2, 1, "", "degree"], [348, 2, 1, "", "inverse"], [348, 2, 1, "", "residue_sequence"]], "sage.combinat.tableau_tuple.RowStandardTableauTuples": [[348, 4, 1, "", "Element"], [348, 4, 1, "", "level_one_parent_class"], [348, 2, 1, "", "shape"]], "sage.combinat.tableau_tuple.RowStandardTableauTuples_all": [[348, 2, 1, "", "an_element"]], "sage.combinat.tableau_tuple.RowStandardTableauTuples_level": [[348, 2, 1, "", "an_element"]], "sage.combinat.tableau_tuple.RowStandardTableauTuples_level_size": [[348, 2, 1, "", "an_element"]], "sage.combinat.tableau_tuple.RowStandardTableauTuples_residue": [[348, 2, 1, "", "an_element"], [348, 2, 1, "", "level"], [348, 2, 1, "", "multicharge"], [348, 2, 1, "", "quantum_characteristic"], [348, 2, 1, "", "residue_sequence"], [348, 2, 1, "", "size"]], "sage.combinat.tableau_tuple.RowStandardTableauTuples_shape": [[348, 2, 1, "", "an_element"], [348, 2, 1, "", "cardinality"]], "sage.combinat.tableau_tuple.RowStandardTableauTuples_size": [[348, 2, 1, "", "an_element"]], "sage.combinat.tableau_tuple.StandardTableauTuple": [[348, 2, 1, "", "dominates"], [348, 2, 1, "", "restrict"], [348, 2, 1, "", "to_chain"]], "sage.combinat.tableau_tuple.StandardTableauTuples": [[348, 4, 1, "", "Element"], [348, 4, 1, "", "level_one_parent_class"], [348, 2, 1, "", "shape"]], "sage.combinat.tableau_tuple.StandardTableauTuples_level": [[348, 2, 1, "", "an_element"]], "sage.combinat.tableau_tuple.StandardTableauTuples_level_size": [[348, 2, 1, "", "an_element"], [348, 2, 1, "", "cardinality"]], "sage.combinat.tableau_tuple.StandardTableauTuples_shape": [[348, 2, 1, "", "an_element"], [348, 2, 1, "", "cardinality"], [348, 2, 1, "", "last"], [348, 2, 1, "", "random_element"]], "sage.combinat.tableau_tuple.StandardTableauTuples_size": [[348, 2, 1, "", "an_element"]], "sage.combinat.tableau_tuple.StandardTableaux_residue_shape": [[348, 2, 1, "", "an_element"]], "sage.combinat.tableau_tuple.TableauTuple": [[348, 4, 1, "", "Element"], [348, 2, 1, "", "add_entry"], [348, 2, 1, "", "cells_containing"], [348, 2, 1, "", "charge"], [348, 2, 1, "", "cocharge"], [348, 2, 1, "", "column_stabilizer"], [348, 2, 1, "", "components"], [348, 2, 1, "", "conjugate"], [348, 2, 1, "", "content"], [348, 2, 1, "", "entries"], [348, 2, 1, "", "entry"], [348, 2, 1, "", "first_column_descent"], [348, 2, 1, "", "first_row_descent"], [348, 2, 1, "", "is_column_strict"], [348, 2, 1, "", "is_row_strict"], [348, 2, 1, "", "is_standard"], [348, 2, 1, "", "level"], [348, 2, 1, "", "pp"], [348, 2, 1, "", "reduced_column_word"], [348, 2, 1, "", "reduced_row_word"], [348, 2, 1, "", "residue"], [348, 2, 1, "", "restrict"], [348, 2, 1, "", "row_stabilizer"], [348, 2, 1, "", "shape"], [348, 2, 1, "", "size"], [348, 2, 1, "", "symmetric_group_action_on_entries"], [348, 2, 1, "", "to_list"], [348, 2, 1, "", "to_permutation"], [348, 2, 1, "", "to_word"], [348, 2, 1, "", "to_word_by_column"], [348, 2, 1, "", "to_word_by_row"], [348, 2, 1, "", "up"]], "sage.combinat.tableau_tuple.TableauTuples": [[348, 4, 1, "", "Element"], [348, 2, 1, "", "level"], [348, 4, 1, "", "level_one_parent_class"], [348, 2, 1, "", "list"], [348, 4, 1, "", "options"], [348, 2, 1, "", "size"]], "sage.combinat.tableau_tuple.TableauTuples_all": [[348, 2, 1, "", "an_element"]], "sage.combinat.tableau_tuple.TableauTuples_level": [[348, 2, 1, "", "an_element"]], "sage.combinat.tableau_tuple.TableauTuples_level_size": [[348, 2, 1, "", "an_element"]], "sage.combinat.tableau_tuple.TableauTuples_size": [[348, 2, 1, "", "an_element"]], "sage.combinat.tamari_lattices": [[349, 3, 1, "", "DexterSemilattice"], [349, 3, 1, "", "GeneralizedTamariLattice"], [349, 3, 1, "", "TamariLattice"], [349, 3, 1, "", "paths_in_triangle"], [349, 3, 1, "", "swap"], [349, 3, 1, "", "swap_dexter"]], "sage.combinat.tiling": [[350, 1, 1, "", "Polyomino"], [350, 1, 1, "", "TilingSolver"], [350, 3, 1, "", "ncube_isometry_group"], [350, 3, 1, "", "ncube_isometry_group_cosets"]], "sage.combinat.tiling.Polyomino": [[350, 2, 1, "", "boundary"], [350, 2, 1, "", "bounding_box"], [350, 2, 1, "", "canonical"], [350, 2, 1, "", "canonical_isometric_copies"], [350, 2, 1, "", "center"], [350, 2, 1, "", "color"], [350, 2, 1, "", "frozenset"], [350, 2, 1, "", "intersection"], [350, 2, 1, "", "isometric_copies"], [350, 2, 1, "", "isometric_copies_intersection"], [350, 2, 1, "", "neighbor_edges"], [350, 2, 1, "", "self_surrounding"], [350, 2, 1, "", "show2d"], [350, 2, 1, "", "show3d"], [350, 2, 1, "", "sorted_list"], [350, 2, 1, "", "translated_copies"], [350, 2, 1, "", "translated_copies_intersection"]], "sage.combinat.tiling.TilingSolver": [[350, 2, 1, "", "animate"], [350, 2, 1, "", "coord_to_int_dict"], [350, 2, 1, "", "dlx_solver"], [350, 2, 1, "", "int_to_coord_dict"], [350, 2, 1, "", "is_suitable"], [350, 2, 1, "", "nrows_per_piece"], [350, 2, 1, "", "number_of_solutions"], [350, 2, 1, "", "pieces"], [350, 2, 1, "", "row_to_polyomino"], [350, 2, 1, "", "rows"], [350, 2, 1, "", "rows_for_piece"], [350, 2, 1, "", "solve"], [350, 2, 1, "", "space"], [350, 2, 1, "", "starting_rows"]], "sage.combinat.tools": [[351, 3, 1, "", "transitive_ideal"]], "sage.combinat.triangles_FHM": [[352, 1, 1, "", "F_triangle"], [352, 1, 1, "", "Gamma_triangle"], [352, 1, 1, "", "H_triangle"], [352, 1, 1, "", "M_triangle"], [352, 1, 1, "", "Triangle"]], "sage.combinat.triangles_FHM.F_triangle": [[352, 2, 1, "", "h"], [352, 2, 1, "", "m"], [352, 2, 1, "", "vector"]], "sage.combinat.triangles_FHM.Gamma_triangle": [[352, 2, 1, "", "h"], [352, 2, 1, "", "vector"]], "sage.combinat.triangles_FHM.H_triangle": [[352, 2, 1, "", "f"], [352, 2, 1, "", "gamma"], [352, 2, 1, "", "m"], [352, 2, 1, "", "transpose"], [352, 2, 1, "", "vector"]], "sage.combinat.triangles_FHM.M_triangle": [[352, 2, 1, "", "dual"], [352, 2, 1, "", "f"], [352, 2, 1, "", "h"], [352, 2, 1, "", "transmute"]], "sage.combinat.triangles_FHM.Triangle": [[352, 2, 1, "", "matrix"], [352, 2, 1, "", "polynomial"], [352, 2, 1, "", "truncate"]], "sage.combinat.tuple": [[353, 1, 1, "", "Tuples"], [353, 4, 1, "", "Tuples_sk"], [353, 1, 1, "", "UnorderedTuples"], [353, 4, 1, "", "UnorderedTuples_sk"]], "sage.combinat.tuple.Tuples": [[353, 2, 1, "", "cardinality"]], "sage.combinat.tuple.UnorderedTuples": [[353, 2, 1, "", "cardinality"]], "sage.combinat.vector_partition": [[355, 3, 1, "", "IntegerVectorsIterator"], [355, 1, 1, "", "VectorPartition"], [355, 1, 1, "", "VectorPartitions"], [355, 3, 1, "", "find_min"]], "sage.combinat.vector_partition.VectorPartition": [[355, 2, 1, "", "partition_at_vertex"], [355, 2, 1, "", "sum"]], "sage.combinat.vector_partition.VectorPartitions": [[355, 4, 1, "", "Element"]], "sage.combinat.words": [[356, 0, 0, "-", "abstract_word"], [357, 0, 0, "-", "all"], [358, 0, 0, "-", "alphabet"], [359, 0, 0, "-", "finite_word"], [360, 0, 0, "-", "infinite_word"], [361, 0, 0, "-", "lyndon_word"], [362, 0, 0, "-", "morphism"], [363, 0, 0, "-", "paths"], [364, 0, 0, "-", "shuffle_product"], [365, 0, 0, "-", "suffix_trees"], [366, 0, 0, "-", "word"], [367, 0, 0, "-", "word_char"], [368, 0, 0, "-", "word_datatypes"], [369, 0, 0, "-", "word_generators"], [370, 0, 0, "-", "word_infinite_datatypes"], [371, 0, 0, "-", "word_options"], [372, 0, 0, "-", "words"]], "sage.combinat.words.abstract_word": [[356, 1, 1, "", "Word_class"]], "sage.combinat.words.abstract_word.Word_class": [[356, 2, 1, "", "apply_morphism"], [356, 2, 1, "", "complete_return_words_iterator"], [356, 2, 1, "", "delta"], [356, 2, 1, "", "factor_occurrences_iterator"], [356, 2, 1, "", "finite_differences"], [356, 2, 1, "", "first_occurrence"], [356, 2, 1, "", "is_empty"], [356, 2, 1, "", "is_finite"], [356, 2, 1, "", "iterated_right_palindromic_closure"], [356, 2, 1, "", "length"], [356, 2, 1, "", "lex_greater"], [356, 2, 1, "", "lex_less"], [356, 2, 1, "", "longest_common_prefix"], [356, 2, 1, "", "longest_periodic_prefix"], [356, 2, 1, "", "palindrome_prefixes_iterator"], [356, 2, 1, "", "parent"], [356, 2, 1, "", "partial_sums"], [356, 2, 1, "", "prefixes_iterator"], [356, 2, 1, "", "return_words_iterator"], [356, 2, 1, "", "string_rep"], [356, 2, 1, "", "sum_digits"], [356, 2, 1, "", "to_integer_word"]], "sage.combinat.words.alphabet": [[358, 3, 1, "", "Alphabet"], [358, 3, 1, "", "build_alphabet"]], "sage.combinat.words.finite_word": [[359, 1, 1, "", "CallableFromListOfWords"], [359, 1, 1, "", "Factorization"], [359, 1, 1, "", "FiniteWord_class"], [359, 3, 1, "", "evaluation_dict"], [359, 3, 1, "", "word_to_ordered_set_partition"]], "sage.combinat.words.finite_word.FiniteWord_class": [[359, 2, 1, "", "BWT"], [359, 2, 1, "", "LZ_decomposition"], [359, 2, 1, "", "abelian_complexity"], [359, 2, 1, "", "abelian_vector"], [359, 2, 1, "", "abelian_vectors"], [359, 2, 1, "", "apply_permutation_to_letters"], [359, 2, 1, "", "apply_permutation_to_positions"], [359, 2, 1, "", "balance"], [359, 2, 1, "", "bispecial_factors"], [359, 2, 1, "", "bispecial_factors_iterator"], [359, 2, 1, "", "border"], [359, 2, 1, "", "charge"], [359, 2, 1, "", "cocharge"], [359, 2, 1, "", "coerce"], [359, 2, 1, "", "colored_vector"], [359, 2, 1, "", "commutes_with"], [359, 2, 1, "", "complete_return_words"], [359, 2, 1, "", "concatenate"], [359, 2, 1, "", "conjugate"], [359, 2, 1, "", "conjugate_position"], [359, 2, 1, "", "conjugates"], [359, 2, 1, "", "conjugates_iterator"], [359, 2, 1, "", "content"], [359, 2, 1, "", "count"], [359, 2, 1, "", "critical_exponent"], [359, 2, 1, "", "crochemore_factorization"], [359, 2, 1, "", "defect"], [359, 2, 1, "", "deg_inv_lex_less"], [359, 2, 1, "", "deg_lex_less"], [359, 2, 1, "", "deg_rev_lex_less"], [359, 2, 1, "", "degree"], [359, 2, 1, "", "delta"], [359, 2, 1, "", "delta_derivate"], [359, 2, 1, "", "delta_derivate_left"], [359, 2, 1, "", "delta_derivate_right"], [359, 2, 1, "", "delta_inv"], [359, 2, 1, "", "evaluation"], [359, 2, 1, "", "evaluation_dict"], [359, 2, 1, "", "evaluation_partition"], [359, 2, 1, "", "evaluation_sparse"], [359, 2, 1, "", "exponent"], [359, 2, 1, "", "factor_complexity"], [359, 2, 1, "", "factor_iterator"], [359, 2, 1, "", "factor_occurrences_in"], [359, 2, 1, "", "factor_set"], [359, 2, 1, "", "find"], [359, 2, 1, "", "first_pos_in"], [359, 2, 1, "", "foata_bijection"], [359, 2, 1, "", "good_suffix_table"], [359, 2, 1, "", "has_period"], [359, 2, 1, "", "has_prefix"], [359, 2, 1, "", "has_suffix"], [359, 2, 1, "", "implicit_suffix_tree"], [359, 2, 1, "", "inv_lex_less"], [359, 2, 1, "", "inversions"], [359, 2, 1, "", "is_balanced"], [359, 2, 1, "", "is_cadence"], [359, 2, 1, "", "is_christoffel"], [359, 2, 1, "", "is_conjugate_with"], [359, 2, 1, "", "is_cube"], [359, 2, 1, "", "is_cube_free"], [359, 2, 1, "", "is_empty"], [359, 2, 1, "", "is_factor"], [359, 2, 1, "", "is_finite"], [359, 2, 1, "", "is_full"], [359, 2, 1, "", "is_lyndon"], [359, 2, 1, "", "is_overlap"], [359, 2, 1, "", "is_palindrome"], [359, 2, 1, "", "is_prefix"], [359, 2, 1, "", "is_primitive"], [359, 2, 1, "", "is_proper_prefix"], [359, 2, 1, "", "is_proper_suffix"], [359, 2, 1, "", "is_quasiperiodic"], [359, 2, 1, "", "is_rich"], [359, 2, 1, "", "is_smooth_prefix"], [359, 2, 1, "", "is_square"], [359, 2, 1, "", "is_square_free"], [359, 2, 1, "", "is_sturmian_factor"], [359, 2, 1, "", "is_subword_of"], [359, 2, 1, "", "is_suffix"], [359, 2, 1, "", "is_symmetric"], [359, 2, 1, "", "is_tangent"], [359, 2, 1, "", "is_yamanouchi"], [359, 2, 1, "", "iterated_left_palindromic_closure"], [359, 2, 1, "", "lacunas"], [359, 2, 1, "", "last_position_dict"], [359, 2, 1, "", "left_special_factors"], [359, 2, 1, "", "left_special_factors_iterator"], [359, 2, 1, "", "length"], [359, 2, 1, "", "length_border"], [359, 2, 1, "", "length_maximal_palindrome"], [359, 2, 1, "", "lengths_maximal_palindromes"], [359, 2, 1, "", "lengths_unioccurrent_lps"], [359, 2, 1, "", "letters"], [359, 2, 1, "", "longest_backward_extension"], [359, 2, 1, "", "longest_common_subword"], [359, 2, 1, "", "longest_common_suffix"], [359, 2, 1, "", "longest_forward_extension"], [359, 2, 1, "", "lps"], [359, 2, 1, "", "lps_lengths"], [359, 2, 1, "", "lyndon_factorization"], [359, 2, 1, "", "major_index"], [359, 2, 1, "", "minimal_conjugate"], [359, 2, 1, "", "minimal_period"], [359, 2, 1, "", "nb_factor_occurrences_in"], [359, 2, 1, "", "nb_subword_occurrences_in"], [359, 2, 1, "", "number_of_factor_occurrences"], [359, 2, 1, "", "number_of_factors"], [359, 2, 1, "", "number_of_inversions"], [359, 2, 1, "", "number_of_left_special_factors"], [359, 2, 1, "", "number_of_letter_occurrences"], [359, 2, 1, "", "number_of_right_special_factors"], [359, 2, 1, "", "number_of_subword_occurrences"], [359, 2, 1, "", "order"], [359, 2, 1, "", "overlap_partition"], [359, 2, 1, "", "palindrome_prefixes"], [359, 2, 1, "", "palindromes"], [359, 2, 1, "", "palindromic_closure"], [359, 2, 1, "", "palindromic_complexity"], [359, 2, 1, "", "palindromic_lacunas_study"], [359, 2, 1, "", "periods"], [359, 2, 1, "", "phi"], [359, 2, 1, "", "phi_inv"], [359, 2, 1, "", "prefix_function_table"], [359, 2, 1, "", "primitive"], [359, 2, 1, "", "primitive_length"], [359, 2, 1, "", "quasiperiods"], [359, 2, 1, "", "rauzy_graph"], [359, 2, 1, "", "reduced_rauzy_graph"], [359, 2, 1, "", "return_words"], [359, 2, 1, "", "return_words_derivate"], [359, 2, 1, "", "rev_lex_less"], [359, 2, 1, "", "reversal"], [359, 2, 1, "", "rfind"], [359, 2, 1, "", "right_special_factors"], [359, 2, 1, "", "right_special_factors_iterator"], [359, 2, 1, "", "robinson_schensted"], [359, 2, 1, "", "schuetzenberger_involution"], [359, 2, 1, "", "shifted_shuffle"], [359, 2, 1, "", "shuffle"], [359, 2, 1, "", "squares"], [359, 2, 1, "", "standard_factorization"], [359, 2, 1, "", "standard_permutation"], [359, 2, 1, "", "sturmian_desubstitute_as_possible"], [359, 2, 1, "", "subword_complementaries"], [359, 2, 1, "", "suffix_tree"], [359, 2, 1, "", "suffix_trie"], [359, 2, 1, "", "swap"], [359, 2, 1, "", "swap_decrease"], [359, 2, 1, "", "swap_increase"], [359, 2, 1, "", "to_integer_list"], [359, 2, 1, "", "to_integer_word"], [359, 2, 1, "", "to_monoid_element"], [359, 2, 1, "", "to_ordered_set_partition"], [359, 2, 1, "", "topological_entropy"]], "sage.combinat.words.infinite_word": [[360, 1, 1, "", "InfiniteWord_class"]], "sage.combinat.words.infinite_word.InfiniteWord_class": [[360, 2, 1, "", "length"]], "sage.combinat.words.lyndon_word": [[361, 3, 1, "", "LyndonWord"], [361, 3, 1, "", "LyndonWords"], [361, 1, 1, "", "LyndonWords_class"], [361, 1, 1, "", "LyndonWords_evaluation"], [361, 1, 1, "", "LyndonWords_nk"], [361, 3, 1, "", "StandardBracketedLyndonWords"], [361, 1, 1, "", "StandardBracketedLyndonWords_nk"], [361, 3, 1, "", "standard_bracketing"], [361, 3, 1, "", "standard_unbracketing"]], "sage.combinat.words.lyndon_word.LyndonWords_evaluation": [[361, 2, 1, "", "cardinality"]], "sage.combinat.words.lyndon_word.LyndonWords_nk": [[361, 2, 1, "", "cardinality"]], "sage.combinat.words.lyndon_word.StandardBracketedLyndonWords_nk": [[361, 2, 1, "", "cardinality"]], "sage.combinat.words.morphism": [[362, 1, 1, "", "PeriodicPointIterator"], [362, 1, 1, "", "WordMorphism"], [362, 3, 1, "", "get_cycles"]], "sage.combinat.words.morphism.PeriodicPointIterator": [[362, 2, 1, "", "get_iterator"]], "sage.combinat.words.morphism.WordMorphism": [[362, 2, 1, "", "abelian_rotation_subspace"], [362, 2, 1, "", "codomain"], [362, 2, 1, "", "conjugate"], [362, 2, 1, "", "domain"], [362, 2, 1, "", "dual_map"], [362, 2, 1, "", "extend_by"], [362, 2, 1, "", "fixed_point"], [362, 2, 1, "", "fixed_points"], [362, 2, 1, "", "growing_letters"], [362, 2, 1, "", "has_conjugate_in_classP"], [362, 2, 1, "", "has_left_conjugate"], [362, 2, 1, "", "has_right_conjugate"], [362, 2, 1, "", "image"], [362, 2, 1, "", "images"], [362, 2, 1, "", "immortal_letters"], [362, 2, 1, "", "incidence_matrix"], [362, 2, 1, "", "infinite_repetitions_primitive_roots"], [362, 2, 1, "", "is_empty"], [362, 2, 1, "", "is_endomorphism"], [362, 2, 1, "", "is_erasing"], [362, 2, 1, "", "is_growing"], [362, 2, 1, "", "is_identity"], [362, 2, 1, "", "is_in_classP"], [362, 2, 1, "", "is_injective"], [362, 2, 1, "", "is_involution"], [362, 2, 1, "", "is_primitive"], [362, 2, 1, "", "is_prolongable"], [362, 2, 1, "", "is_pushy"], [362, 2, 1, "", "is_repetitive"], [362, 2, 1, "", "is_self_composable"], [362, 2, 1, "", "is_unboundedly_repetitive"], [362, 2, 1, "", "is_uniform"], [362, 2, 1, "", "language"], [362, 2, 1, "", "latex_layout"], [362, 2, 1, "", "letter_growth_types"], [362, 2, 1, "", "list_of_conjugates"], [362, 2, 1, "", "partition_of_domain_alphabet"], [362, 2, 1, "", "periodic_point"], [362, 2, 1, "", "periodic_points"], [362, 2, 1, "", "pisot_eigenvector_left"], [362, 2, 1, "", "pisot_eigenvector_right"], [362, 2, 1, "", "rauzy_fractal_plot"], [362, 2, 1, "", "rauzy_fractal_points"], [362, 2, 1, "", "rauzy_fractal_projection"], [362, 2, 1, "", "restrict_domain"], [362, 2, 1, "", "reversal"], [362, 2, 1, "", "simplify_alphabet_size"], [362, 2, 1, "", "simplify_until_injective"]], "sage.combinat.words.paths": [[363, 1, 1, "", "FiniteWordPath_2d"], [363, 1, 1, "", "FiniteWordPath_2d_callable"], [363, 1, 1, "", "FiniteWordPath_2d_callable_with_caching"], [363, 1, 1, "", "FiniteWordPath_2d_iter"], [363, 1, 1, "", "FiniteWordPath_2d_iter_with_caching"], [363, 1, 1, "", "FiniteWordPath_2d_list"], [363, 1, 1, "", "FiniteWordPath_2d_str"], [363, 1, 1, "", "FiniteWordPath_2d_tuple"], [363, 1, 1, "", "FiniteWordPath_3d"], [363, 1, 1, "", "FiniteWordPath_3d_callable"], [363, 1, 1, "", "FiniteWordPath_3d_callable_with_caching"], [363, 1, 1, "", "FiniteWordPath_3d_iter"], [363, 1, 1, "", "FiniteWordPath_3d_iter_with_caching"], [363, 1, 1, "", "FiniteWordPath_3d_list"], [363, 1, 1, "", "FiniteWordPath_3d_str"], [363, 1, 1, "", "FiniteWordPath_3d_tuple"], [363, 1, 1, "", "FiniteWordPath_all"], [363, 1, 1, "", "FiniteWordPath_all_callable"], [363, 1, 1, "", "FiniteWordPath_all_callable_with_caching"], [363, 1, 1, "", "FiniteWordPath_all_iter"], [363, 1, 1, "", "FiniteWordPath_all_iter_with_caching"], [363, 1, 1, "", "FiniteWordPath_all_list"], [363, 1, 1, "", "FiniteWordPath_all_str"], [363, 1, 1, "", "FiniteWordPath_all_tuple"], [363, 1, 1, "", "FiniteWordPath_cube_grid"], [363, 1, 1, "", "FiniteWordPath_cube_grid_callable"], [363, 1, 1, "", "FiniteWordPath_cube_grid_callable_with_caching"], [363, 1, 1, "", "FiniteWordPath_cube_grid_iter"], [363, 1, 1, "", "FiniteWordPath_cube_grid_iter_with_caching"], [363, 1, 1, "", "FiniteWordPath_cube_grid_list"], [363, 1, 1, "", "FiniteWordPath_cube_grid_str"], [363, 1, 1, "", "FiniteWordPath_cube_grid_tuple"], [363, 1, 1, "", "FiniteWordPath_dyck"], [363, 1, 1, "", "FiniteWordPath_dyck_callable"], [363, 1, 1, "", "FiniteWordPath_dyck_callable_with_caching"], [363, 1, 1, "", "FiniteWordPath_dyck_iter"], [363, 1, 1, "", "FiniteWordPath_dyck_iter_with_caching"], [363, 1, 1, "", "FiniteWordPath_dyck_list"], [363, 1, 1, "", "FiniteWordPath_dyck_str"], [363, 1, 1, "", "FiniteWordPath_dyck_tuple"], [363, 1, 1, "", "FiniteWordPath_hexagonal_grid"], [363, 1, 1, "", "FiniteWordPath_hexagonal_grid_callable"], [363, 1, 1, "", "FiniteWordPath_hexagonal_grid_callable_with_caching"], [363, 1, 1, "", "FiniteWordPath_hexagonal_grid_iter"], [363, 1, 1, "", "FiniteWordPath_hexagonal_grid_iter_with_caching"], [363, 1, 1, "", "FiniteWordPath_hexagonal_grid_list"], [363, 1, 1, "", "FiniteWordPath_hexagonal_grid_str"], [363, 1, 1, "", "FiniteWordPath_hexagonal_grid_tuple"], [363, 1, 1, "", "FiniteWordPath_north_east"], [363, 1, 1, "", "FiniteWordPath_north_east_callable"], [363, 1, 1, "", "FiniteWordPath_north_east_callable_with_caching"], [363, 1, 1, "", "FiniteWordPath_north_east_iter"], [363, 1, 1, "", "FiniteWordPath_north_east_iter_with_caching"], [363, 1, 1, "", "FiniteWordPath_north_east_list"], [363, 1, 1, "", "FiniteWordPath_north_east_str"], [363, 1, 1, "", "FiniteWordPath_north_east_tuple"], [363, 1, 1, "", "FiniteWordPath_square_grid"], [363, 1, 1, "", "FiniteWordPath_square_grid_callable"], [363, 1, 1, "", "FiniteWordPath_square_grid_callable_with_caching"], [363, 1, 1, "", "FiniteWordPath_square_grid_iter"], [363, 1, 1, "", "FiniteWordPath_square_grid_iter_with_caching"], [363, 1, 1, "", "FiniteWordPath_square_grid_list"], [363, 1, 1, "", "FiniteWordPath_square_grid_str"], [363, 1, 1, "", "FiniteWordPath_square_grid_tuple"], [363, 1, 1, "", "FiniteWordPath_triangle_grid"], [363, 1, 1, "", "FiniteWordPath_triangle_grid_callable"], [363, 1, 1, "", "FiniteWordPath_triangle_grid_callable_with_caching"], [363, 1, 1, "", "FiniteWordPath_triangle_grid_iter"], [363, 1, 1, "", "FiniteWordPath_triangle_grid_iter_with_caching"], [363, 1, 1, "", "FiniteWordPath_triangle_grid_list"], [363, 1, 1, "", "FiniteWordPath_triangle_grid_str"], [363, 1, 1, "", "FiniteWordPath_triangle_grid_tuple"], [363, 3, 1, "", "WordPaths"], [363, 1, 1, "", "WordPaths_all"], [363, 1, 1, "", "WordPaths_cube_grid"], [363, 1, 1, "", "WordPaths_dyck"], [363, 1, 1, "", "WordPaths_hexagonal_grid"], [363, 1, 1, "", "WordPaths_north_east"], [363, 1, 1, "", "WordPaths_square_grid"], [363, 1, 1, "", "WordPaths_triangle_grid"]], "sage.combinat.words.paths.FiniteWordPath_2d": [[363, 2, 1, "", "animate"], [363, 2, 1, "", "area"], [363, 2, 1, "", "height"], [363, 2, 1, "", "height_vector"], [363, 2, 1, "", "plot"], [363, 2, 1, "", "plot_directive_vector"], [363, 2, 1, "", "width"], [363, 2, 1, "", "width_vector"], [363, 2, 1, "", "xmax"], [363, 2, 1, "", "xmin"], [363, 2, 1, "", "ymax"], [363, 2, 1, "", "ymin"]], "sage.combinat.words.paths.FiniteWordPath_3d": [[363, 2, 1, "", "plot"]], "sage.combinat.words.paths.FiniteWordPath_all": [[363, 2, 1, "", "directive_vector"], [363, 2, 1, "", "end_point"], [363, 2, 1, "", "is_closed"], [363, 2, 1, "", "is_simple"], [363, 2, 1, "", "is_tangent"], [363, 2, 1, "", "plot_projection"], [363, 2, 1, "", "points"], [363, 2, 1, "", "projected_path"], [363, 2, 1, "", "projected_point_iterator"], [363, 2, 1, "", "start_point"], [363, 2, 1, "", "tikz_trajectory"]], "sage.combinat.words.paths.FiniteWordPath_square_grid": [[363, 2, 1, "", "area"], [363, 2, 1, "", "is_closed"], [363, 2, 1, "", "is_simple"], [363, 2, 1, "", "tikz_trajectory"]], "sage.combinat.words.paths.FiniteWordPath_triangle_grid": [[363, 2, 1, "", "xmax"], [363, 2, 1, "", "xmin"], [363, 2, 1, "", "ymax"], [363, 2, 1, "", "ymin"]], "sage.combinat.words.paths.WordPaths_all": [[363, 2, 1, "", "letters_to_steps"], [363, 2, 1, "", "vector_space"]], "sage.combinat.words.shuffle_product": [[364, 1, 1, "", "ShuffleProduct_shifted"], [364, 1, 1, "", "ShuffleProduct_w1w2"]], "sage.combinat.words.shuffle_product.ShuffleProduct_w1w2": [[364, 2, 1, "", "cardinality"]], "sage.combinat.words.suffix_trees": [[365, 1, 1, "", "DecoratedSuffixTree"], [365, 1, 1, "", "ImplicitSuffixTree"], [365, 1, 1, "", "SuffixTrie"]], "sage.combinat.words.suffix_trees.DecoratedSuffixTree": [[365, 2, 1, "", "square_vocabulary"]], "sage.combinat.words.suffix_trees.ImplicitSuffixTree": [[365, 2, 1, "", "LZ_decomposition"], [365, 2, 1, "", "active_state"], [365, 2, 1, "", "edge_iterator"], [365, 2, 1, "", "factor_iterator"], [365, 2, 1, "", "leftmost_covering_set"], [365, 2, 1, "", "number_of_factors"], [365, 2, 1, "", "plot"], [365, 2, 1, "", "process_letter"], [365, 2, 1, "", "show"], [365, 2, 1, "", "states"], [365, 2, 1, "", "suffix_link"], [365, 2, 1, "", "suffix_walk"], [365, 2, 1, "", "to_digraph"], [365, 2, 1, "", "to_explicit_suffix_tree"], [365, 2, 1, "", "transition_function"], [365, 2, 1, "", "transition_function_dictionary"], [365, 2, 1, "", "trie_type_dict"], [365, 2, 1, "", "uncompactify"], [365, 2, 1, "", "word"]], "sage.combinat.words.suffix_trees.SuffixTrie": [[365, 2, 1, "", "active_state"], [365, 2, 1, "", "final_states"], [365, 2, 1, "", "has_suffix"], [365, 2, 1, "", "node_to_word"], [365, 2, 1, "", "plot"], [365, 2, 1, "", "process_letter"], [365, 2, 1, "", "show"], [365, 2, 1, "", "states"], [365, 2, 1, "", "suffix_link"], [365, 2, 1, "", "to_digraph"], [365, 2, 1, "", "transition_function"], [365, 2, 1, "", "word"]], "sage.combinat.words.word": [[366, 1, 1, "", "FiniteWord_callable"], [366, 1, 1, "", "FiniteWord_callable_with_caching"], [366, 1, 1, "", "FiniteWord_char"], [366, 1, 1, "", "FiniteWord_iter"], [366, 1, 1, "", "FiniteWord_iter_with_caching"], [366, 1, 1, "", "FiniteWord_list"], [366, 1, 1, "", "FiniteWord_morphic"], [366, 1, 1, "", "FiniteWord_str"], [366, 1, 1, "", "FiniteWord_tuple"], [366, 1, 1, "", "InfiniteWord_callable"], [366, 1, 1, "", "InfiniteWord_callable_with_caching"], [366, 1, 1, "", "InfiniteWord_iter"], [366, 1, 1, "", "InfiniteWord_iter_with_caching"], [366, 1, 1, "", "InfiniteWord_morphic"], [366, 3, 1, "", "Word"], [366, 1, 1, "", "Word_iter"], [366, 1, 1, "", "Word_iter_with_caching"]], "sage.combinat.words.word_char": [[367, 1, 1, "", "WordDatatype_char"], [367, 3, 1, "", "reversed_word_iterator"]], "sage.combinat.words.word_char.WordDatatype_char": [[367, 2, 1, "", "concatenate"], [367, 2, 1, "", "has_prefix"], [367, 2, 1, "", "is_empty"], [367, 2, 1, "", "is_square"], [367, 2, 1, "", "length"], [367, 2, 1, "", "letters"], [367, 2, 1, "", "longest_common_prefix"], [367, 2, 1, "", "longest_common_suffix"]], "sage.combinat.words.word_datatypes": [[368, 1, 1, "", "WordDatatype"], [368, 1, 1, "", "WordDatatype_list"], [368, 1, 1, "", "WordDatatype_str"], [368, 1, 1, "", "WordDatatype_tuple"]], "sage.combinat.words.word_datatypes.WordDatatype_list": [[368, 2, 1, "", "length"], [368, 2, 1, "", "number_of_letter_occurrences"]], "sage.combinat.words.word_datatypes.WordDatatype_str": [[368, 2, 1, "", "find"], [368, 2, 1, "", "has_prefix"], [368, 2, 1, "", "has_suffix"], [368, 2, 1, "", "is_prefix"], [368, 2, 1, "", "is_suffix"], [368, 2, 1, "", "length"], [368, 2, 1, "", "number_of_letter_occurrences"], [368, 2, 1, "", "partition"], [368, 2, 1, "", "rfind"], [368, 2, 1, "", "split"]], "sage.combinat.words.word_datatypes.WordDatatype_tuple": [[368, 2, 1, "", "length"]], "sage.combinat.words.word_generators": [[369, 1, 1, "", "LowerChristoffelWord"], [369, 1, 1, "", "WordGenerator"]], "sage.combinat.words.word_generators.LowerChristoffelWord": [[369, 2, 1, "", "markoff_number"], [369, 2, 1, "", "standard_factorization"]], "sage.combinat.words.word_generators.WordGenerator": [[369, 2, 1, "", "BaumSweetWord"], [369, 2, 1, "", "CharacteristicSturmianWord"], [369, 4, 1, "", "ChristoffelWord"], [369, 2, 1, "", "CodingOfRotationWord"], [369, 2, 1, "", "FibonacciWord"], [369, 2, 1, "", "FixedPointOfMorphism"], [369, 2, 1, "", "KolakoskiWord"], [369, 4, 1, "", "LowerChristoffelWord"], [369, 2, 1, "", "LowerMechanicalWord"], [369, 2, 1, "", "MinimalSmoothPrefix"], [369, 2, 1, "", "PalindromicDefectWord"], [369, 2, 1, "", "RandomWord"], [369, 2, 1, "", "StandardEpisturmianWord"], [369, 2, 1, "", "ThueMorseWord"], [369, 2, 1, "", "UpperChristoffelWord"], [369, 2, 1, "", "UpperMechanicalWord"], [369, 2, 1, "", "dual_fibonacci_tile"], [369, 2, 1, "", "fibonacci_tile"], [369, 2, 1, "", "s_adic"]], "sage.combinat.words.word_infinite_datatypes": [[370, 1, 1, "", "WordDatatype_callable"], [370, 1, 1, "", "WordDatatype_callable_with_caching"], [370, 1, 1, "", "WordDatatype_iter"], [370, 1, 1, "", "WordDatatype_iter_with_caching"]], "sage.combinat.words.word_infinite_datatypes.WordDatatype_callable_with_caching": [[370, 2, 1, "", "flush"]], "sage.combinat.words.word_infinite_datatypes.WordDatatype_iter_with_caching": [[370, 2, 1, "", "flush"]], "sage.combinat.words.word_options": [[371, 3, 1, "", "WordOptions"]], "sage.combinat.words.words": [[372, 1, 1, "", "AbstractLanguage"], [372, 1, 1, "", "FiniteOrInfiniteWords"], [372, 1, 1, "", "FiniteWords"], [372, 1, 1, "", "InfiniteWords"], [372, 3, 1, "", "Words"], [372, 1, 1, "", "Words_n"]], "sage.combinat.words.words.AbstractLanguage": [[372, 2, 1, "", "alphabet"], [372, 2, 1, "", "identity_morphism"]], "sage.combinat.words.words.FiniteOrInfiniteWords": [[372, 2, 1, "", "cardinality"], [372, 2, 1, "", "factors"], [372, 2, 1, "", "finite_words"], [372, 2, 1, "", "infinite_words"], [372, 2, 1, "", "iterate_by_length"], [372, 2, 1, "", "shift"]], "sage.combinat.words.words.FiniteWords": [[372, 2, 1, "", "cardinality"], [372, 2, 1, "", "factors"], [372, 2, 1, "", "iter_morphisms"], [372, 2, 1, "", "iterate_by_length"], [372, 2, 1, "", "random_element"], [372, 2, 1, "", "shift"]], "sage.combinat.words.words.InfiniteWords": [[372, 2, 1, "", "cardinality"], [372, 2, 1, "", "factors"], [372, 2, 1, "", "random_element"], [372, 2, 1, "", "shift"]], "sage.combinat.words.words.Words_n": [[372, 2, 1, "", "alphabet"], [372, 2, 1, "", "cardinality"], [372, 2, 1, "", "iterate_by_length"], [372, 2, 1, "", "list"], [372, 2, 1, "", "random_element"]], "sage.combinat.yang_baxter_graph": [[373, 1, 1, "", "SwapIncreasingOperator"], [373, 1, 1, "", "SwapOperator"], [373, 3, 1, "", "YangBaxterGraph"], [373, 1, 1, "", "YangBaxterGraph_generic"], [373, 1, 1, "", "YangBaxterGraph_partition"]], "sage.combinat.yang_baxter_graph.SwapOperator": [[373, 2, 1, "", "position"]], "sage.combinat.yang_baxter_graph.YangBaxterGraph_generic": [[373, 2, 1, "", "edges"], [373, 2, 1, "", "plot"], [373, 2, 1, "", "relabel_edges"], [373, 2, 1, "", "relabel_vertices"], [373, 2, 1, "", "root"], [373, 2, 1, "", "successors"], [373, 2, 1, "", "vertex_relabelling_dict"], [373, 2, 1, "", "vertices"]], "sage.combinat.yang_baxter_graph.YangBaxterGraph_partition": [[373, 2, 1, "", "relabel_vertices"], [373, 2, 1, "", "vertex_relabelling_dict"]], "sage.rings": [[374, 0, 0, "-", "cfinite_sequence"]], "sage.rings.cfinite_sequence": [[374, 1, 1, "", "CFiniteSequence"], [374, 3, 1, "", "CFiniteSequences"], [374, 1, 1, "", "CFiniteSequences_generic"]], "sage.rings.cfinite_sequence.CFiniteSequence": [[374, 2, 1, "", "closed_form"], [374, 2, 1, "", "coefficients"], [374, 2, 1, "", "denominator"], [374, 2, 1, "", "numerator"], [374, 2, 1, "", "ogf"], [374, 2, 1, "", "recurrence_repr"], [374, 2, 1, "", "series"]], "sage.rings.cfinite_sequence.CFiniteSequences_generic": [[374, 4, 1, "", "Element"], [374, 2, 1, "", "an_element"], [374, 2, 1, "", "fraction_field"], [374, 2, 1, "", "from_recurrence"], [374, 2, 1, "", "gen"], [374, 2, 1, "", "guess"], [374, 2, 1, "", "ngens"], [374, 2, 1, "", "polynomial_ring"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function", "4": "py:attribute", "5": "py:property", "6": "py:data", "7": "py:exception"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "property", "Python property"], "6": ["py", "data", "Python data"], "7": ["py", "exception", "Python exception"]}, "titleterms": {"combinator": [0, 4, 5, 135, 190, 354, 357], "introductori": [0, 5, 40, 220, 317], "materi": [0, 5, 40, 220, 317], "themat": [0, 4, 5], "index": [0, 5, 95, 97], "util": [0, 5], "relat": [0, 5, 103, 220], "topic": [0, 5], "comprehens": [0, 1, 354], "modul": [0, 1, 55, 112, 316], "list": [0, 1, 103, 123, 124, 125, 182, 187, 354], "indic": 0, "tabl": [0, 315], "todo": [1, 2, 9, 11, 17, 25, 26, 35, 39, 46, 59, 68, 76, 77, 81, 83, 86, 90, 99, 101, 103, 108, 109, 110, 114, 120, 123, 128, 130, 134, 139, 141, 144, 145, 146, 154, 160, 172, 174, 181, 182, 183, 187, 191, 198, 212, 215, 217, 222, 227, 229, 230, 232, 234, 236, 237, 238, 239, 241, 242, 243, 264, 271, 272, 273, 274, 275, 283, 294, 296, 302, 303, 311, 313, 317, 339, 344, 346, 347, 348, 354], "abstract": [2, 199, 356], "recurs": [2, 92, 93, 330], "tree": [2, 11, 103, 156, 211, 275, 354, 365], "affin": [3, 36, 37, 38, 57, 232, 233, 235, 238, 246, 249, 250, 252, 254, 256, 258, 260, 264], "permut": [3, 8, 25, 103, 104, 129, 172, 173, 328], "algebra": [4, 12, 15, 16, 18, 74, 99, 111, 113, 119, 147, 161, 163, 181, 185, 234, 235, 241, 343], "tutori": [4, 238], "enumer": [4, 14, 103, 104, 123, 124, 125, 354], "set": [4, 14, 79, 85, 89, 103, 123, 124, 125, 141, 278, 279, 280, 309, 331, 354, 372], "combinatori": [4, 15, 26, 27, 29, 75, 80, 82, 98, 103, 143, 317, 324, 332, 352, 354], "object": [4, 103, 238], "group": [4, 88, 104, 114, 129, 220, 228, 232, 233, 239, 240, 241, 274, 282, 343, 344], "represent": [4, 86, 220, 234, 235, 344], "theori": [4, 220], "operad": 4, "altern": 6, "sign": [6, 31], "matric": [6, 84, 103, 126, 135, 138, 226, 229, 310], "backtrack": [7, 103], "baxter": [8, 373], "A": [9, 37, 108, 120, 239, 245, 246, 247, 270], "bijectionist": 9, "": [9, 107, 193, 315, 350], "toolkit": 9, "quick": 9, "refer": 9, "guid": [9, 120, 239], "tour": [9, 120, 239], "binari": [10, 11, 108, 193, 354], "recurr": 10, "sequenc": [10, 71, 72, 108, 193, 315, 345, 347, 374], "blob": 12, "cartesian": [13, 176], "product": [13, 68, 69, 176, 218, 219, 308, 329, 364], "partit": [14, 99, 103, 107, 141, 160, 161, 162, 163, 164, 165, 174, 217, 278, 279, 280, 313, 327, 342, 354, 355], "tableaux": [14, 16, 32, 54, 103, 131, 166, 169, 170, 196, 197, 200, 210, 212, 218, 219, 307, 314, 341, 346, 347], "rsk": 14, "hopf": [15, 16, 119, 147], "poirier": 16, "reutenau": 16, "standard": 16, "word": [17, 101, 103, 108, 154, 356, 357, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372], "quasi": [17, 110, 142], "symmetr": [17, 110, 142, 145, 147, 148, 150, 151, 281, 282, 283, 284, 285, 288, 289, 290, 292, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 343, 344], "function": [17, 21, 26, 27, 76, 77, 80, 82, 83, 84, 86, 88, 90, 91, 92, 93, 94, 95, 108, 109, 110, 118, 142, 145, 146, 147, 148, 150, 151, 153, 157, 159, 187, 281, 282, 283, 284, 285, 288, 289, 290, 292, 294, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 315, 326, 354, 359], "cluster": [18, 24], "quiver": [18, 21, 22, 23], "clusterse": 19, "mutation_class": 20, "helper": [21, 108], "mutat": [21, 23], "type": [21, 23, 37, 54, 201, 202, 203, 204, 205, 206, 207, 208, 209, 220, 227, 230, 238, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 310], "complex": [24, 239, 340], "gener": [24, 41, 51, 55, 103, 109, 126, 144, 284, 290, 309, 323, 349, 354], "dual": [24, 120, 150, 265, 284], "associahedron": [24, 222], "color": 25, "class": [26, 79, 85, 108, 123, 172, 183, 187, 192, 193, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 310, 354, 366], "fast": [27, 49, 107, 279, 367], "comput": [27, 105, 315], "cython": [27, 82, 173], "mpz": 27, "combin": 28, "map": 29, "integ": [30, 103, 107, 123, 124, 125, 126, 127, 128, 129, 160, 165, 354], "composit": [30, 31, 32, 319, 322], "constel": 33, "core": 34, "count": [35, 126], "crystal": [36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 66, 67, 68, 69, 141, 213], "factor": [37, 237, 359], "alcov": [39, 238], "path": [39, 57, 59, 117, 166, 167, 169, 363], "catalog": [40, 42, 43, 44, 45, 81, 166, 186], "see": 40, "also": 40, "benkart": 41, "kang": 41, "kashiwara": 41, "linear": [41, 55, 183, 325], "lie": [41, 55, 113, 235], "superalgebra": [41, 55], "Of": [42, 43, 44, 45, 62, 63], "elementari": [43, 48, 285], "model": [44, 45, 57, 312], "For": [44, 45], "b": [44, 54, 63, 65, 67, 200, 214, 248, 250], "infti": [44, 54, 63, 65, 67, 200, 214], "kirillov": [45, 56, 212, 218, 219], "reshetikhin": [45, 56, 212, 218, 219], "an": [46, 165, 233, 360, 367], "introduct": [46, 147, 276, 354], "axiomat": 46, "definit": [46, 72], "direct": [47, 117], "sum": [47, 193, 300, 335], "rank": 49, "two": [49, 97], "fulli": [50, 114, 115], "commut": [50, 114, 142, 145, 148, 150, 151], "stabl": 50, "grothendieck": 50, "young": 51, "wall": 51, "highest": [52, 57], "weight": [52, 57, 128, 271, 272], "induc": 53, "mathcal": [54, 63, 214], "nonexcept": 54, "g_2": 54, "kac": 55, "kyoto": 57, "letter": 58, "littelmann": 59, "modifi": [60, 108], "nakajima": 60, "monomi": [60, 63, 294], "bernstein": 61, "zelevinski": 61, "multiseg": 61, "mirkovi\u0107": 62, "vilonen": 62, "mv": 62, "polytop": [62, 354], "pbw": [63, 64], "data": [64, 220, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270], "polyhedr": 65, "realiz": [65, 241, 242, 271, 302], "spin": 66, "star": 67, "structur": [67, 75, 89, 333], "On": 67, "tensor": [68, 69, 218, 219], "element": [69, 79, 114, 178, 215, 219, 338], "cyclic": 70, "siev": 70, "phenomenon": 70, "de": 71, "bruijn": 71, "degre": 72, "algorithm": [72, 96, 107, 354, 359], "about": 72, "implement": [72, 96, 120, 276, 354], "derang": 73, "descent": 74, "design": [75, 76, 77, 79, 80, 81, 82, 86, 88, 94], "incid": [75, 89, 181], "balanc": [76, 94], "incomplet": [76, 94], "block": [76, 77, 86, 94], "bibd": 76, "method": [77, 79, 85, 89, 96, 97, 108, 109, 172, 182, 183, 187, 192, 193], "cover": [78, 79, 100], "arrai": [78, 91, 92, 93, 194, 367], "ca": 78, "t": [79, 345], "subset": [79, 103, 334, 336, 337, 338, 354], "v": 79, "k": [79, 193, 296], "databas": [80, 87], "small": 80, "differ": [83, 84], "famili": [83, 106, 220], "evenli": 85, "distribut": 85, "finit": [85, 108, 109, 182, 187, 220, 239, 240, 310, 354, 356, 359, 368, 374], "field": [85, 310], "extern": 86, "generalis": 87, "quadrangl": 87, "spread": 87, "divis": [88, 108], "gdd": 88, "i": [89, 147, 262], "e": [89, 255, 256], "hypergraph": [89, 96], "system": [89, 95, 220, 238, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 311], "mutual": 90, "orthogon": [90, 91, 92, 93, 298, 299], "latin": [90, 139], "squar": [90, 139], "mol": 90, "oa": 91, "build": 92, "construct": [92, 93, 186, 354], "find": 93, "resolv": 94, "rbibd": 94, "steiner": 95, "quadrupl": 95, "isomorph": [96, 354], "copi": [96, 108], "search": 96, "limit": 96, "graph": [97, 103, 117, 120, 238, 354, 359, 373], "diagram": [98, 99, 120, 161, 180, 231], "exact": 100, "problem": [100, 350], "via": [100, 108], "danc": [100, 136, 137, 350], "link": [100, 136, 137, 350], "dyck": [101, 154, 167], "substitut": [102, 362], "over": [102, 165], "unit": 102, "cube": 102, "face": 102, "rauzi": [102, 359], "fractal": 102, "categori": 103, "basic": [103, 317], "polyomino": [103, 158], "solver": [103, 350], "low": 103, "level": 103, "misc": 103, "tool": [104, 143, 351], "modulo": [104, 129], "action": [104, 129], "bell": 105, "uppuluri": 105, "carpent": 105, "number": [105, 108, 189, 193], "brent": 107, "yorgei": 107, "vector": [107, 127, 128, 129, 355], "multiset": [107, 141], "state": [108, 109], "machin": [108, 109], "automata": [108, 109], "transduc": [108, 109], "content": 108, "finitestatemachin": 108, "deriv": 108, "automaton": 108, "access": 108, "part": 108, "manipul": [108, 126], "properti": [108, 337], "oper": [108, 317, 354], "simplif": 108, "convers": 108, "latex": 108, "output": [108, 157], "fsmstate": 108, "fsmtransit": 108, "fsmprocessiter": 108, "exampl": [108, 193, 324, 350, 354], "simpl": 108, "recogn": 108, "naf": 108, "invert": 108, "which": 108, "perform": 108, "3": [108, 208], "grai": [108, 118], "code": [108, 118, 136, 144, 220], "us": [108, 354, 367], "hook": 108, "detect": 108, "same": 108, "0": 108, "1": [108, 201, 204, 205, 206, 207, 209], "common": [109, 143, 354, 369], "free": [110, 111, 112, 113], "dendriform": 111, "pre": 113, "coxet": [114, 220, 228, 229, 230, 238], "acknowledg": [114, 134], "pack": 115, "loop": 115, "gelfand": 116, "tsetlin": 116, "pattern": [116, 168], "acycl": 117, "grossman": 119, "larson": 119, "growth": [120, 194], "grade": 120, "invoc": 120, "rule": [120, 225, 276], "current": [120, 276], "avail": [120, 276], "background": 120, "your": [120, 276], "own": [120, 276], "hall": [121, 286, 290], "polynomi": [121, 132, 133, 189, 236, 277, 286, 291, 293, 297], "The": 122, "hillman": 122, "grassl": 122, "correspond": [122, 276], "constraint": [123, 124, 125], "base": [123, 144, 149, 282, 284], "invers": 124, "lexicograph": [124, 354], "order": [124, 141, 156, 280, 306, 325], "front": 125, "end": 125, "non": [126, 127, 142, 145, 148, 150, 151, 153, 297], "neg": [126, 127], "tamari": [130, 155, 349], "interv": 130, "poset": [130, 175, 176, 177, 178, 179, 180, 183, 184, 186, 187, 352], "strong": 131, "weak": 131, "kazhdan": 132, "lusztig": 132, "kei": 133, "knutson": 134, "tao": 134, "puzzl": [134, 350], "intern": 136, "pyx": 136, "c": [137, 251, 252, 374], "wrapper": 137, "hadamard": 138, "miscellan": [140, 317, 326], "minimaj": 141, "quasisymmetr": [146, 147], "work": 147, "qsym": 147, "variabl": [148, 150, 151], "ncsym": 149, "necklac": 152, "decreas": 153, "park": [153, 159], "nu": [154, 155], "lattic": [155, 178, 182, 186, 221, 241, 242, 243, 271, 272, 349], "root": [156, 220, 238, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 275], "parallelogram": 158, "kleshchev": 162, "shift": [163, 307], "tupl": [164, 353], "iter": [165, 279, 308, 354, 370], "friez": 168, "semistandard": 170, "perfect": 171, "match": 171, "what": 172, "doe": 172, "thi": 172, "file": [172, 173], "defin": [172, 299, 370], "plane": 174, "d": [177, 253, 254], "complet": [177, 354], "semilattic": [178, 182], "etc": 178, "forest": 179, "hass": 180, "semi": 182, "extens": 183, "mobil": 184, "m\u00f6biu": 185, "q": [188, 189, 263], "analogu": 188, "bernoulli": 189, "quickref": [190, 220], "ranker": 191, "recogniz": 192, "seri": [192, 323], "variou": [192, 193], "regular": 193, "digit": 193, "odd": 193, "entri": [193, 310], "pascal": 193, "triangl": [193, 352], "restrict": 194, "ribbon": [195, 196, 197], "shape": 196, "rig": [198, 199, 200, 210, 213, 214, 215, 216, 217], "configur": [198, 199, 200, 210, 213, 214, 215, 216], "biject": [198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210], "between": [200, 210], "margin": 200, "larg": 200, "a_n": 201, "a_": [202, 203, 204], "2n": [202, 203, 204], "2": [202, 203, 204, 209], "dagger": 202, "b_n": 205, "c_n": 206, "d_n": 207, "d_4": 208, "d_": 209, "n": 209, "kr": 210, "kleber": 211, "cartan": [220, 226, 227, 264, 265, 266, 267, 268, 269], "datum": 220, "reflect": [220, 239, 240, 350], "specif": 220, "ambient": 221, "space": [221, 243, 272, 290], "braid": [223, 224], "move": 223, "calcul": 223, "orbit": 224, "branch": 225, "dynkin": 231, "extend": [232, 233], "weyl": [232, 233, 273, 274], "fundament": 233, "heck": [234, 287], "integr": 235, "nonsymmetr": 236, "macdonald": [236, 293, 297], "pieri": 237, "visual": 238, "first": [238, 354], "plot": 238, "exercis": [238, 354], "chamber": 238, "pictur": 238, "higher": 238, "dimens": 238, "draw": 238, "top": 238, "solut": 238, "hand": 238, "aka": 238, "paper": 238, "custom": 238, "real": 240, "untwist": [246, 250, 252, 254, 256, 258, 260], "infin": 247, "bc": 249, "f": [257, 258], "g": [259, 260, 309], "h": 261, "fold": 266, "mark": 267, "node": 267, "reduc": 268, "relabel": 269, "super": [270, 341, 342], "charact": [273, 282, 287], "ring": 273, "unord": 275, "robinson": 276, "schenst": 276, "knuth": [276, 350], "insert": 276, "schubert": 277, "classic": 283, "littlewood": [286, 290], "basi": 287, "homogen": 288, "jack": 289, "quotient": 290, "ideal": [290, 351], "kostka": 291, "foulk": 291, "llt": 292, "multipl": [295, 302], "schur": [296, 301], "triangular": 299, "power": 300, "symplect": 304, "witt": 305, "shard": 306, "intersect": 306, "prime": 307, "shuffl": [308, 364], "sidon": 309, "similar": 310, "sine": 311, "gordon": 311, "y": [311, 350], "plotter": 311, "six": 312, "vertex": 312, "skew": [313, 314], "some": [315, 354], "sloan": 315, "specht": 316, "speci": [317, 318, 319, 320, 321, 322, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 354], "characterist": 318, "cycl": 320, "empti": 321, "functori": 322, "satisfi": [337, 338], "hereditari": 337, "whose": 338, "predic": 338, "pairwis": 338, "subword": [339, 340], "residu": 347, "tableautupl": 348, "tile": 350, "2d": 350, "easi": 350, "scott": 350, "pentamino": 350, "1d": 350, "allow": 350, "3d": 350, "donald": 350, "anim": 350, "5d": 350, "transit": 351, "closur": 351, "fan": 352, "sage": 354, "initi": 354, "poker": 354, "probabl": 354, "summari": 354, "other": 354, "new": 354, "point": 354, "decompos": 354, "up": 354, "infinit": [356, 360], "alphabet": 358, "creation": [359, 360], "lyndon": 361, "morphism": 362, "suffix": 365, "tri": 365, "datatyp": [367, 368, 370], "unsign": 367, "char": 367, "callabl": 370, "user": 371, "customiz": 371, "option": 371, "yang": 373}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.todo": 2, "sphinx": 57}, "alltitles": {"Combinatorics": [[0, "combinatorics"], [5, "combinatorics"]], "Introductory material": [[0, "introductory-material"], [5, "introductory-material"], [40, "introductory-material"], [220, "introductory-material"], [317, "introductory-material"]], "Thematic indexes": [[0, "thematic-indexes"], [5, "thematic-indexes"]], "Utilities": [[0, "utilities"], [5, "utilities"]], "Related topics": [[0, "related-topics"], [5, "related-topics"]], "Comprehensive Module List": [[0, "comprehensive-module-list"], [1, "comprehensive-module-list"]], "Indices and Tables": [[0, "indices-and-tables"]], "Todo": [[1, "id1"], [2, "id1"], [9, "id1"], [11, "id18"], [17, "id1"], [17, "id2"], [17, "id3"], [17, "id4"], [17, "id12"], [17, "id14"], [25, "id1"], [26, "id1"], [35, "id1"], [39, "id2"], [39, "id3"], [46, "id2"], [59, "id4"], [68, "id2"], [68, "id5"], [68, "id6"], [76, "id8"], [77, "id2"], [81, "id2"], [83, "id9"], [83, "id10"], [86, "id2"], [90, "id4"], [99, "id2"], [101, "id5"], [101, "id8"], [101, "id10"], [103, "id1"], [103, "id2"], [108, "id15"], [108, "id16"], [108, "id17"], [109, "id2"], [110, "id1"], [110, "id2"], [110, "id3"], [110, "id4"], [110, "id5"], [110, "id6"], [110, "id10"], [114, "id17"], [120, "id3"], [123, "id1"], [128, "id1"], [130, "id10"], [134, "id1"], [139, "id1"], [141, "id19"], [144, "id1"], [144, "id2"], [145, "id7"], [145, "id10"], [145, "id28"], [146, "id10"], [146, "id14"], [146, "id31"], [146, "id32"], [154, "id2"], [154, "id3"], [160, "id30"], [172, "id3"], [172, "id23"], [174, "id1"], [181, "id1"], [182, "id12"], [183, "id6"], [187, "id19"], [191, "id1"], [198, "id1"], [212, "id5"], [212, "id6"], [212, "id7"], [212, "id8"], [212, "id14"], [212, "id15"], [212, "id16"], [212, "id17"], [215, "id8"], [215, "id10"], [217, "id1"], [222, "id1"], [227, "id1"], [227, "id2"], [227, "id3"], [227, "id4"], [227, "id5"], [227, "id6"], [227, "id7"], [227, "id10"], [229, "id1"], [229, "id2"], [230, "id1"], [232, "id2"], [234, "id1"], [234, "id4"], [234, "id8"], [234, "id10"], [236, "id1"], [236, "id6"], [236, "id9"], [236, "id13"], [237, "id7"], [238, "id1"], [238, "id2"], [239, "id1"], [239, "id2"], [241, "id2"], [241, "id6"], [241, "id7"], [241, "id8"], [241, "id9"], [242, "id1"], [242, "id2"], [242, "id3"], [242, "id6"], [242, "id7"], [243, "id1"], [264, "id1"], [264, "id2"], [264, "id3"], [264, "id4"], [271, "id1"], [272, "id1"], [273, "id1"], [274, "id1"], [274, "id2"], [274, "id3"], [275, "id1"], [283, "id1"], [294, "id5"], [296, "id6"], [302, "id11"], [303, "id1"], [303, "id7"], [303, "id10"], [303, "id17"], [303, "id25"], [303, "id48"], [311, "id2"], [313, "id4"], [317, "id1"], [317, "id2"], [339, "id1"], [344, "id1"], [346, "id1"], [347, "id3"], [348, "id2"], [354, "id2"], [354, "id3"], [354, "id4"], [354, "id6"]], "Abstract Recursive Trees": [[2, "abstract-recursive-trees"]], "Affine Permutations": [[3, "affine-permutations"]], "Algebraic combinatorics": [[4, "algebraic-combinatorics"]], "Thematic tutorials": [[4, "thematic-tutorials"]], "Enumerated sets of combinatorial objects": [[4, "enumerated-sets-of-combinatorial-objects"]], "Groups and Algebras": [[4, "groups-and-algebras"]], "Combinatorial Representation Theory": [[4, "combinatorial-representation-theory"]], "Operads and their algebras": [[4, "operads-and-their-algebras"]], "Alternating Sign Matrices": [[6, "alternating-sign-matrices"]], "Backtracking": [[7, "backtracking"]], "Baxter permutations": [[8, "baxter-permutations"]], "A bijectionist\u2019s toolkit": [[9, "a-bijectionist-s-toolkit"]], "Quick reference": [[9, "quick-reference"]], "A guided tour": [[9, "a-guided-tour"], [120, "a-guided-tour"], [239, "a-guided-tour"]], "Binary Recurrence Sequences": [[10, "binary-recurrence-sequences"]], "Binary Trees": [[11, "binary-trees"]], "Blob Algebras": [[12, "blob-algebras"]], "Cartesian Products": [[13, "cartesian-products"]], "Enumerated sets of partitions, tableaux, \u2026": [[14, "enumerated-sets-of-partitions-tableaux"]], "Partitions": [[14, "partitions"]], "RSK": [[14, "rsk"]], "Combinatorial Hopf algebras": [[15, "combinatorial-hopf-algebras"]], "Poirier-Reutenauer Hopf algebra of standard tableaux": [[16, "poirier-reutenauer-hopf-algebra-of-standard-tableaux"]], "Word Quasi-symmetric functions": [[17, "word-quasi-symmetric-functions"]], "Cluster algebras and quivers": [[18, "cluster-algebras-and-quivers"]], "ClusterSeed": [[19, "clusterseed"]], "mutation_class": [[20, "mutation-class"]], "Helper functions for mutation types of quivers": [[21, "helper-functions-for-mutation-types-of-quivers"]], "Quiver": [[22, "quiver"]], "Quiver mutation types": [[23, "quiver-mutation-types"]], "Cluster complex (or generalized dual associahedron)": [[24, "cluster-complex-or-generalized-dual-associahedron"]], "Colored Permutations": [[25, "colored-permutations"]], "Combinatorial Functions": [[26, "combinatorial-functions"]], "Functions and classes": [[26, "functions-and-classes"]], "Fast computation of combinatorial functions (Cython + mpz)": [[27, "fast-computation-of-combinatorial-functions-cython-mpz"]], "Combinations": [[28, "combinations"]], "Combinatorial maps": [[29, "combinatorial-maps"]], "Integer compositions": [[30, "integer-compositions"]], "Signed Compositions": [[31, "signed-compositions"]], "Composition Tableaux": [[32, "composition-tableaux"]], "Constellations": [[33, "constellations"]], "Cores": [[34, "cores"]], "Counting": [[35, "counting"]], "Affine Crystals": [[36, "affine-crystals"]], "Affine factorization crystal of type A": [[37, "affine-factorization-crystal-of-type-a"]], "Affinization Crystals": [[38, "affinization-crystals"]], "Alcove paths": [[39, "alcove-paths"]], "Crystals": [[40, "crystals"]], "Catalogs of crystals": [[40, "catalogs-of-crystals"]], "See also": [[40, "see-also"]], "Benkart-Kang-Kashiwara crystals for the general-linear Lie superalgebra": [[41, "benkart-kang-kashiwara-crystals-for-the-general-linear-lie-superalgebra"]], "Catalog Of Crystals": [[42, "catalog-of-crystals"]], "Catalog": [[42, "catalog"]], "Catalog Of Elementary Crystals": [[43, "catalog-of-elementary-crystals"]], "Catalog Of Crystal Models For B(\\infty)": [[44, "catalog-of-crystal-models-for-b-infty"]], "Catalog Of Crystal Models For Kirillov-Reshetikhin Crystals": [[45, "catalog-of-crystal-models-for-kirillov-reshetikhin-crystals"]], "An introduction to crystals": [[46, "an-introduction-to-crystals"]], "Axiomatic definition": [[46, "axiomatic-definition"]], "Direct Sum of Crystals": [[47, "direct-sum-of-crystals"]], "Elementary Crystals": [[48, "elementary-crystals"]], "Fast Rank Two Crystals": [[49, "fast-rank-two-crystals"]], "Fully commutative stable Grothendieck crystal": [[50, "fully-commutative-stable-grothendieck-crystal"]], "Crystals of Generalized Young Walls": [[51, "crystals-of-generalized-young-walls"]], "Highest weight crystals": [[52, "highest-weight-crystals"]], "Induced Crystals": [[53, "induced-crystals"]], "\\mathcal{B}(\\infty) Crystals of Tableaux in Nonexceptional Types and G_2": [[54, "mathcal-b-infty-crystals-of-tableaux-in-nonexceptional-types-and-g-2"]], "Crystals of Kac modules of the general-linear Lie superalgebra": [[55, "crystals-of-kac-modules-of-the-general-linear-lie-superalgebra"]], "Kirillov-Reshetikhin Crystals": [[56, "kirillov-reshetikhin-crystals"]], "Kyoto Path Model for Affine Highest Weight Crystals": [[57, "kyoto-path-model-for-affine-highest-weight-crystals"]], "Crystals of letters": [[58, "crystals-of-letters"]], "Littelmann paths": [[59, "littelmann-paths"]], "Crystals of Modified Nakajima Monomials": [[60, "crystals-of-modified-nakajima-monomials"]], "Crystal of Bernstein-Zelevinsky Multisegments": [[61, "crystal-of-bernstein-zelevinsky-multisegments"]], "Crystal Of Mirkovi\u0107-Vilonen (MV) Polytopes": [[62, "crystal-of-mirkovic-vilonen-mv-polytopes"]], "\\mathcal{B}(\\infty) Crystal Of PBW Monomials": [[63, "mathcal-b-infty-crystal-of-pbw-monomials"]], "PBW Data": [[64, "pbw-data"]], "Polyhedral Realization of B(\\infty)": [[65, "polyhedral-realization-of-b-infty"]], "Spin Crystals": [[66, "spin-crystals"]], "Star-Crystal Structure On B(\\infty)": [[67, "star-crystal-structure-on-b-infty"]], "Tensor Products of Crystals": [[68, "tensor-products-of-crystals"]], "Tensor Products of Crystal Elements": [[69, "tensor-products-of-crystal-elements"]], "Cyclic sieving phenomenon": [[70, "cyclic-sieving-phenomenon"]], "De Bruijn sequences": [[71, "de-bruijn-sequences"]], "Degree sequences": [[72, "degree-sequences"]], "Definitions": [[72, "definitions"]], "Algorithms": [[72, "algorithms"]], "About the implementation": [[72, "about-the-implementation"]], "Derangements": [[73, "derangements"]], "Descent Algebras": [[74, "descent-algebras"]], "Combinatorial designs and incidence structures": [[75, "combinatorial-designs-and-incidence-structures"]], "Balanced Incomplete Block Designs (BIBD)": [[76, "balanced-incomplete-block-designs-bibd"]], "Functions": [[76, "functions"], [80, "functions"], [82, "functions"], [83, "functions"], [84, "functions"], [86, "functions"], [88, "functions"], [90, "functions"], [91, "functions"], [92, "functions"], [93, "functions"], [94, "functions"], [95, "functions"], [118, "functions"]], "Block designs": [[77, "block-designs"]], "Functions and methods": [[77, "functions-and-methods"], [109, "functions-and-methods"]], "Covering Arrays (CA)": [[78, "covering-arrays-ca"]], "Covering designs: coverings of t-element subsets of a v-set by k-sets": [[79, "covering-designs-coverings-of-t-element-subsets-of-a-v-set-by-k-sets"]], "Classes and methods": [[79, "classes-and-methods"], [85, "classes-and-methods"], [172, "classes-and-methods"], [183, "classes-and-methods"]], "Database of small combinatorial designs": [[80, "database-of-small-combinatorial-designs"]], "Catalog of designs": [[81, "catalog-of-designs"]], "Cython functions for combinatorial designs": [[82, "cython-functions-for-combinatorial-designs"]], "Difference families": [[83, "difference-families"]], "Difference Matrices": [[84, "difference-matrices"]], "Evenly distributed sets in finite fields": [[85, "evenly-distributed-sets-in-finite-fields"]], "External Representations of Block Designs": [[86, "external-representations-of-block-designs"]], "Database of generalised quadrangles with spread": [[87, "database-of-generalised-quadrangles-with-spread"]], "Group-Divisible Designs (GDD)": [[88, "group-divisible-designs-gdd"]], "Incidence structures (i.e. hypergraphs, i.e. set systems)": [[89, "incidence-structures-i-e-hypergraphs-i-e-set-systems"]], "Methods": [[89, "methods"], [96, "methods"], [97, "methods"], [108, "methods"]], "Mutually Orthogonal Latin Squares (MOLS)": [[90, "mutually-orthogonal-latin-squares-mols"]], "Orthogonal arrays (OA)": [[91, "orthogonal-arrays-oa"]], "Orthogonal arrays (build recursive constructions)": [[92, "orthogonal-arrays-build-recursive-constructions"]], "Orthogonal arrays (find recursive constructions)": [[93, "orthogonal-arrays-find-recursive-constructions"]], "Resolvable Balanced Incomplete Block Design (RBIBD)": [[94, "resolvable-balanced-incomplete-block-design-rbibd"]], "Steiner Quadruple Systems": [[95, "steiner-quadruple-systems"]], "Index": [[95, "index"], [97, "index"]], "Hypergraph isomorphic copy search": [[96, "hypergraph-isomorphic-copy-search"]], "Implementation": [[96, "implementation"]], "Algorithm": [[96, "algorithm"]], "Limitations": [[96, "limitations"]], "Two-graphs": [[97, "two-graphs"]], "Combinatorial diagrams": [[98, "combinatorial-diagrams"]], "Diagram and Partition Algebras": [[99, "diagram-and-partition-algebras"]], "Exact Cover Problem via Dancing Links": [[100, "exact-cover-problem-via-dancing-links"]], "Dyck Words": [[101, "dyck-words"]], "Substitutions over unit cube faces (Rauzy fractals)": [[102, "substitutions-over-unit-cube-faces-rauzy-fractals"]], "Enumerated sets and combinatorial objects": [[103, "enumerated-sets-and-combinatorial-objects"]], "Categories": [[103, "categories"]], "Basic enumerated sets": [[103, "basic-enumerated-sets"]], "Integer lists": [[103, "integer-lists"]], "Words": [[103, "words"]], "Permutations, \u2026": [[103, "permutations"]], "Partitions, tableaux, \u2026": [[103, "partitions-tableaux"]], "Polyominoes": [[103, "polyominoes"]], "Integer matrices, \u2026": [[103, "integer-matrices"]], "Subsets and set partitions": [[103, "subsets-and-set-partitions"]], "Trees": [[103, "trees"]], "Enumerated sets related to graphs": [[103, "enumerated-sets-related-to-graphs"]], "Backtracking solvers and generic enumerated sets": [[103, "backtracking-solvers-and-generic-enumerated-sets"]], "Low level enumerated sets": [[103, "low-level-enumerated-sets"]], "Misc enumerated sets": [[103, "misc-enumerated-sets"]], "Tools for enumeration modulo the action of a permutation group": [[104, "tools-for-enumeration-modulo-the-action-of-a-permutation-group"]], "Compute Bell and Uppuluri-Carpenter numbers": [[105, "compute-bell-and-uppuluri-carpenter-numbers"]], "Families": [[106, "families"]], "Brent Yorgey\u2019s fast algorithm for integer vector (multiset) partitions.": [[107, "brent-yorgey-s-fast-algorithm-for-integer-vector-multiset-partitions"]], "Finite state machines, automata, transducers": [[108, "finite-state-machines-automata-transducers"]], "Contents": [[108, "contents"]], "FiniteStateMachine and derived classes Transducer and Automaton": [[108, "finitestatemachine-and-derived-classes-transducer-and-automaton"]], "Accessing parts of a finite state machine": [[108, "accessing-parts-of-a-finite-state-machine"]], "(Modified) Copies": [[108, "modified-copies"]], "Manipulation": [[108, "manipulation"]], "Properties": [[108, "properties"]], "Operations": [[108, "operations"]], "Simplification": [[108, "simplification"]], "Conversion": [[108, "conversion"]], "LaTeX output": [[108, "latex-output"], [108, "finite-state-machine-latex-output"]], "FSMState": [[108, "fsmstate"]], "FSMTransition": [[108, "fsmtransition"]], "FSMProcessIterator": [[108, "fsmprocessiterator"]], "Helper Functions": [[108, "helper-functions"]], "Examples": [[108, "examples"], [193, "examples"]], "A simple finite state machine": [[108, "a-simple-finite-state-machine"]], "A simple Automaton (recognizing NAFs)": [[108, "a-simple-automaton-recognizing-nafs"]], "Recognizing NAFs via Automata Operations": [[108, "recognizing-nafs-via-automata-operations"]], "A simple transducer (binary inverter)": [[108, "a-simple-transducer-binary-inverter"]], "Transducers and (in)finite Words": [[108, "transducers-and-in-finite-words"]], "A transducer which performs division by 3 in binary": [[108, "a-transducer-which-performs-division-by-3-in-binary"]], "Gray Code": [[108, "gray-code"]], "Using the hook-functions": [[108, "using-the-hook-functions"]], "Detecting sequences with same number of 0 and 1": [[108, "detecting-sequences-with-same-number-of-0-and-1"]], "Common Automata and Transducers (Finite State Machines Generators)": [[109, "common-automata-and-transducers-finite-state-machines-generators"]], "Free Quasi-symmetric functions": [[110, "free-quasi-symmetric-functions"]], "Free Dendriform Algebras": [[111, "free-dendriform-algebras"]], "Free modules": [[112, "free-modules"]], "Free Pre-Lie Algebras": [[113, "free-pre-lie-algebras"]], "Fully commutative elements of Coxeter groups": [[114, "fully-commutative-elements-of-coxeter-groups"]], "Acknowledgements": [[114, "acknowledgements"], [134, "acknowledgements"]], "Fully packed loops": [[115, "fully-packed-loops"]], "Gelfand-Tsetlin Patterns": [[116, "gelfand-tsetlin-patterns"]], "Paths in Directed Acyclic Graphs": [[117, "paths-in-directed-acyclic-graphs"]], "Gray codes": [[118, "gray-codes"]], "Grossman-Larson Hopf Algebras": [[119, "grossman-larson-hopf-algebras"]], "Growth diagrams and dual graded graphs": [[120, "growth-diagrams-and-dual-graded-graphs"]], "Invocation": [[120, "invocation"]], "Rules currently available": [[120, "rules-currently-available"]], "Background": [[120, "background"]], "Implementing your own growth diagrams": [[120, "implementing-your-own-growth-diagrams"]], "Hall Polynomials": [[121, "hall-polynomials"]], "The Hillman-Grassl correspondence": [[122, "the-hillman-grassl-correspondence"]], "Enumerated set of lists of integers with constraints: base classes": [[123, "enumerated-set-of-lists-of-integers-with-constraints-base-classes"]], "Enumerated set of lists of integers with constraints, in inverse lexicographic order": [[124, "enumerated-set-of-lists-of-integers-with-constraints-in-inverse-lexicographic-order"]], "Enumerated set of lists of integers with constraints: front-end": [[125, "enumerated-set-of-lists-of-integers-with-constraints-front-end"]], "Counting, generating, and manipulating non-negative integer matrices": [[126, "counting-generating-and-manipulating-non-negative-integer-matrices"]], "(Non-negative) Integer vectors": [[127, "non-negative-integer-vectors"]], "Weighted Integer Vectors": [[128, "weighted-integer-vectors"]], "Integer vectors modulo the action of a permutation group": [[129, "integer-vectors-modulo-the-action-of-a-permutation-group"]], "Tamari Interval-posets": [[130, "tamari-interval-posets"]], "Strong and weak tableaux": [[131, "strong-and-weak-tableaux"]], "Kazhdan-Lusztig Polynomials": [[132, "kazhdan-lusztig-polynomials"]], "Key polynomials": [[133, "key-polynomials"]], "Knutson-Tao Puzzles": [[134, "knutson-tao-puzzles"]], "Combinatorics on matrices": [[135, "combinatorics-on-matrices"]], "Dancing Links internal pyx code": [[136, "dancing-links-internal-pyx-code"]], "Dancing links C++ wrapper": [[137, "dancing-links-c-wrapper"]], "Hadamard matrices": [[138, "hadamard-matrices"]], "Latin Squares": [[139, "latin-squares"]], "Miscellaneous": [[140, "miscellaneous"], [317, "miscellaneous"]], "Ordered Multiset Partitions into Sets and the Minimaj Crystal": [[141, "ordered-multiset-partitions-into-sets-and-the-minimaj-crystal"]], "Non-commutative symmetric functions and quasi-symmetric functions": [[142, "non-commutative-symmetric-functions-and-quasi-symmetric-functions"]], "Common combinatorial tools": [[143, "common-combinatorial-tools"]], "Generic code for bases": [[144, "generic-code-for-bases"]], "Non-Commutative Symmetric Functions": [[145, "non-commutative-symmetric-functions"]], "Quasisymmetric functions": [[146, "quasisymmetric-functions"]], "Introduction to Quasisymmetric Functions": [[147, "introduction-to-quasisymmetric-functions"]], "Working with symmetric functions": [[147, "working-with-symmetric-functions"]], "QSym is a Hopf algebra": [[147, "qsym-is-a-hopf-algebra"]], "Symmetric functions in non-commuting variables": [[148, "symmetric-functions-in-non-commuting-variables"]], "Bases for NCSym": [[149, "bases-for-ncsym"]], "Dual Symmetric Functions in Non-Commuting Variables": [[150, "dual-symmetric-functions-in-non-commuting-variables"]], "Symmetric Functions in Non-Commuting Variables": [[151, "symmetric-functions-in-non-commuting-variables"]], "Necklaces": [[152, "necklaces"]], "Non-Decreasing Parking Functions": [[153, "non-decreasing-parking-functions"]], "\\nu-Dyck Words": [[154, "nu-dyck-words"]], "\\nu-Tamari lattice": [[155, "nu-tamari-lattice"]], "Ordered Rooted Trees": [[156, "ordered-rooted-trees"]], "Output functions": [[157, "output-functions"]], "Parallelogram Polyominoes": [[158, "parallelogram-polyominoes"]], "Parking Functions": [[159, "parking-functions"]], "Integer partitions": [[160, "integer-partitions"]], "Partition/Diagram Algebras": [[161, "partition-diagram-algebras"]], "Kleshchev partitions": [[162, "kleshchev-partitions"]], "Partition Shifting Algebras": [[163, "partition-shifting-algebras"]], "Partition tuples": [[164, "partition-tuples"]], "Iterators over the partitions of an integer": [[165, "iterators-over-the-partitions-of-an-integer"]], "Catalog of Path Tableaux": [[166, "catalog-of-path-tableaux"]], "Dyck Paths": [[167, "dyck-paths"]], "Frieze Patterns": [[168, "frieze-patterns"]], "Path Tableaux": [[169, "path-tableaux"]], "Semistandard Tableaux": [[170, "semistandard-tableaux"]], "Perfect matchings": [[171, "perfect-matchings"]], "Permutations": [[172, "permutations"]], "What does this file define ?": [[172, "what-does-this-file-define"]], "Permutations (Cython file)": [[173, "permutations-cython-file"]], "Plane Partitions": [[174, "plane-partitions"]], "Posets": [[175, "posets"]], "Cartesian products of Posets": [[176, "cartesian-products-of-posets"]], "D-Complete Posets": [[177, "d-complete-posets"]], "Elements of posets, lattices, semilattices, etc.": [[178, "elements-of-posets-lattices-semilattices-etc"]], "Forest Posets": [[179, "forest-posets"]], "Hasse diagrams of posets": [[180, "hasse-diagrams-of-posets"]], "Incidence Algebras": [[181, "incidence-algebras"]], "Finite lattices and semilattices": [[182, "finite-lattices-and-semilattices"]], "List of (semi)lattice methods": [[182, "list-of-semi-lattice-methods"]], "Linear Extensions of Posets": [[183, "linear-extensions-of-posets"]], "Mobile posets": [[184, "mobile-posets"]], "M\u00f6bius Algebras": [[185, "mobius-algebras"]], "Catalog of posets and lattices": [[186, "catalog-of-posets-and-lattices"]], "Constructions": [[186, "constructions"], [354, "constructions"]], "Finite posets": [[187, "finite-posets"]], "List of Poset methods": [[187, "list-of-poset-methods"]], "Classes and functions": [[187, "classes-and-functions"]], "q-Analogues": [[188, "q-analogues"]], "q-Bernoulli Numbers and Polynomials": [[189, "q-bernoulli-numbers-and-polynomials"]], "Combinatorics quickref": [[190, "combinatorics-quickref"]], "Rankers": [[191, "rankers"]], "Recognizable Series": [[192, "recognizable-series"]], "Various": [[192, "various"], [193, "various"]], "Classes and Methods": [[192, "classes-and-methods"], [193, "classes-and-methods"]], "k-regular sequences": [[193, "k-regular-sequences"]], "Binary sum of digits": [[193, "binary-sum-of-digits"]], "Number of odd entries in Pascal\u2019s triangle": [[193, "number-of-odd-entries-in-pascal-s-triangle"]], "Restricted growth arrays": [[194, "restricted-growth-arrays"]], "Ribbons": [[195, "ribbons"]], "Ribbon Shaped Tableaux": [[196, "ribbon-shaped-tableaux"]], "Ribbon Tableaux": [[197, "ribbon-tableaux"]], "Rigged configurations": [[198, "rigged-configurations"]], "Bijections": [[198, "bijections"]], "Abstract classes for the rigged configuration bijections": [[199, "abstract-classes-for-the-rigged-configuration-bijections"]], "Bijection between rigged configurations for B(\\infty) and marginally large tableaux": [[200, "bijection-between-rigged-configurations-for-b-infty-and-marginally-large-tableaux"]], "Bijection classes for type A_n^{(1)}": [[201, "bijection-classes-for-type-a-n-1"]], "Bijection classes for type A_{2n}^{(2)\\dagger}": [[202, "bijection-classes-for-type-a-2n-2-dagger"]], "Bijection classes for type A_{2n}^{(2)}": [[203, "bijection-classes-for-type-a-2n-2"]], "Bijection classes for type A_{2n-1}^{(2)}.": [[204, "bijection-classes-for-type-a-2n-1-2"]], "Bijection classes for type B_n^{(1)}": [[205, "bijection-classes-for-type-b-n-1"]], "Bijection classes for type C_n^{(1)}": [[206, "bijection-classes-for-type-c-n-1"]], "Bijection classes for type D_n^{(1)}": [[207, "bijection-classes-for-type-d-n-1"]], "Bijection classes for type D_4^{(3)}": [[208, "bijection-classes-for-type-d-4-3"]], "Bijection classes for type D_{n+1}^{(2)}": [[209, "bijection-classes-for-type-d-n-1-2"]], "Bijection between rigged configurations and KR tableaux": [[210, "bijection-between-rigged-configurations-and-kr-tableaux"]], "Kleber Trees": [[211, "kleber-trees"]], "Kirillov-Reshetikhin Tableaux": [[212, "kirillov-reshetikhin-tableaux"]], "Crystal of Rigged Configurations": [[213, "crystal-of-rigged-configurations"]], "Rigged Configurations of \\mathcal{B}(\\infty)": [[214, "rigged-configurations-of-mathcal-b-infty"]], "Rigged Configuration Elements": [[215, "rigged-configuration-elements"]], "Rigged Configurations": [[216, "rigged-configurations"]], "Rigged Partitions": [[217, "rigged-partitions"]], "Tensor Product of Kirillov-Reshetikhin Tableaux": [[218, "tensor-product-of-kirillov-reshetikhin-tableaux"]], "Tensor Product of Kirillov-Reshetikhin Tableaux Elements": [[219, "tensor-product-of-kirillov-reshetikhin-tableaux-elements"]], "Root Systems": [[220, "root-systems"]], "Quickref": [[220, "quickref"]], "Related material": [[220, "related-material"]], "Cartan datum": [[220, "cartan-datum"]], "Root systems": [[220, "id1"], [244, "root-systems"]], "Coxeter groups": [[220, "coxeter-groups"]], "Finite reflection groups": [[220, "finite-reflection-groups"]], "Representation theory": [[220, "representation-theory"]], "Root system data and code for specific families of Cartan types": [[220, "root-system-data-and-code-for-specific-families-of-cartan-types"]], "Root system data and code for specific Cartan types": [[220, "root-system-data-and-code-for-specific-cartan-types"]], "Ambient lattices and ambient spaces": [[221, "ambient-lattices-and-ambient-spaces"]], "Associahedron": [[222, "associahedron"]], "Braid Move Calculator": [[223, "braid-move-calculator"]], "Braid Orbit": [[224, "braid-orbit"]], "Branching Rules": [[225, "branching-rules"]], "Cartan matrices": [[226, "cartan-matrices"]], "Cartan types": [[227, "cartan-types"]], "Coxeter Groups": [[228, "coxeter-groups"]], "Coxeter Matrices": [[229, "coxeter-matrices"]], "Coxeter Types": [[230, "coxeter-types"]], "Dynkin diagrams": [[231, "dynkin-diagrams"]], "Extended Affine Weyl Groups": [[232, "extended-affine-weyl-groups"]], "Fundamental Group of an Extended Affine Weyl Group": [[233, "fundamental-group-of-an-extended-affine-weyl-group"]], "Hecke algebra representations": [[234, "hecke-algebra-representations"]], "Integrable Representations of Affine Lie Algebras": [[235, "integrable-representations-of-affine-lie-algebras"]], "Nonsymmetric Macdonald polynomials": [[236, "nonsymmetric-macdonald-polynomials"]], "Pieri Factors": [[237, "pieri-factors"]], "Tutorial: visualizing root systems": [[238, "tutorial-visualizing-root-systems"]], "First plots": [[238, "first-plots"]], "Exercise": [[238, null], [238, null], [238, null], [238, null], [238, null], [354, null], [354, "exercise-alternating-sign-matrices"], [354, null], [354, null], [354, null], [354, null]], "Alcoves and chambers": [[238, "alcoves-and-chambers"]], "Alcove pictures for affine types": [[238, "alcove-pictures-for-affine-types"]], "Exercises": [[238, null], [238, null], [238, null], [354, null]], "Higher dimension affine pictures": [[238, "higher-dimension-affine-pictures"]], "Drawing on top of a root system plot": [[238, "drawing-on-top-of-a-root-system-plot"]], "Solution": [[238, null]], "Hand drawing on top of a root system plot (aka Coxeter graph paper)": [[238, "hand-drawing-on-top-of-a-root-system-plot-aka-coxeter-graph-paper"]], "Drawing custom objects on top of a root system plot": [[238, "drawing-custom-objects-on-top-of-a-root-system-plot"]], "Finite complex reflection groups": [[239, "finite-complex-reflection-groups"]], "Finite real reflection groups": [[240, "finite-real-reflection-groups"]], "Group algebras of root lattice realizations": [[241, "group-algebras-of-root-lattice-realizations"]], "Root lattice realizations": [[242, "root-lattice-realizations"]], "Root lattices and root spaces": [[243, "root-lattices-and-root-spaces"]], "Root system data for type A": [[245, "root-system-data-for-type-a"]], "Root system data for (untwisted) type A affine": [[246, "root-system-data-for-untwisted-type-a-affine"]], "Root system data for type A infinity": [[247, "root-system-data-for-type-a-infinity"]], "Root system data for type B": [[248, "root-system-data-for-type-b"]], "Root system data for type BC affine": [[249, "root-system-data-for-type-bc-affine"]], "Root system data for (untwisted) type B affine": [[250, "root-system-data-for-untwisted-type-b-affine"]], "Root system data for type C": [[251, "root-system-data-for-type-c"]], "Root system data for (untwisted) type C affine": [[252, "root-system-data-for-untwisted-type-c-affine"]], "Root system data for type D": [[253, "root-system-data-for-type-d"]], "Root system data for (untwisted) type D affine": [[254, "root-system-data-for-untwisted-type-d-affine"]], "Root system data for type E": [[255, "root-system-data-for-type-e"]], "Root system data for (untwisted) type E affine": [[256, "root-system-data-for-untwisted-type-e-affine"]], "Root system data for type F": [[257, "root-system-data-for-type-f"]], "Root system data for (untwisted) type F affine": [[258, "root-system-data-for-untwisted-type-f-affine"]], "Root system data for type G": [[259, "root-system-data-for-type-g"]], "Root system data for (untwisted) type G affine": [[260, "root-system-data-for-untwisted-type-g-affine"]], "Root system data for type H": [[261, "root-system-data-for-type-h"]], "Root system data for type I": [[262, "root-system-data-for-type-i"]], "Root system data for type Q": [[263, "root-system-data-for-type-q"]], "Root system data for affine Cartan types": [[264, "root-system-data-for-affine-cartan-types"]], "Root system data for dual Cartan types": [[265, "root-system-data-for-dual-cartan-types"]], "Root system data for folded Cartan types": [[266, "root-system-data-for-folded-cartan-types"]], "Root system data for Cartan types with marked nodes": [[267, "root-system-data-for-cartan-types-with-marked-nodes"]], "Root system data for reducible Cartan types": [[268, "root-system-data-for-reducible-cartan-types"]], "Root system data for relabelled Cartan types": [[269, "root-system-data-for-relabelled-cartan-types"]], "Root system data for super type A": [[270, "root-system-data-for-super-type-a"]], "Weight lattice realizations": [[271, "weight-lattice-realizations"]], "Weight lattices and weight spaces": [[272, "weight-lattices-and-weight-spaces"]], "Weyl Character Rings": [[273, "weyl-character-rings"]], "Weyl Groups": [[274, "weyl-groups"]], "Rooted (Unordered) Trees": [[275, "rooted-unordered-trees"]], "Robinson-Schensted-Knuth correspondence": [[276, "robinson-schensted-knuth-correspondence"]], "Introduction": [[276, "introduction"]], "Insertions currently available": [[276, "insertions-currently-available"]], "Implementing your own insertion rule": [[276, "implementing-your-own-insertion-rule"]], "Schubert Polynomials": [[277, "schubert-polynomials"]], "Set Partitions": [[278, "set-partitions"]], "Fast set partition iterators": [[279, "fast-set-partition-iterators"]], "Ordered Set Partitions": [[280, "ordered-set-partitions"]], "Symmetric Functions": [[281, "symmetric-functions"], [303, "symmetric-functions"]], "Characters of the symmetric group as bases of the symmetric functions": [[282, "characters-of-the-symmetric-group-as-bases-of-the-symmetric-functions"]], "Classical symmetric functions": [[283, "classical-symmetric-functions"]], "Generic dual bases symmetric functions": [[284, "generic-dual-bases-symmetric-functions"]], "Elementary symmetric functions": [[285, "elementary-symmetric-functions"]], "Hall-Littlewood Polynomials": [[286, "hall-littlewood-polynomials"]], "Hecke Character Basis": [[287, "hecke-character-basis"]], "Homogeneous symmetric functions": [[288, "homogeneous-symmetric-functions"]], "Jack Symmetric Functions": [[289, "jack-symmetric-functions"]], "Quotient of symmetric function space by ideal generated by Hall-Littlewood symmetric functions": [[290, "quotient-of-symmetric-function-space-by-ideal-generated-by-hall-littlewood-symmetric-functions"]], "Kostka-Foulkes Polynomials": [[291, "kostka-foulkes-polynomials"]], "LLT symmetric functions": [[292, "llt-symmetric-functions"]], "Macdonald Polynomials": [[293, "macdonald-polynomials"]], "Monomial symmetric functions": [[294, "monomial-symmetric-functions"]], "Multiplicative symmetric functions": [[295, "multiplicative-symmetric-functions"]], "k-Schur Functions": [[296, "k-schur-functions"]], "Non-symmetric Macdonald Polynomials": [[297, "non-symmetric-macdonald-polynomials"]], "Orthogonal Symmetric Functions": [[298, "orthogonal-symmetric-functions"]], "Symmetric functions defined by orthogonality and triangularity": [[299, "symmetric-functions-defined-by-orthogonality-and-triangularity"]], "Power sum symmetric functions": [[300, "power-sum-symmetric-functions"]], "Schur symmetric functions": [[301, "schur-symmetric-functions"]], "Symmetric functions, with their multiple realizations": [[302, "symmetric-functions-with-their-multiple-realizations"]], "Symplectic Symmetric Functions": [[304, "symplectic-symmetric-functions"]], "Witt symmetric functions": [[305, "witt-symmetric-functions"]], "Shard intersection order": [[306, "shard-intersection-order"]], "Shifted primed tableaux": [[307, "shifted-primed-tableaux"]], "Shuffle product of iterables": [[308, "shuffle-product-of-iterables"]], "Sidon sets and their generalizations, Sidon g-sets": [[309, "sidon-sets-and-their-generalizations-sidon-g-sets"]], "Similarity class types of matrices with entries in a finite field": [[310, "similarity-class-types-of-matrices-with-entries-in-a-finite-field"]], "sine-Gordon Y-system plotter": [[311, "sine-gordon-y-system-plotter"]], "Six Vertex Model": [[312, "six-vertex-model"]], "Skew Partitions": [[313, "skew-partitions"]], "Skew Tableaux": [[314, "skew-tableaux"]], "Functions that compute some of the sequences in Sloane\u2019s tables": [[315, "functions-that-compute-some-of-the-sequences-in-sloane-s-tables"]], "Specht Modules": [[316, "specht-modules"]], "Combinatorial species": [[317, "combinatorial-species"]], "Basic Species": [[317, "basic-species"]], "Operations on Species": [[317, "operations-on-species"]], "Characteristic Species": [[318, "characteristic-species"]], "Composition species": [[319, "composition-species"]], "Cycle Species": [[320, "cycle-species"]], "Empty Species": [[321, "empty-species"]], "Functorial composition species": [[322, "functorial-composition-species"]], "Generating Series": [[323, "generating-series"]], "Examples of Combinatorial Species": [[324, "examples-of-combinatorial-species"]], "Linear-order Species": [[325, "linear-order-species"]], "Miscellaneous Functions": [[326, "miscellaneous-functions"]], "Partition Species": [[327, "partition-species"]], "Permutation species": [[328, "permutation-species"]], "Product species": [[329, "product-species"]], "Recursive Species": [[330, "recursive-species"]], "Set Species": [[331, "set-species"]], "Combinatorial Species": [[332, "combinatorial-species"]], "Species structures": [[333, "species-structures"]], "Subset Species": [[334, "subset-species"]], "Sum species": [[335, "sum-species"]], "Subsets": [[336, "subsets"]], "Subsets satisfying a hereditary property": [[337, "subsets-satisfying-a-hereditary-property"]], "Subsets whose elements satisfy a predicate pairwise": [[338, "subsets-whose-elements-satisfy-a-predicate-pairwise"]], "Subwords": [[339, "subwords"]], "Subword complex": [[340, "subword-complex"]], "Super Tableaux": [[341, "super-tableaux"]], "Super Partitions": [[342, "super-partitions"]], "Symmetric Group Algebra": [[343, "symmetric-group-algebra"]], "Representations of the Symmetric Group": [[344, "representations-of-the-symmetric-group"]], "T-sequences": [[345, "t-sequences"]], "Tableaux": [[346, "tableaux"]], "Residue sequences of tableaux": [[347, "residue-sequences-of-tableaux"]], "TableauTuples": [[348, "tableautuples"]], "Generalized Tamari lattices": [[349, "generalized-tamari-lattices"]], "Tiling Solver": [[350, "tiling-solver"]], "2d Easy Example": [[350, "d-easy-example"]], "Scott\u2019s pentamino problem": [[350, "scott-s-pentamino-problem"]], "1d Easy Example": [[350, "id3"]], "2d Puzzle allowing reflections": [[350, "d-puzzle-allowing-reflections"]], "3d Puzzle": [[350, "d-puzzle"]], "Donald Knuth example : the Y pentamino": [[350, "donald-knuth-example-the-y-pentamino"]], "Animation of Donald Knuth\u2019s dancing links": [[350, "animation-of-donald-knuth-s-dancing-links"]], "5d Easy Example": [[350, "id5"]], "Transitive ideal closure tool": [[351, "transitive-ideal-closure-tool"]], "Combinatorial triangles for posets and fans": [[352, "combinatorial-triangles-for-posets-and-fans"]], "Tuples": [[353, "tuples"]], "Introduction to combinatorics in Sage": [[354, "introduction-to-combinatorics-in-sage"]], "Initial examples": [[354, "initial-examples"]], "Poker and probability": [[354, "poker-and-probability"]], "Enumeration of trees using generating functions": [[354, "enumeration-of-trees-using-generating-functions"]], "Exercise: enumeration of binary trees": [[354, "exo-enumeration-arbres"]], "Summary": [[354, "summary"], [354, "id7"]], "Common enumerated sets": [[354, "common-enumerated-sets"]], "First example: the subsets of a set": [[354, "first-example-the-subsets-of-a-set"]], "Partitions of integers": [[354, "partitions-of-integers"]], "Some other finite enumerated sets": [[354, "some-other-finite-enumerated-sets"]], "Set comprehension and iterators": [[354, "set-comprehension-and-iterators"]], "Operations on iterators": [[354, "operations-on-iterators"]], "Implementation of new iterators": [[354, "implementation-of-new-iterators"]], "Exercise: complete binary tree iterator": [[354, "exo-iterators-catalan"]], "Generic algorithms": [[354, "generic-algorithms"]], "Lexicographic generation of lists of integers": [[354, "lexicographic-generation-of-lists-of-integers"]], "Integer points in polytopes": [[354, "integer-points-in-polytopes"]], "Species, decomposable combinatorial classes": [[354, "species-decomposable-combinatorial-classes"]], "Graphs up to isomorphism": [[354, "graphs-up-to-isomorphism"]], "Vector Partitions": [[355, "vector-partitions"]], "Abstract word (finite or infinite)": [[356, "abstract-word-finite-or-infinite"]], "Combinatorics on words": [[357, "combinatorics-on-words"]], "Alphabet": [[358, "alphabet"]], "Finite word": [[359, "finite-word"]], "Creation of a finite word": [[359, "creation-of-a-finite-word"]], "Functions and algorithms": [[359, "functions-and-algorithms"]], "Factors and Rauzy Graphs": [[359, "factors-and-rauzy-graphs"]], "Infinite word": [[360, "infinite-word"]], "Creation of an infinite word": [[360, "creation-of-an-infinite-word"]], "Lyndon words": [[361, "lyndon-words"]], "Word morphisms/substitutions": [[362, "word-morphisms-substitutions"]], "Word paths": [[363, "word-paths"]], "Shuffle product of words": [[364, "shuffle-product-of-words"]], "Suffix Tries and Suffix Trees": [[365, "suffix-tries-and-suffix-trees"]], "Word classes": [[366, "word-classes"]], "Fast word datatype using an array of unsigned char": [[367, "fast-word-datatype-using-an-array-of-unsigned-char"]], "Datatypes for finite words": [[368, "datatypes-for-finite-words"]], "Common words": [[369, "common-words"]], "Datatypes for words defined by iterators and callables": [[370, "datatypes-for-words-defined-by-iterators-and-callables"]], "User-customizable options for words": [[371, "user-customizable-options-for-words"]], "Set of words": [[372, "set-of-words"]], "Yang-Baxter Graphs": [[373, "yang-baxter-graphs"]], "C-Finite Sequences": [[374, "c-finite-sequences"]]}, "indexentries": {"abstractclonabletree (class in sage.combinat.abstract_tree)": [[2, "sage.combinat.abstract_tree.AbstractClonableTree"]], "abstractlabelledclonabletree (class in sage.combinat.abstract_tree)": [[2, "sage.combinat.abstract_tree.AbstractLabelledClonableTree"]], "abstractlabelledtree (class in sage.combinat.abstract_tree)": [[2, "sage.combinat.abstract_tree.AbstractLabelledTree"]], "abstracttree (class in sage.combinat.abstract_tree)": [[2, "sage.combinat.abstract_tree.AbstractTree"]], "as_digraph() (sage.combinat.abstract_tree.abstractlabelledtree method)": [[2, "sage.combinat.abstract_tree.AbstractLabelledTree.as_digraph"]], "breadth_first_order_traversal() (sage.combinat.abstract_tree.abstracttree method)": [[2, "sage.combinat.abstract_tree.AbstractTree.breadth_first_order_traversal"]], "canonical_labelling() (sage.combinat.abstract_tree.abstracttree method)": [[2, "sage.combinat.abstract_tree.AbstractTree.canonical_labelling"]], "check() (sage.combinat.abstract_tree.abstractclonabletree method)": [[2, "sage.combinat.abstract_tree.AbstractClonableTree.check"]], "depth() (sage.combinat.abstract_tree.abstracttree method)": [[2, "sage.combinat.abstract_tree.AbstractTree.depth"]], "from_hexacode() (in module sage.combinat.abstract_tree)": [[2, "sage.combinat.abstract_tree.from_hexacode"]], "iterative_post_order_traversal() (sage.combinat.abstract_tree.abstracttree method)": [[2, "sage.combinat.abstract_tree.AbstractTree.iterative_post_order_traversal"]], "iterative_pre_order_traversal() (sage.combinat.abstract_tree.abstracttree method)": [[2, "sage.combinat.abstract_tree.AbstractTree.iterative_pre_order_traversal"]], "label() (sage.combinat.abstract_tree.abstractlabelledtree method)": [[2, "sage.combinat.abstract_tree.AbstractLabelledTree.label"]], "labels() (sage.combinat.abstract_tree.abstractlabelledtree method)": [[2, "sage.combinat.abstract_tree.AbstractLabelledTree.labels"]], "leaf_labels() (sage.combinat.abstract_tree.abstractlabelledtree method)": [[2, "sage.combinat.abstract_tree.AbstractLabelledTree.leaf_labels"]], "map_labels() (sage.combinat.abstract_tree.abstractlabelledclonabletree method)": [[2, "sage.combinat.abstract_tree.AbstractLabelledClonableTree.map_labels"]], "module": [[2, "module-sage.combinat.abstract_tree"], [3, "module-sage.combinat.affine_permutation"], [4, "module-sage.combinat.algebraic_combinatorics"], [5, "module-sage.combinat.all"], [6, "module-sage.combinat.alternating_sign_matrix"], [7, "module-sage.combinat.backtrack"], [8, "module-sage.combinat.baxter_permutations"], [9, "module-sage.combinat.bijectionist"], [10, "module-sage.combinat.binary_recurrence_sequences"], [11, "module-sage.combinat.binary_tree"], [12, "module-sage.combinat.blob_algebra"], [13, "module-sage.combinat.cartesian_product"], [14, "module-sage.combinat.catalog_partitions"], [15, "module-sage.combinat.chas.all"], [16, "module-sage.combinat.chas.fsym"], [17, "module-sage.combinat.chas.wqsym"], [18, "module-sage.combinat.cluster_algebra_quiver.all"], [19, "module-sage.combinat.cluster_algebra_quiver.cluster_seed"], [20, "module-sage.combinat.cluster_algebra_quiver.mutation_class"], [21, "module-sage.combinat.cluster_algebra_quiver.mutation_type"], [22, "module-sage.combinat.cluster_algebra_quiver.quiver"], [23, "module-sage.combinat.cluster_algebra_quiver.quiver_mutation_type"], [24, "module-sage.combinat.cluster_complex"], [25, "module-sage.combinat.colored_permutations"], [26, "module-sage.combinat.combinat"], [27, "module-sage.combinat.combinat_cython"], [28, "module-sage.combinat.combination"], [29, "module-sage.combinat.combinatorial_map"], [30, "module-sage.combinat.composition"], [31, "module-sage.combinat.composition_signed"], [32, "module-sage.combinat.composition_tableau"], [33, "module-sage.combinat.constellation"], [34, "module-sage.combinat.core"], [35, "module-sage.combinat.counting"], [36, "module-sage.combinat.crystals.affine"], [37, "module-sage.combinat.crystals.affine_factorization"], [38, "module-sage.combinat.crystals.affinization"], [39, "module-sage.combinat.crystals.alcove_path"], [40, "module-sage.combinat.crystals.all"], [41, "module-sage.combinat.crystals.bkk_crystals"], [42, "module-sage.combinat.crystals.catalog"], [43, "module-sage.combinat.crystals.catalog_elementary_crystals"], [44, "module-sage.combinat.crystals.catalog_infinity_crystals"], [45, "module-sage.combinat.crystals.catalog_kirillov_reshetikhin"], [46, "module-sage.combinat.crystals.crystals"], [47, "module-sage.combinat.crystals.direct_sum"], [48, "module-sage.combinat.crystals.elementary_crystals"], [49, "module-sage.combinat.crystals.fast_crystals"], [50, "module-sage.combinat.crystals.fully_commutative_stable_grothendieck"], [51, "module-sage.combinat.crystals.generalized_young_walls"], [52, "module-sage.combinat.crystals.highest_weight_crystals"], [53, "module-sage.combinat.crystals.induced_structure"], [54, "module-sage.combinat.crystals.infinity_crystals"], [55, "module-sage.combinat.crystals.kac_modules"], [56, "module-sage.combinat.crystals.kirillov_reshetikhin"], [57, "module-sage.combinat.crystals.kyoto_path_model"], [58, "module-sage.combinat.crystals.letters"], [59, "module-sage.combinat.crystals.littelmann_path"], [60, "module-sage.combinat.crystals.monomial_crystals"], [61, "module-sage.combinat.crystals.multisegments"], [62, "module-sage.combinat.crystals.mv_polytopes"], [63, "module-sage.combinat.crystals.pbw_crystal"], [64, "module-sage.combinat.crystals.pbw_datum"], [65, "module-sage.combinat.crystals.polyhedral_realization"], [66, "module-sage.combinat.crystals.spins"], [67, "module-sage.combinat.crystals.star_crystal"], [68, "module-sage.combinat.crystals.tensor_product"], [69, "module-sage.combinat.crystals.tensor_product_element"], [70, "module-sage.combinat.cyclic_sieving_phenomenon"], [71, "module-sage.combinat.debruijn_sequence"], [72, "module-sage.combinat.degree_sequences"], [73, "module-sage.combinat.derangements"], [74, "module-sage.combinat.descent_algebra"], [75, "module-sage.combinat.designs.all"], [76, "module-sage.combinat.designs.bibd"], [77, "module-sage.combinat.designs.block_design"], [78, "module-sage.combinat.designs.covering_array"], [79, "module-sage.combinat.designs.covering_design"], [80, "module-sage.combinat.designs.database"], [81, "module-sage.combinat.designs.design_catalog"], [82, "module-sage.combinat.designs.designs_pyx"], [83, "module-sage.combinat.designs.difference_family"], [84, "module-sage.combinat.designs.difference_matrices"], [85, "module-sage.combinat.designs.evenly_distributed_sets"], [86, "module-sage.combinat.designs.ext_rep"], [87, "module-sage.combinat.designs.gen_quadrangles_with_spread"], [88, "module-sage.combinat.designs.group_divisible_designs"], [89, "module-sage.combinat.designs.incidence_structures"], [90, "module-sage.combinat.designs.latin_squares"], [91, "module-sage.combinat.designs.orthogonal_arrays"], [92, "module-sage.combinat.designs.orthogonal_arrays_build_recursive"], [93, "module-sage.combinat.designs.orthogonal_arrays_find_recursive"], [94, "module-sage.combinat.designs.resolvable_bibd"], [95, "module-sage.combinat.designs.steiner_quadruple_systems"], [96, "module-sage.combinat.designs.subhypergraph_search"], [97, "module-sage.combinat.designs.twographs"], [98, "module-sage.combinat.diagram"], [99, "module-sage.combinat.diagram_algebras"], [100, "module-sage.combinat.dlx"], [101, "module-sage.combinat.dyck_word"], [102, "module-sage.combinat.e_one_star"], [103, "module-sage.combinat.enumerated_sets"], [104, "module-sage.combinat.enumeration_mod_permgroup"], [105, "module-sage.combinat.expnums"], [106, "module-sage.combinat.family"], [107, "module-sage.combinat.fast_vector_partitions"], [108, "module-sage.combinat.finite_state_machine"], [109, "module-sage.combinat.finite_state_machine_generators"], [110, "module-sage.combinat.fqsym"], [111, "module-sage.combinat.free_dendriform_algebra"], [112, "module-sage.combinat.free_module"], [113, "module-sage.combinat.free_prelie_algebra"], [114, "module-sage.combinat.fully_commutative_elements"], [115, "module-sage.combinat.fully_packed_loop"], [116, "module-sage.combinat.gelfand_tsetlin_patterns"], [117, "module-sage.combinat.graph_path"], [118, "module-sage.combinat.gray_codes"], [119, "module-sage.combinat.grossman_larson_algebras"], [120, "module-sage.combinat.growth"], [121, "module-sage.combinat.hall_polynomial"], [122, "module-sage.combinat.hillman_grassl"], [123, "module-sage.combinat.integer_lists.base"], [124, "module-sage.combinat.integer_lists.invlex"], [125, "module-sage.combinat.integer_lists.lists"], [126, "module-sage.combinat.integer_matrices"], [127, "module-sage.combinat.integer_vector"], [128, "module-sage.combinat.integer_vector_weighted"], [129, "module-sage.combinat.integer_vectors_mod_permgroup"], [130, "module-sage.combinat.interval_posets"], [131, "module-sage.combinat.k_tableau"], [132, "module-sage.combinat.kazhdan_lusztig"], [133, "module-sage.combinat.key_polynomial"], [134, "module-sage.combinat.knutson_tao_puzzles"], [135, "module-sage.combinat.matrices.all"], [136, "module-sage.combinat.matrices.dancing_links"], [137, "module-sage.combinat.matrices.dlxcpp"], [138, "module-sage.combinat.matrices.hadamard_matrix"], [139, "module-sage.combinat.matrices.latin"], [140, "module-sage.combinat.misc"], [141, "module-sage.combinat.multiset_partition_into_sets_ordered"], [142, "module-sage.combinat.ncsf_qsym.all"], [143, "module-sage.combinat.ncsf_qsym.combinatorics"], [144, "module-sage.combinat.ncsf_qsym.generic_basis_code"], [145, "module-sage.combinat.ncsf_qsym.ncsf"], [146, "module-sage.combinat.ncsf_qsym.qsym"], [147, "module-sage.combinat.ncsf_qsym.tutorial"], [148, "module-sage.combinat.ncsym.all"], [149, "module-sage.combinat.ncsym.bases"], [150, "module-sage.combinat.ncsym.dual"], [151, "module-sage.combinat.ncsym.ncsym"], [152, "module-sage.combinat.necklace"], [153, "module-sage.combinat.non_decreasing_parking_function"], [154, "module-sage.combinat.nu_dyck_word"], [155, "module-sage.combinat.nu_tamari_lattice"], [156, "module-sage.combinat.ordered_tree"], [157, "module-sage.combinat.output"], [158, "module-sage.combinat.parallelogram_polyomino"], [159, "module-sage.combinat.parking_functions"], [160, "module-sage.combinat.partition"], [161, "module-sage.combinat.partition_algebra"], [162, "module-sage.combinat.partition_kleshchev"], [163, "module-sage.combinat.partition_shifting_algebras"], [164, "module-sage.combinat.partition_tuple"], [165, "module-sage.combinat.partitions"], [166, "module-sage.combinat.path_tableaux.catalog"], [167, "module-sage.combinat.path_tableaux.dyck_path"], [168, "module-sage.combinat.path_tableaux.frieze"], [169, "module-sage.combinat.path_tableaux.path_tableau"], [170, "module-sage.combinat.path_tableaux.semistandard"], [171, "module-sage.combinat.perfect_matching"], [172, "module-sage.combinat.permutation"], [173, "module-sage.combinat.permutation_cython"], [174, "module-sage.combinat.plane_partition"], [175, "module-sage.combinat.posets.all"], [176, "module-sage.combinat.posets.cartesian_product"], [177, "module-sage.combinat.posets.d_complete"], [178, "module-sage.combinat.posets.elements"], [179, "module-sage.combinat.posets.forest"], [180, "module-sage.combinat.posets.hasse_diagram"], [181, "module-sage.combinat.posets.incidence_algebras"], [182, "module-sage.combinat.posets.lattices"], [183, "module-sage.combinat.posets.linear_extensions"], [184, "module-sage.combinat.posets.mobile"], [185, "module-sage.combinat.posets.moebius_algebra"], [186, "module-sage.combinat.posets.poset_examples"], [187, "module-sage.combinat.posets.posets"], [188, "module-sage.combinat.q_analogues"], [189, "module-sage.combinat.q_bernoulli"], [190, "module-sage.combinat.quickref"], [191, "module-sage.combinat.ranker"], [192, "module-sage.combinat.recognizable_series"], [193, "module-sage.combinat.regular_sequence"], [194, "module-sage.combinat.restricted_growth"], [195, "module-sage.combinat.ribbon"], [196, "module-sage.combinat.ribbon_shaped_tableau"], [197, "module-sage.combinat.ribbon_tableau"], [198, "module-sage.combinat.rigged_configurations.all"], [199, "module-sage.combinat.rigged_configurations.bij_abstract_class"], [200, "module-sage.combinat.rigged_configurations.bij_infinity"], [201, "module-sage.combinat.rigged_configurations.bij_type_A"], [202, "module-sage.combinat.rigged_configurations.bij_type_A2_dual"], [203, "module-sage.combinat.rigged_configurations.bij_type_A2_even"], [204, "module-sage.combinat.rigged_configurations.bij_type_A2_odd"], [205, "module-sage.combinat.rigged_configurations.bij_type_B"], [206, "module-sage.combinat.rigged_configurations.bij_type_C"], [207, "module-sage.combinat.rigged_configurations.bij_type_D"], [208, "module-sage.combinat.rigged_configurations.bij_type_D_tri"], [209, "module-sage.combinat.rigged_configurations.bij_type_D_twisted"], [210, "module-sage.combinat.rigged_configurations.bijection"], [211, "module-sage.combinat.rigged_configurations.kleber_tree"], [212, "module-sage.combinat.rigged_configurations.kr_tableaux"], [213, "module-sage.combinat.rigged_configurations.rc_crystal"], [214, "module-sage.combinat.rigged_configurations.rc_infinity"], [215, "module-sage.combinat.rigged_configurations.rigged_configuration_element"], [216, "module-sage.combinat.rigged_configurations.rigged_configurations"], [217, "module-sage.combinat.rigged_configurations.rigged_partition"], [218, "module-sage.combinat.rigged_configurations.tensor_product_kr_tableaux"], [219, "module-sage.combinat.rigged_configurations.tensor_product_kr_tableaux_element"], [220, "module-sage.combinat.root_system.all"], [221, "module-sage.combinat.root_system.ambient_space"], [222, "module-sage.combinat.root_system.associahedron"], [223, "module-sage.combinat.root_system.braid_move_calculator"], [224, "module-sage.combinat.root_system.braid_orbit"], [225, "module-sage.combinat.root_system.branching_rules"], [226, "module-sage.combinat.root_system.cartan_matrix"], [227, "module-sage.combinat.root_system.cartan_type"], [228, "module-sage.combinat.root_system.coxeter_group"], [229, "module-sage.combinat.root_system.coxeter_matrix"], [230, "module-sage.combinat.root_system.coxeter_type"], [231, "module-sage.combinat.root_system.dynkin_diagram"], [232, "module-sage.combinat.root_system.extended_affine_weyl_group"], [233, "module-sage.combinat.root_system.fundamental_group"], [234, "module-sage.combinat.root_system.hecke_algebra_representation"], [235, "module-sage.combinat.root_system.integrable_representations"], [236, "module-sage.combinat.root_system.non_symmetric_macdonald_polynomials"], [237, "module-sage.combinat.root_system.pieri_factors"], [238, "module-sage.combinat.root_system.plot"], [239, "module-sage.combinat.root_system.reflection_group_complex"], [240, "module-sage.combinat.root_system.reflection_group_real"], [241, "module-sage.combinat.root_system.root_lattice_realization_algebras"], [242, "module-sage.combinat.root_system.root_lattice_realizations"], [243, "module-sage.combinat.root_system.root_space"], [244, "module-sage.combinat.root_system.root_system"], [245, "module-sage.combinat.root_system.type_A"], [246, "module-sage.combinat.root_system.type_A_affine"], [247, "module-sage.combinat.root_system.type_A_infinity"], [248, "module-sage.combinat.root_system.type_B"], [249, "module-sage.combinat.root_system.type_BC_affine"], [250, "module-sage.combinat.root_system.type_B_affine"], [251, "module-sage.combinat.root_system.type_C"], [252, "module-sage.combinat.root_system.type_C_affine"], [253, "module-sage.combinat.root_system.type_D"], [254, "module-sage.combinat.root_system.type_D_affine"], [255, "module-sage.combinat.root_system.type_E"], [256, "module-sage.combinat.root_system.type_E_affine"], [257, "module-sage.combinat.root_system.type_F"], [258, "module-sage.combinat.root_system.type_F_affine"], [259, "module-sage.combinat.root_system.type_G"], [260, "module-sage.combinat.root_system.type_G_affine"], [261, "module-sage.combinat.root_system.type_H"], [262, "module-sage.combinat.root_system.type_I"], [263, "module-sage.combinat.root_system.type_Q"], [264, "module-sage.combinat.root_system.type_affine"], [265, "module-sage.combinat.root_system.type_dual"], [266, "module-sage.combinat.root_system.type_folded"], [267, "module-sage.combinat.root_system.type_marked"], [268, "module-sage.combinat.root_system.type_reducible"], [269, "module-sage.combinat.root_system.type_relabel"], [270, "module-sage.combinat.root_system.type_super_A"], [271, "module-sage.combinat.root_system.weight_lattice_realizations"], [272, "module-sage.combinat.root_system.weight_space"], [273, "module-sage.combinat.root_system.weyl_characters"], [274, "module-sage.combinat.root_system.weyl_group"], [275, "module-sage.combinat.rooted_tree"], [276, "module-sage.combinat.rsk"], [277, "module-sage.combinat.schubert_polynomial"], [278, "module-sage.combinat.set_partition"], [279, "module-sage.combinat.set_partition_iterator"], [280, "module-sage.combinat.set_partition_ordered"], [281, "module-sage.combinat.sf.all"], [282, "module-sage.combinat.sf.character"], [283, "module-sage.combinat.sf.classical"], [284, "module-sage.combinat.sf.dual"], [285, "module-sage.combinat.sf.elementary"], [286, "module-sage.combinat.sf.hall_littlewood"], [287, "module-sage.combinat.sf.hecke"], [288, "module-sage.combinat.sf.homogeneous"], [289, "module-sage.combinat.sf.jack"], [290, "module-sage.combinat.sf.k_dual"], [291, "module-sage.combinat.sf.kfpoly"], [292, "module-sage.combinat.sf.llt"], [293, "module-sage.combinat.sf.macdonald"], [294, "module-sage.combinat.sf.monomial"], [295, "module-sage.combinat.sf.multiplicative"], [296, "module-sage.combinat.sf.new_kschur"], [297, "module-sage.combinat.sf.ns_macdonald"], [298, "module-sage.combinat.sf.orthogonal"], [299, "module-sage.combinat.sf.orthotriang"], [300, "module-sage.combinat.sf.powersum"], [301, "module-sage.combinat.sf.schur"], [302, "module-sage.combinat.sf.sf"], [303, "module-sage.combinat.sf.sfa"], [304, "module-sage.combinat.sf.symplectic"], [305, "module-sage.combinat.sf.witt"], [306, "module-sage.combinat.shard_order"], [307, "module-sage.combinat.shifted_primed_tableau"], [308, "module-sage.combinat.shuffle"], [309, "module-sage.combinat.sidon_sets"], [310, "module-sage.combinat.similarity_class_type"], [311, "module-sage.combinat.sine_gordon"], [312, "module-sage.combinat.six_vertex_model"], [313, "module-sage.combinat.skew_partition"], [314, "module-sage.combinat.skew_tableau"], [315, "module-sage.combinat.sloane_functions"], [316, "module-sage.combinat.specht_module"], [317, "module-sage.combinat.species.all"], [318, "module-sage.combinat.species.characteristic_species"], [319, "module-sage.combinat.species.composition_species"], [320, "module-sage.combinat.species.cycle_species"], [321, "module-sage.combinat.species.empty_species"], [322, "module-sage.combinat.species.functorial_composition_species"], [323, "module-sage.combinat.species.generating_series"], [324, "module-sage.combinat.species.library"], [325, "module-sage.combinat.species.linear_order_species"], [326, "module-sage.combinat.species.misc"], [327, "module-sage.combinat.species.partition_species"], [328, "module-sage.combinat.species.permutation_species"], [329, "module-sage.combinat.species.product_species"], [330, "module-sage.combinat.species.recursive_species"], [331, "module-sage.combinat.species.set_species"], [332, "module-sage.combinat.species.species"], [333, "module-sage.combinat.species.structure"], [334, "module-sage.combinat.species.subset_species"], [335, "module-sage.combinat.species.sum_species"], [336, "module-sage.combinat.subset"], [337, "module-sage.combinat.subsets_hereditary"], [338, "module-sage.combinat.subsets_pairwise"], [339, "module-sage.combinat.subword"], [340, "module-sage.combinat.subword_complex"], [341, "module-sage.combinat.super_tableau"], [342, "module-sage.combinat.superpartition"], [343, "module-sage.combinat.symmetric_group_algebra"], [344, "module-sage.combinat.symmetric_group_representations"], [345, "module-sage.combinat.t_sequences"], [346, "module-sage.combinat.tableau"], [347, "module-sage.combinat.tableau_residues"], [348, "module-sage.combinat.tableau_tuple"], [349, "module-sage.combinat.tamari_lattices"], [350, "module-sage.combinat.tiling"], [351, "module-sage.combinat.tools"], [352, "module-sage.combinat.triangles_FHM"], [353, "module-sage.combinat.tuple"], [354, "module-sage.combinat.tutorial"], [355, "module-sage.combinat.vector_partition"], [356, "module-sage.combinat.words.abstract_word"], [357, "module-sage.combinat.words.all"], [358, "module-sage.combinat.words.alphabet"], [359, "module-sage.combinat.words.finite_word"], [360, "module-sage.combinat.words.infinite_word"], [361, "module-sage.combinat.words.lyndon_word"], [362, "module-sage.combinat.words.morphism"], [363, "module-sage.combinat.words.paths"], [364, "module-sage.combinat.words.shuffle_product"], [365, "module-sage.combinat.words.suffix_trees"], [366, "module-sage.combinat.words.word"], [367, "module-sage.combinat.words.word_char"], [368, "module-sage.combinat.words.word_datatypes"], [369, "module-sage.combinat.words.word_generators"], [370, "module-sage.combinat.words.word_infinite_datatypes"], [371, "module-sage.combinat.words.word_options"], [372, "module-sage.combinat.words.words"], [373, "module-sage.combinat.yang_baxter_graph"], [374, "module-sage.rings.cfinite_sequence"]], "node_number() (sage.combinat.abstract_tree.abstracttree method)": [[2, "sage.combinat.abstract_tree.AbstractTree.node_number"]], "node_number_at_depth() (sage.combinat.abstract_tree.abstracttree method)": [[2, "sage.combinat.abstract_tree.AbstractTree.node_number_at_depth"]], "node_number_to_the_right() (sage.combinat.abstract_tree.abstracttree method)": [[2, "sage.combinat.abstract_tree.AbstractTree.node_number_to_the_right"]], "paths() (sage.combinat.abstract_tree.abstracttree method)": [[2, "sage.combinat.abstract_tree.AbstractTree.paths"]], "paths_at_depth() (sage.combinat.abstract_tree.abstracttree method)": [[2, "sage.combinat.abstract_tree.AbstractTree.paths_at_depth"]], "paths_to_the_right() (sage.combinat.abstract_tree.abstracttree method)": [[2, "sage.combinat.abstract_tree.AbstractTree.paths_to_the_right"]], "post_order_traversal() (sage.combinat.abstract_tree.abstracttree method)": [[2, "sage.combinat.abstract_tree.AbstractTree.post_order_traversal"]], "post_order_traversal_iter() (sage.combinat.abstract_tree.abstracttree method)": [[2, "sage.combinat.abstract_tree.AbstractTree.post_order_traversal_iter"]], "pre_order_traversal() (sage.combinat.abstract_tree.abstracttree method)": [[2, "sage.combinat.abstract_tree.AbstractTree.pre_order_traversal"]], "pre_order_traversal_iter() (sage.combinat.abstract_tree.abstracttree method)": [[2, "sage.combinat.abstract_tree.AbstractTree.pre_order_traversal_iter"]], "sage.combinat.abstract_tree": [[2, "module-sage.combinat.abstract_tree"]], "set_label() (sage.combinat.abstract_tree.abstractlabelledclonabletree method)": [[2, "sage.combinat.abstract_tree.AbstractLabelledClonableTree.set_label"]], "set_root_label() (sage.combinat.abstract_tree.abstractlabelledclonabletree method)": [[2, "sage.combinat.abstract_tree.AbstractLabelledClonableTree.set_root_label"]], "shape() (sage.combinat.abstract_tree.abstractlabelledtree method)": [[2, "sage.combinat.abstract_tree.AbstractLabelledTree.shape"]], "subtrees() (sage.combinat.abstract_tree.abstracttree method)": [[2, "sage.combinat.abstract_tree.AbstractTree.subtrees"]], "to_hexacode() (sage.combinat.abstract_tree.abstracttree method)": [[2, "sage.combinat.abstract_tree.AbstractTree.to_hexacode"]], "tree_factorial() (sage.combinat.abstract_tree.abstracttree method)": [[2, "sage.combinat.abstract_tree.AbstractTree.tree_factorial"]], "affinepermutation (class in sage.combinat.affine_permutation)": [[3, "sage.combinat.affine_permutation.AffinePermutation"]], "affinepermutationgroup() (in module sage.combinat.affine_permutation)": [[3, "sage.combinat.affine_permutation.AffinePermutationGroup"]], "affinepermutationgroupgeneric (class in sage.combinat.affine_permutation)": [[3, "sage.combinat.affine_permutation.AffinePermutationGroupGeneric"]], "affinepermutationgrouptypea (class in sage.combinat.affine_permutation)": [[3, "sage.combinat.affine_permutation.AffinePermutationGroupTypeA"]], "affinepermutationgrouptypeb (class in sage.combinat.affine_permutation)": [[3, "sage.combinat.affine_permutation.AffinePermutationGroupTypeB"]], "affinepermutationgrouptypec (class in sage.combinat.affine_permutation)": [[3, "sage.combinat.affine_permutation.AffinePermutationGroupTypeC"]], "affinepermutationgrouptyped (class in sage.combinat.affine_permutation)": [[3, "sage.combinat.affine_permutation.AffinePermutationGroupTypeD"]], "affinepermutationgrouptypeg (class in sage.combinat.affine_permutation)": [[3, "sage.combinat.affine_permutation.AffinePermutationGroupTypeG"]], "affinepermutationtypea (class in sage.combinat.affine_permutation)": [[3, "sage.combinat.affine_permutation.AffinePermutationTypeA"]], "affinepermutationtypeb (class in sage.combinat.affine_permutation)": [[3, "sage.combinat.affine_permutation.AffinePermutationTypeB"]], "affinepermutationtypec (class in sage.combinat.affine_permutation)": [[3, "sage.combinat.affine_permutation.AffinePermutationTypeC"]], "affinepermutationtyped (class in sage.combinat.affine_permutation)": [[3, "sage.combinat.affine_permutation.AffinePermutationTypeD"]], "affinepermutationtypeg (class in sage.combinat.affine_permutation)": [[3, "sage.combinat.affine_permutation.AffinePermutationTypeG"]], "element (sage.combinat.affine_permutation.affinepermutationgrouptypea attribute)": [[3, "sage.combinat.affine_permutation.AffinePermutationGroupTypeA.Element"]], "element (sage.combinat.affine_permutation.affinepermutationgrouptypeb attribute)": [[3, "sage.combinat.affine_permutation.AffinePermutationGroupTypeB.Element"]], "element (sage.combinat.affine_permutation.affinepermutationgrouptypec attribute)": [[3, "sage.combinat.affine_permutation.AffinePermutationGroupTypeC.Element"]], "element (sage.combinat.affine_permutation.affinepermutationgrouptyped attribute)": [[3, "sage.combinat.affine_permutation.AffinePermutationGroupTypeD.Element"]], "element (sage.combinat.affine_permutation.affinepermutationgrouptypeg attribute)": [[3, "sage.combinat.affine_permutation.AffinePermutationGroupTypeG.Element"]], "apply_simple_reflection() (sage.combinat.affine_permutation.affinepermutation method)": [[3, "sage.combinat.affine_permutation.AffinePermutation.apply_simple_reflection"]], "apply_simple_reflection_left() (sage.combinat.affine_permutation.affinepermutationtypea method)": [[3, "sage.combinat.affine_permutation.AffinePermutationTypeA.apply_simple_reflection_left"]], "apply_simple_reflection_left() (sage.combinat.affine_permutation.affinepermutationtypeb method)": [[3, "sage.combinat.affine_permutation.AffinePermutationTypeB.apply_simple_reflection_left"]], "apply_simple_reflection_left() (sage.combinat.affine_permutation.affinepermutationtypec method)": [[3, "sage.combinat.affine_permutation.AffinePermutationTypeC.apply_simple_reflection_left"]], "apply_simple_reflection_left() (sage.combinat.affine_permutation.affinepermutationtyped method)": [[3, "sage.combinat.affine_permutation.AffinePermutationTypeD.apply_simple_reflection_left"]], "apply_simple_reflection_left() (sage.combinat.affine_permutation.affinepermutationtypeg method)": [[3, "sage.combinat.affine_permutation.AffinePermutationTypeG.apply_simple_reflection_left"]], "apply_simple_reflection_right() (sage.combinat.affine_permutation.affinepermutationtypea method)": [[3, "sage.combinat.affine_permutation.AffinePermutationTypeA.apply_simple_reflection_right"]], "apply_simple_reflection_right() (sage.combinat.affine_permutation.affinepermutationtypeb method)": [[3, "sage.combinat.affine_permutation.AffinePermutationTypeB.apply_simple_reflection_right"]], "apply_simple_reflection_right() (sage.combinat.affine_permutation.affinepermutationtypec method)": [[3, "sage.combinat.affine_permutation.AffinePermutationTypeC.apply_simple_reflection_right"]], "apply_simple_reflection_right() (sage.combinat.affine_permutation.affinepermutationtyped method)": [[3, "sage.combinat.affine_permutation.AffinePermutationTypeD.apply_simple_reflection_right"]], "apply_simple_reflection_right() (sage.combinat.affine_permutation.affinepermutationtypeg method)": [[3, "sage.combinat.affine_permutation.AffinePermutationTypeG.apply_simple_reflection_right"]], "cartan_matrix() (sage.combinat.affine_permutation.affinepermutationgroupgeneric method)": [[3, "sage.combinat.affine_permutation.AffinePermutationGroupGeneric.cartan_matrix"]], "cartan_type() (sage.combinat.affine_permutation.affinepermutationgroupgeneric method)": [[3, "sage.combinat.affine_permutation.AffinePermutationGroupGeneric.cartan_type"]], "check() (sage.combinat.affine_permutation.affinepermutationtypea method)": [[3, "sage.combinat.affine_permutation.AffinePermutationTypeA.check"]], "check() (sage.combinat.affine_permutation.affinepermutationtypeb method)": [[3, "sage.combinat.affine_permutation.AffinePermutationTypeB.check"]], "check() (sage.combinat.affine_permutation.affinepermutationtypec method)": [[3, "sage.combinat.affine_permutation.AffinePermutationTypeC.check"]], "check() (sage.combinat.affine_permutation.affinepermutationtyped method)": [[3, "sage.combinat.affine_permutation.AffinePermutationTypeD.check"]], "check() (sage.combinat.affine_permutation.affinepermutationtypeg method)": [[3, "sage.combinat.affine_permutation.AffinePermutationTypeG.check"]], "classical() (sage.combinat.affine_permutation.affinepermutationgroupgeneric method)": [[3, "sage.combinat.affine_permutation.AffinePermutationGroupGeneric.classical"]], "flip_automorphism() (sage.combinat.affine_permutation.affinepermutationtypea method)": [[3, "sage.combinat.affine_permutation.AffinePermutationTypeA.flip_automorphism"]], "from_lehmer_code() (sage.combinat.affine_permutation.affinepermutationgrouptypea method)": [[3, "sage.combinat.affine_permutation.AffinePermutationGroupTypeA.from_lehmer_code"]], "from_word() (sage.combinat.affine_permutation.affinepermutationgroupgeneric method)": [[3, "sage.combinat.affine_permutation.AffinePermutationGroupGeneric.from_word"]], "grassmannian_quotient() (sage.combinat.affine_permutation.affinepermutation method)": [[3, "sage.combinat.affine_permutation.AffinePermutation.grassmannian_quotient"]], "has_left_descent() (sage.combinat.affine_permutation.affinepermutationtypea method)": [[3, "sage.combinat.affine_permutation.AffinePermutationTypeA.has_left_descent"]], "has_left_descent() (sage.combinat.affine_permutation.affinepermutationtypeb method)": [[3, "sage.combinat.affine_permutation.AffinePermutationTypeB.has_left_descent"]], "has_left_descent() (sage.combinat.affine_permutation.affinepermutationtypec method)": [[3, "sage.combinat.affine_permutation.AffinePermutationTypeC.has_left_descent"]], "has_left_descent() (sage.combinat.affine_permutation.affinepermutationtyped method)": [[3, "sage.combinat.affine_permutation.AffinePermutationTypeD.has_left_descent"]], "has_left_descent() (sage.combinat.affine_permutation.affinepermutationtypeg method)": [[3, "sage.combinat.affine_permutation.AffinePermutationTypeG.has_left_descent"]], "has_right_descent() (sage.combinat.affine_permutation.affinepermutationtypea method)": [[3, "sage.combinat.affine_permutation.AffinePermutationTypeA.has_right_descent"]], "has_right_descent() (sage.combinat.affine_permutation.affinepermutationtypeb method)": [[3, "sage.combinat.affine_permutation.AffinePermutationTypeB.has_right_descent"]], "has_right_descent() (sage.combinat.affine_permutation.affinepermutationtypec method)": [[3, "sage.combinat.affine_permutation.AffinePermutationTypeC.has_right_descent"]], "has_right_descent() (sage.combinat.affine_permutation.affinepermutationtyped method)": [[3, "sage.combinat.affine_permutation.AffinePermutationTypeD.has_right_descent"]], "has_right_descent() (sage.combinat.affine_permutation.affinepermutationtypeg method)": [[3, "sage.combinat.affine_permutation.AffinePermutationTypeG.has_right_descent"]], "index_set() (sage.combinat.affine_permutation.affinepermutation method)": [[3, "sage.combinat.affine_permutation.AffinePermutation.index_set"]], "index_set() (sage.combinat.affine_permutation.affinepermutationgroupgeneric method)": [[3, "sage.combinat.affine_permutation.AffinePermutationGroupGeneric.index_set"]], "is_crystallographic() (sage.combinat.affine_permutation.affinepermutationgroupgeneric method)": [[3, "sage.combinat.affine_permutation.AffinePermutationGroupGeneric.is_crystallographic"]], "is_fully_commutative() (sage.combinat.affine_permutation.affinepermutationtypea method)": [[3, "sage.combinat.affine_permutation.AffinePermutationTypeA.is_fully_commutative"]], "is_i_grassmannian() (sage.combinat.affine_permutation.affinepermutation method)": [[3, "sage.combinat.affine_permutation.AffinePermutation.is_i_grassmannian"]], "is_one() (sage.combinat.affine_permutation.affinepermutation method)": [[3, "sage.combinat.affine_permutation.AffinePermutation.is_one"]], "lower_covers() (sage.combinat.affine_permutation.affinepermutation method)": [[3, "sage.combinat.affine_permutation.AffinePermutation.lower_covers"]], "maximal_cyclic_decomposition() (sage.combinat.affine_permutation.affinepermutationtypea method)": [[3, "sage.combinat.affine_permutation.AffinePermutationTypeA.maximal_cyclic_decomposition"]], "maximal_cyclic_factor() (sage.combinat.affine_permutation.affinepermutationtypea method)": [[3, "sage.combinat.affine_permutation.AffinePermutationTypeA.maximal_cyclic_factor"]], "one() (sage.combinat.affine_permutation.affinepermutationgrouptypea method)": [[3, "sage.combinat.affine_permutation.AffinePermutationGroupTypeA.one"]], "one() (sage.combinat.affine_permutation.affinepermutationgrouptypec method)": [[3, "sage.combinat.affine_permutation.AffinePermutationGroupTypeC.one"]], "one() (sage.combinat.affine_permutation.affinepermutationgrouptypeg method)": [[3, "sage.combinat.affine_permutation.AffinePermutationGroupTypeG.one"]], "position() (sage.combinat.affine_permutation.affinepermutationtypea method)": [[3, "sage.combinat.affine_permutation.AffinePermutationTypeA.position"]], "position() (sage.combinat.affine_permutation.affinepermutationtypec method)": [[3, "sage.combinat.affine_permutation.AffinePermutationTypeC.position"]], "position() (sage.combinat.affine_permutation.affinepermutationtypeg method)": [[3, "sage.combinat.affine_permutation.AffinePermutationTypeG.position"]], "promotion() (sage.combinat.affine_permutation.affinepermutationtypea method)": [[3, "sage.combinat.affine_permutation.AffinePermutationTypeA.promotion"]], "random_element() (sage.combinat.affine_permutation.affinepermutationgroupgeneric method)": [[3, "sage.combinat.affine_permutation.AffinePermutationGroupGeneric.random_element"]], "rank() (sage.combinat.affine_permutation.affinepermutationgroupgeneric method)": [[3, "sage.combinat.affine_permutation.AffinePermutationGroupGeneric.rank"]], "reduced_word() (sage.combinat.affine_permutation.affinepermutation method)": [[3, "sage.combinat.affine_permutation.AffinePermutation.reduced_word"]], "reflection_index_set() (sage.combinat.affine_permutation.affinepermutationgroupgeneric method)": [[3, "sage.combinat.affine_permutation.AffinePermutationGroupGeneric.reflection_index_set"]], "sage.combinat.affine_permutation": [[3, "module-sage.combinat.affine_permutation"]], "signature() (sage.combinat.affine_permutation.affinepermutation method)": [[3, "sage.combinat.affine_permutation.AffinePermutation.signature"]], "tableau_of_word() (sage.combinat.affine_permutation.affinepermutationtypea method)": [[3, "sage.combinat.affine_permutation.AffinePermutationTypeA.tableau_of_word"]], "to_bounded_partition() (sage.combinat.affine_permutation.affinepermutationtypea method)": [[3, "sage.combinat.affine_permutation.AffinePermutationTypeA.to_bounded_partition"]], "to_core() (sage.combinat.affine_permutation.affinepermutationtypea method)": [[3, "sage.combinat.affine_permutation.AffinePermutationTypeA.to_core"]], "to_dominant() (sage.combinat.affine_permutation.affinepermutationtypea method)": [[3, "sage.combinat.affine_permutation.AffinePermutationTypeA.to_dominant"]], "to_lehmer_code() (sage.combinat.affine_permutation.affinepermutationtypea method)": [[3, "sage.combinat.affine_permutation.AffinePermutationTypeA.to_lehmer_code"]], "to_type_a() (sage.combinat.affine_permutation.affinepermutationtypea method)": [[3, "sage.combinat.affine_permutation.AffinePermutationTypeA.to_type_a"]], "to_type_a() (sage.combinat.affine_permutation.affinepermutationtypec method)": [[3, "sage.combinat.affine_permutation.AffinePermutationTypeC.to_type_a"]], "to_type_a() (sage.combinat.affine_permutation.affinepermutationtypeg method)": [[3, "sage.combinat.affine_permutation.AffinePermutationTypeG.to_type_a"]], "to_weyl_group_element() (sage.combinat.affine_permutation.affinepermutation method)": [[3, "sage.combinat.affine_permutation.AffinePermutation.to_weyl_group_element"]], "value() (sage.combinat.affine_permutation.affinepermutationtypea method)": [[3, "sage.combinat.affine_permutation.AffinePermutationTypeA.value"]], "value() (sage.combinat.affine_permutation.affinepermutationtypec method)": [[3, "sage.combinat.affine_permutation.AffinePermutationTypeC.value"]], "value() (sage.combinat.affine_permutation.affinepermutationtypeg method)": [[3, "sage.combinat.affine_permutation.AffinePermutationTypeG.value"]], "weyl_group() (sage.combinat.affine_permutation.affinepermutationgroupgeneric method)": [[3, "sage.combinat.affine_permutation.AffinePermutationGroupGeneric.weyl_group"]], "sage.combinat.algebraic_combinatorics": [[4, "module-sage.combinat.algebraic_combinatorics"]], "sage.combinat.all": [[5, "module-sage.combinat.all"]], "asm_compatible() (sage.combinat.alternating_sign_matrix.alternatingsignmatrix method)": [[6, "sage.combinat.alternating_sign_matrix.AlternatingSignMatrix.ASM_compatible"]], "asm_compatible_bigger() (sage.combinat.alternating_sign_matrix.alternatingsignmatrix method)": [[6, "sage.combinat.alternating_sign_matrix.AlternatingSignMatrix.ASM_compatible_bigger"]], "asm_compatible_smaller() (sage.combinat.alternating_sign_matrix.alternatingsignmatrix method)": [[6, "sage.combinat.alternating_sign_matrix.AlternatingSignMatrix.ASM_compatible_smaller"]], "alternatingsignmatrices (class in sage.combinat.alternating_sign_matrix)": [[6, "sage.combinat.alternating_sign_matrix.AlternatingSignMatrices"]], "alternatingsignmatrix (class in sage.combinat.alternating_sign_matrix)": [[6, "sage.combinat.alternating_sign_matrix.AlternatingSignMatrix"]], "contretableaux (class in sage.combinat.alternating_sign_matrix)": [[6, "sage.combinat.alternating_sign_matrix.ContreTableaux"]], "contretableaux_n (class in sage.combinat.alternating_sign_matrix)": [[6, "sage.combinat.alternating_sign_matrix.ContreTableaux_n"]], "element (sage.combinat.alternating_sign_matrix.alternatingsignmatrices attribute)": [[6, "sage.combinat.alternating_sign_matrix.AlternatingSignMatrices.Element"]], "monotonetriangles (class in sage.combinat.alternating_sign_matrix)": [[6, "sage.combinat.alternating_sign_matrix.MonotoneTriangles"]], "truncatedstaircases (class in sage.combinat.alternating_sign_matrix)": [[6, "sage.combinat.alternating_sign_matrix.TruncatedStaircases"]], "truncatedstaircases_nlastcolumn (class in sage.combinat.alternating_sign_matrix)": [[6, "sage.combinat.alternating_sign_matrix.TruncatedStaircases_nlastcolumn"]], "cardinality() (sage.combinat.alternating_sign_matrix.alternatingsignmatrices method)": [[6, "sage.combinat.alternating_sign_matrix.AlternatingSignMatrices.cardinality"]], "cardinality() (sage.combinat.alternating_sign_matrix.contretableaux_n method)": [[6, "sage.combinat.alternating_sign_matrix.ContreTableaux_n.cardinality"]], "cardinality() (sage.combinat.alternating_sign_matrix.monotonetriangles method)": [[6, "sage.combinat.alternating_sign_matrix.MonotoneTriangles.cardinality"]], "cardinality() (sage.combinat.alternating_sign_matrix.truncatedstaircases_nlastcolumn method)": [[6, "sage.combinat.alternating_sign_matrix.TruncatedStaircases_nlastcolumn.cardinality"]], "corner_sum_matrix() (sage.combinat.alternating_sign_matrix.alternatingsignmatrix method)": [[6, "sage.combinat.alternating_sign_matrix.AlternatingSignMatrix.corner_sum_matrix"]], "cover_relations() (sage.combinat.alternating_sign_matrix.alternatingsignmatrices method)": [[6, "sage.combinat.alternating_sign_matrix.AlternatingSignMatrices.cover_relations"]], "cover_relations() (sage.combinat.alternating_sign_matrix.monotonetriangles method)": [[6, "sage.combinat.alternating_sign_matrix.MonotoneTriangles.cover_relations"]], "first() (sage.combinat.alternating_sign_matrix.alternatingsignmatrices method)": [[6, "sage.combinat.alternating_sign_matrix.AlternatingSignMatrices.first"]], "from_contre_tableau() (sage.combinat.alternating_sign_matrix.alternatingsignmatrices method)": [[6, "sage.combinat.alternating_sign_matrix.AlternatingSignMatrices.from_contre_tableau"]], "from_corner_sum() (sage.combinat.alternating_sign_matrix.alternatingsignmatrices method)": [[6, "sage.combinat.alternating_sign_matrix.AlternatingSignMatrices.from_corner_sum"]], "from_height_function() (sage.combinat.alternating_sign_matrix.alternatingsignmatrices method)": [[6, "sage.combinat.alternating_sign_matrix.AlternatingSignMatrices.from_height_function"]], "from_monotone_triangle() (sage.combinat.alternating_sign_matrix.alternatingsignmatrices method)": [[6, "sage.combinat.alternating_sign_matrix.AlternatingSignMatrices.from_monotone_triangle"]], "gyration() (sage.combinat.alternating_sign_matrix.alternatingsignmatrix method)": [[6, "sage.combinat.alternating_sign_matrix.AlternatingSignMatrix.gyration"]], "gyration_orbit() (sage.combinat.alternating_sign_matrix.alternatingsignmatrix method)": [[6, "sage.combinat.alternating_sign_matrix.AlternatingSignMatrix.gyration_orbit"]], "gyration_orbit_sizes() (sage.combinat.alternating_sign_matrix.alternatingsignmatrices method)": [[6, "sage.combinat.alternating_sign_matrix.AlternatingSignMatrices.gyration_orbit_sizes"]], "gyration_orbits() (sage.combinat.alternating_sign_matrix.alternatingsignmatrices method)": [[6, "sage.combinat.alternating_sign_matrix.AlternatingSignMatrices.gyration_orbits"]], "height_function() (sage.combinat.alternating_sign_matrix.alternatingsignmatrix method)": [[6, "sage.combinat.alternating_sign_matrix.AlternatingSignMatrix.height_function"]], "inversion_number() (sage.combinat.alternating_sign_matrix.alternatingsignmatrix method)": [[6, "sage.combinat.alternating_sign_matrix.AlternatingSignMatrix.inversion_number"]], "is_permutation() (sage.combinat.alternating_sign_matrix.alternatingsignmatrix method)": [[6, "sage.combinat.alternating_sign_matrix.AlternatingSignMatrix.is_permutation"]], "last() (sage.combinat.alternating_sign_matrix.alternatingsignmatrices method)": [[6, "sage.combinat.alternating_sign_matrix.AlternatingSignMatrices.last"]], "lattice() (sage.combinat.alternating_sign_matrix.alternatingsignmatrices method)": [[6, "sage.combinat.alternating_sign_matrix.AlternatingSignMatrices.lattice"]], "lattice() (sage.combinat.alternating_sign_matrix.monotonetriangles method)": [[6, "sage.combinat.alternating_sign_matrix.MonotoneTriangles.lattice"]], "left_key() (sage.combinat.alternating_sign_matrix.alternatingsignmatrix method)": [[6, "sage.combinat.alternating_sign_matrix.AlternatingSignMatrix.left_key"]], "left_key_as_permutation() (sage.combinat.alternating_sign_matrix.alternatingsignmatrix method)": [[6, "sage.combinat.alternating_sign_matrix.AlternatingSignMatrix.left_key_as_permutation"]], "link_pattern() (sage.combinat.alternating_sign_matrix.alternatingsignmatrix method)": [[6, "sage.combinat.alternating_sign_matrix.AlternatingSignMatrix.link_pattern"]], "matrix_space() (sage.combinat.alternating_sign_matrix.alternatingsignmatrices method)": [[6, "sage.combinat.alternating_sign_matrix.AlternatingSignMatrices.matrix_space"]], "number_negative_ones() (sage.combinat.alternating_sign_matrix.alternatingsignmatrix method)": [[6, "sage.combinat.alternating_sign_matrix.AlternatingSignMatrix.number_negative_ones"]], "random_element() (sage.combinat.alternating_sign_matrix.alternatingsignmatrices method)": [[6, "sage.combinat.alternating_sign_matrix.AlternatingSignMatrices.random_element"]], "rotate_ccw() (sage.combinat.alternating_sign_matrix.alternatingsignmatrix method)": [[6, "sage.combinat.alternating_sign_matrix.AlternatingSignMatrix.rotate_ccw"]], "rotate_cw() (sage.combinat.alternating_sign_matrix.alternatingsignmatrix method)": [[6, "sage.combinat.alternating_sign_matrix.AlternatingSignMatrix.rotate_cw"]], "sage.combinat.alternating_sign_matrix": [[6, "module-sage.combinat.alternating_sign_matrix"]], "size() (sage.combinat.alternating_sign_matrix.alternatingsignmatrices method)": [[6, "sage.combinat.alternating_sign_matrix.AlternatingSignMatrices.size"]], "to_dyck_word() (sage.combinat.alternating_sign_matrix.alternatingsignmatrix method)": [[6, "sage.combinat.alternating_sign_matrix.AlternatingSignMatrix.to_dyck_word"]], "to_fully_packed_loop() (sage.combinat.alternating_sign_matrix.alternatingsignmatrix method)": [[6, "sage.combinat.alternating_sign_matrix.AlternatingSignMatrix.to_fully_packed_loop"]], "to_matrix() (sage.combinat.alternating_sign_matrix.alternatingsignmatrix method)": [[6, "sage.combinat.alternating_sign_matrix.AlternatingSignMatrix.to_matrix"]], "to_monotone_triangle() (sage.combinat.alternating_sign_matrix.alternatingsignmatrix method)": [[6, "sage.combinat.alternating_sign_matrix.AlternatingSignMatrix.to_monotone_triangle"]], "to_permutation() (sage.combinat.alternating_sign_matrix.alternatingsignmatrix method)": [[6, "sage.combinat.alternating_sign_matrix.AlternatingSignMatrix.to_permutation"]], "to_semistandard_tableau() (sage.combinat.alternating_sign_matrix.alternatingsignmatrix method)": [[6, "sage.combinat.alternating_sign_matrix.AlternatingSignMatrix.to_semistandard_tableau"]], "to_six_vertex_model() (sage.combinat.alternating_sign_matrix.alternatingsignmatrix method)": [[6, "sage.combinat.alternating_sign_matrix.AlternatingSignMatrix.to_six_vertex_model"]], "transpose() (sage.combinat.alternating_sign_matrix.alternatingsignmatrix method)": [[6, "sage.combinat.alternating_sign_matrix.AlternatingSignMatrix.transpose"]], "genericbacktracker (class in sage.combinat.backtrack)": [[7, "sage.combinat.backtrack.GenericBacktracker"]], "positiveintegersemigroup (class in sage.combinat.backtrack)": [[7, "sage.combinat.backtrack.PositiveIntegerSemigroup"]], "children() (sage.combinat.backtrack.positiveintegersemigroup method)": [[7, "sage.combinat.backtrack.PositiveIntegerSemigroup.children"]], "one() (sage.combinat.backtrack.positiveintegersemigroup method)": [[7, "sage.combinat.backtrack.PositiveIntegerSemigroup.one"]], "roots() (sage.combinat.backtrack.positiveintegersemigroup method)": [[7, "sage.combinat.backtrack.PositiveIntegerSemigroup.roots"]], "sage.combinat.backtrack": [[7, "module-sage.combinat.backtrack"]], "baxterpermutations (class in sage.combinat.baxter_permutations)": [[8, "sage.combinat.baxter_permutations.BaxterPermutations"]], "baxterpermutations_all (class in sage.combinat.baxter_permutations)": [[8, "sage.combinat.baxter_permutations.BaxterPermutations_all"]], "baxterpermutations_size (class in sage.combinat.baxter_permutations)": [[8, "sage.combinat.baxter_permutations.BaxterPermutations_size"]], "cardinality() (sage.combinat.baxter_permutations.baxterpermutations_size method)": [[8, "sage.combinat.baxter_permutations.BaxterPermutations_size.cardinality"]], "sage.combinat.baxter_permutations": [[8, "module-sage.combinat.baxter_permutations"]], "to_pair_of_twin_binary_trees() (sage.combinat.baxter_permutations.baxterpermutations_all method)": [[8, "sage.combinat.baxter_permutations.BaxterPermutations_all.to_pair_of_twin_binary_trees"]], "bijectionist (class in sage.combinat.bijectionist)": [[9, "sage.combinat.bijectionist.Bijectionist"]], "constant_blocks() (sage.combinat.bijectionist.bijectionist method)": [[9, "sage.combinat.bijectionist.Bijectionist.constant_blocks"]], "minimal_subdistributions_blocks_iterator() (sage.combinat.bijectionist.bijectionist method)": [[9, "sage.combinat.bijectionist.Bijectionist.minimal_subdistributions_blocks_iterator"]], "minimal_subdistributions_iterator() (sage.combinat.bijectionist.bijectionist method)": [[9, "sage.combinat.bijectionist.Bijectionist.minimal_subdistributions_iterator"]], "possible_values() (sage.combinat.bijectionist.bijectionist method)": [[9, "sage.combinat.bijectionist.Bijectionist.possible_values"]], "sage.combinat.bijectionist": [[9, "module-sage.combinat.bijectionist"]], "set_constant_blocks() (sage.combinat.bijectionist.bijectionist method)": [[9, "sage.combinat.bijectionist.Bijectionist.set_constant_blocks"]], "set_distributions() (sage.combinat.bijectionist.bijectionist method)": [[9, "sage.combinat.bijectionist.Bijectionist.set_distributions"]], "set_homomesic() (sage.combinat.bijectionist.bijectionist method)": [[9, "sage.combinat.bijectionist.Bijectionist.set_homomesic"]], "set_intertwining_relations() (sage.combinat.bijectionist.bijectionist method)": [[9, "sage.combinat.bijectionist.Bijectionist.set_intertwining_relations"]], "set_quadratic_relation() (sage.combinat.bijectionist.bijectionist method)": [[9, "sage.combinat.bijectionist.Bijectionist.set_quadratic_relation"]], "set_semi_conjugacy() (sage.combinat.bijectionist.bijectionist method)": [[9, "sage.combinat.bijectionist.Bijectionist.set_semi_conjugacy"]], "set_statistics() (sage.combinat.bijectionist.bijectionist method)": [[9, "sage.combinat.bijectionist.Bijectionist.set_statistics"]], "set_value_restrictions() (sage.combinat.bijectionist.bijectionist method)": [[9, "sage.combinat.bijectionist.Bijectionist.set_value_restrictions"]], "solutions_iterator() (sage.combinat.bijectionist.bijectionist method)": [[9, "sage.combinat.bijectionist.Bijectionist.solutions_iterator"]], "statistics_fibers() (sage.combinat.bijectionist.bijectionist method)": [[9, "sage.combinat.bijectionist.Bijectionist.statistics_fibers"]], "statistics_table() (sage.combinat.bijectionist.bijectionist method)": [[9, "sage.combinat.bijectionist.Bijectionist.statistics_table"]], "binaryrecurrencesequence (class in sage.combinat.binary_recurrence_sequences)": [[10, "sage.combinat.binary_recurrence_sequences.BinaryRecurrenceSequence"]], "is_arithmetic() (sage.combinat.binary_recurrence_sequences.binaryrecurrencesequence method)": [[10, "sage.combinat.binary_recurrence_sequences.BinaryRecurrenceSequence.is_arithmetic"]], "is_degenerate() (sage.combinat.binary_recurrence_sequences.binaryrecurrencesequence method)": [[10, "sage.combinat.binary_recurrence_sequences.BinaryRecurrenceSequence.is_degenerate"]], "is_geometric() (sage.combinat.binary_recurrence_sequences.binaryrecurrencesequence method)": [[10, "sage.combinat.binary_recurrence_sequences.BinaryRecurrenceSequence.is_geometric"]], "is_quasigeometric() (sage.combinat.binary_recurrence_sequences.binaryrecurrencesequence method)": [[10, "sage.combinat.binary_recurrence_sequences.BinaryRecurrenceSequence.is_quasigeometric"]], "period() (sage.combinat.binary_recurrence_sequences.binaryrecurrencesequence method)": [[10, "sage.combinat.binary_recurrence_sequences.BinaryRecurrenceSequence.period"]], "pthpowers() (sage.combinat.binary_recurrence_sequences.binaryrecurrencesequence method)": [[10, "sage.combinat.binary_recurrence_sequences.BinaryRecurrenceSequence.pthpowers"]], "sage.combinat.binary_recurrence_sequences": [[10, "module-sage.combinat.binary_recurrence_sequences"]], "binarytree (class in sage.combinat.binary_tree)": [[11, "sage.combinat.binary_tree.BinaryTree"]], "binarytrees (class in sage.combinat.binary_tree)": [[11, "sage.combinat.binary_tree.BinaryTrees"]], "binarytrees_all (class in sage.combinat.binary_tree)": [[11, "sage.combinat.binary_tree.BinaryTrees_all"]], "binarytrees_size (class in sage.combinat.binary_tree)": [[11, "sage.combinat.binary_tree.BinaryTrees_size"]], "element (sage.combinat.binary_tree.binarytrees_all attribute)": [[11, "sage.combinat.binary_tree.BinaryTrees_all.Element"]], "element (sage.combinat.binary_tree.labelledbinarytrees attribute)": [[11, "sage.combinat.binary_tree.LabelledBinaryTrees.Element"]], "fullbinarytrees_all (class in sage.combinat.binary_tree)": [[11, "sage.combinat.binary_tree.FullBinaryTrees_all"]], "fullbinarytrees_size (class in sage.combinat.binary_tree)": [[11, "sage.combinat.binary_tree.FullBinaryTrees_size"]], "labelledbinarytree (class in sage.combinat.binary_tree)": [[11, "sage.combinat.binary_tree.LabelledBinaryTree"]], "labelledbinarytrees (class in sage.combinat.binary_tree)": [[11, "sage.combinat.binary_tree.LabelledBinaryTrees"]], "as_ordered_tree() (sage.combinat.binary_tree.binarytree method)": [[11, "sage.combinat.binary_tree.BinaryTree.as_ordered_tree"]], "binary_search_insert() (sage.combinat.binary_tree.labelledbinarytree method)": [[11, "sage.combinat.binary_tree.LabelledBinaryTree.binary_search_insert"]], "binary_search_tree_shape() (in module sage.combinat.binary_tree)": [[11, "sage.combinat.binary_tree.binary_search_tree_shape"]], "canonical_labelling() (sage.combinat.binary_tree.binarytree method)": [[11, "sage.combinat.binary_tree.BinaryTree.canonical_labelling"]], "canopee() (sage.combinat.binary_tree.binarytree method)": [[11, "sage.combinat.binary_tree.BinaryTree.canopee"]], "cardinality() (sage.combinat.binary_tree.binarytrees_size method)": [[11, "sage.combinat.binary_tree.BinaryTrees_size.cardinality"]], "cardinality() (sage.combinat.binary_tree.fullbinarytrees_size method)": [[11, "sage.combinat.binary_tree.FullBinaryTrees_size.cardinality"]], "check() (sage.combinat.binary_tree.binarytree method)": [[11, "sage.combinat.binary_tree.BinaryTree.check"]], "comb() (sage.combinat.binary_tree.binarytree method)": [[11, "sage.combinat.binary_tree.BinaryTree.comb"]], "dendriform_shuffle() (sage.combinat.binary_tree.binarytree method)": [[11, "sage.combinat.binary_tree.BinaryTree.dendriform_shuffle"]], "from_tamari_sorting_tuple() (in module sage.combinat.binary_tree)": [[11, "sage.combinat.binary_tree.from_tamari_sorting_tuple"]], "graph() (sage.combinat.binary_tree.binarytree method)": [[11, "sage.combinat.binary_tree.BinaryTree.graph"]], "heap_insert() (sage.combinat.binary_tree.labelledbinarytree method)": [[11, "sage.combinat.binary_tree.LabelledBinaryTree.heap_insert"]], "hook_number() (sage.combinat.binary_tree.binarytree method)": [[11, "sage.combinat.binary_tree.BinaryTree.hook_number"]], "in_order_traversal() (sage.combinat.binary_tree.binarytree method)": [[11, "sage.combinat.binary_tree.BinaryTree.in_order_traversal"]], "in_order_traversal_iter() (sage.combinat.binary_tree.binarytree method)": [[11, "sage.combinat.binary_tree.BinaryTree.in_order_traversal_iter"]], "is_complete() (sage.combinat.binary_tree.binarytree method)": [[11, "sage.combinat.binary_tree.BinaryTree.is_complete"]], "is_empty() (sage.combinat.binary_tree.binarytree method)": [[11, "sage.combinat.binary_tree.BinaryTree.is_empty"]], "is_full() (sage.combinat.binary_tree.binarytree method)": [[11, "sage.combinat.binary_tree.BinaryTree.is_full"]], "is_perfect() (sage.combinat.binary_tree.binarytree method)": [[11, "sage.combinat.binary_tree.BinaryTree.is_perfect"]], "labelled_trees() (sage.combinat.binary_tree.binarytrees_all method)": [[11, "sage.combinat.binary_tree.BinaryTrees_all.labelled_trees"]], "labelled_trees() (sage.combinat.binary_tree.labelledbinarytrees method)": [[11, "sage.combinat.binary_tree.LabelledBinaryTrees.labelled_trees"]], "leaf() (sage.combinat.binary_tree.binarytrees method)": [[11, "sage.combinat.binary_tree.BinaryTrees.leaf"]], "left_border_symmetry() (sage.combinat.binary_tree.binarytree method)": [[11, "sage.combinat.binary_tree.BinaryTree.left_border_symmetry"]], "left_children_node_number() (sage.combinat.binary_tree.binarytree method)": [[11, "sage.combinat.binary_tree.BinaryTree.left_children_node_number"]], "left_right_symmetry() (sage.combinat.binary_tree.binarytree method)": [[11, "sage.combinat.binary_tree.BinaryTree.left_right_symmetry"]], "left_rotate() (sage.combinat.binary_tree.binarytree method)": [[11, "sage.combinat.binary_tree.BinaryTree.left_rotate"]], "left_rotate() (sage.combinat.binary_tree.labelledbinarytree method)": [[11, "sage.combinat.binary_tree.LabelledBinaryTree.left_rotate"]], "make_leaf() (sage.combinat.binary_tree.binarytree method)": [[11, "sage.combinat.binary_tree.BinaryTree.make_leaf"]], "make_node() (sage.combinat.binary_tree.binarytree method)": [[11, "sage.combinat.binary_tree.BinaryTree.make_node"]], "over() (sage.combinat.binary_tree.binarytree method)": [[11, "sage.combinat.binary_tree.BinaryTree.over"]], "over_decomposition() (sage.combinat.binary_tree.binarytree method)": [[11, "sage.combinat.binary_tree.BinaryTree.over_decomposition"]], "prune() (sage.combinat.binary_tree.binarytree method)": [[11, "sage.combinat.binary_tree.BinaryTree.prune"]], "q_hook_length_fraction() (sage.combinat.binary_tree.binarytree method)": [[11, "sage.combinat.binary_tree.BinaryTree.q_hook_length_fraction"]], "random_element() (sage.combinat.binary_tree.binarytrees_size method)": [[11, "sage.combinat.binary_tree.BinaryTrees_size.random_element"]], "random_element() (sage.combinat.binary_tree.fullbinarytrees_size method)": [[11, "sage.combinat.binary_tree.FullBinaryTrees_size.random_element"]], "right_rotate() (sage.combinat.binary_tree.binarytree method)": [[11, "sage.combinat.binary_tree.BinaryTree.right_rotate"]], "right_rotate() (sage.combinat.binary_tree.labelledbinarytree method)": [[11, "sage.combinat.binary_tree.LabelledBinaryTree.right_rotate"]], "sage.combinat.binary_tree": [[11, "module-sage.combinat.binary_tree"]], "semistandard_insert() (sage.combinat.binary_tree.labelledbinarytree method)": [[11, "sage.combinat.binary_tree.LabelledBinaryTree.semistandard_insert"]], "show() (sage.combinat.binary_tree.binarytree method)": [[11, "sage.combinat.binary_tree.BinaryTree.show"]], "single_edge_cut_shapes() (sage.combinat.binary_tree.binarytree method)": [[11, "sage.combinat.binary_tree.BinaryTree.single_edge_cut_shapes"]], "sylvester_class() (sage.combinat.binary_tree.binarytree method)": [[11, "sage.combinat.binary_tree.BinaryTree.sylvester_class"]], "tamari_greater() (sage.combinat.binary_tree.binarytree method)": [[11, "sage.combinat.binary_tree.BinaryTree.tamari_greater"]], "tamari_interval() (sage.combinat.binary_tree.binarytree method)": [[11, "sage.combinat.binary_tree.BinaryTree.tamari_interval"]], "tamari_join() (sage.combinat.binary_tree.binarytree method)": [[11, "sage.combinat.binary_tree.BinaryTree.tamari_join"]], "tamari_lequal() (sage.combinat.binary_tree.binarytree method)": [[11, "sage.combinat.binary_tree.BinaryTree.tamari_lequal"]], "tamari_meet() (sage.combinat.binary_tree.binarytree method)": [[11, "sage.combinat.binary_tree.BinaryTree.tamari_meet"]], "tamari_pred() (sage.combinat.binary_tree.binarytree method)": [[11, "sage.combinat.binary_tree.BinaryTree.tamari_pred"]], "tamari_smaller() (sage.combinat.binary_tree.binarytree method)": [[11, "sage.combinat.binary_tree.BinaryTree.tamari_smaller"]], "tamari_sorting_tuple() (sage.combinat.binary_tree.binarytree method)": [[11, "sage.combinat.binary_tree.BinaryTree.tamari_sorting_tuple"]], "tamari_succ() (sage.combinat.binary_tree.binarytree method)": [[11, "sage.combinat.binary_tree.BinaryTree.tamari_succ"]], "to_132_avoiding_permutation() (sage.combinat.binary_tree.binarytree method)": [[11, "sage.combinat.binary_tree.BinaryTree.to_132_avoiding_permutation"]], "to_312_avoiding_permutation() (sage.combinat.binary_tree.binarytree method)": [[11, "sage.combinat.binary_tree.BinaryTree.to_312_avoiding_permutation"]], "to_dyck_word() (sage.combinat.binary_tree.binarytree method)": [[11, "sage.combinat.binary_tree.BinaryTree.to_dyck_word"]], "to_dyck_word_tamari() (sage.combinat.binary_tree.binarytree method)": [[11, "sage.combinat.binary_tree.BinaryTree.to_dyck_word_tamari"]], "to_full() (sage.combinat.binary_tree.binarytree method)": [[11, "sage.combinat.binary_tree.BinaryTree.to_full"]], "to_ordered_tree_left_branch() (sage.combinat.binary_tree.binarytree method)": [[11, "sage.combinat.binary_tree.BinaryTree.to_ordered_tree_left_branch"]], "to_ordered_tree_right_branch() (sage.combinat.binary_tree.binarytree method)": [[11, "sage.combinat.binary_tree.BinaryTree.to_ordered_tree_right_branch"]], "to_poset() (sage.combinat.binary_tree.binarytree method)": [[11, "sage.combinat.binary_tree.BinaryTree.to_poset"]], "to_tilting() (sage.combinat.binary_tree.binarytree method)": [[11, "sage.combinat.binary_tree.BinaryTree.to_tilting"]], "to_undirected_graph() (sage.combinat.binary_tree.binarytree method)": [[11, "sage.combinat.binary_tree.BinaryTree.to_undirected_graph"]], "twisting_number() (sage.combinat.binary_tree.binarytree method)": [[11, "sage.combinat.binary_tree.BinaryTree.twisting_number"]], "under() (sage.combinat.binary_tree.binarytree method)": [[11, "sage.combinat.binary_tree.BinaryTree.under"]], "under_decomposition() (sage.combinat.binary_tree.binarytree method)": [[11, "sage.combinat.binary_tree.BinaryTree.under_decomposition"]], "unlabelled_trees() (sage.combinat.binary_tree.binarytrees_all method)": [[11, "sage.combinat.binary_tree.BinaryTrees_all.unlabelled_trees"]], "unlabelled_trees() (sage.combinat.binary_tree.labelledbinarytrees method)": [[11, "sage.combinat.binary_tree.LabelledBinaryTrees.unlabelled_trees"]], "blobalgebra (class in sage.combinat.blob_algebra)": [[12, "sage.combinat.blob_algebra.BlobAlgebra"]], "blobdiagram (class in sage.combinat.blob_algebra)": [[12, "sage.combinat.blob_algebra.BlobDiagram"]], "blobdiagrams (class in sage.combinat.blob_algebra)": [[12, "sage.combinat.blob_algebra.BlobDiagrams"]], "element (sage.combinat.blob_algebra.blobdiagrams attribute)": [[12, "sage.combinat.blob_algebra.BlobDiagrams.Element"]], "base_set() (sage.combinat.blob_algebra.blobdiagrams method)": [[12, "sage.combinat.blob_algebra.BlobDiagrams.base_set"]], "cardinality() (sage.combinat.blob_algebra.blobdiagrams method)": [[12, "sage.combinat.blob_algebra.BlobDiagrams.cardinality"]], "one_basis() (sage.combinat.blob_algebra.blobalgebra method)": [[12, "sage.combinat.blob_algebra.BlobAlgebra.one_basis"]], "order() (sage.combinat.blob_algebra.blobalgebra method)": [[12, "sage.combinat.blob_algebra.BlobAlgebra.order"]], "order() (sage.combinat.blob_algebra.blobdiagrams method)": [[12, "sage.combinat.blob_algebra.BlobDiagrams.order"]], "product_on_basis() (sage.combinat.blob_algebra.blobalgebra method)": [[12, "sage.combinat.blob_algebra.BlobAlgebra.product_on_basis"]], "sage.combinat.blob_algebra": [[12, "module-sage.combinat.blob_algebra"]], "temperley_lieb_diagram() (sage.combinat.blob_algebra.blobdiagram method)": [[12, "sage.combinat.blob_algebra.BlobDiagram.temperley_lieb_diagram"]], "cartesianproduct_iters (class in sage.combinat.cartesian_product)": [[13, "sage.combinat.cartesian_product.CartesianProduct_iters"]], "cardinality() (sage.combinat.cartesian_product.cartesianproduct_iters method)": [[13, "sage.combinat.cartesian_product.CartesianProduct_iters.cardinality"]], "is_finite() (sage.combinat.cartesian_product.cartesianproduct_iters method)": [[13, "sage.combinat.cartesian_product.CartesianProduct_iters.is_finite"]], "list() (sage.combinat.cartesian_product.cartesianproduct_iters method)": [[13, "sage.combinat.cartesian_product.CartesianProduct_iters.list"]], "random_element() (sage.combinat.cartesian_product.cartesianproduct_iters method)": [[13, "sage.combinat.cartesian_product.CartesianProduct_iters.random_element"]], "sage.combinat.cartesian_product": [[13, "module-sage.combinat.cartesian_product"]], "unrank() (sage.combinat.cartesian_product.cartesianproduct_iters method)": [[13, "sage.combinat.cartesian_product.CartesianProduct_iters.unrank"]], "sage.combinat.catalog_partitions": [[14, "module-sage.combinat.catalog_partitions"]], "sage.combinat.chas.all": [[15, "module-sage.combinat.chas.all"]], "f (sage.combinat.chas.fsym.freesymmetricfunctions_dual attribute)": [[16, "sage.combinat.chas.fsym.FreeSymmetricFunctions_Dual.F"]], "fsymbases (class in sage.combinat.chas.fsym)": [[16, "sage.combinat.chas.fsym.FSymBases"]], "fsymbases.elementmethods (class in sage.combinat.chas.fsym)": [[16, "sage.combinat.chas.fsym.FSymBases.ElementMethods"]], "fsymbases.parentmethods (class in sage.combinat.chas.fsym)": [[16, "sage.combinat.chas.fsym.FSymBases.ParentMethods"]], "fsymbasis_abstract (class in sage.combinat.chas.fsym)": [[16, "sage.combinat.chas.fsym.FSymBasis_abstract"]], "freesymmetricfunctions (class in sage.combinat.chas.fsym)": [[16, "sage.combinat.chas.fsym.FreeSymmetricFunctions"]], "freesymmetricfunctions.fundamental (class in sage.combinat.chas.fsym)": [[16, "sage.combinat.chas.fsym.FreeSymmetricFunctions.Fundamental"]], "freesymmetricfunctions.fundamental.element (class in sage.combinat.chas.fsym)": [[16, "sage.combinat.chas.fsym.FreeSymmetricFunctions.Fundamental.Element"]], "freesymmetricfunctions_dual (class in sage.combinat.chas.fsym)": [[16, "sage.combinat.chas.fsym.FreeSymmetricFunctions_Dual"]], "freesymmetricfunctions_dual.fundamentaldual (class in sage.combinat.chas.fsym)": [[16, "sage.combinat.chas.fsym.FreeSymmetricFunctions_Dual.FundamentalDual"]], "freesymmetricfunctions_dual.fundamentaldual.element (class in sage.combinat.chas.fsym)": [[16, "sage.combinat.chas.fsym.FreeSymmetricFunctions_Dual.FundamentalDual.Element"]], "g (sage.combinat.chas.fsym.freesymmetricfunctions attribute)": [[16, "sage.combinat.chas.fsym.FreeSymmetricFunctions.G"]], "a_realization() (sage.combinat.chas.fsym.freesymmetricfunctions method)": [[16, "sage.combinat.chas.fsym.FreeSymmetricFunctions.a_realization"]], "a_realization() (sage.combinat.chas.fsym.freesymmetricfunctions_dual method)": [[16, "sage.combinat.chas.fsym.FreeSymmetricFunctions_Dual.a_realization"]], "ascent_set() (in module sage.combinat.chas.fsym)": [[16, "sage.combinat.chas.fsym.ascent_set"]], "basis() (sage.combinat.chas.fsym.fsymbases.parentmethods method)": [[16, "sage.combinat.chas.fsym.FSymBases.ParentMethods.basis"]], "coproduct_on_basis() (sage.combinat.chas.fsym.freesymmetricfunctions.fundamental method)": [[16, "sage.combinat.chas.fsym.FreeSymmetricFunctions.Fundamental.coproduct_on_basis"]], "coproduct_on_basis() (sage.combinat.chas.fsym.freesymmetricfunctions_dual.fundamentaldual method)": [[16, "sage.combinat.chas.fsym.FreeSymmetricFunctions_Dual.FundamentalDual.coproduct_on_basis"]], "degree_on_basis() (sage.combinat.chas.fsym.fsymbases.parentmethods method)": [[16, "sage.combinat.chas.fsym.FSymBases.ParentMethods.degree_on_basis"]], "descent_composition() (in module sage.combinat.chas.fsym)": [[16, "sage.combinat.chas.fsym.descent_composition"]], "descent_set() (in module sage.combinat.chas.fsym)": [[16, "sage.combinat.chas.fsym.descent_set"]], "dual() (sage.combinat.chas.fsym.freesymmetricfunctions method)": [[16, "sage.combinat.chas.fsym.FreeSymmetricFunctions.dual"]], "dual() (sage.combinat.chas.fsym.freesymmetricfunctions_dual method)": [[16, "sage.combinat.chas.fsym.FreeSymmetricFunctions_Dual.dual"]], "dual_basis() (sage.combinat.chas.fsym.freesymmetricfunctions.fundamental method)": [[16, "sage.combinat.chas.fsym.FreeSymmetricFunctions.Fundamental.dual_basis"]], "dual_basis() (sage.combinat.chas.fsym.freesymmetricfunctions_dual.fundamentaldual method)": [[16, "sage.combinat.chas.fsym.FreeSymmetricFunctions_Dual.FundamentalDual.dual_basis"]], "duality_pairing() (sage.combinat.chas.fsym.fsymbases.elementmethods method)": [[16, "sage.combinat.chas.fsym.FSymBases.ElementMethods.duality_pairing"]], "duality_pairing() (sage.combinat.chas.fsym.fsymbases.parentmethods method)": [[16, "sage.combinat.chas.fsym.FSymBases.ParentMethods.duality_pairing"]], "duality_pairing_matrix() (sage.combinat.chas.fsym.fsymbases.parentmethods method)": [[16, "sage.combinat.chas.fsym.FSymBases.ParentMethods.duality_pairing_matrix"]], "one_basis() (sage.combinat.chas.fsym.fsymbases.parentmethods method)": [[16, "sage.combinat.chas.fsym.FSymBases.ParentMethods.one_basis"]], "product_on_basis() (sage.combinat.chas.fsym.freesymmetricfunctions.fundamental method)": [[16, "sage.combinat.chas.fsym.FreeSymmetricFunctions.Fundamental.product_on_basis"]], "product_on_basis() (sage.combinat.chas.fsym.freesymmetricfunctions_dual.fundamentaldual method)": [[16, "sage.combinat.chas.fsym.FreeSymmetricFunctions_Dual.FundamentalDual.product_on_basis"]], "sage.combinat.chas.fsym": [[16, "module-sage.combinat.chas.fsym"]], "some_elements() (sage.combinat.chas.fsym.fsymbasis_abstract method)": [[16, "sage.combinat.chas.fsym.FSymBasis_abstract.some_elements"]], "standardize() (in module sage.combinat.chas.fsym)": [[16, "sage.combinat.chas.fsym.standardize"]], "super_categories() (sage.combinat.chas.fsym.fsymbases method)": [[16, "sage.combinat.chas.fsym.FSymBases.super_categories"]], "to_fqsym() (sage.combinat.chas.fsym.freesymmetricfunctions.fundamental.element method)": [[16, "sage.combinat.chas.fsym.FreeSymmetricFunctions.Fundamental.Element.to_fqsym"]], "to_quasisymmetric_function() (sage.combinat.chas.fsym.freesymmetricfunctions_dual.fundamentaldual.element method)": [[16, "sage.combinat.chas.fsym.FreeSymmetricFunctions_Dual.FundamentalDual.Element.to_quasisymmetric_function"]], "to_symmetric_function() (sage.combinat.chas.fsym.freesymmetricfunctions.fundamental.element method)": [[16, "sage.combinat.chas.fsym.FreeSymmetricFunctions.Fundamental.Element.to_symmetric_function"]], "c (sage.combinat.chas.wqsym.wordquasisymmetricfunctions attribute)": [[17, "sage.combinat.chas.wqsym.WordQuasiSymmetricFunctions.C"]], "m (sage.combinat.chas.wqsym.wordquasisymmetricfunctions attribute)": [[17, "sage.combinat.chas.wqsym.WordQuasiSymmetricFunctions.M"]], "phi (sage.combinat.chas.wqsym.wordquasisymmetricfunctions attribute)": [[17, "sage.combinat.chas.wqsym.WordQuasiSymmetricFunctions.Phi"]], "q (sage.combinat.chas.wqsym.wordquasisymmetricfunctions attribute)": [[17, "sage.combinat.chas.wqsym.WordQuasiSymmetricFunctions.Q"]], "wqsymbases (class in sage.combinat.chas.wqsym)": [[17, "sage.combinat.chas.wqsym.WQSymBases"]], "wqsymbases.elementmethods (class in sage.combinat.chas.wqsym)": [[17, "sage.combinat.chas.wqsym.WQSymBases.ElementMethods"]], "wqsymbases.parentmethods (class in sage.combinat.chas.wqsym)": [[17, "sage.combinat.chas.wqsym.WQSymBases.ParentMethods"]], "wqsymbasis_abstract (class in sage.combinat.chas.wqsym)": [[17, "sage.combinat.chas.wqsym.WQSymBasis_abstract"]], "wordquasisymmetricfunctions (class in sage.combinat.chas.wqsym)": [[17, "sage.combinat.chas.wqsym.WordQuasiSymmetricFunctions"]], "wordquasisymmetricfunctions.characteristic (class in sage.combinat.chas.wqsym)": [[17, "sage.combinat.chas.wqsym.WordQuasiSymmetricFunctions.Characteristic"]], "wordquasisymmetricfunctions.characteristic.element (class in sage.combinat.chas.wqsym)": [[17, "sage.combinat.chas.wqsym.WordQuasiSymmetricFunctions.Characteristic.Element"]], "wordquasisymmetricfunctions.cone (class in sage.combinat.chas.wqsym)": [[17, "sage.combinat.chas.wqsym.WordQuasiSymmetricFunctions.Cone"]], "wordquasisymmetricfunctions.monomial (class in sage.combinat.chas.wqsym)": [[17, "sage.combinat.chas.wqsym.WordQuasiSymmetricFunctions.Monomial"]], "wordquasisymmetricfunctions.stronglycoarser (class in sage.combinat.chas.wqsym)": [[17, "sage.combinat.chas.wqsym.WordQuasiSymmetricFunctions.StronglyCoarser"]], "wordquasisymmetricfunctions.stronglycoarser.element (class in sage.combinat.chas.wqsym)": [[17, "sage.combinat.chas.wqsym.WordQuasiSymmetricFunctions.StronglyCoarser.Element"]], "wordquasisymmetricfunctions.stronglyfiner (class in sage.combinat.chas.wqsym)": [[17, "sage.combinat.chas.wqsym.WordQuasiSymmetricFunctions.StronglyFiner"]], "wordquasisymmetricfunctions.stronglyfiner.element (class in sage.combinat.chas.wqsym)": [[17, "sage.combinat.chas.wqsym.WordQuasiSymmetricFunctions.StronglyFiner.Element"]], "x (sage.combinat.chas.wqsym.wordquasisymmetricfunctions attribute)": [[17, "sage.combinat.chas.wqsym.WordQuasiSymmetricFunctions.X"]], "a_realization() (sage.combinat.chas.wqsym.wordquasisymmetricfunctions method)": [[17, "sage.combinat.chas.wqsym.WordQuasiSymmetricFunctions.a_realization"]], "algebraic_complement() (sage.combinat.chas.wqsym.wqsymbases.elementmethods method)": [[17, "sage.combinat.chas.wqsym.WQSymBases.ElementMethods.algebraic_complement"]], "algebraic_complement() (sage.combinat.chas.wqsym.wordquasisymmetricfunctions.characteristic.element method)": [[17, "sage.combinat.chas.wqsym.WordQuasiSymmetricFunctions.Characteristic.Element.algebraic_complement"]], "algebraic_complement() (sage.combinat.chas.wqsym.wordquasisymmetricfunctions.stronglycoarser.element method)": [[17, "sage.combinat.chas.wqsym.WordQuasiSymmetricFunctions.StronglyCoarser.Element.algebraic_complement"]], "algebraic_complement() (sage.combinat.chas.wqsym.wordquasisymmetricfunctions.stronglyfiner.element method)": [[17, "sage.combinat.chas.wqsym.WordQuasiSymmetricFunctions.StronglyFiner.Element.algebraic_complement"]], "an_element() (sage.combinat.chas.wqsym.wqsymbasis_abstract method)": [[17, "sage.combinat.chas.wqsym.WQSymBasis_abstract.an_element"]], "coalgebraic_complement() (sage.combinat.chas.wqsym.wqsymbases.elementmethods method)": [[17, "sage.combinat.chas.wqsym.WQSymBases.ElementMethods.coalgebraic_complement"]], "coalgebraic_complement() (sage.combinat.chas.wqsym.wordquasisymmetricfunctions.characteristic.element method)": [[17, "sage.combinat.chas.wqsym.WordQuasiSymmetricFunctions.Characteristic.Element.coalgebraic_complement"]], "coalgebraic_complement() (sage.combinat.chas.wqsym.wordquasisymmetricfunctions.stronglycoarser.element method)": [[17, "sage.combinat.chas.wqsym.WordQuasiSymmetricFunctions.StronglyCoarser.Element.coalgebraic_complement"]], "coalgebraic_complement() (sage.combinat.chas.wqsym.wordquasisymmetricfunctions.stronglyfiner.element method)": [[17, "sage.combinat.chas.wqsym.WordQuasiSymmetricFunctions.StronglyFiner.Element.coalgebraic_complement"]], "coproduct_on_basis() (sage.combinat.chas.wqsym.wordquasisymmetricfunctions.monomial method)": [[17, "sage.combinat.chas.wqsym.WordQuasiSymmetricFunctions.Monomial.coproduct_on_basis"]], "coproduct_on_basis() (sage.combinat.chas.wqsym.wordquasisymmetricfunctions.stronglycoarser method)": [[17, "sage.combinat.chas.wqsym.WordQuasiSymmetricFunctions.StronglyCoarser.coproduct_on_basis"]], "coproduct_on_basis() (sage.combinat.chas.wqsym.wordquasisymmetricfunctions.stronglyfiner method)": [[17, "sage.combinat.chas.wqsym.WordQuasiSymmetricFunctions.StronglyFiner.coproduct_on_basis"]], "degree_on_basis() (sage.combinat.chas.wqsym.wqsymbases.parentmethods method)": [[17, "sage.combinat.chas.wqsym.WQSymBases.ParentMethods.degree_on_basis"]], "is_commutative() (sage.combinat.chas.wqsym.wqsymbases.parentmethods method)": [[17, "sage.combinat.chas.wqsym.WQSymBases.ParentMethods.is_commutative"]], "is_field() (sage.combinat.chas.wqsym.wqsymbases.parentmethods method)": [[17, "sage.combinat.chas.wqsym.WQSymBases.ParentMethods.is_field"]], "one_basis() (sage.combinat.chas.wqsym.wqsymbases.parentmethods method)": [[17, "sage.combinat.chas.wqsym.WQSymBases.ParentMethods.one_basis"]], "options (sage.combinat.chas.wqsym.wqsymbasis_abstract attribute)": [[17, "sage.combinat.chas.wqsym.WQSymBasis_abstract.options"]], "options (sage.combinat.chas.wqsym.wordquasisymmetricfunctions attribute)": [[17, "sage.combinat.chas.wqsym.WordQuasiSymmetricFunctions.options"]], "product_on_basis() (sage.combinat.chas.wqsym.wordquasisymmetricfunctions.monomial method)": [[17, "sage.combinat.chas.wqsym.WordQuasiSymmetricFunctions.Monomial.product_on_basis"]], "product_on_basis() (sage.combinat.chas.wqsym.wordquasisymmetricfunctions.stronglycoarser method)": [[17, "sage.combinat.chas.wqsym.WordQuasiSymmetricFunctions.StronglyCoarser.product_on_basis"]], "product_on_basis() (sage.combinat.chas.wqsym.wordquasisymmetricfunctions.stronglyfiner method)": [[17, "sage.combinat.chas.wqsym.WordQuasiSymmetricFunctions.StronglyFiner.product_on_basis"]], "sage.combinat.chas.wqsym": [[17, "module-sage.combinat.chas.wqsym"]], "some_elements() (sage.combinat.chas.wqsym.wqsymbasis_abstract method)": [[17, "sage.combinat.chas.wqsym.WQSymBasis_abstract.some_elements"]], "some_elements() (sage.combinat.chas.wqsym.wordquasisymmetricfunctions.cone method)": [[17, "sage.combinat.chas.wqsym.WordQuasiSymmetricFunctions.Cone.some_elements"]], "some_elements() (sage.combinat.chas.wqsym.wordquasisymmetricfunctions.stronglycoarser method)": [[17, "sage.combinat.chas.wqsym.WordQuasiSymmetricFunctions.StronglyCoarser.some_elements"]], "some_elements() (sage.combinat.chas.wqsym.wordquasisymmetricfunctions.stronglyfiner method)": [[17, "sage.combinat.chas.wqsym.WordQuasiSymmetricFunctions.StronglyFiner.some_elements"]], "star_involution() (sage.combinat.chas.wqsym.wqsymbases.elementmethods method)": [[17, "sage.combinat.chas.wqsym.WQSymBases.ElementMethods.star_involution"]], "star_involution() (sage.combinat.chas.wqsym.wordquasisymmetricfunctions.characteristic.element method)": [[17, "sage.combinat.chas.wqsym.WordQuasiSymmetricFunctions.Characteristic.Element.star_involution"]], "star_involution() (sage.combinat.chas.wqsym.wordquasisymmetricfunctions.stronglycoarser.element method)": [[17, "sage.combinat.chas.wqsym.WordQuasiSymmetricFunctions.StronglyCoarser.Element.star_involution"]], "star_involution() (sage.combinat.chas.wqsym.wordquasisymmetricfunctions.stronglyfiner.element method)": [[17, "sage.combinat.chas.wqsym.WordQuasiSymmetricFunctions.StronglyFiner.Element.star_involution"]], "super_categories() (sage.combinat.chas.wqsym.wqsymbases method)": [[17, "sage.combinat.chas.wqsym.WQSymBases.super_categories"]], "to_quasisymmetric_function() (sage.combinat.chas.wqsym.wqsymbases.elementmethods method)": [[17, "sage.combinat.chas.wqsym.WQSymBases.ElementMethods.to_quasisymmetric_function"]], "sage.combinat.cluster_algebra_quiver.all": [[18, "module-sage.combinat.cluster_algebra_quiver.all"]], "clusterseed (class in sage.combinat.cluster_algebra_quiver.cluster_seed)": [[19, "sage.combinat.cluster_algebra_quiver.cluster_seed.ClusterSeed"]], "clustervariable (class in sage.combinat.cluster_algebra_quiver.cluster_seed)": [[19, "sage.combinat.cluster_algebra_quiver.cluster_seed.ClusterVariable"]], "llm_gen_set() (sage.combinat.cluster_algebra_quiver.cluster_seed.clusterseed method)": [[19, "sage.combinat.cluster_algebra_quiver.cluster_seed.ClusterSeed.LLM_gen_set"]], "pathsubset() (in module sage.combinat.cluster_algebra_quiver.cluster_seed)": [[19, "sage.combinat.cluster_algebra_quiver.cluster_seed.PathSubset"]], "settopath() (in module sage.combinat.cluster_algebra_quiver.cluster_seed)": [[19, "sage.combinat.cluster_algebra_quiver.cluster_seed.SetToPath"]], "almost_positive_root() (sage.combinat.cluster_algebra_quiver.cluster_seed.clustervariable method)": [[19, "sage.combinat.cluster_algebra_quiver.cluster_seed.ClusterVariable.almost_positive_root"]], "b_matrix() (sage.combinat.cluster_algebra_quiver.cluster_seed.clusterseed method)": [[19, "sage.combinat.cluster_algebra_quiver.cluster_seed.ClusterSeed.b_matrix"]], "b_matrix_class() (sage.combinat.cluster_algebra_quiver.cluster_seed.clusterseed method)": [[19, "sage.combinat.cluster_algebra_quiver.cluster_seed.ClusterSeed.b_matrix_class"]], "b_matrix_class_iter() (sage.combinat.cluster_algebra_quiver.cluster_seed.clusterseed method)": [[19, "sage.combinat.cluster_algebra_quiver.cluster_seed.ClusterSeed.b_matrix_class_iter"]], "c_matrix() (sage.combinat.cluster_algebra_quiver.cluster_seed.clusterseed method)": [[19, "sage.combinat.cluster_algebra_quiver.cluster_seed.ClusterSeed.c_matrix"]], "c_vector() (sage.combinat.cluster_algebra_quiver.cluster_seed.clusterseed method)": [[19, "sage.combinat.cluster_algebra_quiver.cluster_seed.ClusterSeed.c_vector"]], "cluster() (sage.combinat.cluster_algebra_quiver.cluster_seed.clusterseed method)": [[19, "sage.combinat.cluster_algebra_quiver.cluster_seed.ClusterSeed.cluster"]], "cluster_class() (sage.combinat.cluster_algebra_quiver.cluster_seed.clusterseed method)": [[19, "sage.combinat.cluster_algebra_quiver.cluster_seed.ClusterSeed.cluster_class"]], "cluster_class_iter() (sage.combinat.cluster_algebra_quiver.cluster_seed.clusterseed method)": [[19, "sage.combinat.cluster_algebra_quiver.cluster_seed.ClusterSeed.cluster_class_iter"]], "cluster_index() (sage.combinat.cluster_algebra_quiver.cluster_seed.clusterseed method)": [[19, "sage.combinat.cluster_algebra_quiver.cluster_seed.ClusterSeed.cluster_index"]], "cluster_variable() (sage.combinat.cluster_algebra_quiver.cluster_seed.clusterseed method)": [[19, "sage.combinat.cluster_algebra_quiver.cluster_seed.ClusterSeed.cluster_variable"]], "coeff_recurs() (in module sage.combinat.cluster_algebra_quiver.cluster_seed)": [[19, "sage.combinat.cluster_algebra_quiver.cluster_seed.coeff_recurs"]], "coefficient() (sage.combinat.cluster_algebra_quiver.cluster_seed.clusterseed method)": [[19, "sage.combinat.cluster_algebra_quiver.cluster_seed.ClusterSeed.coefficient"]], "coefficients() (sage.combinat.cluster_algebra_quiver.cluster_seed.clusterseed method)": [[19, "sage.combinat.cluster_algebra_quiver.cluster_seed.ClusterSeed.coefficients"]], "d_matrix() (sage.combinat.cluster_algebra_quiver.cluster_seed.clusterseed method)": [[19, "sage.combinat.cluster_algebra_quiver.cluster_seed.ClusterSeed.d_matrix"]], "d_vector() (sage.combinat.cluster_algebra_quiver.cluster_seed.clusterseed method)": [[19, "sage.combinat.cluster_algebra_quiver.cluster_seed.ClusterSeed.d_vector"]], "exchangeable_part() (sage.combinat.cluster_algebra_quiver.cluster_seed.clusterseed method)": [[19, "sage.combinat.cluster_algebra_quiver.cluster_seed.ClusterSeed.exchangeable_part"]], "f_polynomial() (sage.combinat.cluster_algebra_quiver.cluster_seed.clusterseed method)": [[19, "sage.combinat.cluster_algebra_quiver.cluster_seed.ClusterSeed.f_polynomial"]], "f_polynomials() (sage.combinat.cluster_algebra_quiver.cluster_seed.clusterseed method)": [[19, "sage.combinat.cluster_algebra_quiver.cluster_seed.ClusterSeed.f_polynomials"]], "find_upper_bound() (sage.combinat.cluster_algebra_quiver.cluster_seed.clusterseed method)": [[19, "sage.combinat.cluster_algebra_quiver.cluster_seed.ClusterSeed.find_upper_bound"]], "first_green_vertex() (sage.combinat.cluster_algebra_quiver.cluster_seed.clusterseed method)": [[19, "sage.combinat.cluster_algebra_quiver.cluster_seed.ClusterSeed.first_green_vertex"]], "first_red_vertex() (sage.combinat.cluster_algebra_quiver.cluster_seed.clusterseed method)": [[19, "sage.combinat.cluster_algebra_quiver.cluster_seed.ClusterSeed.first_red_vertex"]], "first_urban_renewal() (sage.combinat.cluster_algebra_quiver.cluster_seed.clusterseed method)": [[19, "sage.combinat.cluster_algebra_quiver.cluster_seed.ClusterSeed.first_urban_renewal"]], "free_vertices() (sage.combinat.cluster_algebra_quiver.cluster_seed.clusterseed method)": [[19, "sage.combinat.cluster_algebra_quiver.cluster_seed.ClusterSeed.free_vertices"]], "frozen_vertices() (sage.combinat.cluster_algebra_quiver.cluster_seed.clusterseed method)": [[19, "sage.combinat.cluster_algebra_quiver.cluster_seed.ClusterSeed.frozen_vertices"]], "g_matrix() (sage.combinat.cluster_algebra_quiver.cluster_seed.clusterseed method)": [[19, "sage.combinat.cluster_algebra_quiver.cluster_seed.ClusterSeed.g_matrix"]], "g_vector() (sage.combinat.cluster_algebra_quiver.cluster_seed.clusterseed method)": [[19, "sage.combinat.cluster_algebra_quiver.cluster_seed.ClusterSeed.g_vector"]], "get_green_vertices() (in module sage.combinat.cluster_algebra_quiver.cluster_seed)": [[19, "sage.combinat.cluster_algebra_quiver.cluster_seed.get_green_vertices"]], "get_red_vertices() (in module sage.combinat.cluster_algebra_quiver.cluster_seed)": [[19, "sage.combinat.cluster_algebra_quiver.cluster_seed.get_red_vertices"]], "get_upper_cluster_algebra_element() (sage.combinat.cluster_algebra_quiver.cluster_seed.clusterseed method)": [[19, "sage.combinat.cluster_algebra_quiver.cluster_seed.ClusterSeed.get_upper_cluster_algebra_element"]], "greedy() (sage.combinat.cluster_algebra_quiver.cluster_seed.clusterseed method)": [[19, "sage.combinat.cluster_algebra_quiver.cluster_seed.ClusterSeed.greedy"]], "green_vertices() (sage.combinat.cluster_algebra_quiver.cluster_seed.clusterseed method)": [[19, "sage.combinat.cluster_algebra_quiver.cluster_seed.ClusterSeed.green_vertices"]], "ground_field() (sage.combinat.cluster_algebra_quiver.cluster_seed.clusterseed method)": [[19, "sage.combinat.cluster_algebra_quiver.cluster_seed.ClusterSeed.ground_field"]], "highest_degree_denominator() (sage.combinat.cluster_algebra_quiver.cluster_seed.clusterseed method)": [[19, "sage.combinat.cluster_algebra_quiver.cluster_seed.ClusterSeed.highest_degree_denominator"]], "interact() (sage.combinat.cluster_algebra_quiver.cluster_seed.clusterseed method)": [[19, "sage.combinat.cluster_algebra_quiver.cluster_seed.ClusterSeed.interact"]], "is_leelizel_allowable() (in module sage.combinat.cluster_algebra_quiver.cluster_seed)": [[19, "sage.combinat.cluster_algebra_quiver.cluster_seed.is_LeeLiZel_allowable"]], "is_acyclic() (sage.combinat.cluster_algebra_quiver.cluster_seed.clusterseed method)": [[19, "sage.combinat.cluster_algebra_quiver.cluster_seed.ClusterSeed.is_acyclic"]], "is_bipartite() (sage.combinat.cluster_algebra_quiver.cluster_seed.clusterseed method)": [[19, "sage.combinat.cluster_algebra_quiver.cluster_seed.ClusterSeed.is_bipartite"]], "is_finite() (sage.combinat.cluster_algebra_quiver.cluster_seed.clusterseed method)": [[19, "sage.combinat.cluster_algebra_quiver.cluster_seed.ClusterSeed.is_finite"]], "is_mutation_finite() (sage.combinat.cluster_algebra_quiver.cluster_seed.clusterseed method)": [[19, "sage.combinat.cluster_algebra_quiver.cluster_seed.ClusterSeed.is_mutation_finite"]], "m() (sage.combinat.cluster_algebra_quiver.cluster_seed.clusterseed method)": [[19, "sage.combinat.cluster_algebra_quiver.cluster_seed.ClusterSeed.m"]], "most_decreased_denominator_after_mutation() (sage.combinat.cluster_algebra_quiver.cluster_seed.clusterseed method)": [[19, "sage.combinat.cluster_algebra_quiver.cluster_seed.ClusterSeed.most_decreased_denominator_after_mutation"]], "most_decreased_edge_after_mutation() (sage.combinat.cluster_algebra_quiver.cluster_seed.clusterseed method)": [[19, "sage.combinat.cluster_algebra_quiver.cluster_seed.ClusterSeed.most_decreased_edge_after_mutation"]], "mutate() (sage.combinat.cluster_algebra_quiver.cluster_seed.clusterseed method)": [[19, "sage.combinat.cluster_algebra_quiver.cluster_seed.ClusterSeed.mutate"]], "mutation_analysis() (sage.combinat.cluster_algebra_quiver.cluster_seed.clusterseed method)": [[19, "sage.combinat.cluster_algebra_quiver.cluster_seed.ClusterSeed.mutation_analysis"]], "mutation_class() (sage.combinat.cluster_algebra_quiver.cluster_seed.clusterseed method)": [[19, "sage.combinat.cluster_algebra_quiver.cluster_seed.ClusterSeed.mutation_class"]], "mutation_class_iter() (sage.combinat.cluster_algebra_quiver.cluster_seed.clusterseed method)": [[19, "sage.combinat.cluster_algebra_quiver.cluster_seed.ClusterSeed.mutation_class_iter"]], "mutation_sequence() (sage.combinat.cluster_algebra_quiver.cluster_seed.clusterseed method)": [[19, "sage.combinat.cluster_algebra_quiver.cluster_seed.ClusterSeed.mutation_sequence"]], "mutation_type() (sage.combinat.cluster_algebra_quiver.cluster_seed.clusterseed method)": [[19, "sage.combinat.cluster_algebra_quiver.cluster_seed.ClusterSeed.mutation_type"]], "mutations() (sage.combinat.cluster_algebra_quiver.cluster_seed.clusterseed method)": [[19, "sage.combinat.cluster_algebra_quiver.cluster_seed.ClusterSeed.mutations"]], "n() (sage.combinat.cluster_algebra_quiver.cluster_seed.clusterseed method)": [[19, "sage.combinat.cluster_algebra_quiver.cluster_seed.ClusterSeed.n"]], "oriented_exchange_graph() (sage.combinat.cluster_algebra_quiver.cluster_seed.clusterseed method)": [[19, "sage.combinat.cluster_algebra_quiver.cluster_seed.ClusterSeed.oriented_exchange_graph"]], "plot() (sage.combinat.cluster_algebra_quiver.cluster_seed.clusterseed method)": [[19, "sage.combinat.cluster_algebra_quiver.cluster_seed.ClusterSeed.plot"]], "principal_extension() (sage.combinat.cluster_algebra_quiver.cluster_seed.clusterseed method)": [[19, "sage.combinat.cluster_algebra_quiver.cluster_seed.ClusterSeed.principal_extension"]], "quiver() (sage.combinat.cluster_algebra_quiver.cluster_seed.clusterseed method)": [[19, "sage.combinat.cluster_algebra_quiver.cluster_seed.ClusterSeed.quiver"]], "red_vertices() (sage.combinat.cluster_algebra_quiver.cluster_seed.clusterseed method)": [[19, "sage.combinat.cluster_algebra_quiver.cluster_seed.ClusterSeed.red_vertices"]], "reorient() (sage.combinat.cluster_algebra_quiver.cluster_seed.clusterseed method)": [[19, "sage.combinat.cluster_algebra_quiver.cluster_seed.ClusterSeed.reorient"]], "reset_cluster() (sage.combinat.cluster_algebra_quiver.cluster_seed.clusterseed method)": [[19, "sage.combinat.cluster_algebra_quiver.cluster_seed.ClusterSeed.reset_cluster"]], "reset_coefficients() (sage.combinat.cluster_algebra_quiver.cluster_seed.clusterseed method)": [[19, "sage.combinat.cluster_algebra_quiver.cluster_seed.ClusterSeed.reset_coefficients"]], "sage.combinat.cluster_algebra_quiver.cluster_seed": [[19, "module-sage.combinat.cluster_algebra_quiver.cluster_seed"]], "save_image() (sage.combinat.cluster_algebra_quiver.cluster_seed.clusterseed method)": [[19, "sage.combinat.cluster_algebra_quiver.cluster_seed.ClusterSeed.save_image"]], "set_c_matrix() (sage.combinat.cluster_algebra_quiver.cluster_seed.clusterseed method)": [[19, "sage.combinat.cluster_algebra_quiver.cluster_seed.ClusterSeed.set_c_matrix"]], "set_cluster() (sage.combinat.cluster_algebra_quiver.cluster_seed.clusterseed method)": [[19, "sage.combinat.cluster_algebra_quiver.cluster_seed.ClusterSeed.set_cluster"]], "show() (sage.combinat.cluster_algebra_quiver.cluster_seed.clusterseed method)": [[19, "sage.combinat.cluster_algebra_quiver.cluster_seed.ClusterSeed.show"]], "smallest_c_vector() (sage.combinat.cluster_algebra_quiver.cluster_seed.clusterseed method)": [[19, "sage.combinat.cluster_algebra_quiver.cluster_seed.ClusterSeed.smallest_c_vector"]], "track_mutations() (sage.combinat.cluster_algebra_quiver.cluster_seed.clusterseed method)": [[19, "sage.combinat.cluster_algebra_quiver.cluster_seed.ClusterSeed.track_mutations"]], "universal_extension() (sage.combinat.cluster_algebra_quiver.cluster_seed.clusterseed method)": [[19, "sage.combinat.cluster_algebra_quiver.cluster_seed.ClusterSeed.universal_extension"]], "urban_renewals() (sage.combinat.cluster_algebra_quiver.cluster_seed.clusterseed method)": [[19, "sage.combinat.cluster_algebra_quiver.cluster_seed.ClusterSeed.urban_renewals"]], "use_c_vectors() (sage.combinat.cluster_algebra_quiver.cluster_seed.clusterseed method)": [[19, "sage.combinat.cluster_algebra_quiver.cluster_seed.ClusterSeed.use_c_vectors"]], "use_d_vectors() (sage.combinat.cluster_algebra_quiver.cluster_seed.clusterseed method)": [[19, "sage.combinat.cluster_algebra_quiver.cluster_seed.ClusterSeed.use_d_vectors"]], "use_fpolys() (sage.combinat.cluster_algebra_quiver.cluster_seed.clusterseed method)": [[19, "sage.combinat.cluster_algebra_quiver.cluster_seed.ClusterSeed.use_fpolys"]], "use_g_vectors() (sage.combinat.cluster_algebra_quiver.cluster_seed.clusterseed method)": [[19, "sage.combinat.cluster_algebra_quiver.cluster_seed.ClusterSeed.use_g_vectors"]], "variable_class() (sage.combinat.cluster_algebra_quiver.cluster_seed.clusterseed method)": [[19, "sage.combinat.cluster_algebra_quiver.cluster_seed.ClusterSeed.variable_class"]], "variable_class_iter() (sage.combinat.cluster_algebra_quiver.cluster_seed.clusterseed method)": [[19, "sage.combinat.cluster_algebra_quiver.cluster_seed.ClusterSeed.variable_class_iter"]], "x() (sage.combinat.cluster_algebra_quiver.cluster_seed.clusterseed method)": [[19, "sage.combinat.cluster_algebra_quiver.cluster_seed.ClusterSeed.x"]], "y() (sage.combinat.cluster_algebra_quiver.cluster_seed.clusterseed method)": [[19, "sage.combinat.cluster_algebra_quiver.cluster_seed.ClusterSeed.y"]], "sage.combinat.cluster_algebra_quiver.mutation_class": [[20, "module-sage.combinat.cluster_algebra_quiver.mutation_class"]], "is_mutation_finite() (in module sage.combinat.cluster_algebra_quiver.mutation_type)": [[21, "sage.combinat.cluster_algebra_quiver.mutation_type.is_mutation_finite"]], "load_data() (in module sage.combinat.cluster_algebra_quiver.mutation_type)": [[21, "sage.combinat.cluster_algebra_quiver.mutation_type.load_data"]], "sage.combinat.cluster_algebra_quiver.mutation_type": [[21, "module-sage.combinat.cluster_algebra_quiver.mutation_type"]], "clusterquiver (class in sage.combinat.cluster_algebra_quiver.quiver)": [[22, "sage.combinat.cluster_algebra_quiver.quiver.ClusterQuiver"]], "b_matrix() (sage.combinat.cluster_algebra_quiver.quiver.clusterquiver method)": [[22, "sage.combinat.cluster_algebra_quiver.quiver.ClusterQuiver.b_matrix"]], "canonical_label() (sage.combinat.cluster_algebra_quiver.quiver.clusterquiver method)": [[22, "sage.combinat.cluster_algebra_quiver.quiver.ClusterQuiver.canonical_label"]], "d_vector_fan() (sage.combinat.cluster_algebra_quiver.quiver.clusterquiver method)": [[22, "sage.combinat.cluster_algebra_quiver.quiver.ClusterQuiver.d_vector_fan"]], "digraph() (sage.combinat.cluster_algebra_quiver.quiver.clusterquiver method)": [[22, "sage.combinat.cluster_algebra_quiver.quiver.ClusterQuiver.digraph"]], "exchangeable_part() (sage.combinat.cluster_algebra_quiver.quiver.clusterquiver method)": [[22, "sage.combinat.cluster_algebra_quiver.quiver.ClusterQuiver.exchangeable_part"]], "first_sink() (sage.combinat.cluster_algebra_quiver.quiver.clusterquiver method)": [[22, "sage.combinat.cluster_algebra_quiver.quiver.ClusterQuiver.first_sink"]], "first_source() (sage.combinat.cluster_algebra_quiver.quiver.clusterquiver method)": [[22, "sage.combinat.cluster_algebra_quiver.quiver.ClusterQuiver.first_source"]], "free_vertices() (sage.combinat.cluster_algebra_quiver.quiver.clusterquiver method)": [[22, "sage.combinat.cluster_algebra_quiver.quiver.ClusterQuiver.free_vertices"]], "frozen_vertices() (sage.combinat.cluster_algebra_quiver.quiver.clusterquiver method)": [[22, "sage.combinat.cluster_algebra_quiver.quiver.ClusterQuiver.frozen_vertices"]], "g_vector_fan() (sage.combinat.cluster_algebra_quiver.quiver.clusterquiver method)": [[22, "sage.combinat.cluster_algebra_quiver.quiver.ClusterQuiver.g_vector_fan"]], "interact() (sage.combinat.cluster_algebra_quiver.quiver.clusterquiver method)": [[22, "sage.combinat.cluster_algebra_quiver.quiver.ClusterQuiver.interact"]], "is_acyclic() (sage.combinat.cluster_algebra_quiver.quiver.clusterquiver method)": [[22, "sage.combinat.cluster_algebra_quiver.quiver.ClusterQuiver.is_acyclic"]], "is_bipartite() (sage.combinat.cluster_algebra_quiver.quiver.clusterquiver method)": [[22, "sage.combinat.cluster_algebra_quiver.quiver.ClusterQuiver.is_bipartite"]], "is_finite() (sage.combinat.cluster_algebra_quiver.quiver.clusterquiver method)": [[22, "sage.combinat.cluster_algebra_quiver.quiver.ClusterQuiver.is_finite"]], "is_mutation_finite() (sage.combinat.cluster_algebra_quiver.quiver.clusterquiver method)": [[22, "sage.combinat.cluster_algebra_quiver.quiver.ClusterQuiver.is_mutation_finite"]], "m() (sage.combinat.cluster_algebra_quiver.quiver.clusterquiver method)": [[22, "sage.combinat.cluster_algebra_quiver.quiver.ClusterQuiver.m"]], "mutate() (sage.combinat.cluster_algebra_quiver.quiver.clusterquiver method)": [[22, "sage.combinat.cluster_algebra_quiver.quiver.ClusterQuiver.mutate"]], "mutation_class() (sage.combinat.cluster_algebra_quiver.quiver.clusterquiver method)": [[22, "sage.combinat.cluster_algebra_quiver.quiver.ClusterQuiver.mutation_class"]], "mutation_class_iter() (sage.combinat.cluster_algebra_quiver.quiver.clusterquiver method)": [[22, "sage.combinat.cluster_algebra_quiver.quiver.ClusterQuiver.mutation_class_iter"]], "mutation_sequence() (sage.combinat.cluster_algebra_quiver.quiver.clusterquiver method)": [[22, "sage.combinat.cluster_algebra_quiver.quiver.ClusterQuiver.mutation_sequence"]], "mutation_type() (sage.combinat.cluster_algebra_quiver.quiver.clusterquiver method)": [[22, "sage.combinat.cluster_algebra_quiver.quiver.ClusterQuiver.mutation_type"]], "n() (sage.combinat.cluster_algebra_quiver.quiver.clusterquiver method)": [[22, "sage.combinat.cluster_algebra_quiver.quiver.ClusterQuiver.n"]], "number_of_edges() (sage.combinat.cluster_algebra_quiver.quiver.clusterquiver method)": [[22, "sage.combinat.cluster_algebra_quiver.quiver.ClusterQuiver.number_of_edges"]], "plot() (sage.combinat.cluster_algebra_quiver.quiver.clusterquiver method)": [[22, "sage.combinat.cluster_algebra_quiver.quiver.ClusterQuiver.plot"]], "poincare_semistable() (sage.combinat.cluster_algebra_quiver.quiver.clusterquiver method)": [[22, "sage.combinat.cluster_algebra_quiver.quiver.ClusterQuiver.poincare_semistable"]], "principal_extension() (sage.combinat.cluster_algebra_quiver.quiver.clusterquiver method)": [[22, "sage.combinat.cluster_algebra_quiver.quiver.ClusterQuiver.principal_extension"]], "qmu_save() (sage.combinat.cluster_algebra_quiver.quiver.clusterquiver method)": [[22, "sage.combinat.cluster_algebra_quiver.quiver.ClusterQuiver.qmu_save"]], "relabel() (sage.combinat.cluster_algebra_quiver.quiver.clusterquiver method)": [[22, "sage.combinat.cluster_algebra_quiver.quiver.ClusterQuiver.relabel"]], "reorient() (sage.combinat.cluster_algebra_quiver.quiver.clusterquiver method)": [[22, "sage.combinat.cluster_algebra_quiver.quiver.ClusterQuiver.reorient"]], "sage.combinat.cluster_algebra_quiver.quiver": [[22, "module-sage.combinat.cluster_algebra_quiver.quiver"]], "save_image() (sage.combinat.cluster_algebra_quiver.quiver.clusterquiver method)": [[22, "sage.combinat.cluster_algebra_quiver.quiver.ClusterQuiver.save_image"]], "show() (sage.combinat.cluster_algebra_quiver.quiver.clusterquiver method)": [[22, "sage.combinat.cluster_algebra_quiver.quiver.ClusterQuiver.show"]], "sinks() (sage.combinat.cluster_algebra_quiver.quiver.clusterquiver method)": [[22, "sage.combinat.cluster_algebra_quiver.quiver.ClusterQuiver.sinks"]], "sources() (sage.combinat.cluster_algebra_quiver.quiver.clusterquiver method)": [[22, "sage.combinat.cluster_algebra_quiver.quiver.ClusterQuiver.sources"]], "quivermutationtype() (in module sage.combinat.cluster_algebra_quiver.quiver_mutation_type)": [[23, "sage.combinat.cluster_algebra_quiver.quiver_mutation_type.QuiverMutationType"]], "quivermutationtypefactory (class in sage.combinat.cluster_algebra_quiver.quiver_mutation_type)": [[23, "sage.combinat.cluster_algebra_quiver.quiver_mutation_type.QuiverMutationTypeFactory"]], "quivermutationtype_irreducible (class in sage.combinat.cluster_algebra_quiver.quiver_mutation_type)": [[23, "sage.combinat.cluster_algebra_quiver.quiver_mutation_type.QuiverMutationType_Irreducible"]], "quivermutationtype_reducible (class in sage.combinat.cluster_algebra_quiver.quiver_mutation_type)": [[23, "sage.combinat.cluster_algebra_quiver.quiver_mutation_type.QuiverMutationType_Reducible"]], "quivermutationtype_abstract (class in sage.combinat.cluster_algebra_quiver.quiver_mutation_type)": [[23, "sage.combinat.cluster_algebra_quiver.quiver_mutation_type.QuiverMutationType_abstract"]], "b_matrix() (sage.combinat.cluster_algebra_quiver.quiver_mutation_type.quivermutationtype_abstract method)": [[23, "sage.combinat.cluster_algebra_quiver.quiver_mutation_type.QuiverMutationType_abstract.b_matrix"]], "cartan_matrix() (sage.combinat.cluster_algebra_quiver.quiver_mutation_type.quivermutationtype_abstract method)": [[23, "sage.combinat.cluster_algebra_quiver.quiver_mutation_type.QuiverMutationType_abstract.cartan_matrix"]], "class_size() (sage.combinat.cluster_algebra_quiver.quiver_mutation_type.quivermutationtype_irreducible method)": [[23, "sage.combinat.cluster_algebra_quiver.quiver_mutation_type.QuiverMutationType_Irreducible.class_size"]], "class_size() (sage.combinat.cluster_algebra_quiver.quiver_mutation_type.quivermutationtype_reducible method)": [[23, "sage.combinat.cluster_algebra_quiver.quiver_mutation_type.QuiverMutationType_Reducible.class_size"]], "dual() (sage.combinat.cluster_algebra_quiver.quiver_mutation_type.quivermutationtype_irreducible method)": [[23, "sage.combinat.cluster_algebra_quiver.quiver_mutation_type.QuiverMutationType_Irreducible.dual"]], "dual() (sage.combinat.cluster_algebra_quiver.quiver_mutation_type.quivermutationtype_reducible method)": [[23, "sage.combinat.cluster_algebra_quiver.quiver_mutation_type.QuiverMutationType_Reducible.dual"]], "irreducible_components() (sage.combinat.cluster_algebra_quiver.quiver_mutation_type.quivermutationtype_irreducible method)": [[23, "sage.combinat.cluster_algebra_quiver.quiver_mutation_type.QuiverMutationType_Irreducible.irreducible_components"]], "irreducible_components() (sage.combinat.cluster_algebra_quiver.quiver_mutation_type.quivermutationtype_reducible method)": [[23, "sage.combinat.cluster_algebra_quiver.quiver_mutation_type.QuiverMutationType_Reducible.irreducible_components"]], "is_affine() (sage.combinat.cluster_algebra_quiver.quiver_mutation_type.quivermutationtype_abstract method)": [[23, "sage.combinat.cluster_algebra_quiver.quiver_mutation_type.QuiverMutationType_abstract.is_affine"]], "is_elliptic() (sage.combinat.cluster_algebra_quiver.quiver_mutation_type.quivermutationtype_abstract method)": [[23, "sage.combinat.cluster_algebra_quiver.quiver_mutation_type.QuiverMutationType_abstract.is_elliptic"]], "is_finite() (sage.combinat.cluster_algebra_quiver.quiver_mutation_type.quivermutationtype_abstract method)": [[23, "sage.combinat.cluster_algebra_quiver.quiver_mutation_type.QuiverMutationType_abstract.is_finite"]], "is_irreducible() (sage.combinat.cluster_algebra_quiver.quiver_mutation_type.quivermutationtype_abstract method)": [[23, "sage.combinat.cluster_algebra_quiver.quiver_mutation_type.QuiverMutationType_abstract.is_irreducible"]], "is_mutation_finite() (sage.combinat.cluster_algebra_quiver.quiver_mutation_type.quivermutationtype_abstract method)": [[23, "sage.combinat.cluster_algebra_quiver.quiver_mutation_type.QuiverMutationType_abstract.is_mutation_finite"]], "is_simply_laced() (sage.combinat.cluster_algebra_quiver.quiver_mutation_type.quivermutationtype_abstract method)": [[23, "sage.combinat.cluster_algebra_quiver.quiver_mutation_type.QuiverMutationType_abstract.is_simply_laced"]], "is_skew_symmetric() (sage.combinat.cluster_algebra_quiver.quiver_mutation_type.quivermutationtype_abstract method)": [[23, "sage.combinat.cluster_algebra_quiver.quiver_mutation_type.QuiverMutationType_abstract.is_skew_symmetric"]], "letter() (sage.combinat.cluster_algebra_quiver.quiver_mutation_type.quivermutationtype_abstract method)": [[23, "sage.combinat.cluster_algebra_quiver.quiver_mutation_type.QuiverMutationType_abstract.letter"]], "plot() (sage.combinat.cluster_algebra_quiver.quiver_mutation_type.quivermutationtype_abstract method)": [[23, "sage.combinat.cluster_algebra_quiver.quiver_mutation_type.QuiverMutationType_abstract.plot"]], "properties() (sage.combinat.cluster_algebra_quiver.quiver_mutation_type.quivermutationtype_abstract method)": [[23, "sage.combinat.cluster_algebra_quiver.quiver_mutation_type.QuiverMutationType_abstract.properties"]], "rank() (sage.combinat.cluster_algebra_quiver.quiver_mutation_type.quivermutationtype_abstract method)": [[23, "sage.combinat.cluster_algebra_quiver.quiver_mutation_type.QuiverMutationType_abstract.rank"]], "sage.combinat.cluster_algebra_quiver.quiver_mutation_type": [[23, "module-sage.combinat.cluster_algebra_quiver.quiver_mutation_type"]], "samples() (sage.combinat.cluster_algebra_quiver.quiver_mutation_type.quivermutationtypefactory method)": [[23, "sage.combinat.cluster_algebra_quiver.quiver_mutation_type.QuiverMutationTypeFactory.samples"]], "save_quiver_data() (in module sage.combinat.cluster_algebra_quiver.quiver_mutation_type)": [[23, "sage.combinat.cluster_algebra_quiver.quiver_mutation_type.save_quiver_data"]], "show() (sage.combinat.cluster_algebra_quiver.quiver_mutation_type.quivermutationtype_abstract method)": [[23, "sage.combinat.cluster_algebra_quiver.quiver_mutation_type.QuiverMutationType_abstract.show"]], "standard_quiver() (sage.combinat.cluster_algebra_quiver.quiver_mutation_type.quivermutationtype_abstract method)": [[23, "sage.combinat.cluster_algebra_quiver.quiver_mutation_type.QuiverMutationType_abstract.standard_quiver"]], "clustercomplex (class in sage.combinat.cluster_complex)": [[24, "sage.combinat.cluster_complex.ClusterComplex"]], "clustercomplexfacet (class in sage.combinat.cluster_complex)": [[24, "sage.combinat.cluster_complex.ClusterComplexFacet"]], "element (sage.combinat.cluster_complex.clustercomplex attribute)": [[24, "sage.combinat.cluster_complex.ClusterComplex.Element"]], "cluster() (sage.combinat.cluster_complex.clustercomplexfacet method)": [[24, "sage.combinat.cluster_complex.ClusterComplexFacet.cluster"]], "cyclic_rotation() (sage.combinat.cluster_complex.clustercomplex method)": [[24, "sage.combinat.cluster_complex.ClusterComplex.cyclic_rotation"]], "k() (sage.combinat.cluster_complex.clustercomplex method)": [[24, "sage.combinat.cluster_complex.ClusterComplex.k"]], "minimal_nonfaces() (sage.combinat.cluster_complex.clustercomplex method)": [[24, "sage.combinat.cluster_complex.ClusterComplex.minimal_nonfaces"]], "product_of_upper_cluster() (sage.combinat.cluster_complex.clustercomplexfacet method)": [[24, "sage.combinat.cluster_complex.ClusterComplexFacet.product_of_upper_cluster"]], "sage.combinat.cluster_complex": [[24, "module-sage.combinat.cluster_complex"]], "upper_cluster() (sage.combinat.cluster_complex.clustercomplexfacet method)": [[24, "sage.combinat.cluster_complex.ClusterComplexFacet.upper_cluster"]], "coloredpermutation (class in sage.combinat.colored_permutations)": [[25, "sage.combinat.colored_permutations.ColoredPermutation"]], "coloredpermutations (class in sage.combinat.colored_permutations)": [[25, "sage.combinat.colored_permutations.ColoredPermutations"]], "element (sage.combinat.colored_permutations.coloredpermutations attribute)": [[25, "sage.combinat.colored_permutations.ColoredPermutations.Element"]], "element (sage.combinat.colored_permutations.signedpermutations attribute)": [[25, "sage.combinat.colored_permutations.SignedPermutations.Element"]], "signedpermutation (class in sage.combinat.colored_permutations)": [[25, "sage.combinat.colored_permutations.SignedPermutation"]], "signedpermutations (class in sage.combinat.colored_permutations)": [[25, "sage.combinat.colored_permutations.SignedPermutations"]], "as_permutation_group() (sage.combinat.colored_permutations.coloredpermutations method)": [[25, "sage.combinat.colored_permutations.ColoredPermutations.as_permutation_group"]], "cardinality() (sage.combinat.colored_permutations.coloredpermutations method)": [[25, "sage.combinat.colored_permutations.ColoredPermutations.cardinality"]], "codegrees() (sage.combinat.colored_permutations.coloredpermutations method)": [[25, "sage.combinat.colored_permutations.ColoredPermutations.codegrees"]], "colors() (sage.combinat.colored_permutations.coloredpermutation method)": [[25, "sage.combinat.colored_permutations.ColoredPermutation.colors"]], "conjugacy_class_representative() (sage.combinat.colored_permutations.signedpermutations method)": [[25, "sage.combinat.colored_permutations.SignedPermutations.conjugacy_class_representative"]], "coxeter_matrix() (sage.combinat.colored_permutations.coloredpermutations method)": [[25, "sage.combinat.colored_permutations.ColoredPermutations.coxeter_matrix"]], "cycle_type() (sage.combinat.colored_permutations.signedpermutation method)": [[25, "sage.combinat.colored_permutations.SignedPermutation.cycle_type"]], "degrees() (sage.combinat.colored_permutations.coloredpermutations method)": [[25, "sage.combinat.colored_permutations.ColoredPermutations.degrees"]], "fixed_point_polynomial() (sage.combinat.colored_permutations.coloredpermutations method)": [[25, "sage.combinat.colored_permutations.ColoredPermutations.fixed_point_polynomial"]], "gens() (sage.combinat.colored_permutations.coloredpermutations method)": [[25, "sage.combinat.colored_permutations.ColoredPermutations.gens"]], "has_left_descent() (sage.combinat.colored_permutations.coloredpermutation method)": [[25, "sage.combinat.colored_permutations.ColoredPermutation.has_left_descent"]], "has_left_descent() (sage.combinat.colored_permutations.signedpermutation method)": [[25, "sage.combinat.colored_permutations.SignedPermutation.has_left_descent"]], "index_set() (sage.combinat.colored_permutations.coloredpermutations method)": [[25, "sage.combinat.colored_permutations.ColoredPermutations.index_set"]], "is_well_generated() (sage.combinat.colored_permutations.coloredpermutations method)": [[25, "sage.combinat.colored_permutations.ColoredPermutations.is_well_generated"]], "length() (sage.combinat.colored_permutations.coloredpermutation method)": [[25, "sage.combinat.colored_permutations.ColoredPermutation.length"]], "long_element() (sage.combinat.colored_permutations.signedpermutations method)": [[25, "sage.combinat.colored_permutations.SignedPermutations.long_element"]], "matrix_group() (sage.combinat.colored_permutations.coloredpermutations method)": [[25, "sage.combinat.colored_permutations.ColoredPermutations.matrix_group"]], "number_of_reflection_hyperplanes() (sage.combinat.colored_permutations.coloredpermutations method)": [[25, "sage.combinat.colored_permutations.ColoredPermutations.number_of_reflection_hyperplanes"]], "one() (sage.combinat.colored_permutations.coloredpermutations method)": [[25, "sage.combinat.colored_permutations.ColoredPermutations.one"]], "one() (sage.combinat.colored_permutations.signedpermutations method)": [[25, "sage.combinat.colored_permutations.SignedPermutations.one"]], "one_line_form() (sage.combinat.colored_permutations.coloredpermutation method)": [[25, "sage.combinat.colored_permutations.ColoredPermutation.one_line_form"]], "order() (sage.combinat.colored_permutations.coloredpermutations method)": [[25, "sage.combinat.colored_permutations.ColoredPermutations.order"]], "order() (sage.combinat.colored_permutations.signedpermutation method)": [[25, "sage.combinat.colored_permutations.SignedPermutation.order"]], "permutation() (sage.combinat.colored_permutations.coloredpermutation method)": [[25, "sage.combinat.colored_permutations.ColoredPermutation.permutation"]], "random_element() (sage.combinat.colored_permutations.coloredpermutations method)": [[25, "sage.combinat.colored_permutations.ColoredPermutations.random_element"]], "random_element() (sage.combinat.colored_permutations.signedpermutations method)": [[25, "sage.combinat.colored_permutations.SignedPermutations.random_element"]], "rank() (sage.combinat.colored_permutations.coloredpermutations method)": [[25, "sage.combinat.colored_permutations.ColoredPermutations.rank"]], "reduced_word() (sage.combinat.colored_permutations.coloredpermutation method)": [[25, "sage.combinat.colored_permutations.ColoredPermutation.reduced_word"]], "sage.combinat.colored_permutations": [[25, "module-sage.combinat.colored_permutations"]], "simple_reflection() (sage.combinat.colored_permutations.coloredpermutations method)": [[25, "sage.combinat.colored_permutations.ColoredPermutations.simple_reflection"]], "simple_reflection() (sage.combinat.colored_permutations.signedpermutations method)": [[25, "sage.combinat.colored_permutations.SignedPermutations.simple_reflection"]], "to_cycles() (sage.combinat.colored_permutations.signedpermutation method)": [[25, "sage.combinat.colored_permutations.SignedPermutation.to_cycles"]], "to_matrix() (sage.combinat.colored_permutations.coloredpermutation method)": [[25, "sage.combinat.colored_permutations.ColoredPermutation.to_matrix"]], "to_matrix() (sage.combinat.colored_permutations.signedpermutation method)": [[25, "sage.combinat.colored_permutations.SignedPermutation.to_matrix"]], "combinatorialclass (class in sage.combinat.combinat)": [[26, "sage.combinat.combinat.CombinatorialClass"]], "combinatorialelement (class in sage.combinat.combinat)": [[26, "sage.combinat.combinat.CombinatorialElement"]], "combinatorialobject (class in sage.combinat.combinat)": [[26, "sage.combinat.combinat.CombinatorialObject"]], "element (sage.combinat.combinat.combinatorialclass attribute)": [[26, "sage.combinat.combinat.CombinatorialClass.Element"]], "filteredcombinatorialclass (class in sage.combinat.combinat)": [[26, "sage.combinat.combinat.FilteredCombinatorialClass"]], "infiniteabstractcombinatorialclass (class in sage.combinat.combinat)": [[26, "sage.combinat.combinat.InfiniteAbstractCombinatorialClass"]], "mapcombinatorialclass (class in sage.combinat.combinat)": [[26, "sage.combinat.combinat.MapCombinatorialClass"]], "permutations_cc (class in sage.combinat.combinat)": [[26, "sage.combinat.combinat.Permutations_CC"]], "unioncombinatorialclass (class in sage.combinat.combinat)": [[26, "sage.combinat.combinat.UnionCombinatorialClass"]], "bell_number() (in module sage.combinat.combinat)": [[26, "sage.combinat.combinat.bell_number"]], "bell_polynomial() (in module sage.combinat.combinat)": [[26, "sage.combinat.combinat.bell_polynomial"]], "bernoulli_polynomial() (in module sage.combinat.combinat)": [[26, "sage.combinat.combinat.bernoulli_polynomial"]], "cardinality() (sage.combinat.combinat.combinatorialclass method)": [[26, "sage.combinat.combinat.CombinatorialClass.cardinality"]], "cardinality() (sage.combinat.combinat.filteredcombinatorialclass method)": [[26, "sage.combinat.combinat.FilteredCombinatorialClass.cardinality"]], "cardinality() (sage.combinat.combinat.infiniteabstractcombinatorialclass method)": [[26, "sage.combinat.combinat.InfiniteAbstractCombinatorialClass.cardinality"]], "cardinality() (sage.combinat.combinat.unioncombinatorialclass method)": [[26, "sage.combinat.combinat.UnionCombinatorialClass.cardinality"]], "catalan_number() (in module sage.combinat.combinat)": [[26, "sage.combinat.combinat.catalan_number"]], "element_class() (sage.combinat.combinat.combinatorialclass method)": [[26, "sage.combinat.combinat.CombinatorialClass.element_class"]], "euler_number() (in module sage.combinat.combinat)": [[26, "sage.combinat.combinat.euler_number"]], "eulerian_number() (in module sage.combinat.combinat)": [[26, "sage.combinat.combinat.eulerian_number"]], "eulerian_polynomial() (in module sage.combinat.combinat)": [[26, "sage.combinat.combinat.eulerian_polynomial"]], "fibonacci() (in module sage.combinat.combinat)": [[26, "sage.combinat.combinat.fibonacci"]], "fibonacci_sequence() (in module sage.combinat.combinat)": [[26, "sage.combinat.combinat.fibonacci_sequence"]], "fibonacci_xrange() (in module sage.combinat.combinat)": [[26, "sage.combinat.combinat.fibonacci_xrange"]], "filter() (sage.combinat.combinat.combinatorialclass method)": [[26, "sage.combinat.combinat.CombinatorialClass.filter"]], "first() (sage.combinat.combinat.combinatorialclass method)": [[26, "sage.combinat.combinat.CombinatorialClass.first"]], "first() (sage.combinat.combinat.unioncombinatorialclass method)": [[26, "sage.combinat.combinat.UnionCombinatorialClass.first"]], "index() (sage.combinat.combinat.combinatorialobject method)": [[26, "sage.combinat.combinat.CombinatorialObject.index"]], "is_finite() (sage.combinat.combinat.combinatorialclass method)": [[26, "sage.combinat.combinat.CombinatorialClass.is_finite"]], "last() (sage.combinat.combinat.combinatorialclass method)": [[26, "sage.combinat.combinat.CombinatorialClass.last"]], "last() (sage.combinat.combinat.unioncombinatorialclass method)": [[26, "sage.combinat.combinat.UnionCombinatorialClass.last"]], "list() (sage.combinat.combinat.combinatorialclass method)": [[26, "sage.combinat.combinat.CombinatorialClass.list"]], "list() (sage.combinat.combinat.infiniteabstractcombinatorialclass method)": [[26, "sage.combinat.combinat.InfiniteAbstractCombinatorialClass.list"]], "list() (sage.combinat.combinat.unioncombinatorialclass method)": [[26, "sage.combinat.combinat.UnionCombinatorialClass.list"]], "lucas_number1() (in module sage.combinat.combinat)": [[26, "sage.combinat.combinat.lucas_number1"]], "lucas_number2() (in module sage.combinat.combinat)": [[26, "sage.combinat.combinat.lucas_number2"]], "map() (sage.combinat.combinat.combinatorialclass method)": [[26, "sage.combinat.combinat.CombinatorialClass.map"]], "narayana_number() (in module sage.combinat.combinat)": [[26, "sage.combinat.combinat.narayana_number"]], "next() (sage.combinat.combinat.combinatorialclass method)": [[26, "sage.combinat.combinat.CombinatorialClass.next"]], "number_of_tuples() (in module sage.combinat.combinat)": [[26, "sage.combinat.combinat.number_of_tuples"]], "number_of_unordered_tuples() (in module sage.combinat.combinat)": [[26, "sage.combinat.combinat.number_of_unordered_tuples"]], "polygonal_number() (in module sage.combinat.combinat)": [[26, "sage.combinat.combinat.polygonal_number"]], "previous() (sage.combinat.combinat.combinatorialclass method)": [[26, "sage.combinat.combinat.CombinatorialClass.previous"]], "random_element() (sage.combinat.combinat.combinatorialclass method)": [[26, "sage.combinat.combinat.CombinatorialClass.random_element"]], "rank() (sage.combinat.combinat.combinatorialclass method)": [[26, "sage.combinat.combinat.CombinatorialClass.rank"]], "rank() (sage.combinat.combinat.unioncombinatorialclass method)": [[26, "sage.combinat.combinat.UnionCombinatorialClass.rank"]], "sage.combinat.combinat": [[26, "module-sage.combinat.combinat"]], "stirling_number1() (in module sage.combinat.combinat)": [[26, "sage.combinat.combinat.stirling_number1"]], "stirling_number2() (in module sage.combinat.combinat)": [[26, "sage.combinat.combinat.stirling_number2"]], "tuples() (in module sage.combinat.combinat)": [[26, "sage.combinat.combinat.tuples"]], "union() (sage.combinat.combinat.combinatorialclass method)": [[26, "sage.combinat.combinat.CombinatorialClass.union"]], "unordered_tuples() (in module sage.combinat.combinat)": [[26, "sage.combinat.combinat.unordered_tuples"]], "unrank() (sage.combinat.combinat.combinatorialclass method)": [[26, "sage.combinat.combinat.CombinatorialClass.unrank"]], "unrank() (sage.combinat.combinat.unioncombinatorialclass method)": [[26, "sage.combinat.combinat.UnionCombinatorialClass.unrank"]], "unshuffle_iterator() (in module sage.combinat.combinat)": [[26, "sage.combinat.combinat.unshuffle_iterator"]], "conjugate() (in module sage.combinat.combinat_cython)": [[27, "sage.combinat.combinat_cython.conjugate"]], "lyndon_word_iterator() (in module sage.combinat.combinat_cython)": [[27, "sage.combinat.combinat_cython.lyndon_word_iterator"]], "perfect_matchings_iterator() (in module sage.combinat.combinat_cython)": [[27, "sage.combinat.combinat_cython.perfect_matchings_iterator"]], "sage.combinat.combinat_cython": [[27, "module-sage.combinat.combinat_cython"]], "set_partition_composition() (in module sage.combinat.combinat_cython)": [[27, "sage.combinat.combinat_cython.set_partition_composition"]], "choosenk (class in sage.combinat.combination)": [[28, "sage.combinat.combination.ChooseNK"]], "combinations() (in module sage.combinat.combination)": [[28, "sage.combinat.combination.Combinations"]], "combinations_mset (class in sage.combinat.combination)": [[28, "sage.combinat.combination.Combinations_mset"]], "combinations_msetk (class in sage.combinat.combination)": [[28, "sage.combinat.combination.Combinations_msetk"]], "combinations_set (class in sage.combinat.combination)": [[28, "sage.combinat.combination.Combinations_set"]], "combinations_setk (class in sage.combinat.combination)": [[28, "sage.combinat.combination.Combinations_setk"]], "cardinality() (sage.combinat.combination.combinations_mset method)": [[28, "sage.combinat.combination.Combinations_mset.cardinality"]], "cardinality() (sage.combinat.combination.combinations_msetk method)": [[28, "sage.combinat.combination.Combinations_msetk.cardinality"]], "cardinality() (sage.combinat.combination.combinations_set method)": [[28, "sage.combinat.combination.Combinations_set.cardinality"]], "cardinality() (sage.combinat.combination.combinations_setk method)": [[28, "sage.combinat.combination.Combinations_setk.cardinality"]], "from_rank() (in module sage.combinat.combination)": [[28, "sage.combinat.combination.from_rank"]], "list() (sage.combinat.combination.combinations_setk method)": [[28, "sage.combinat.combination.Combinations_setk.list"]], "rank() (in module sage.combinat.combination)": [[28, "sage.combinat.combination.rank"]], "rank() (sage.combinat.combination.combinations_set method)": [[28, "sage.combinat.combination.Combinations_set.rank"]], "rank() (sage.combinat.combination.combinations_setk method)": [[28, "sage.combinat.combination.Combinations_setk.rank"]], "sage.combinat.combination": [[28, "module-sage.combinat.combination"]], "unrank() (sage.combinat.combination.combinations_set method)": [[28, "sage.combinat.combination.Combinations_set.unrank"]], "unrank() (sage.combinat.combination.combinations_setk method)": [[28, "sage.combinat.combination.Combinations_setk.unrank"]], "combinatorialmap (class in sage.combinat.combinatorial_map)": [[29, "sage.combinat.combinatorial_map.CombinatorialMap"]], "combinatorial_map() (in module sage.combinat.combinatorial_map)": [[29, "sage.combinat.combinatorial_map.combinatorial_map"]], "combinatorial_map_trivial() (in module sage.combinat.combinatorial_map)": [[29, "sage.combinat.combinatorial_map.combinatorial_map_trivial"]], "combinatorial_map_wrapper() (in module sage.combinat.combinatorial_map)": [[29, "sage.combinat.combinatorial_map.combinatorial_map_wrapper"]], "combinatorial_maps_in_class() (in module sage.combinat.combinatorial_map)": [[29, "sage.combinat.combinatorial_map.combinatorial_maps_in_class"]], "name() (sage.combinat.combinatorial_map.combinatorialmap method)": [[29, "sage.combinat.combinatorial_map.CombinatorialMap.name"]], "order() (sage.combinat.combinatorial_map.combinatorialmap method)": [[29, "sage.combinat.combinatorial_map.CombinatorialMap.order"]], "sage.combinat.combinatorial_map": [[29, "module-sage.combinat.combinatorial_map"]], "unbounded_map() (sage.combinat.combinatorial_map.combinatorialmap method)": [[29, "sage.combinat.combinatorial_map.CombinatorialMap.unbounded_map"]], "composition (class in sage.combinat.composition)": [[30, "sage.combinat.composition.Composition"]], "compositions (class in sage.combinat.composition)": [[30, "sage.combinat.composition.Compositions"]], "compositions_all (class in sage.combinat.composition)": [[30, "sage.combinat.composition.Compositions_all"]], "compositions_constraints (class in sage.combinat.composition)": [[30, "sage.combinat.composition.Compositions_constraints"]], "compositions_n (class in sage.combinat.composition)": [[30, "sage.combinat.composition.Compositions_n"]], "element (sage.combinat.composition.compositions attribute)": [[30, "sage.combinat.composition.Compositions.Element"]], "cardinality() (sage.combinat.composition.compositions_n method)": [[30, "sage.combinat.composition.Compositions_n.cardinality"]], "complement() (sage.combinat.composition.composition method)": [[30, "sage.combinat.composition.Composition.complement"]], "composition_iterator_fast() (in module sage.combinat.composition)": [[30, "sage.combinat.composition.composition_iterator_fast"]], "conjugate() (sage.combinat.composition.composition method)": [[30, "sage.combinat.composition.Composition.conjugate"]], "count() (sage.combinat.composition.composition method)": [[30, "sage.combinat.composition.Composition.count"]], "descents() (sage.combinat.composition.composition method)": [[30, "sage.combinat.composition.Composition.descents"]], "fatten() (sage.combinat.composition.composition method)": [[30, "sage.combinat.composition.Composition.fatten"]], "fatter() (sage.combinat.composition.composition method)": [[30, "sage.combinat.composition.Composition.fatter"]], "finer() (sage.combinat.composition.composition method)": [[30, "sage.combinat.composition.Composition.finer"]], "from_code() (sage.combinat.composition.compositions method)": [[30, "sage.combinat.composition.Compositions.from_code"]], "from_descents() (sage.combinat.composition.compositions method)": [[30, "sage.combinat.composition.Compositions.from_descents"]], "from_subset() (sage.combinat.composition.compositions method)": [[30, "sage.combinat.composition.Compositions.from_subset"]], "inf() (sage.combinat.composition.composition method)": [[30, "sage.combinat.composition.Composition.inf"]], "is_finer() (sage.combinat.composition.composition method)": [[30, "sage.combinat.composition.Composition.is_finer"]], "join() (sage.combinat.composition.composition method)": [[30, "sage.combinat.composition.Composition.join"]], "major_index() (sage.combinat.composition.composition method)": [[30, "sage.combinat.composition.Composition.major_index"]], "meet() (sage.combinat.composition.composition method)": [[30, "sage.combinat.composition.Composition.meet"]], "near_concatenation() (sage.combinat.composition.composition method)": [[30, "sage.combinat.composition.Composition.near_concatenation"]], "partial_sums() (sage.combinat.composition.composition method)": [[30, "sage.combinat.composition.Composition.partial_sums"]], "peaks() (sage.combinat.composition.composition method)": [[30, "sage.combinat.composition.Composition.peaks"]], "random_element() (sage.combinat.composition.compositions_n method)": [[30, "sage.combinat.composition.Compositions_n.random_element"]], "refinement_splitting() (sage.combinat.composition.composition method)": [[30, "sage.combinat.composition.Composition.refinement_splitting"]], "refinement_splitting_lengths() (sage.combinat.composition.composition method)": [[30, "sage.combinat.composition.Composition.refinement_splitting_lengths"]], "reversed() (sage.combinat.composition.composition method)": [[30, "sage.combinat.composition.Composition.reversed"]], "ribbon_decomposition() (sage.combinat.composition.composition method)": [[30, "sage.combinat.composition.Composition.ribbon_decomposition"]], "sage.combinat.composition": [[30, "module-sage.combinat.composition"]], "shuffle_product() (sage.combinat.composition.composition method)": [[30, "sage.combinat.composition.Composition.shuffle_product"]], "size() (sage.combinat.composition.composition method)": [[30, "sage.combinat.composition.Composition.size"]], "specht_module() (sage.combinat.composition.composition method)": [[30, "sage.combinat.composition.Composition.specht_module"]], "specht_module_dimension() (sage.combinat.composition.composition method)": [[30, "sage.combinat.composition.Composition.specht_module_dimension"]], "subset() (sage.combinat.composition.compositions_all method)": [[30, "sage.combinat.composition.Compositions_all.subset"]], "sum() (sage.combinat.composition.composition static method)": [[30, "sage.combinat.composition.Composition.sum"]], "sup() (sage.combinat.composition.composition method)": [[30, "sage.combinat.composition.Composition.sup"]], "to_code() (sage.combinat.composition.composition method)": [[30, "sage.combinat.composition.Composition.to_code"]], "to_partition() (sage.combinat.composition.composition method)": [[30, "sage.combinat.composition.Composition.to_partition"]], "to_skew_partition() (sage.combinat.composition.composition method)": [[30, "sage.combinat.composition.Composition.to_skew_partition"]], "to_subset() (sage.combinat.composition.composition method)": [[30, "sage.combinat.composition.Composition.to_subset"]], "wll_gt() (sage.combinat.composition.composition method)": [[30, "sage.combinat.composition.Composition.wll_gt"]], "zero() (sage.combinat.composition.compositions_all method)": [[30, "sage.combinat.composition.Compositions_all.zero"]], "signedcompositions (class in sage.combinat.composition_signed)": [[31, "sage.combinat.composition_signed.SignedCompositions"]], "cardinality() (sage.combinat.composition_signed.signedcompositions method)": [[31, "sage.combinat.composition_signed.SignedCompositions.cardinality"]], "sage.combinat.composition_signed": [[31, "module-sage.combinat.composition_signed"]], "compositiontableau (class in sage.combinat.composition_tableau)": [[32, "sage.combinat.composition_tableau.CompositionTableau"]], "compositiontableaux (class in sage.combinat.composition_tableau)": [[32, "sage.combinat.composition_tableau.CompositionTableaux"]], "compositiontableauxbacktracker (class in sage.combinat.composition_tableau)": [[32, "sage.combinat.composition_tableau.CompositionTableauxBacktracker"]], "compositiontableaux_all (class in sage.combinat.composition_tableau)": [[32, "sage.combinat.composition_tableau.CompositionTableaux_all"]], "compositiontableaux_shape (class in sage.combinat.composition_tableau)": [[32, "sage.combinat.composition_tableau.CompositionTableaux_shape"]], "compositiontableaux_size (class in sage.combinat.composition_tableau)": [[32, "sage.combinat.composition_tableau.CompositionTableaux_size"]], "element (sage.combinat.composition_tableau.compositiontableaux attribute)": [[32, "sage.combinat.composition_tableau.CompositionTableaux.Element"]], "an_element() (sage.combinat.composition_tableau.compositiontableaux_all method)": [[32, "sage.combinat.composition_tableau.CompositionTableaux_all.an_element"]], "an_element() (sage.combinat.composition_tableau.compositiontableaux_shape method)": [[32, "sage.combinat.composition_tableau.CompositionTableaux_shape.an_element"]], "descent_composition() (sage.combinat.composition_tableau.compositiontableau method)": [[32, "sage.combinat.composition_tableau.CompositionTableau.descent_composition"]], "descent_set() (sage.combinat.composition_tableau.compositiontableau method)": [[32, "sage.combinat.composition_tableau.CompositionTableau.descent_set"]], "get_next_pos() (sage.combinat.composition_tableau.compositiontableauxbacktracker method)": [[32, "sage.combinat.composition_tableau.CompositionTableauxBacktracker.get_next_pos"]], "is_standard() (sage.combinat.composition_tableau.compositiontableau method)": [[32, "sage.combinat.composition_tableau.CompositionTableau.is_standard"]], "pp() (sage.combinat.composition_tableau.compositiontableau method)": [[32, "sage.combinat.composition_tableau.CompositionTableau.pp"]], "sage.combinat.composition_tableau": [[32, "module-sage.combinat.composition_tableau"]], "shape_composition() (sage.combinat.composition_tableau.compositiontableau method)": [[32, "sage.combinat.composition_tableau.CompositionTableau.shape_composition"]], "shape_partition() (sage.combinat.composition_tableau.compositiontableau method)": [[32, "sage.combinat.composition_tableau.CompositionTableau.shape_partition"]], "size() (sage.combinat.composition_tableau.compositiontableau method)": [[32, "sage.combinat.composition_tableau.CompositionTableau.size"]], "weight() (sage.combinat.composition_tableau.compositiontableau method)": [[32, "sage.combinat.composition_tableau.CompositionTableau.weight"]], "constellation() (in module sage.combinat.constellation)": [[33, "sage.combinat.constellation.Constellation"]], "constellation_class (class in sage.combinat.constellation)": [[33, "sage.combinat.constellation.Constellation_class"]], "constellations() (in module sage.combinat.constellation)": [[33, "sage.combinat.constellation.Constellations"]], "constellations_ld (class in sage.combinat.constellation)": [[33, "sage.combinat.constellation.Constellations_ld"]], "constellations_p (class in sage.combinat.constellation)": [[33, "sage.combinat.constellation.Constellations_p"]], "element (sage.combinat.constellation.constellations_ld attribute)": [[33, "sage.combinat.constellation.Constellations_ld.Element"]], "braid_group_action() (sage.combinat.constellation.constellation_class method)": [[33, "sage.combinat.constellation.Constellation_class.braid_group_action"]], "braid_group_action() (sage.combinat.constellation.constellations_ld method)": [[33, "sage.combinat.constellation.Constellations_ld.braid_group_action"]], "braid_group_orbit() (sage.combinat.constellation.constellation_class method)": [[33, "sage.combinat.constellation.Constellation_class.braid_group_orbit"]], "braid_group_orbits() (sage.combinat.constellation.constellations_ld method)": [[33, "sage.combinat.constellation.Constellations_ld.braid_group_orbits"]], "connected_components() (sage.combinat.constellation.constellation_class method)": [[33, "sage.combinat.constellation.Constellation_class.connected_components"]], "copy() (sage.combinat.constellation.constellation_class method)": [[33, "sage.combinat.constellation.Constellation_class.copy"]], "degree() (sage.combinat.constellation.constellation_class method)": [[33, "sage.combinat.constellation.Constellation_class.degree"]], "euler_characteristic() (sage.combinat.constellation.constellation_class method)": [[33, "sage.combinat.constellation.Constellation_class.euler_characteristic"]], "g() (sage.combinat.constellation.constellation_class method)": [[33, "sage.combinat.constellation.Constellation_class.g"]], "genus() (sage.combinat.constellation.constellation_class method)": [[33, "sage.combinat.constellation.Constellation_class.genus"]], "is_connected() (sage.combinat.constellation.constellation_class method)": [[33, "sage.combinat.constellation.Constellation_class.is_connected"]], "is_empty() (sage.combinat.constellation.constellations_ld method)": [[33, "sage.combinat.constellation.Constellations_ld.is_empty"]], "is_isomorphic() (sage.combinat.constellation.constellation_class method)": [[33, "sage.combinat.constellation.Constellation_class.is_isomorphic"]], "is_mutable() (sage.combinat.constellation.constellation_class method)": [[33, "sage.combinat.constellation.Constellation_class.is_mutable"]], "isomorphism_representatives() (sage.combinat.constellation.constellations_p method)": [[33, "sage.combinat.constellation.Constellations_p.isomorphism_representatives"]], "length() (sage.combinat.constellation.constellation_class method)": [[33, "sage.combinat.constellation.Constellation_class.length"]], "mutable_copy() (sage.combinat.constellation.constellation_class method)": [[33, "sage.combinat.constellation.Constellation_class.mutable_copy"]], "passport() (sage.combinat.constellation.constellation_class method)": [[33, "sage.combinat.constellation.Constellation_class.passport"]], "perm_conjugate() (in module sage.combinat.constellation)": [[33, "sage.combinat.constellation.perm_conjugate"]], "perm_invert() (in module sage.combinat.constellation)": [[33, "sage.combinat.constellation.perm_invert"]], "perm_sym_domain() (in module sage.combinat.constellation)": [[33, "sage.combinat.constellation.perm_sym_domain"]], "perms_are_connected() (in module sage.combinat.constellation)": [[33, "sage.combinat.constellation.perms_are_connected"]], "perms_canonical_labels() (in module sage.combinat.constellation)": [[33, "sage.combinat.constellation.perms_canonical_labels"]], "perms_canonical_labels_from() (in module sage.combinat.constellation)": [[33, "sage.combinat.constellation.perms_canonical_labels_from"]], "perms_sym_init() (in module sage.combinat.constellation)": [[33, "sage.combinat.constellation.perms_sym_init"]], "profile() (sage.combinat.constellation.constellation_class method)": [[33, "sage.combinat.constellation.Constellation_class.profile"]], "random_element() (sage.combinat.constellation.constellations_ld method)": [[33, "sage.combinat.constellation.Constellations_ld.random_element"]], "relabel() (sage.combinat.constellation.constellation_class method)": [[33, "sage.combinat.constellation.Constellation_class.relabel"]], "sage.combinat.constellation": [[33, "module-sage.combinat.constellation"]], "set_immutable() (sage.combinat.constellation.constellation_class method)": [[33, "sage.combinat.constellation.Constellation_class.set_immutable"]], "switch() (sage.combinat.constellation.constellation_class method)": [[33, "sage.combinat.constellation.Constellation_class.switch"]], "core (class in sage.combinat.core)": [[34, "sage.combinat.core.Core"]], "cores() (in module sage.combinat.core)": [[34, "sage.combinat.core.Cores"]], "cores_length (class in sage.combinat.core)": [[34, "sage.combinat.core.Cores_length"]], "cores_size (class in sage.combinat.core)": [[34, "sage.combinat.core.Cores_size"]], "element (sage.combinat.core.cores_length attribute)": [[34, "sage.combinat.core.Cores_length.Element"]], "element (sage.combinat.core.cores_size attribute)": [[34, "sage.combinat.core.Cores_size.Element"]], "affine_symmetric_group_action() (sage.combinat.core.core method)": [[34, "sage.combinat.core.Core.affine_symmetric_group_action"]], "affine_symmetric_group_simple_action() (sage.combinat.core.core method)": [[34, "sage.combinat.core.Core.affine_symmetric_group_simple_action"]], "contains() (sage.combinat.core.core method)": [[34, "sage.combinat.core.Core.contains"]], "from_partition() (sage.combinat.core.cores_length method)": [[34, "sage.combinat.core.Cores_length.from_partition"]], "from_partition() (sage.combinat.core.cores_size method)": [[34, "sage.combinat.core.Cores_size.from_partition"]], "k() (sage.combinat.core.core method)": [[34, "sage.combinat.core.Core.k"]], "length() (sage.combinat.core.core method)": [[34, "sage.combinat.core.Core.length"]], "list() (sage.combinat.core.cores_length method)": [[34, "sage.combinat.core.Cores_length.list"]], "list() (sage.combinat.core.cores_size method)": [[34, "sage.combinat.core.Cores_size.list"]], "sage.combinat.core": [[34, "module-sage.combinat.core"]], "size() (sage.combinat.core.core method)": [[34, "sage.combinat.core.Core.size"]], "strong_covers() (sage.combinat.core.core method)": [[34, "sage.combinat.core.Core.strong_covers"]], "strong_down_list() (sage.combinat.core.core method)": [[34, "sage.combinat.core.Core.strong_down_list"]], "strong_le() (sage.combinat.core.core method)": [[34, "sage.combinat.core.Core.strong_le"]], "to_bounded_partition() (sage.combinat.core.core method)": [[34, "sage.combinat.core.Core.to_bounded_partition"]], "to_grassmannian() (sage.combinat.core.core method)": [[34, "sage.combinat.core.Core.to_grassmannian"]], "to_partition() (sage.combinat.core.core method)": [[34, "sage.combinat.core.Core.to_partition"]], "weak_covers() (sage.combinat.core.core method)": [[34, "sage.combinat.core.Core.weak_covers"]], "weak_le() (sage.combinat.core.core method)": [[34, "sage.combinat.core.Core.weak_le"]], "sage.combinat.counting": [[35, "module-sage.combinat.counting"]], "affinecrystalfromclassical (class in sage.combinat.crystals.affine)": [[36, "sage.combinat.crystals.affine.AffineCrystalFromClassical"]], "affinecrystalfromclassicalandpromotion (class in sage.combinat.crystals.affine)": [[36, "sage.combinat.crystals.affine.AffineCrystalFromClassicalAndPromotion"]], "affinecrystalfromclassicalandpromotionelement (class in sage.combinat.crystals.affine)": [[36, "sage.combinat.crystals.affine.AffineCrystalFromClassicalAndPromotionElement"]], "affinecrystalfromclassicalelement (class in sage.combinat.crystals.affine)": [[36, "sage.combinat.crystals.affine.AffineCrystalFromClassicalElement"]], "element (sage.combinat.crystals.affine.affinecrystalfromclassical attribute)": [[36, "sage.combinat.crystals.affine.AffineCrystalFromClassical.Element"]], "element (sage.combinat.crystals.affine.affinecrystalfromclassicalandpromotion attribute)": [[36, "sage.combinat.crystals.affine.AffineCrystalFromClassicalAndPromotion.Element"]], "automorphism() (sage.combinat.crystals.affine.affinecrystalfromclassicalandpromotion method)": [[36, "sage.combinat.crystals.affine.AffineCrystalFromClassicalAndPromotion.automorphism"]], "cardinality() (sage.combinat.crystals.affine.affinecrystalfromclassical method)": [[36, "sage.combinat.crystals.affine.AffineCrystalFromClassical.cardinality"]], "classical_weight() (sage.combinat.crystals.affine.affinecrystalfromclassicalelement method)": [[36, "sage.combinat.crystals.affine.AffineCrystalFromClassicalElement.classical_weight"]], "e() (sage.combinat.crystals.affine.affinecrystalfromclassicalelement method)": [[36, "sage.combinat.crystals.affine.AffineCrystalFromClassicalElement.e"]], "e0() (sage.combinat.crystals.affine.affinecrystalfromclassicalandpromotionelement method)": [[36, "sage.combinat.crystals.affine.AffineCrystalFromClassicalAndPromotionElement.e0"]], "e0() (sage.combinat.crystals.affine.affinecrystalfromclassicalelement method)": [[36, "sage.combinat.crystals.affine.AffineCrystalFromClassicalElement.e0"]], "epsilon() (sage.combinat.crystals.affine.affinecrystalfromclassicalelement method)": [[36, "sage.combinat.crystals.affine.AffineCrystalFromClassicalElement.epsilon"]], "epsilon0() (sage.combinat.crystals.affine.affinecrystalfromclassicalandpromotionelement method)": [[36, "sage.combinat.crystals.affine.AffineCrystalFromClassicalAndPromotionElement.epsilon0"]], "epsilon0() (sage.combinat.crystals.affine.affinecrystalfromclassicalelement method)": [[36, "sage.combinat.crystals.affine.AffineCrystalFromClassicalElement.epsilon0"]], "f() (sage.combinat.crystals.affine.affinecrystalfromclassicalelement method)": [[36, "sage.combinat.crystals.affine.AffineCrystalFromClassicalElement.f"]], "f0() (sage.combinat.crystals.affine.affinecrystalfromclassicalandpromotionelement method)": [[36, "sage.combinat.crystals.affine.AffineCrystalFromClassicalAndPromotionElement.f0"]], "f0() (sage.combinat.crystals.affine.affinecrystalfromclassicalelement method)": [[36, "sage.combinat.crystals.affine.AffineCrystalFromClassicalElement.f0"]], "inverse_automorphism() (sage.combinat.crystals.affine.affinecrystalfromclassicalandpromotion method)": [[36, "sage.combinat.crystals.affine.AffineCrystalFromClassicalAndPromotion.inverse_automorphism"]], "lift() (sage.combinat.crystals.affine.affinecrystalfromclassical method)": [[36, "sage.combinat.crystals.affine.AffineCrystalFromClassical.lift"]], "lift() (sage.combinat.crystals.affine.affinecrystalfromclassicalelement method)": [[36, "sage.combinat.crystals.affine.AffineCrystalFromClassicalElement.lift"]], "phi() (sage.combinat.crystals.affine.affinecrystalfromclassicalelement method)": [[36, "sage.combinat.crystals.affine.AffineCrystalFromClassicalElement.phi"]], "phi0() (sage.combinat.crystals.affine.affinecrystalfromclassicalandpromotionelement method)": [[36, "sage.combinat.crystals.affine.AffineCrystalFromClassicalAndPromotionElement.phi0"]], "phi0() (sage.combinat.crystals.affine.affinecrystalfromclassicalelement method)": [[36, "sage.combinat.crystals.affine.AffineCrystalFromClassicalElement.phi0"]], "pp() (sage.combinat.crystals.affine.affinecrystalfromclassicalelement method)": [[36, "sage.combinat.crystals.affine.AffineCrystalFromClassicalElement.pp"]], "retract() (sage.combinat.crystals.affine.affinecrystalfromclassical method)": [[36, "sage.combinat.crystals.affine.AffineCrystalFromClassical.retract"]], "sage.combinat.crystals.affine": [[36, "module-sage.combinat.crystals.affine"]], "affinefactorizationcrystal (class in sage.combinat.crystals.affine_factorization)": [[37, "sage.combinat.crystals.affine_factorization.AffineFactorizationCrystal"]], "affinefactorizationcrystal.element (class in sage.combinat.crystals.affine_factorization)": [[37, "sage.combinat.crystals.affine_factorization.AffineFactorizationCrystal.Element"]], "factorizationtotableaux (class in sage.combinat.crystals.affine_factorization)": [[37, "sage.combinat.crystals.affine_factorization.FactorizationToTableaux"]], "affine_factorizations() (in module sage.combinat.crystals.affine_factorization)": [[37, "sage.combinat.crystals.affine_factorization.affine_factorizations"]], "bracketing() (sage.combinat.crystals.affine_factorization.affinefactorizationcrystal.element method)": [[37, "sage.combinat.crystals.affine_factorization.AffineFactorizationCrystal.Element.bracketing"]], "e() (sage.combinat.crystals.affine_factorization.affinefactorizationcrystal.element method)": [[37, "sage.combinat.crystals.affine_factorization.AffineFactorizationCrystal.Element.e"]], "f() (sage.combinat.crystals.affine_factorization.affinefactorizationcrystal.element method)": [[37, "sage.combinat.crystals.affine_factorization.AffineFactorizationCrystal.Element.f"]], "is_embedding() (sage.combinat.crystals.affine_factorization.factorizationtotableaux method)": [[37, "sage.combinat.crystals.affine_factorization.FactorizationToTableaux.is_embedding"]], "is_isomorphism() (sage.combinat.crystals.affine_factorization.factorizationtotableaux method)": [[37, "sage.combinat.crystals.affine_factorization.FactorizationToTableaux.is_isomorphism"]], "is_surjective() (sage.combinat.crystals.affine_factorization.factorizationtotableaux method)": [[37, "sage.combinat.crystals.affine_factorization.FactorizationToTableaux.is_surjective"]], "sage.combinat.crystals.affine_factorization": [[37, "module-sage.combinat.crystals.affine_factorization"]], "to_tableau() (sage.combinat.crystals.affine_factorization.affinefactorizationcrystal.element method)": [[37, "sage.combinat.crystals.affine_factorization.AffineFactorizationCrystal.Element.to_tableau"]], "affinizationofcrystal (class in sage.combinat.crystals.affinization)": [[38, "sage.combinat.crystals.affinization.AffinizationOfCrystal"]], "affinizationofcrystal.element (class in sage.combinat.crystals.affinization)": [[38, "sage.combinat.crystals.affinization.AffinizationOfCrystal.Element"]], "e() (sage.combinat.crystals.affinization.affinizationofcrystal.element method)": [[38, "sage.combinat.crystals.affinization.AffinizationOfCrystal.Element.e"]], "epsilon() (sage.combinat.crystals.affinization.affinizationofcrystal.element method)": [[38, "sage.combinat.crystals.affinization.AffinizationOfCrystal.Element.epsilon"]], "f() (sage.combinat.crystals.affinization.affinizationofcrystal.element method)": [[38, "sage.combinat.crystals.affinization.AffinizationOfCrystal.Element.f"]], "phi() (sage.combinat.crystals.affinization.affinizationofcrystal.element method)": [[38, "sage.combinat.crystals.affinization.AffinizationOfCrystal.Element.phi"]], "sage.combinat.crystals.affinization": [[38, "module-sage.combinat.crystals.affinization"]], "weight() (sage.combinat.crystals.affinization.affinizationofcrystal.element method)": [[38, "sage.combinat.crystals.affinization.AffinizationOfCrystal.Element.weight"]], "crystalofalcovepaths (class in sage.combinat.crystals.alcove_path)": [[39, "sage.combinat.crystals.alcove_path.CrystalOfAlcovePaths"]], "crystalofalcovepathselement (class in sage.combinat.crystals.alcove_path)": [[39, "sage.combinat.crystals.alcove_path.CrystalOfAlcovePathsElement"]], "element (sage.combinat.crystals.alcove_path.crystalofalcovepaths attribute)": [[39, "sage.combinat.crystals.alcove_path.CrystalOfAlcovePaths.Element"]], "element (sage.combinat.crystals.alcove_path.rootswithheight attribute)": [[39, "sage.combinat.crystals.alcove_path.RootsWithHeight.Element"]], "infinitycrystalofalcovepaths (class in sage.combinat.crystals.alcove_path)": [[39, "sage.combinat.crystals.alcove_path.InfinityCrystalOfAlcovePaths"]], "infinitycrystalofalcovepaths.element (class in sage.combinat.crystals.alcove_path)": [[39, "sage.combinat.crystals.alcove_path.InfinityCrystalOfAlcovePaths.Element"]], "rootswithheight (class in sage.combinat.crystals.alcove_path)": [[39, "sage.combinat.crystals.alcove_path.RootsWithHeight"]], "rootswithheightelement (class in sage.combinat.crystals.alcove_path)": [[39, "sage.combinat.crystals.alcove_path.RootsWithHeightElement"]], "compare_graphs() (in module sage.combinat.crystals.alcove_path)": [[39, "sage.combinat.crystals.alcove_path.compare_graphs"]], "e() (sage.combinat.crystals.alcove_path.crystalofalcovepathselement method)": [[39, "sage.combinat.crystals.alcove_path.CrystalOfAlcovePathsElement.e"]], "e() (sage.combinat.crystals.alcove_path.infinitycrystalofalcovepaths.element method)": [[39, "sage.combinat.crystals.alcove_path.InfinityCrystalOfAlcovePaths.Element.e"]], "epsilon() (sage.combinat.crystals.alcove_path.crystalofalcovepathselement method)": [[39, "sage.combinat.crystals.alcove_path.CrystalOfAlcovePathsElement.epsilon"]], "epsilon() (sage.combinat.crystals.alcove_path.infinitycrystalofalcovepaths.element method)": [[39, "sage.combinat.crystals.alcove_path.InfinityCrystalOfAlcovePaths.Element.epsilon"]], "f() (sage.combinat.crystals.alcove_path.crystalofalcovepathselement method)": [[39, "sage.combinat.crystals.alcove_path.CrystalOfAlcovePathsElement.f"]], "f() (sage.combinat.crystals.alcove_path.infinitycrystalofalcovepaths.element method)": [[39, "sage.combinat.crystals.alcove_path.InfinityCrystalOfAlcovePaths.Element.f"]], "integer_sequence() (sage.combinat.crystals.alcove_path.crystalofalcovepathselement method)": [[39, "sage.combinat.crystals.alcove_path.CrystalOfAlcovePathsElement.integer_sequence"]], "is_admissible() (sage.combinat.crystals.alcove_path.crystalofalcovepathselement method)": [[39, "sage.combinat.crystals.alcove_path.CrystalOfAlcovePathsElement.is_admissible"]], "lambda_chain() (sage.combinat.crystals.alcove_path.rootswithheight method)": [[39, "sage.combinat.crystals.alcove_path.RootsWithHeight.lambda_chain"]], "path() (sage.combinat.crystals.alcove_path.crystalofalcovepathselement method)": [[39, "sage.combinat.crystals.alcove_path.CrystalOfAlcovePathsElement.path"]], "phi() (sage.combinat.crystals.alcove_path.crystalofalcovepathselement method)": [[39, "sage.combinat.crystals.alcove_path.CrystalOfAlcovePathsElement.phi"]], "phi() (sage.combinat.crystals.alcove_path.infinitycrystalofalcovepaths.element method)": [[39, "sage.combinat.crystals.alcove_path.InfinityCrystalOfAlcovePaths.Element.phi"]], "plot() (sage.combinat.crystals.alcove_path.crystalofalcovepathselement method)": [[39, "sage.combinat.crystals.alcove_path.CrystalOfAlcovePathsElement.plot"]], "projection() (sage.combinat.crystals.alcove_path.infinitycrystalofalcovepaths.element method)": [[39, "sage.combinat.crystals.alcove_path.InfinityCrystalOfAlcovePaths.Element.projection"]], "sage.combinat.crystals.alcove_path": [[39, "module-sage.combinat.crystals.alcove_path"]], "vertices() (sage.combinat.crystals.alcove_path.crystalofalcovepaths method)": [[39, "sage.combinat.crystals.alcove_path.CrystalOfAlcovePaths.vertices"]], "weight() (sage.combinat.crystals.alcove_path.crystalofalcovepathselement method)": [[39, "sage.combinat.crystals.alcove_path.CrystalOfAlcovePathsElement.weight"]], "weight() (sage.combinat.crystals.alcove_path.infinitycrystalofalcovepaths.element method)": [[39, "sage.combinat.crystals.alcove_path.InfinityCrystalOfAlcovePaths.Element.weight"]], "word() (sage.combinat.crystals.alcove_path.rootswithheight method)": [[39, "sage.combinat.crystals.alcove_path.RootsWithHeight.word"]], "sage.combinat.crystals.all": [[40, "module-sage.combinat.crystals.all"]], "crystalofbkktableaux (class in sage.combinat.crystals.bkk_crystals)": [[41, "sage.combinat.crystals.bkk_crystals.CrystalOfBKKTableaux"]], "crystalofbkktableaux.element (class in sage.combinat.crystals.bkk_crystals)": [[41, "sage.combinat.crystals.bkk_crystals.CrystalOfBKKTableaux.Element"]], "genuine_highest_weight_vectors() (sage.combinat.crystals.bkk_crystals.crystalofbkktableaux method)": [[41, "sage.combinat.crystals.bkk_crystals.CrystalOfBKKTableaux.genuine_highest_weight_vectors"]], "sage.combinat.crystals.bkk_crystals": [[41, "module-sage.combinat.crystals.bkk_crystals"]], "shape() (sage.combinat.crystals.bkk_crystals.crystalofbkktableaux method)": [[41, "sage.combinat.crystals.bkk_crystals.CrystalOfBKKTableaux.shape"]], "sage.combinat.crystals.catalog": [[42, "module-sage.combinat.crystals.catalog"]], "sage.combinat.crystals.catalog_elementary_crystals": [[43, "module-sage.combinat.crystals.catalog_elementary_crystals"]], "sage.combinat.crystals.catalog_infinity_crystals": [[44, "module-sage.combinat.crystals.catalog_infinity_crystals"]], "sage.combinat.crystals.catalog_kirillov_reshetikhin": [[45, "module-sage.combinat.crystals.catalog_kirillov_reshetikhin"]], "crystalbacktracker (class in sage.combinat.crystals.crystals)": [[46, "sage.combinat.crystals.crystals.CrystalBacktracker"]], "sage.combinat.crystals.crystals": [[46, "module-sage.combinat.crystals.crystals"]], "directsumofcrystals (class in sage.combinat.crystals.direct_sum)": [[47, "sage.combinat.crystals.direct_sum.DirectSumOfCrystals"]], "directsumofcrystals.element (class in sage.combinat.crystals.direct_sum)": [[47, "sage.combinat.crystals.direct_sum.DirectSumOfCrystals.Element"]], "e() (sage.combinat.crystals.direct_sum.directsumofcrystals.element method)": [[47, "sage.combinat.crystals.direct_sum.DirectSumOfCrystals.Element.e"]], "epsilon() (sage.combinat.crystals.direct_sum.directsumofcrystals.element method)": [[47, "sage.combinat.crystals.direct_sum.DirectSumOfCrystals.Element.epsilon"]], "f() (sage.combinat.crystals.direct_sum.directsumofcrystals.element method)": [[47, "sage.combinat.crystals.direct_sum.DirectSumOfCrystals.Element.f"]], "phi() (sage.combinat.crystals.direct_sum.directsumofcrystals.element method)": [[47, "sage.combinat.crystals.direct_sum.DirectSumOfCrystals.Element.phi"]], "sage.combinat.crystals.direct_sum": [[47, "module-sage.combinat.crystals.direct_sum"]], "weight() (sage.combinat.crystals.direct_sum.directsumofcrystals.element method)": [[47, "sage.combinat.crystals.direct_sum.DirectSumOfCrystals.Element.weight"]], "weight_lattice_realization() (sage.combinat.crystals.direct_sum.directsumofcrystals method)": [[47, "sage.combinat.crystals.direct_sum.DirectSumOfCrystals.weight_lattice_realization"]], "abstractsinglecrystalelement (class in sage.combinat.crystals.elementary_crystals)": [[48, "sage.combinat.crystals.elementary_crystals.AbstractSingleCrystalElement"]], "componentcrystal (class in sage.combinat.crystals.elementary_crystals)": [[48, "sage.combinat.crystals.elementary_crystals.ComponentCrystal"]], "componentcrystal.element (class in sage.combinat.crystals.elementary_crystals)": [[48, "sage.combinat.crystals.elementary_crystals.ComponentCrystal.Element"]], "elementarycrystal (class in sage.combinat.crystals.elementary_crystals)": [[48, "sage.combinat.crystals.elementary_crystals.ElementaryCrystal"]], "elementarycrystal.element (class in sage.combinat.crystals.elementary_crystals)": [[48, "sage.combinat.crystals.elementary_crystals.ElementaryCrystal.Element"]], "rcrystal (class in sage.combinat.crystals.elementary_crystals)": [[48, "sage.combinat.crystals.elementary_crystals.RCrystal"]], "rcrystal.element (class in sage.combinat.crystals.elementary_crystals)": [[48, "sage.combinat.crystals.elementary_crystals.RCrystal.Element"]], "tcrystal (class in sage.combinat.crystals.elementary_crystals)": [[48, "sage.combinat.crystals.elementary_crystals.TCrystal"]], "tcrystal.element (class in sage.combinat.crystals.elementary_crystals)": [[48, "sage.combinat.crystals.elementary_crystals.TCrystal.Element"]], "cardinality() (sage.combinat.crystals.elementary_crystals.componentcrystal method)": [[48, "sage.combinat.crystals.elementary_crystals.ComponentCrystal.cardinality"]], "cardinality() (sage.combinat.crystals.elementary_crystals.rcrystal method)": [[48, "sage.combinat.crystals.elementary_crystals.RCrystal.cardinality"]], "cardinality() (sage.combinat.crystals.elementary_crystals.tcrystal method)": [[48, "sage.combinat.crystals.elementary_crystals.TCrystal.cardinality"]], "e() (sage.combinat.crystals.elementary_crystals.abstractsinglecrystalelement method)": [[48, "sage.combinat.crystals.elementary_crystals.AbstractSingleCrystalElement.e"]], "e() (sage.combinat.crystals.elementary_crystals.elementarycrystal.element method)": [[48, "sage.combinat.crystals.elementary_crystals.ElementaryCrystal.Element.e"]], "epsilon() (sage.combinat.crystals.elementary_crystals.componentcrystal.element method)": [[48, "sage.combinat.crystals.elementary_crystals.ComponentCrystal.Element.epsilon"]], "epsilon() (sage.combinat.crystals.elementary_crystals.elementarycrystal.element method)": [[48, "sage.combinat.crystals.elementary_crystals.ElementaryCrystal.Element.epsilon"]], "epsilon() (sage.combinat.crystals.elementary_crystals.rcrystal.element method)": [[48, "sage.combinat.crystals.elementary_crystals.RCrystal.Element.epsilon"]], "epsilon() (sage.combinat.crystals.elementary_crystals.tcrystal.element method)": [[48, "sage.combinat.crystals.elementary_crystals.TCrystal.Element.epsilon"]], "f() (sage.combinat.crystals.elementary_crystals.abstractsinglecrystalelement method)": [[48, "sage.combinat.crystals.elementary_crystals.AbstractSingleCrystalElement.f"]], "f() (sage.combinat.crystals.elementary_crystals.elementarycrystal.element method)": [[48, "sage.combinat.crystals.elementary_crystals.ElementaryCrystal.Element.f"]], "phi() (sage.combinat.crystals.elementary_crystals.componentcrystal.element method)": [[48, "sage.combinat.crystals.elementary_crystals.ComponentCrystal.Element.phi"]], "phi() (sage.combinat.crystals.elementary_crystals.elementarycrystal.element method)": [[48, "sage.combinat.crystals.elementary_crystals.ElementaryCrystal.Element.phi"]], "phi() (sage.combinat.crystals.elementary_crystals.rcrystal.element method)": [[48, "sage.combinat.crystals.elementary_crystals.RCrystal.Element.phi"]], "phi() (sage.combinat.crystals.elementary_crystals.tcrystal.element method)": [[48, "sage.combinat.crystals.elementary_crystals.TCrystal.Element.phi"]], "sage.combinat.crystals.elementary_crystals": [[48, "module-sage.combinat.crystals.elementary_crystals"]], "weight() (sage.combinat.crystals.elementary_crystals.componentcrystal.element method)": [[48, "sage.combinat.crystals.elementary_crystals.ComponentCrystal.Element.weight"]], "weight() (sage.combinat.crystals.elementary_crystals.elementarycrystal.element method)": [[48, "sage.combinat.crystals.elementary_crystals.ElementaryCrystal.Element.weight"]], "weight() (sage.combinat.crystals.elementary_crystals.rcrystal.element method)": [[48, "sage.combinat.crystals.elementary_crystals.RCrystal.Element.weight"]], "weight() (sage.combinat.crystals.elementary_crystals.tcrystal.element method)": [[48, "sage.combinat.crystals.elementary_crystals.TCrystal.Element.weight"]], "weight_lattice_realization() (sage.combinat.crystals.elementary_crystals.componentcrystal method)": [[48, "sage.combinat.crystals.elementary_crystals.ComponentCrystal.weight_lattice_realization"]], "weight_lattice_realization() (sage.combinat.crystals.elementary_crystals.elementarycrystal method)": [[48, "sage.combinat.crystals.elementary_crystals.ElementaryCrystal.weight_lattice_realization"]], "weight_lattice_realization() (sage.combinat.crystals.elementary_crystals.rcrystal method)": [[48, "sage.combinat.crystals.elementary_crystals.RCrystal.weight_lattice_realization"]], "weight_lattice_realization() (sage.combinat.crystals.elementary_crystals.tcrystal method)": [[48, "sage.combinat.crystals.elementary_crystals.TCrystal.weight_lattice_realization"]], "fastcrystal (class in sage.combinat.crystals.fast_crystals)": [[49, "sage.combinat.crystals.fast_crystals.FastCrystal"]], "fastcrystal.element (class in sage.combinat.crystals.fast_crystals)": [[49, "sage.combinat.crystals.fast_crystals.FastCrystal.Element"]], "cmp_elements() (sage.combinat.crystals.fast_crystals.fastcrystal method)": [[49, "sage.combinat.crystals.fast_crystals.FastCrystal.cmp_elements"]], "digraph() (sage.combinat.crystals.fast_crystals.fastcrystal method)": [[49, "sage.combinat.crystals.fast_crystals.FastCrystal.digraph"]], "e() (sage.combinat.crystals.fast_crystals.fastcrystal.element method)": [[49, "sage.combinat.crystals.fast_crystals.FastCrystal.Element.e"]], "f() (sage.combinat.crystals.fast_crystals.fastcrystal.element method)": [[49, "sage.combinat.crystals.fast_crystals.FastCrystal.Element.f"]], "sage.combinat.crystals.fast_crystals": [[49, "module-sage.combinat.crystals.fast_crystals"]], "weight() (sage.combinat.crystals.fast_crystals.fastcrystal.element method)": [[49, "sage.combinat.crystals.fast_crystals.FastCrystal.Element.weight"]], "decreasingheckefactorization (class in sage.combinat.crystals.fully_commutative_stable_grothendieck)": [[50, "sage.combinat.crystals.fully_commutative_stable_grothendieck.DecreasingHeckeFactorization"]], "decreasingheckefactorizations (class in sage.combinat.crystals.fully_commutative_stable_grothendieck)": [[50, "sage.combinat.crystals.fully_commutative_stable_grothendieck.DecreasingHeckeFactorizations"]], "element (sage.combinat.crystals.fully_commutative_stable_grothendieck.decreasingheckefactorizations attribute)": [[50, "sage.combinat.crystals.fully_commutative_stable_grothendieck.DecreasingHeckeFactorizations.Element"]], "fullycommutativestablegrothendieckcrystal (class in sage.combinat.crystals.fully_commutative_stable_grothendieck)": [[50, "sage.combinat.crystals.fully_commutative_stable_grothendieck.FullyCommutativeStableGrothendieckCrystal"]], "fullycommutativestablegrothendieckcrystal.element (class in sage.combinat.crystals.fully_commutative_stable_grothendieck)": [[50, "sage.combinat.crystals.fully_commutative_stable_grothendieck.FullyCommutativeStableGrothendieckCrystal.Element"]], "bracketing() (sage.combinat.crystals.fully_commutative_stable_grothendieck.fullycommutativestablegrothendieckcrystal.element method)": [[50, "sage.combinat.crystals.fully_commutative_stable_grothendieck.FullyCommutativeStableGrothendieckCrystal.Element.bracketing"]], "e() (sage.combinat.crystals.fully_commutative_stable_grothendieck.fullycommutativestablegrothendieckcrystal.element method)": [[50, "sage.combinat.crystals.fully_commutative_stable_grothendieck.FullyCommutativeStableGrothendieckCrystal.Element.e"]], "f() (sage.combinat.crystals.fully_commutative_stable_grothendieck.fullycommutativestablegrothendieckcrystal.element method)": [[50, "sage.combinat.crystals.fully_commutative_stable_grothendieck.FullyCommutativeStableGrothendieckCrystal.Element.f"]], "list() (sage.combinat.crystals.fully_commutative_stable_grothendieck.decreasingheckefactorizations method)": [[50, "sage.combinat.crystals.fully_commutative_stable_grothendieck.DecreasingHeckeFactorizations.list"]], "module_generators() (sage.combinat.crystals.fully_commutative_stable_grothendieck.fullycommutativestablegrothendieckcrystal method)": [[50, "sage.combinat.crystals.fully_commutative_stable_grothendieck.FullyCommutativeStableGrothendieckCrystal.module_generators"]], "sage.combinat.crystals.fully_commutative_stable_grothendieck": [[50, "module-sage.combinat.crystals.fully_commutative_stable_grothendieck"]], "to_increasing_hecke_biword() (sage.combinat.crystals.fully_commutative_stable_grothendieck.decreasingheckefactorization method)": [[50, "sage.combinat.crystals.fully_commutative_stable_grothendieck.DecreasingHeckeFactorization.to_increasing_hecke_biword"]], "to_word() (sage.combinat.crystals.fully_commutative_stable_grothendieck.decreasingheckefactorization method)": [[50, "sage.combinat.crystals.fully_commutative_stable_grothendieck.DecreasingHeckeFactorization.to_word"]], "weight() (sage.combinat.crystals.fully_commutative_stable_grothendieck.decreasingheckefactorization method)": [[50, "sage.combinat.crystals.fully_commutative_stable_grothendieck.DecreasingHeckeFactorization.weight"]], "crystalofgeneralizedyoungwalls (class in sage.combinat.crystals.generalized_young_walls)": [[51, "sage.combinat.crystals.generalized_young_walls.CrystalOfGeneralizedYoungWalls"]], "crystalofgeneralizedyoungwallselement (class in sage.combinat.crystals.generalized_young_walls)": [[51, "sage.combinat.crystals.generalized_young_walls.CrystalOfGeneralizedYoungWallsElement"]], "element (sage.combinat.crystals.generalized_young_walls.crystalofgeneralizedyoungwalls attribute)": [[51, "sage.combinat.crystals.generalized_young_walls.CrystalOfGeneralizedYoungWalls.Element"]], "element (sage.combinat.crystals.generalized_young_walls.infinitycrystalofgeneralizedyoungwalls attribute)": [[51, "sage.combinat.crystals.generalized_young_walls.InfinityCrystalOfGeneralizedYoungWalls.Element"]], "epsilon() (sage.combinat.crystals.generalized_young_walls.generalizedyoungwall method)": [[51, "sage.combinat.crystals.generalized_young_walls.GeneralizedYoungWall.Epsilon"], [51, "sage.combinat.crystals.generalized_young_walls.GeneralizedYoungWall.epsilon"]], "generalizedyoungwall (class in sage.combinat.crystals.generalized_young_walls)": [[51, "sage.combinat.crystals.generalized_young_walls.GeneralizedYoungWall"]], "infinitycrystalofgeneralizedyoungwalls (class in sage.combinat.crystals.generalized_young_walls)": [[51, "sage.combinat.crystals.generalized_young_walls.InfinityCrystalOfGeneralizedYoungWalls"]], "phi() (sage.combinat.crystals.generalized_young_walls.generalizedyoungwall method)": [[51, "sage.combinat.crystals.generalized_young_walls.GeneralizedYoungWall.Phi"], [51, "sage.combinat.crystals.generalized_young_walls.GeneralizedYoungWall.phi"]], "a() (sage.combinat.crystals.generalized_young_walls.generalizedyoungwall method)": [[51, "sage.combinat.crystals.generalized_young_walls.GeneralizedYoungWall.a"]], "column() (sage.combinat.crystals.generalized_young_walls.generalizedyoungwall method)": [[51, "sage.combinat.crystals.generalized_young_walls.GeneralizedYoungWall.column"]], "content() (sage.combinat.crystals.generalized_young_walls.generalizedyoungwall method)": [[51, "sage.combinat.crystals.generalized_young_walls.GeneralizedYoungWall.content"]], "e() (sage.combinat.crystals.generalized_young_walls.crystalofgeneralizedyoungwallselement method)": [[51, "sage.combinat.crystals.generalized_young_walls.CrystalOfGeneralizedYoungWallsElement.e"]], "e() (sage.combinat.crystals.generalized_young_walls.generalizedyoungwall method)": [[51, "sage.combinat.crystals.generalized_young_walls.GeneralizedYoungWall.e"]], "f() (sage.combinat.crystals.generalized_young_walls.crystalofgeneralizedyoungwallselement method)": [[51, "sage.combinat.crystals.generalized_young_walls.CrystalOfGeneralizedYoungWallsElement.f"]], "f() (sage.combinat.crystals.generalized_young_walls.generalizedyoungwall method)": [[51, "sage.combinat.crystals.generalized_young_walls.GeneralizedYoungWall.f"]], "generate_signature() (sage.combinat.crystals.generalized_young_walls.generalizedyoungwall method)": [[51, "sage.combinat.crystals.generalized_young_walls.GeneralizedYoungWall.generate_signature"]], "in_highest_weight_crystal() (sage.combinat.crystals.generalized_young_walls.generalizedyoungwall method)": [[51, "sage.combinat.crystals.generalized_young_walls.GeneralizedYoungWall.in_highest_weight_crystal"]], "latex_large() (sage.combinat.crystals.generalized_young_walls.generalizedyoungwall method)": [[51, "sage.combinat.crystals.generalized_young_walls.GeneralizedYoungWall.latex_large"]], "number_of_parts() (sage.combinat.crystals.generalized_young_walls.generalizedyoungwall method)": [[51, "sage.combinat.crystals.generalized_young_walls.GeneralizedYoungWall.number_of_parts"]], "phi() (sage.combinat.crystals.generalized_young_walls.crystalofgeneralizedyoungwallselement method)": [[51, "sage.combinat.crystals.generalized_young_walls.CrystalOfGeneralizedYoungWallsElement.phi"]], "pp() (sage.combinat.crystals.generalized_young_walls.generalizedyoungwall method)": [[51, "sage.combinat.crystals.generalized_young_walls.GeneralizedYoungWall.pp"]], "raw_signature() (sage.combinat.crystals.generalized_young_walls.generalizedyoungwall method)": [[51, "sage.combinat.crystals.generalized_young_walls.GeneralizedYoungWall.raw_signature"]], "sage.combinat.crystals.generalized_young_walls": [[51, "module-sage.combinat.crystals.generalized_young_walls"]], "signature() (sage.combinat.crystals.generalized_young_walls.generalizedyoungwall method)": [[51, "sage.combinat.crystals.generalized_young_walls.GeneralizedYoungWall.signature"]], "sum_of_weighted_row_lengths() (sage.combinat.crystals.generalized_young_walls.generalizedyoungwall method)": [[51, "sage.combinat.crystals.generalized_young_walls.GeneralizedYoungWall.sum_of_weighted_row_lengths"]], "weight() (sage.combinat.crystals.generalized_young_walls.crystalofgeneralizedyoungwallselement method)": [[51, "sage.combinat.crystals.generalized_young_walls.CrystalOfGeneralizedYoungWallsElement.weight"]], "weight() (sage.combinat.crystals.generalized_young_walls.generalizedyoungwall method)": [[51, "sage.combinat.crystals.generalized_young_walls.GeneralizedYoungWall.weight"]], "element (sage.combinat.crystals.highest_weight_crystals.finitedimensionalhighestweightcrystal_typee attribute)": [[52, "sage.combinat.crystals.highest_weight_crystals.FiniteDimensionalHighestWeightCrystal_TypeE.Element"]], "finitedimensionalhighestweightcrystal_typee (class in sage.combinat.crystals.highest_weight_crystals)": [[52, "sage.combinat.crystals.highest_weight_crystals.FiniteDimensionalHighestWeightCrystal_TypeE"]], "finitedimensionalhighestweightcrystal_typee6 (class in sage.combinat.crystals.highest_weight_crystals)": [[52, "sage.combinat.crystals.highest_weight_crystals.FiniteDimensionalHighestWeightCrystal_TypeE6"]], "finitedimensionalhighestweightcrystal_typee7 (class in sage.combinat.crystals.highest_weight_crystals)": [[52, "sage.combinat.crystals.highest_weight_crystals.FiniteDimensionalHighestWeightCrystal_TypeE7"]], "highestweightcrystal() (in module sage.combinat.crystals.highest_weight_crystals)": [[52, "sage.combinat.crystals.highest_weight_crystals.HighestWeightCrystal"]], "module_generator() (sage.combinat.crystals.highest_weight_crystals.finitedimensionalhighestweightcrystal_typee method)": [[52, "sage.combinat.crystals.highest_weight_crystals.FiniteDimensionalHighestWeightCrystal_TypeE.module_generator"]], "sage.combinat.crystals.highest_weight_crystals": [[52, "module-sage.combinat.crystals.highest_weight_crystals"]], "inducedcrystal (class in sage.combinat.crystals.induced_structure)": [[53, "sage.combinat.crystals.induced_structure.InducedCrystal"]], "inducedcrystal.element (class in sage.combinat.crystals.induced_structure)": [[53, "sage.combinat.crystals.induced_structure.InducedCrystal.Element"]], "inducedfromcrystal (class in sage.combinat.crystals.induced_structure)": [[53, "sage.combinat.crystals.induced_structure.InducedFromCrystal"]], "inducedfromcrystal.element (class in sage.combinat.crystals.induced_structure)": [[53, "sage.combinat.crystals.induced_structure.InducedFromCrystal.Element"]], "cardinality() (sage.combinat.crystals.induced_structure.inducedcrystal method)": [[53, "sage.combinat.crystals.induced_structure.InducedCrystal.cardinality"]], "cardinality() (sage.combinat.crystals.induced_structure.inducedfromcrystal method)": [[53, "sage.combinat.crystals.induced_structure.InducedFromCrystal.cardinality"]], "e() (sage.combinat.crystals.induced_structure.inducedcrystal.element method)": [[53, "sage.combinat.crystals.induced_structure.InducedCrystal.Element.e"]], "e() (sage.combinat.crystals.induced_structure.inducedfromcrystal.element method)": [[53, "sage.combinat.crystals.induced_structure.InducedFromCrystal.Element.e"]], "epsilon() (sage.combinat.crystals.induced_structure.inducedcrystal.element method)": [[53, "sage.combinat.crystals.induced_structure.InducedCrystal.Element.epsilon"]], "epsilon() (sage.combinat.crystals.induced_structure.inducedfromcrystal.element method)": [[53, "sage.combinat.crystals.induced_structure.InducedFromCrystal.Element.epsilon"]], "f() (sage.combinat.crystals.induced_structure.inducedcrystal.element method)": [[53, "sage.combinat.crystals.induced_structure.InducedCrystal.Element.f"]], "f() (sage.combinat.crystals.induced_structure.inducedfromcrystal.element method)": [[53, "sage.combinat.crystals.induced_structure.InducedFromCrystal.Element.f"]], "phi() (sage.combinat.crystals.induced_structure.inducedcrystal.element method)": [[53, "sage.combinat.crystals.induced_structure.InducedCrystal.Element.phi"]], "phi() (sage.combinat.crystals.induced_structure.inducedfromcrystal.element method)": [[53, "sage.combinat.crystals.induced_structure.InducedFromCrystal.Element.phi"]], "sage.combinat.crystals.induced_structure": [[53, "module-sage.combinat.crystals.induced_structure"]], "weight() (sage.combinat.crystals.induced_structure.inducedcrystal.element method)": [[53, "sage.combinat.crystals.induced_structure.InducedCrystal.Element.weight"]], "weight() (sage.combinat.crystals.induced_structure.inducedfromcrystal.element method)": [[53, "sage.combinat.crystals.induced_structure.InducedFromCrystal.Element.weight"]], "dualinfinityqueercrystaloftableaux (class in sage.combinat.crystals.infinity_crystals)": [[54, "sage.combinat.crystals.infinity_crystals.DualInfinityQueerCrystalOfTableaux"]], "dualinfinityqueercrystaloftableaux.element (class in sage.combinat.crystals.infinity_crystals)": [[54, "sage.combinat.crystals.infinity_crystals.DualInfinityQueerCrystalOfTableaux.Element"]], "infinitycrystaloftableaux (class in sage.combinat.crystals.infinity_crystals)": [[54, "sage.combinat.crystals.infinity_crystals.InfinityCrystalOfTableaux"]], "infinitycrystaloftableaux.element (class in sage.combinat.crystals.infinity_crystals)": [[54, "sage.combinat.crystals.infinity_crystals.InfinityCrystalOfTableaux.Element"]], "infinitycrystaloftableauxtyped (class in sage.combinat.crystals.infinity_crystals)": [[54, "sage.combinat.crystals.infinity_crystals.InfinityCrystalOfTableauxTypeD"]], "infinitycrystaloftableauxtyped.element (class in sage.combinat.crystals.infinity_crystals)": [[54, "sage.combinat.crystals.infinity_crystals.InfinityCrystalOfTableauxTypeD.Element"]], "content() (sage.combinat.crystals.infinity_crystals.infinitycrystaloftableaux.element method)": [[54, "sage.combinat.crystals.infinity_crystals.InfinityCrystalOfTableaux.Element.content"]], "index_set() (sage.combinat.crystals.infinity_crystals.dualinfinityqueercrystaloftableaux method)": [[54, "sage.combinat.crystals.infinity_crystals.DualInfinityQueerCrystalOfTableaux.index_set"]], "module_generator() (sage.combinat.crystals.infinity_crystals.dualinfinityqueercrystaloftableaux method)": [[54, "sage.combinat.crystals.infinity_crystals.DualInfinityQueerCrystalOfTableaux.module_generator"]], "module_generator() (sage.combinat.crystals.infinity_crystals.infinitycrystaloftableaux method)": [[54, "sage.combinat.crystals.infinity_crystals.InfinityCrystalOfTableaux.module_generator"]], "module_generator() (sage.combinat.crystals.infinity_crystals.infinitycrystaloftableauxtyped method)": [[54, "sage.combinat.crystals.infinity_crystals.InfinityCrystalOfTableauxTypeD.module_generator"]], "phi() (sage.combinat.crystals.infinity_crystals.infinitycrystaloftableaux.element method)": [[54, "sage.combinat.crystals.infinity_crystals.InfinityCrystalOfTableaux.Element.phi"]], "reduced_form() (sage.combinat.crystals.infinity_crystals.infinitycrystaloftableaux.element method)": [[54, "sage.combinat.crystals.infinity_crystals.InfinityCrystalOfTableaux.Element.reduced_form"]], "sage.combinat.crystals.infinity_crystals": [[54, "module-sage.combinat.crystals.infinity_crystals"]], "seg() (sage.combinat.crystals.infinity_crystals.infinitycrystaloftableaux.element method)": [[54, "sage.combinat.crystals.infinity_crystals.InfinityCrystalOfTableaux.Element.seg"]], "weight() (sage.combinat.crystals.infinity_crystals.infinitycrystaloftableaux.element method)": [[54, "sage.combinat.crystals.infinity_crystals.InfinityCrystalOfTableaux.Element.weight"]], "crystalofkacmodule (class in sage.combinat.crystals.kac_modules)": [[55, "sage.combinat.crystals.kac_modules.CrystalOfKacModule"]], "crystalofkacmodule.element (class in sage.combinat.crystals.kac_modules)": [[55, "sage.combinat.crystals.kac_modules.CrystalOfKacModule.Element"]], "crystalofoddnegativeroots (class in sage.combinat.crystals.kac_modules)": [[55, "sage.combinat.crystals.kac_modules.CrystalOfOddNegativeRoots"]], "crystalofoddnegativeroots.element (class in sage.combinat.crystals.kac_modules)": [[55, "sage.combinat.crystals.kac_modules.CrystalOfOddNegativeRoots.Element"]], "e() (sage.combinat.crystals.kac_modules.crystalofkacmodule.element method)": [[55, "sage.combinat.crystals.kac_modules.CrystalOfKacModule.Element.e"]], "e() (sage.combinat.crystals.kac_modules.crystalofoddnegativeroots.element method)": [[55, "sage.combinat.crystals.kac_modules.CrystalOfOddNegativeRoots.Element.e"]], "epsilon() (sage.combinat.crystals.kac_modules.crystalofoddnegativeroots.element method)": [[55, "sage.combinat.crystals.kac_modules.CrystalOfOddNegativeRoots.Element.epsilon"]], "f() (sage.combinat.crystals.kac_modules.crystalofkacmodule.element method)": [[55, "sage.combinat.crystals.kac_modules.CrystalOfKacModule.Element.f"]], "f() (sage.combinat.crystals.kac_modules.crystalofoddnegativeroots.element method)": [[55, "sage.combinat.crystals.kac_modules.CrystalOfOddNegativeRoots.Element.f"]], "latex_dual() (in module sage.combinat.crystals.kac_modules)": [[55, "sage.combinat.crystals.kac_modules.latex_dual"]], "module_generator() (sage.combinat.crystals.kac_modules.crystalofkacmodule method)": [[55, "sage.combinat.crystals.kac_modules.CrystalOfKacModule.module_generator"]], "module_generator() (sage.combinat.crystals.kac_modules.crystalofoddnegativeroots method)": [[55, "sage.combinat.crystals.kac_modules.CrystalOfOddNegativeRoots.module_generator"]], "phi() (sage.combinat.crystals.kac_modules.crystalofoddnegativeroots.element method)": [[55, "sage.combinat.crystals.kac_modules.CrystalOfOddNegativeRoots.Element.phi"]], "sage.combinat.crystals.kac_modules": [[55, "module-sage.combinat.crystals.kac_modules"]], "to_dual_tableau() (in module sage.combinat.crystals.kac_modules)": [[55, "sage.combinat.crystals.kac_modules.to_dual_tableau"]], "weight() (sage.combinat.crystals.kac_modules.crystalofkacmodule.element method)": [[55, "sage.combinat.crystals.kac_modules.CrystalOfKacModule.Element.weight"]], "weight() (sage.combinat.crystals.kac_modules.crystalofoddnegativeroots.element method)": [[55, "sage.combinat.crystals.kac_modules.CrystalOfOddNegativeRoots.Element.weight"]], "a7_decomposition() (sage.combinat.crystals.kirillov_reshetikhin.kr_type_e7 method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_E7.A7_decomposition"]], "ambientretractmap (class in sage.combinat.crystals.kirillov_reshetikhin)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.AmbientRetractMap"]], "crystaldiagramautomorphism (class in sage.combinat.crystals.kirillov_reshetikhin)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.CrystalDiagramAutomorphism"]], "crystaloftableaux_e7 (class in sage.combinat.crystals.kirillov_reshetikhin)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.CrystalOfTableaux_E7"]], "element (sage.combinat.crystals.kirillov_reshetikhin.kr_type_a2 attribute)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_A2.Element"]], "element (sage.combinat.crystals.kirillov_reshetikhin.kr_type_bn attribute)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_Bn.Element"]], "element (sage.combinat.crystals.kirillov_reshetikhin.kr_type_c attribute)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_C.Element"]], "element (sage.combinat.crystals.kirillov_reshetikhin.kr_type_cn attribute)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_Cn.Element"]], "element (sage.combinat.crystals.kirillov_reshetikhin.kr_type_dn_twisted attribute)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_Dn_twisted.Element"]], "element (sage.combinat.crystals.kirillov_reshetikhin.kr_type_box attribute)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_box.Element"]], "element (sage.combinat.crystals.kirillov_reshetikhin.kirillovreshetikhincrystalfrompromotion attribute)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KirillovReshetikhinCrystalFromPromotion.Element"]], "element (sage.combinat.crystals.kirillov_reshetikhin.kirillovreshetikhingenericcrystal attribute)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KirillovReshetikhinGenericCrystal.Element"]], "kr_type_a (class in sage.combinat.crystals.kirillov_reshetikhin)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_A"]], "kr_type_a2 (class in sage.combinat.crystals.kirillov_reshetikhin)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_A2"]], "kr_type_a2element (class in sage.combinat.crystals.kirillov_reshetikhin)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_A2Element"]], "kr_type_bn (class in sage.combinat.crystals.kirillov_reshetikhin)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_Bn"]], "kr_type_bnelement (class in sage.combinat.crystals.kirillov_reshetikhin)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_BnElement"]], "kr_type_c (class in sage.combinat.crystals.kirillov_reshetikhin)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_C"]], "kr_type_celement (class in sage.combinat.crystals.kirillov_reshetikhin)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_CElement"]], "kr_type_cn (class in sage.combinat.crystals.kirillov_reshetikhin)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_Cn"]], "kr_type_cnelement (class in sage.combinat.crystals.kirillov_reshetikhin)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_CnElement"]], "kr_type_d_tri1 (class in sage.combinat.crystals.kirillov_reshetikhin)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_D_tri1"]], "kr_type_d_tri1.element (class in sage.combinat.crystals.kirillov_reshetikhin)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_D_tri1.Element"]], "kr_type_dn_twisted (class in sage.combinat.crystals.kirillov_reshetikhin)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_Dn_twisted"]], "kr_type_dn_twistedelement (class in sage.combinat.crystals.kirillov_reshetikhin)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_Dn_twistedElement"]], "kr_type_e6 (class in sage.combinat.crystals.kirillov_reshetikhin)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_E6"]], "kr_type_e7 (class in sage.combinat.crystals.kirillov_reshetikhin)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_E7"]], "kr_type_e7.element (class in sage.combinat.crystals.kirillov_reshetikhin)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_E7.Element"]], "kr_type_box (class in sage.combinat.crystals.kirillov_reshetikhin)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_box"]], "kr_type_boxelement (class in sage.combinat.crystals.kirillov_reshetikhin)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_boxElement"]], "kr_type_spin (class in sage.combinat.crystals.kirillov_reshetikhin)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_spin"]], "kr_type_vertical (class in sage.combinat.crystals.kirillov_reshetikhin)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_vertical"]], "kashiwaranakashimatableaux() (in module sage.combinat.crystals.kirillov_reshetikhin)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KashiwaraNakashimaTableaux"]], "kirillovreshetikhincrystal() (in module sage.combinat.crystals.kirillov_reshetikhin)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KirillovReshetikhinCrystal"]], "kirillovreshetikhincrystalfromlspaths() (in module sage.combinat.crystals.kirillov_reshetikhin)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KirillovReshetikhinCrystalFromLSPaths"]], "kirillovreshetikhincrystalfrompromotion (class in sage.combinat.crystals.kirillov_reshetikhin)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KirillovReshetikhinCrystalFromPromotion"]], "kirillovreshetikhincrystalfrompromotionelement (class in sage.combinat.crystals.kirillov_reshetikhin)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KirillovReshetikhinCrystalFromPromotionElement"]], "kirillovreshetikhingenericcrystal (class in sage.combinat.crystals.kirillov_reshetikhin)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KirillovReshetikhinGenericCrystal"]], "kirillovreshetikhingenericcrystalelement (class in sage.combinat.crystals.kirillov_reshetikhin)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KirillovReshetikhinGenericCrystalElement"]], "pmdiagram (class in sage.combinat.crystals.kirillov_reshetikhin)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.PMDiagram"]], "affine_weight() (sage.combinat.crystals.kirillov_reshetikhin.kr_type_e6 method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_E6.affine_weight"]], "ambient_crystal() (sage.combinat.crystals.kirillov_reshetikhin.kr_type_a2 method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_A2.ambient_crystal"]], "ambient_crystal() (sage.combinat.crystals.kirillov_reshetikhin.kr_type_bn method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_Bn.ambient_crystal"]], "ambient_crystal() (sage.combinat.crystals.kirillov_reshetikhin.kr_type_c method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_C.ambient_crystal"]], "ambient_crystal() (sage.combinat.crystals.kirillov_reshetikhin.kr_type_box method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_box.ambient_crystal"]], "ambient_dict_pm_diagrams() (sage.combinat.crystals.kirillov_reshetikhin.kr_type_a2 method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_A2.ambient_dict_pm_diagrams"]], "ambient_dict_pm_diagrams() (sage.combinat.crystals.kirillov_reshetikhin.kr_type_c method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_C.ambient_dict_pm_diagrams"]], "ambient_highest_weight_dict() (sage.combinat.crystals.kirillov_reshetikhin.kr_type_a2 method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_A2.ambient_highest_weight_dict"]], "ambient_highest_weight_dict() (sage.combinat.crystals.kirillov_reshetikhin.kr_type_bn method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_Bn.ambient_highest_weight_dict"]], "ambient_highest_weight_dict() (sage.combinat.crystals.kirillov_reshetikhin.kr_type_c method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_C.ambient_highest_weight_dict"]], "ambient_highest_weight_dict() (sage.combinat.crystals.kirillov_reshetikhin.kr_type_box method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_box.ambient_highest_weight_dict"]], "automorphism_on_affine_weight() (sage.combinat.crystals.kirillov_reshetikhin.kr_type_e6 method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_E6.automorphism_on_affine_weight"]], "classical_decomposition() (sage.combinat.crystals.kirillov_reshetikhin.kr_type_a method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_A.classical_decomposition"]], "classical_decomposition() (sage.combinat.crystals.kirillov_reshetikhin.kr_type_a2 method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_A2.classical_decomposition"]], "classical_decomposition() (sage.combinat.crystals.kirillov_reshetikhin.kr_type_bn method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_Bn.classical_decomposition"]], "classical_decomposition() (sage.combinat.crystals.kirillov_reshetikhin.kr_type_c method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_C.classical_decomposition"]], "classical_decomposition() (sage.combinat.crystals.kirillov_reshetikhin.kr_type_cn method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_Cn.classical_decomposition"]], "classical_decomposition() (sage.combinat.crystals.kirillov_reshetikhin.kr_type_d_tri1 method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_D_tri1.classical_decomposition"]], "classical_decomposition() (sage.combinat.crystals.kirillov_reshetikhin.kr_type_dn_twisted method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_Dn_twisted.classical_decomposition"]], "classical_decomposition() (sage.combinat.crystals.kirillov_reshetikhin.kr_type_e6 method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_E6.classical_decomposition"]], "classical_decomposition() (sage.combinat.crystals.kirillov_reshetikhin.kr_type_e7 method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_E7.classical_decomposition"]], "classical_decomposition() (sage.combinat.crystals.kirillov_reshetikhin.kr_type_box method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_box.classical_decomposition"]], "classical_decomposition() (sage.combinat.crystals.kirillov_reshetikhin.kr_type_spin method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_spin.classical_decomposition"]], "classical_decomposition() (sage.combinat.crystals.kirillov_reshetikhin.kr_type_vertical method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_vertical.classical_decomposition"]], "classically_highest_weight_vectors() (sage.combinat.crystals.kirillov_reshetikhin.kirillovreshetikhingenericcrystal method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KirillovReshetikhinGenericCrystal.classically_highest_weight_vectors"]], "coordinates() (sage.combinat.crystals.kirillov_reshetikhin.kr_type_d_tri1.element method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_D_tri1.Element.coordinates"]], "dynkin_diagram_automorphism() (sage.combinat.crystals.kirillov_reshetikhin.kr_type_a method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_A.dynkin_diagram_automorphism"]], "dynkin_diagram_automorphism() (sage.combinat.crystals.kirillov_reshetikhin.kr_type_e6 method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_E6.dynkin_diagram_automorphism"]], "dynkin_diagram_automorphism() (sage.combinat.crystals.kirillov_reshetikhin.kr_type_spin method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_spin.dynkin_diagram_automorphism"]], "dynkin_diagram_automorphism() (sage.combinat.crystals.kirillov_reshetikhin.kr_type_vertical method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_vertical.dynkin_diagram_automorphism"]], "e0() (sage.combinat.crystals.kirillov_reshetikhin.kr_type_a2element method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_A2Element.e0"]], "e0() (sage.combinat.crystals.kirillov_reshetikhin.kr_type_bnelement method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_BnElement.e0"]], "e0() (sage.combinat.crystals.kirillov_reshetikhin.kr_type_celement method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_CElement.e0"]], "e0() (sage.combinat.crystals.kirillov_reshetikhin.kr_type_cnelement method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_CnElement.e0"]], "e0() (sage.combinat.crystals.kirillov_reshetikhin.kr_type_d_tri1.element method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_D_tri1.Element.e0"]], "e0() (sage.combinat.crystals.kirillov_reshetikhin.kr_type_dn_twistedelement method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_Dn_twistedElement.e0"]], "e0() (sage.combinat.crystals.kirillov_reshetikhin.kr_type_e7.element method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_E7.Element.e0"]], "e0() (sage.combinat.crystals.kirillov_reshetikhin.kr_type_boxelement method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_boxElement.e0"]], "epsilon0() (sage.combinat.crystals.kirillov_reshetikhin.kr_type_a2element method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_A2Element.epsilon0"]], "epsilon0() (sage.combinat.crystals.kirillov_reshetikhin.kr_type_bnelement method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_BnElement.epsilon0"]], "epsilon0() (sage.combinat.crystals.kirillov_reshetikhin.kr_type_celement method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_CElement.epsilon0"]], "epsilon0() (sage.combinat.crystals.kirillov_reshetikhin.kr_type_cnelement method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_CnElement.epsilon0"]], "epsilon0() (sage.combinat.crystals.kirillov_reshetikhin.kr_type_d_tri1.element method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_D_tri1.Element.epsilon0"]], "epsilon0() (sage.combinat.crystals.kirillov_reshetikhin.kr_type_dn_twistedelement method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_Dn_twistedElement.epsilon0"]], "epsilon0() (sage.combinat.crystals.kirillov_reshetikhin.kr_type_boxelement method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_boxElement.epsilon0"]], "f0() (sage.combinat.crystals.kirillov_reshetikhin.kr_type_a2element method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_A2Element.f0"]], "f0() (sage.combinat.crystals.kirillov_reshetikhin.kr_type_bnelement method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_BnElement.f0"]], "f0() (sage.combinat.crystals.kirillov_reshetikhin.kr_type_celement method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_CElement.f0"]], "f0() (sage.combinat.crystals.kirillov_reshetikhin.kr_type_cnelement method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_CnElement.f0"]], "f0() (sage.combinat.crystals.kirillov_reshetikhin.kr_type_d_tri1.element method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_D_tri1.Element.f0"]], "f0() (sage.combinat.crystals.kirillov_reshetikhin.kr_type_dn_twistedelement method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_Dn_twistedElement.f0"]], "f0() (sage.combinat.crystals.kirillov_reshetikhin.kr_type_e7.element method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_E7.Element.f0"]], "f0() (sage.combinat.crystals.kirillov_reshetikhin.kr_type_boxelement method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_boxElement.f0"]], "from_a7_crystal() (sage.combinat.crystals.kirillov_reshetikhin.kr_type_e7 method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_E7.from_A7_crystal"]], "from_ambient_crystal() (sage.combinat.crystals.kirillov_reshetikhin.kr_type_a2 method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_A2.from_ambient_crystal"]], "from_ambient_crystal() (sage.combinat.crystals.kirillov_reshetikhin.kr_type_bn method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_Bn.from_ambient_crystal"]], "from_ambient_crystal() (sage.combinat.crystals.kirillov_reshetikhin.kr_type_c method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_C.from_ambient_crystal"]], "from_ambient_crystal() (sage.combinat.crystals.kirillov_reshetikhin.kr_type_box method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_box.from_ambient_crystal"]], "from_coordinates() (sage.combinat.crystals.kirillov_reshetikhin.kr_type_d_tri1 method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_D_tri1.from_coordinates"]], "from_highest_weight_vector_to_pm_diagram() (sage.combinat.crystals.kirillov_reshetikhin.kr_type_cn method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_Cn.from_highest_weight_vector_to_pm_diagram"]], "from_highest_weight_vector_to_pm_diagram() (sage.combinat.crystals.kirillov_reshetikhin.kr_type_dn_twisted method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_Dn_twisted.from_highest_weight_vector_to_pm_diagram"]], "from_highest_weight_vector_to_pm_diagram() (sage.combinat.crystals.kirillov_reshetikhin.kr_type_vertical method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_vertical.from_highest_weight_vector_to_pm_diagram"]], "from_pm_diagram_to_highest_weight_vector() (sage.combinat.crystals.kirillov_reshetikhin.kr_type_cn method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_Cn.from_pm_diagram_to_highest_weight_vector"]], "from_pm_diagram_to_highest_weight_vector() (sage.combinat.crystals.kirillov_reshetikhin.kr_type_dn_twisted method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_Dn_twisted.from_pm_diagram_to_highest_weight_vector"]], "from_pm_diagram_to_highest_weight_vector() (sage.combinat.crystals.kirillov_reshetikhin.kr_type_vertical method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_vertical.from_pm_diagram_to_highest_weight_vector"]], "heights_of_addable_plus() (sage.combinat.crystals.kirillov_reshetikhin.pmdiagram method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.PMDiagram.heights_of_addable_plus"]], "heights_of_minus() (sage.combinat.crystals.kirillov_reshetikhin.pmdiagram method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.PMDiagram.heights_of_minus"]], "highest_weight_dict() (sage.combinat.crystals.kirillov_reshetikhin.kr_type_a2 method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_A2.highest_weight_dict"]], "highest_weight_dict() (sage.combinat.crystals.kirillov_reshetikhin.kr_type_bn method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_Bn.highest_weight_dict"]], "highest_weight_dict() (sage.combinat.crystals.kirillov_reshetikhin.kr_type_c method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_C.highest_weight_dict"]], "highest_weight_dict() (sage.combinat.crystals.kirillov_reshetikhin.kr_type_e6 method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_E6.highest_weight_dict"]], "highest_weight_dict() (sage.combinat.crystals.kirillov_reshetikhin.kr_type_box method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_box.highest_weight_dict"]], "highest_weight_dict_inv() (sage.combinat.crystals.kirillov_reshetikhin.kr_type_e6 method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_E6.highest_weight_dict_inv"]], "horizontal_dominoes_removed() (in module sage.combinat.crystals.kirillov_reshetikhin)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.horizontal_dominoes_removed"]], "hw_auxiliary() (sage.combinat.crystals.kirillov_reshetikhin.kr_type_e6 method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_E6.hw_auxiliary"]], "inner_shape() (sage.combinat.crystals.kirillov_reshetikhin.pmdiagram method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.PMDiagram.inner_shape"]], "intermediate_shape() (sage.combinat.crystals.kirillov_reshetikhin.pmdiagram method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.PMDiagram.intermediate_shape"]], "is_embedding() (sage.combinat.crystals.kirillov_reshetikhin.crystaldiagramautomorphism method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.CrystalDiagramAutomorphism.is_embedding"]], "is_isomorphism() (sage.combinat.crystals.kirillov_reshetikhin.crystaldiagramautomorphism method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.CrystalDiagramAutomorphism.is_isomorphism"]], "is_strict() (sage.combinat.crystals.kirillov_reshetikhin.crystaldiagramautomorphism method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.CrystalDiagramAutomorphism.is_strict"]], "is_surjective() (sage.combinat.crystals.kirillov_reshetikhin.crystaldiagramautomorphism method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.CrystalDiagramAutomorphism.is_surjective"]], "kirillov_reshetikhin_tableaux() (sage.combinat.crystals.kirillov_reshetikhin.kirillovreshetikhingenericcrystal method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KirillovReshetikhinGenericCrystal.kirillov_reshetikhin_tableaux"]], "lusztig_involution() (sage.combinat.crystals.kirillov_reshetikhin.kirillovreshetikhingenericcrystalelement method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KirillovReshetikhinGenericCrystalElement.lusztig_involution"]], "module_generator() (sage.combinat.crystals.kirillov_reshetikhin.crystaloftableaux_e7 method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.CrystalOfTableaux_E7.module_generator"]], "module_generator() (sage.combinat.crystals.kirillov_reshetikhin.kr_type_a2 method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_A2.module_generator"]], "module_generator() (sage.combinat.crystals.kirillov_reshetikhin.kirillovreshetikhingenericcrystal method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KirillovReshetikhinGenericCrystal.module_generator"]], "outer_shape() (sage.combinat.crystals.kirillov_reshetikhin.pmdiagram method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.PMDiagram.outer_shape"]], "partitions_in_box() (in module sage.combinat.crystals.kirillov_reshetikhin)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.partitions_in_box"]], "phi0() (sage.combinat.crystals.kirillov_reshetikhin.kr_type_a2element method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_A2Element.phi0"]], "phi0() (sage.combinat.crystals.kirillov_reshetikhin.kr_type_bnelement method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_BnElement.phi0"]], "phi0() (sage.combinat.crystals.kirillov_reshetikhin.kr_type_celement method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_CElement.phi0"]], "phi0() (sage.combinat.crystals.kirillov_reshetikhin.kr_type_cnelement method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_CnElement.phi0"]], "phi0() (sage.combinat.crystals.kirillov_reshetikhin.kr_type_d_tri1.element method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_D_tri1.Element.phi0"]], "phi0() (sage.combinat.crystals.kirillov_reshetikhin.kr_type_dn_twistedelement method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_Dn_twistedElement.phi0"]], "phi0() (sage.combinat.crystals.kirillov_reshetikhin.kr_type_boxelement method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_boxElement.phi0"]], "pp() (sage.combinat.crystals.kirillov_reshetikhin.kirillovreshetikhingenericcrystalelement method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KirillovReshetikhinGenericCrystalElement.pp"]], "pp() (sage.combinat.crystals.kirillov_reshetikhin.pmdiagram method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.PMDiagram.pp"]], "promotion() (sage.combinat.crystals.kirillov_reshetikhin.kr_type_a method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_A.promotion"]], "promotion() (sage.combinat.crystals.kirillov_reshetikhin.kr_type_e6 method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_E6.promotion"]], "promotion() (sage.combinat.crystals.kirillov_reshetikhin.kr_type_spin method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_spin.promotion"]], "promotion() (sage.combinat.crystals.kirillov_reshetikhin.kr_type_vertical method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_vertical.promotion"]], "promotion_inverse() (sage.combinat.crystals.kirillov_reshetikhin.kr_type_a method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_A.promotion_inverse"]], "promotion_inverse() (sage.combinat.crystals.kirillov_reshetikhin.kr_type_e6 method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_E6.promotion_inverse"]], "promotion_inverse() (sage.combinat.crystals.kirillov_reshetikhin.kr_type_spin method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_spin.promotion_inverse"]], "promotion_inverse() (sage.combinat.crystals.kirillov_reshetikhin.kr_type_vertical method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_vertical.promotion_inverse"]], "promotion_on_highest_weight_vector() (sage.combinat.crystals.kirillov_reshetikhin.kr_type_vertical method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_vertical.promotion_on_highest_weight_vector"]], "promotion_on_highest_weight_vectors() (sage.combinat.crystals.kirillov_reshetikhin.kr_type_e6 method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_E6.promotion_on_highest_weight_vectors"]], "promotion_on_highest_weight_vectors() (sage.combinat.crystals.kirillov_reshetikhin.kr_type_spin method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_spin.promotion_on_highest_weight_vectors"]], "promotion_on_highest_weight_vectors_function() (sage.combinat.crystals.kirillov_reshetikhin.kr_type_e6 method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_E6.promotion_on_highest_weight_vectors_function"]], "promotion_on_highest_weight_vectors_inverse() (sage.combinat.crystals.kirillov_reshetikhin.kr_type_spin method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_spin.promotion_on_highest_weight_vectors_inverse"]], "r() (sage.combinat.crystals.kirillov_reshetikhin.kirillovreshetikhingenericcrystal method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KirillovReshetikhinGenericCrystal.r"]], "s() (sage.combinat.crystals.kirillov_reshetikhin.kirillovreshetikhingenericcrystal method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KirillovReshetikhinGenericCrystal.s"]], "sage.combinat.crystals.kirillov_reshetikhin": [[56, "module-sage.combinat.crystals.kirillov_reshetikhin"]], "sigma() (sage.combinat.crystals.kirillov_reshetikhin.pmdiagram method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.PMDiagram.sigma"]], "similarity_factor() (sage.combinat.crystals.kirillov_reshetikhin.kr_type_bn method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_Bn.similarity_factor"]], "similarity_factor() (sage.combinat.crystals.kirillov_reshetikhin.kr_type_box method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_box.similarity_factor"]], "to_a7_crystal() (sage.combinat.crystals.kirillov_reshetikhin.kr_type_e7 method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_E7.to_A7_crystal"]], "to_ambient_crystal() (sage.combinat.crystals.kirillov_reshetikhin.kr_type_a2 method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_A2.to_ambient_crystal"]], "to_ambient_crystal() (sage.combinat.crystals.kirillov_reshetikhin.kr_type_bn method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_Bn.to_ambient_crystal"]], "to_ambient_crystal() (sage.combinat.crystals.kirillov_reshetikhin.kr_type_c method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_C.to_ambient_crystal"]], "to_ambient_crystal() (sage.combinat.crystals.kirillov_reshetikhin.kr_type_box method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KR_type_box.to_ambient_crystal"]], "to_kirillov_reshetikhin_tableau() (sage.combinat.crystals.kirillov_reshetikhin.kirillovreshetikhingenericcrystalelement method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KirillovReshetikhinGenericCrystalElement.to_kirillov_reshetikhin_tableau"]], "to_tableau() (sage.combinat.crystals.kirillov_reshetikhin.kirillovreshetikhingenericcrystalelement method)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.KirillovReshetikhinGenericCrystalElement.to_tableau"]], "vertical_dominoes_removed() (in module sage.combinat.crystals.kirillov_reshetikhin)": [[56, "sage.combinat.crystals.kirillov_reshetikhin.vertical_dominoes_removed"]], "kyotopathmodel (class in sage.combinat.crystals.kyoto_path_model)": [[57, "sage.combinat.crystals.kyoto_path_model.KyotoPathModel"]], "kyotopathmodel.element (class in sage.combinat.crystals.kyoto_path_model)": [[57, "sage.combinat.crystals.kyoto_path_model.KyotoPathModel.Element"]], "e() (sage.combinat.crystals.kyoto_path_model.kyotopathmodel.element method)": [[57, "sage.combinat.crystals.kyoto_path_model.KyotoPathModel.Element.e"]], "epsilon() (sage.combinat.crystals.kyoto_path_model.kyotopathmodel.element method)": [[57, "sage.combinat.crystals.kyoto_path_model.KyotoPathModel.Element.epsilon"]], "f() (sage.combinat.crystals.kyoto_path_model.kyotopathmodel.element method)": [[57, "sage.combinat.crystals.kyoto_path_model.KyotoPathModel.Element.f"]], "finite_tensor_product() (sage.combinat.crystals.kyoto_path_model.kyotopathmodel method)": [[57, "sage.combinat.crystals.kyoto_path_model.KyotoPathModel.finite_tensor_product"]], "phi() (sage.combinat.crystals.kyoto_path_model.kyotopathmodel.element method)": [[57, "sage.combinat.crystals.kyoto_path_model.KyotoPathModel.Element.phi"]], "sage.combinat.crystals.kyoto_path_model": [[57, "module-sage.combinat.crystals.kyoto_path_model"]], "truncate() (sage.combinat.crystals.kyoto_path_model.kyotopathmodel.element method)": [[57, "sage.combinat.crystals.kyoto_path_model.KyotoPathModel.Element.truncate"]], "weight() (sage.combinat.crystals.kyoto_path_model.kyotopathmodel.element method)": [[57, "sage.combinat.crystals.kyoto_path_model.KyotoPathModel.Element.weight"]], "weight_lattice_realization() (sage.combinat.crystals.kyoto_path_model.kyotopathmodel method)": [[57, "sage.combinat.crystals.kyoto_path_model.KyotoPathModel.weight_lattice_realization"]], "bkkletter (class in sage.combinat.crystals.letters)": [[58, "sage.combinat.crystals.letters.BKKLetter"]], "classicalcrystalofletters (class in sage.combinat.crystals.letters)": [[58, "sage.combinat.crystals.letters.ClassicalCrystalOfLetters"]], "classicalcrystalofletterswrapped (class in sage.combinat.crystals.letters)": [[58, "sage.combinat.crystals.letters.ClassicalCrystalOfLettersWrapped"]], "crystalofbkkletters (class in sage.combinat.crystals.letters)": [[58, "sage.combinat.crystals.letters.CrystalOfBKKLetters"]], "crystalofletters() (in module sage.combinat.crystals.letters)": [[58, "sage.combinat.crystals.letters.CrystalOfLetters"]], "crystalofqueerletters (class in sage.combinat.crystals.letters)": [[58, "sage.combinat.crystals.letters.CrystalOfQueerLetters"]], "crystal_of_letters_type_a_element (class in sage.combinat.crystals.letters)": [[58, "sage.combinat.crystals.letters.Crystal_of_letters_type_A_element"]], "crystal_of_letters_type_b_element (class in sage.combinat.crystals.letters)": [[58, "sage.combinat.crystals.letters.Crystal_of_letters_type_B_element"]], "crystal_of_letters_type_c_element (class in sage.combinat.crystals.letters)": [[58, "sage.combinat.crystals.letters.Crystal_of_letters_type_C_element"]], "crystal_of_letters_type_d_element (class in sage.combinat.crystals.letters)": [[58, "sage.combinat.crystals.letters.Crystal_of_letters_type_D_element"]], "crystal_of_letters_type_e6_element (class in sage.combinat.crystals.letters)": [[58, "sage.combinat.crystals.letters.Crystal_of_letters_type_E6_element"]], "crystal_of_letters_type_e6_element_dual (class in sage.combinat.crystals.letters)": [[58, "sage.combinat.crystals.letters.Crystal_of_letters_type_E6_element_dual"]], "crystal_of_letters_type_e7_element (class in sage.combinat.crystals.letters)": [[58, "sage.combinat.crystals.letters.Crystal_of_letters_type_E7_element"]], "crystal_of_letters_type_g_element (class in sage.combinat.crystals.letters)": [[58, "sage.combinat.crystals.letters.Crystal_of_letters_type_G_element"]], "element (sage.combinat.crystals.letters.crystalofbkkletters attribute)": [[58, "sage.combinat.crystals.letters.CrystalOfBKKLetters.Element"]], "element (sage.combinat.crystals.letters.crystalofqueerletters attribute)": [[58, "sage.combinat.crystals.letters.CrystalOfQueerLetters.Element"]], "emptyletter (class in sage.combinat.crystals.letters)": [[58, "sage.combinat.crystals.letters.EmptyLetter"]], "letter (class in sage.combinat.crystals.letters)": [[58, "sage.combinat.crystals.letters.Letter"]], "lettertuple (class in sage.combinat.crystals.letters)": [[58, "sage.combinat.crystals.letters.LetterTuple"]], "letterwrapped (class in sage.combinat.crystals.letters)": [[58, "sage.combinat.crystals.letters.LetterWrapped"]], "queerletter_element (class in sage.combinat.crystals.letters)": [[58, "sage.combinat.crystals.letters.QueerLetter_element"]], "e() (sage.combinat.crystals.letters.bkkletter method)": [[58, "sage.combinat.crystals.letters.BKKLetter.e"]], "e() (sage.combinat.crystals.letters.crystal_of_letters_type_a_element method)": [[58, "sage.combinat.crystals.letters.Crystal_of_letters_type_A_element.e"]], "e() (sage.combinat.crystals.letters.crystal_of_letters_type_b_element method)": [[58, "sage.combinat.crystals.letters.Crystal_of_letters_type_B_element.e"]], "e() (sage.combinat.crystals.letters.crystal_of_letters_type_c_element method)": [[58, "sage.combinat.crystals.letters.Crystal_of_letters_type_C_element.e"]], "e() (sage.combinat.crystals.letters.crystal_of_letters_type_d_element method)": [[58, "sage.combinat.crystals.letters.Crystal_of_letters_type_D_element.e"]], "e() (sage.combinat.crystals.letters.crystal_of_letters_type_e6_element method)": [[58, "sage.combinat.crystals.letters.Crystal_of_letters_type_E6_element.e"]], "e() (sage.combinat.crystals.letters.crystal_of_letters_type_e6_element_dual method)": [[58, "sage.combinat.crystals.letters.Crystal_of_letters_type_E6_element_dual.e"]], "e() (sage.combinat.crystals.letters.crystal_of_letters_type_e7_element method)": [[58, "sage.combinat.crystals.letters.Crystal_of_letters_type_E7_element.e"]], "e() (sage.combinat.crystals.letters.crystal_of_letters_type_g_element method)": [[58, "sage.combinat.crystals.letters.Crystal_of_letters_type_G_element.e"]], "e() (sage.combinat.crystals.letters.emptyletter method)": [[58, "sage.combinat.crystals.letters.EmptyLetter.e"]], "e() (sage.combinat.crystals.letters.letterwrapped method)": [[58, "sage.combinat.crystals.letters.LetterWrapped.e"]], "e() (sage.combinat.crystals.letters.queerletter_element method)": [[58, "sage.combinat.crystals.letters.QueerLetter_element.e"]], "epsilon() (sage.combinat.crystals.letters.crystal_of_letters_type_a_element method)": [[58, "sage.combinat.crystals.letters.Crystal_of_letters_type_A_element.epsilon"]], "epsilon() (sage.combinat.crystals.letters.crystal_of_letters_type_b_element method)": [[58, "sage.combinat.crystals.letters.Crystal_of_letters_type_B_element.epsilon"]], "epsilon() (sage.combinat.crystals.letters.crystal_of_letters_type_c_element method)": [[58, "sage.combinat.crystals.letters.Crystal_of_letters_type_C_element.epsilon"]], "epsilon() (sage.combinat.crystals.letters.crystal_of_letters_type_d_element method)": [[58, "sage.combinat.crystals.letters.Crystal_of_letters_type_D_element.epsilon"]], "epsilon() (sage.combinat.crystals.letters.crystal_of_letters_type_g_element method)": [[58, "sage.combinat.crystals.letters.Crystal_of_letters_type_G_element.epsilon"]], "epsilon() (sage.combinat.crystals.letters.emptyletter method)": [[58, "sage.combinat.crystals.letters.EmptyLetter.epsilon"]], "epsilon() (sage.combinat.crystals.letters.lettertuple method)": [[58, "sage.combinat.crystals.letters.LetterTuple.epsilon"]], "epsilon() (sage.combinat.crystals.letters.letterwrapped method)": [[58, "sage.combinat.crystals.letters.LetterWrapped.epsilon"]], "epsilon() (sage.combinat.crystals.letters.queerletter_element method)": [[58, "sage.combinat.crystals.letters.QueerLetter_element.epsilon"]], "f() (sage.combinat.crystals.letters.bkkletter method)": [[58, "sage.combinat.crystals.letters.BKKLetter.f"]], "f() (sage.combinat.crystals.letters.crystal_of_letters_type_a_element method)": [[58, "sage.combinat.crystals.letters.Crystal_of_letters_type_A_element.f"]], "f() (sage.combinat.crystals.letters.crystal_of_letters_type_b_element method)": [[58, "sage.combinat.crystals.letters.Crystal_of_letters_type_B_element.f"]], "f() (sage.combinat.crystals.letters.crystal_of_letters_type_c_element method)": [[58, "sage.combinat.crystals.letters.Crystal_of_letters_type_C_element.f"]], "f() (sage.combinat.crystals.letters.crystal_of_letters_type_d_element method)": [[58, "sage.combinat.crystals.letters.Crystal_of_letters_type_D_element.f"]], "f() (sage.combinat.crystals.letters.crystal_of_letters_type_e6_element method)": [[58, "sage.combinat.crystals.letters.Crystal_of_letters_type_E6_element.f"]], "f() (sage.combinat.crystals.letters.crystal_of_letters_type_e6_element_dual method)": [[58, "sage.combinat.crystals.letters.Crystal_of_letters_type_E6_element_dual.f"]], "f() (sage.combinat.crystals.letters.crystal_of_letters_type_e7_element method)": [[58, "sage.combinat.crystals.letters.Crystal_of_letters_type_E7_element.f"]], "f() (sage.combinat.crystals.letters.crystal_of_letters_type_g_element method)": [[58, "sage.combinat.crystals.letters.Crystal_of_letters_type_G_element.f"]], "f() (sage.combinat.crystals.letters.emptyletter method)": [[58, "sage.combinat.crystals.letters.EmptyLetter.f"]], "f() (sage.combinat.crystals.letters.letterwrapped method)": [[58, "sage.combinat.crystals.letters.LetterWrapped.f"]], "f() (sage.combinat.crystals.letters.queerletter_element method)": [[58, "sage.combinat.crystals.letters.QueerLetter_element.f"]], "index_set() (sage.combinat.crystals.letters.crystalofqueerletters method)": [[58, "sage.combinat.crystals.letters.CrystalOfQueerLetters.index_set"]], "lift() (sage.combinat.crystals.letters.crystal_of_letters_type_e6_element_dual method)": [[58, "sage.combinat.crystals.letters.Crystal_of_letters_type_E6_element_dual.lift"]], "list() (sage.combinat.crystals.letters.classicalcrystalofletters method)": [[58, "sage.combinat.crystals.letters.ClassicalCrystalOfLetters.list"]], "lt_elements() (sage.combinat.crystals.letters.classicalcrystalofletters method)": [[58, "sage.combinat.crystals.letters.ClassicalCrystalOfLetters.lt_elements"]], "phi() (sage.combinat.crystals.letters.crystal_of_letters_type_a_element method)": [[58, "sage.combinat.crystals.letters.Crystal_of_letters_type_A_element.phi"]], "phi() (sage.combinat.crystals.letters.crystal_of_letters_type_b_element method)": [[58, "sage.combinat.crystals.letters.Crystal_of_letters_type_B_element.phi"]], "phi() (sage.combinat.crystals.letters.crystal_of_letters_type_c_element method)": [[58, "sage.combinat.crystals.letters.Crystal_of_letters_type_C_element.phi"]], "phi() (sage.combinat.crystals.letters.crystal_of_letters_type_d_element method)": [[58, "sage.combinat.crystals.letters.Crystal_of_letters_type_D_element.phi"]], "phi() (sage.combinat.crystals.letters.crystal_of_letters_type_g_element method)": [[58, "sage.combinat.crystals.letters.Crystal_of_letters_type_G_element.phi"]], "phi() (sage.combinat.crystals.letters.emptyletter method)": [[58, "sage.combinat.crystals.letters.EmptyLetter.phi"]], "phi() (sage.combinat.crystals.letters.lettertuple method)": [[58, "sage.combinat.crystals.letters.LetterTuple.phi"]], "phi() (sage.combinat.crystals.letters.letterwrapped method)": [[58, "sage.combinat.crystals.letters.LetterWrapped.phi"]], "phi() (sage.combinat.crystals.letters.queerletter_element method)": [[58, "sage.combinat.crystals.letters.QueerLetter_element.phi"]], "retract() (sage.combinat.crystals.letters.crystal_of_letters_type_e6_element_dual method)": [[58, "sage.combinat.crystals.letters.Crystal_of_letters_type_E6_element_dual.retract"]], "sage.combinat.crystals.letters": [[58, "module-sage.combinat.crystals.letters"]], "value (sage.combinat.crystals.letters.emptyletter attribute)": [[58, "sage.combinat.crystals.letters.EmptyLetter.value"]], "value (sage.combinat.crystals.letters.letter attribute)": [[58, "sage.combinat.crystals.letters.Letter.value"]], "value (sage.combinat.crystals.letters.lettertuple attribute)": [[58, "sage.combinat.crystals.letters.LetterTuple.value"]], "value (sage.combinat.crystals.letters.letterwrapped attribute)": [[58, "sage.combinat.crystals.letters.LetterWrapped.value"]], "weight() (sage.combinat.crystals.letters.bkkletter method)": [[58, "sage.combinat.crystals.letters.BKKLetter.weight"]], "weight() (sage.combinat.crystals.letters.crystal_of_letters_type_a_element method)": [[58, "sage.combinat.crystals.letters.Crystal_of_letters_type_A_element.weight"]], "weight() (sage.combinat.crystals.letters.crystal_of_letters_type_b_element method)": [[58, "sage.combinat.crystals.letters.Crystal_of_letters_type_B_element.weight"]], "weight() (sage.combinat.crystals.letters.crystal_of_letters_type_c_element method)": [[58, "sage.combinat.crystals.letters.Crystal_of_letters_type_C_element.weight"]], "weight() (sage.combinat.crystals.letters.crystal_of_letters_type_d_element method)": [[58, "sage.combinat.crystals.letters.Crystal_of_letters_type_D_element.weight"]], "weight() (sage.combinat.crystals.letters.crystal_of_letters_type_e6_element method)": [[58, "sage.combinat.crystals.letters.Crystal_of_letters_type_E6_element.weight"]], "weight() (sage.combinat.crystals.letters.crystal_of_letters_type_e6_element_dual method)": [[58, "sage.combinat.crystals.letters.Crystal_of_letters_type_E6_element_dual.weight"]], "weight() (sage.combinat.crystals.letters.crystal_of_letters_type_e7_element method)": [[58, "sage.combinat.crystals.letters.Crystal_of_letters_type_E7_element.weight"]], "weight() (sage.combinat.crystals.letters.crystal_of_letters_type_g_element method)": [[58, "sage.combinat.crystals.letters.Crystal_of_letters_type_G_element.weight"]], "weight() (sage.combinat.crystals.letters.emptyletter method)": [[58, "sage.combinat.crystals.letters.EmptyLetter.weight"]], "weight() (sage.combinat.crystals.letters.queerletter_element method)": [[58, "sage.combinat.crystals.letters.QueerLetter_element.weight"]], "crystaloflspaths (class in sage.combinat.crystals.littelmann_path)": [[59, "sage.combinat.crystals.littelmann_path.CrystalOfLSPaths"]], "crystaloflspaths.element (class in sage.combinat.crystals.littelmann_path)": [[59, "sage.combinat.crystals.littelmann_path.CrystalOfLSPaths.Element"]], "crystalofprojectedlevelzerolspaths (class in sage.combinat.crystals.littelmann_path)": [[59, "sage.combinat.crystals.littelmann_path.CrystalOfProjectedLevelZeroLSPaths"]], "crystalofprojectedlevelzerolspaths.element (class in sage.combinat.crystals.littelmann_path)": [[59, "sage.combinat.crystals.littelmann_path.CrystalOfProjectedLevelZeroLSPaths.Element"]], "infinitycrystaloflspaths (class in sage.combinat.crystals.littelmann_path)": [[59, "sage.combinat.crystals.littelmann_path.InfinityCrystalOfLSPaths"]], "infinitycrystaloflspaths.element (class in sage.combinat.crystals.littelmann_path)": [[59, "sage.combinat.crystals.littelmann_path.InfinityCrystalOfLSPaths.Element"]], "classically_highest_weight_vectors() (sage.combinat.crystals.littelmann_path.crystalofprojectedlevelzerolspaths method)": [[59, "sage.combinat.crystals.littelmann_path.CrystalOfProjectedLevelZeroLSPaths.classically_highest_weight_vectors"]], "compress() (sage.combinat.crystals.littelmann_path.crystaloflspaths.element method)": [[59, "sage.combinat.crystals.littelmann_path.CrystalOfLSPaths.Element.compress"]], "dualize() (sage.combinat.crystals.littelmann_path.crystaloflspaths.element method)": [[59, "sage.combinat.crystals.littelmann_path.CrystalOfLSPaths.Element.dualize"]], "e() (sage.combinat.crystals.littelmann_path.crystaloflspaths.element method)": [[59, "sage.combinat.crystals.littelmann_path.CrystalOfLSPaths.Element.e"]], "e() (sage.combinat.crystals.littelmann_path.infinitycrystaloflspaths.element method)": [[59, "sage.combinat.crystals.littelmann_path.InfinityCrystalOfLSPaths.Element.e"]], "endpoint() (sage.combinat.crystals.littelmann_path.crystaloflspaths.element method)": [[59, "sage.combinat.crystals.littelmann_path.CrystalOfLSPaths.Element.endpoint"]], "energy_function() (sage.combinat.crystals.littelmann_path.crystalofprojectedlevelzerolspaths.element method)": [[59, "sage.combinat.crystals.littelmann_path.CrystalOfProjectedLevelZeroLSPaths.Element.energy_function"]], "epsilon() (sage.combinat.crystals.littelmann_path.crystaloflspaths.element method)": [[59, "sage.combinat.crystals.littelmann_path.CrystalOfLSPaths.Element.epsilon"]], "f() (sage.combinat.crystals.littelmann_path.crystaloflspaths.element method)": [[59, "sage.combinat.crystals.littelmann_path.CrystalOfLSPaths.Element.f"]], "f() (sage.combinat.crystals.littelmann_path.infinitycrystaloflspaths.element method)": [[59, "sage.combinat.crystals.littelmann_path.InfinityCrystalOfLSPaths.Element.f"]], "is_perfect() (sage.combinat.crystals.littelmann_path.crystalofprojectedlevelzerolspaths method)": [[59, "sage.combinat.crystals.littelmann_path.CrystalOfProjectedLevelZeroLSPaths.is_perfect"]], "maximal_vector() (sage.combinat.crystals.littelmann_path.crystalofprojectedlevelzerolspaths method)": [[59, "sage.combinat.crystals.littelmann_path.CrystalOfProjectedLevelZeroLSPaths.maximal_vector"]], "module_generator() (sage.combinat.crystals.littelmann_path.infinitycrystaloflspaths method)": [[59, "sage.combinat.crystals.littelmann_path.InfinityCrystalOfLSPaths.module_generator"]], "one_dimensional_configuration_sum() (sage.combinat.crystals.littelmann_path.crystalofprojectedlevelzerolspaths method)": [[59, "sage.combinat.crystals.littelmann_path.CrystalOfProjectedLevelZeroLSPaths.one_dimensional_configuration_sum"]], "phi() (sage.combinat.crystals.littelmann_path.crystaloflspaths.element method)": [[59, "sage.combinat.crystals.littelmann_path.CrystalOfLSPaths.Element.phi"]], "phi() (sage.combinat.crystals.littelmann_path.infinitycrystaloflspaths.element method)": [[59, "sage.combinat.crystals.littelmann_path.InfinityCrystalOfLSPaths.Element.phi"]], "positively_parallel_weights() (in module sage.combinat.crystals.littelmann_path)": [[59, "sage.combinat.crystals.littelmann_path.positively_parallel_weights"]], "reflect_step() (sage.combinat.crystals.littelmann_path.crystaloflspaths.element method)": [[59, "sage.combinat.crystals.littelmann_path.CrystalOfLSPaths.Element.reflect_step"]], "s() (sage.combinat.crystals.littelmann_path.crystaloflspaths.element method)": [[59, "sage.combinat.crystals.littelmann_path.CrystalOfLSPaths.Element.s"]], "sage.combinat.crystals.littelmann_path": [[59, "module-sage.combinat.crystals.littelmann_path"]], "scalar_factors() (sage.combinat.crystals.littelmann_path.crystalofprojectedlevelzerolspaths.element method)": [[59, "sage.combinat.crystals.littelmann_path.CrystalOfProjectedLevelZeroLSPaths.Element.scalar_factors"]], "split_step() (sage.combinat.crystals.littelmann_path.crystaloflspaths.element method)": [[59, "sage.combinat.crystals.littelmann_path.CrystalOfLSPaths.Element.split_step"]], "weight() (sage.combinat.crystals.littelmann_path.crystaloflspaths.element method)": [[59, "sage.combinat.crystals.littelmann_path.CrystalOfLSPaths.Element.weight"]], "weight() (sage.combinat.crystals.littelmann_path.infinitycrystaloflspaths.element method)": [[59, "sage.combinat.crystals.littelmann_path.InfinityCrystalOfLSPaths.Element.weight"]], "weight_lattice_realization() (sage.combinat.crystals.littelmann_path.crystaloflspaths method)": [[59, "sage.combinat.crystals.littelmann_path.CrystalOfLSPaths.weight_lattice_realization"]], "weight_lattice_realization() (sage.combinat.crystals.littelmann_path.infinitycrystaloflspaths method)": [[59, "sage.combinat.crystals.littelmann_path.InfinityCrystalOfLSPaths.weight_lattice_realization"]], "weyl_group_representation() (sage.combinat.crystals.littelmann_path.crystalofprojectedlevelzerolspaths.element method)": [[59, "sage.combinat.crystals.littelmann_path.CrystalOfProjectedLevelZeroLSPaths.Element.weyl_group_representation"]], "crystalofnakajimamonomials (class in sage.combinat.crystals.monomial_crystals)": [[60, "sage.combinat.crystals.monomial_crystals.CrystalOfNakajimaMonomials"]], "crystalofnakajimamonomialselement (class in sage.combinat.crystals.monomial_crystals)": [[60, "sage.combinat.crystals.monomial_crystals.CrystalOfNakajimaMonomialsElement"]], "element (sage.combinat.crystals.monomial_crystals.crystalofnakajimamonomials attribute)": [[60, "sage.combinat.crystals.monomial_crystals.CrystalOfNakajimaMonomials.Element"]], "element (sage.combinat.crystals.monomial_crystals.infinitycrystalofnakajimamonomials attribute)": [[60, "sage.combinat.crystals.monomial_crystals.InfinityCrystalOfNakajimaMonomials.Element"]], "infinitycrystalofnakajimamonomials (class in sage.combinat.crystals.monomial_crystals)": [[60, "sage.combinat.crystals.monomial_crystals.InfinityCrystalOfNakajimaMonomials"]], "nakajimamonomial (class in sage.combinat.crystals.monomial_crystals)": [[60, "sage.combinat.crystals.monomial_crystals.NakajimaMonomial"]], "c() (sage.combinat.crystals.monomial_crystals.infinitycrystalofnakajimamonomials method)": [[60, "sage.combinat.crystals.monomial_crystals.InfinityCrystalOfNakajimaMonomials.c"]], "cardinality() (sage.combinat.crystals.monomial_crystals.crystalofnakajimamonomials method)": [[60, "sage.combinat.crystals.monomial_crystals.CrystalOfNakajimaMonomials.cardinality"]], "cardinality() (sage.combinat.crystals.monomial_crystals.infinitycrystalofnakajimamonomials method)": [[60, "sage.combinat.crystals.monomial_crystals.InfinityCrystalOfNakajimaMonomials.cardinality"]], "e() (sage.combinat.crystals.monomial_crystals.nakajimamonomial method)": [[60, "sage.combinat.crystals.monomial_crystals.NakajimaMonomial.e"]], "epsilon() (sage.combinat.crystals.monomial_crystals.nakajimamonomial method)": [[60, "sage.combinat.crystals.monomial_crystals.NakajimaMonomial.epsilon"]], "f() (sage.combinat.crystals.monomial_crystals.crystalofnakajimamonomialselement method)": [[60, "sage.combinat.crystals.monomial_crystals.CrystalOfNakajimaMonomialsElement.f"]], "f() (sage.combinat.crystals.monomial_crystals.nakajimamonomial method)": [[60, "sage.combinat.crystals.monomial_crystals.NakajimaMonomial.f"]], "get_variables() (sage.combinat.crystals.monomial_crystals.infinitycrystalofnakajimamonomials method)": [[60, "sage.combinat.crystals.monomial_crystals.InfinityCrystalOfNakajimaMonomials.get_variables"]], "phi() (sage.combinat.crystals.monomial_crystals.nakajimamonomial method)": [[60, "sage.combinat.crystals.monomial_crystals.NakajimaMonomial.phi"]], "sage.combinat.crystals.monomial_crystals": [[60, "module-sage.combinat.crystals.monomial_crystals"]], "set_variables() (sage.combinat.crystals.monomial_crystals.infinitycrystalofnakajimamonomials method)": [[60, "sage.combinat.crystals.monomial_crystals.InfinityCrystalOfNakajimaMonomials.set_variables"]], "weight() (sage.combinat.crystals.monomial_crystals.crystalofnakajimamonomialselement method)": [[60, "sage.combinat.crystals.monomial_crystals.CrystalOfNakajimaMonomialsElement.weight"]], "weight() (sage.combinat.crystals.monomial_crystals.nakajimamonomial method)": [[60, "sage.combinat.crystals.monomial_crystals.NakajimaMonomial.weight"]], "weight_in_root_lattice() (sage.combinat.crystals.monomial_crystals.nakajimamonomial method)": [[60, "sage.combinat.crystals.monomial_crystals.NakajimaMonomial.weight_in_root_lattice"]], "infinitycrystalofmultisegments (class in sage.combinat.crystals.multisegments)": [[61, "sage.combinat.crystals.multisegments.InfinityCrystalOfMultisegments"]], "infinitycrystalofmultisegments.element (class in sage.combinat.crystals.multisegments)": [[61, "sage.combinat.crystals.multisegments.InfinityCrystalOfMultisegments.Element"]], "e() (sage.combinat.crystals.multisegments.infinitycrystalofmultisegments.element method)": [[61, "sage.combinat.crystals.multisegments.InfinityCrystalOfMultisegments.Element.e"]], "epsilon() (sage.combinat.crystals.multisegments.infinitycrystalofmultisegments.element method)": [[61, "sage.combinat.crystals.multisegments.InfinityCrystalOfMultisegments.Element.epsilon"]], "f() (sage.combinat.crystals.multisegments.infinitycrystalofmultisegments.element method)": [[61, "sage.combinat.crystals.multisegments.InfinityCrystalOfMultisegments.Element.f"]], "highest_weight_vector() (sage.combinat.crystals.multisegments.infinitycrystalofmultisegments method)": [[61, "sage.combinat.crystals.multisegments.InfinityCrystalOfMultisegments.highest_weight_vector"]], "phi() (sage.combinat.crystals.multisegments.infinitycrystalofmultisegments.element method)": [[61, "sage.combinat.crystals.multisegments.InfinityCrystalOfMultisegments.Element.phi"]], "sage.combinat.crystals.multisegments": [[61, "module-sage.combinat.crystals.multisegments"]], "weight() (sage.combinat.crystals.multisegments.infinitycrystalofmultisegments.element method)": [[61, "sage.combinat.crystals.multisegments.InfinityCrystalOfMultisegments.Element.weight"]], "weight_lattice_realization() (sage.combinat.crystals.multisegments.infinitycrystalofmultisegments method)": [[61, "sage.combinat.crystals.multisegments.InfinityCrystalOfMultisegments.weight_lattice_realization"]], "element (sage.combinat.crystals.mv_polytopes.mvpolytopes attribute)": [[62, "sage.combinat.crystals.mv_polytopes.MVPolytopes.Element"]], "mvpolytope (class in sage.combinat.crystals.mv_polytopes)": [[62, "sage.combinat.crystals.mv_polytopes.MVPolytope"]], "mvpolytopes (class in sage.combinat.crystals.mv_polytopes)": [[62, "sage.combinat.crystals.mv_polytopes.MVPolytopes"]], "latex_options() (sage.combinat.crystals.mv_polytopes.mvpolytopes method)": [[62, "sage.combinat.crystals.mv_polytopes.MVPolytopes.latex_options"]], "plot() (sage.combinat.crystals.mv_polytopes.mvpolytope method)": [[62, "sage.combinat.crystals.mv_polytopes.MVPolytope.plot"]], "polytope() (sage.combinat.crystals.mv_polytopes.mvpolytope method)": [[62, "sage.combinat.crystals.mv_polytopes.MVPolytope.polytope"]], "sage.combinat.crystals.mv_polytopes": [[62, "module-sage.combinat.crystals.mv_polytopes"]], "set_latex_options() (sage.combinat.crystals.mv_polytopes.mvpolytopes method)": [[62, "sage.combinat.crystals.mv_polytopes.MVPolytopes.set_latex_options"]], "element (sage.combinat.crystals.pbw_crystal.pbwcrystal attribute)": [[63, "sage.combinat.crystals.pbw_crystal.PBWCrystal.Element"]], "pbwcrystal (class in sage.combinat.crystals.pbw_crystal)": [[63, "sage.combinat.crystals.pbw_crystal.PBWCrystal"]], "pbwcrystalelement (class in sage.combinat.crystals.pbw_crystal)": [[63, "sage.combinat.crystals.pbw_crystal.PBWCrystalElement"]], "default_long_word() (sage.combinat.crystals.pbw_crystal.pbwcrystal method)": [[63, "sage.combinat.crystals.pbw_crystal.PBWCrystal.default_long_word"]], "e() (sage.combinat.crystals.pbw_crystal.pbwcrystalelement method)": [[63, "sage.combinat.crystals.pbw_crystal.PBWCrystalElement.e"]], "epsilon() (sage.combinat.crystals.pbw_crystal.pbwcrystalelement method)": [[63, "sage.combinat.crystals.pbw_crystal.PBWCrystalElement.epsilon"]], "f() (sage.combinat.crystals.pbw_crystal.pbwcrystalelement method)": [[63, "sage.combinat.crystals.pbw_crystal.PBWCrystalElement.f"]], "lusztig_datum() (sage.combinat.crystals.pbw_crystal.pbwcrystalelement method)": [[63, "sage.combinat.crystals.pbw_crystal.PBWCrystalElement.lusztig_datum"]], "phi() (sage.combinat.crystals.pbw_crystal.pbwcrystalelement method)": [[63, "sage.combinat.crystals.pbw_crystal.PBWCrystalElement.phi"]], "sage.combinat.crystals.pbw_crystal": [[63, "module-sage.combinat.crystals.pbw_crystal"]], "set_default_long_word() (sage.combinat.crystals.pbw_crystal.pbwcrystal method)": [[63, "sage.combinat.crystals.pbw_crystal.PBWCrystal.set_default_long_word"]], "star() (sage.combinat.crystals.pbw_crystal.pbwcrystalelement method)": [[63, "sage.combinat.crystals.pbw_crystal.PBWCrystalElement.star"]], "weight() (sage.combinat.crystals.pbw_crystal.pbwcrystalelement method)": [[63, "sage.combinat.crystals.pbw_crystal.PBWCrystalElement.weight"]], "pbwdata (class in sage.combinat.crystals.pbw_datum)": [[64, "sage.combinat.crystals.pbw_datum.PBWData"]], "pbwdatum (class in sage.combinat.crystals.pbw_datum)": [[64, "sage.combinat.crystals.pbw_datum.PBWDatum"]], "compute_new_lusztig_datum() (in module sage.combinat.crystals.pbw_datum)": [[64, "sage.combinat.crystals.pbw_datum.compute_new_lusztig_datum"]], "convert_to_long_word_with_first_letter() (sage.combinat.crystals.pbw_datum.pbwdatum method)": [[64, "sage.combinat.crystals.pbw_datum.PBWDatum.convert_to_long_word_with_first_letter"]], "convert_to_new_long_word() (sage.combinat.crystals.pbw_datum.pbwdata method)": [[64, "sage.combinat.crystals.pbw_datum.PBWData.convert_to_new_long_word"]], "convert_to_new_long_word() (sage.combinat.crystals.pbw_datum.pbwdatum method)": [[64, "sage.combinat.crystals.pbw_datum.PBWDatum.convert_to_new_long_word"]], "enhance_braid_move_chain() (in module sage.combinat.crystals.pbw_datum)": [[64, "sage.combinat.crystals.pbw_datum.enhance_braid_move_chain"]], "is_equivalent_to() (sage.combinat.crystals.pbw_datum.pbwdatum method)": [[64, "sage.combinat.crystals.pbw_datum.PBWDatum.is_equivalent_to"]], "sage.combinat.crystals.pbw_datum": [[64, "module-sage.combinat.crystals.pbw_datum"]], "star() (sage.combinat.crystals.pbw_datum.pbwdatum method)": [[64, "sage.combinat.crystals.pbw_datum.PBWDatum.star"]], "tropical_plucker_relation() (in module sage.combinat.crystals.pbw_datum)": [[64, "sage.combinat.crystals.pbw_datum.tropical_plucker_relation"]], "weight() (sage.combinat.crystals.pbw_datum.pbwdatum method)": [[64, "sage.combinat.crystals.pbw_datum.PBWDatum.weight"]], "infinitycrystalaspolyhedralrealization (class in sage.combinat.crystals.polyhedral_realization)": [[65, "sage.combinat.crystals.polyhedral_realization.InfinityCrystalAsPolyhedralRealization"]], "infinitycrystalaspolyhedralrealization.element (class in sage.combinat.crystals.polyhedral_realization)": [[65, "sage.combinat.crystals.polyhedral_realization.InfinityCrystalAsPolyhedralRealization.Element"]], "e() (sage.combinat.crystals.polyhedral_realization.infinitycrystalaspolyhedralrealization.element method)": [[65, "sage.combinat.crystals.polyhedral_realization.InfinityCrystalAsPolyhedralRealization.Element.e"]], "epsilon() (sage.combinat.crystals.polyhedral_realization.infinitycrystalaspolyhedralrealization.element method)": [[65, "sage.combinat.crystals.polyhedral_realization.InfinityCrystalAsPolyhedralRealization.Element.epsilon"]], "f() (sage.combinat.crystals.polyhedral_realization.infinitycrystalaspolyhedralrealization.element method)": [[65, "sage.combinat.crystals.polyhedral_realization.InfinityCrystalAsPolyhedralRealization.Element.f"]], "finite_tensor_product() (sage.combinat.crystals.polyhedral_realization.infinitycrystalaspolyhedralrealization method)": [[65, "sage.combinat.crystals.polyhedral_realization.InfinityCrystalAsPolyhedralRealization.finite_tensor_product"]], "phi() (sage.combinat.crystals.polyhedral_realization.infinitycrystalaspolyhedralrealization.element method)": [[65, "sage.combinat.crystals.polyhedral_realization.InfinityCrystalAsPolyhedralRealization.Element.phi"]], "sage.combinat.crystals.polyhedral_realization": [[65, "module-sage.combinat.crystals.polyhedral_realization"]], "truncate() (sage.combinat.crystals.polyhedral_realization.infinitycrystalaspolyhedralrealization.element method)": [[65, "sage.combinat.crystals.polyhedral_realization.InfinityCrystalAsPolyhedralRealization.Element.truncate"]], "crystalofspins() (in module sage.combinat.crystals.spins)": [[66, "sage.combinat.crystals.spins.CrystalOfSpins"]], "crystalofspinsminus() (in module sage.combinat.crystals.spins)": [[66, "sage.combinat.crystals.spins.CrystalOfSpinsMinus"]], "crystalofspinsplus() (in module sage.combinat.crystals.spins)": [[66, "sage.combinat.crystals.spins.CrystalOfSpinsPlus"]], "genericcrystalofspins (class in sage.combinat.crystals.spins)": [[66, "sage.combinat.crystals.spins.GenericCrystalOfSpins"]], "spin (class in sage.combinat.crystals.spins)": [[66, "sage.combinat.crystals.spins.Spin"]], "spin_crystal_type_b_element (class in sage.combinat.crystals.spins)": [[66, "sage.combinat.crystals.spins.Spin_crystal_type_B_element"]], "spin_crystal_type_d_element (class in sage.combinat.crystals.spins)": [[66, "sage.combinat.crystals.spins.Spin_crystal_type_D_element"]], "e() (sage.combinat.crystals.spins.spin_crystal_type_b_element method)": [[66, "sage.combinat.crystals.spins.Spin_crystal_type_B_element.e"]], "e() (sage.combinat.crystals.spins.spin_crystal_type_d_element method)": [[66, "sage.combinat.crystals.spins.Spin_crystal_type_D_element.e"]], "epsilon() (sage.combinat.crystals.spins.spin_crystal_type_b_element method)": [[66, "sage.combinat.crystals.spins.Spin_crystal_type_B_element.epsilon"]], "epsilon() (sage.combinat.crystals.spins.spin_crystal_type_d_element method)": [[66, "sage.combinat.crystals.spins.Spin_crystal_type_D_element.epsilon"]], "f() (sage.combinat.crystals.spins.spin_crystal_type_b_element method)": [[66, "sage.combinat.crystals.spins.Spin_crystal_type_B_element.f"]], "f() (sage.combinat.crystals.spins.spin_crystal_type_d_element method)": [[66, "sage.combinat.crystals.spins.Spin_crystal_type_D_element.f"]], "lt_elements() (sage.combinat.crystals.spins.genericcrystalofspins method)": [[66, "sage.combinat.crystals.spins.GenericCrystalOfSpins.lt_elements"]], "phi() (sage.combinat.crystals.spins.spin_crystal_type_b_element method)": [[66, "sage.combinat.crystals.spins.Spin_crystal_type_B_element.phi"]], "phi() (sage.combinat.crystals.spins.spin_crystal_type_d_element method)": [[66, "sage.combinat.crystals.spins.Spin_crystal_type_D_element.phi"]], "pp() (sage.combinat.crystals.spins.spin method)": [[66, "sage.combinat.crystals.spins.Spin.pp"]], "sage.combinat.crystals.spins": [[66, "module-sage.combinat.crystals.spins"]], "signature() (sage.combinat.crystals.spins.spin method)": [[66, "sage.combinat.crystals.spins.Spin.signature"]], "value (sage.combinat.crystals.spins.spin attribute)": [[66, "sage.combinat.crystals.spins.Spin.value"]], "weight() (sage.combinat.crystals.spins.spin method)": [[66, "sage.combinat.crystals.spins.Spin.weight"]], "starcrystal (class in sage.combinat.crystals.star_crystal)": [[67, "sage.combinat.crystals.star_crystal.StarCrystal"]], "starcrystal.element (class in sage.combinat.crystals.star_crystal)": [[67, "sage.combinat.crystals.star_crystal.StarCrystal.Element"]], "e() (sage.combinat.crystals.star_crystal.starcrystal.element method)": [[67, "sage.combinat.crystals.star_crystal.StarCrystal.Element.e"]], "epsilon() (sage.combinat.crystals.star_crystal.starcrystal.element method)": [[67, "sage.combinat.crystals.star_crystal.StarCrystal.Element.epsilon"]], "f() (sage.combinat.crystals.star_crystal.starcrystal.element method)": [[67, "sage.combinat.crystals.star_crystal.StarCrystal.Element.f"]], "jump() (sage.combinat.crystals.star_crystal.starcrystal.element method)": [[67, "sage.combinat.crystals.star_crystal.StarCrystal.Element.jump"]], "phi() (sage.combinat.crystals.star_crystal.starcrystal.element method)": [[67, "sage.combinat.crystals.star_crystal.StarCrystal.Element.phi"]], "sage.combinat.crystals.star_crystal": [[67, "module-sage.combinat.crystals.star_crystal"]], "weight() (sage.combinat.crystals.star_crystal.starcrystal.element method)": [[67, "sage.combinat.crystals.star_crystal.StarCrystal.Element.weight"]], "crystalofqueertableaux (class in sage.combinat.crystals.tensor_product)": [[68, "sage.combinat.crystals.tensor_product.CrystalOfQueerTableaux"]], "crystalofqueertableaux.element (class in sage.combinat.crystals.tensor_product)": [[68, "sage.combinat.crystals.tensor_product.CrystalOfQueerTableaux.Element"]], "crystaloftableaux (class in sage.combinat.crystals.tensor_product)": [[68, "sage.combinat.crystals.tensor_product.CrystalOfTableaux"]], "crystaloftableaux.element (class in sage.combinat.crystals.tensor_product)": [[68, "sage.combinat.crystals.tensor_product.CrystalOfTableaux.Element"]], "crystalofwords (class in sage.combinat.crystals.tensor_product)": [[68, "sage.combinat.crystals.tensor_product.CrystalOfWords"]], "crystalofwords.element (class in sage.combinat.crystals.tensor_product)": [[68, "sage.combinat.crystals.tensor_product.CrystalOfWords.Element"]], "fulltensorproductofcrystals (class in sage.combinat.crystals.tensor_product)": [[68, "sage.combinat.crystals.tensor_product.FullTensorProductOfCrystals"]], "fulltensorproductofqueersupercrystals (class in sage.combinat.crystals.tensor_product)": [[68, "sage.combinat.crystals.tensor_product.FullTensorProductOfQueerSuperCrystals"]], "fulltensorproductofqueersupercrystals.element (class in sage.combinat.crystals.tensor_product)": [[68, "sage.combinat.crystals.tensor_product.FullTensorProductOfQueerSuperCrystals.Element"]], "fulltensorproductofregularcrystals (class in sage.combinat.crystals.tensor_product)": [[68, "sage.combinat.crystals.tensor_product.FullTensorProductOfRegularCrystals"]], "fulltensorproductofregularcrystals.element (class in sage.combinat.crystals.tensor_product)": [[68, "sage.combinat.crystals.tensor_product.FullTensorProductOfRegularCrystals.Element"]], "fulltensorproductofsupercrystals (class in sage.combinat.crystals.tensor_product)": [[68, "sage.combinat.crystals.tensor_product.FullTensorProductOfSuperCrystals"]], "fulltensorproductofsupercrystals.element (class in sage.combinat.crystals.tensor_product)": [[68, "sage.combinat.crystals.tensor_product.FullTensorProductOfSuperCrystals.Element"]], "queersupercrystalsmixin (class in sage.combinat.crystals.tensor_product)": [[68, "sage.combinat.crystals.tensor_product.QueerSuperCrystalsMixin"]], "tensorproductofcrystals (class in sage.combinat.crystals.tensor_product)": [[68, "sage.combinat.crystals.tensor_product.TensorProductOfCrystals"]], "tensorproductofcrystalswithgenerators (class in sage.combinat.crystals.tensor_product)": [[68, "sage.combinat.crystals.tensor_product.TensorProductOfCrystalsWithGenerators"]], "tensorproductofregularcrystalswithgenerators (class in sage.combinat.crystals.tensor_product)": [[68, "sage.combinat.crystals.tensor_product.TensorProductOfRegularCrystalsWithGenerators"]], "tensorproductofregularcrystalswithgenerators.element (class in sage.combinat.crystals.tensor_product)": [[68, "sage.combinat.crystals.tensor_product.TensorProductOfRegularCrystalsWithGenerators.Element"]], "cardinality() (sage.combinat.crystals.tensor_product.fulltensorproductofcrystals method)": [[68, "sage.combinat.crystals.tensor_product.FullTensorProductOfCrystals.cardinality"]], "cartan_type() (sage.combinat.crystals.tensor_product.crystaloftableaux method)": [[68, "sage.combinat.crystals.tensor_product.CrystalOfTableaux.cartan_type"]], "index_set() (sage.combinat.crystals.tensor_product.queersupercrystalsmixin method)": [[68, "sage.combinat.crystals.tensor_product.QueerSuperCrystalsMixin.index_set"]], "module_generator() (sage.combinat.crystals.tensor_product.crystaloftableaux method)": [[68, "sage.combinat.crystals.tensor_product.CrystalOfTableaux.module_generator"]], "options (sage.combinat.crystals.tensor_product.tensorproductofcrystals attribute)": [[68, "sage.combinat.crystals.tensor_product.TensorProductOfCrystals.options"]], "rows() (sage.combinat.crystals.tensor_product.crystalofqueertableaux.element method)": [[68, "sage.combinat.crystals.tensor_product.CrystalOfQueerTableaux.Element.rows"]], "sage.combinat.crystals.tensor_product": [[68, "module-sage.combinat.crystals.tensor_product"]], "weight_lattice_realization() (sage.combinat.crystals.tensor_product.fulltensorproductofcrystals method)": [[68, "sage.combinat.crystals.tensor_product.FullTensorProductOfCrystals.weight_lattice_realization"]], "crystalofbkktableauxelement (class in sage.combinat.crystals.tensor_product_element)": [[69, "sage.combinat.crystals.tensor_product_element.CrystalOfBKKTableauxElement"]], "crystaloftableauxelement (class in sage.combinat.crystals.tensor_product_element)": [[69, "sage.combinat.crystals.tensor_product_element.CrystalOfTableauxElement"]], "immutablelistwithparent (class in sage.combinat.crystals.tensor_product_element)": [[69, "sage.combinat.crystals.tensor_product_element.ImmutableListWithParent"]], "infinitycrystaloftableauxelement (class in sage.combinat.crystals.tensor_product_element)": [[69, "sage.combinat.crystals.tensor_product_element.InfinityCrystalOfTableauxElement"]], "infinitycrystaloftableauxelementtyped (class in sage.combinat.crystals.tensor_product_element)": [[69, "sage.combinat.crystals.tensor_product_element.InfinityCrystalOfTableauxElementTypeD"]], "infinityqueercrystaloftableauxelement (class in sage.combinat.crystals.tensor_product_element)": [[69, "sage.combinat.crystals.tensor_product_element.InfinityQueerCrystalOfTableauxElement"]], "tensorproductofcrystalselement (class in sage.combinat.crystals.tensor_product_element)": [[69, "sage.combinat.crystals.tensor_product_element.TensorProductOfCrystalsElement"]], "tensorproductofqueersupercrystalselement (class in sage.combinat.crystals.tensor_product_element)": [[69, "sage.combinat.crystals.tensor_product_element.TensorProductOfQueerSuperCrystalsElement"]], "tensorproductofregularcrystalselement (class in sage.combinat.crystals.tensor_product_element)": [[69, "sage.combinat.crystals.tensor_product_element.TensorProductOfRegularCrystalsElement"]], "tensorproductofsupercrystalselement (class in sage.combinat.crystals.tensor_product_element)": [[69, "sage.combinat.crystals.tensor_product_element.TensorProductOfSuperCrystalsElement"]], "e() (sage.combinat.crystals.tensor_product_element.infinitycrystaloftableauxelement method)": [[69, "sage.combinat.crystals.tensor_product_element.InfinityCrystalOfTableauxElement.e"]], "e() (sage.combinat.crystals.tensor_product_element.infinitycrystaloftableauxelementtyped method)": [[69, "sage.combinat.crystals.tensor_product_element.InfinityCrystalOfTableauxElementTypeD.e"]], "e() (sage.combinat.crystals.tensor_product_element.infinityqueercrystaloftableauxelement method)": [[69, "sage.combinat.crystals.tensor_product_element.InfinityQueerCrystalOfTableauxElement.e"]], "e() (sage.combinat.crystals.tensor_product_element.tensorproductofcrystalselement method)": [[69, "sage.combinat.crystals.tensor_product_element.TensorProductOfCrystalsElement.e"]], "e() (sage.combinat.crystals.tensor_product_element.tensorproductofqueersupercrystalselement method)": [[69, "sage.combinat.crystals.tensor_product_element.TensorProductOfQueerSuperCrystalsElement.e"]], "e() (sage.combinat.crystals.tensor_product_element.tensorproductofregularcrystalselement method)": [[69, "sage.combinat.crystals.tensor_product_element.TensorProductOfRegularCrystalsElement.e"]], "e() (sage.combinat.crystals.tensor_product_element.tensorproductofsupercrystalselement method)": [[69, "sage.combinat.crystals.tensor_product_element.TensorProductOfSuperCrystalsElement.e"]], "epsilon() (sage.combinat.crystals.tensor_product_element.infinityqueercrystaloftableauxelement method)": [[69, "sage.combinat.crystals.tensor_product_element.InfinityQueerCrystalOfTableauxElement.epsilon"]], "epsilon() (sage.combinat.crystals.tensor_product_element.tensorproductofcrystalselement method)": [[69, "sage.combinat.crystals.tensor_product_element.TensorProductOfCrystalsElement.epsilon"]], "epsilon() (sage.combinat.crystals.tensor_product_element.tensorproductofqueersupercrystalselement method)": [[69, "sage.combinat.crystals.tensor_product_element.TensorProductOfQueerSuperCrystalsElement.epsilon"]], "epsilon() (sage.combinat.crystals.tensor_product_element.tensorproductofregularcrystalselement method)": [[69, "sage.combinat.crystals.tensor_product_element.TensorProductOfRegularCrystalsElement.epsilon"]], "epsilon() (sage.combinat.crystals.tensor_product_element.tensorproductofsupercrystalselement method)": [[69, "sage.combinat.crystals.tensor_product_element.TensorProductOfSuperCrystalsElement.epsilon"]], "f() (sage.combinat.crystals.tensor_product_element.infinitycrystaloftableauxelement method)": [[69, "sage.combinat.crystals.tensor_product_element.InfinityCrystalOfTableauxElement.f"]], "f() (sage.combinat.crystals.tensor_product_element.infinitycrystaloftableauxelementtyped method)": [[69, "sage.combinat.crystals.tensor_product_element.InfinityCrystalOfTableauxElementTypeD.f"]], "f() (sage.combinat.crystals.tensor_product_element.infinityqueercrystaloftableauxelement method)": [[69, "sage.combinat.crystals.tensor_product_element.InfinityQueerCrystalOfTableauxElement.f"]], "f() (sage.combinat.crystals.tensor_product_element.tensorproductofcrystalselement method)": [[69, "sage.combinat.crystals.tensor_product_element.TensorProductOfCrystalsElement.f"]], "f() (sage.combinat.crystals.tensor_product_element.tensorproductofqueersupercrystalselement method)": [[69, "sage.combinat.crystals.tensor_product_element.TensorProductOfQueerSuperCrystalsElement.f"]], "f() (sage.combinat.crystals.tensor_product_element.tensorproductofregularcrystalselement method)": [[69, "sage.combinat.crystals.tensor_product_element.TensorProductOfRegularCrystalsElement.f"]], "f() (sage.combinat.crystals.tensor_product_element.tensorproductofsupercrystalselement method)": [[69, "sage.combinat.crystals.tensor_product_element.TensorProductOfSuperCrystalsElement.f"]], "phi() (sage.combinat.crystals.tensor_product_element.tensorproductofcrystalselement method)": [[69, "sage.combinat.crystals.tensor_product_element.TensorProductOfCrystalsElement.phi"]], "phi() (sage.combinat.crystals.tensor_product_element.tensorproductofqueersupercrystalselement method)": [[69, "sage.combinat.crystals.tensor_product_element.TensorProductOfQueerSuperCrystalsElement.phi"]], "phi() (sage.combinat.crystals.tensor_product_element.tensorproductofregularcrystalselement method)": [[69, "sage.combinat.crystals.tensor_product_element.TensorProductOfRegularCrystalsElement.phi"]], "phi() (sage.combinat.crystals.tensor_product_element.tensorproductofsupercrystalselement method)": [[69, "sage.combinat.crystals.tensor_product_element.TensorProductOfSuperCrystalsElement.phi"]], "position_of_first_unmatched_plus() (sage.combinat.crystals.tensor_product_element.tensorproductofregularcrystalselement method)": [[69, "sage.combinat.crystals.tensor_product_element.TensorProductOfRegularCrystalsElement.position_of_first_unmatched_plus"]], "position_of_last_unmatched_minus() (sage.combinat.crystals.tensor_product_element.tensorproductofregularcrystalselement method)": [[69, "sage.combinat.crystals.tensor_product_element.TensorProductOfRegularCrystalsElement.position_of_last_unmatched_minus"]], "positions_of_unmatched_minus() (sage.combinat.crystals.tensor_product_element.tensorproductofregularcrystalselement method)": [[69, "sage.combinat.crystals.tensor_product_element.TensorProductOfRegularCrystalsElement.positions_of_unmatched_minus"]], "positions_of_unmatched_plus() (sage.combinat.crystals.tensor_product_element.tensorproductofregularcrystalselement method)": [[69, "sage.combinat.crystals.tensor_product_element.TensorProductOfRegularCrystalsElement.positions_of_unmatched_plus"]], "pp() (sage.combinat.crystals.tensor_product_element.crystalofbkktableauxelement method)": [[69, "sage.combinat.crystals.tensor_product_element.CrystalOfBKKTableauxElement.pp"]], "pp() (sage.combinat.crystals.tensor_product_element.crystaloftableauxelement method)": [[69, "sage.combinat.crystals.tensor_product_element.CrystalOfTableauxElement.pp"]], "pp() (sage.combinat.crystals.tensor_product_element.tensorproductofcrystalselement method)": [[69, "sage.combinat.crystals.tensor_product_element.TensorProductOfCrystalsElement.pp"]], "promotion() (sage.combinat.crystals.tensor_product_element.crystaloftableauxelement method)": [[69, "sage.combinat.crystals.tensor_product_element.CrystalOfTableauxElement.promotion"]], "promotion_inverse() (sage.combinat.crystals.tensor_product_element.crystaloftableauxelement method)": [[69, "sage.combinat.crystals.tensor_product_element.CrystalOfTableauxElement.promotion_inverse"]], "rows() (sage.combinat.crystals.tensor_product_element.infinityqueercrystaloftableauxelement method)": [[69, "sage.combinat.crystals.tensor_product_element.InfinityQueerCrystalOfTableauxElement.rows"]], "sage.combinat.crystals.tensor_product_element": [[69, "module-sage.combinat.crystals.tensor_product_element"]], "shape() (sage.combinat.crystals.tensor_product_element.crystaloftableauxelement method)": [[69, "sage.combinat.crystals.tensor_product_element.CrystalOfTableauxElement.shape"]], "to_tableau() (sage.combinat.crystals.tensor_product_element.crystalofbkktableauxelement method)": [[69, "sage.combinat.crystals.tensor_product_element.CrystalOfBKKTableauxElement.to_tableau"]], "to_tableau() (sage.combinat.crystals.tensor_product_element.crystaloftableauxelement method)": [[69, "sage.combinat.crystals.tensor_product_element.CrystalOfTableauxElement.to_tableau"]], "weight() (sage.combinat.crystals.tensor_product_element.infinityqueercrystaloftableauxelement method)": [[69, "sage.combinat.crystals.tensor_product_element.InfinityQueerCrystalOfTableauxElement.weight"]], "weight() (sage.combinat.crystals.tensor_product_element.tensorproductofcrystalselement method)": [[69, "sage.combinat.crystals.tensor_product_element.TensorProductOfCrystalsElement.weight"]], "cyclicsievingcheck() (in module sage.combinat.cyclic_sieving_phenomenon)": [[70, "sage.combinat.cyclic_sieving_phenomenon.CyclicSievingCheck"]], "cyclicsievingpolynomial() (in module sage.combinat.cyclic_sieving_phenomenon)": [[70, "sage.combinat.cyclic_sieving_phenomenon.CyclicSievingPolynomial"]], "orbit_decomposition() (in module sage.combinat.cyclic_sieving_phenomenon)": [[70, "sage.combinat.cyclic_sieving_phenomenon.orbit_decomposition"]], "sage.combinat.cyclic_sieving_phenomenon": [[70, "module-sage.combinat.cyclic_sieving_phenomenon"]], "debruijnsequences (class in sage.combinat.debruijn_sequence)": [[71, "sage.combinat.debruijn_sequence.DeBruijnSequences"]], "an_element() (sage.combinat.debruijn_sequence.debruijnsequences method)": [[71, "sage.combinat.debruijn_sequence.DeBruijnSequences.an_element"]], "cardinality() (sage.combinat.debruijn_sequence.debruijnsequences method)": [[71, "sage.combinat.debruijn_sequence.DeBruijnSequences.cardinality"]], "debruijn_sequence() (in module sage.combinat.debruijn_sequence)": [[71, "sage.combinat.debruijn_sequence.debruijn_sequence"]], "is_debruijn_sequence() (in module sage.combinat.debruijn_sequence)": [[71, "sage.combinat.debruijn_sequence.is_debruijn_sequence"]], "sage.combinat.debruijn_sequence": [[71, "module-sage.combinat.debruijn_sequence"]], "degreesequences (class in sage.combinat.degree_sequences)": [[72, "sage.combinat.degree_sequences.DegreeSequences"]], "sage.combinat.degree_sequences": [[72, "module-sage.combinat.degree_sequences"]], "derangement (class in sage.combinat.derangements)": [[73, "sage.combinat.derangements.Derangement"]], "derangements (class in sage.combinat.derangements)": [[73, "sage.combinat.derangements.Derangements"]], "element (sage.combinat.derangements.derangements attribute)": [[73, "sage.combinat.derangements.Derangements.Element"]], "cardinality() (sage.combinat.derangements.derangements method)": [[73, "sage.combinat.derangements.Derangements.cardinality"]], "random_element() (sage.combinat.derangements.derangements method)": [[73, "sage.combinat.derangements.Derangements.random_element"]], "sage.combinat.derangements": [[73, "module-sage.combinat.derangements"]], "to_permutation() (sage.combinat.derangements.derangement method)": [[73, "sage.combinat.derangements.Derangement.to_permutation"]], "descentalgebra (class in sage.combinat.descent_algebra)": [[74, "sage.combinat.descent_algebra.DescentAlgebra"]], "descentalgebra.b (class in sage.combinat.descent_algebra)": [[74, "sage.combinat.descent_algebra.DescentAlgebra.B"]], "descentalgebra.d (class in sage.combinat.descent_algebra)": [[74, "sage.combinat.descent_algebra.DescentAlgebra.D"]], "descentalgebra.i (class in sage.combinat.descent_algebra)": [[74, "sage.combinat.descent_algebra.DescentAlgebra.I"]], "descentalgebrabases (class in sage.combinat.descent_algebra)": [[74, "sage.combinat.descent_algebra.DescentAlgebraBases"]], "descentalgebrabases.elementmethods (class in sage.combinat.descent_algebra)": [[74, "sage.combinat.descent_algebra.DescentAlgebraBases.ElementMethods"]], "descentalgebrabases.parentmethods (class in sage.combinat.descent_algebra)": [[74, "sage.combinat.descent_algebra.DescentAlgebraBases.ParentMethods"]], "a_realization() (sage.combinat.descent_algebra.descentalgebra method)": [[74, "sage.combinat.descent_algebra.DescentAlgebra.a_realization"]], "idempotent (sage.combinat.descent_algebra.descentalgebra attribute)": [[74, "sage.combinat.descent_algebra.DescentAlgebra.idempotent"]], "idempotent() (sage.combinat.descent_algebra.descentalgebra.i method)": [[74, "sage.combinat.descent_algebra.DescentAlgebra.I.idempotent"]], "is_commutative() (sage.combinat.descent_algebra.descentalgebrabases.parentmethods method)": [[74, "sage.combinat.descent_algebra.DescentAlgebraBases.ParentMethods.is_commutative"]], "is_field() (sage.combinat.descent_algebra.descentalgebrabases.parentmethods method)": [[74, "sage.combinat.descent_algebra.DescentAlgebraBases.ParentMethods.is_field"]], "one() (sage.combinat.descent_algebra.descentalgebra.i method)": [[74, "sage.combinat.descent_algebra.DescentAlgebra.I.one"]], "one_basis() (sage.combinat.descent_algebra.descentalgebra.b method)": [[74, "sage.combinat.descent_algebra.DescentAlgebra.B.one_basis"]], "one_basis() (sage.combinat.descent_algebra.descentalgebra.d method)": [[74, "sage.combinat.descent_algebra.DescentAlgebra.D.one_basis"]], "one_basis() (sage.combinat.descent_algebra.descentalgebra.i method)": [[74, "sage.combinat.descent_algebra.DescentAlgebra.I.one_basis"]], "product_on_basis() (sage.combinat.descent_algebra.descentalgebra.b method)": [[74, "sage.combinat.descent_algebra.DescentAlgebra.B.product_on_basis"]], "product_on_basis() (sage.combinat.descent_algebra.descentalgebra.d method)": [[74, "sage.combinat.descent_algebra.DescentAlgebra.D.product_on_basis"]], "product_on_basis() (sage.combinat.descent_algebra.descentalgebra.i method)": [[74, "sage.combinat.descent_algebra.DescentAlgebra.I.product_on_basis"]], "sage.combinat.descent_algebra": [[74, "module-sage.combinat.descent_algebra"]], "standard (sage.combinat.descent_algebra.descentalgebra attribute)": [[74, "sage.combinat.descent_algebra.DescentAlgebra.standard"]], "subset (sage.combinat.descent_algebra.descentalgebra attribute)": [[74, "sage.combinat.descent_algebra.DescentAlgebra.subset"]], "super_categories() (sage.combinat.descent_algebra.descentalgebrabases method)": [[74, "sage.combinat.descent_algebra.DescentAlgebraBases.super_categories"]], "to_b_basis() (sage.combinat.descent_algebra.descentalgebra.d method)": [[74, "sage.combinat.descent_algebra.DescentAlgebra.D.to_B_basis"]], "to_b_basis() (sage.combinat.descent_algebra.descentalgebra.i method)": [[74, "sage.combinat.descent_algebra.DescentAlgebra.I.to_B_basis"]], "to_d_basis() (sage.combinat.descent_algebra.descentalgebra.b method)": [[74, "sage.combinat.descent_algebra.DescentAlgebra.B.to_D_basis"]], "to_i_basis() (sage.combinat.descent_algebra.descentalgebra.b method)": [[74, "sage.combinat.descent_algebra.DescentAlgebra.B.to_I_basis"]], "to_nsym() (sage.combinat.descent_algebra.descentalgebra.b method)": [[74, "sage.combinat.descent_algebra.DescentAlgebra.B.to_nsym"]], "to_symmetric_group_algebra() (sage.combinat.descent_algebra.descentalgebrabases.elementmethods method)": [[74, "sage.combinat.descent_algebra.DescentAlgebraBases.ElementMethods.to_symmetric_group_algebra"]], "to_symmetric_group_algebra() (sage.combinat.descent_algebra.descentalgebrabases.parentmethods method)": [[74, "sage.combinat.descent_algebra.DescentAlgebraBases.ParentMethods.to_symmetric_group_algebra"]], "to_symmetric_group_algebra_on_basis() (sage.combinat.descent_algebra.descentalgebra.d method)": [[74, "sage.combinat.descent_algebra.DescentAlgebra.D.to_symmetric_group_algebra_on_basis"]], "to_symmetric_group_algebra_on_basis() (sage.combinat.descent_algebra.descentalgebrabases.parentmethods method)": [[74, "sage.combinat.descent_algebra.DescentAlgebraBases.ParentMethods.to_symmetric_group_algebra_on_basis"]], "sage.combinat.designs.all": [[75, "module-sage.combinat.designs.all"]], "bibd (in module sage.combinat.designs.bibd)": [[76, "sage.combinat.designs.bibd.BIBD"]], "bibd_5q_5_for_q_prime_power() (in module sage.combinat.designs.bibd)": [[76, "sage.combinat.designs.bibd.BIBD_5q_5_for_q_prime_power"]], "bibd_from_pbd() (in module sage.combinat.designs.bibd)": [[76, "sage.combinat.designs.bibd.BIBD_from_PBD"]], "bibd_from_td() (in module sage.combinat.designs.bibd)": [[76, "sage.combinat.designs.bibd.BIBD_from_TD"]], "bibd_from_arc_in_desarguesian_projective_plane() (in module sage.combinat.designs.bibd)": [[76, "sage.combinat.designs.bibd.BIBD_from_arc_in_desarguesian_projective_plane"]], "bibd_from_difference_family() (in module sage.combinat.designs.bibd)": [[76, "sage.combinat.designs.bibd.BIBD_from_difference_family"]], "balancedincompleteblockdesign (class in sage.combinat.designs.bibd)": [[76, "sage.combinat.designs.bibd.BalancedIncompleteBlockDesign"]], "bruckryserchowla_check() (in module sage.combinat.designs.bibd)": [[76, "sage.combinat.designs.bibd.BruckRyserChowla_check"]], "pbd_4_5_8_9_12() (in module sage.combinat.designs.bibd)": [[76, "sage.combinat.designs.bibd.PBD_4_5_8_9_12"]], "pbd_from_td() (in module sage.combinat.designs.bibd)": [[76, "sage.combinat.designs.bibd.PBD_from_TD"]], "pairwisebalanceddesign (class in sage.combinat.designs.bibd)": [[76, "sage.combinat.designs.bibd.PairwiseBalancedDesign"]], "arc() (sage.combinat.designs.bibd.balancedincompleteblockdesign method)": [[76, "sage.combinat.designs.bibd.BalancedIncompleteBlockDesign.arc"]], "balanced_incomplete_block_design() (in module sage.combinat.designs.bibd)": [[76, "sage.combinat.designs.bibd.balanced_incomplete_block_design"]], "biplane() (in module sage.combinat.designs.bibd)": [[76, "sage.combinat.designs.bibd.biplane"]], "sage.combinat.designs.bibd": [[76, "module-sage.combinat.designs.bibd"]], "steiner_triple_system() (in module sage.combinat.designs.bibd)": [[76, "sage.combinat.designs.bibd.steiner_triple_system"]], "v_4_1_bibd() (in module sage.combinat.designs.bibd)": [[76, "sage.combinat.designs.bibd.v_4_1_BIBD"]], "v_5_1_bibd() (in module sage.combinat.designs.bibd)": [[76, "sage.combinat.designs.bibd.v_5_1_BIBD"]], "affinegeometrydesign() (in module sage.combinat.designs.block_design)": [[77, "sage.combinat.designs.block_design.AffineGeometryDesign"]], "cremonarichmondconfiguration() (in module sage.combinat.designs.block_design)": [[77, "sage.combinat.designs.block_design.CremonaRichmondConfiguration"]], "desarguesianprojectiveplanedesign() (in module sage.combinat.designs.block_design)": [[77, "sage.combinat.designs.block_design.DesarguesianProjectivePlaneDesign"]], "hadamard3design() (in module sage.combinat.designs.block_design)": [[77, "sage.combinat.designs.block_design.Hadamard3Design"]], "hadamarddesign() (in module sage.combinat.designs.block_design)": [[77, "sage.combinat.designs.block_design.HadamardDesign"]], "hughesplane() (in module sage.combinat.designs.block_design)": [[77, "sage.combinat.designs.block_design.HughesPlane"]], "projectivegeometrydesign() (in module sage.combinat.designs.block_design)": [[77, "sage.combinat.designs.block_design.ProjectiveGeometryDesign"]], "wittdesign() (in module sage.combinat.designs.block_design)": [[77, "sage.combinat.designs.block_design.WittDesign"]], "are_hyperplanes_in_projective_geometry_parameters() (in module sage.combinat.designs.block_design)": [[77, "sage.combinat.designs.block_design.are_hyperplanes_in_projective_geometry_parameters"]], "normalize_hughes_plane_point() (in module sage.combinat.designs.block_design)": [[77, "sage.combinat.designs.block_design.normalize_hughes_plane_point"]], "projective_plane() (in module sage.combinat.designs.block_design)": [[77, "sage.combinat.designs.block_design.projective_plane"]], "projective_plane_to_oa() (in module sage.combinat.designs.block_design)": [[77, "sage.combinat.designs.block_design.projective_plane_to_OA"]], "q3_minus_one_matrix() (in module sage.combinat.designs.block_design)": [[77, "sage.combinat.designs.block_design.q3_minus_one_matrix"]], "sage.combinat.designs.block_design": [[77, "module-sage.combinat.designs.block_design"]], "tdesign_params() (in module sage.combinat.designs.block_design)": [[77, "sage.combinat.designs.block_design.tdesign_params"]], "sage.combinat.designs.covering_array": [[78, "module-sage.combinat.designs.covering_array"]], "coveringdesign (class in sage.combinat.designs.covering_design)": [[79, "sage.combinat.designs.covering_design.CoveringDesign"]], "best_known_covering_design_www() (in module sage.combinat.designs.covering_design)": [[79, "sage.combinat.designs.covering_design.best_known_covering_design_www"]], "creator() (sage.combinat.designs.covering_design.coveringdesign method)": [[79, "sage.combinat.designs.covering_design.CoveringDesign.creator"]], "incidence_structure() (sage.combinat.designs.covering_design.coveringdesign method)": [[79, "sage.combinat.designs.covering_design.CoveringDesign.incidence_structure"]], "is_covering() (sage.combinat.designs.covering_design.coveringdesign method)": [[79, "sage.combinat.designs.covering_design.CoveringDesign.is_covering"]], "k() (sage.combinat.designs.covering_design.coveringdesign method)": [[79, "sage.combinat.designs.covering_design.CoveringDesign.k"]], "low_bd() (sage.combinat.designs.covering_design.coveringdesign method)": [[79, "sage.combinat.designs.covering_design.CoveringDesign.low_bd"]], "method() (sage.combinat.designs.covering_design.coveringdesign method)": [[79, "sage.combinat.designs.covering_design.CoveringDesign.method"]], "sage.combinat.designs.covering_design": [[79, "module-sage.combinat.designs.covering_design"]], "schonheim() (in module sage.combinat.designs.covering_design)": [[79, "sage.combinat.designs.covering_design.schonheim"]], "size() (sage.combinat.designs.covering_design.coveringdesign method)": [[79, "sage.combinat.designs.covering_design.CoveringDesign.size"]], "t() (sage.combinat.designs.covering_design.coveringdesign method)": [[79, "sage.combinat.designs.covering_design.CoveringDesign.t"]], "timestamp() (sage.combinat.designs.covering_design.coveringdesign method)": [[79, "sage.combinat.designs.covering_design.CoveringDesign.timestamp"]], "trivial_covering_design() (in module sage.combinat.designs.covering_design)": [[79, "sage.combinat.designs.covering_design.trivial_covering_design"]], "v() (sage.combinat.designs.covering_design.coveringdesign method)": [[79, "sage.combinat.designs.covering_design.CoveringDesign.v"]], "bibd_106_6_1() (in module sage.combinat.designs.database)": [[80, "sage.combinat.designs.database.BIBD_106_6_1"]], "bibd_111_6_1() (in module sage.combinat.designs.database)": [[80, "sage.combinat.designs.database.BIBD_111_6_1"]], "bibd_126_6_1() (in module sage.combinat.designs.database)": [[80, "sage.combinat.designs.database.BIBD_126_6_1"]], "bibd_136_6_1() (in module sage.combinat.designs.database)": [[80, "sage.combinat.designs.database.BIBD_136_6_1"]], "bibd_141_6_1() (in module sage.combinat.designs.database)": [[80, "sage.combinat.designs.database.BIBD_141_6_1"]], "bibd_171_6_1() (in module sage.combinat.designs.database)": [[80, "sage.combinat.designs.database.BIBD_171_6_1"]], "bibd_196_6_1() (in module sage.combinat.designs.database)": [[80, "sage.combinat.designs.database.BIBD_196_6_1"]], "bibd_201_6_1() (in module sage.combinat.designs.database)": [[80, "sage.combinat.designs.database.BIBD_201_6_1"]], "bibd_45_9_8() (in module sage.combinat.designs.database)": [[80, "sage.combinat.designs.database.BIBD_45_9_8"]], "bibd_56_11_2() (in module sage.combinat.designs.database)": [[80, "sage.combinat.designs.database.BIBD_56_11_2"]], "bibd_66_6_1() (in module sage.combinat.designs.database)": [[80, "sage.combinat.designs.database.BIBD_66_6_1"]], "bibd_76_6_1() (in module sage.combinat.designs.database)": [[80, "sage.combinat.designs.database.BIBD_76_6_1"]], "bibd_79_13_2() (in module sage.combinat.designs.database)": [[80, "sage.combinat.designs.database.BIBD_79_13_2"]], "bibd_96_6_1() (in module sage.combinat.designs.database)": [[80, "sage.combinat.designs.database.BIBD_96_6_1"]], "dm_12_6_1() (in module sage.combinat.designs.database)": [[80, "sage.combinat.designs.database.DM_12_6_1"]], "dm_21_6_1() (in module sage.combinat.designs.database)": [[80, "sage.combinat.designs.database.DM_21_6_1"]], "dm_24_8_1() (in module sage.combinat.designs.database)": [[80, "sage.combinat.designs.database.DM_24_8_1"]], "dm_273_17_1() (in module sage.combinat.designs.database)": [[80, "sage.combinat.designs.database.DM_273_17_1"]], "dm_28_6_1() (in module sage.combinat.designs.database)": [[80, "sage.combinat.designs.database.DM_28_6_1"]], "dm_33_6_1() (in module sage.combinat.designs.database)": [[80, "sage.combinat.designs.database.DM_33_6_1"]], "dm_35_6_1() (in module sage.combinat.designs.database)": [[80, "sage.combinat.designs.database.DM_35_6_1"]], "dm_36_9_1() (in module sage.combinat.designs.database)": [[80, "sage.combinat.designs.database.DM_36_9_1"]], "dm_39_6_1() (in module sage.combinat.designs.database)": [[80, "sage.combinat.designs.database.DM_39_6_1"]], "dm_44_6_1() (in module sage.combinat.designs.database)": [[80, "sage.combinat.designs.database.DM_44_6_1"]], "dm_45_7_1() (in module sage.combinat.designs.database)": [[80, "sage.combinat.designs.database.DM_45_7_1"]], "dm_48_9_1() (in module sage.combinat.designs.database)": [[80, "sage.combinat.designs.database.DM_48_9_1"]], "dm_51_6_1() (in module sage.combinat.designs.database)": [[80, "sage.combinat.designs.database.DM_51_6_1"]], "dm_52_6_1() (in module sage.combinat.designs.database)": [[80, "sage.combinat.designs.database.DM_52_6_1"]], "dm_55_7_1() (in module sage.combinat.designs.database)": [[80, "sage.combinat.designs.database.DM_55_7_1"]], "dm_56_8_1() (in module sage.combinat.designs.database)": [[80, "sage.combinat.designs.database.DM_56_8_1"]], "dm_57_8_1() (in module sage.combinat.designs.database)": [[80, "sage.combinat.designs.database.DM_57_8_1"]], "dm_60_6_1() (in module sage.combinat.designs.database)": [[80, "sage.combinat.designs.database.DM_60_6_1"]], "dm_75_8_1() (in module sage.combinat.designs.database)": [[80, "sage.combinat.designs.database.DM_75_8_1"]], "dm_993_32_1() (in module sage.combinat.designs.database)": [[80, "sage.combinat.designs.database.DM_993_32_1"]], "higmansimsdesign() (in module sage.combinat.designs.database)": [[80, "sage.combinat.designs.database.HigmanSimsDesign"]], "mols_10_2() (in module sage.combinat.designs.database)": [[80, "sage.combinat.designs.database.MOLS_10_2"]], "mols_12_5() (in module sage.combinat.designs.database)": [[80, "sage.combinat.designs.database.MOLS_12_5"]], "mols_14_4() (in module sage.combinat.designs.database)": [[80, "sage.combinat.designs.database.MOLS_14_4"]], "mols_15_4() (in module sage.combinat.designs.database)": [[80, "sage.combinat.designs.database.MOLS_15_4"]], "mols_18_3() (in module sage.combinat.designs.database)": [[80, "sage.combinat.designs.database.MOLS_18_3"]], "oa_10_1620() (in module sage.combinat.designs.database)": [[80, "sage.combinat.designs.database.OA_10_1620"]], "oa_10_205() (in module sage.combinat.designs.database)": [[80, "sage.combinat.designs.database.OA_10_205"]], "oa_10_469() (in module sage.combinat.designs.database)": [[80, "sage.combinat.designs.database.OA_10_469"]], "oa_10_520() (in module sage.combinat.designs.database)": [[80, "sage.combinat.designs.database.OA_10_520"]], "oa_10_796() (in module sage.combinat.designs.database)": [[80, "sage.combinat.designs.database.OA_10_796"]], "oa_11_160() (in module sage.combinat.designs.database)": [[80, "sage.combinat.designs.database.OA_11_160"]], "oa_11_185() (in module sage.combinat.designs.database)": [[80, "sage.combinat.designs.database.OA_11_185"]], "oa_11_254() (in module sage.combinat.designs.database)": [[80, "sage.combinat.designs.database.OA_11_254"]], "oa_11_640() (in module sage.combinat.designs.database)": [[80, "sage.combinat.designs.database.OA_11_640"]], "oa_11_80() (in module sage.combinat.designs.database)": [[80, "sage.combinat.designs.database.OA_11_80"]], "oa_12_522() (in module sage.combinat.designs.database)": [[80, "sage.combinat.designs.database.OA_12_522"]], "oa_14_524() (in module sage.combinat.designs.database)": [[80, "sage.combinat.designs.database.OA_14_524"]], "oa_15_112() (in module sage.combinat.designs.database)": [[80, "sage.combinat.designs.database.OA_15_112"]], "oa_15_224() (in module sage.combinat.designs.database)": [[80, "sage.combinat.designs.database.OA_15_224"]], "oa_15_896() (in module sage.combinat.designs.database)": [[80, "sage.combinat.designs.database.OA_15_896"]], "oa_16_176() (in module sage.combinat.designs.database)": [[80, "sage.combinat.designs.database.OA_16_176"]], "oa_16_208() (in module sage.combinat.designs.database)": [[80, "sage.combinat.designs.database.OA_16_208"]], "oa_17_560() (in module sage.combinat.designs.database)": [[80, "sage.combinat.designs.database.OA_17_560"]], "oa_20_352() (in module sage.combinat.designs.database)": [[80, "sage.combinat.designs.database.OA_20_352"]], "oa_20_416() (in module sage.combinat.designs.database)": [[80, "sage.combinat.designs.database.OA_20_416"]], "oa_20_544() (in module sage.combinat.designs.database)": [[80, "sage.combinat.designs.database.OA_20_544"]], "oa_25_1262() (in module sage.combinat.designs.database)": [[80, "sage.combinat.designs.database.OA_25_1262"]], "oa_520_plus_x() (in module sage.combinat.designs.database)": [[80, "sage.combinat.designs.database.OA_520_plus_x"]], "oa_7_18() (in module sage.combinat.designs.database)": [[80, "sage.combinat.designs.database.OA_7_18"]], "oa_7_66() (in module sage.combinat.designs.database)": [[80, "sage.combinat.designs.database.OA_7_66"]], "oa_7_68() (in module sage.combinat.designs.database)": [[80, "sage.combinat.designs.database.OA_7_68"]], "oa_7_74() (in module sage.combinat.designs.database)": [[80, "sage.combinat.designs.database.OA_7_74"]], "oa_8_69() (in module sage.combinat.designs.database)": [[80, "sage.combinat.designs.database.OA_8_69"]], "oa_8_76() (in module sage.combinat.designs.database)": [[80, "sage.combinat.designs.database.OA_8_76"]], "oa_9_1078() (in module sage.combinat.designs.database)": [[80, "sage.combinat.designs.database.OA_9_1078"]], "oa_9_120() (in module sage.combinat.designs.database)": [[80, "sage.combinat.designs.database.OA_9_120"]], "oa_9_135() (in module sage.combinat.designs.database)": [[80, "sage.combinat.designs.database.OA_9_135"]], "oa_9_1612() (in module sage.combinat.designs.database)": [[80, "sage.combinat.designs.database.OA_9_1612"]], "oa_9_40() (in module sage.combinat.designs.database)": [[80, "sage.combinat.designs.database.OA_9_40"]], "qdm_19_6_1_1_1() (in module sage.combinat.designs.database)": [[80, "sage.combinat.designs.database.QDM_19_6_1_1_1"]], "qdm_21_5_1_1_1() (in module sage.combinat.designs.database)": [[80, "sage.combinat.designs.database.QDM_21_5_1_1_1"]], "qdm_21_6_1_1_5() (in module sage.combinat.designs.database)": [[80, "sage.combinat.designs.database.QDM_21_6_1_1_5"]], "qdm_25_6_1_1_5() (in module sage.combinat.designs.database)": [[80, "sage.combinat.designs.database.QDM_25_6_1_1_5"]], "qdm_33_6_1_1_1() (in module sage.combinat.designs.database)": [[80, "sage.combinat.designs.database.QDM_33_6_1_1_1"]], "qdm_35_7_1_1_7() (in module sage.combinat.designs.database)": [[80, "sage.combinat.designs.database.QDM_35_7_1_1_7"]], "qdm_37_6_1_1_1() (in module sage.combinat.designs.database)": [[80, "sage.combinat.designs.database.QDM_37_6_1_1_1"]], "qdm_45_7_1_1_9() (in module sage.combinat.designs.database)": [[80, "sage.combinat.designs.database.QDM_45_7_1_1_9"]], "qdm_54_7_1_1_8() (in module sage.combinat.designs.database)": [[80, "sage.combinat.designs.database.QDM_54_7_1_1_8"]], "qdm_57_9_1_1_8() (in module sage.combinat.designs.database)": [[80, "sage.combinat.designs.database.QDM_57_9_1_1_8"]], "rbibd_120_8_1() (in module sage.combinat.designs.database)": [[80, "sage.combinat.designs.database.RBIBD_120_8_1"]], "cyclic_shift() (in module sage.combinat.designs.database)": [[80, "sage.combinat.designs.database.cyclic_shift"]], "f() (in module sage.combinat.designs.database)": [[80, "sage.combinat.designs.database.f"]], "sage.combinat.designs.database": [[80, "module-sage.combinat.designs.database"]], "sage.combinat.designs.design_catalog": [[81, "module-sage.combinat.designs.design_catalog"]], "is_covering_array() (in module sage.combinat.designs.designs_pyx)": [[82, "sage.combinat.designs.designs_pyx.is_covering_array"]], "is_difference_matrix() (in module sage.combinat.designs.designs_pyx)": [[82, "sage.combinat.designs.designs_pyx.is_difference_matrix"]], "is_group_divisible_design() (in module sage.combinat.designs.designs_pyx)": [[82, "sage.combinat.designs.designs_pyx.is_group_divisible_design"]], "is_orthogonal_array() (in module sage.combinat.designs.designs_pyx)": [[82, "sage.combinat.designs.designs_pyx.is_orthogonal_array"]], "is_pairwise_balanced_design() (in module sage.combinat.designs.designs_pyx)": [[82, "sage.combinat.designs.designs_pyx.is_pairwise_balanced_design"]], "is_projective_plane() (in module sage.combinat.designs.designs_pyx)": [[82, "sage.combinat.designs.designs_pyx.is_projective_plane"]], "is_quasi_difference_matrix() (in module sage.combinat.designs.designs_pyx)": [[82, "sage.combinat.designs.designs_pyx.is_quasi_difference_matrix"]], "sage.combinat.designs.designs_pyx": [[82, "module-sage.combinat.designs.designs_pyx"]], "are_complementary_difference_sets() (in module sage.combinat.designs.difference_family)": [[83, "sage.combinat.designs.difference_family.are_complementary_difference_sets"]], "are_hadamard_difference_set_parameters() (in module sage.combinat.designs.difference_family)": [[83, "sage.combinat.designs.difference_family.are_hadamard_difference_set_parameters"]], "are_mcfarland_1973_parameters() (in module sage.combinat.designs.difference_family)": [[83, "sage.combinat.designs.difference_family.are_mcfarland_1973_parameters"]], "block_stabilizer() (in module sage.combinat.designs.difference_family)": [[83, "sage.combinat.designs.difference_family.block_stabilizer"]], "complementary_difference_sets() (in module sage.combinat.designs.difference_family)": [[83, "sage.combinat.designs.difference_family.complementary_difference_sets"]], "complementary_difference_setsi() (in module sage.combinat.designs.difference_family)": [[83, "sage.combinat.designs.difference_family.complementary_difference_setsI"]], "complementary_difference_setsii() (in module sage.combinat.designs.difference_family)": [[83, "sage.combinat.designs.difference_family.complementary_difference_setsII"]], "complementary_difference_setsiii() (in module sage.combinat.designs.difference_family)": [[83, "sage.combinat.designs.difference_family.complementary_difference_setsIII"]], "df_q_6_1() (in module sage.combinat.designs.difference_family)": [[83, "sage.combinat.designs.difference_family.df_q_6_1"]], "difference_family() (in module sage.combinat.designs.difference_family)": [[83, "sage.combinat.designs.difference_family.difference_family"]], "get_fixed_relative_difference_set() (in module sage.combinat.designs.difference_family)": [[83, "sage.combinat.designs.difference_family.get_fixed_relative_difference_set"]], "group_law() (in module sage.combinat.designs.difference_family)": [[83, "sage.combinat.designs.difference_family.group_law"]], "hadamard_difference_set_product() (in module sage.combinat.designs.difference_family)": [[83, "sage.combinat.designs.difference_family.hadamard_difference_set_product"]], "hadamard_difference_set_product_parameters() (in module sage.combinat.designs.difference_family)": [[83, "sage.combinat.designs.difference_family.hadamard_difference_set_product_parameters"]], "is_difference_family() (in module sage.combinat.designs.difference_family)": [[83, "sage.combinat.designs.difference_family.is_difference_family"]], "is_fixed_relative_difference_set() (in module sage.combinat.designs.difference_family)": [[83, "sage.combinat.designs.difference_family.is_fixed_relative_difference_set"]], "is_relative_difference_set() (in module sage.combinat.designs.difference_family)": [[83, "sage.combinat.designs.difference_family.is_relative_difference_set"]], "is_supplementary_difference_set() (in module sage.combinat.designs.difference_family)": [[83, "sage.combinat.designs.difference_family.is_supplementary_difference_set"]], "mcfarland_1973_construction() (in module sage.combinat.designs.difference_family)": [[83, "sage.combinat.designs.difference_family.mcfarland_1973_construction"]], "one_cyclic_tiling() (in module sage.combinat.designs.difference_family)": [[83, "sage.combinat.designs.difference_family.one_cyclic_tiling"]], "one_radical_difference_family() (in module sage.combinat.designs.difference_family)": [[83, "sage.combinat.designs.difference_family.one_radical_difference_family"]], "radical_difference_family() (in module sage.combinat.designs.difference_family)": [[83, "sage.combinat.designs.difference_family.radical_difference_family"]], "radical_difference_set() (in module sage.combinat.designs.difference_family)": [[83, "sage.combinat.designs.difference_family.radical_difference_set"]], "relative_difference_set_from_homomorphism() (in module sage.combinat.designs.difference_family)": [[83, "sage.combinat.designs.difference_family.relative_difference_set_from_homomorphism"]], "relative_difference_set_from_m_sequence() (in module sage.combinat.designs.difference_family)": [[83, "sage.combinat.designs.difference_family.relative_difference_set_from_m_sequence"]], "sage.combinat.designs.difference_family": [[83, "module-sage.combinat.designs.difference_family"]], "singer_difference_set() (in module sage.combinat.designs.difference_family)": [[83, "sage.combinat.designs.difference_family.singer_difference_set"]], "skew_supplementary_difference_set() (in module sage.combinat.designs.difference_family)": [[83, "sage.combinat.designs.difference_family.skew_supplementary_difference_set"]], "skew_supplementary_difference_set_over_polynomial_ring() (in module sage.combinat.designs.difference_family)": [[83, "sage.combinat.designs.difference_family.skew_supplementary_difference_set_over_polynomial_ring"]], "skew_supplementary_difference_set_with_paley_todd() (in module sage.combinat.designs.difference_family)": [[83, "sage.combinat.designs.difference_family.skew_supplementary_difference_set_with_paley_todd"]], "supplementary_difference_set() (in module sage.combinat.designs.difference_family)": [[83, "sage.combinat.designs.difference_family.supplementary_difference_set"]], "supplementary_difference_set_from_rel_diff_set() (in module sage.combinat.designs.difference_family)": [[83, "sage.combinat.designs.difference_family.supplementary_difference_set_from_rel_diff_set"]], "supplementary_difference_set_hadamard() (in module sage.combinat.designs.difference_family)": [[83, "sage.combinat.designs.difference_family.supplementary_difference_set_hadamard"]], "turyn_1965_3x3xk() (in module sage.combinat.designs.difference_family)": [[83, "sage.combinat.designs.difference_family.turyn_1965_3x3xK"]], "twin_prime_powers_difference_set() (in module sage.combinat.designs.difference_family)": [[83, "sage.combinat.designs.difference_family.twin_prime_powers_difference_set"]], "difference_matrix() (in module sage.combinat.designs.difference_matrices)": [[84, "sage.combinat.designs.difference_matrices.difference_matrix"]], "difference_matrix_product() (in module sage.combinat.designs.difference_matrices)": [[84, "sage.combinat.designs.difference_matrices.difference_matrix_product"]], "find_product_decomposition() (in module sage.combinat.designs.difference_matrices)": [[84, "sage.combinat.designs.difference_matrices.find_product_decomposition"]], "sage.combinat.designs.difference_matrices": [[84, "module-sage.combinat.designs.difference_matrices"]], "evenlydistributedsetsbacktracker (class in sage.combinat.designs.evenly_distributed_sets)": [[85, "sage.combinat.designs.evenly_distributed_sets.EvenlyDistributedSetsBacktracker"]], "an_element() (sage.combinat.designs.evenly_distributed_sets.evenlydistributedsetsbacktracker method)": [[85, "sage.combinat.designs.evenly_distributed_sets.EvenlyDistributedSetsBacktracker.an_element"]], "cardinality() (sage.combinat.designs.evenly_distributed_sets.evenlydistributedsetsbacktracker method)": [[85, "sage.combinat.designs.evenly_distributed_sets.EvenlyDistributedSetsBacktracker.cardinality"]], "sage.combinat.designs.evenly_distributed_sets": [[85, "module-sage.combinat.designs.evenly_distributed_sets"]], "to_difference_family() (sage.combinat.designs.evenly_distributed_sets.evenlydistributedsetsbacktracker method)": [[85, "sage.combinat.designs.evenly_distributed_sets.EvenlyDistributedSetsBacktracker.to_difference_family"]], "xtree (class in sage.combinat.designs.ext_rep)": [[86, "sage.combinat.designs.ext_rep.XTree"]], "xtreeprocessor (class in sage.combinat.designs.ext_rep)": [[86, "sage.combinat.designs.ext_rep.XTreeProcessor"]], "check_dtrs_protocols() (in module sage.combinat.designs.ext_rep)": [[86, "sage.combinat.designs.ext_rep.check_dtrs_protocols"]], "designs_from_xml() (in module sage.combinat.designs.ext_rep)": [[86, "sage.combinat.designs.ext_rep.designs_from_XML"]], "designs_from_xml_url() (in module sage.combinat.designs.ext_rep)": [[86, "sage.combinat.designs.ext_rep.designs_from_XML_url"]], "dump_to_tmpfile() (in module sage.combinat.designs.ext_rep)": [[86, "sage.combinat.designs.ext_rep.dump_to_tmpfile"]], "open_extrep_file() (in module sage.combinat.designs.ext_rep)": [[86, "sage.combinat.designs.ext_rep.open_extrep_file"]], "open_extrep_url() (in module sage.combinat.designs.ext_rep)": [[86, "sage.combinat.designs.ext_rep.open_extrep_url"]], "parse() (sage.combinat.designs.ext_rep.xtreeprocessor method)": [[86, "sage.combinat.designs.ext_rep.XTreeProcessor.parse"]], "sage.combinat.designs.ext_rep": [[86, "module-sage.combinat.designs.ext_rep"]], "dual_gq_ovoid() (in module sage.combinat.designs.gen_quadrangles_with_spread)": [[87, "sage.combinat.designs.gen_quadrangles_with_spread.dual_GQ_ovoid"]], "generalised_quadrangle_hermitian_with_ovoid() (in module sage.combinat.designs.gen_quadrangles_with_spread)": [[87, "sage.combinat.designs.gen_quadrangles_with_spread.generalised_quadrangle_hermitian_with_ovoid"]], "generalised_quadrangle_with_spread() (in module sage.combinat.designs.gen_quadrangles_with_spread)": [[87, "sage.combinat.designs.gen_quadrangles_with_spread.generalised_quadrangle_with_spread"]], "is_gq_with_spread() (in module sage.combinat.designs.gen_quadrangles_with_spread)": [[87, "sage.combinat.designs.gen_quadrangles_with_spread.is_GQ_with_spread"]], "sage.combinat.designs.gen_quadrangles_with_spread": [[87, "module-sage.combinat.designs.gen_quadrangles_with_spread"]], "gdd_4_2() (in module sage.combinat.designs.group_divisible_designs)": [[88, "sage.combinat.designs.group_divisible_designs.GDD_4_2"]], "groupdivisibledesign (class in sage.combinat.designs.group_divisible_designs)": [[88, "sage.combinat.designs.group_divisible_designs.GroupDivisibleDesign"]], "group_divisible_design() (in module sage.combinat.designs.group_divisible_designs)": [[88, "sage.combinat.designs.group_divisible_designs.group_divisible_design"]], "groups() (sage.combinat.designs.group_divisible_designs.groupdivisibledesign method)": [[88, "sage.combinat.designs.group_divisible_designs.GroupDivisibleDesign.groups"]], "sage.combinat.designs.group_divisible_designs": [[88, "module-sage.combinat.designs.group_divisible_designs"]], "incidencestructure (class in sage.combinat.designs.incidence_structures)": [[89, "sage.combinat.designs.incidence_structures.IncidenceStructure"]], "automorphism_group() (sage.combinat.designs.incidence_structures.incidencestructure method)": [[89, "sage.combinat.designs.incidence_structures.IncidenceStructure.automorphism_group"]], "block_sizes() (sage.combinat.designs.incidence_structures.incidencestructure method)": [[89, "sage.combinat.designs.incidence_structures.IncidenceStructure.block_sizes"]], "blocks() (sage.combinat.designs.incidence_structures.incidencestructure method)": [[89, "sage.combinat.designs.incidence_structures.IncidenceStructure.blocks"]], "canonical_label() (sage.combinat.designs.incidence_structures.incidencestructure method)": [[89, "sage.combinat.designs.incidence_structures.IncidenceStructure.canonical_label"]], "coloring() (sage.combinat.designs.incidence_structures.incidencestructure method)": [[89, "sage.combinat.designs.incidence_structures.IncidenceStructure.coloring"]], "complement() (sage.combinat.designs.incidence_structures.incidencestructure method)": [[89, "sage.combinat.designs.incidence_structures.IncidenceStructure.complement"]], "copy() (sage.combinat.designs.incidence_structures.incidencestructure method)": [[89, "sage.combinat.designs.incidence_structures.IncidenceStructure.copy"]], "degree() (sage.combinat.designs.incidence_structures.incidencestructure method)": [[89, "sage.combinat.designs.incidence_structures.IncidenceStructure.degree"]], "degrees() (sage.combinat.designs.incidence_structures.incidencestructure method)": [[89, "sage.combinat.designs.incidence_structures.IncidenceStructure.degrees"]], "dual() (sage.combinat.designs.incidence_structures.incidencestructure method)": [[89, "sage.combinat.designs.incidence_structures.IncidenceStructure.dual"]], "edge_coloring() (sage.combinat.designs.incidence_structures.incidencestructure method)": [[89, "sage.combinat.designs.incidence_structures.IncidenceStructure.edge_coloring"]], "ground_set() (sage.combinat.designs.incidence_structures.incidencestructure method)": [[89, "sage.combinat.designs.incidence_structures.IncidenceStructure.ground_set"]], "incidence_graph() (sage.combinat.designs.incidence_structures.incidencestructure method)": [[89, "sage.combinat.designs.incidence_structures.IncidenceStructure.incidence_graph"]], "incidence_matrix() (sage.combinat.designs.incidence_structures.incidencestructure method)": [[89, "sage.combinat.designs.incidence_structures.IncidenceStructure.incidence_matrix"]], "induced_substructure() (sage.combinat.designs.incidence_structures.incidencestructure method)": [[89, "sage.combinat.designs.incidence_structures.IncidenceStructure.induced_substructure"]], "intersection_graph() (sage.combinat.designs.incidence_structures.incidencestructure method)": [[89, "sage.combinat.designs.incidence_structures.IncidenceStructure.intersection_graph"]], "is_berge_cyclic() (sage.combinat.designs.incidence_structures.incidencestructure method)": [[89, "sage.combinat.designs.incidence_structures.IncidenceStructure.is_berge_cyclic"]], "is_connected() (sage.combinat.designs.incidence_structures.incidencestructure method)": [[89, "sage.combinat.designs.incidence_structures.IncidenceStructure.is_connected"]], "is_generalized_quadrangle() (sage.combinat.designs.incidence_structures.incidencestructure method)": [[89, "sage.combinat.designs.incidence_structures.IncidenceStructure.is_generalized_quadrangle"]], "is_isomorphic() (sage.combinat.designs.incidence_structures.incidencestructure method)": [[89, "sage.combinat.designs.incidence_structures.IncidenceStructure.is_isomorphic"]], "is_regular() (sage.combinat.designs.incidence_structures.incidencestructure method)": [[89, "sage.combinat.designs.incidence_structures.IncidenceStructure.is_regular"]], "is_resolvable() (sage.combinat.designs.incidence_structures.incidencestructure method)": [[89, "sage.combinat.designs.incidence_structures.IncidenceStructure.is_resolvable"]], "is_simple() (sage.combinat.designs.incidence_structures.incidencestructure method)": [[89, "sage.combinat.designs.incidence_structures.IncidenceStructure.is_simple"]], "is_spread() (sage.combinat.designs.incidence_structures.incidencestructure method)": [[89, "sage.combinat.designs.incidence_structures.IncidenceStructure.is_spread"]], "is_t_design() (sage.combinat.designs.incidence_structures.incidencestructure method)": [[89, "sage.combinat.designs.incidence_structures.IncidenceStructure.is_t_design"]], "is_uniform() (sage.combinat.designs.incidence_structures.incidencestructure method)": [[89, "sage.combinat.designs.incidence_structures.IncidenceStructure.is_uniform"]], "isomorphic_substructures_iterator() (sage.combinat.designs.incidence_structures.incidencestructure method)": [[89, "sage.combinat.designs.incidence_structures.IncidenceStructure.isomorphic_substructures_iterator"]], "num_blocks() (sage.combinat.designs.incidence_structures.incidencestructure method)": [[89, "sage.combinat.designs.incidence_structures.IncidenceStructure.num_blocks"]], "num_points() (sage.combinat.designs.incidence_structures.incidencestructure method)": [[89, "sage.combinat.designs.incidence_structures.IncidenceStructure.num_points"]], "packing() (sage.combinat.designs.incidence_structures.incidencestructure method)": [[89, "sage.combinat.designs.incidence_structures.IncidenceStructure.packing"]], "rank() (sage.combinat.designs.incidence_structures.incidencestructure method)": [[89, "sage.combinat.designs.incidence_structures.IncidenceStructure.rank"]], "relabel() (sage.combinat.designs.incidence_structures.incidencestructure method)": [[89, "sage.combinat.designs.incidence_structures.IncidenceStructure.relabel"]], "sage.combinat.designs.incidence_structures": [[89, "module-sage.combinat.designs.incidence_structures"]], "trace() (sage.combinat.designs.incidence_structures.incidencestructure method)": [[89, "sage.combinat.designs.incidence_structures.IncidenceStructure.trace"]], "mols_table() (in module sage.combinat.designs.latin_squares)": [[90, "sage.combinat.designs.latin_squares.MOLS_table"]], "are_mutually_orthogonal_latin_squares() (in module sage.combinat.designs.latin_squares)": [[90, "sage.combinat.designs.latin_squares.are_mutually_orthogonal_latin_squares"]], "latin_square_product() (in module sage.combinat.designs.latin_squares)": [[90, "sage.combinat.designs.latin_squares.latin_square_product"]], "mutually_orthogonal_latin_squares() (in module sage.combinat.designs.latin_squares)": [[90, "sage.combinat.designs.latin_squares.mutually_orthogonal_latin_squares"]], "sage.combinat.designs.latin_squares": [[90, "module-sage.combinat.designs.latin_squares"]], "oamainfunctions (class in sage.combinat.designs.orthogonal_arrays)": [[91, "sage.combinat.designs.orthogonal_arrays.OAMainFunctions"]], "oa_find_disjoint_blocks() (in module sage.combinat.designs.orthogonal_arrays)": [[91, "sage.combinat.designs.orthogonal_arrays.OA_find_disjoint_blocks"]], "oa_from_pbd() (in module sage.combinat.designs.orthogonal_arrays)": [[91, "sage.combinat.designs.orthogonal_arrays.OA_from_PBD"]], "oa_from_vmt() (in module sage.combinat.designs.orthogonal_arrays)": [[91, "sage.combinat.designs.orthogonal_arrays.OA_from_Vmt"]], "oa_from_quasi_difference_matrix() (in module sage.combinat.designs.orthogonal_arrays)": [[91, "sage.combinat.designs.orthogonal_arrays.OA_from_quasi_difference_matrix"]], "oa_from_wider_oa() (in module sage.combinat.designs.orthogonal_arrays)": [[91, "sage.combinat.designs.orthogonal_arrays.OA_from_wider_OA"]], "oa_n_times_2_pow_c_from_matrix() (in module sage.combinat.designs.orthogonal_arrays)": [[91, "sage.combinat.designs.orthogonal_arrays.OA_n_times_2_pow_c_from_matrix"]], "oa_relabel() (in module sage.combinat.designs.orthogonal_arrays)": [[91, "sage.combinat.designs.orthogonal_arrays.OA_relabel"]], "oa_standard_label() (in module sage.combinat.designs.orthogonal_arrays)": [[91, "sage.combinat.designs.orthogonal_arrays.OA_standard_label"]], "qdm_from_vmt() (in module sage.combinat.designs.orthogonal_arrays)": [[91, "sage.combinat.designs.orthogonal_arrays.QDM_from_Vmt"]], "td_product() (in module sage.combinat.designs.orthogonal_arrays)": [[91, "sage.combinat.designs.orthogonal_arrays.TD_product"]], "transversaldesign (class in sage.combinat.designs.orthogonal_arrays)": [[91, "sage.combinat.designs.orthogonal_arrays.TransversalDesign"]], "build() (sage.combinat.designs.orthogonal_arrays.oamainfunctions static method)": [[91, "sage.combinat.designs.orthogonal_arrays.OAMainFunctions.build"]], "exists() (sage.combinat.designs.orthogonal_arrays.oamainfunctions static method)": [[91, "sage.combinat.designs.orthogonal_arrays.OAMainFunctions.exists"]], "explain_construction() (sage.combinat.designs.orthogonal_arrays.oamainfunctions static method)": [[91, "sage.combinat.designs.orthogonal_arrays.OAMainFunctions.explain_construction"]], "incomplete_orthogonal_array() (in module sage.combinat.designs.orthogonal_arrays)": [[91, "sage.combinat.designs.orthogonal_arrays.incomplete_orthogonal_array"]], "is_available() (sage.combinat.designs.orthogonal_arrays.oamainfunctions static method)": [[91, "sage.combinat.designs.orthogonal_arrays.OAMainFunctions.is_available"]], "is_transversal_design() (in module sage.combinat.designs.orthogonal_arrays)": [[91, "sage.combinat.designs.orthogonal_arrays.is_transversal_design"]], "largest_available_k() (in module sage.combinat.designs.orthogonal_arrays)": [[91, "sage.combinat.designs.orthogonal_arrays.largest_available_k"]], "largest_available_k() (sage.combinat.designs.orthogonal_arrays.oamainfunctions static method)": [[91, "sage.combinat.designs.orthogonal_arrays.OAMainFunctions.largest_available_k"]], "orthogonal_array() (in module sage.combinat.designs.orthogonal_arrays)": [[91, "sage.combinat.designs.orthogonal_arrays.orthogonal_array"]], "sage.combinat.designs.orthogonal_arrays": [[91, "module-sage.combinat.designs.orthogonal_arrays"]], "transversal_design() (in module sage.combinat.designs.orthogonal_arrays)": [[91, "sage.combinat.designs.orthogonal_arrays.transversal_design"]], "wilson_construction() (in module sage.combinat.designs.orthogonal_arrays)": [[91, "sage.combinat.designs.orthogonal_arrays.wilson_construction"]], "oa_and_oval() (in module sage.combinat.designs.orthogonal_arrays_build_recursive)": [[92, "sage.combinat.designs.orthogonal_arrays_build_recursive.OA_and_oval"]], "brouwer_separable_design() (in module sage.combinat.designs.orthogonal_arrays_build_recursive)": [[92, "sage.combinat.designs.orthogonal_arrays_build_recursive.brouwer_separable_design"]], "construction_3_3() (in module sage.combinat.designs.orthogonal_arrays_build_recursive)": [[92, "sage.combinat.designs.orthogonal_arrays_build_recursive.construction_3_3"]], "construction_3_4() (in module sage.combinat.designs.orthogonal_arrays_build_recursive)": [[92, "sage.combinat.designs.orthogonal_arrays_build_recursive.construction_3_4"]], "construction_3_5() (in module sage.combinat.designs.orthogonal_arrays_build_recursive)": [[92, "sage.combinat.designs.orthogonal_arrays_build_recursive.construction_3_5"]], "construction_3_6() (in module sage.combinat.designs.orthogonal_arrays_build_recursive)": [[92, "sage.combinat.designs.orthogonal_arrays_build_recursive.construction_3_6"]], "construction_q_x() (in module sage.combinat.designs.orthogonal_arrays_build_recursive)": [[92, "sage.combinat.designs.orthogonal_arrays_build_recursive.construction_q_x"]], "sage.combinat.designs.orthogonal_arrays_build_recursive": [[92, "module-sage.combinat.designs.orthogonal_arrays_build_recursive"]], "three_factor_product() (in module sage.combinat.designs.orthogonal_arrays_build_recursive)": [[92, "sage.combinat.designs.orthogonal_arrays_build_recursive.three_factor_product"]], "thwart_lemma_3_5() (in module sage.combinat.designs.orthogonal_arrays_build_recursive)": [[92, "sage.combinat.designs.orthogonal_arrays_build_recursive.thwart_lemma_3_5"]], "thwart_lemma_4_1() (in module sage.combinat.designs.orthogonal_arrays_build_recursive)": [[92, "sage.combinat.designs.orthogonal_arrays_build_recursive.thwart_lemma_4_1"]], "find_brouwer_separable_design() (in module sage.combinat.designs.orthogonal_arrays_find_recursive)": [[93, "sage.combinat.designs.orthogonal_arrays_find_recursive.find_brouwer_separable_design"]], "find_brouwer_van_rees_with_one_truncated_column() (in module sage.combinat.designs.orthogonal_arrays_find_recursive)": [[93, "sage.combinat.designs.orthogonal_arrays_find_recursive.find_brouwer_van_rees_with_one_truncated_column"]], "find_construction_3_3() (in module sage.combinat.designs.orthogonal_arrays_find_recursive)": [[93, "sage.combinat.designs.orthogonal_arrays_find_recursive.find_construction_3_3"]], "find_construction_3_4() (in module sage.combinat.designs.orthogonal_arrays_find_recursive)": [[93, "sage.combinat.designs.orthogonal_arrays_find_recursive.find_construction_3_4"]], "find_construction_3_5() (in module sage.combinat.designs.orthogonal_arrays_find_recursive)": [[93, "sage.combinat.designs.orthogonal_arrays_find_recursive.find_construction_3_5"]], "find_construction_3_6() (in module sage.combinat.designs.orthogonal_arrays_find_recursive)": [[93, "sage.combinat.designs.orthogonal_arrays_find_recursive.find_construction_3_6"]], "find_product_decomposition() (in module sage.combinat.designs.orthogonal_arrays_find_recursive)": [[93, "sage.combinat.designs.orthogonal_arrays_find_recursive.find_product_decomposition"]], "find_q_x() (in module sage.combinat.designs.orthogonal_arrays_find_recursive)": [[93, "sage.combinat.designs.orthogonal_arrays_find_recursive.find_q_x"]], "find_recursive_construction() (in module sage.combinat.designs.orthogonal_arrays_find_recursive)": [[93, "sage.combinat.designs.orthogonal_arrays_find_recursive.find_recursive_construction"]], "find_three_factor_product() (in module sage.combinat.designs.orthogonal_arrays_find_recursive)": [[93, "sage.combinat.designs.orthogonal_arrays_find_recursive.find_three_factor_product"]], "find_thwart_lemma_3_5() (in module sage.combinat.designs.orthogonal_arrays_find_recursive)": [[93, "sage.combinat.designs.orthogonal_arrays_find_recursive.find_thwart_lemma_3_5"]], "find_thwart_lemma_4_1() (in module sage.combinat.designs.orthogonal_arrays_find_recursive)": [[93, "sage.combinat.designs.orthogonal_arrays_find_recursive.find_thwart_lemma_4_1"]], "find_wilson_decomposition_with_one_truncated_group() (in module sage.combinat.designs.orthogonal_arrays_find_recursive)": [[93, "sage.combinat.designs.orthogonal_arrays_find_recursive.find_wilson_decomposition_with_one_truncated_group"]], "find_wilson_decomposition_with_two_truncated_groups() (in module sage.combinat.designs.orthogonal_arrays_find_recursive)": [[93, "sage.combinat.designs.orthogonal_arrays_find_recursive.find_wilson_decomposition_with_two_truncated_groups"]], "int_as_sum() (in module sage.combinat.designs.orthogonal_arrays_find_recursive)": [[93, "sage.combinat.designs.orthogonal_arrays_find_recursive.int_as_sum"]], "sage.combinat.designs.orthogonal_arrays_find_recursive": [[93, "module-sage.combinat.designs.orthogonal_arrays_find_recursive"]], "pbd_4_7() (in module sage.combinat.designs.resolvable_bibd)": [[94, "sage.combinat.designs.resolvable_bibd.PBD_4_7"]], "pbd_4_7_from_y() (in module sage.combinat.designs.resolvable_bibd)": [[94, "sage.combinat.designs.resolvable_bibd.PBD_4_7_from_Y"]], "kirkman_triple_system() (in module sage.combinat.designs.resolvable_bibd)": [[94, "sage.combinat.designs.resolvable_bibd.kirkman_triple_system"]], "resolvable_balanced_incomplete_block_design() (in module sage.combinat.designs.resolvable_bibd)": [[94, "sage.combinat.designs.resolvable_bibd.resolvable_balanced_incomplete_block_design"]], "sage.combinat.designs.resolvable_bibd": [[94, "module-sage.combinat.designs.resolvable_bibd"]], "v_4_1_rbibd() (in module sage.combinat.designs.resolvable_bibd)": [[94, "sage.combinat.designs.resolvable_bibd.v_4_1_rbibd"]], "p() (in module sage.combinat.designs.steiner_quadruple_systems)": [[95, "sage.combinat.designs.steiner_quadruple_systems.P"]], "barp() (in module sage.combinat.designs.steiner_quadruple_systems)": [[95, "sage.combinat.designs.steiner_quadruple_systems.barP"]], "barp_system() (in module sage.combinat.designs.steiner_quadruple_systems)": [[95, "sage.combinat.designs.steiner_quadruple_systems.barP_system"]], "four_n_minus_six() (in module sage.combinat.designs.steiner_quadruple_systems)": [[95, "sage.combinat.designs.steiner_quadruple_systems.four_n_minus_six"]], "relabel_system() (in module sage.combinat.designs.steiner_quadruple_systems)": [[95, "sage.combinat.designs.steiner_quadruple_systems.relabel_system"]], "sage.combinat.designs.steiner_quadruple_systems": [[95, "module-sage.combinat.designs.steiner_quadruple_systems"]], "steiner_quadruple_system() (in module sage.combinat.designs.steiner_quadruple_systems)": [[95, "sage.combinat.designs.steiner_quadruple_systems.steiner_quadruple_system"]], "three_n_minus_eight() (in module sage.combinat.designs.steiner_quadruple_systems)": [[95, "sage.combinat.designs.steiner_quadruple_systems.three_n_minus_eight"]], "three_n_minus_four() (in module sage.combinat.designs.steiner_quadruple_systems)": [[95, "sage.combinat.designs.steiner_quadruple_systems.three_n_minus_four"]], "three_n_minus_two() (in module sage.combinat.designs.steiner_quadruple_systems)": [[95, "sage.combinat.designs.steiner_quadruple_systems.three_n_minus_two"]], "twelve_n_minus_ten() (in module sage.combinat.designs.steiner_quadruple_systems)": [[95, "sage.combinat.designs.steiner_quadruple_systems.twelve_n_minus_ten"]], "two_n() (in module sage.combinat.designs.steiner_quadruple_systems)": [[95, "sage.combinat.designs.steiner_quadruple_systems.two_n"]], "subhypergraphsearch (class in sage.combinat.designs.subhypergraph_search)": [[96, "sage.combinat.designs.subhypergraph_search.SubHypergraphSearch"]], "relabel_heuristic() (sage.combinat.designs.subhypergraph_search.subhypergraphsearch method)": [[96, "sage.combinat.designs.subhypergraph_search.SubHypergraphSearch.relabel_heuristic"]], "sage.combinat.designs.subhypergraph_search": [[96, "module-sage.combinat.designs.subhypergraph_search"]], "twograph (class in sage.combinat.designs.twographs)": [[97, "sage.combinat.designs.twographs.TwoGraph"]], "complement() (sage.combinat.designs.twographs.twograph method)": [[97, "sage.combinat.designs.twographs.TwoGraph.complement"]], "descendant() (sage.combinat.designs.twographs.twograph method)": [[97, "sage.combinat.designs.twographs.TwoGraph.descendant"]], "is_regular_twograph() (sage.combinat.designs.twographs.twograph method)": [[97, "sage.combinat.designs.twographs.TwoGraph.is_regular_twograph"]], "is_twograph() (in module sage.combinat.designs.twographs)": [[97, "sage.combinat.designs.twographs.is_twograph"]], "sage.combinat.designs.twographs": [[97, "module-sage.combinat.designs.twographs"]], "taylor_twograph() (in module sage.combinat.designs.twographs)": [[97, "sage.combinat.designs.twographs.taylor_twograph"]], "twograph_descendant() (in module sage.combinat.designs.twographs)": [[97, "sage.combinat.designs.twographs.twograph_descendant"]], "diagram (class in sage.combinat.diagram)": [[98, "sage.combinat.diagram.Diagram"]], "diagrams (class in sage.combinat.diagram)": [[98, "sage.combinat.diagram.Diagrams"]], "element (sage.combinat.diagram.diagrams attribute)": [[98, "sage.combinat.diagram.Diagrams.Element"]], "element (sage.combinat.diagram.northwestdiagrams attribute)": [[98, "sage.combinat.diagram.NorthwestDiagrams.Element"]], "northwestdiagram (class in sage.combinat.diagram)": [[98, "sage.combinat.diagram.NorthwestDiagram"]], "northwestdiagrams (class in sage.combinat.diagram)": [[98, "sage.combinat.diagram.NorthwestDiagrams"]], "rothediagram() (in module sage.combinat.diagram)": [[98, "sage.combinat.diagram.RotheDiagram"]], "cells() (sage.combinat.diagram.diagram method)": [[98, "sage.combinat.diagram.Diagram.cells"]], "check() (sage.combinat.diagram.diagram method)": [[98, "sage.combinat.diagram.Diagram.check"]], "check() (sage.combinat.diagram.northwestdiagram method)": [[98, "sage.combinat.diagram.NorthwestDiagram.check"]], "from_composition() (sage.combinat.diagram.diagrams method)": [[98, "sage.combinat.diagram.Diagrams.from_composition"]], "from_parallelogram_polyomino() (sage.combinat.diagram.northwestdiagrams method)": [[98, "sage.combinat.diagram.NorthwestDiagrams.from_parallelogram_polyomino"]], "from_partition() (sage.combinat.diagram.northwestdiagrams method)": [[98, "sage.combinat.diagram.NorthwestDiagrams.from_partition"]], "from_permutation() (sage.combinat.diagram.northwestdiagrams method)": [[98, "sage.combinat.diagram.NorthwestDiagrams.from_permutation"]], "from_polyomino() (sage.combinat.diagram.diagrams method)": [[98, "sage.combinat.diagram.Diagrams.from_polyomino"]], "from_skew_partition() (sage.combinat.diagram.northwestdiagrams method)": [[98, "sage.combinat.diagram.NorthwestDiagrams.from_skew_partition"]], "from_zero_one_matrix() (sage.combinat.diagram.diagrams method)": [[98, "sage.combinat.diagram.Diagrams.from_zero_one_matrix"]], "n_cells() (sage.combinat.diagram.diagram method)": [[98, "sage.combinat.diagram.Diagram.n_cells"]], "ncols() (sage.combinat.diagram.diagram method)": [[98, "sage.combinat.diagram.Diagram.ncols"]], "nrows() (sage.combinat.diagram.diagram method)": [[98, "sage.combinat.diagram.Diagram.nrows"]], "number_of_cells() (sage.combinat.diagram.diagram method)": [[98, "sage.combinat.diagram.Diagram.number_of_cells"]], "number_of_cols() (sage.combinat.diagram.diagram method)": [[98, "sage.combinat.diagram.Diagram.number_of_cols"]], "number_of_rows() (sage.combinat.diagram.diagram method)": [[98, "sage.combinat.diagram.Diagram.number_of_rows"]], "peelable_tableaux() (sage.combinat.diagram.northwestdiagram method)": [[98, "sage.combinat.diagram.NorthwestDiagram.peelable_tableaux"]], "pp() (sage.combinat.diagram.diagram method)": [[98, "sage.combinat.diagram.Diagram.pp"]], "rothe_diagram() (sage.combinat.diagram.northwestdiagrams method)": [[98, "sage.combinat.diagram.NorthwestDiagrams.rothe_diagram"]], "sage.combinat.diagram": [[98, "module-sage.combinat.diagram"]], "size() (sage.combinat.diagram.diagram method)": [[98, "sage.combinat.diagram.Diagram.size"]], "specht_module() (sage.combinat.diagram.diagram method)": [[98, "sage.combinat.diagram.Diagram.specht_module"]], "specht_module_dimension() (sage.combinat.diagram.diagram method)": [[98, "sage.combinat.diagram.Diagram.specht_module_dimension"]], "abstractpartitiondiagram (class in sage.combinat.diagram_algebras)": [[99, "sage.combinat.diagram_algebras.AbstractPartitionDiagram"]], "abstractpartitiondiagrams (class in sage.combinat.diagram_algebras)": [[99, "sage.combinat.diagram_algebras.AbstractPartitionDiagrams"]], "braueralgebra (class in sage.combinat.diagram_algebras)": [[99, "sage.combinat.diagram_algebras.BrauerAlgebra"]], "brauerdiagram (class in sage.combinat.diagram_algebras)": [[99, "sage.combinat.diagram_algebras.BrauerDiagram"]], "brauerdiagrams (class in sage.combinat.diagram_algebras)": [[99, "sage.combinat.diagram_algebras.BrauerDiagrams"]], "diagramalgebra (class in sage.combinat.diagram_algebras)": [[99, "sage.combinat.diagram_algebras.DiagramAlgebra"]], "diagramalgebra.element (class in sage.combinat.diagram_algebras)": [[99, "sage.combinat.diagram_algebras.DiagramAlgebra.Element"]], "diagrambasis (class in sage.combinat.diagram_algebras)": [[99, "sage.combinat.diagram_algebras.DiagramBasis"]], "element (sage.combinat.diagram_algebras.abstractpartitiondiagrams attribute)": [[99, "sage.combinat.diagram_algebras.AbstractPartitionDiagrams.Element"]], "element (sage.combinat.diagram_algebras.brauerdiagrams attribute)": [[99, "sage.combinat.diagram_algebras.BrauerDiagrams.Element"]], "element (sage.combinat.diagram_algebras.idealdiagrams attribute)": [[99, "sage.combinat.diagram_algebras.IdealDiagrams.Element"]], "element (sage.combinat.diagram_algebras.partitiondiagrams attribute)": [[99, "sage.combinat.diagram_algebras.PartitionDiagrams.Element"]], "element (sage.combinat.diagram_algebras.planardiagrams attribute)": [[99, "sage.combinat.diagram_algebras.PlanarDiagrams.Element"]], "element (sage.combinat.diagram_algebras.temperleyliebdiagrams attribute)": [[99, "sage.combinat.diagram_algebras.TemperleyLiebDiagrams.Element"]], "idealdiagram (class in sage.combinat.diagram_algebras)": [[99, "sage.combinat.diagram_algebras.IdealDiagram"]], "idealdiagrams (class in sage.combinat.diagram_algebras)": [[99, "sage.combinat.diagram_algebras.IdealDiagrams"]], "l() (sage.combinat.diagram_algebras.partitionalgebra method)": [[99, "sage.combinat.diagram_algebras.PartitionAlgebra.L"]], "orbitbasis (class in sage.combinat.diagram_algebras)": [[99, "sage.combinat.diagram_algebras.OrbitBasis"]], "orbitbasis.element (class in sage.combinat.diagram_algebras)": [[99, "sage.combinat.diagram_algebras.OrbitBasis.Element"]], "partitionalgebra (class in sage.combinat.diagram_algebras)": [[99, "sage.combinat.diagram_algebras.PartitionAlgebra"]], "partitionalgebra.element (class in sage.combinat.diagram_algebras)": [[99, "sage.combinat.diagram_algebras.PartitionAlgebra.Element"]], "partitiondiagram (class in sage.combinat.diagram_algebras)": [[99, "sage.combinat.diagram_algebras.PartitionDiagram"]], "partitiondiagrams (class in sage.combinat.diagram_algebras)": [[99, "sage.combinat.diagram_algebras.PartitionDiagrams"]], "planaralgebra (class in sage.combinat.diagram_algebras)": [[99, "sage.combinat.diagram_algebras.PlanarAlgebra"]], "planardiagram (class in sage.combinat.diagram_algebras)": [[99, "sage.combinat.diagram_algebras.PlanarDiagram"]], "planardiagrams (class in sage.combinat.diagram_algebras)": [[99, "sage.combinat.diagram_algebras.PlanarDiagrams"]], "propagatingideal (class in sage.combinat.diagram_algebras)": [[99, "sage.combinat.diagram_algebras.PropagatingIdeal"]], "propagatingideal.element (class in sage.combinat.diagram_algebras)": [[99, "sage.combinat.diagram_algebras.PropagatingIdeal.Element"]], "subpartitionalgebra (class in sage.combinat.diagram_algebras)": [[99, "sage.combinat.diagram_algebras.SubPartitionAlgebra"]], "subpartitionalgebra.element (class in sage.combinat.diagram_algebras)": [[99, "sage.combinat.diagram_algebras.SubPartitionAlgebra.Element"]], "tl_diagram_ascii_art() (in module sage.combinat.diagram_algebras)": [[99, "sage.combinat.diagram_algebras.TL_diagram_ascii_art"]], "temperleyliebalgebra (class in sage.combinat.diagram_algebras)": [[99, "sage.combinat.diagram_algebras.TemperleyLiebAlgebra"]], "temperleyliebdiagram (class in sage.combinat.diagram_algebras)": [[99, "sage.combinat.diagram_algebras.TemperleyLiebDiagram"]], "temperleyliebdiagrams (class in sage.combinat.diagram_algebras)": [[99, "sage.combinat.diagram_algebras.TemperleyLiebDiagrams"]], "unitdiagrammixin (class in sage.combinat.diagram_algebras)": [[99, "sage.combinat.diagram_algebras.UnitDiagramMixin"]], "a() (sage.combinat.diagram_algebras.partitionalgebra method)": [[99, "sage.combinat.diagram_algebras.PartitionAlgebra.a"]], "ambient() (sage.combinat.diagram_algebras.subpartitionalgebra method)": [[99, "sage.combinat.diagram_algebras.SubPartitionAlgebra.ambient"]], "base_diagram() (sage.combinat.diagram_algebras.abstractpartitiondiagram method)": [[99, "sage.combinat.diagram_algebras.AbstractPartitionDiagram.base_diagram"]], "bijection_on_free_nodes() (sage.combinat.diagram_algebras.brauerdiagram method)": [[99, "sage.combinat.diagram_algebras.BrauerDiagram.bijection_on_free_nodes"]], "brauer_diagrams() (in module sage.combinat.diagram_algebras)": [[99, "sage.combinat.diagram_algebras.brauer_diagrams"]], "cardinality() (sage.combinat.diagram_algebras.brauerdiagrams method)": [[99, "sage.combinat.diagram_algebras.BrauerDiagrams.cardinality"]], "cardinality() (sage.combinat.diagram_algebras.partitiondiagrams method)": [[99, "sage.combinat.diagram_algebras.PartitionDiagrams.cardinality"]], "cardinality() (sage.combinat.diagram_algebras.planardiagrams method)": [[99, "sage.combinat.diagram_algebras.PlanarDiagrams.cardinality"]], "cardinality() (sage.combinat.diagram_algebras.temperleyliebdiagrams method)": [[99, "sage.combinat.diagram_algebras.TemperleyLiebDiagrams.cardinality"]], "check() (sage.combinat.diagram_algebras.abstractpartitiondiagram method)": [[99, "sage.combinat.diagram_algebras.AbstractPartitionDiagram.check"]], "check() (sage.combinat.diagram_algebras.brauerdiagram method)": [[99, "sage.combinat.diagram_algebras.BrauerDiagram.check"]], "check() (sage.combinat.diagram_algebras.idealdiagram method)": [[99, "sage.combinat.diagram_algebras.IdealDiagram.check"]], "check() (sage.combinat.diagram_algebras.planardiagram method)": [[99, "sage.combinat.diagram_algebras.PlanarDiagram.check"]], "check() (sage.combinat.diagram_algebras.temperleyliebdiagram method)": [[99, "sage.combinat.diagram_algebras.TemperleyLiebDiagram.check"]], "compose() (sage.combinat.diagram_algebras.abstractpartitiondiagram method)": [[99, "sage.combinat.diagram_algebras.AbstractPartitionDiagram.compose"]], "count_blocks_of_size() (sage.combinat.diagram_algebras.abstractpartitiondiagram method)": [[99, "sage.combinat.diagram_algebras.AbstractPartitionDiagram.count_blocks_of_size"]], "diagram() (sage.combinat.diagram_algebras.abstractpartitiondiagram method)": [[99, "sage.combinat.diagram_algebras.AbstractPartitionDiagram.diagram"]], "diagram() (sage.combinat.diagram_algebras.diagramalgebra.element method)": [[99, "sage.combinat.diagram_algebras.DiagramAlgebra.Element.diagram"]], "diagram_basis() (sage.combinat.diagram_algebras.orbitbasis method)": [[99, "sage.combinat.diagram_algebras.OrbitBasis.diagram_basis"]], "diagram_latex() (in module sage.combinat.diagram_algebras)": [[99, "sage.combinat.diagram_algebras.diagram_latex"]], "diagrams() (sage.combinat.diagram_algebras.diagramalgebra.element method)": [[99, "sage.combinat.diagram_algebras.DiagramAlgebra.Element.diagrams"]], "dual() (sage.combinat.diagram_algebras.abstractpartitiondiagram method)": [[99, "sage.combinat.diagram_algebras.AbstractPartitionDiagram.dual"]], "dual() (sage.combinat.diagram_algebras.partitionalgebra.element method)": [[99, "sage.combinat.diagram_algebras.PartitionAlgebra.Element.dual"]], "e() (sage.combinat.diagram_algebras.partitionalgebra method)": [[99, "sage.combinat.diagram_algebras.PartitionAlgebra.e"]], "from_involution_permutation_triple() (sage.combinat.diagram_algebras.brauerdiagrams method)": [[99, "sage.combinat.diagram_algebras.BrauerDiagrams.from_involution_permutation_triple"]], "generator_a() (sage.combinat.diagram_algebras.partitionalgebra method)": [[99, "sage.combinat.diagram_algebras.PartitionAlgebra.generator_a"]], "generator_e() (sage.combinat.diagram_algebras.partitionalgebra method)": [[99, "sage.combinat.diagram_algebras.PartitionAlgebra.generator_e"]], "generator_s() (sage.combinat.diagram_algebras.partitionalgebra method)": [[99, "sage.combinat.diagram_algebras.PartitionAlgebra.generator_s"]], "ideal_diagrams() (in module sage.combinat.diagram_algebras)": [[99, "sage.combinat.diagram_algebras.ideal_diagrams"]], "identity_set_partition() (in module sage.combinat.diagram_algebras)": [[99, "sage.combinat.diagram_algebras.identity_set_partition"]], "involution_permutation_triple() (sage.combinat.diagram_algebras.brauerdiagram method)": [[99, "sage.combinat.diagram_algebras.BrauerDiagram.involution_permutation_triple"]], "is_elementary_symmetric() (sage.combinat.diagram_algebras.brauerdiagram method)": [[99, "sage.combinat.diagram_algebras.BrauerDiagram.is_elementary_symmetric"]], "is_planar() (in module sage.combinat.diagram_algebras)": [[99, "sage.combinat.diagram_algebras.is_planar"]], "is_planar() (sage.combinat.diagram_algebras.abstractpartitiondiagram method)": [[99, "sage.combinat.diagram_algebras.AbstractPartitionDiagram.is_planar"]], "jucys_murphy() (sage.combinat.diagram_algebras.braueralgebra method)": [[99, "sage.combinat.diagram_algebras.BrauerAlgebra.jucys_murphy"]], "jucys_murphy_element() (sage.combinat.diagram_algebras.partitionalgebra method)": [[99, "sage.combinat.diagram_algebras.PartitionAlgebra.jucys_murphy_element"]], "lift() (sage.combinat.diagram_algebras.subpartitionalgebra method)": [[99, "sage.combinat.diagram_algebras.SubPartitionAlgebra.lift"]], "one() (sage.combinat.diagram_algebras.orbitbasis method)": [[99, "sage.combinat.diagram_algebras.OrbitBasis.one"]], "one_basis() (sage.combinat.diagram_algebras.unitdiagrammixin method)": [[99, "sage.combinat.diagram_algebras.UnitDiagramMixin.one_basis"]], "options (sage.combinat.diagram_algebras.braueralgebra attribute)": [[99, "sage.combinat.diagram_algebras.BrauerAlgebra.options"]], "options (sage.combinat.diagram_algebras.brauerdiagram attribute)": [[99, "sage.combinat.diagram_algebras.BrauerDiagram.options"]], "options (sage.combinat.diagram_algebras.brauerdiagrams attribute)": [[99, "sage.combinat.diagram_algebras.BrauerDiagrams.options"]], "orbit_basis() (sage.combinat.diagram_algebras.partitionalgebra method)": [[99, "sage.combinat.diagram_algebras.PartitionAlgebra.orbit_basis"]], "order() (sage.combinat.diagram_algebras.abstractpartitiondiagram method)": [[99, "sage.combinat.diagram_algebras.AbstractPartitionDiagram.order"]], "order() (sage.combinat.diagram_algebras.diagramalgebra method)": [[99, "sage.combinat.diagram_algebras.DiagramAlgebra.order"]], "pair_to_graph() (in module sage.combinat.diagram_algebras)": [[99, "sage.combinat.diagram_algebras.pair_to_graph"]], "partition_diagrams() (in module sage.combinat.diagram_algebras)": [[99, "sage.combinat.diagram_algebras.partition_diagrams"]], "perm() (sage.combinat.diagram_algebras.brauerdiagram method)": [[99, "sage.combinat.diagram_algebras.BrauerDiagram.perm"]], "planar_diagrams() (in module sage.combinat.diagram_algebras)": [[99, "sage.combinat.diagram_algebras.planar_diagrams"]], "planar_partitions_rec() (in module sage.combinat.diagram_algebras)": [[99, "sage.combinat.diagram_algebras.planar_partitions_rec"]], "product_on_basis() (sage.combinat.diagram_algebras.diagrambasis method)": [[99, "sage.combinat.diagram_algebras.DiagramBasis.product_on_basis"]], "product_on_basis() (sage.combinat.diagram_algebras.orbitbasis method)": [[99, "sage.combinat.diagram_algebras.OrbitBasis.product_on_basis"]], "propagating_number() (in module sage.combinat.diagram_algebras)": [[99, "sage.combinat.diagram_algebras.propagating_number"]], "propagating_number() (sage.combinat.diagram_algebras.abstractpartitiondiagram method)": [[99, "sage.combinat.diagram_algebras.AbstractPartitionDiagram.propagating_number"]], "retract() (sage.combinat.diagram_algebras.subpartitionalgebra method)": [[99, "sage.combinat.diagram_algebras.SubPartitionAlgebra.retract"]], "s() (sage.combinat.diagram_algebras.partitionalgebra method)": [[99, "sage.combinat.diagram_algebras.PartitionAlgebra.s"]], "sage.combinat.diagram_algebras": [[99, "module-sage.combinat.diagram_algebras"]], "set_partition() (sage.combinat.diagram_algebras.abstractpartitiondiagram method)": [[99, "sage.combinat.diagram_algebras.AbstractPartitionDiagram.set_partition"]], "set_partitions() (sage.combinat.diagram_algebras.diagramalgebra method)": [[99, "sage.combinat.diagram_algebras.DiagramAlgebra.set_partitions"]], "sigma() (sage.combinat.diagram_algebras.partitionalgebra method)": [[99, "sage.combinat.diagram_algebras.PartitionAlgebra.sigma"]], "symmetric_diagrams() (sage.combinat.diagram_algebras.brauerdiagrams method)": [[99, "sage.combinat.diagram_algebras.BrauerDiagrams.symmetric_diagrams"]], "temperley_lieb_diagrams() (in module sage.combinat.diagram_algebras)": [[99, "sage.combinat.diagram_algebras.temperley_lieb_diagrams"]], "to_brauer_partition() (in module sage.combinat.diagram_algebras)": [[99, "sage.combinat.diagram_algebras.to_Brauer_partition"]], "to_diagram_basis() (sage.combinat.diagram_algebras.orbitbasis.element method)": [[99, "sage.combinat.diagram_algebras.OrbitBasis.Element.to_diagram_basis"]], "to_graph() (in module sage.combinat.diagram_algebras)": [[99, "sage.combinat.diagram_algebras.to_graph"]], "to_orbit_basis() (sage.combinat.diagram_algebras.partitionalgebra.element method)": [[99, "sage.combinat.diagram_algebras.PartitionAlgebra.Element.to_orbit_basis"]], "to_orbit_basis() (sage.combinat.diagram_algebras.subpartitionalgebra.element method)": [[99, "sage.combinat.diagram_algebras.SubPartitionAlgebra.Element.to_orbit_basis"]], "to_set_partition() (in module sage.combinat.diagram_algebras)": [[99, "sage.combinat.diagram_algebras.to_set_partition"]], "allexactcovers() (in module sage.combinat.dlx)": [[100, "sage.combinat.dlx.AllExactCovers"]], "dlxmatrix (class in sage.combinat.dlx)": [[100, "sage.combinat.dlx.DLXMatrix"]], "oneexactcover() (in module sage.combinat.dlx)": [[100, "sage.combinat.dlx.OneExactCover"]], "next() (sage.combinat.dlx.dlxmatrix method)": [[100, "sage.combinat.dlx.DLXMatrix.next"]], "sage.combinat.dlx": [[100, "module-sage.combinat.dlx"]], "completedyckwords (class in sage.combinat.dyck_word)": [[101, "sage.combinat.dyck_word.CompleteDyckWords"]], "completedyckwords_all (class in sage.combinat.dyck_word)": [[101, "sage.combinat.dyck_word.CompleteDyckWords_all"]], "completedyckwords_all.height_poset (class in sage.combinat.dyck_word)": [[101, "sage.combinat.dyck_word.CompleteDyckWords_all.height_poset"]], "completedyckwords_size (class in sage.combinat.dyck_word)": [[101, "sage.combinat.dyck_word.CompleteDyckWords_size"]], "dyckword (class in sage.combinat.dyck_word)": [[101, "sage.combinat.dyck_word.DyckWord"]], "dyckwordbacktracker (class in sage.combinat.dyck_word)": [[101, "sage.combinat.dyck_word.DyckWordBacktracker"]], "dyckword_complete (class in sage.combinat.dyck_word)": [[101, "sage.combinat.dyck_word.DyckWord_complete"]], "dyckwords (class in sage.combinat.dyck_word)": [[101, "sage.combinat.dyck_word.DyckWords"]], "dyckwords_all (class in sage.combinat.dyck_word)": [[101, "sage.combinat.dyck_word.DyckWords_all"]], "dyckwords_size (class in sage.combinat.dyck_word)": [[101, "sage.combinat.dyck_word.DyckWords_size"]], "element (sage.combinat.dyck_word.completedyckwords attribute)": [[101, "sage.combinat.dyck_word.CompleteDyckWords.Element"]], "element (sage.combinat.dyck_word.dyckwords attribute)": [[101, "sage.combinat.dyck_word.DyckWords.Element"]], "area() (sage.combinat.dyck_word.dyckword_complete method)": [[101, "sage.combinat.dyck_word.DyckWord_complete.area"]], "area_dinv_to_bounce_area_map() (sage.combinat.dyck_word.dyckword_complete method)": [[101, "sage.combinat.dyck_word.DyckWord_complete.area_dinv_to_bounce_area_map"]], "ascent_prime_decomposition() (sage.combinat.dyck_word.dyckword method)": [[101, "sage.combinat.dyck_word.DyckWord.ascent_prime_decomposition"]], "associated_parenthesis() (sage.combinat.dyck_word.dyckword method)": [[101, "sage.combinat.dyck_word.DyckWord.associated_parenthesis"]], "bounce() (sage.combinat.dyck_word.dyckword_complete method)": [[101, "sage.combinat.dyck_word.DyckWord_complete.bounce"]], "bounce_area_to_area_dinv_map() (sage.combinat.dyck_word.dyckword_complete method)": [[101, "sage.combinat.dyck_word.DyckWord_complete.bounce_area_to_area_dinv_map"]], "bounce_path() (sage.combinat.dyck_word.dyckword_complete method)": [[101, "sage.combinat.dyck_word.DyckWord_complete.bounce_path"]], "cardinality() (sage.combinat.dyck_word.completedyckwords_size method)": [[101, "sage.combinat.dyck_word.CompleteDyckWords_size.cardinality"]], "cardinality() (sage.combinat.dyck_word.dyckwords_size method)": [[101, "sage.combinat.dyck_word.DyckWords_size.cardinality"]], "catalan_factorization() (sage.combinat.dyck_word.dyckword method)": [[101, "sage.combinat.dyck_word.DyckWord.catalan_factorization"]], "characteristic_symmetric_function() (sage.combinat.dyck_word.dyckword_complete method)": [[101, "sage.combinat.dyck_word.DyckWord_complete.characteristic_symmetric_function"]], "decomposition_reverse() (sage.combinat.dyck_word.dyckword_complete method)": [[101, "sage.combinat.dyck_word.DyckWord_complete.decomposition_reverse"]], "dinv() (sage.combinat.dyck_word.dyckword_complete method)": [[101, "sage.combinat.dyck_word.DyckWord_complete.dinv"]], "first_return_decomposition() (sage.combinat.dyck_word.dyckword_complete method)": [[101, "sage.combinat.dyck_word.DyckWord_complete.first_return_decomposition"]], "from_catalan_code() (sage.combinat.dyck_word.completedyckwords method)": [[101, "sage.combinat.dyck_word.CompleteDyckWords.from_Catalan_code"]], "from_area_sequence() (sage.combinat.dyck_word.completedyckwords method)": [[101, "sage.combinat.dyck_word.CompleteDyckWords.from_area_sequence"]], "from_heights() (sage.combinat.dyck_word.dyckwords method)": [[101, "sage.combinat.dyck_word.DyckWords.from_heights"]], "from_non_decreasing_parking_function() (sage.combinat.dyck_word.completedyckwords method)": [[101, "sage.combinat.dyck_word.CompleteDyckWords.from_non_decreasing_parking_function"]], "from_noncrossing_partition() (sage.combinat.dyck_word.completedyckwords method)": [[101, "sage.combinat.dyck_word.CompleteDyckWords.from_noncrossing_partition"]], "height() (sage.combinat.dyck_word.dyckword method)": [[101, "sage.combinat.dyck_word.DyckWord.height"]], "heights() (sage.combinat.dyck_word.dyckword method)": [[101, "sage.combinat.dyck_word.DyckWord.heights"]], "is_a() (in module sage.combinat.dyck_word)": [[101, "sage.combinat.dyck_word.is_a"]], "is_area_sequence() (in module sage.combinat.dyck_word)": [[101, "sage.combinat.dyck_word.is_area_sequence"]], "is_complete() (sage.combinat.dyck_word.dyckword method)": [[101, "sage.combinat.dyck_word.DyckWord.is_complete"]], "latex_options() (sage.combinat.dyck_word.dyckword method)": [[101, "sage.combinat.dyck_word.DyckWord.latex_options"]], "le() (sage.combinat.dyck_word.completedyckwords_all.height_poset method)": [[101, "sage.combinat.dyck_word.CompleteDyckWords_all.height_poset.le"]], "length() (sage.combinat.dyck_word.dyckword method)": [[101, "sage.combinat.dyck_word.DyckWord.length"]], "list_parking_functions() (sage.combinat.dyck_word.dyckword_complete method)": [[101, "sage.combinat.dyck_word.DyckWord_complete.list_parking_functions"]], "major_index() (sage.combinat.dyck_word.dyckword_complete method)": [[101, "sage.combinat.dyck_word.DyckWord_complete.major_index"]], "min_from_heights() (sage.combinat.dyck_word.dyckwords method)": [[101, "sage.combinat.dyck_word.DyckWords.min_from_heights"]], "number_of_close_symbols() (sage.combinat.dyck_word.dyckword method)": [[101, "sage.combinat.dyck_word.DyckWord.number_of_close_symbols"]], "number_of_double_rises() (sage.combinat.dyck_word.dyckword method)": [[101, "sage.combinat.dyck_word.DyckWord.number_of_double_rises"]], "number_of_initial_rises() (sage.combinat.dyck_word.dyckword method)": [[101, "sage.combinat.dyck_word.DyckWord.number_of_initial_rises"]], "number_of_open_symbols() (sage.combinat.dyck_word.dyckword method)": [[101, "sage.combinat.dyck_word.DyckWord.number_of_open_symbols"]], "number_of_parking_functions() (sage.combinat.dyck_word.dyckword_complete method)": [[101, "sage.combinat.dyck_word.DyckWord_complete.number_of_parking_functions"]], "number_of_peaks() (sage.combinat.dyck_word.dyckword method)": [[101, "sage.combinat.dyck_word.DyckWord.number_of_peaks"]], "number_of_touch_points() (sage.combinat.dyck_word.dyckword method)": [[101, "sage.combinat.dyck_word.DyckWord.number_of_touch_points"]], "number_of_tunnels() (sage.combinat.dyck_word.dyckword_complete method)": [[101, "sage.combinat.dyck_word.DyckWord_complete.number_of_tunnels"]], "number_of_valleys() (sage.combinat.dyck_word.dyckword method)": [[101, "sage.combinat.dyck_word.DyckWord.number_of_valleys"]], "options (sage.combinat.dyck_word.dyckwords attribute)": [[101, "sage.combinat.dyck_word.DyckWords.options"]], "parking_functions() (sage.combinat.dyck_word.dyckword_complete method)": [[101, "sage.combinat.dyck_word.DyckWord_complete.parking_functions"]], "peaks() (sage.combinat.dyck_word.dyckword method)": [[101, "sage.combinat.dyck_word.DyckWord.peaks"]], "pealing() (in module sage.combinat.dyck_word)": [[101, "sage.combinat.dyck_word.pealing"]], "plot() (sage.combinat.dyck_word.dyckword method)": [[101, "sage.combinat.dyck_word.DyckWord.plot"]], "position_of_first_return() (sage.combinat.dyck_word.dyckword method)": [[101, "sage.combinat.dyck_word.DyckWord.position_of_first_return"]], "positions_of_double_rises() (sage.combinat.dyck_word.dyckword method)": [[101, "sage.combinat.dyck_word.DyckWord.positions_of_double_rises"]], "pp() (sage.combinat.dyck_word.dyckword method)": [[101, "sage.combinat.dyck_word.DyckWord.pp"]], "pretty_print() (sage.combinat.dyck_word.dyckword method)": [[101, "sage.combinat.dyck_word.DyckWord.pretty_print"]], "pyramid_weight() (sage.combinat.dyck_word.dyckword_complete method)": [[101, "sage.combinat.dyck_word.DyckWord_complete.pyramid_weight"]], "random_element() (sage.combinat.dyck_word.completedyckwords_size method)": [[101, "sage.combinat.dyck_word.CompleteDyckWords_size.random_element"]], "reading_permutation() (sage.combinat.dyck_word.dyckword_complete method)": [[101, "sage.combinat.dyck_word.DyckWord_complete.reading_permutation"]], "replace_parens() (in module sage.combinat.dyck_word)": [[101, "sage.combinat.dyck_word.replace_parens"]], "replace_symbols() (in module sage.combinat.dyck_word)": [[101, "sage.combinat.dyck_word.replace_symbols"]], "returns_to_zero() (sage.combinat.dyck_word.dyckword method)": [[101, "sage.combinat.dyck_word.DyckWord.returns_to_zero"]], "reverse() (sage.combinat.dyck_word.dyckword_complete method)": [[101, "sage.combinat.dyck_word.DyckWord_complete.reverse"]], "rise_composition() (sage.combinat.dyck_word.dyckword method)": [[101, "sage.combinat.dyck_word.DyckWord.rise_composition"]], "sage.combinat.dyck_word": [[101, "module-sage.combinat.dyck_word"]], "semilength() (sage.combinat.dyck_word.dyckword_complete method)": [[101, "sage.combinat.dyck_word.DyckWord_complete.semilength"]], "set_latex_options() (sage.combinat.dyck_word.dyckword method)": [[101, "sage.combinat.dyck_word.DyckWord.set_latex_options"]], "tamari_interval() (sage.combinat.dyck_word.dyckword method)": [[101, "sage.combinat.dyck_word.DyckWord.tamari_interval"]], "to_132_avoiding_permutation() (sage.combinat.dyck_word.dyckword_complete method)": [[101, "sage.combinat.dyck_word.DyckWord_complete.to_132_avoiding_permutation"]], "to_312_avoiding_permutation() (sage.combinat.dyck_word.dyckword_complete method)": [[101, "sage.combinat.dyck_word.DyckWord_complete.to_312_avoiding_permutation"]], "to_321_avoiding_permutation() (sage.combinat.dyck_word.dyckword_complete method)": [[101, "sage.combinat.dyck_word.DyckWord_complete.to_321_avoiding_permutation"]], "to_catalan_code() (sage.combinat.dyck_word.dyckword_complete method)": [[101, "sage.combinat.dyck_word.DyckWord_complete.to_Catalan_code"]], "to_alternating_sign_matrix() (sage.combinat.dyck_word.dyckword_complete method)": [[101, "sage.combinat.dyck_word.DyckWord_complete.to_alternating_sign_matrix"]], "to_area_sequence() (sage.combinat.dyck_word.dyckword method)": [[101, "sage.combinat.dyck_word.DyckWord.to_area_sequence"]], "to_binary_tree() (sage.combinat.dyck_word.dyckword method)": [[101, "sage.combinat.dyck_word.DyckWord.to_binary_tree"]], "to_binary_tree_tamari() (sage.combinat.dyck_word.dyckword method)": [[101, "sage.combinat.dyck_word.DyckWord.to_binary_tree_tamari"]], "to_non_decreasing_parking_function() (sage.combinat.dyck_word.dyckword_complete method)": [[101, "sage.combinat.dyck_word.DyckWord_complete.to_non_decreasing_parking_function"]], "to_noncrossing_partition() (sage.combinat.dyck_word.dyckword_complete method)": [[101, "sage.combinat.dyck_word.DyckWord_complete.to_noncrossing_partition"]], "to_noncrossing_permutation() (sage.combinat.dyck_word.dyckword_complete method)": [[101, "sage.combinat.dyck_word.DyckWord_complete.to_noncrossing_permutation"]], "to_ordered_tree() (sage.combinat.dyck_word.dyckword_complete method)": [[101, "sage.combinat.dyck_word.DyckWord_complete.to_ordered_tree"]], "to_pair_of_standard_tableaux() (sage.combinat.dyck_word.dyckword_complete method)": [[101, "sage.combinat.dyck_word.DyckWord_complete.to_pair_of_standard_tableaux"]], "to_partition() (sage.combinat.dyck_word.dyckword_complete method)": [[101, "sage.combinat.dyck_word.DyckWord_complete.to_partition"]], "to_path_string() (sage.combinat.dyck_word.dyckword method)": [[101, "sage.combinat.dyck_word.DyckWord.to_path_string"]], "to_permutation() (sage.combinat.dyck_word.dyckword_complete method)": [[101, "sage.combinat.dyck_word.DyckWord_complete.to_permutation"]], "to_standard_tableau() (sage.combinat.dyck_word.dyckword method)": [[101, "sage.combinat.dyck_word.DyckWord.to_standard_tableau"]], "to_tamari_sorting_tuple() (sage.combinat.dyck_word.dyckword method)": [[101, "sage.combinat.dyck_word.DyckWord.to_tamari_sorting_tuple"]], "to_triangulation() (sage.combinat.dyck_word.dyckword_complete method)": [[101, "sage.combinat.dyck_word.DyckWord_complete.to_triangulation"]], "to_triangulation_as_graph() (sage.combinat.dyck_word.dyckword_complete method)": [[101, "sage.combinat.dyck_word.DyckWord_complete.to_triangulation_as_graph"]], "touch_composition() (sage.combinat.dyck_word.dyckword method)": [[101, "sage.combinat.dyck_word.DyckWord.touch_composition"]], "touch_points() (sage.combinat.dyck_word.dyckword method)": [[101, "sage.combinat.dyck_word.DyckWord.touch_points"]], "tunnels() (sage.combinat.dyck_word.dyckword_complete method)": [[101, "sage.combinat.dyck_word.DyckWord_complete.tunnels"]], "valleys() (sage.combinat.dyck_word.dyckword method)": [[101, "sage.combinat.dyck_word.DyckWord.valleys"]], "e1star (class in sage.combinat.e_one_star)": [[102, "sage.combinat.e_one_star.E1Star"]], "face (class in sage.combinat.e_one_star)": [[102, "sage.combinat.e_one_star.Face"]], "patch (class in sage.combinat.e_one_star)": [[102, "sage.combinat.e_one_star.Patch"]], "color() (sage.combinat.e_one_star.face method)": [[102, "sage.combinat.e_one_star.Face.color"]], "difference() (sage.combinat.e_one_star.patch method)": [[102, "sage.combinat.e_one_star.Patch.difference"]], "dimension() (sage.combinat.e_one_star.patch method)": [[102, "sage.combinat.e_one_star.Patch.dimension"]], "faces_of_color() (sage.combinat.e_one_star.patch method)": [[102, "sage.combinat.e_one_star.Patch.faces_of_color"]], "faces_of_type() (sage.combinat.e_one_star.patch method)": [[102, "sage.combinat.e_one_star.Patch.faces_of_type"]], "faces_of_vector() (sage.combinat.e_one_star.patch method)": [[102, "sage.combinat.e_one_star.Patch.faces_of_vector"]], "inverse_matrix() (sage.combinat.e_one_star.e1star method)": [[102, "sage.combinat.e_one_star.E1Star.inverse_matrix"]], "matrix() (sage.combinat.e_one_star.e1star method)": [[102, "sage.combinat.e_one_star.E1Star.matrix"]], "occurrences_of() (sage.combinat.e_one_star.patch method)": [[102, "sage.combinat.e_one_star.Patch.occurrences_of"]], "plot() (sage.combinat.e_one_star.patch method)": [[102, "sage.combinat.e_one_star.Patch.plot"]], "plot3d() (sage.combinat.e_one_star.patch method)": [[102, "sage.combinat.e_one_star.Patch.plot3d"]], "plot_tikz() (sage.combinat.e_one_star.patch method)": [[102, "sage.combinat.e_one_star.Patch.plot_tikz"]], "repaint() (sage.combinat.e_one_star.patch method)": [[102, "sage.combinat.e_one_star.Patch.repaint"]], "sage.combinat.e_one_star": [[102, "module-sage.combinat.e_one_star"]], "sigma() (sage.combinat.e_one_star.e1star method)": [[102, "sage.combinat.e_one_star.E1Star.sigma"]], "translate() (sage.combinat.e_one_star.patch method)": [[102, "sage.combinat.e_one_star.Patch.translate"]], "type() (sage.combinat.e_one_star.face method)": [[102, "sage.combinat.e_one_star.Face.type"]], "union() (sage.combinat.e_one_star.patch method)": [[102, "sage.combinat.e_one_star.Patch.union"]], "vector() (sage.combinat.e_one_star.face method)": [[102, "sage.combinat.e_one_star.Face.vector"]], "sage.combinat.enumerated_sets": [[103, "module-sage.combinat.enumerated_sets"]], "all_children() (in module sage.combinat.enumeration_mod_permgroup)": [[104, "sage.combinat.enumeration_mod_permgroup.all_children"]], "canonical_children() (in module sage.combinat.enumeration_mod_permgroup)": [[104, "sage.combinat.enumeration_mod_permgroup.canonical_children"]], "canonical_representative_of_orbit_of() (in module sage.combinat.enumeration_mod_permgroup)": [[104, "sage.combinat.enumeration_mod_permgroup.canonical_representative_of_orbit_of"]], "is_canonical() (in module sage.combinat.enumeration_mod_permgroup)": [[104, "sage.combinat.enumeration_mod_permgroup.is_canonical"]], "lex_cmp() (in module sage.combinat.enumeration_mod_permgroup)": [[104, "sage.combinat.enumeration_mod_permgroup.lex_cmp"]], "lex_cmp_partial() (in module sage.combinat.enumeration_mod_permgroup)": [[104, "sage.combinat.enumeration_mod_permgroup.lex_cmp_partial"]], "orbit() (in module sage.combinat.enumeration_mod_permgroup)": [[104, "sage.combinat.enumeration_mod_permgroup.orbit"]], "sage.combinat.enumeration_mod_permgroup": [[104, "module-sage.combinat.enumeration_mod_permgroup"]], "expnums() (in module sage.combinat.expnums)": [[105, "sage.combinat.expnums.expnums"]], "expnums2() (in module sage.combinat.expnums)": [[105, "sage.combinat.expnums.expnums2"]], "sage.combinat.expnums": [[105, "module-sage.combinat.expnums"]], "sage.combinat.family": [[106, "module-sage.combinat.family"]], "fast_vector_partitions() (in module sage.combinat.fast_vector_partitions)": [[107, "sage.combinat.fast_vector_partitions.fast_vector_partitions"]], "recursive_vector_partitions() (in module sage.combinat.fast_vector_partitions)": [[107, "sage.combinat.fast_vector_partitions.recursive_vector_partitions"]], "recursive_within_from_to() (in module sage.combinat.fast_vector_partitions)": [[107, "sage.combinat.fast_vector_partitions.recursive_within_from_to"]], "sage.combinat.fast_vector_partitions": [[107, "module-sage.combinat.fast_vector_partitions"]], "within_from_to() (in module sage.combinat.fast_vector_partitions)": [[107, "sage.combinat.fast_vector_partitions.within_from_to"]], "automaton (class in sage.combinat.finite_state_machine)": [[108, "sage.combinat.finite_state_machine.Automaton"]], "fsmlettersymbol() (in module sage.combinat.finite_state_machine)": [[108, "sage.combinat.finite_state_machine.FSMLetterSymbol"]], "fsmprocessiterator (class in sage.combinat.finite_state_machine)": [[108, "sage.combinat.finite_state_machine.FSMProcessIterator"]], "fsmprocessiterator.current (class in sage.combinat.finite_state_machine)": [[108, "sage.combinat.finite_state_machine.FSMProcessIterator.Current"]], "fsmprocessiterator.finishedbranch (class in sage.combinat.finite_state_machine)": [[108, "sage.combinat.finite_state_machine.FSMProcessIterator.FinishedBranch"]], "fsmstate (class in sage.combinat.finite_state_machine)": [[108, "sage.combinat.finite_state_machine.FSMState"]], "fsmtransition (class in sage.combinat.finite_state_machine)": [[108, "sage.combinat.finite_state_machine.FSMTransition"]], "fsmwordsymbol() (in module sage.combinat.finite_state_machine)": [[108, "sage.combinat.finite_state_machine.FSMWordSymbol"]], "finitestatemachine (class in sage.combinat.finite_state_machine)": [[108, "sage.combinat.finite_state_machine.FiniteStateMachine"]], "transducer (class in sage.combinat.finite_state_machine)": [[108, "sage.combinat.finite_state_machine.Transducer"]], "__call__() (sage.combinat.finite_state_machine.finitestatemachine method)": [[108, "sage.combinat.finite_state_machine.FiniteStateMachine.__call__"]], "accept (sage.combinat.finite_state_machine.fsmprocessiterator.finishedbranch attribute)": [[108, "sage.combinat.finite_state_machine.FSMProcessIterator.FinishedBranch.accept"]], "accessible_components() (sage.combinat.finite_state_machine.finitestatemachine method)": [[108, "sage.combinat.finite_state_machine.FiniteStateMachine.accessible_components"]], "add_from_transition_function() (sage.combinat.finite_state_machine.finitestatemachine method)": [[108, "sage.combinat.finite_state_machine.FiniteStateMachine.add_from_transition_function"]], "add_state() (sage.combinat.finite_state_machine.finitestatemachine method)": [[108, "sage.combinat.finite_state_machine.FiniteStateMachine.add_state"]], "add_states() (sage.combinat.finite_state_machine.finitestatemachine method)": [[108, "sage.combinat.finite_state_machine.FiniteStateMachine.add_states"]], "add_transition() (sage.combinat.finite_state_machine.finitestatemachine method)": [[108, "sage.combinat.finite_state_machine.FiniteStateMachine.add_transition"]], "add_transitions_from_function() (sage.combinat.finite_state_machine.finitestatemachine method)": [[108, "sage.combinat.finite_state_machine.FiniteStateMachine.add_transitions_from_function"]], "adjacency_matrix() (sage.combinat.finite_state_machine.finitestatemachine method)": [[108, "sage.combinat.finite_state_machine.FiniteStateMachine.adjacency_matrix"]], "asymptotic_moments() (sage.combinat.finite_state_machine.finitestatemachine method)": [[108, "sage.combinat.finite_state_machine.FiniteStateMachine.asymptotic_moments"]], "cartesian_product() (sage.combinat.finite_state_machine.automaton method)": [[108, "sage.combinat.finite_state_machine.Automaton.cartesian_product"]], "cartesian_product() (sage.combinat.finite_state_machine.transducer method)": [[108, "sage.combinat.finite_state_machine.Transducer.cartesian_product"]], "coaccessible_components() (sage.combinat.finite_state_machine.finitestatemachine method)": [[108, "sage.combinat.finite_state_machine.FiniteStateMachine.coaccessible_components"]], "complement() (sage.combinat.finite_state_machine.automaton method)": [[108, "sage.combinat.finite_state_machine.Automaton.complement"]], "completion() (sage.combinat.finite_state_machine.finitestatemachine method)": [[108, "sage.combinat.finite_state_machine.FiniteStateMachine.completion"]], "composition() (sage.combinat.finite_state_machine.finitestatemachine method)": [[108, "sage.combinat.finite_state_machine.FiniteStateMachine.composition"]], "concatenation() (sage.combinat.finite_state_machine.finitestatemachine method)": [[108, "sage.combinat.finite_state_machine.FiniteStateMachine.concatenation"]], "construct_final_word_out() (sage.combinat.finite_state_machine.finitestatemachine method)": [[108, "sage.combinat.finite_state_machine.FiniteStateMachine.construct_final_word_out"]], "copy() (sage.combinat.finite_state_machine.fsmstate method)": [[108, "sage.combinat.finite_state_machine.FSMState.copy"]], "copy() (sage.combinat.finite_state_machine.fsmtransition method)": [[108, "sage.combinat.finite_state_machine.FSMTransition.copy"]], "copy() (sage.combinat.finite_state_machine.finitestatemachine method)": [[108, "sage.combinat.finite_state_machine.FiniteStateMachine.copy"]], "deepcopy() (sage.combinat.finite_state_machine.fsmstate method)": [[108, "sage.combinat.finite_state_machine.FSMState.deepcopy"]], "deepcopy() (sage.combinat.finite_state_machine.fsmtransition method)": [[108, "sage.combinat.finite_state_machine.FSMTransition.deepcopy"]], "deepcopy() (sage.combinat.finite_state_machine.finitestatemachine method)": [[108, "sage.combinat.finite_state_machine.FiniteStateMachine.deepcopy"]], "default_format_letter (sage.combinat.finite_state_machine.finitestatemachine attribute)": [[108, "sage.combinat.finite_state_machine.FiniteStateMachine.default_format_letter"]], "default_format_transition_label() (sage.combinat.finite_state_machine.finitestatemachine method)": [[108, "sage.combinat.finite_state_machine.FiniteStateMachine.default_format_transition_label"]], "delete_state() (sage.combinat.finite_state_machine.finitestatemachine method)": [[108, "sage.combinat.finite_state_machine.FiniteStateMachine.delete_state"]], "delete_transition() (sage.combinat.finite_state_machine.finitestatemachine method)": [[108, "sage.combinat.finite_state_machine.FiniteStateMachine.delete_transition"]], "determine_alphabets() (sage.combinat.finite_state_machine.finitestatemachine method)": [[108, "sage.combinat.finite_state_machine.FiniteStateMachine.determine_alphabets"]], "determine_input_alphabet() (sage.combinat.finite_state_machine.finitestatemachine method)": [[108, "sage.combinat.finite_state_machine.FiniteStateMachine.determine_input_alphabet"]], "determine_output_alphabet() (sage.combinat.finite_state_machine.finitestatemachine method)": [[108, "sage.combinat.finite_state_machine.FiniteStateMachine.determine_output_alphabet"]], "determinisation() (sage.combinat.finite_state_machine.automaton method)": [[108, "sage.combinat.finite_state_machine.Automaton.determinisation"]], "digraph() (sage.combinat.finite_state_machine.finitestatemachine method)": [[108, "sage.combinat.finite_state_machine.FiniteStateMachine.digraph"]], "disjoint_union() (sage.combinat.finite_state_machine.finitestatemachine method)": [[108, "sage.combinat.finite_state_machine.FiniteStateMachine.disjoint_union"]], "duplicate_transition_add_input() (in module sage.combinat.finite_state_machine)": [[108, "sage.combinat.finite_state_machine.duplicate_transition_add_input"]], "duplicate_transition_ignore() (in module sage.combinat.finite_state_machine)": [[108, "sage.combinat.finite_state_machine.duplicate_transition_ignore"]], "duplicate_transition_raise_error() (in module sage.combinat.finite_state_machine)": [[108, "sage.combinat.finite_state_machine.duplicate_transition_raise_error"]], "empty_copy() (sage.combinat.finite_state_machine.finitestatemachine method)": [[108, "sage.combinat.finite_state_machine.FiniteStateMachine.empty_copy"]], "epsilon_successors() (sage.combinat.finite_state_machine.finitestatemachine method)": [[108, "sage.combinat.finite_state_machine.FiniteStateMachine.epsilon_successors"]], "equal() (in module sage.combinat.finite_state_machine)": [[108, "sage.combinat.finite_state_machine.equal"]], "equivalence_classes() (sage.combinat.finite_state_machine.finitestatemachine method)": [[108, "sage.combinat.finite_state_machine.FiniteStateMachine.equivalence_classes"]], "final_components() (sage.combinat.finite_state_machine.finitestatemachine method)": [[108, "sage.combinat.finite_state_machine.FiniteStateMachine.final_components"]], "final_states() (sage.combinat.finite_state_machine.finitestatemachine method)": [[108, "sage.combinat.finite_state_machine.FiniteStateMachine.final_states"]], "final_word_out (sage.combinat.finite_state_machine.fsmstate property)": [[108, "sage.combinat.finite_state_machine.FSMState.final_word_out"]], "format_letter (sage.combinat.finite_state_machine.finitestatemachine attribute)": [[108, "sage.combinat.finite_state_machine.FiniteStateMachine.format_letter"]], "format_letter_negative() (sage.combinat.finite_state_machine.finitestatemachine method)": [[108, "sage.combinat.finite_state_machine.FiniteStateMachine.format_letter_negative"]], "format_transition_label() (sage.combinat.finite_state_machine.finitestatemachine method)": [[108, "sage.combinat.finite_state_machine.FiniteStateMachine.format_transition_label"]], "format_transition_label_reversed() (sage.combinat.finite_state_machine.finitestatemachine method)": [[108, "sage.combinat.finite_state_machine.FiniteStateMachine.format_transition_label_reversed"]], "from_state (sage.combinat.finite_state_machine.fsmtransition attribute)": [[108, "sage.combinat.finite_state_machine.FSMTransition.from_state"]], "full_group_by() (in module sage.combinat.finite_state_machine)": [[108, "sage.combinat.finite_state_machine.full_group_by"]], "fully_equal() (sage.combinat.finite_state_machine.fsmstate method)": [[108, "sage.combinat.finite_state_machine.FSMState.fully_equal"]], "graph() (sage.combinat.finite_state_machine.finitestatemachine method)": [[108, "sage.combinat.finite_state_machine.FiniteStateMachine.graph"]], "has_final_state() (sage.combinat.finite_state_machine.finitestatemachine method)": [[108, "sage.combinat.finite_state_machine.FiniteStateMachine.has_final_state"]], "has_final_states() (sage.combinat.finite_state_machine.finitestatemachine method)": [[108, "sage.combinat.finite_state_machine.FiniteStateMachine.has_final_states"]], "has_initial_state() (sage.combinat.finite_state_machine.finitestatemachine method)": [[108, "sage.combinat.finite_state_machine.FiniteStateMachine.has_initial_state"]], "has_initial_states() (sage.combinat.finite_state_machine.finitestatemachine method)": [[108, "sage.combinat.finite_state_machine.FiniteStateMachine.has_initial_states"]], "has_state() (sage.combinat.finite_state_machine.finitestatemachine method)": [[108, "sage.combinat.finite_state_machine.FiniteStateMachine.has_state"]], "has_transition() (sage.combinat.finite_state_machine.finitestatemachine method)": [[108, "sage.combinat.finite_state_machine.FiniteStateMachine.has_transition"]], "induced_sub_finite_state_machine() (sage.combinat.finite_state_machine.finitestatemachine method)": [[108, "sage.combinat.finite_state_machine.FiniteStateMachine.induced_sub_finite_state_machine"]], "initial_probability (sage.combinat.finite_state_machine.fsmstate attribute)": [[108, "sage.combinat.finite_state_machine.FSMState.initial_probability"]], "initial_states() (sage.combinat.finite_state_machine.finitestatemachine method)": [[108, "sage.combinat.finite_state_machine.FiniteStateMachine.initial_states"]], "input_alphabet (sage.combinat.finite_state_machine.finitestatemachine attribute)": [[108, "sage.combinat.finite_state_machine.FiniteStateMachine.input_alphabet"]], "input_projection() (sage.combinat.finite_state_machine.finitestatemachine method)": [[108, "sage.combinat.finite_state_machine.FiniteStateMachine.input_projection"]], "intersection() (sage.combinat.finite_state_machine.automaton method)": [[108, "sage.combinat.finite_state_machine.Automaton.intersection"]], "intersection() (sage.combinat.finite_state_machine.finitestatemachine method)": [[108, "sage.combinat.finite_state_machine.FiniteStateMachine.intersection"]], "intersection() (sage.combinat.finite_state_machine.transducer method)": [[108, "sage.combinat.finite_state_machine.Transducer.intersection"]], "is_automaton() (in module sage.combinat.finite_state_machine)": [[108, "sage.combinat.finite_state_machine.is_Automaton"]], "is_fsmprocessiterator() (in module sage.combinat.finite_state_machine)": [[108, "sage.combinat.finite_state_machine.is_FSMProcessIterator"]], "is_fsmstate() (in module sage.combinat.finite_state_machine)": [[108, "sage.combinat.finite_state_machine.is_FSMState"]], "is_fsmtransition() (in module sage.combinat.finite_state_machine)": [[108, "sage.combinat.finite_state_machine.is_FSMTransition"]], "is_finitestatemachine() (in module sage.combinat.finite_state_machine)": [[108, "sage.combinat.finite_state_machine.is_FiniteStateMachine"]], "is_markov_chain() (sage.combinat.finite_state_machine.finitestatemachine method)": [[108, "sage.combinat.finite_state_machine.FiniteStateMachine.is_Markov_chain"]], "is_transducer() (in module sage.combinat.finite_state_machine)": [[108, "sage.combinat.finite_state_machine.is_Transducer"]], "is_complete() (sage.combinat.finite_state_machine.finitestatemachine method)": [[108, "sage.combinat.finite_state_machine.FiniteStateMachine.is_complete"]], "is_connected() (sage.combinat.finite_state_machine.finitestatemachine method)": [[108, "sage.combinat.finite_state_machine.FiniteStateMachine.is_connected"]], "is_deterministic() (sage.combinat.finite_state_machine.finitestatemachine method)": [[108, "sage.combinat.finite_state_machine.FiniteStateMachine.is_deterministic"]], "is_equivalent() (sage.combinat.finite_state_machine.automaton method)": [[108, "sage.combinat.finite_state_machine.Automaton.is_equivalent"]], "is_final (sage.combinat.finite_state_machine.fsmstate property)": [[108, "sage.combinat.finite_state_machine.FSMState.is_final"]], "is_initial (sage.combinat.finite_state_machine.fsmstate attribute)": [[108, "sage.combinat.finite_state_machine.FSMState.is_initial"]], "is_monochromatic() (sage.combinat.finite_state_machine.finitestatemachine method)": [[108, "sage.combinat.finite_state_machine.FiniteStateMachine.is_monochromatic"]], "iter_final_states() (sage.combinat.finite_state_machine.finitestatemachine method)": [[108, "sage.combinat.finite_state_machine.FiniteStateMachine.iter_final_states"]], "iter_initial_states() (sage.combinat.finite_state_machine.finitestatemachine method)": [[108, "sage.combinat.finite_state_machine.FiniteStateMachine.iter_initial_states"]], "iter_process() (sage.combinat.finite_state_machine.finitestatemachine method)": [[108, "sage.combinat.finite_state_machine.FiniteStateMachine.iter_process"]], "iter_states() (sage.combinat.finite_state_machine.finitestatemachine method)": [[108, "sage.combinat.finite_state_machine.FiniteStateMachine.iter_states"]], "iter_transitions() (sage.combinat.finite_state_machine.finitestatemachine method)": [[108, "sage.combinat.finite_state_machine.FiniteStateMachine.iter_transitions"]], "kleene_star() (sage.combinat.finite_state_machine.finitestatemachine method)": [[108, "sage.combinat.finite_state_machine.FiniteStateMachine.kleene_star"]], "label() (sage.combinat.finite_state_machine.fsmstate method)": [[108, "sage.combinat.finite_state_machine.FSMState.label"]], "language() (sage.combinat.finite_state_machine.automaton method)": [[108, "sage.combinat.finite_state_machine.Automaton.language"]], "language() (sage.combinat.finite_state_machine.finitestatemachine method)": [[108, "sage.combinat.finite_state_machine.FiniteStateMachine.language"]], "latex_options() (sage.combinat.finite_state_machine.finitestatemachine method)": [[108, "sage.combinat.finite_state_machine.FiniteStateMachine.latex_options"]], "markov_chain_simplification() (sage.combinat.finite_state_machine.finitestatemachine method)": [[108, "sage.combinat.finite_state_machine.FiniteStateMachine.markov_chain_simplification"]], "merged_transitions() (sage.combinat.finite_state_machine.finitestatemachine method)": [[108, "sage.combinat.finite_state_machine.FiniteStateMachine.merged_transitions"]], "minimization() (sage.combinat.finite_state_machine.automaton method)": [[108, "sage.combinat.finite_state_machine.Automaton.minimization"]], "moments_waiting_time() (sage.combinat.finite_state_machine.finitestatemachine method)": [[108, "sage.combinat.finite_state_machine.FiniteStateMachine.moments_waiting_time"]], "next() (sage.combinat.finite_state_machine.fsmprocessiterator method)": [[108, "sage.combinat.finite_state_machine.FSMProcessIterator.next"]], "number_of_words() (sage.combinat.finite_state_machine.finitestatemachine method)": [[108, "sage.combinat.finite_state_machine.FiniteStateMachine.number_of_words"]], "on_duplicate_transition() (sage.combinat.finite_state_machine.finitestatemachine method)": [[108, "sage.combinat.finite_state_machine.FiniteStateMachine.on_duplicate_transition"]], "output (sage.combinat.finite_state_machine.fsmprocessiterator.finishedbranch attribute)": [[108, "sage.combinat.finite_state_machine.FSMProcessIterator.FinishedBranch.output"]], "output_alphabet (sage.combinat.finite_state_machine.finitestatemachine attribute)": [[108, "sage.combinat.finite_state_machine.FiniteStateMachine.output_alphabet"]], "output_projection() (sage.combinat.finite_state_machine.finitestatemachine method)": [[108, "sage.combinat.finite_state_machine.FiniteStateMachine.output_projection"]], "plot() (sage.combinat.finite_state_machine.finitestatemachine method)": [[108, "sage.combinat.finite_state_machine.FiniteStateMachine.plot"]], "predecessors() (sage.combinat.finite_state_machine.finitestatemachine method)": [[108, "sage.combinat.finite_state_machine.FiniteStateMachine.predecessors"]], "prepone_output() (sage.combinat.finite_state_machine.finitestatemachine method)": [[108, "sage.combinat.finite_state_machine.FiniteStateMachine.prepone_output"]], "preview_word() (sage.combinat.finite_state_machine.fsmprocessiterator method)": [[108, "sage.combinat.finite_state_machine.FSMProcessIterator.preview_word"]], "process() (sage.combinat.finite_state_machine.automaton method)": [[108, "sage.combinat.finite_state_machine.Automaton.process"]], "process() (sage.combinat.finite_state_machine.finitestatemachine method)": [[108, "sage.combinat.finite_state_machine.FiniteStateMachine.process"]], "process() (sage.combinat.finite_state_machine.transducer method)": [[108, "sage.combinat.finite_state_machine.Transducer.process"]], "product_finitestatemachine() (sage.combinat.finite_state_machine.finitestatemachine method)": [[108, "sage.combinat.finite_state_machine.FiniteStateMachine.product_FiniteStateMachine"]], "projection() (sage.combinat.finite_state_machine.finitestatemachine method)": [[108, "sage.combinat.finite_state_machine.FiniteStateMachine.projection"]], "quotient() (sage.combinat.finite_state_machine.finitestatemachine method)": [[108, "sage.combinat.finite_state_machine.FiniteStateMachine.quotient"]], "relabeled() (sage.combinat.finite_state_machine.fsmstate method)": [[108, "sage.combinat.finite_state_machine.FSMState.relabeled"]], "relabeled() (sage.combinat.finite_state_machine.finitestatemachine method)": [[108, "sage.combinat.finite_state_machine.FiniteStateMachine.relabeled"]], "remove_epsilon_transitions() (sage.combinat.finite_state_machine.finitestatemachine method)": [[108, "sage.combinat.finite_state_machine.FiniteStateMachine.remove_epsilon_transitions"]], "result() (sage.combinat.finite_state_machine.fsmprocessiterator method)": [[108, "sage.combinat.finite_state_machine.FSMProcessIterator.result"]], "sage.combinat.finite_state_machine": [[108, "module-sage.combinat.finite_state_machine"]], "set_coordinates() (sage.combinat.finite_state_machine.finitestatemachine method)": [[108, "sage.combinat.finite_state_machine.FiniteStateMachine.set_coordinates"]], "setup_latex_preamble() (in module sage.combinat.finite_state_machine)": [[108, "sage.combinat.finite_state_machine.setup_latex_preamble"]], "shannon_parry_markov_chain() (sage.combinat.finite_state_machine.automaton method)": [[108, "sage.combinat.finite_state_machine.Automaton.shannon_parry_markov_chain"]], "simplification() (sage.combinat.finite_state_machine.transducer method)": [[108, "sage.combinat.finite_state_machine.Transducer.simplification"]], "split_transitions() (sage.combinat.finite_state_machine.finitestatemachine method)": [[108, "sage.combinat.finite_state_machine.FiniteStateMachine.split_transitions"]], "startswith() (in module sage.combinat.finite_state_machine)": [[108, "sage.combinat.finite_state_machine.startswith"]], "state (sage.combinat.finite_state_machine.fsmprocessiterator.finishedbranch attribute)": [[108, "sage.combinat.finite_state_machine.FSMProcessIterator.FinishedBranch.state"]], "state() (sage.combinat.finite_state_machine.finitestatemachine method)": [[108, "sage.combinat.finite_state_machine.FiniteStateMachine.state"]], "states() (sage.combinat.finite_state_machine.finitestatemachine method)": [[108, "sage.combinat.finite_state_machine.FiniteStateMachine.states"]], "to_state (sage.combinat.finite_state_machine.fsmtransition attribute)": [[108, "sage.combinat.finite_state_machine.FSMTransition.to_state"]], "transition() (sage.combinat.finite_state_machine.finitestatemachine method)": [[108, "sage.combinat.finite_state_machine.FiniteStateMachine.transition"]], "transitions() (sage.combinat.finite_state_machine.finitestatemachine method)": [[108, "sage.combinat.finite_state_machine.FiniteStateMachine.transitions"]], "transposition() (sage.combinat.finite_state_machine.finitestatemachine method)": [[108, "sage.combinat.finite_state_machine.FiniteStateMachine.transposition"]], "tupleofwords_to_wordoftuples() (in module sage.combinat.finite_state_machine)": [[108, "sage.combinat.finite_state_machine.tupleofwords_to_wordoftuples"]], "with_final_word_out() (sage.combinat.finite_state_machine.finitestatemachine method)": [[108, "sage.combinat.finite_state_machine.FiniteStateMachine.with_final_word_out"]], "with_output() (sage.combinat.finite_state_machine.automaton method)": [[108, "sage.combinat.finite_state_machine.Automaton.with_output"]], "word_in (sage.combinat.finite_state_machine.fsmtransition attribute)": [[108, "sage.combinat.finite_state_machine.FSMTransition.word_in"]], "word_out (sage.combinat.finite_state_machine.fsmtransition attribute)": [[108, "sage.combinat.finite_state_machine.FSMTransition.word_out"]], "wordoftuples_to_tupleofwords() (in module sage.combinat.finite_state_machine)": [[108, "sage.combinat.finite_state_machine.wordoftuples_to_tupleofwords"]], "anyletter() (sage.combinat.finite_state_machine_generators.automatongenerators method)": [[109, "sage.combinat.finite_state_machine_generators.AutomatonGenerators.AnyLetter"]], "anyword() (sage.combinat.finite_state_machine_generators.automatongenerators method)": [[109, "sage.combinat.finite_state_machine_generators.AutomatonGenerators.AnyWord"]], "automatongenerators (class in sage.combinat.finite_state_machine_generators)": [[109, "sage.combinat.finite_state_machine_generators.AutomatonGenerators"]], "containsword() (sage.combinat.finite_state_machine_generators.automatongenerators method)": [[109, "sage.combinat.finite_state_machine_generators.AutomatonGenerators.ContainsWord"]], "countsubblockoccurrences() (sage.combinat.finite_state_machine_generators.transducergenerators method)": [[109, "sage.combinat.finite_state_machine_generators.TransducerGenerators.CountSubblockOccurrences"]], "emptyword() (sage.combinat.finite_state_machine_generators.automatongenerators method)": [[109, "sage.combinat.finite_state_machine_generators.AutomatonGenerators.EmptyWord"]], "graycode() (sage.combinat.finite_state_machine_generators.transducergenerators method)": [[109, "sage.combinat.finite_state_machine_generators.TransducerGenerators.GrayCode"]], "identity() (sage.combinat.finite_state_machine_generators.transducergenerators method)": [[109, "sage.combinat.finite_state_machine_generators.TransducerGenerators.Identity"]], "k (sage.combinat.finite_state_machine_generators.transducergenerators.recursionrule attribute)": [[109, "sage.combinat.finite_state_machine_generators.TransducerGenerators.RecursionRule.K"], [109, "sage.combinat.finite_state_machine_generators.TransducerGenerators.RecursionRule.k"]], "recursion() (sage.combinat.finite_state_machine_generators.transducergenerators method)": [[109, "sage.combinat.finite_state_machine_generators.TransducerGenerators.Recursion"]], "transducergenerators (class in sage.combinat.finite_state_machine_generators)": [[109, "sage.combinat.finite_state_machine_generators.TransducerGenerators"]], "transducergenerators.recursionrule (class in sage.combinat.finite_state_machine_generators)": [[109, "sage.combinat.finite_state_machine_generators.TransducerGenerators.RecursionRule"]], "wait() (sage.combinat.finite_state_machine_generators.transducergenerators method)": [[109, "sage.combinat.finite_state_machine_generators.TransducerGenerators.Wait"]], "word() (sage.combinat.finite_state_machine_generators.automatongenerators method)": [[109, "sage.combinat.finite_state_machine_generators.AutomatonGenerators.Word"]], "abs() (sage.combinat.finite_state_machine_generators.transducergenerators method)": [[109, "sage.combinat.finite_state_machine_generators.TransducerGenerators.abs"]], "add() (sage.combinat.finite_state_machine_generators.transducergenerators method)": [[109, "sage.combinat.finite_state_machine_generators.TransducerGenerators.add"]], "all() (sage.combinat.finite_state_machine_generators.transducergenerators method)": [[109, "sage.combinat.finite_state_machine_generators.TransducerGenerators.all"]], "any() (sage.combinat.finite_state_machine_generators.transducergenerators method)": [[109, "sage.combinat.finite_state_machine_generators.TransducerGenerators.any"]], "map() (sage.combinat.finite_state_machine_generators.transducergenerators method)": [[109, "sage.combinat.finite_state_machine_generators.TransducerGenerators.map"]], "operator() (sage.combinat.finite_state_machine_generators.transducergenerators method)": [[109, "sage.combinat.finite_state_machine_generators.TransducerGenerators.operator"]], "r (sage.combinat.finite_state_machine_generators.transducergenerators.recursionrule attribute)": [[109, "sage.combinat.finite_state_machine_generators.TransducerGenerators.RecursionRule.r"]], "s (sage.combinat.finite_state_machine_generators.transducergenerators.recursionrule attribute)": [[109, "sage.combinat.finite_state_machine_generators.TransducerGenerators.RecursionRule.s"]], "sage.combinat.finite_state_machine_generators": [[109, "module-sage.combinat.finite_state_machine_generators"]], "sub() (sage.combinat.finite_state_machine_generators.transducergenerators method)": [[109, "sage.combinat.finite_state_machine_generators.TransducerGenerators.sub"]], "t (sage.combinat.finite_state_machine_generators.transducergenerators.recursionrule attribute)": [[109, "sage.combinat.finite_state_machine_generators.TransducerGenerators.RecursionRule.t"]], "weight() (sage.combinat.finite_state_machine_generators.transducergenerators method)": [[109, "sage.combinat.finite_state_machine_generators.TransducerGenerators.weight"]], "fqsymbases (class in sage.combinat.fqsym)": [[110, "sage.combinat.fqsym.FQSymBases"]], "fqsymbases.elementmethods (class in sage.combinat.fqsym)": [[110, "sage.combinat.fqsym.FQSymBases.ElementMethods"]], "fqsymbases.parentmethods (class in sage.combinat.fqsym)": [[110, "sage.combinat.fqsym.FQSymBases.ParentMethods"]], "fqsymbasis_abstract (class in sage.combinat.fqsym)": [[110, "sage.combinat.fqsym.FQSymBasis_abstract"]], "freequasisymmetricfunctions (class in sage.combinat.fqsym)": [[110, "sage.combinat.fqsym.FreeQuasisymmetricFunctions"]], "freequasisymmetricfunctions.f (class in sage.combinat.fqsym)": [[110, "sage.combinat.fqsym.FreeQuasisymmetricFunctions.F"]], "freequasisymmetricfunctions.f.element (class in sage.combinat.fqsym)": [[110, "sage.combinat.fqsym.FreeQuasisymmetricFunctions.F.Element"]], "freequasisymmetricfunctions.g (class in sage.combinat.fqsym)": [[110, "sage.combinat.fqsym.FreeQuasisymmetricFunctions.G"]], "freequasisymmetricfunctions.m (class in sage.combinat.fqsym)": [[110, "sage.combinat.fqsym.FreeQuasisymmetricFunctions.M"]], "freequasisymmetricfunctions.m.element (class in sage.combinat.fqsym)": [[110, "sage.combinat.fqsym.FreeQuasisymmetricFunctions.M.Element"]], "a_realization() (sage.combinat.fqsym.freequasisymmetricfunctions method)": [[110, "sage.combinat.fqsym.FreeQuasisymmetricFunctions.a_realization"]], "an_element() (sage.combinat.fqsym.fqsymbasis_abstract method)": [[110, "sage.combinat.fqsym.FQSymBasis_abstract.an_element"]], "basis() (sage.combinat.fqsym.fqsymbases.parentmethods method)": [[110, "sage.combinat.fqsym.FQSymBases.ParentMethods.basis"]], "coproduct_on_basis() (sage.combinat.fqsym.freequasisymmetricfunctions.f method)": [[110, "sage.combinat.fqsym.FreeQuasisymmetricFunctions.F.coproduct_on_basis"]], "coproduct_on_basis() (sage.combinat.fqsym.freequasisymmetricfunctions.m method)": [[110, "sage.combinat.fqsym.FreeQuasisymmetricFunctions.M.coproduct_on_basis"]], "degree_on_basis() (sage.combinat.fqsym.freequasisymmetricfunctions.f method)": [[110, "sage.combinat.fqsym.FreeQuasisymmetricFunctions.F.degree_on_basis"]], "degree_on_basis() (sage.combinat.fqsym.freequasisymmetricfunctions.g method)": [[110, "sage.combinat.fqsym.FreeQuasisymmetricFunctions.G.degree_on_basis"]], "degree_on_basis() (sage.combinat.fqsym.freequasisymmetricfunctions.m method)": [[110, "sage.combinat.fqsym.FreeQuasisymmetricFunctions.M.degree_on_basis"]], "from_symmetric_group_algebra() (sage.combinat.fqsym.fqsymbases.parentmethods method)": [[110, "sage.combinat.fqsym.FQSymBases.ParentMethods.from_symmetric_group_algebra"]], "is_commutative() (sage.combinat.fqsym.fqsymbases.parentmethods method)": [[110, "sage.combinat.fqsym.FQSymBases.ParentMethods.is_commutative"]], "is_field() (sage.combinat.fqsym.fqsymbases.parentmethods method)": [[110, "sage.combinat.fqsym.FQSymBases.ParentMethods.is_field"]], "omega_involution() (sage.combinat.fqsym.fqsymbases.elementmethods method)": [[110, "sage.combinat.fqsym.FQSymBases.ElementMethods.omega_involution"]], "one_basis() (sage.combinat.fqsym.fqsymbases.parentmethods method)": [[110, "sage.combinat.fqsym.FQSymBases.ParentMethods.one_basis"]], "prec() (sage.combinat.fqsym.fqsymbases.parentmethods method)": [[110, "sage.combinat.fqsym.FQSymBases.ParentMethods.prec"]], "prec_by_coercion() (sage.combinat.fqsym.fqsymbases.parentmethods method)": [[110, "sage.combinat.fqsym.FQSymBases.ParentMethods.prec_by_coercion"]], "prec_product_on_basis() (sage.combinat.fqsym.freequasisymmetricfunctions.f method)": [[110, "sage.combinat.fqsym.FreeQuasisymmetricFunctions.F.prec_product_on_basis"]], "product_on_basis() (sage.combinat.fqsym.freequasisymmetricfunctions.f method)": [[110, "sage.combinat.fqsym.FreeQuasisymmetricFunctions.F.product_on_basis"]], "psi_involution() (sage.combinat.fqsym.fqsymbases.elementmethods method)": [[110, "sage.combinat.fqsym.FQSymBases.ElementMethods.psi_involution"]], "sage.combinat.fqsym": [[110, "module-sage.combinat.fqsym"]], "some_elements() (sage.combinat.fqsym.fqsymbases.parentmethods method)": [[110, "sage.combinat.fqsym.FQSymBases.ParentMethods.some_elements"]], "star_involution() (sage.combinat.fqsym.fqsymbases.elementmethods method)": [[110, "sage.combinat.fqsym.FQSymBases.ElementMethods.star_involution"]], "star_involution() (sage.combinat.fqsym.freequasisymmetricfunctions.m.element method)": [[110, "sage.combinat.fqsym.FreeQuasisymmetricFunctions.M.Element.star_involution"]], "succ() (sage.combinat.fqsym.fqsymbases.parentmethods method)": [[110, "sage.combinat.fqsym.FQSymBases.ParentMethods.succ"]], "succ_by_coercion() (sage.combinat.fqsym.fqsymbases.parentmethods method)": [[110, "sage.combinat.fqsym.FQSymBases.ParentMethods.succ_by_coercion"]], "succ_product_on_basis() (sage.combinat.fqsym.freequasisymmetricfunctions.f method)": [[110, "sage.combinat.fqsym.FreeQuasisymmetricFunctions.F.succ_product_on_basis"]], "super_categories() (sage.combinat.fqsym.fqsymbases method)": [[110, "sage.combinat.fqsym.FQSymBases.super_categories"]], "to_qsym() (sage.combinat.fqsym.fqsymbases.elementmethods method)": [[110, "sage.combinat.fqsym.FQSymBases.ElementMethods.to_qsym"]], "to_symmetric_group_algebra() (sage.combinat.fqsym.fqsymbases.elementmethods method)": [[110, "sage.combinat.fqsym.FQSymBases.ElementMethods.to_symmetric_group_algebra"]], "to_symmetric_group_algebra() (sage.combinat.fqsym.freequasisymmetricfunctions.f.element method)": [[110, "sage.combinat.fqsym.FreeQuasisymmetricFunctions.F.Element.to_symmetric_group_algebra"]], "to_wqsym() (sage.combinat.fqsym.fqsymbases.elementmethods method)": [[110, "sage.combinat.fqsym.FQSymBases.ElementMethods.to_wqsym"]], "dendriformfunctor (class in sage.combinat.free_dendriform_algebra)": [[111, "sage.combinat.free_dendriform_algebra.DendriformFunctor"]], "freedendriformalgebra (class in sage.combinat.free_dendriform_algebra)": [[111, "sage.combinat.free_dendriform_algebra.FreeDendriformAlgebra"]], "algebra_generators() (sage.combinat.free_dendriform_algebra.freedendriformalgebra method)": [[111, "sage.combinat.free_dendriform_algebra.FreeDendriformAlgebra.algebra_generators"]], "an_element() (sage.combinat.free_dendriform_algebra.freedendriformalgebra method)": [[111, "sage.combinat.free_dendriform_algebra.FreeDendriformAlgebra.an_element"]], "change_ring() (sage.combinat.free_dendriform_algebra.freedendriformalgebra method)": [[111, "sage.combinat.free_dendriform_algebra.FreeDendriformAlgebra.change_ring"]], "construction() (sage.combinat.free_dendriform_algebra.freedendriformalgebra method)": [[111, "sage.combinat.free_dendriform_algebra.FreeDendriformAlgebra.construction"]], "coproduct_on_basis() (sage.combinat.free_dendriform_algebra.freedendriformalgebra method)": [[111, "sage.combinat.free_dendriform_algebra.FreeDendriformAlgebra.coproduct_on_basis"]], "degree_on_basis() (sage.combinat.free_dendriform_algebra.freedendriformalgebra method)": [[111, "sage.combinat.free_dendriform_algebra.FreeDendriformAlgebra.degree_on_basis"]], "gen() (sage.combinat.free_dendriform_algebra.freedendriformalgebra method)": [[111, "sage.combinat.free_dendriform_algebra.FreeDendriformAlgebra.gen"]], "gens() (sage.combinat.free_dendriform_algebra.freedendriformalgebra method)": [[111, "sage.combinat.free_dendriform_algebra.FreeDendriformAlgebra.gens"]], "merge() (sage.combinat.free_dendriform_algebra.dendriformfunctor method)": [[111, "sage.combinat.free_dendriform_algebra.DendriformFunctor.merge"]], "one_basis() (sage.combinat.free_dendriform_algebra.freedendriformalgebra method)": [[111, "sage.combinat.free_dendriform_algebra.FreeDendriformAlgebra.one_basis"]], "over() (sage.combinat.free_dendriform_algebra.freedendriformalgebra method)": [[111, "sage.combinat.free_dendriform_algebra.FreeDendriformAlgebra.over"]], "prec() (sage.combinat.free_dendriform_algebra.freedendriformalgebra method)": [[111, "sage.combinat.free_dendriform_algebra.FreeDendriformAlgebra.prec"]], "prec_product_on_basis() (sage.combinat.free_dendriform_algebra.freedendriformalgebra method)": [[111, "sage.combinat.free_dendriform_algebra.FreeDendriformAlgebra.prec_product_on_basis"]], "product_on_basis() (sage.combinat.free_dendriform_algebra.freedendriformalgebra method)": [[111, "sage.combinat.free_dendriform_algebra.FreeDendriformAlgebra.product_on_basis"]], "rank (sage.combinat.free_dendriform_algebra.dendriformfunctor attribute)": [[111, "sage.combinat.free_dendriform_algebra.DendriformFunctor.rank"]], "sage.combinat.free_dendriform_algebra": [[111, "module-sage.combinat.free_dendriform_algebra"]], "some_elements() (sage.combinat.free_dendriform_algebra.freedendriformalgebra method)": [[111, "sage.combinat.free_dendriform_algebra.FreeDendriformAlgebra.some_elements"]], "succ() (sage.combinat.free_dendriform_algebra.freedendriformalgebra method)": [[111, "sage.combinat.free_dendriform_algebra.FreeDendriformAlgebra.succ"]], "succ_product_on_basis() (sage.combinat.free_dendriform_algebra.freedendriformalgebra method)": [[111, "sage.combinat.free_dendriform_algebra.FreeDendriformAlgebra.succ_product_on_basis"]], "under() (sage.combinat.free_dendriform_algebra.freedendriformalgebra method)": [[111, "sage.combinat.free_dendriform_algebra.FreeDendriformAlgebra.under"]], "variable_names() (sage.combinat.free_dendriform_algebra.freedendriformalgebra method)": [[111, "sage.combinat.free_dendriform_algebra.FreeDendriformAlgebra.variable_names"]], "cartesianproduct (sage.combinat.free_module.combinatorialfreemodule attribute)": [[112, "sage.combinat.free_module.CombinatorialFreeModule.CartesianProduct"]], "cartesianproductwithflattening (class in sage.combinat.free_module)": [[112, "sage.combinat.free_module.CartesianProductWithFlattening"]], "combinatorialfreemodule (class in sage.combinat.free_module)": [[112, "sage.combinat.free_module.CombinatorialFreeModule"]], "combinatorialfreemodule_cartesianproduct (class in sage.combinat.free_module)": [[112, "sage.combinat.free_module.CombinatorialFreeModule_CartesianProduct"]], "combinatorialfreemodule_cartesianproduct.element (class in sage.combinat.free_module)": [[112, "sage.combinat.free_module.CombinatorialFreeModule_CartesianProduct.Element"]], "combinatorialfreemodule_tensor (class in sage.combinat.free_module)": [[112, "sage.combinat.free_module.CombinatorialFreeModule_Tensor"]], "element (sage.combinat.free_module.combinatorialfreemodule attribute)": [[112, "sage.combinat.free_module.CombinatorialFreeModule.Element"]], "tensor (sage.combinat.free_module.combinatorialfreemodule attribute)": [[112, "sage.combinat.free_module.CombinatorialFreeModule.Tensor"]], "cartesian_embedding() (sage.combinat.free_module.combinatorialfreemodule_cartesianproduct method)": [[112, "sage.combinat.free_module.CombinatorialFreeModule_CartesianProduct.cartesian_embedding"]], "cartesian_factors() (sage.combinat.free_module.combinatorialfreemodule_cartesianproduct method)": [[112, "sage.combinat.free_module.CombinatorialFreeModule_CartesianProduct.cartesian_factors"]], "cartesian_projection() (sage.combinat.free_module.combinatorialfreemodule_cartesianproduct method)": [[112, "sage.combinat.free_module.CombinatorialFreeModule_CartesianProduct.cartesian_projection"]], "change_ring() (sage.combinat.free_module.combinatorialfreemodule method)": [[112, "sage.combinat.free_module.CombinatorialFreeModule.change_ring"]], "construction() (sage.combinat.free_module.combinatorialfreemodule method)": [[112, "sage.combinat.free_module.CombinatorialFreeModule.construction"]], "dimension() (sage.combinat.free_module.combinatorialfreemodule method)": [[112, "sage.combinat.free_module.CombinatorialFreeModule.dimension"]], "element_class() (sage.combinat.free_module.combinatorialfreemodule method)": [[112, "sage.combinat.free_module.CombinatorialFreeModule.element_class"]], "from_vector() (sage.combinat.free_module.combinatorialfreemodule method)": [[112, "sage.combinat.free_module.CombinatorialFreeModule.from_vector"]], "get_order() (sage.combinat.free_module.combinatorialfreemodule method)": [[112, "sage.combinat.free_module.CombinatorialFreeModule.get_order"]], "get_order_key() (sage.combinat.free_module.combinatorialfreemodule method)": [[112, "sage.combinat.free_module.CombinatorialFreeModule.get_order_key"]], "is_exact() (sage.combinat.free_module.combinatorialfreemodule method)": [[112, "sage.combinat.free_module.CombinatorialFreeModule.is_exact"]], "linear_combination() (sage.combinat.free_module.combinatorialfreemodule method)": [[112, "sage.combinat.free_module.CombinatorialFreeModule.linear_combination"]], "monomial() (sage.combinat.free_module.combinatorialfreemodule method)": [[112, "sage.combinat.free_module.CombinatorialFreeModule.monomial"]], "rank() (sage.combinat.free_module.combinatorialfreemodule method)": [[112, "sage.combinat.free_module.CombinatorialFreeModule.rank"]], "sage.combinat.free_module": [[112, "module-sage.combinat.free_module"]], "set_order() (sage.combinat.free_module.combinatorialfreemodule method)": [[112, "sage.combinat.free_module.CombinatorialFreeModule.set_order"]], "sum() (sage.combinat.free_module.combinatorialfreemodule method)": [[112, "sage.combinat.free_module.CombinatorialFreeModule.sum"]], "sum_of_terms() (sage.combinat.free_module.combinatorialfreemodule method)": [[112, "sage.combinat.free_module.CombinatorialFreeModule.sum_of_terms"]], "summand_embedding() (sage.combinat.free_module.combinatorialfreemodule_cartesianproduct method)": [[112, "sage.combinat.free_module.CombinatorialFreeModule_CartesianProduct.summand_embedding"]], "summand_projection() (sage.combinat.free_module.combinatorialfreemodule_cartesianproduct method)": [[112, "sage.combinat.free_module.CombinatorialFreeModule_CartesianProduct.summand_projection"]], "tensor_constructor() (sage.combinat.free_module.combinatorialfreemodule_tensor method)": [[112, "sage.combinat.free_module.CombinatorialFreeModule_Tensor.tensor_constructor"]], "tensor_factors() (sage.combinat.free_module.combinatorialfreemodule_tensor method)": [[112, "sage.combinat.free_module.CombinatorialFreeModule_Tensor.tensor_factors"]], "term() (sage.combinat.free_module.combinatorialfreemodule method)": [[112, "sage.combinat.free_module.CombinatorialFreeModule.term"]], "zero() (sage.combinat.free_module.combinatorialfreemodule method)": [[112, "sage.combinat.free_module.CombinatorialFreeModule.zero"]], "freepreliealgebra (class in sage.combinat.free_prelie_algebra)": [[113, "sage.combinat.free_prelie_algebra.FreePreLieAlgebra"]], "freepreliealgebra.element (class in sage.combinat.free_prelie_algebra)": [[113, "sage.combinat.free_prelie_algebra.FreePreLieAlgebra.Element"]], "preliefunctor (class in sage.combinat.free_prelie_algebra)": [[113, "sage.combinat.free_prelie_algebra.PreLieFunctor"]], "algebra_generators() (sage.combinat.free_prelie_algebra.freepreliealgebra method)": [[113, "sage.combinat.free_prelie_algebra.FreePreLieAlgebra.algebra_generators"]], "an_element() (sage.combinat.free_prelie_algebra.freepreliealgebra method)": [[113, "sage.combinat.free_prelie_algebra.FreePreLieAlgebra.an_element"]], "bracket_on_basis() (sage.combinat.free_prelie_algebra.freepreliealgebra method)": [[113, "sage.combinat.free_prelie_algebra.FreePreLieAlgebra.bracket_on_basis"]], "change_ring() (sage.combinat.free_prelie_algebra.freepreliealgebra method)": [[113, "sage.combinat.free_prelie_algebra.FreePreLieAlgebra.change_ring"]], "construction() (sage.combinat.free_prelie_algebra.freepreliealgebra method)": [[113, "sage.combinat.free_prelie_algebra.FreePreLieAlgebra.construction"]], "degree_on_basis() (sage.combinat.free_prelie_algebra.freepreliealgebra method)": [[113, "sage.combinat.free_prelie_algebra.FreePreLieAlgebra.degree_on_basis"]], "gen() (sage.combinat.free_prelie_algebra.freepreliealgebra method)": [[113, "sage.combinat.free_prelie_algebra.FreePreLieAlgebra.gen"]], "gens() (sage.combinat.free_prelie_algebra.freepreliealgebra method)": [[113, "sage.combinat.free_prelie_algebra.FreePreLieAlgebra.gens"]], "lift() (sage.combinat.free_prelie_algebra.freepreliealgebra.element method)": [[113, "sage.combinat.free_prelie_algebra.FreePreLieAlgebra.Element.lift"]], "merge() (sage.combinat.free_prelie_algebra.preliefunctor method)": [[113, "sage.combinat.free_prelie_algebra.PreLieFunctor.merge"]], "nap_product() (sage.combinat.free_prelie_algebra.freepreliealgebra method)": [[113, "sage.combinat.free_prelie_algebra.FreePreLieAlgebra.nap_product"]], "nap_product_on_basis() (sage.combinat.free_prelie_algebra.freepreliealgebra method)": [[113, "sage.combinat.free_prelie_algebra.FreePreLieAlgebra.nap_product_on_basis"]], "pre_lie_product() (sage.combinat.free_prelie_algebra.freepreliealgebra method)": [[113, "sage.combinat.free_prelie_algebra.FreePreLieAlgebra.pre_Lie_product"]], "pre_lie_product_on_basis() (sage.combinat.free_prelie_algebra.freepreliealgebra method)": [[113, "sage.combinat.free_prelie_algebra.FreePreLieAlgebra.pre_Lie_product_on_basis"]], "product_on_basis() (sage.combinat.free_prelie_algebra.freepreliealgebra method)": [[113, "sage.combinat.free_prelie_algebra.FreePreLieAlgebra.product_on_basis"]], "rank (sage.combinat.free_prelie_algebra.preliefunctor attribute)": [[113, "sage.combinat.free_prelie_algebra.PreLieFunctor.rank"]], "sage.combinat.free_prelie_algebra": [[113, "module-sage.combinat.free_prelie_algebra"]], "some_elements() (sage.combinat.free_prelie_algebra.freepreliealgebra method)": [[113, "sage.combinat.free_prelie_algebra.FreePreLieAlgebra.some_elements"]], "variable_names() (sage.combinat.free_prelie_algebra.freepreliealgebra method)": [[113, "sage.combinat.free_prelie_algebra.FreePreLieAlgebra.variable_names"]], "element (sage.combinat.fully_commutative_elements.fullycommutativeelements attribute)": [[114, "sage.combinat.fully_commutative_elements.FullyCommutativeElements.Element"]], "fullycommutativeelement (class in sage.combinat.fully_commutative_elements)": [[114, "sage.combinat.fully_commutative_elements.FullyCommutativeElement"]], "fullycommutativeelements (class in sage.combinat.fully_commutative_elements)": [[114, "sage.combinat.fully_commutative_elements.FullyCommutativeElements"]], "check() (sage.combinat.fully_commutative_elements.fullycommutativeelement method)": [[114, "sage.combinat.fully_commutative_elements.FullyCommutativeElement.check"]], "coset_decomposition() (sage.combinat.fully_commutative_elements.fullycommutativeelement method)": [[114, "sage.combinat.fully_commutative_elements.FullyCommutativeElement.coset_decomposition"]], "coxeter_group() (sage.combinat.fully_commutative_elements.fullycommutativeelements method)": [[114, "sage.combinat.fully_commutative_elements.FullyCommutativeElements.coxeter_group"]], "descents() (sage.combinat.fully_commutative_elements.fullycommutativeelement method)": [[114, "sage.combinat.fully_commutative_elements.FullyCommutativeElement.descents"]], "find_descent() (sage.combinat.fully_commutative_elements.fullycommutativeelement method)": [[114, "sage.combinat.fully_commutative_elements.FullyCommutativeElement.find_descent"]], "group_element() (sage.combinat.fully_commutative_elements.fullycommutativeelement method)": [[114, "sage.combinat.fully_commutative_elements.FullyCommutativeElement.group_element"]], "has_descent() (sage.combinat.fully_commutative_elements.fullycommutativeelement method)": [[114, "sage.combinat.fully_commutative_elements.FullyCommutativeElement.has_descent"]], "heap() (sage.combinat.fully_commutative_elements.fullycommutativeelement method)": [[114, "sage.combinat.fully_commutative_elements.FullyCommutativeElement.heap"]], "is_fully_commutative() (sage.combinat.fully_commutative_elements.fullycommutativeelement method)": [[114, "sage.combinat.fully_commutative_elements.FullyCommutativeElement.is_fully_commutative"]], "iterate_to_length() (sage.combinat.fully_commutative_elements.fullycommutativeelements method)": [[114, "sage.combinat.fully_commutative_elements.FullyCommutativeElements.iterate_to_length"]], "n_value() (sage.combinat.fully_commutative_elements.fullycommutativeelement method)": [[114, "sage.combinat.fully_commutative_elements.FullyCommutativeElement.n_value"]], "normalize() (sage.combinat.fully_commutative_elements.fullycommutativeelement method)": [[114, "sage.combinat.fully_commutative_elements.FullyCommutativeElement.normalize"]], "plot_heap() (sage.combinat.fully_commutative_elements.fullycommutativeelement method)": [[114, "sage.combinat.fully_commutative_elements.FullyCommutativeElement.plot_heap"]], "sage.combinat.fully_commutative_elements": [[114, "module-sage.combinat.fully_commutative_elements"]], "star_operation() (sage.combinat.fully_commutative_elements.fullycommutativeelement method)": [[114, "sage.combinat.fully_commutative_elements.FullyCommutativeElement.star_operation"]], "element (sage.combinat.fully_packed_loop.fullypackedloops attribute)": [[115, "sage.combinat.fully_packed_loop.FullyPackedLoops.Element"]], "fullypackedloop (class in sage.combinat.fully_packed_loop)": [[115, "sage.combinat.fully_packed_loop.FullyPackedLoop"]], "fullypackedloops (class in sage.combinat.fully_packed_loop)": [[115, "sage.combinat.fully_packed_loop.FullyPackedLoops"]], "cardinality() (sage.combinat.fully_packed_loop.fullypackedloops method)": [[115, "sage.combinat.fully_packed_loop.FullyPackedLoops.cardinality"]], "gyration() (sage.combinat.fully_packed_loop.fullypackedloop method)": [[115, "sage.combinat.fully_packed_loop.FullyPackedLoop.gyration"]], "link_pattern() (sage.combinat.fully_packed_loop.fullypackedloop method)": [[115, "sage.combinat.fully_packed_loop.FullyPackedLoop.link_pattern"]], "plot() (sage.combinat.fully_packed_loop.fullypackedloop method)": [[115, "sage.combinat.fully_packed_loop.FullyPackedLoop.plot"]], "sage.combinat.fully_packed_loop": [[115, "module-sage.combinat.fully_packed_loop"]], "six_vertex_model() (sage.combinat.fully_packed_loop.fullypackedloop method)": [[115, "sage.combinat.fully_packed_loop.FullyPackedLoop.six_vertex_model"]], "size() (sage.combinat.fully_packed_loop.fullypackedloops method)": [[115, "sage.combinat.fully_packed_loop.FullyPackedLoops.size"]], "to_alternating_sign_matrix() (sage.combinat.fully_packed_loop.fullypackedloop method)": [[115, "sage.combinat.fully_packed_loop.FullyPackedLoop.to_alternating_sign_matrix"]], "element (sage.combinat.gelfand_tsetlin_patterns.gelfandtsetlinpatterns attribute)": [[116, "sage.combinat.gelfand_tsetlin_patterns.GelfandTsetlinPatterns.Element"]], "gelfandtsetlinpattern (class in sage.combinat.gelfand_tsetlin_patterns)": [[116, "sage.combinat.gelfand_tsetlin_patterns.GelfandTsetlinPattern"]], "gelfandtsetlinpatterns (class in sage.combinat.gelfand_tsetlin_patterns)": [[116, "sage.combinat.gelfand_tsetlin_patterns.GelfandTsetlinPatterns"]], "gelfandtsetlinpatternstoprow (class in sage.combinat.gelfand_tsetlin_patterns)": [[116, "sage.combinat.gelfand_tsetlin_patterns.GelfandTsetlinPatternsTopRow"]], "tokuyama_coefficient() (sage.combinat.gelfand_tsetlin_patterns.gelfandtsetlinpattern method)": [[116, "sage.combinat.gelfand_tsetlin_patterns.GelfandTsetlinPattern.Tokuyama_coefficient"]], "tokuyama_formula() (sage.combinat.gelfand_tsetlin_patterns.gelfandtsetlinpatternstoprow method)": [[116, "sage.combinat.gelfand_tsetlin_patterns.GelfandTsetlinPatternsTopRow.Tokuyama_formula"]], "bender_knuth_involution() (sage.combinat.gelfand_tsetlin_patterns.gelfandtsetlinpattern method)": [[116, "sage.combinat.gelfand_tsetlin_patterns.GelfandTsetlinPattern.bender_knuth_involution"]], "boxed_entries() (sage.combinat.gelfand_tsetlin_patterns.gelfandtsetlinpattern method)": [[116, "sage.combinat.gelfand_tsetlin_patterns.GelfandTsetlinPattern.boxed_entries"]], "check() (sage.combinat.gelfand_tsetlin_patterns.gelfandtsetlinpattern method)": [[116, "sage.combinat.gelfand_tsetlin_patterns.GelfandTsetlinPattern.check"]], "circled_entries() (sage.combinat.gelfand_tsetlin_patterns.gelfandtsetlinpattern method)": [[116, "sage.combinat.gelfand_tsetlin_patterns.GelfandTsetlinPattern.circled_entries"]], "is_strict() (sage.combinat.gelfand_tsetlin_patterns.gelfandtsetlinpattern method)": [[116, "sage.combinat.gelfand_tsetlin_patterns.GelfandTsetlinPattern.is_strict"]], "number_of_boxes() (sage.combinat.gelfand_tsetlin_patterns.gelfandtsetlinpattern method)": [[116, "sage.combinat.gelfand_tsetlin_patterns.GelfandTsetlinPattern.number_of_boxes"]], "number_of_circles() (sage.combinat.gelfand_tsetlin_patterns.gelfandtsetlinpattern method)": [[116, "sage.combinat.gelfand_tsetlin_patterns.GelfandTsetlinPattern.number_of_circles"]], "number_of_special_entries() (sage.combinat.gelfand_tsetlin_patterns.gelfandtsetlinpattern method)": [[116, "sage.combinat.gelfand_tsetlin_patterns.GelfandTsetlinPattern.number_of_special_entries"]], "pp() (sage.combinat.gelfand_tsetlin_patterns.gelfandtsetlinpattern method)": [[116, "sage.combinat.gelfand_tsetlin_patterns.GelfandTsetlinPattern.pp"]], "random_element() (sage.combinat.gelfand_tsetlin_patterns.gelfandtsetlinpatterns method)": [[116, "sage.combinat.gelfand_tsetlin_patterns.GelfandTsetlinPatterns.random_element"]], "random_element() (sage.combinat.gelfand_tsetlin_patterns.gelfandtsetlinpatternstoprow method)": [[116, "sage.combinat.gelfand_tsetlin_patterns.GelfandTsetlinPatternsTopRow.random_element"]], "row_sums() (sage.combinat.gelfand_tsetlin_patterns.gelfandtsetlinpattern method)": [[116, "sage.combinat.gelfand_tsetlin_patterns.GelfandTsetlinPattern.row_sums"]], "sage.combinat.gelfand_tsetlin_patterns": [[116, "module-sage.combinat.gelfand_tsetlin_patterns"]], "special_entries() (sage.combinat.gelfand_tsetlin_patterns.gelfandtsetlinpattern method)": [[116, "sage.combinat.gelfand_tsetlin_patterns.GelfandTsetlinPattern.special_entries"]], "to_tableau() (sage.combinat.gelfand_tsetlin_patterns.gelfandtsetlinpattern method)": [[116, "sage.combinat.gelfand_tsetlin_patterns.GelfandTsetlinPattern.to_tableau"]], "top_row() (sage.combinat.gelfand_tsetlin_patterns.gelfandtsetlinpatternstoprow method)": [[116, "sage.combinat.gelfand_tsetlin_patterns.GelfandTsetlinPatternsTopRow.top_row"]], "weight() (sage.combinat.gelfand_tsetlin_patterns.gelfandtsetlinpattern method)": [[116, "sage.combinat.gelfand_tsetlin_patterns.GelfandTsetlinPattern.weight"]], "graphpaths() (in module sage.combinat.graph_path)": [[117, "sage.combinat.graph_path.GraphPaths"]], "graphpaths_all (class in sage.combinat.graph_path)": [[117, "sage.combinat.graph_path.GraphPaths_all"]], "graphpaths_common (class in sage.combinat.graph_path)": [[117, "sage.combinat.graph_path.GraphPaths_common"]], "graphpaths_s (class in sage.combinat.graph_path)": [[117, "sage.combinat.graph_path.GraphPaths_s"]], "graphpaths_st (class in sage.combinat.graph_path)": [[117, "sage.combinat.graph_path.GraphPaths_st"]], "graphpaths_t (class in sage.combinat.graph_path)": [[117, "sage.combinat.graph_path.GraphPaths_t"]], "incoming_edges() (sage.combinat.graph_path.graphpaths_common method)": [[117, "sage.combinat.graph_path.GraphPaths_common.incoming_edges"]], "incoming_paths() (sage.combinat.graph_path.graphpaths_common method)": [[117, "sage.combinat.graph_path.GraphPaths_common.incoming_paths"]], "list() (sage.combinat.graph_path.graphpaths_all method)": [[117, "sage.combinat.graph_path.GraphPaths_all.list"]], "list() (sage.combinat.graph_path.graphpaths_s method)": [[117, "sage.combinat.graph_path.GraphPaths_s.list"]], "list() (sage.combinat.graph_path.graphpaths_st method)": [[117, "sage.combinat.graph_path.GraphPaths_st.list"]], "list() (sage.combinat.graph_path.graphpaths_t method)": [[117, "sage.combinat.graph_path.GraphPaths_t.list"]], "outgoing_edges() (sage.combinat.graph_path.graphpaths_common method)": [[117, "sage.combinat.graph_path.GraphPaths_common.outgoing_edges"]], "outgoing_paths() (sage.combinat.graph_path.graphpaths_common method)": [[117, "sage.combinat.graph_path.GraphPaths_common.outgoing_paths"]], "paths() (sage.combinat.graph_path.graphpaths_common method)": [[117, "sage.combinat.graph_path.GraphPaths_common.paths"]], "paths_from_source_to_target() (sage.combinat.graph_path.graphpaths_common method)": [[117, "sage.combinat.graph_path.GraphPaths_common.paths_from_source_to_target"]], "sage.combinat.graph_path": [[117, "module-sage.combinat.graph_path"]], "combinations() (in module sage.combinat.gray_codes)": [[118, "sage.combinat.gray_codes.combinations"]], "product() (in module sage.combinat.gray_codes)": [[118, "sage.combinat.gray_codes.product"]], "sage.combinat.gray_codes": [[118, "module-sage.combinat.gray_codes"]], "grossmanlarsonalgebra (class in sage.combinat.grossman_larson_algebras)": [[119, "sage.combinat.grossman_larson_algebras.GrossmanLarsonAlgebra"]], "an_element() (sage.combinat.grossman_larson_algebras.grossmanlarsonalgebra method)": [[119, "sage.combinat.grossman_larson_algebras.GrossmanLarsonAlgebra.an_element"]], "antipode_on_basis() (sage.combinat.grossman_larson_algebras.grossmanlarsonalgebra method)": [[119, "sage.combinat.grossman_larson_algebras.GrossmanLarsonAlgebra.antipode_on_basis"]], "change_ring() (sage.combinat.grossman_larson_algebras.grossmanlarsonalgebra method)": [[119, "sage.combinat.grossman_larson_algebras.GrossmanLarsonAlgebra.change_ring"]], "coproduct_on_basis() (sage.combinat.grossman_larson_algebras.grossmanlarsonalgebra method)": [[119, "sage.combinat.grossman_larson_algebras.GrossmanLarsonAlgebra.coproduct_on_basis"]], "counit_on_basis() (sage.combinat.grossman_larson_algebras.grossmanlarsonalgebra method)": [[119, "sage.combinat.grossman_larson_algebras.GrossmanLarsonAlgebra.counit_on_basis"]], "degree_on_basis() (sage.combinat.grossman_larson_algebras.grossmanlarsonalgebra method)": [[119, "sage.combinat.grossman_larson_algebras.GrossmanLarsonAlgebra.degree_on_basis"]], "one_basis() (sage.combinat.grossman_larson_algebras.grossmanlarsonalgebra method)": [[119, "sage.combinat.grossman_larson_algebras.GrossmanLarsonAlgebra.one_basis"]], "product_on_basis() (sage.combinat.grossman_larson_algebras.grossmanlarsonalgebra method)": [[119, "sage.combinat.grossman_larson_algebras.GrossmanLarsonAlgebra.product_on_basis"]], "sage.combinat.grossman_larson_algebras": [[119, "module-sage.combinat.grossman_larson_algebras"]], "single_vertex() (sage.combinat.grossman_larson_algebras.grossmanlarsonalgebra method)": [[119, "sage.combinat.grossman_larson_algebras.GrossmanLarsonAlgebra.single_vertex"]], "single_vertex_all() (sage.combinat.grossman_larson_algebras.grossmanlarsonalgebra method)": [[119, "sage.combinat.grossman_larson_algebras.GrossmanLarsonAlgebra.single_vertex_all"]], "some_elements() (sage.combinat.grossman_larson_algebras.grossmanlarsonalgebra method)": [[119, "sage.combinat.grossman_larson_algebras.GrossmanLarsonAlgebra.some_elements"]], "variable_names() (sage.combinat.grossman_larson_algebras.grossmanlarsonalgebra method)": [[119, "sage.combinat.grossman_larson_algebras.GrossmanLarsonAlgebra.variable_names"]], "binaryword (sage.combinat.growth.rules attribute)": [[120, "sage.combinat.growth.Rules.BinaryWord"]], "burge (sage.combinat.growth.rules attribute)": [[120, "sage.combinat.growth.Rules.Burge"]], "domino (sage.combinat.growth.rules attribute)": [[120, "sage.combinat.growth.Rules.Domino"]], "growthdiagram (class in sage.combinat.growth)": [[120, "sage.combinat.growth.GrowthDiagram"]], "llms (sage.combinat.growth.rules attribute)": [[120, "sage.combinat.growth.Rules.LLMS"]], "p_chain() (sage.combinat.growth.growthdiagram method)": [[120, "sage.combinat.growth.GrowthDiagram.P_chain"]], "p_graph() (sage.combinat.growth.rule method)": [[120, "sage.combinat.growth.Rule.P_graph"]], "p_symbol() (sage.combinat.growth.growthdiagram method)": [[120, "sage.combinat.growth.GrowthDiagram.P_symbol"]], "p_symbol() (sage.combinat.growth.ruledomino method)": [[120, "sage.combinat.growth.RuleDomino.P_symbol"]], "p_symbol() (sage.combinat.growth.rulellms method)": [[120, "sage.combinat.growth.RuleLLMS.P_symbol"]], "p_symbol() (sage.combinat.growth.rulepartitions method)": [[120, "sage.combinat.growth.RulePartitions.P_symbol"]], "p_symbol() (sage.combinat.growth.ruleshiftedshapes method)": [[120, "sage.combinat.growth.RuleShiftedShapes.P_symbol"]], "p_symbol() (sage.combinat.growth.rulesylvester method)": [[120, "sage.combinat.growth.RuleSylvester.P_symbol"]], "q_chain() (sage.combinat.growth.growthdiagram method)": [[120, "sage.combinat.growth.GrowthDiagram.Q_chain"]], "q_graph() (sage.combinat.growth.rule method)": [[120, "sage.combinat.growth.Rule.Q_graph"]], "q_symbol() (sage.combinat.growth.growthdiagram method)": [[120, "sage.combinat.growth.GrowthDiagram.Q_symbol"]], "q_symbol() (sage.combinat.growth.ruledomino method)": [[120, "sage.combinat.growth.RuleDomino.Q_symbol"]], "q_symbol() (sage.combinat.growth.rulellms method)": [[120, "sage.combinat.growth.RuleLLMS.Q_symbol"]], "q_symbol() (sage.combinat.growth.rulepartitions method)": [[120, "sage.combinat.growth.RulePartitions.Q_symbol"]], "q_symbol() (sage.combinat.growth.ruleshiftedshapes method)": [[120, "sage.combinat.growth.RuleShiftedShapes.Q_symbol"]], "q_symbol() (sage.combinat.growth.rulesylvester method)": [[120, "sage.combinat.growth.RuleSylvester.Q_symbol"]], "rsk (sage.combinat.growth.rules attribute)": [[120, "sage.combinat.growth.Rules.RSK"]], "rule (class in sage.combinat.growth)": [[120, "sage.combinat.growth.Rule"]], "rulebinaryword (class in sage.combinat.growth)": [[120, "sage.combinat.growth.RuleBinaryWord"]], "ruleburge (class in sage.combinat.growth)": [[120, "sage.combinat.growth.RuleBurge"]], "ruledomino (class in sage.combinat.growth)": [[120, "sage.combinat.growth.RuleDomino"]], "rulellms (class in sage.combinat.growth)": [[120, "sage.combinat.growth.RuleLLMS"]], "rulepartitions (class in sage.combinat.growth)": [[120, "sage.combinat.growth.RulePartitions"]], "rulersk (class in sage.combinat.growth)": [[120, "sage.combinat.growth.RuleRSK"]], "ruleshiftedshapes (class in sage.combinat.growth)": [[120, "sage.combinat.growth.RuleShiftedShapes"]], "rulesylvester (class in sage.combinat.growth)": [[120, "sage.combinat.growth.RuleSylvester"]], "ruleyoungfibonacci (class in sage.combinat.growth)": [[120, "sage.combinat.growth.RuleYoungFibonacci"]], "rules (class in sage.combinat.growth)": [[120, "sage.combinat.growth.Rules"]], "shiftedshapes (sage.combinat.growth.rules attribute)": [[120, "sage.combinat.growth.Rules.ShiftedShapes"]], "sylvester (sage.combinat.growth.rules attribute)": [[120, "sage.combinat.growth.Rules.Sylvester"]], "youngfibonacci (sage.combinat.growth.rules attribute)": [[120, "sage.combinat.growth.Rules.YoungFibonacci"]], "backward_rule() (sage.combinat.growth.rulebinaryword method)": [[120, "sage.combinat.growth.RuleBinaryWord.backward_rule"]], "backward_rule() (sage.combinat.growth.ruleburge method)": [[120, "sage.combinat.growth.RuleBurge.backward_rule"]], "backward_rule() (sage.combinat.growth.rulersk method)": [[120, "sage.combinat.growth.RuleRSK.backward_rule"]], "backward_rule() (sage.combinat.growth.ruleshiftedshapes method)": [[120, "sage.combinat.growth.RuleShiftedShapes.backward_rule"]], "backward_rule() (sage.combinat.growth.rulesylvester method)": [[120, "sage.combinat.growth.RuleSylvester.backward_rule"]], "backward_rule() (sage.combinat.growth.ruleyoungfibonacci method)": [[120, "sage.combinat.growth.RuleYoungFibonacci.backward_rule"]], "conjugate() (sage.combinat.growth.growthdiagram method)": [[120, "sage.combinat.growth.GrowthDiagram.conjugate"]], "filling() (sage.combinat.growth.growthdiagram method)": [[120, "sage.combinat.growth.GrowthDiagram.filling"]], "forward_rule() (sage.combinat.growth.rulebinaryword method)": [[120, "sage.combinat.growth.RuleBinaryWord.forward_rule"]], "forward_rule() (sage.combinat.growth.ruleburge method)": [[120, "sage.combinat.growth.RuleBurge.forward_rule"]], "forward_rule() (sage.combinat.growth.ruledomino method)": [[120, "sage.combinat.growth.RuleDomino.forward_rule"]], "forward_rule() (sage.combinat.growth.rulellms method)": [[120, "sage.combinat.growth.RuleLLMS.forward_rule"]], "forward_rule() (sage.combinat.growth.rulersk method)": [[120, "sage.combinat.growth.RuleRSK.forward_rule"]], "forward_rule() (sage.combinat.growth.ruleshiftedshapes method)": [[120, "sage.combinat.growth.RuleShiftedShapes.forward_rule"]], "forward_rule() (sage.combinat.growth.rulesylvester method)": [[120, "sage.combinat.growth.RuleSylvester.forward_rule"]], "forward_rule() (sage.combinat.growth.ruleyoungfibonacci method)": [[120, "sage.combinat.growth.RuleYoungFibonacci.forward_rule"]], "half_perimeter() (sage.combinat.growth.growthdiagram method)": [[120, "sage.combinat.growth.GrowthDiagram.half_perimeter"]], "has_multiple_edges (sage.combinat.growth.rule attribute)": [[120, "sage.combinat.growth.Rule.has_multiple_edges"]], "has_multiple_edges (sage.combinat.growth.rulellms attribute)": [[120, "sage.combinat.growth.RuleLLMS.has_multiple_edges"]], "has_multiple_edges (sage.combinat.growth.ruleshiftedshapes attribute)": [[120, "sage.combinat.growth.RuleShiftedShapes.has_multiple_edges"]], "in_labels() (sage.combinat.growth.growthdiagram method)": [[120, "sage.combinat.growth.GrowthDiagram.in_labels"]], "is_p_edge() (sage.combinat.growth.rulebinaryword method)": [[120, "sage.combinat.growth.RuleBinaryWord.is_P_edge"]], "is_p_edge() (sage.combinat.growth.ruledomino method)": [[120, "sage.combinat.growth.RuleDomino.is_P_edge"]], "is_p_edge() (sage.combinat.growth.rulellms method)": [[120, "sage.combinat.growth.RuleLLMS.is_P_edge"]], "is_p_edge() (sage.combinat.growth.ruleshiftedshapes method)": [[120, "sage.combinat.growth.RuleShiftedShapes.is_P_edge"]], "is_p_edge() (sage.combinat.growth.rulesylvester method)": [[120, "sage.combinat.growth.RuleSylvester.is_P_edge"]], "is_p_edge() (sage.combinat.growth.ruleyoungfibonacci method)": [[120, "sage.combinat.growth.RuleYoungFibonacci.is_P_edge"]], "is_q_edge() (sage.combinat.growth.rulebinaryword method)": [[120, "sage.combinat.growth.RuleBinaryWord.is_Q_edge"]], "is_q_edge() (sage.combinat.growth.ruledomino method)": [[120, "sage.combinat.growth.RuleDomino.is_Q_edge"]], "is_q_edge() (sage.combinat.growth.rulellms method)": [[120, "sage.combinat.growth.RuleLLMS.is_Q_edge"]], "is_q_edge() (sage.combinat.growth.ruleshiftedshapes method)": [[120, "sage.combinat.growth.RuleShiftedShapes.is_Q_edge"]], "is_q_edge() (sage.combinat.growth.rulesylvester method)": [[120, "sage.combinat.growth.RuleSylvester.is_Q_edge"]], "is_q_edge() (sage.combinat.growth.ruleyoungfibonacci method)": [[120, "sage.combinat.growth.RuleYoungFibonacci.is_Q_edge"]], "is_rectangular() (sage.combinat.growth.growthdiagram method)": [[120, "sage.combinat.growth.GrowthDiagram.is_rectangular"]], "normalize_vertex() (sage.combinat.growth.rule method)": [[120, "sage.combinat.growth.Rule.normalize_vertex"]], "normalize_vertex() (sage.combinat.growth.rulebinaryword method)": [[120, "sage.combinat.growth.RuleBinaryWord.normalize_vertex"]], "normalize_vertex() (sage.combinat.growth.ruledomino method)": [[120, "sage.combinat.growth.RuleDomino.normalize_vertex"]], "normalize_vertex() (sage.combinat.growth.rulellms method)": [[120, "sage.combinat.growth.RuleLLMS.normalize_vertex"]], "normalize_vertex() (sage.combinat.growth.rulepartitions method)": [[120, "sage.combinat.growth.RulePartitions.normalize_vertex"]], "normalize_vertex() (sage.combinat.growth.ruleshiftedshapes method)": [[120, "sage.combinat.growth.RuleShiftedShapes.normalize_vertex"]], "normalize_vertex() (sage.combinat.growth.rulesylvester method)": [[120, "sage.combinat.growth.RuleSylvester.normalize_vertex"]], "normalize_vertex() (sage.combinat.growth.ruleyoungfibonacci method)": [[120, "sage.combinat.growth.RuleYoungFibonacci.normalize_vertex"]], "out_labels() (sage.combinat.growth.growthdiagram method)": [[120, "sage.combinat.growth.GrowthDiagram.out_labels"]], "r (sage.combinat.growth.rule attribute)": [[120, "sage.combinat.growth.Rule.r"]], "r (sage.combinat.growth.ruledomino attribute)": [[120, "sage.combinat.growth.RuleDomino.r"]], "rank() (sage.combinat.growth.rulebinaryword method)": [[120, "sage.combinat.growth.RuleBinaryWord.rank"]], "rank() (sage.combinat.growth.ruledomino method)": [[120, "sage.combinat.growth.RuleDomino.rank"]], "rank() (sage.combinat.growth.rulellms method)": [[120, "sage.combinat.growth.RuleLLMS.rank"]], "rank() (sage.combinat.growth.rulepartitions method)": [[120, "sage.combinat.growth.RulePartitions.rank"]], "rank() (sage.combinat.growth.ruleshiftedshapes method)": [[120, "sage.combinat.growth.RuleShiftedShapes.rank"]], "rank() (sage.combinat.growth.rulesylvester method)": [[120, "sage.combinat.growth.RuleSylvester.rank"]], "rank() (sage.combinat.growth.ruleyoungfibonacci method)": [[120, "sage.combinat.growth.RuleYoungFibonacci.rank"]], "rotate() (sage.combinat.growth.growthdiagram method)": [[120, "sage.combinat.growth.GrowthDiagram.rotate"]], "rules (sage.combinat.growth.growthdiagram attribute)": [[120, "sage.combinat.growth.GrowthDiagram.rules"]], "sage.combinat.growth": [[120, "module-sage.combinat.growth"]], "shape() (sage.combinat.growth.growthdiagram method)": [[120, "sage.combinat.growth.GrowthDiagram.shape"]], "to_biword() (sage.combinat.growth.growthdiagram method)": [[120, "sage.combinat.growth.GrowthDiagram.to_biword"]], "to_word() (sage.combinat.growth.growthdiagram method)": [[120, "sage.combinat.growth.GrowthDiagram.to_word"]], "vertices() (sage.combinat.growth.rulebinaryword method)": [[120, "sage.combinat.growth.RuleBinaryWord.vertices"]], "vertices() (sage.combinat.growth.ruledomino method)": [[120, "sage.combinat.growth.RuleDomino.vertices"]], "vertices() (sage.combinat.growth.rulellms method)": [[120, "sage.combinat.growth.RuleLLMS.vertices"]], "vertices() (sage.combinat.growth.rulepartitions method)": [[120, "sage.combinat.growth.RulePartitions.vertices"]], "vertices() (sage.combinat.growth.ruleshiftedshapes method)": [[120, "sage.combinat.growth.RuleShiftedShapes.vertices"]], "vertices() (sage.combinat.growth.rulesylvester method)": [[120, "sage.combinat.growth.RuleSylvester.vertices"]], "vertices() (sage.combinat.growth.ruleyoungfibonacci method)": [[120, "sage.combinat.growth.RuleYoungFibonacci.vertices"]], "zero (sage.combinat.growth.rulebinaryword attribute)": [[120, "sage.combinat.growth.RuleBinaryWord.zero"]], "zero (sage.combinat.growth.ruledomino attribute)": [[120, "sage.combinat.growth.RuleDomino.zero"]], "zero (sage.combinat.growth.rulepartitions attribute)": [[120, "sage.combinat.growth.RulePartitions.zero"]], "zero (sage.combinat.growth.ruleshiftedshapes attribute)": [[120, "sage.combinat.growth.RuleShiftedShapes.zero"]], "zero (sage.combinat.growth.rulesylvester attribute)": [[120, "sage.combinat.growth.RuleSylvester.zero"]], "zero (sage.combinat.growth.ruleyoungfibonacci attribute)": [[120, "sage.combinat.growth.RuleYoungFibonacci.zero"]], "zero_edge (sage.combinat.growth.rule attribute)": [[120, "sage.combinat.growth.Rule.zero_edge"]], "zero_edge (sage.combinat.growth.rulellms attribute)": [[120, "sage.combinat.growth.RuleLLMS.zero_edge"]], "hall_polynomial() (in module sage.combinat.hall_polynomial)": [[121, "sage.combinat.hall_polynomial.hall_polynomial"]], "sage.combinat.hall_polynomial": [[121, "module-sage.combinat.hall_polynomial"]], "element (sage.combinat.hillman_grassl.weakreverseplanepartitions attribute)": [[122, "sage.combinat.hillman_grassl.WeakReversePlanePartitions.Element"]], "weakreverseplanepartition (class in sage.combinat.hillman_grassl)": [[122, "sage.combinat.hillman_grassl.WeakReversePlanePartition"]], "weakreverseplanepartitions (class in sage.combinat.hillman_grassl)": [[122, "sage.combinat.hillman_grassl.WeakReversePlanePartitions"]], "an_element() (sage.combinat.hillman_grassl.weakreverseplanepartitions method)": [[122, "sage.combinat.hillman_grassl.WeakReversePlanePartitions.an_element"]], "conjugate() (sage.combinat.hillman_grassl.weakreverseplanepartition method)": [[122, "sage.combinat.hillman_grassl.WeakReversePlanePartition.conjugate"]], "hillman_grassl() (in module sage.combinat.hillman_grassl)": [[122, "sage.combinat.hillman_grassl.hillman_grassl"]], "hillman_grassl_inverse() (in module sage.combinat.hillman_grassl)": [[122, "sage.combinat.hillman_grassl.hillman_grassl_inverse"]], "hillman_grassl_inverse() (sage.combinat.hillman_grassl.weakreverseplanepartition method)": [[122, "sage.combinat.hillman_grassl.WeakReversePlanePartition.hillman_grassl_inverse"]], "pak_correspondence() (in module sage.combinat.hillman_grassl)": [[122, "sage.combinat.hillman_grassl.pak_correspondence"]], "pak_correspondence() (sage.combinat.hillman_grassl.weakreverseplanepartition method)": [[122, "sage.combinat.hillman_grassl.WeakReversePlanePartition.pak_correspondence"]], "sage.combinat.hillman_grassl": [[122, "module-sage.combinat.hillman_grassl"]], "sulzgruber_correspondence() (in module sage.combinat.hillman_grassl)": [[122, "sage.combinat.hillman_grassl.sulzgruber_correspondence"]], "transpose() (in module sage.combinat.hillman_grassl)": [[122, "sage.combinat.hillman_grassl.transpose"]], "envelope (class in sage.combinat.integer_lists.base)": [[123, "sage.combinat.integer_lists.base.Envelope"]], "integerlistsbackend (class in sage.combinat.integer_lists.base)": [[123, "sage.combinat.integer_lists.base.IntegerListsBackend"]], "adapt() (sage.combinat.integer_lists.base.envelope method)": [[123, "sage.combinat.integer_lists.base.Envelope.adapt"]], "ceiling (sage.combinat.integer_lists.base.integerlistsbackend attribute)": [[123, "sage.combinat.integer_lists.base.IntegerListsBackend.ceiling"]], "floor (sage.combinat.integer_lists.base.integerlistsbackend attribute)": [[123, "sage.combinat.integer_lists.base.IntegerListsBackend.floor"]], "limit() (sage.combinat.integer_lists.base.envelope method)": [[123, "sage.combinat.integer_lists.base.Envelope.limit"]], "limit_start() (sage.combinat.integer_lists.base.envelope method)": [[123, "sage.combinat.integer_lists.base.Envelope.limit_start"]], "max_length (sage.combinat.integer_lists.base.integerlistsbackend attribute)": [[123, "sage.combinat.integer_lists.base.IntegerListsBackend.max_length"]], "max_part (sage.combinat.integer_lists.base.envelope attribute)": [[123, "sage.combinat.integer_lists.base.Envelope.max_part"]], "max_part (sage.combinat.integer_lists.base.integerlistsbackend attribute)": [[123, "sage.combinat.integer_lists.base.IntegerListsBackend.max_part"]], "max_slope (sage.combinat.integer_lists.base.envelope attribute)": [[123, "sage.combinat.integer_lists.base.Envelope.max_slope"]], "max_slope (sage.combinat.integer_lists.base.integerlistsbackend attribute)": [[123, "sage.combinat.integer_lists.base.IntegerListsBackend.max_slope"]], "max_sum (sage.combinat.integer_lists.base.integerlistsbackend attribute)": [[123, "sage.combinat.integer_lists.base.IntegerListsBackend.max_sum"]], "min_length (sage.combinat.integer_lists.base.integerlistsbackend attribute)": [[123, "sage.combinat.integer_lists.base.IntegerListsBackend.min_length"]], "min_part (sage.combinat.integer_lists.base.integerlistsbackend attribute)": [[123, "sage.combinat.integer_lists.base.IntegerListsBackend.min_part"]], "min_slope (sage.combinat.integer_lists.base.envelope attribute)": [[123, "sage.combinat.integer_lists.base.Envelope.min_slope"]], "min_slope (sage.combinat.integer_lists.base.integerlistsbackend attribute)": [[123, "sage.combinat.integer_lists.base.IntegerListsBackend.min_slope"]], "min_sum (sage.combinat.integer_lists.base.integerlistsbackend attribute)": [[123, "sage.combinat.integer_lists.base.IntegerListsBackend.min_sum"]], "sage.combinat.integer_lists.base": [[123, "module-sage.combinat.integer_lists.base"]], "sign (sage.combinat.integer_lists.base.envelope attribute)": [[123, "sage.combinat.integer_lists.base.Envelope.sign"]], "integerlistsbackend_invlex (class in sage.combinat.integer_lists.invlex)": [[124, "sage.combinat.integer_lists.invlex.IntegerListsBackend_invlex"]], "integerlistslex (class in sage.combinat.integer_lists.invlex)": [[124, "sage.combinat.integer_lists.invlex.IntegerListsLex"]], "integerlistslexiter (class in sage.combinat.integer_lists.invlex)": [[124, "sage.combinat.integer_lists.invlex.IntegerListsLexIter"]], "backend_class (sage.combinat.integer_lists.invlex.integerlistslex attribute)": [[124, "sage.combinat.integer_lists.invlex.IntegerListsLex.backend_class"]], "check (sage.combinat.integer_lists.invlex.integerlistsbackend_invlex attribute)": [[124, "sage.combinat.integer_lists.invlex.IntegerListsBackend_invlex.check"]], "sage.combinat.integer_lists.invlex": [[124, "module-sage.combinat.integer_lists.invlex"]], "element (sage.combinat.integer_lists.lists.integerlists attribute)": [[125, "sage.combinat.integer_lists.lists.IntegerLists.Element"]], "integerlist (class in sage.combinat.integer_lists.lists)": [[125, "sage.combinat.integer_lists.lists.IntegerList"]], "integerlists (class in sage.combinat.integer_lists.lists)": [[125, "sage.combinat.integer_lists.lists.IntegerLists"]], "backend (sage.combinat.integer_lists.lists.integerlists attribute)": [[125, "sage.combinat.integer_lists.lists.IntegerLists.backend"]], "backend_class (sage.combinat.integer_lists.lists.integerlists attribute)": [[125, "sage.combinat.integer_lists.lists.IntegerLists.backend_class"]], "check() (sage.combinat.integer_lists.lists.integerlist method)": [[125, "sage.combinat.integer_lists.lists.IntegerList.check"]], "sage.combinat.integer_lists.lists": [[125, "module-sage.combinat.integer_lists.lists"]], "integermatrices (class in sage.combinat.integer_matrices)": [[126, "sage.combinat.integer_matrices.IntegerMatrices"]], "cardinality() (sage.combinat.integer_matrices.integermatrices method)": [[126, "sage.combinat.integer_matrices.IntegerMatrices.cardinality"]], "column_sums() (sage.combinat.integer_matrices.integermatrices method)": [[126, "sage.combinat.integer_matrices.IntegerMatrices.column_sums"]], "integer_matrices_generator() (in module sage.combinat.integer_matrices)": [[126, "sage.combinat.integer_matrices.integer_matrices_generator"]], "row_sums() (sage.combinat.integer_matrices.integermatrices method)": [[126, "sage.combinat.integer_matrices.IntegerMatrices.row_sums"]], "sage.combinat.integer_matrices": [[126, "module-sage.combinat.integer_matrices"]], "to_composition() (sage.combinat.integer_matrices.integermatrices method)": [[126, "sage.combinat.integer_matrices.IntegerMatrices.to_composition"]], "element (sage.combinat.integer_vector.integervectors attribute)": [[127, "sage.combinat.integer_vector.IntegerVectors.Element"]], "integervector (class in sage.combinat.integer_vector)": [[127, "sage.combinat.integer_vector.IntegerVector"]], "integervectors (class in sage.combinat.integer_vector)": [[127, "sage.combinat.integer_vector.IntegerVectors"]], "integervectorsconstraints (class in sage.combinat.integer_vector)": [[127, "sage.combinat.integer_vector.IntegerVectorsConstraints"]], "integervectors_all (class in sage.combinat.integer_vector)": [[127, "sage.combinat.integer_vector.IntegerVectors_all"]], "integervectors_k (class in sage.combinat.integer_vector)": [[127, "sage.combinat.integer_vector.IntegerVectors_k"]], "integervectors_n (class in sage.combinat.integer_vector)": [[127, "sage.combinat.integer_vector.IntegerVectors_n"]], "integervectors_nk (class in sage.combinat.integer_vector)": [[127, "sage.combinat.integer_vector.IntegerVectors_nk"]], "integervectors_nnondescents (class in sage.combinat.integer_vector)": [[127, "sage.combinat.integer_vector.IntegerVectors_nnondescents"]], "cardinality() (sage.combinat.integer_vector.integervectorsconstraints method)": [[127, "sage.combinat.integer_vector.IntegerVectorsConstraints.cardinality"]], "check() (sage.combinat.integer_vector.integervector method)": [[127, "sage.combinat.integer_vector.IntegerVector.check"]], "gale_ryser_theorem() (in module sage.combinat.integer_vector)": [[127, "sage.combinat.integer_vector.gale_ryser_theorem"]], "integer_vectors_nk_fast_iter() (in module sage.combinat.integer_vector)": [[127, "sage.combinat.integer_vector.integer_vectors_nk_fast_iter"]], "is_gale_ryser() (in module sage.combinat.integer_vector)": [[127, "sage.combinat.integer_vector.is_gale_ryser"]], "list2func() (in module sage.combinat.integer_vector)": [[127, "sage.combinat.integer_vector.list2func"]], "rank() (sage.combinat.integer_vector.integervectors_nk method)": [[127, "sage.combinat.integer_vector.IntegerVectors_nk.rank"]], "sage.combinat.integer_vector": [[127, "module-sage.combinat.integer_vector"]], "specht_module() (sage.combinat.integer_vector.integervector method)": [[127, "sage.combinat.integer_vector.IntegerVector.specht_module"]], "specht_module_dimension() (sage.combinat.integer_vector.integervector method)": [[127, "sage.combinat.integer_vector.IntegerVector.specht_module_dimension"]], "trim() (sage.combinat.integer_vector.integervector method)": [[127, "sage.combinat.integer_vector.IntegerVector.trim"]], "element (sage.combinat.integer_vector_weighted.weightedintegervectors attribute)": [[128, "sage.combinat.integer_vector_weighted.WeightedIntegerVectors.Element"]], "weightedintegervectors (class in sage.combinat.integer_vector_weighted)": [[128, "sage.combinat.integer_vector_weighted.WeightedIntegerVectors"]], "weightedintegervectors_all (class in sage.combinat.integer_vector_weighted)": [[128, "sage.combinat.integer_vector_weighted.WeightedIntegerVectors_all"]], "grading() (sage.combinat.integer_vector_weighted.weightedintegervectors_all method)": [[128, "sage.combinat.integer_vector_weighted.WeightedIntegerVectors_all.grading"]], "iterator_fast() (in module sage.combinat.integer_vector_weighted)": [[128, "sage.combinat.integer_vector_weighted.iterator_fast"]], "sage.combinat.integer_vector_weighted": [[128, "module-sage.combinat.integer_vector_weighted"]], "subset() (sage.combinat.integer_vector_weighted.weightedintegervectors_all method)": [[128, "sage.combinat.integer_vector_weighted.WeightedIntegerVectors_all.subset"]], "integervectorsmodpermutationgroup (class in sage.combinat.integer_vectors_mod_permgroup)": [[129, "sage.combinat.integer_vectors_mod_permgroup.IntegerVectorsModPermutationGroup"]], "integervectorsmodpermutationgroup_all (class in sage.combinat.integer_vectors_mod_permgroup)": [[129, "sage.combinat.integer_vectors_mod_permgroup.IntegerVectorsModPermutationGroup_All"]], "integervectorsmodpermutationgroup_all.element (class in sage.combinat.integer_vectors_mod_permgroup)": [[129, "sage.combinat.integer_vectors_mod_permgroup.IntegerVectorsModPermutationGroup_All.Element"]], "integervectorsmodpermutationgroup_with_constraints (class in sage.combinat.integer_vectors_mod_permgroup)": [[129, "sage.combinat.integer_vectors_mod_permgroup.IntegerVectorsModPermutationGroup_with_constraints"]], "integervectorsmodpermutationgroup_with_constraints.element (class in sage.combinat.integer_vectors_mod_permgroup)": [[129, "sage.combinat.integer_vectors_mod_permgroup.IntegerVectorsModPermutationGroup_with_constraints.Element"]], "ambient() (sage.combinat.integer_vectors_mod_permgroup.integervectorsmodpermutationgroup_all method)": [[129, "sage.combinat.integer_vectors_mod_permgroup.IntegerVectorsModPermutationGroup_All.ambient"]], "ambient() (sage.combinat.integer_vectors_mod_permgroup.integervectorsmodpermutationgroup_with_constraints method)": [[129, "sage.combinat.integer_vectors_mod_permgroup.IntegerVectorsModPermutationGroup_with_constraints.ambient"]], "an_element() (sage.combinat.integer_vectors_mod_permgroup.integervectorsmodpermutationgroup_with_constraints method)": [[129, "sage.combinat.integer_vectors_mod_permgroup.IntegerVectorsModPermutationGroup_with_constraints.an_element"]], "check() (sage.combinat.integer_vectors_mod_permgroup.integervectorsmodpermutationgroup_all.element method)": [[129, "sage.combinat.integer_vectors_mod_permgroup.IntegerVectorsModPermutationGroup_All.Element.check"]], "check() (sage.combinat.integer_vectors_mod_permgroup.integervectorsmodpermutationgroup_with_constraints.element method)": [[129, "sage.combinat.integer_vectors_mod_permgroup.IntegerVectorsModPermutationGroup_with_constraints.Element.check"]], "children() (sage.combinat.integer_vectors_mod_permgroup.integervectorsmodpermutationgroup_all method)": [[129, "sage.combinat.integer_vectors_mod_permgroup.IntegerVectorsModPermutationGroup_All.children"]], "children() (sage.combinat.integer_vectors_mod_permgroup.integervectorsmodpermutationgroup_with_constraints method)": [[129, "sage.combinat.integer_vectors_mod_permgroup.IntegerVectorsModPermutationGroup_with_constraints.children"]], "is_canonical() (sage.combinat.integer_vectors_mod_permgroup.integervectorsmodpermutationgroup_all method)": [[129, "sage.combinat.integer_vectors_mod_permgroup.IntegerVectorsModPermutationGroup_All.is_canonical"]], "is_canonical() (sage.combinat.integer_vectors_mod_permgroup.integervectorsmodpermutationgroup_with_constraints method)": [[129, "sage.combinat.integer_vectors_mod_permgroup.IntegerVectorsModPermutationGroup_with_constraints.is_canonical"]], "lift() (sage.combinat.integer_vectors_mod_permgroup.integervectorsmodpermutationgroup_all method)": [[129, "sage.combinat.integer_vectors_mod_permgroup.IntegerVectorsModPermutationGroup_All.lift"]], "lift() (sage.combinat.integer_vectors_mod_permgroup.integervectorsmodpermutationgroup_with_constraints method)": [[129, "sage.combinat.integer_vectors_mod_permgroup.IntegerVectorsModPermutationGroup_with_constraints.lift"]], "orbit() (sage.combinat.integer_vectors_mod_permgroup.integervectorsmodpermutationgroup_all method)": [[129, "sage.combinat.integer_vectors_mod_permgroup.IntegerVectorsModPermutationGroup_All.orbit"]], "orbit() (sage.combinat.integer_vectors_mod_permgroup.integervectorsmodpermutationgroup_with_constraints method)": [[129, "sage.combinat.integer_vectors_mod_permgroup.IntegerVectorsModPermutationGroup_with_constraints.orbit"]], "permutation_group() (sage.combinat.integer_vectors_mod_permgroup.integervectorsmodpermutationgroup_all method)": [[129, "sage.combinat.integer_vectors_mod_permgroup.IntegerVectorsModPermutationGroup_All.permutation_group"]], "permutation_group() (sage.combinat.integer_vectors_mod_permgroup.integervectorsmodpermutationgroup_with_constraints method)": [[129, "sage.combinat.integer_vectors_mod_permgroup.IntegerVectorsModPermutationGroup_with_constraints.permutation_group"]], "retract() (sage.combinat.integer_vectors_mod_permgroup.integervectorsmodpermutationgroup_all method)": [[129, "sage.combinat.integer_vectors_mod_permgroup.IntegerVectorsModPermutationGroup_All.retract"]], "retract() (sage.combinat.integer_vectors_mod_permgroup.integervectorsmodpermutationgroup_with_constraints method)": [[129, "sage.combinat.integer_vectors_mod_permgroup.IntegerVectorsModPermutationGroup_with_constraints.retract"]], "roots() (sage.combinat.integer_vectors_mod_permgroup.integervectorsmodpermutationgroup_all method)": [[129, "sage.combinat.integer_vectors_mod_permgroup.IntegerVectorsModPermutationGroup_All.roots"]], "roots() (sage.combinat.integer_vectors_mod_permgroup.integervectorsmodpermutationgroup_with_constraints method)": [[129, "sage.combinat.integer_vectors_mod_permgroup.IntegerVectorsModPermutationGroup_with_constraints.roots"]], "sage.combinat.integer_vectors_mod_permgroup": [[129, "module-sage.combinat.integer_vectors_mod_permgroup"]], "subset() (sage.combinat.integer_vectors_mod_permgroup.integervectorsmodpermutationgroup_all method)": [[129, "sage.combinat.integer_vectors_mod_permgroup.IntegerVectorsModPermutationGroup_All.subset"]], "element (sage.combinat.interval_posets.tamariintervalposets_all attribute)": [[130, "sage.combinat.interval_posets.TamariIntervalPosets_all.Element"]], "tip (in module sage.combinat.interval_posets)": [[130, "sage.combinat.interval_posets.TIP"]], "tamariintervalposet (class in sage.combinat.interval_posets)": [[130, "sage.combinat.interval_posets.TamariIntervalPoset"]], "tamariintervalposets (class in sage.combinat.interval_posets)": [[130, "sage.combinat.interval_posets.TamariIntervalPosets"]], "tamariintervalposets_all (class in sage.combinat.interval_posets)": [[130, "sage.combinat.interval_posets.TamariIntervalPosets_all"]], "tamariintervalposets_size (class in sage.combinat.interval_posets)": [[130, "sage.combinat.interval_posets.TamariIntervalPosets_size"]], "binary_trees() (sage.combinat.interval_posets.tamariintervalposet method)": [[130, "sage.combinat.interval_posets.TamariIntervalPoset.binary_trees"]], "cardinality() (sage.combinat.interval_posets.tamariintervalposets_size method)": [[130, "sage.combinat.interval_posets.TamariIntervalPosets_size.cardinality"]], "check_poset() (sage.combinat.interval_posets.tamariintervalposets static method)": [[130, "sage.combinat.interval_posets.TamariIntervalPosets.check_poset"]], "complement() (sage.combinat.interval_posets.tamariintervalposet method)": [[130, "sage.combinat.interval_posets.TamariIntervalPoset.complement"]], "contains_binary_tree() (sage.combinat.interval_posets.tamariintervalposet method)": [[130, "sage.combinat.interval_posets.TamariIntervalPoset.contains_binary_tree"]], "contains_dyck_word() (sage.combinat.interval_posets.tamariintervalposet method)": [[130, "sage.combinat.interval_posets.TamariIntervalPoset.contains_dyck_word"]], "contains_interval() (sage.combinat.interval_posets.tamariintervalposet method)": [[130, "sage.combinat.interval_posets.TamariIntervalPoset.contains_interval"]], "cubical_coordinates() (sage.combinat.interval_posets.tamariintervalposet method)": [[130, "sage.combinat.interval_posets.TamariIntervalPoset.cubical_coordinates"]], "decomposition_to_triple() (sage.combinat.interval_posets.tamariintervalposet method)": [[130, "sage.combinat.interval_posets.TamariIntervalPoset.decomposition_to_triple"]], "decreasing_children() (sage.combinat.interval_posets.tamariintervalposet method)": [[130, "sage.combinat.interval_posets.TamariIntervalPoset.decreasing_children"]], "decreasing_cover_relations() (sage.combinat.interval_posets.tamariintervalposet method)": [[130, "sage.combinat.interval_posets.TamariIntervalPoset.decreasing_cover_relations"]], "decreasing_parent() (sage.combinat.interval_posets.tamariintervalposet method)": [[130, "sage.combinat.interval_posets.TamariIntervalPoset.decreasing_parent"]], "decreasing_roots() (sage.combinat.interval_posets.tamariintervalposet method)": [[130, "sage.combinat.interval_posets.TamariIntervalPoset.decreasing_roots"]], "dyck_words() (sage.combinat.interval_posets.tamariintervalposet method)": [[130, "sage.combinat.interval_posets.TamariIntervalPoset.dyck_words"]], "element_class() (sage.combinat.interval_posets.tamariintervalposets_size method)": [[130, "sage.combinat.interval_posets.TamariIntervalPosets_size.element_class"]], "factor() (sage.combinat.interval_posets.tamariintervalposet method)": [[130, "sage.combinat.interval_posets.TamariIntervalPoset.factor"]], "final_forest() (sage.combinat.interval_posets.tamariintervalposet method)": [[130, "sage.combinat.interval_posets.TamariIntervalPoset.final_forest"]], "final_forest() (sage.combinat.interval_posets.tamariintervalposets static method)": [[130, "sage.combinat.interval_posets.TamariIntervalPosets.final_forest"]], "from_binary_trees() (sage.combinat.interval_posets.tamariintervalposets static method)": [[130, "sage.combinat.interval_posets.TamariIntervalPosets.from_binary_trees"]], "from_dyck_words() (sage.combinat.interval_posets.tamariintervalposets static method)": [[130, "sage.combinat.interval_posets.TamariIntervalPosets.from_dyck_words"]], "from_grafting_tree() (sage.combinat.interval_posets.tamariintervalposets static method)": [[130, "sage.combinat.interval_posets.TamariIntervalPosets.from_grafting_tree"]], "from_minimal_schnyder_wood() (sage.combinat.interval_posets.tamariintervalposets static method)": [[130, "sage.combinat.interval_posets.TamariIntervalPosets.from_minimal_schnyder_wood"]], "ge() (sage.combinat.interval_posets.tamariintervalposet method)": [[130, "sage.combinat.interval_posets.TamariIntervalPoset.ge"]], "grafting_tree() (sage.combinat.interval_posets.tamariintervalposet method)": [[130, "sage.combinat.interval_posets.TamariIntervalPoset.grafting_tree"]], "gt() (sage.combinat.interval_posets.tamariintervalposet method)": [[130, "sage.combinat.interval_posets.TamariIntervalPoset.gt"]], "increasing_children() (sage.combinat.interval_posets.tamariintervalposet method)": [[130, "sage.combinat.interval_posets.TamariIntervalPoset.increasing_children"]], "increasing_cover_relations() (sage.combinat.interval_posets.tamariintervalposet method)": [[130, "sage.combinat.interval_posets.TamariIntervalPoset.increasing_cover_relations"]], "increasing_parent() (sage.combinat.interval_posets.tamariintervalposet method)": [[130, "sage.combinat.interval_posets.TamariIntervalPoset.increasing_parent"]], "increasing_roots() (sage.combinat.interval_posets.tamariintervalposet method)": [[130, "sage.combinat.interval_posets.TamariIntervalPoset.increasing_roots"]], "initial_forest() (sage.combinat.interval_posets.tamariintervalposet method)": [[130, "sage.combinat.interval_posets.TamariIntervalPoset.initial_forest"]], "initial_forest() (sage.combinat.interval_posets.tamariintervalposets static method)": [[130, "sage.combinat.interval_posets.TamariIntervalPosets.initial_forest"]], "insertion() (sage.combinat.interval_posets.tamariintervalposet method)": [[130, "sage.combinat.interval_posets.TamariIntervalPoset.insertion"]], "intersection() (sage.combinat.interval_posets.tamariintervalposet method)": [[130, "sage.combinat.interval_posets.TamariIntervalPoset.intersection"]], "interval_cardinality() (sage.combinat.interval_posets.tamariintervalposet method)": [[130, "sage.combinat.interval_posets.TamariIntervalPoset.interval_cardinality"]], "is_connected() (sage.combinat.interval_posets.tamariintervalposet method)": [[130, "sage.combinat.interval_posets.TamariIntervalPoset.is_connected"]], "is_dexter() (sage.combinat.interval_posets.tamariintervalposet method)": [[130, "sage.combinat.interval_posets.TamariIntervalPoset.is_dexter"]], "is_exceptional() (sage.combinat.interval_posets.tamariintervalposet method)": [[130, "sage.combinat.interval_posets.TamariIntervalPoset.is_exceptional"]], "is_final_interval() (sage.combinat.interval_posets.tamariintervalposet method)": [[130, "sage.combinat.interval_posets.TamariIntervalPoset.is_final_interval"]], "is_indecomposable() (sage.combinat.interval_posets.tamariintervalposet method)": [[130, "sage.combinat.interval_posets.TamariIntervalPoset.is_indecomposable"]], "is_infinitely_modern() (sage.combinat.interval_posets.tamariintervalposet method)": [[130, "sage.combinat.interval_posets.TamariIntervalPoset.is_infinitely_modern"]], "is_initial_interval() (sage.combinat.interval_posets.tamariintervalposet method)": [[130, "sage.combinat.interval_posets.TamariIntervalPoset.is_initial_interval"]], "is_linear_extension() (sage.combinat.interval_posets.tamariintervalposet method)": [[130, "sage.combinat.interval_posets.TamariIntervalPoset.is_linear_extension"]], "is_modern() (sage.combinat.interval_posets.tamariintervalposet method)": [[130, "sage.combinat.interval_posets.TamariIntervalPoset.is_modern"]], "is_new() (sage.combinat.interval_posets.tamariintervalposet method)": [[130, "sage.combinat.interval_posets.TamariIntervalPoset.is_new"]], "is_simple() (sage.combinat.interval_posets.tamariintervalposet method)": [[130, "sage.combinat.interval_posets.TamariIntervalPoset.is_simple"]], "is_synchronized() (sage.combinat.interval_posets.tamariintervalposet method)": [[130, "sage.combinat.interval_posets.TamariIntervalPoset.is_synchronized"]], "latex_options() (sage.combinat.interval_posets.tamariintervalposet method)": [[130, "sage.combinat.interval_posets.TamariIntervalPoset.latex_options"]], "le() (sage.combinat.interval_posets.tamariintervalposet method)": [[130, "sage.combinat.interval_posets.TamariIntervalPoset.le"]], "le() (sage.combinat.interval_posets.tamariintervalposets method)": [[130, "sage.combinat.interval_posets.TamariIntervalPosets.le"]], "left_branch_involution() (sage.combinat.interval_posets.tamariintervalposet method)": [[130, "sage.combinat.interval_posets.TamariIntervalPoset.left_branch_involution"]], "linear_extensions() (sage.combinat.interval_posets.tamariintervalposet method)": [[130, "sage.combinat.interval_posets.TamariIntervalPoset.linear_extensions"]], "lower_binary_tree() (sage.combinat.interval_posets.tamariintervalposet method)": [[130, "sage.combinat.interval_posets.TamariIntervalPoset.lower_binary_tree"]], "lower_contained_intervals() (sage.combinat.interval_posets.tamariintervalposet method)": [[130, "sage.combinat.interval_posets.TamariIntervalPoset.lower_contained_intervals"]], "lower_contains_interval() (sage.combinat.interval_posets.tamariintervalposet method)": [[130, "sage.combinat.interval_posets.TamariIntervalPoset.lower_contains_interval"]], "lower_dyck_word() (sage.combinat.interval_posets.tamariintervalposet method)": [[130, "sage.combinat.interval_posets.TamariIntervalPoset.lower_dyck_word"]], "lt() (sage.combinat.interval_posets.tamariintervalposet method)": [[130, "sage.combinat.interval_posets.TamariIntervalPoset.lt"]], "max_linear_extension() (sage.combinat.interval_posets.tamariintervalposet method)": [[130, "sage.combinat.interval_posets.TamariIntervalPoset.max_linear_extension"]], "maximal_chain_binary_trees() (sage.combinat.interval_posets.tamariintervalposet method)": [[130, "sage.combinat.interval_posets.TamariIntervalPoset.maximal_chain_binary_trees"]], "maximal_chain_dyck_words() (sage.combinat.interval_posets.tamariintervalposet method)": [[130, "sage.combinat.interval_posets.TamariIntervalPoset.maximal_chain_dyck_words"]], "maximal_chain_tamari_intervals() (sage.combinat.interval_posets.tamariintervalposet method)": [[130, "sage.combinat.interval_posets.TamariIntervalPoset.maximal_chain_tamari_intervals"]], "min_linear_extension() (sage.combinat.interval_posets.tamariintervalposet method)": [[130, "sage.combinat.interval_posets.TamariIntervalPoset.min_linear_extension"]], "new_decomposition() (sage.combinat.interval_posets.tamariintervalposet method)": [[130, "sage.combinat.interval_posets.TamariIntervalPoset.new_decomposition"]], "number_of_new_components() (sage.combinat.interval_posets.tamariintervalposet method)": [[130, "sage.combinat.interval_posets.TamariIntervalPoset.number_of_new_components"]], "number_of_tamari_inversions() (sage.combinat.interval_posets.tamariintervalposet method)": [[130, "sage.combinat.interval_posets.TamariIntervalPoset.number_of_tamari_inversions"]], "one() (sage.combinat.interval_posets.tamariintervalposets_all method)": [[130, "sage.combinat.interval_posets.TamariIntervalPosets_all.one"]], "options (sage.combinat.interval_posets.tamariintervalposets attribute)": [[130, "sage.combinat.interval_posets.TamariIntervalPosets.options"]], "plot() (sage.combinat.interval_posets.tamariintervalposet method)": [[130, "sage.combinat.interval_posets.TamariIntervalPoset.plot"]], "poset() (sage.combinat.interval_posets.tamariintervalposet method)": [[130, "sage.combinat.interval_posets.TamariIntervalPoset.poset"]], "random_element() (sage.combinat.interval_posets.tamariintervalposets_size method)": [[130, "sage.combinat.interval_posets.TamariIntervalPosets_size.random_element"]], "recomposition_from_triple() (sage.combinat.interval_posets.tamariintervalposets static method)": [[130, "sage.combinat.interval_posets.TamariIntervalPosets.recomposition_from_triple"]], "rise_contact_involution() (sage.combinat.interval_posets.tamariintervalposet method)": [[130, "sage.combinat.interval_posets.TamariIntervalPoset.rise_contact_involution"]], "sage.combinat.interval_posets": [[130, "module-sage.combinat.interval_posets"]], "set_latex_options() (sage.combinat.interval_posets.tamariintervalposet method)": [[130, "sage.combinat.interval_posets.TamariIntervalPoset.set_latex_options"]], "size() (sage.combinat.interval_posets.tamariintervalposet method)": [[130, "sage.combinat.interval_posets.TamariIntervalPoset.size"]], "sub_poset() (sage.combinat.interval_posets.tamariintervalposet method)": [[130, "sage.combinat.interval_posets.TamariIntervalPoset.sub_poset"]], "subposet() (sage.combinat.interval_posets.tamariintervalposet method)": [[130, "sage.combinat.interval_posets.TamariIntervalPoset.subposet"]], "tamari_inversions() (sage.combinat.interval_posets.tamariintervalposet method)": [[130, "sage.combinat.interval_posets.TamariIntervalPoset.tamari_inversions"]], "tamari_inversions_iter() (sage.combinat.interval_posets.tamariintervalposet method)": [[130, "sage.combinat.interval_posets.TamariIntervalPoset.tamari_inversions_iter"]], "upper_binary_tree() (sage.combinat.interval_posets.tamariintervalposet method)": [[130, "sage.combinat.interval_posets.TamariIntervalPoset.upper_binary_tree"]], "upper_contains_interval() (sage.combinat.interval_posets.tamariintervalposet method)": [[130, "sage.combinat.interval_posets.TamariIntervalPoset.upper_contains_interval"]], "upper_dyck_word() (sage.combinat.interval_posets.tamariintervalposet method)": [[130, "sage.combinat.interval_posets.TamariIntervalPoset.upper_dyck_word"]], "element (sage.combinat.k_tableau.strongtableaux attribute)": [[131, "sage.combinat.k_tableau.StrongTableaux.Element"]], "element (sage.combinat.k_tableau.weaktableaux_bounded attribute)": [[131, "sage.combinat.k_tableau.WeakTableaux_bounded.Element"]], "element (sage.combinat.k_tableau.weaktableaux_core attribute)": [[131, "sage.combinat.k_tableau.WeakTableaux_core.Element"]], "element (sage.combinat.k_tableau.weaktableaux_factorized_permutation attribute)": [[131, "sage.combinat.k_tableau.WeakTableaux_factorized_permutation.Element"]], "strongtableau (class in sage.combinat.k_tableau)": [[131, "sage.combinat.k_tableau.StrongTableau"]], "strongtableaux (class in sage.combinat.k_tableau)": [[131, "sage.combinat.k_tableau.StrongTableaux"]], "weaktableau() (in module sage.combinat.k_tableau)": [[131, "sage.combinat.k_tableau.WeakTableau"]], "weaktableau_abstract (class in sage.combinat.k_tableau)": [[131, "sage.combinat.k_tableau.WeakTableau_abstract"]], "weaktableau_bounded (class in sage.combinat.k_tableau)": [[131, "sage.combinat.k_tableau.WeakTableau_bounded"]], "weaktableau_core (class in sage.combinat.k_tableau)": [[131, "sage.combinat.k_tableau.WeakTableau_core"]], "weaktableau_factorized_permutation (class in sage.combinat.k_tableau)": [[131, "sage.combinat.k_tableau.WeakTableau_factorized_permutation"]], "weaktableaux() (in module sage.combinat.k_tableau)": [[131, "sage.combinat.k_tableau.WeakTableaux"]], "weaktableaux_abstract (class in sage.combinat.k_tableau)": [[131, "sage.combinat.k_tableau.WeakTableaux_abstract"]], "weaktableaux_bounded (class in sage.combinat.k_tableau)": [[131, "sage.combinat.k_tableau.WeakTableaux_bounded"]], "weaktableaux_core (class in sage.combinat.k_tableau)": [[131, "sage.combinat.k_tableau.WeakTableaux_core"]], "weaktableaux_factorized_permutation (class in sage.combinat.k_tableau)": [[131, "sage.combinat.k_tableau.WeakTableaux_factorized_permutation"]], "add_marking() (sage.combinat.k_tableau.strongtableaux class method)": [[131, "sage.combinat.k_tableau.StrongTableaux.add_marking"]], "an_element() (sage.combinat.k_tableau.strongtableaux method)": [[131, "sage.combinat.k_tableau.StrongTableaux.an_element"]], "cell_of_highest_head() (sage.combinat.k_tableau.strongtableau method)": [[131, "sage.combinat.k_tableau.StrongTableau.cell_of_highest_head"]], "cell_of_marked_head() (sage.combinat.k_tableau.strongtableau method)": [[131, "sage.combinat.k_tableau.StrongTableau.cell_of_marked_head"]], "cells_head_dictionary() (sage.combinat.k_tableau.strongtableau method)": [[131, "sage.combinat.k_tableau.StrongTableau.cells_head_dictionary"]], "cells_head_dictionary() (sage.combinat.k_tableau.strongtableaux class method)": [[131, "sage.combinat.k_tableau.StrongTableaux.cells_head_dictionary"]], "cells_of_heads() (sage.combinat.k_tableau.strongtableau method)": [[131, "sage.combinat.k_tableau.StrongTableau.cells_of_heads"]], "cells_of_marked_ribbon() (sage.combinat.k_tableau.strongtableau method)": [[131, "sage.combinat.k_tableau.StrongTableau.cells_of_marked_ribbon"]], "check() (sage.combinat.k_tableau.strongtableau method)": [[131, "sage.combinat.k_tableau.StrongTableau.check"]], "check() (sage.combinat.k_tableau.weaktableau_bounded method)": [[131, "sage.combinat.k_tableau.WeakTableau_bounded.check"]], "check() (sage.combinat.k_tableau.weaktableau_core method)": [[131, "sage.combinat.k_tableau.WeakTableau_core.check"]], "check() (sage.combinat.k_tableau.weaktableau_factorized_permutation method)": [[131, "sage.combinat.k_tableau.WeakTableau_factorized_permutation.check"]], "circular_distance() (sage.combinat.k_tableau.weaktableaux_core method)": [[131, "sage.combinat.k_tableau.WeakTableaux_core.circular_distance"]], "content_of_highest_head() (sage.combinat.k_tableau.strongtableau method)": [[131, "sage.combinat.k_tableau.StrongTableau.content_of_highest_head"]], "content_of_marked_head() (sage.combinat.k_tableau.strongtableau method)": [[131, "sage.combinat.k_tableau.StrongTableau.content_of_marked_head"]], "contents_of_heads() (sage.combinat.k_tableau.strongtableau method)": [[131, "sage.combinat.k_tableau.StrongTableau.contents_of_heads"]], "diag() (sage.combinat.k_tableau.weaktableaux_core method)": [[131, "sage.combinat.k_tableau.WeakTableaux_core.diag"]], "dictionary_of_coordinates_at_residues() (sage.combinat.k_tableau.weaktableau_core method)": [[131, "sage.combinat.k_tableau.WeakTableau_core.dictionary_of_coordinates_at_residues"]], "entries_by_content() (sage.combinat.k_tableau.strongtableau method)": [[131, "sage.combinat.k_tableau.StrongTableau.entries_by_content"]], "entries_by_content_standard() (sage.combinat.k_tableau.strongtableau method)": [[131, "sage.combinat.k_tableau.StrongTableau.entries_by_content_standard"]], "follows_tableau() (sage.combinat.k_tableau.strongtableau method)": [[131, "sage.combinat.k_tableau.StrongTableau.follows_tableau"]], "follows_tableau_unsigned_standard() (sage.combinat.k_tableau.strongtableaux class method)": [[131, "sage.combinat.k_tableau.StrongTableaux.follows_tableau_unsigned_standard"]], "from_core_tableau() (sage.combinat.k_tableau.weaktableau_bounded class method)": [[131, "sage.combinat.k_tableau.WeakTableau_bounded.from_core_tableau"]], "from_core_tableau() (sage.combinat.k_tableau.weaktableau_factorized_permutation class method)": [[131, "sage.combinat.k_tableau.WeakTableau_factorized_permutation.from_core_tableau"]], "height_of_ribbon() (sage.combinat.k_tableau.strongtableau method)": [[131, "sage.combinat.k_tableau.StrongTableau.height_of_ribbon"]], "inner_shape() (sage.combinat.k_tableau.strongtableau method)": [[131, "sage.combinat.k_tableau.StrongTableau.inner_shape"]], "inner_shape() (sage.combinat.k_tableau.strongtableaux method)": [[131, "sage.combinat.k_tableau.StrongTableaux.inner_shape"]], "intermediate_shapes() (in module sage.combinat.k_tableau)": [[131, "sage.combinat.k_tableau.intermediate_shapes"]], "intermediate_shapes() (sage.combinat.k_tableau.strongtableau method)": [[131, "sage.combinat.k_tableau.StrongTableau.intermediate_shapes"]], "intermediate_shapes() (sage.combinat.k_tableau.weaktableau_abstract method)": [[131, "sage.combinat.k_tableau.WeakTableau_abstract.intermediate_shapes"]], "is_column_strict_with_weight() (sage.combinat.k_tableau.strongtableau method)": [[131, "sage.combinat.k_tableau.StrongTableau.is_column_strict_with_weight"]], "k_charge() (sage.combinat.k_tableau.weaktableau_bounded method)": [[131, "sage.combinat.k_tableau.WeakTableau_bounded.k_charge"]], "k_charge() (sage.combinat.k_tableau.weaktableau_core method)": [[131, "sage.combinat.k_tableau.WeakTableau_core.k_charge"]], "k_charge() (sage.combinat.k_tableau.weaktableau_factorized_permutation method)": [[131, "sage.combinat.k_tableau.WeakTableau_factorized_permutation.k_charge"]], "k_charge_i() (sage.combinat.k_tableau.weaktableau_core method)": [[131, "sage.combinat.k_tableau.WeakTableau_core.k_charge_I"]], "k_charge_j() (sage.combinat.k_tableau.weaktableau_core method)": [[131, "sage.combinat.k_tableau.WeakTableau_core.k_charge_J"]], "left_action() (sage.combinat.k_tableau.strongtableau method)": [[131, "sage.combinat.k_tableau.StrongTableau.left_action"]], "list_of_standard_cells() (sage.combinat.k_tableau.weaktableau_core method)": [[131, "sage.combinat.k_tableau.WeakTableau_core.list_of_standard_cells"]], "marked_cst_to_transposition_sequence() (sage.combinat.k_tableau.strongtableaux class method)": [[131, "sage.combinat.k_tableau.StrongTableaux.marked_CST_to_transposition_sequence"]], "marked_given_unmarked_and_weight_iterator() (sage.combinat.k_tableau.strongtableaux class method)": [[131, "sage.combinat.k_tableau.StrongTableaux.marked_given_unmarked_and_weight_iterator"]], "nabs() (in module sage.combinat.k_tableau)": [[131, "sage.combinat.k_tableau.nabs"]], "number_of_connected_components() (sage.combinat.k_tableau.strongtableau method)": [[131, "sage.combinat.k_tableau.StrongTableau.number_of_connected_components"]], "options (sage.combinat.k_tableau.strongtableaux attribute)": [[131, "sage.combinat.k_tableau.StrongTableaux.options"]], "outer_shape() (sage.combinat.k_tableau.strongtableau method)": [[131, "sage.combinat.k_tableau.StrongTableau.outer_shape"]], "outer_shape() (sage.combinat.k_tableau.strongtableaux method)": [[131, "sage.combinat.k_tableau.StrongTableaux.outer_shape"]], "pp() (sage.combinat.k_tableau.strongtableau method)": [[131, "sage.combinat.k_tableau.StrongTableau.pp"]], "pp() (sage.combinat.k_tableau.weaktableau_abstract method)": [[131, "sage.combinat.k_tableau.WeakTableau_abstract.pp"]], "representation() (sage.combinat.k_tableau.weaktableau_abstract method)": [[131, "sage.combinat.k_tableau.WeakTableau_abstract.representation"]], "representation() (sage.combinat.k_tableau.weaktableaux_abstract method)": [[131, "sage.combinat.k_tableau.WeakTableaux_abstract.representation"]], "residues_of_entries() (sage.combinat.k_tableau.weaktableau_core method)": [[131, "sage.combinat.k_tableau.WeakTableau_core.residues_of_entries"]], "restrict() (sage.combinat.k_tableau.strongtableau method)": [[131, "sage.combinat.k_tableau.StrongTableau.restrict"]], "ribbons_above_marked() (sage.combinat.k_tableau.strongtableau method)": [[131, "sage.combinat.k_tableau.StrongTableau.ribbons_above_marked"]], "sage.combinat.k_tableau": [[131, "module-sage.combinat.k_tableau"]], "set_weight() (sage.combinat.k_tableau.strongtableau method)": [[131, "sage.combinat.k_tableau.StrongTableau.set_weight"]], "shape() (sage.combinat.k_tableau.strongtableau method)": [[131, "sage.combinat.k_tableau.StrongTableau.shape"]], "shape() (sage.combinat.k_tableau.strongtableaux method)": [[131, "sage.combinat.k_tableau.StrongTableaux.shape"]], "shape() (sage.combinat.k_tableau.weaktableau_abstract method)": [[131, "sage.combinat.k_tableau.WeakTableau_abstract.shape"]], "shape() (sage.combinat.k_tableau.weaktableaux_abstract method)": [[131, "sage.combinat.k_tableau.WeakTableaux_abstract.shape"]], "shape_bounded() (sage.combinat.k_tableau.weaktableau_bounded method)": [[131, "sage.combinat.k_tableau.WeakTableau_bounded.shape_bounded"]], "shape_bounded() (sage.combinat.k_tableau.weaktableau_core method)": [[131, "sage.combinat.k_tableau.WeakTableau_core.shape_bounded"]], "shape_bounded() (sage.combinat.k_tableau.weaktableau_factorized_permutation method)": [[131, "sage.combinat.k_tableau.WeakTableau_factorized_permutation.shape_bounded"]], "shape_core() (sage.combinat.k_tableau.weaktableau_bounded method)": [[131, "sage.combinat.k_tableau.WeakTableau_bounded.shape_core"]], "shape_core() (sage.combinat.k_tableau.weaktableau_core method)": [[131, "sage.combinat.k_tableau.WeakTableau_core.shape_core"]], "shape_core() (sage.combinat.k_tableau.weaktableau_factorized_permutation method)": [[131, "sage.combinat.k_tableau.WeakTableau_factorized_permutation.shape_core"]], "size() (sage.combinat.k_tableau.strongtableau method)": [[131, "sage.combinat.k_tableau.StrongTableau.size"]], "size() (sage.combinat.k_tableau.weaktableau_abstract method)": [[131, "sage.combinat.k_tableau.WeakTableau_abstract.size"]], "size() (sage.combinat.k_tableau.weaktableaux_abstract method)": [[131, "sage.combinat.k_tableau.WeakTableaux_abstract.size"]], "spin() (sage.combinat.k_tableau.strongtableau method)": [[131, "sage.combinat.k_tableau.StrongTableau.spin"]], "spin_of_ribbon() (sage.combinat.k_tableau.strongtableau method)": [[131, "sage.combinat.k_tableau.StrongTableau.spin_of_ribbon"]], "standard_marked_iterator() (sage.combinat.k_tableau.strongtableaux class method)": [[131, "sage.combinat.k_tableau.StrongTableaux.standard_marked_iterator"]], "standard_unmarked_iterator() (sage.combinat.k_tableau.strongtableaux class method)": [[131, "sage.combinat.k_tableau.StrongTableaux.standard_unmarked_iterator"]], "straighten_input() (sage.combinat.k_tableau.weaktableau_factorized_permutation static method)": [[131, "sage.combinat.k_tableau.WeakTableau_factorized_permutation.straighten_input"]], "to_bounded_tableau() (sage.combinat.k_tableau.weaktableau_core method)": [[131, "sage.combinat.k_tableau.WeakTableau_core.to_bounded_tableau"]], "to_core_tableau() (sage.combinat.k_tableau.weaktableau_bounded method)": [[131, "sage.combinat.k_tableau.WeakTableau_bounded.to_core_tableau"]], "to_core_tableau() (sage.combinat.k_tableau.weaktableau_factorized_permutation method)": [[131, "sage.combinat.k_tableau.WeakTableau_factorized_permutation.to_core_tableau"]], "to_factorized_permutation_tableau() (sage.combinat.k_tableau.weaktableau_core method)": [[131, "sage.combinat.k_tableau.WeakTableau_core.to_factorized_permutation_tableau"]], "to_list() (sage.combinat.k_tableau.strongtableau method)": [[131, "sage.combinat.k_tableau.StrongTableau.to_list"]], "to_standard_list() (sage.combinat.k_tableau.strongtableau method)": [[131, "sage.combinat.k_tableau.StrongTableau.to_standard_list"]], "to_standard_tableau() (sage.combinat.k_tableau.strongtableau method)": [[131, "sage.combinat.k_tableau.StrongTableau.to_standard_tableau"]], "to_transposition_sequence() (sage.combinat.k_tableau.strongtableau method)": [[131, "sage.combinat.k_tableau.StrongTableau.to_transposition_sequence"]], "to_unmarked_list() (sage.combinat.k_tableau.strongtableau method)": [[131, "sage.combinat.k_tableau.StrongTableau.to_unmarked_list"]], "to_unmarked_standard_list() (sage.combinat.k_tableau.strongtableau method)": [[131, "sage.combinat.k_tableau.StrongTableau.to_unmarked_standard_list"]], "transpositions_to_standard_strong() (sage.combinat.k_tableau.strongtableaux class method)": [[131, "sage.combinat.k_tableau.StrongTableaux.transpositions_to_standard_strong"]], "weight() (sage.combinat.k_tableau.strongtableau method)": [[131, "sage.combinat.k_tableau.StrongTableau.weight"]], "weight() (sage.combinat.k_tableau.weaktableau_abstract method)": [[131, "sage.combinat.k_tableau.WeakTableau_abstract.weight"]], "kazhdanlusztigpolynomial (class in sage.combinat.kazhdan_lusztig)": [[132, "sage.combinat.kazhdan_lusztig.KazhdanLusztigPolynomial"]], "p() (sage.combinat.kazhdan_lusztig.kazhdanlusztigpolynomial method)": [[132, "sage.combinat.kazhdan_lusztig.KazhdanLusztigPolynomial.P"]], "r() (sage.combinat.kazhdan_lusztig.kazhdanlusztigpolynomial method)": [[132, "sage.combinat.kazhdan_lusztig.KazhdanLusztigPolynomial.R"]], "r_tilde() (sage.combinat.kazhdan_lusztig.kazhdanlusztigpolynomial method)": [[132, "sage.combinat.kazhdan_lusztig.KazhdanLusztigPolynomial.R_tilde"]], "sage.combinat.kazhdan_lusztig": [[132, "module-sage.combinat.kazhdan_lusztig"]], "element (sage.combinat.key_polynomial.keypolynomialbasis attribute)": [[133, "sage.combinat.key_polynomial.KeyPolynomialBasis.Element"]], "keypolynomial (class in sage.combinat.key_polynomial)": [[133, "sage.combinat.key_polynomial.KeyPolynomial"]], "keypolynomialbasis (class in sage.combinat.key_polynomial)": [[133, "sage.combinat.key_polynomial.KeyPolynomialBasis"]], "degree_on_basis() (sage.combinat.key_polynomial.keypolynomialbasis method)": [[133, "sage.combinat.key_polynomial.KeyPolynomialBasis.degree_on_basis"]], "divided_difference() (in module sage.combinat.key_polynomial)": [[133, "sage.combinat.key_polynomial.divided_difference"]], "divided_difference() (sage.combinat.key_polynomial.keypolynomial method)": [[133, "sage.combinat.key_polynomial.KeyPolynomial.divided_difference"]], "expand() (sage.combinat.key_polynomial.keypolynomial method)": [[133, "sage.combinat.key_polynomial.KeyPolynomial.expand"]], "from_polynomial() (sage.combinat.key_polynomial.keypolynomialbasis method)": [[133, "sage.combinat.key_polynomial.KeyPolynomialBasis.from_polynomial"]], "from_schubert_polynomial() (sage.combinat.key_polynomial.keypolynomialbasis method)": [[133, "sage.combinat.key_polynomial.KeyPolynomialBasis.from_schubert_polynomial"]], "isobaric_divided_difference() (in module sage.combinat.key_polynomial)": [[133, "sage.combinat.key_polynomial.isobaric_divided_difference"]], "isobaric_divided_difference() (sage.combinat.key_polynomial.keypolynomial method)": [[133, "sage.combinat.key_polynomial.KeyPolynomial.isobaric_divided_difference"]], "one_basis() (sage.combinat.key_polynomial.keypolynomialbasis method)": [[133, "sage.combinat.key_polynomial.KeyPolynomialBasis.one_basis"]], "pi() (sage.combinat.key_polynomial.keypolynomial method)": [[133, "sage.combinat.key_polynomial.KeyPolynomial.pi"]], "poly_gens() (sage.combinat.key_polynomial.keypolynomialbasis method)": [[133, "sage.combinat.key_polynomial.KeyPolynomialBasis.poly_gens"]], "polynomial_ring() (sage.combinat.key_polynomial.keypolynomialbasis method)": [[133, "sage.combinat.key_polynomial.KeyPolynomialBasis.polynomial_ring"]], "sage.combinat.key_polynomial": [[133, "module-sage.combinat.key_polynomial"]], "sorting_word() (in module sage.combinat.key_polynomial)": [[133, "sage.combinat.key_polynomial.sorting_word"]], "to_polynomial() (sage.combinat.key_polynomial.keypolynomial method)": [[133, "sage.combinat.key_polynomial.KeyPolynomial.to_polynomial"]], "bk_pieces() (in module sage.combinat.knutson_tao_puzzles)": [[134, "sage.combinat.knutson_tao_puzzles.BK_pieces"]], "deltapiece (class in sage.combinat.knutson_tao_puzzles)": [[134, "sage.combinat.knutson_tao_puzzles.DeltaPiece"]], "ht_grassmannian_pieces() (in module sage.combinat.knutson_tao_puzzles)": [[134, "sage.combinat.knutson_tao_puzzles.HT_grassmannian_pieces"]], "ht_two_step_pieces() (in module sage.combinat.knutson_tao_puzzles)": [[134, "sage.combinat.knutson_tao_puzzles.HT_two_step_pieces"]], "h_grassmannian_pieces() (in module sage.combinat.knutson_tao_puzzles)": [[134, "sage.combinat.knutson_tao_puzzles.H_grassmannian_pieces"]], "h_two_step_pieces() (in module sage.combinat.knutson_tao_puzzles)": [[134, "sage.combinat.knutson_tao_puzzles.H_two_step_pieces"]], "k_grassmannian_pieces() (in module sage.combinat.knutson_tao_puzzles)": [[134, "sage.combinat.knutson_tao_puzzles.K_grassmannian_pieces"]], "knutsontaopuzzlesolver (class in sage.combinat.knutson_tao_puzzles)": [[134, "sage.combinat.knutson_tao_puzzles.KnutsonTaoPuzzleSolver"]], "nablapiece (class in sage.combinat.knutson_tao_puzzles)": [[134, "sage.combinat.knutson_tao_puzzles.NablaPiece"]], "puzzlefilling (class in sage.combinat.knutson_tao_puzzles)": [[134, "sage.combinat.knutson_tao_puzzles.PuzzleFilling"]], "puzzlepiece (class in sage.combinat.knutson_tao_puzzles)": [[134, "sage.combinat.knutson_tao_puzzles.PuzzlePiece"]], "puzzlepieces (class in sage.combinat.knutson_tao_puzzles)": [[134, "sage.combinat.knutson_tao_puzzles.PuzzlePieces"]], "rhombuspiece (class in sage.combinat.knutson_tao_puzzles)": [[134, "sage.combinat.knutson_tao_puzzles.RhombusPiece"]], "add_t_piece() (sage.combinat.knutson_tao_puzzles.puzzlepieces method)": [[134, "sage.combinat.knutson_tao_puzzles.PuzzlePieces.add_T_piece"]], "add_forbidden_label() (sage.combinat.knutson_tao_puzzles.puzzlepieces method)": [[134, "sage.combinat.knutson_tao_puzzles.PuzzlePieces.add_forbidden_label"]], "add_piece() (sage.combinat.knutson_tao_puzzles.puzzlefilling method)": [[134, "sage.combinat.knutson_tao_puzzles.PuzzleFilling.add_piece"]], "add_piece() (sage.combinat.knutson_tao_puzzles.puzzlepieces method)": [[134, "sage.combinat.knutson_tao_puzzles.PuzzlePieces.add_piece"]], "add_pieces() (sage.combinat.knutson_tao_puzzles.puzzlefilling method)": [[134, "sage.combinat.knutson_tao_puzzles.PuzzleFilling.add_pieces"]], "border() (sage.combinat.knutson_tao_puzzles.puzzlepiece method)": [[134, "sage.combinat.knutson_tao_puzzles.PuzzlePiece.border"]], "boundary_deltas() (sage.combinat.knutson_tao_puzzles.puzzlepieces method)": [[134, "sage.combinat.knutson_tao_puzzles.PuzzlePieces.boundary_deltas"]], "clockwise_rotation() (sage.combinat.knutson_tao_puzzles.deltapiece method)": [[134, "sage.combinat.knutson_tao_puzzles.DeltaPiece.clockwise_rotation"]], "clockwise_rotation() (sage.combinat.knutson_tao_puzzles.nablapiece method)": [[134, "sage.combinat.knutson_tao_puzzles.NablaPiece.clockwise_rotation"]], "color() (sage.combinat.knutson_tao_puzzles.puzzlepiece method)": [[134, "sage.combinat.knutson_tao_puzzles.PuzzlePiece.color"]], "contribution() (sage.combinat.knutson_tao_puzzles.puzzlefilling method)": [[134, "sage.combinat.knutson_tao_puzzles.PuzzleFilling.contribution"]], "copy() (sage.combinat.knutson_tao_puzzles.puzzlefilling method)": [[134, "sage.combinat.knutson_tao_puzzles.PuzzleFilling.copy"]], "delta_pieces() (sage.combinat.knutson_tao_puzzles.puzzlepieces method)": [[134, "sage.combinat.knutson_tao_puzzles.PuzzlePieces.delta_pieces"]], "edge_color() (sage.combinat.knutson_tao_puzzles.puzzlepiece method)": [[134, "sage.combinat.knutson_tao_puzzles.PuzzlePiece.edge_color"]], "edge_label() (sage.combinat.knutson_tao_puzzles.puzzlepiece method)": [[134, "sage.combinat.knutson_tao_puzzles.PuzzlePiece.edge_label"]], "edges() (sage.combinat.knutson_tao_puzzles.deltapiece method)": [[134, "sage.combinat.knutson_tao_puzzles.DeltaPiece.edges"]], "edges() (sage.combinat.knutson_tao_puzzles.nablapiece method)": [[134, "sage.combinat.knutson_tao_puzzles.NablaPiece.edges"]], "edges() (sage.combinat.knutson_tao_puzzles.rhombuspiece method)": [[134, "sage.combinat.knutson_tao_puzzles.RhombusPiece.edges"]], "half_turn_rotation() (sage.combinat.knutson_tao_puzzles.deltapiece method)": [[134, "sage.combinat.knutson_tao_puzzles.DeltaPiece.half_turn_rotation"]], "half_turn_rotation() (sage.combinat.knutson_tao_puzzles.nablapiece method)": [[134, "sage.combinat.knutson_tao_puzzles.NablaPiece.half_turn_rotation"]], "is_completed() (sage.combinat.knutson_tao_puzzles.puzzlefilling method)": [[134, "sage.combinat.knutson_tao_puzzles.PuzzleFilling.is_completed"]], "is_in_south_edge() (sage.combinat.knutson_tao_puzzles.puzzlefilling method)": [[134, "sage.combinat.knutson_tao_puzzles.PuzzleFilling.is_in_south_edge"]], "kink_coordinates() (sage.combinat.knutson_tao_puzzles.puzzlefilling method)": [[134, "sage.combinat.knutson_tao_puzzles.PuzzleFilling.kink_coordinates"]], "nabla_pieces() (sage.combinat.knutson_tao_puzzles.puzzlepieces method)": [[134, "sage.combinat.knutson_tao_puzzles.PuzzlePieces.nabla_pieces"]], "north_east_label_of_kink() (sage.combinat.knutson_tao_puzzles.puzzlefilling method)": [[134, "sage.combinat.knutson_tao_puzzles.PuzzleFilling.north_east_label_of_kink"]], "north_piece() (sage.combinat.knutson_tao_puzzles.rhombuspiece method)": [[134, "sage.combinat.knutson_tao_puzzles.RhombusPiece.north_piece"]], "north_west_label_of_kink() (sage.combinat.knutson_tao_puzzles.puzzlefilling method)": [[134, "sage.combinat.knutson_tao_puzzles.PuzzleFilling.north_west_label_of_kink"]], "plot() (sage.combinat.knutson_tao_puzzles.knutsontaopuzzlesolver method)": [[134, "sage.combinat.knutson_tao_puzzles.KnutsonTaoPuzzleSolver.plot"]], "plot() (sage.combinat.knutson_tao_puzzles.puzzlefilling method)": [[134, "sage.combinat.knutson_tao_puzzles.PuzzleFilling.plot"]], "puzzle_pieces() (sage.combinat.knutson_tao_puzzles.knutsontaopuzzlesolver method)": [[134, "sage.combinat.knutson_tao_puzzles.KnutsonTaoPuzzleSolver.puzzle_pieces"]], "rhombus_pieces() (sage.combinat.knutson_tao_puzzles.puzzlepieces method)": [[134, "sage.combinat.knutson_tao_puzzles.PuzzlePieces.rhombus_pieces"]], "sage.combinat.knutson_tao_puzzles": [[134, "module-sage.combinat.knutson_tao_puzzles"]], "solutions() (sage.combinat.knutson_tao_puzzles.knutsontaopuzzlesolver method)": [[134, "sage.combinat.knutson_tao_puzzles.KnutsonTaoPuzzleSolver.solutions"]], "south_labels() (sage.combinat.knutson_tao_puzzles.puzzlefilling method)": [[134, "sage.combinat.knutson_tao_puzzles.PuzzleFilling.south_labels"]], "south_piece() (sage.combinat.knutson_tao_puzzles.rhombuspiece method)": [[134, "sage.combinat.knutson_tao_puzzles.RhombusPiece.south_piece"]], "structure_constants() (sage.combinat.knutson_tao_puzzles.knutsontaopuzzlesolver method)": [[134, "sage.combinat.knutson_tao_puzzles.KnutsonTaoPuzzleSolver.structure_constants"]], "sage.combinat.matrices.all": [[135, "module-sage.combinat.matrices.all"]], "all_solutions() (sage.combinat.matrices.dancing_links.dancing_linkswrapper method)": [[136, "sage.combinat.matrices.dancing_links.dancing_linksWrapper.all_solutions"]], "dancing_linkswrapper (class in sage.combinat.matrices.dancing_links)": [[136, "sage.combinat.matrices.dancing_links.dancing_linksWrapper"]], "dlx_solver() (in module sage.combinat.matrices.dancing_links)": [[136, "sage.combinat.matrices.dancing_links.dlx_solver"]], "get_solution() (sage.combinat.matrices.dancing_links.dancing_linkswrapper method)": [[136, "sage.combinat.matrices.dancing_links.dancing_linksWrapper.get_solution"]], "make_dlxwrapper() (in module sage.combinat.matrices.dancing_links)": [[136, "sage.combinat.matrices.dancing_links.make_dlxwrapper"]], "ncols() (sage.combinat.matrices.dancing_links.dancing_linkswrapper method)": [[136, "sage.combinat.matrices.dancing_links.dancing_linksWrapper.ncols"]], "nrows() (sage.combinat.matrices.dancing_links.dancing_linkswrapper method)": [[136, "sage.combinat.matrices.dancing_links.dancing_linksWrapper.nrows"]], "number_of_solutions() (sage.combinat.matrices.dancing_links.dancing_linkswrapper method)": [[136, "sage.combinat.matrices.dancing_links.dancing_linksWrapper.number_of_solutions"]], "one_solution() (sage.combinat.matrices.dancing_links.dancing_linkswrapper method)": [[136, "sage.combinat.matrices.dancing_links.dancing_linksWrapper.one_solution"]], "one_solution_using_milp_solver() (sage.combinat.matrices.dancing_links.dancing_linkswrapper method)": [[136, "sage.combinat.matrices.dancing_links.dancing_linksWrapper.one_solution_using_milp_solver"]], "one_solution_using_sat_solver() (sage.combinat.matrices.dancing_links.dancing_linkswrapper method)": [[136, "sage.combinat.matrices.dancing_links.dancing_linksWrapper.one_solution_using_sat_solver"]], "reinitialize() (sage.combinat.matrices.dancing_links.dancing_linkswrapper method)": [[136, "sage.combinat.matrices.dancing_links.dancing_linksWrapper.reinitialize"]], "restrict() (sage.combinat.matrices.dancing_links.dancing_linkswrapper method)": [[136, "sage.combinat.matrices.dancing_links.dancing_linksWrapper.restrict"]], "rows() (sage.combinat.matrices.dancing_links.dancing_linkswrapper method)": [[136, "sage.combinat.matrices.dancing_links.dancing_linksWrapper.rows"]], "sage.combinat.matrices.dancing_links": [[136, "module-sage.combinat.matrices.dancing_links"]], "search() (sage.combinat.matrices.dancing_links.dancing_linkswrapper method)": [[136, "sage.combinat.matrices.dancing_links.dancing_linksWrapper.search"]], "solutions_iterator() (sage.combinat.matrices.dancing_links.dancing_linkswrapper method)": [[136, "sage.combinat.matrices.dancing_links.dancing_linksWrapper.solutions_iterator"]], "split() (sage.combinat.matrices.dancing_links.dancing_linkswrapper method)": [[136, "sage.combinat.matrices.dancing_links.dancing_linksWrapper.split"]], "to_milp() (sage.combinat.matrices.dancing_links.dancing_linkswrapper method)": [[136, "sage.combinat.matrices.dancing_links.dancing_linksWrapper.to_milp"]], "to_sat_solver() (sage.combinat.matrices.dancing_links.dancing_linkswrapper method)": [[136, "sage.combinat.matrices.dancing_links.dancing_linksWrapper.to_sat_solver"]], "allexactcovers() (in module sage.combinat.matrices.dlxcpp)": [[137, "sage.combinat.matrices.dlxcpp.AllExactCovers"]], "dlxcpp() (in module sage.combinat.matrices.dlxcpp)": [[137, "sage.combinat.matrices.dlxcpp.DLXCPP"]], "oneexactcover() (in module sage.combinat.matrices.dlxcpp)": [[137, "sage.combinat.matrices.dlxcpp.OneExactCover"]], "sage.combinat.matrices.dlxcpp": [[137, "module-sage.combinat.matrices.dlxcpp"]], "gs_skew_hadamard_smallcases() (in module sage.combinat.matrices.hadamard_matrix)": [[138, "sage.combinat.matrices.hadamard_matrix.GS_skew_hadamard_smallcases"]], "rshcd_324() (in module sage.combinat.matrices.hadamard_matrix)": [[138, "sage.combinat.matrices.hadamard_matrix.RSHCD_324"]], "amicable_hadamard_matrices() (in module sage.combinat.matrices.hadamard_matrix)": [[138, "sage.combinat.matrices.hadamard_matrix.amicable_hadamard_matrices"]], "amicable_hadamard_matrices_wallis() (in module sage.combinat.matrices.hadamard_matrix)": [[138, "sage.combinat.matrices.hadamard_matrix.amicable_hadamard_matrices_wallis"]], "are_amicable_hadamard_matrices() (in module sage.combinat.matrices.hadamard_matrix)": [[138, "sage.combinat.matrices.hadamard_matrix.are_amicable_hadamard_matrices"]], "construction_four_symbol_delta_code_i() (in module sage.combinat.matrices.hadamard_matrix)": [[138, "sage.combinat.matrices.hadamard_matrix.construction_four_symbol_delta_code_I"]], "construction_four_symbol_delta_code_ii() (in module sage.combinat.matrices.hadamard_matrix)": [[138, "sage.combinat.matrices.hadamard_matrix.construction_four_symbol_delta_code_II"]], "four_symbol_delta_code_smallcases() (in module sage.combinat.matrices.hadamard_matrix)": [[138, "sage.combinat.matrices.hadamard_matrix.four_symbol_delta_code_smallcases"]], "hadamard_matrix() (in module sage.combinat.matrices.hadamard_matrix)": [[138, "sage.combinat.matrices.hadamard_matrix.hadamard_matrix"]], "hadamard_matrix_156() (in module sage.combinat.matrices.hadamard_matrix)": [[138, "sage.combinat.matrices.hadamard_matrix.hadamard_matrix_156"]], "hadamard_matrix_cooper_wallis_construction() (in module sage.combinat.matrices.hadamard_matrix)": [[138, "sage.combinat.matrices.hadamard_matrix.hadamard_matrix_cooper_wallis_construction"]], "hadamard_matrix_cooper_wallis_smallcases() (in module sage.combinat.matrices.hadamard_matrix)": [[138, "sage.combinat.matrices.hadamard_matrix.hadamard_matrix_cooper_wallis_smallcases"]], "hadamard_matrix_from_sds() (in module sage.combinat.matrices.hadamard_matrix)": [[138, "sage.combinat.matrices.hadamard_matrix.hadamard_matrix_from_sds"]], "hadamard_matrix_miyamoto_construction() (in module sage.combinat.matrices.hadamard_matrix)": [[138, "sage.combinat.matrices.hadamard_matrix.hadamard_matrix_miyamoto_construction"]], "hadamard_matrix_paleyi() (in module sage.combinat.matrices.hadamard_matrix)": [[138, "sage.combinat.matrices.hadamard_matrix.hadamard_matrix_paleyI"]], "hadamard_matrix_paleyii() (in module sage.combinat.matrices.hadamard_matrix)": [[138, "sage.combinat.matrices.hadamard_matrix.hadamard_matrix_paleyII"]], "hadamard_matrix_spence_construction() (in module sage.combinat.matrices.hadamard_matrix)": [[138, "sage.combinat.matrices.hadamard_matrix.hadamard_matrix_spence_construction"]], "hadamard_matrix_turyn_type() (in module sage.combinat.matrices.hadamard_matrix)": [[138, "sage.combinat.matrices.hadamard_matrix.hadamard_matrix_turyn_type"]], "hadamard_matrix_williamson_type() (in module sage.combinat.matrices.hadamard_matrix)": [[138, "sage.combinat.matrices.hadamard_matrix.hadamard_matrix_williamson_type"]], "hadamard_matrix_www() (in module sage.combinat.matrices.hadamard_matrix)": [[138, "sage.combinat.matrices.hadamard_matrix.hadamard_matrix_www"]], "is_hadamard_matrix() (in module sage.combinat.matrices.hadamard_matrix)": [[138, "sage.combinat.matrices.hadamard_matrix.is_hadamard_matrix"]], "is_skew_hadamard_matrix() (in module sage.combinat.matrices.hadamard_matrix)": [[138, "sage.combinat.matrices.hadamard_matrix.is_skew_hadamard_matrix"]], "normalise_hadamard() (in module sage.combinat.matrices.hadamard_matrix)": [[138, "sage.combinat.matrices.hadamard_matrix.normalise_hadamard"]], "regular_symmetric_hadamard_matrix_with_constant_diagonal() (in module sage.combinat.matrices.hadamard_matrix)": [[138, "sage.combinat.matrices.hadamard_matrix.regular_symmetric_hadamard_matrix_with_constant_diagonal"]], "rshcd_from_close_prime_powers() (in module sage.combinat.matrices.hadamard_matrix)": [[138, "sage.combinat.matrices.hadamard_matrix.rshcd_from_close_prime_powers"]], "rshcd_from_prime_power_and_conference_matrix() (in module sage.combinat.matrices.hadamard_matrix)": [[138, "sage.combinat.matrices.hadamard_matrix.rshcd_from_prime_power_and_conference_matrix"]], "sage.combinat.matrices.hadamard_matrix": [[138, "module-sage.combinat.matrices.hadamard_matrix"]], "skew_hadamard_matrix() (in module sage.combinat.matrices.hadamard_matrix)": [[138, "sage.combinat.matrices.hadamard_matrix.skew_hadamard_matrix"]], "skew_hadamard_matrix_from_complementary_difference_sets() (in module sage.combinat.matrices.hadamard_matrix)": [[138, "sage.combinat.matrices.hadamard_matrix.skew_hadamard_matrix_from_complementary_difference_sets"]], "skew_hadamard_matrix_from_good_matrices() (in module sage.combinat.matrices.hadamard_matrix)": [[138, "sage.combinat.matrices.hadamard_matrix.skew_hadamard_matrix_from_good_matrices"]], "skew_hadamard_matrix_from_good_matrices_smallcases() (in module sage.combinat.matrices.hadamard_matrix)": [[138, "sage.combinat.matrices.hadamard_matrix.skew_hadamard_matrix_from_good_matrices_smallcases"]], "skew_hadamard_matrix_from_orthogonal_design() (in module sage.combinat.matrices.hadamard_matrix)": [[138, "sage.combinat.matrices.hadamard_matrix.skew_hadamard_matrix_from_orthogonal_design"]], "skew_hadamard_matrix_spence_1975() (in module sage.combinat.matrices.hadamard_matrix)": [[138, "sage.combinat.matrices.hadamard_matrix.skew_hadamard_matrix_spence_1975"]], "skew_hadamard_matrix_spence_construction() (in module sage.combinat.matrices.hadamard_matrix)": [[138, "sage.combinat.matrices.hadamard_matrix.skew_hadamard_matrix_spence_construction"]], "skew_hadamard_matrix_whiteman_construction() (in module sage.combinat.matrices.hadamard_matrix)": [[138, "sage.combinat.matrices.hadamard_matrix.skew_hadamard_matrix_whiteman_construction"]], "symmetric_conference_matrix() (in module sage.combinat.matrices.hadamard_matrix)": [[138, "sage.combinat.matrices.hadamard_matrix.symmetric_conference_matrix"]], "symmetric_conference_matrix_paley() (in module sage.combinat.matrices.hadamard_matrix)": [[138, "sage.combinat.matrices.hadamard_matrix.symmetric_conference_matrix_paley"]], "szekeres_difference_set_pair() (in module sage.combinat.matrices.hadamard_matrix)": [[138, "sage.combinat.matrices.hadamard_matrix.szekeres_difference_set_pair"]], "turyn_type_hadamard_matrix_smallcases() (in module sage.combinat.matrices.hadamard_matrix)": [[138, "sage.combinat.matrices.hadamard_matrix.turyn_type_hadamard_matrix_smallcases"]], "typei_matrix_difference_set() (in module sage.combinat.matrices.hadamard_matrix)": [[138, "sage.combinat.matrices.hadamard_matrix.typeI_matrix_difference_set"]], "williamson_goethals_seidel_skew_hadamard_matrix() (in module sage.combinat.matrices.hadamard_matrix)": [[138, "sage.combinat.matrices.hadamard_matrix.williamson_goethals_seidel_skew_hadamard_matrix"]], "williamson_hadamard_matrix_smallcases() (in module sage.combinat.matrices.hadamard_matrix)": [[138, "sage.combinat.matrices.hadamard_matrix.williamson_hadamard_matrix_smallcases"]], "williamson_type_quadruples_smallcases() (in module sage.combinat.matrices.hadamard_matrix)": [[138, "sage.combinat.matrices.hadamard_matrix.williamson_type_quadruples_smallcases"]], "latinsquare (class in sage.combinat.matrices.latin)": [[139, "sage.combinat.matrices.latin.LatinSquare"]], "latinsquare_generator() (in module sage.combinat.matrices.latin)": [[139, "sage.combinat.matrices.latin.LatinSquare_generator"]], "actual_row_col_sym_sizes() (sage.combinat.matrices.latin.latinsquare method)": [[139, "sage.combinat.matrices.latin.LatinSquare.actual_row_col_sym_sizes"]], "alternating_group_bitrade_generators() (in module sage.combinat.matrices.latin)": [[139, "sage.combinat.matrices.latin.alternating_group_bitrade_generators"]], "apply_isotopism() (sage.combinat.matrices.latin.latinsquare method)": [[139, "sage.combinat.matrices.latin.LatinSquare.apply_isotopism"]], "back_circulant() (in module sage.combinat.matrices.latin)": [[139, "sage.combinat.matrices.latin.back_circulant"]], "beta1() (in module sage.combinat.matrices.latin)": [[139, "sage.combinat.matrices.latin.beta1"]], "beta2() (in module sage.combinat.matrices.latin)": [[139, "sage.combinat.matrices.latin.beta2"]], "beta3() (in module sage.combinat.matrices.latin)": [[139, "sage.combinat.matrices.latin.beta3"]], "bitrade() (in module sage.combinat.matrices.latin)": [[139, "sage.combinat.matrices.latin.bitrade"]], "bitrade_from_group() (in module sage.combinat.matrices.latin)": [[139, "sage.combinat.matrices.latin.bitrade_from_group"]], "cells_map_as_square() (in module sage.combinat.matrices.latin)": [[139, "sage.combinat.matrices.latin.cells_map_as_square"]], "check_bitrade_generators() (in module sage.combinat.matrices.latin)": [[139, "sage.combinat.matrices.latin.check_bitrade_generators"]], "clear_cells() (sage.combinat.matrices.latin.latinsquare method)": [[139, "sage.combinat.matrices.latin.LatinSquare.clear_cells"]], "coin() (in module sage.combinat.matrices.latin)": [[139, "sage.combinat.matrices.latin.coin"]], "column() (sage.combinat.matrices.latin.latinsquare method)": [[139, "sage.combinat.matrices.latin.LatinSquare.column"]], "column_containing_sym() (in module sage.combinat.matrices.latin)": [[139, "sage.combinat.matrices.latin.column_containing_sym"]], "contained_in() (sage.combinat.matrices.latin.latinsquare method)": [[139, "sage.combinat.matrices.latin.LatinSquare.contained_in"]], "direct_product() (in module sage.combinat.matrices.latin)": [[139, "sage.combinat.matrices.latin.direct_product"]], "disjoint_mate_dlxcpp_rows_and_map() (sage.combinat.matrices.latin.latinsquare method)": [[139, "sage.combinat.matrices.latin.LatinSquare.disjoint_mate_dlxcpp_rows_and_map"]], "dlxcpp_find_completions() (in module sage.combinat.matrices.latin)": [[139, "sage.combinat.matrices.latin.dlxcpp_find_completions"]], "dlxcpp_has_unique_completion() (sage.combinat.matrices.latin.latinsquare method)": [[139, "sage.combinat.matrices.latin.LatinSquare.dlxcpp_has_unique_completion"]], "dlxcpp_rows_and_map() (in module sage.combinat.matrices.latin)": [[139, "sage.combinat.matrices.latin.dlxcpp_rows_and_map"]], "dumps() (sage.combinat.matrices.latin.latinsquare method)": [[139, "sage.combinat.matrices.latin.LatinSquare.dumps"]], "elementary_abelian_2group() (in module sage.combinat.matrices.latin)": [[139, "sage.combinat.matrices.latin.elementary_abelian_2group"]], "filled_cells_map() (sage.combinat.matrices.latin.latinsquare method)": [[139, "sage.combinat.matrices.latin.LatinSquare.filled_cells_map"]], "find_disjoint_mates() (sage.combinat.matrices.latin.latinsquare method)": [[139, "sage.combinat.matrices.latin.LatinSquare.find_disjoint_mates"]], "forward_circulant() (in module sage.combinat.matrices.latin)": [[139, "sage.combinat.matrices.latin.forward_circulant"]], "gcs() (sage.combinat.matrices.latin.latinsquare method)": [[139, "sage.combinat.matrices.latin.LatinSquare.gcs"]], "genus() (in module sage.combinat.matrices.latin)": [[139, "sage.combinat.matrices.latin.genus"]], "group_to_latinsquare() (in module sage.combinat.matrices.latin)": [[139, "sage.combinat.matrices.latin.group_to_LatinSquare"]], "is_bitrade() (in module sage.combinat.matrices.latin)": [[139, "sage.combinat.matrices.latin.is_bitrade"]], "is_completable() (sage.combinat.matrices.latin.latinsquare method)": [[139, "sage.combinat.matrices.latin.LatinSquare.is_completable"]], "is_disjoint() (in module sage.combinat.matrices.latin)": [[139, "sage.combinat.matrices.latin.is_disjoint"]], "is_empty_column() (sage.combinat.matrices.latin.latinsquare method)": [[139, "sage.combinat.matrices.latin.LatinSquare.is_empty_column"]], "is_empty_row() (sage.combinat.matrices.latin.latinsquare method)": [[139, "sage.combinat.matrices.latin.LatinSquare.is_empty_row"]], "is_latin_square() (sage.combinat.matrices.latin.latinsquare method)": [[139, "sage.combinat.matrices.latin.LatinSquare.is_latin_square"]], "is_partial_latin_square() (sage.combinat.matrices.latin.latinsquare method)": [[139, "sage.combinat.matrices.latin.LatinSquare.is_partial_latin_square"]], "is_primary_bitrade() (in module sage.combinat.matrices.latin)": [[139, "sage.combinat.matrices.latin.is_primary_bitrade"]], "is_row_and_col_balanced() (in module sage.combinat.matrices.latin)": [[139, "sage.combinat.matrices.latin.is_row_and_col_balanced"]], "is_same_shape() (in module sage.combinat.matrices.latin)": [[139, "sage.combinat.matrices.latin.is_same_shape"]], "is_uniquely_completable() (sage.combinat.matrices.latin.latinsquare method)": [[139, "sage.combinat.matrices.latin.LatinSquare.is_uniquely_completable"]], "isotopism() (in module sage.combinat.matrices.latin)": [[139, "sage.combinat.matrices.latin.isotopism"]], "latex() (sage.combinat.matrices.latin.latinsquare method)": [[139, "sage.combinat.matrices.latin.LatinSquare.latex"]], "list() (sage.combinat.matrices.latin.latinsquare method)": [[139, "sage.combinat.matrices.latin.LatinSquare.list"]], "ncols() (sage.combinat.matrices.latin.latinsquare method)": [[139, "sage.combinat.matrices.latin.LatinSquare.ncols"]], "next_conjugate() (in module sage.combinat.matrices.latin)": [[139, "sage.combinat.matrices.latin.next_conjugate"]], "nr_distinct_symbols() (sage.combinat.matrices.latin.latinsquare method)": [[139, "sage.combinat.matrices.latin.LatinSquare.nr_distinct_symbols"]], "nr_filled_cells() (sage.combinat.matrices.latin.latinsquare method)": [[139, "sage.combinat.matrices.latin.LatinSquare.nr_filled_cells"]], "nrows() (sage.combinat.matrices.latin.latinsquare method)": [[139, "sage.combinat.matrices.latin.LatinSquare.nrows"]], "p3_group_bitrade_generators() (in module sage.combinat.matrices.latin)": [[139, "sage.combinat.matrices.latin.p3_group_bitrade_generators"]], "permissable_values() (sage.combinat.matrices.latin.latinsquare method)": [[139, "sage.combinat.matrices.latin.LatinSquare.permissable_values"]], "pq_group_bitrade_generators() (in module sage.combinat.matrices.latin)": [[139, "sage.combinat.matrices.latin.pq_group_bitrade_generators"]], "random_empty_cell() (sage.combinat.matrices.latin.latinsquare method)": [[139, "sage.combinat.matrices.latin.LatinSquare.random_empty_cell"]], "row() (sage.combinat.matrices.latin.latinsquare method)": [[139, "sage.combinat.matrices.latin.LatinSquare.row"]], "row_containing_sym() (in module sage.combinat.matrices.latin)": [[139, "sage.combinat.matrices.latin.row_containing_sym"]], "sage.combinat.matrices.latin": [[139, "module-sage.combinat.matrices.latin"]], "set_immutable() (sage.combinat.matrices.latin.latinsquare method)": [[139, "sage.combinat.matrices.latin.LatinSquare.set_immutable"]], "tau1() (in module sage.combinat.matrices.latin)": [[139, "sage.combinat.matrices.latin.tau1"]], "tau123() (in module sage.combinat.matrices.latin)": [[139, "sage.combinat.matrices.latin.tau123"]], "tau2() (in module sage.combinat.matrices.latin)": [[139, "sage.combinat.matrices.latin.tau2"]], "tau3() (in module sage.combinat.matrices.latin)": [[139, "sage.combinat.matrices.latin.tau3"]], "tau_to_bitrade() (in module sage.combinat.matrices.latin)": [[139, "sage.combinat.matrices.latin.tau_to_bitrade"]], "top_left_empty_cell() (sage.combinat.matrices.latin.latinsquare method)": [[139, "sage.combinat.matrices.latin.LatinSquare.top_left_empty_cell"]], "vals_in_col() (sage.combinat.matrices.latin.latinsquare method)": [[139, "sage.combinat.matrices.latin.LatinSquare.vals_in_col"]], "vals_in_row() (sage.combinat.matrices.latin.latinsquare method)": [[139, "sage.combinat.matrices.latin.LatinSquare.vals_in_row"]], "doublylinkedlist (class in sage.combinat.misc)": [[140, "sage.combinat.misc.DoublyLinkedList"]], "iterablefunctioncall (class in sage.combinat.misc)": [[140, "sage.combinat.misc.IterableFunctionCall"]], "check_integer_list_constraints() (in module sage.combinat.misc)": [[140, "sage.combinat.misc.check_integer_list_constraints"]], "head() (sage.combinat.misc.doublylinkedlist method)": [[140, "sage.combinat.misc.DoublyLinkedList.head"]], "hide() (sage.combinat.misc.doublylinkedlist method)": [[140, "sage.combinat.misc.DoublyLinkedList.hide"]], "next() (sage.combinat.misc.doublylinkedlist method)": [[140, "sage.combinat.misc.DoublyLinkedList.next"]], "prev() (sage.combinat.misc.doublylinkedlist method)": [[140, "sage.combinat.misc.DoublyLinkedList.prev"]], "sage.combinat.misc": [[140, "module-sage.combinat.misc"]], "umbral_operation() (in module sage.combinat.misc)": [[140, "sage.combinat.misc.umbral_operation"]], "unhide() (sage.combinat.misc.doublylinkedlist method)": [[140, "sage.combinat.misc.DoublyLinkedList.unhide"]], "element (sage.combinat.multiset_partition_into_sets_ordered.orderedmultisetpartitionsintosets attribute)": [[141, "sage.combinat.multiset_partition_into_sets_ordered.OrderedMultisetPartitionsIntoSets.Element"]], "minimajcrystal (class in sage.combinat.multiset_partition_into_sets_ordered)": [[141, "sage.combinat.multiset_partition_into_sets_ordered.MinimajCrystal"]], "minimajcrystal.element (class in sage.combinat.multiset_partition_into_sets_ordered)": [[141, "sage.combinat.multiset_partition_into_sets_ordered.MinimajCrystal.Element"]], "orderedmultisetpartitionintosets (class in sage.combinat.multiset_partition_into_sets_ordered)": [[141, "sage.combinat.multiset_partition_into_sets_ordered.OrderedMultisetPartitionIntoSets"]], "orderedmultisetpartitionsintosets (class in sage.combinat.multiset_partition_into_sets_ordered)": [[141, "sage.combinat.multiset_partition_into_sets_ordered.OrderedMultisetPartitionsIntoSets"]], "orderedmultisetpartitionsintosets_x (class in sage.combinat.multiset_partition_into_sets_ordered)": [[141, "sage.combinat.multiset_partition_into_sets_ordered.OrderedMultisetPartitionsIntoSets_X"]], "orderedmultisetpartitionsintosets_x_constraints (class in sage.combinat.multiset_partition_into_sets_ordered)": [[141, "sage.combinat.multiset_partition_into_sets_ordered.OrderedMultisetPartitionsIntoSets_X_constraints"]], "orderedmultisetpartitionsintosets_all_constraints (class in sage.combinat.multiset_partition_into_sets_ordered)": [[141, "sage.combinat.multiset_partition_into_sets_ordered.OrderedMultisetPartitionsIntoSets_all_constraints"]], "orderedmultisetpartitionsintosets_alph_d (class in sage.combinat.multiset_partition_into_sets_ordered)": [[141, "sage.combinat.multiset_partition_into_sets_ordered.OrderedMultisetPartitionsIntoSets_alph_d"]], "orderedmultisetpartitionsintosets_alph_d_constraints (class in sage.combinat.multiset_partition_into_sets_ordered)": [[141, "sage.combinat.multiset_partition_into_sets_ordered.OrderedMultisetPartitionsIntoSets_alph_d_constraints"]], "orderedmultisetpartitionsintosets_n (class in sage.combinat.multiset_partition_into_sets_ordered)": [[141, "sage.combinat.multiset_partition_into_sets_ordered.OrderedMultisetPartitionsIntoSets_n"]], "orderedmultisetpartitionsintosets_n_constraints (class in sage.combinat.multiset_partition_into_sets_ordered)": [[141, "sage.combinat.multiset_partition_into_sets_ordered.OrderedMultisetPartitionsIntoSets_n_constraints"]], "cardinality() (sage.combinat.multiset_partition_into_sets_ordered.orderedmultisetpartitionsintosets_x method)": [[141, "sage.combinat.multiset_partition_into_sets_ordered.OrderedMultisetPartitionsIntoSets_X.cardinality"]], "cardinality() (sage.combinat.multiset_partition_into_sets_ordered.orderedmultisetpartitionsintosets_alph_d method)": [[141, "sage.combinat.multiset_partition_into_sets_ordered.OrderedMultisetPartitionsIntoSets_alph_d.cardinality"]], "cardinality() (sage.combinat.multiset_partition_into_sets_ordered.orderedmultisetpartitionsintosets_n method)": [[141, "sage.combinat.multiset_partition_into_sets_ordered.OrderedMultisetPartitionsIntoSets_n.cardinality"]], "check() (sage.combinat.multiset_partition_into_sets_ordered.orderedmultisetpartitionintosets method)": [[141, "sage.combinat.multiset_partition_into_sets_ordered.OrderedMultisetPartitionIntoSets.check"]], "deconcatenate() (sage.combinat.multiset_partition_into_sets_ordered.orderedmultisetpartitionintosets method)": [[141, "sage.combinat.multiset_partition_into_sets_ordered.OrderedMultisetPartitionIntoSets.deconcatenate"]], "e() (sage.combinat.multiset_partition_into_sets_ordered.minimajcrystal.element method)": [[141, "sage.combinat.multiset_partition_into_sets_ordered.MinimajCrystal.Element.e"]], "f() (sage.combinat.multiset_partition_into_sets_ordered.minimajcrystal.element method)": [[141, "sage.combinat.multiset_partition_into_sets_ordered.MinimajCrystal.Element.f"]], "fatten() (sage.combinat.multiset_partition_into_sets_ordered.orderedmultisetpartitionintosets method)": [[141, "sage.combinat.multiset_partition_into_sets_ordered.OrderedMultisetPartitionIntoSets.fatten"]], "fatter() (sage.combinat.multiset_partition_into_sets_ordered.orderedmultisetpartitionintosets method)": [[141, "sage.combinat.multiset_partition_into_sets_ordered.OrderedMultisetPartitionIntoSets.fatter"]], "finer() (sage.combinat.multiset_partition_into_sets_ordered.orderedmultisetpartitionintosets method)": [[141, "sage.combinat.multiset_partition_into_sets_ordered.OrderedMultisetPartitionIntoSets.finer"]], "from_tableau() (sage.combinat.multiset_partition_into_sets_ordered.minimajcrystal method)": [[141, "sage.combinat.multiset_partition_into_sets_ordered.MinimajCrystal.from_tableau"]], "is_finer() (sage.combinat.multiset_partition_into_sets_ordered.orderedmultisetpartitionintosets method)": [[141, "sage.combinat.multiset_partition_into_sets_ordered.OrderedMultisetPartitionIntoSets.is_finer"]], "length() (sage.combinat.multiset_partition_into_sets_ordered.orderedmultisetpartitionintosets method)": [[141, "sage.combinat.multiset_partition_into_sets_ordered.OrderedMultisetPartitionIntoSets.length"]], "letters() (sage.combinat.multiset_partition_into_sets_ordered.orderedmultisetpartitionintosets method)": [[141, "sage.combinat.multiset_partition_into_sets_ordered.OrderedMultisetPartitionIntoSets.letters"]], "major_index() (sage.combinat.multiset_partition_into_sets_ordered.orderedmultisetpartitionintosets method)": [[141, "sage.combinat.multiset_partition_into_sets_ordered.OrderedMultisetPartitionIntoSets.major_index"]], "max_letter() (sage.combinat.multiset_partition_into_sets_ordered.orderedmultisetpartitionintosets method)": [[141, "sage.combinat.multiset_partition_into_sets_ordered.OrderedMultisetPartitionIntoSets.max_letter"]], "minimaj() (sage.combinat.multiset_partition_into_sets_ordered.orderedmultisetpartitionintosets method)": [[141, "sage.combinat.multiset_partition_into_sets_ordered.OrderedMultisetPartitionIntoSets.minimaj"]], "minimaj_blocks() (sage.combinat.multiset_partition_into_sets_ordered.orderedmultisetpartitionintosets method)": [[141, "sage.combinat.multiset_partition_into_sets_ordered.OrderedMultisetPartitionIntoSets.minimaj_blocks"]], "minimaj_word() (sage.combinat.multiset_partition_into_sets_ordered.orderedmultisetpartitionintosets method)": [[141, "sage.combinat.multiset_partition_into_sets_ordered.OrderedMultisetPartitionIntoSets.minimaj_word"]], "multiset() (sage.combinat.multiset_partition_into_sets_ordered.orderedmultisetpartitionintosets method)": [[141, "sage.combinat.multiset_partition_into_sets_ordered.OrderedMultisetPartitionIntoSets.multiset"]], "order() (sage.combinat.multiset_partition_into_sets_ordered.orderedmultisetpartitionintosets method)": [[141, "sage.combinat.multiset_partition_into_sets_ordered.OrderedMultisetPartitionIntoSets.order"]], "random_element() (sage.combinat.multiset_partition_into_sets_ordered.orderedmultisetpartitionsintosets_x method)": [[141, "sage.combinat.multiset_partition_into_sets_ordered.OrderedMultisetPartitionsIntoSets_X.random_element"]], "random_element() (sage.combinat.multiset_partition_into_sets_ordered.orderedmultisetpartitionsintosets_alph_d method)": [[141, "sage.combinat.multiset_partition_into_sets_ordered.OrderedMultisetPartitionsIntoSets_alph_d.random_element"]], "random_element() (sage.combinat.multiset_partition_into_sets_ordered.orderedmultisetpartitionsintosets_n method)": [[141, "sage.combinat.multiset_partition_into_sets_ordered.OrderedMultisetPartitionsIntoSets_n.random_element"]], "reversal() (sage.combinat.multiset_partition_into_sets_ordered.orderedmultisetpartitionintosets method)": [[141, "sage.combinat.multiset_partition_into_sets_ordered.OrderedMultisetPartitionIntoSets.reversal"]], "sage.combinat.multiset_partition_into_sets_ordered": [[141, "module-sage.combinat.multiset_partition_into_sets_ordered"]], "shape_from_cardinality() (sage.combinat.multiset_partition_into_sets_ordered.orderedmultisetpartitionintosets method)": [[141, "sage.combinat.multiset_partition_into_sets_ordered.OrderedMultisetPartitionIntoSets.shape_from_cardinality"]], "shape_from_size() (sage.combinat.multiset_partition_into_sets_ordered.orderedmultisetpartitionintosets method)": [[141, "sage.combinat.multiset_partition_into_sets_ordered.OrderedMultisetPartitionIntoSets.shape_from_size"]], "shuffle_product() (sage.combinat.multiset_partition_into_sets_ordered.orderedmultisetpartitionintosets method)": [[141, "sage.combinat.multiset_partition_into_sets_ordered.OrderedMultisetPartitionIntoSets.shuffle_product"]], "size() (sage.combinat.multiset_partition_into_sets_ordered.orderedmultisetpartitionintosets method)": [[141, "sage.combinat.multiset_partition_into_sets_ordered.OrderedMultisetPartitionIntoSets.size"]], "split_blocks() (sage.combinat.multiset_partition_into_sets_ordered.orderedmultisetpartitionintosets method)": [[141, "sage.combinat.multiset_partition_into_sets_ordered.OrderedMultisetPartitionIntoSets.split_blocks"]], "subset() (sage.combinat.multiset_partition_into_sets_ordered.orderedmultisetpartitionsintosets method)": [[141, "sage.combinat.multiset_partition_into_sets_ordered.OrderedMultisetPartitionsIntoSets.subset"]], "to_tableaux_words() (sage.combinat.multiset_partition_into_sets_ordered.minimajcrystal.element method)": [[141, "sage.combinat.multiset_partition_into_sets_ordered.MinimajCrystal.Element.to_tableaux_words"]], "to_tableaux_words() (sage.combinat.multiset_partition_into_sets_ordered.orderedmultisetpartitionintosets method)": [[141, "sage.combinat.multiset_partition_into_sets_ordered.OrderedMultisetPartitionIntoSets.to_tableaux_words"]], "val() (sage.combinat.multiset_partition_into_sets_ordered.minimajcrystal method)": [[141, "sage.combinat.multiset_partition_into_sets_ordered.MinimajCrystal.val"]], "weight() (sage.combinat.multiset_partition_into_sets_ordered.orderedmultisetpartitionintosets method)": [[141, "sage.combinat.multiset_partition_into_sets_ordered.OrderedMultisetPartitionIntoSets.weight"]], "sage.combinat.ncsf_qsym.all": [[142, "module-sage.combinat.ncsf_qsym.all"]], "coeff_dab() (in module sage.combinat.ncsf_qsym.combinatorics)": [[143, "sage.combinat.ncsf_qsym.combinatorics.coeff_dab"]], "coeff_ell() (in module sage.combinat.ncsf_qsym.combinatorics)": [[143, "sage.combinat.ncsf_qsym.combinatorics.coeff_ell"]], "coeff_lp() (in module sage.combinat.ncsf_qsym.combinatorics)": [[143, "sage.combinat.ncsf_qsym.combinatorics.coeff_lp"]], "coeff_pi() (in module sage.combinat.ncsf_qsym.combinatorics)": [[143, "sage.combinat.ncsf_qsym.combinatorics.coeff_pi"]], "coeff_sp() (in module sage.combinat.ncsf_qsym.combinatorics)": [[143, "sage.combinat.ncsf_qsym.combinatorics.coeff_sp"]], "compositions_order() (in module sage.combinat.ncsf_qsym.combinatorics)": [[143, "sage.combinat.ncsf_qsym.combinatorics.compositions_order"]], "m_to_s_stat() (in module sage.combinat.ncsf_qsym.combinatorics)": [[143, "sage.combinat.ncsf_qsym.combinatorics.m_to_s_stat"]], "number_of_ssrct() (in module sage.combinat.ncsf_qsym.combinatorics)": [[143, "sage.combinat.ncsf_qsym.combinatorics.number_of_SSRCT"]], "number_of_fct() (in module sage.combinat.ncsf_qsym.combinatorics)": [[143, "sage.combinat.ncsf_qsym.combinatorics.number_of_fCT"]], "sage.combinat.ncsf_qsym.combinatorics": [[143, "module-sage.combinat.ncsf_qsym.combinatorics"]], "algebramorphism (class in sage.combinat.ncsf_qsym.generic_basis_code)": [[144, "sage.combinat.ncsf_qsym.generic_basis_code.AlgebraMorphism"]], "basesofqsymorncsf (class in sage.combinat.ncsf_qsym.generic_basis_code)": [[144, "sage.combinat.ncsf_qsym.generic_basis_code.BasesOfQSymOrNCSF"]], "basesofqsymorncsf.elementmethods (class in sage.combinat.ncsf_qsym.generic_basis_code)": [[144, "sage.combinat.ncsf_qsym.generic_basis_code.BasesOfQSymOrNCSF.ElementMethods"]], "basesofqsymorncsf.parentmethods (class in sage.combinat.ncsf_qsym.generic_basis_code)": [[144, "sage.combinat.ncsf_qsym.generic_basis_code.BasesOfQSymOrNCSF.ParentMethods"]], "gradedmoduleswithinternalproduct (class in sage.combinat.ncsf_qsym.generic_basis_code)": [[144, "sage.combinat.ncsf_qsym.generic_basis_code.GradedModulesWithInternalProduct"]], "gradedmoduleswithinternalproduct.elementmethods (class in sage.combinat.ncsf_qsym.generic_basis_code)": [[144, "sage.combinat.ncsf_qsym.generic_basis_code.GradedModulesWithInternalProduct.ElementMethods"]], "gradedmoduleswithinternalproduct.parentmethods (class in sage.combinat.ncsf_qsym.generic_basis_code)": [[144, "sage.combinat.ncsf_qsym.generic_basis_code.GradedModulesWithInternalProduct.ParentMethods"]], "gradedmoduleswithinternalproduct.realizations (class in sage.combinat.ncsf_qsym.generic_basis_code)": [[144, "sage.combinat.ncsf_qsym.generic_basis_code.GradedModulesWithInternalProduct.Realizations"]], "gradedmoduleswithinternalproduct.realizations.parentmethods (class in sage.combinat.ncsf_qsym.generic_basis_code)": [[144, "sage.combinat.ncsf_qsym.generic_basis_code.GradedModulesWithInternalProduct.Realizations.ParentMethods"]], "alternating_sum_of_compositions() (sage.combinat.ncsf_qsym.generic_basis_code.basesofqsymorncsf.parentmethods method)": [[144, "sage.combinat.ncsf_qsym.generic_basis_code.BasesOfQSymOrNCSF.ParentMethods.alternating_sum_of_compositions"]], "alternating_sum_of_fatter_compositions() (sage.combinat.ncsf_qsym.generic_basis_code.basesofqsymorncsf.parentmethods method)": [[144, "sage.combinat.ncsf_qsym.generic_basis_code.BasesOfQSymOrNCSF.ParentMethods.alternating_sum_of_fatter_compositions"]], "alternating_sum_of_finer_compositions() (sage.combinat.ncsf_qsym.generic_basis_code.basesofqsymorncsf.parentmethods method)": [[144, "sage.combinat.ncsf_qsym.generic_basis_code.BasesOfQSymOrNCSF.ParentMethods.alternating_sum_of_finer_compositions"]], "counit_on_basis() (sage.combinat.ncsf_qsym.generic_basis_code.basesofqsymorncsf.parentmethods method)": [[144, "sage.combinat.ncsf_qsym.generic_basis_code.BasesOfQSymOrNCSF.ParentMethods.counit_on_basis"]], "degree() (sage.combinat.ncsf_qsym.generic_basis_code.basesofqsymorncsf.elementmethods method)": [[144, "sage.combinat.ncsf_qsym.generic_basis_code.BasesOfQSymOrNCSF.ElementMethods.degree"]], "degree_negation() (sage.combinat.ncsf_qsym.generic_basis_code.basesofqsymorncsf.elementmethods method)": [[144, "sage.combinat.ncsf_qsym.generic_basis_code.BasesOfQSymOrNCSF.ElementMethods.degree_negation"]], "degree_negation() (sage.combinat.ncsf_qsym.generic_basis_code.basesofqsymorncsf.parentmethods method)": [[144, "sage.combinat.ncsf_qsym.generic_basis_code.BasesOfQSymOrNCSF.ParentMethods.degree_negation"]], "degree_on_basis() (sage.combinat.ncsf_qsym.generic_basis_code.basesofqsymorncsf.parentmethods method)": [[144, "sage.combinat.ncsf_qsym.generic_basis_code.BasesOfQSymOrNCSF.ParentMethods.degree_on_basis"]], "duality_pairing() (sage.combinat.ncsf_qsym.generic_basis_code.basesofqsymorncsf.elementmethods method)": [[144, "sage.combinat.ncsf_qsym.generic_basis_code.BasesOfQSymOrNCSF.ElementMethods.duality_pairing"]], "duality_pairing() (sage.combinat.ncsf_qsym.generic_basis_code.basesofqsymorncsf.parentmethods method)": [[144, "sage.combinat.ncsf_qsym.generic_basis_code.BasesOfQSymOrNCSF.ParentMethods.duality_pairing"]], "duality_pairing_by_coercion() (sage.combinat.ncsf_qsym.generic_basis_code.basesofqsymorncsf.parentmethods method)": [[144, "sage.combinat.ncsf_qsym.generic_basis_code.BasesOfQSymOrNCSF.ParentMethods.duality_pairing_by_coercion"]], "duality_pairing_matrix() (sage.combinat.ncsf_qsym.generic_basis_code.basesofqsymorncsf.parentmethods method)": [[144, "sage.combinat.ncsf_qsym.generic_basis_code.BasesOfQSymOrNCSF.ParentMethods.duality_pairing_matrix"]], "internal_product() (sage.combinat.ncsf_qsym.generic_basis_code.gradedmoduleswithinternalproduct.elementmethods method)": [[144, "sage.combinat.ncsf_qsym.generic_basis_code.GradedModulesWithInternalProduct.ElementMethods.internal_product"]], "internal_product() (sage.combinat.ncsf_qsym.generic_basis_code.gradedmoduleswithinternalproduct.parentmethods method)": [[144, "sage.combinat.ncsf_qsym.generic_basis_code.GradedModulesWithInternalProduct.ParentMethods.internal_product"]], "internal_product_by_coercion() (sage.combinat.ncsf_qsym.generic_basis_code.gradedmoduleswithinternalproduct.realizations.parentmethods method)": [[144, "sage.combinat.ncsf_qsym.generic_basis_code.GradedModulesWithInternalProduct.Realizations.ParentMethods.internal_product_by_coercion"]], "internal_product_on_basis() (sage.combinat.ncsf_qsym.generic_basis_code.gradedmoduleswithinternalproduct.parentmethods method)": [[144, "sage.combinat.ncsf_qsym.generic_basis_code.GradedModulesWithInternalProduct.ParentMethods.internal_product_on_basis"]], "itensor() (sage.combinat.ncsf_qsym.generic_basis_code.gradedmoduleswithinternalproduct.elementmethods method)": [[144, "sage.combinat.ncsf_qsym.generic_basis_code.GradedModulesWithInternalProduct.ElementMethods.itensor"]], "itensor() (sage.combinat.ncsf_qsym.generic_basis_code.gradedmoduleswithinternalproduct.parentmethods method)": [[144, "sage.combinat.ncsf_qsym.generic_basis_code.GradedModulesWithInternalProduct.ParentMethods.itensor"]], "kronecker_product() (sage.combinat.ncsf_qsym.generic_basis_code.gradedmoduleswithinternalproduct.elementmethods method)": [[144, "sage.combinat.ncsf_qsym.generic_basis_code.GradedModulesWithInternalProduct.ElementMethods.kronecker_product"]], "kronecker_product() (sage.combinat.ncsf_qsym.generic_basis_code.gradedmoduleswithinternalproduct.parentmethods method)": [[144, "sage.combinat.ncsf_qsym.generic_basis_code.GradedModulesWithInternalProduct.ParentMethods.kronecker_product"]], "one_basis() (sage.combinat.ncsf_qsym.generic_basis_code.basesofqsymorncsf.parentmethods method)": [[144, "sage.combinat.ncsf_qsym.generic_basis_code.BasesOfQSymOrNCSF.ParentMethods.one_basis"]], "sage.combinat.ncsf_qsym.generic_basis_code": [[144, "module-sage.combinat.ncsf_qsym.generic_basis_code"]], "skew() (sage.combinat.ncsf_qsym.generic_basis_code.basesofqsymorncsf.parentmethods method)": [[144, "sage.combinat.ncsf_qsym.generic_basis_code.BasesOfQSymOrNCSF.ParentMethods.skew"]], "skew_by() (sage.combinat.ncsf_qsym.generic_basis_code.basesofqsymorncsf.elementmethods method)": [[144, "sage.combinat.ncsf_qsym.generic_basis_code.BasesOfQSymOrNCSF.ElementMethods.skew_by"]], "sum_of_fatter_compositions() (sage.combinat.ncsf_qsym.generic_basis_code.basesofqsymorncsf.parentmethods method)": [[144, "sage.combinat.ncsf_qsym.generic_basis_code.BasesOfQSymOrNCSF.ParentMethods.sum_of_fatter_compositions"]], "sum_of_finer_compositions() (sage.combinat.ncsf_qsym.generic_basis_code.basesofqsymorncsf.parentmethods method)": [[144, "sage.combinat.ncsf_qsym.generic_basis_code.BasesOfQSymOrNCSF.ParentMethods.sum_of_finer_compositions"]], "sum_of_partition_rearrangements() (sage.combinat.ncsf_qsym.generic_basis_code.basesofqsymorncsf.parentmethods method)": [[144, "sage.combinat.ncsf_qsym.generic_basis_code.BasesOfQSymOrNCSF.ParentMethods.sum_of_partition_rearrangements"]], "super_categories() (sage.combinat.ncsf_qsym.generic_basis_code.basesofqsymorncsf method)": [[144, "sage.combinat.ncsf_qsym.generic_basis_code.BasesOfQSymOrNCSF.super_categories"]], "super_categories() (sage.combinat.ncsf_qsym.generic_basis_code.gradedmoduleswithinternalproduct method)": [[144, "sage.combinat.ncsf_qsym.generic_basis_code.GradedModulesWithInternalProduct.super_categories"]], "i (sage.combinat.ncsf_qsym.ncsf.noncommutativesymmetricfunctions attribute)": [[145, "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.I"]], "l (sage.combinat.ncsf_qsym.ncsf.noncommutativesymmetricfunctions attribute)": [[145, "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.L"]], "noncommutativesymmetricfunctions (class in sage.combinat.ncsf_qsym.ncsf)": [[145, "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions"]], "noncommutativesymmetricfunctions.bases (class in sage.combinat.ncsf_qsym.ncsf)": [[145, "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.Bases"]], "noncommutativesymmetricfunctions.bases.elementmethods (class in sage.combinat.ncsf_qsym.ncsf)": [[145, "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.Bases.ElementMethods"]], "noncommutativesymmetricfunctions.bases.parentmethods (class in sage.combinat.ncsf_qsym.ncsf)": [[145, "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.Bases.ParentMethods"]], "noncommutativesymmetricfunctions.complete (class in sage.combinat.ncsf_qsym.ncsf)": [[145, "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.Complete"]], "noncommutativesymmetricfunctions.complete.element (class in sage.combinat.ncsf_qsym.ncsf)": [[145, "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.Complete.Element"]], "noncommutativesymmetricfunctions.elementary (class in sage.combinat.ncsf_qsym.ncsf)": [[145, "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.Elementary"]], "noncommutativesymmetricfunctions.elementary.element (class in sage.combinat.ncsf_qsym.ncsf)": [[145, "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.Elementary.Element"]], "noncommutativesymmetricfunctions.immaculate (class in sage.combinat.ncsf_qsym.ncsf)": [[145, "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.Immaculate"]], "noncommutativesymmetricfunctions.immaculate.element (class in sage.combinat.ncsf_qsym.ncsf)": [[145, "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.Immaculate.Element"]], "noncommutativesymmetricfunctions.monomial (class in sage.combinat.ncsf_qsym.ncsf)": [[145, "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.Monomial"]], "noncommutativesymmetricfunctions.multiplicativebases (class in sage.combinat.ncsf_qsym.ncsf)": [[145, "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.MultiplicativeBases"]], "noncommutativesymmetricfunctions.multiplicativebases.parentmethods (class in sage.combinat.ncsf_qsym.ncsf)": [[145, "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.MultiplicativeBases.ParentMethods"]], "noncommutativesymmetricfunctions.multiplicativebasesongrouplikeelements (class in sage.combinat.ncsf_qsym.ncsf)": [[145, "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.MultiplicativeBasesOnGroupLikeElements"]], "noncommutativesymmetricfunctions.multiplicativebasesongrouplikeelements.parentmethods (class in sage.combinat.ncsf_qsym.ncsf)": [[145, "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.MultiplicativeBasesOnGroupLikeElements.ParentMethods"]], "noncommutativesymmetricfunctions.multiplicativebasesonprimitiveelements (class in sage.combinat.ncsf_qsym.ncsf)": [[145, "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.MultiplicativeBasesOnPrimitiveElements"]], "noncommutativesymmetricfunctions.multiplicativebasesonprimitiveelements.parentmethods (class in sage.combinat.ncsf_qsym.ncsf)": [[145, "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.MultiplicativeBasesOnPrimitiveElements.ParentMethods"]], "noncommutativesymmetricfunctions.phi (class in sage.combinat.ncsf_qsym.ncsf)": [[145, "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.Phi"]], "noncommutativesymmetricfunctions.phi.element (class in sage.combinat.ncsf_qsym.ncsf)": [[145, "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.Phi.Element"]], "noncommutativesymmetricfunctions.psi (class in sage.combinat.ncsf_qsym.ncsf)": [[145, "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.Psi"]], "noncommutativesymmetricfunctions.psi.element (class in sage.combinat.ncsf_qsym.ncsf)": [[145, "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.Psi.Element"]], "noncommutativesymmetricfunctions.ribbon (class in sage.combinat.ncsf_qsym.ncsf)": [[145, "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.Ribbon"]], "noncommutativesymmetricfunctions.ribbon.element (class in sage.combinat.ncsf_qsym.ncsf)": [[145, "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.Ribbon.Element"]], "noncommutativesymmetricfunctions.zassenhaus_left (class in sage.combinat.ncsf_qsym.ncsf)": [[145, "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.Zassenhaus_left"]], "noncommutativesymmetricfunctions.zassenhaus_right (class in sage.combinat.ncsf_qsym.ncsf)": [[145, "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.Zassenhaus_right"]], "noncommutativesymmetricfunctions.dualquasisymmetric_schur (class in sage.combinat.ncsf_qsym.ncsf)": [[145, "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.dualQuasisymmetric_Schur"]], "noncommutativesymmetricfunctions.dualyoungquasisymmetric_schur (class in sage.combinat.ncsf_qsym.ncsf)": [[145, "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.dualYoungQuasisymmetric_Schur"]], "r (sage.combinat.ncsf_qsym.ncsf.noncommutativesymmetricfunctions attribute)": [[145, "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.R"]], "s (sage.combinat.ncsf_qsym.ncsf.noncommutativesymmetricfunctions attribute)": [[145, "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.S"]], "zl (sage.combinat.ncsf_qsym.ncsf.noncommutativesymmetricfunctions attribute)": [[145, "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.ZL"]], "zr (sage.combinat.ncsf_qsym.ncsf.noncommutativesymmetricfunctions attribute)": [[145, "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.ZR"]], "a_realization() (sage.combinat.ncsf_qsym.ncsf.noncommutativesymmetricfunctions method)": [[145, "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.a_realization"]], "algebra_generators() (sage.combinat.ncsf_qsym.ncsf.noncommutativesymmetricfunctions.multiplicativebases.parentmethods method)": [[145, "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.MultiplicativeBases.ParentMethods.algebra_generators"]], "algebra_morphism() (sage.combinat.ncsf_qsym.ncsf.noncommutativesymmetricfunctions.multiplicativebases.parentmethods method)": [[145, "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.MultiplicativeBases.ParentMethods.algebra_morphism"]], "antipode() (sage.combinat.ncsf_qsym.ncsf.noncommutativesymmetricfunctions.multiplicativebases.parentmethods method)": [[145, "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.MultiplicativeBases.ParentMethods.antipode"]], "antipode_on_basis() (sage.combinat.ncsf_qsym.ncsf.noncommutativesymmetricfunctions.multiplicativebasesongrouplikeelements.parentmethods method)": [[145, "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.MultiplicativeBasesOnGroupLikeElements.ParentMethods.antipode_on_basis"]], "antipode_on_basis() (sage.combinat.ncsf_qsym.ncsf.noncommutativesymmetricfunctions.ribbon method)": [[145, "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.Ribbon.antipode_on_basis"]], "antipode_on_generators() (sage.combinat.ncsf_qsym.ncsf.noncommutativesymmetricfunctions.multiplicativebasesonprimitiveelements.parentmethods method)": [[145, "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.MultiplicativeBasesOnPrimitiveElements.ParentMethods.antipode_on_generators"]], "bernstein_creation_operator() (sage.combinat.ncsf_qsym.ncsf.noncommutativesymmetricfunctions.bases.elementmethods method)": [[145, "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.Bases.ElementMethods.bernstein_creation_operator"]], "bernstein_creation_operator() (sage.combinat.ncsf_qsym.ncsf.noncommutativesymmetricfunctions.immaculate.element method)": [[145, "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.Immaculate.Element.bernstein_creation_operator"]], "chi() (sage.combinat.ncsf_qsym.ncsf.noncommutativesymmetricfunctions.bases.elementmethods method)": [[145, "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.Bases.ElementMethods.chi"]], "complete (sage.combinat.ncsf_qsym.ncsf.noncommutativesymmetricfunctions attribute)": [[145, "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.complete"]], "coproduct() (sage.combinat.ncsf_qsym.ncsf.noncommutativesymmetricfunctions.multiplicativebases.parentmethods method)": [[145, "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.MultiplicativeBases.ParentMethods.coproduct"]], "coproduct_on_generators() (sage.combinat.ncsf_qsym.ncsf.noncommutativesymmetricfunctions.multiplicativebasesongrouplikeelements.parentmethods method)": [[145, "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.MultiplicativeBasesOnGroupLikeElements.ParentMethods.coproduct_on_generators"]], "coproduct_on_generators() (sage.combinat.ncsf_qsym.ncsf.noncommutativesymmetricfunctions.multiplicativebasesonprimitiveelements.parentmethods method)": [[145, "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.MultiplicativeBasesOnPrimitiveElements.ParentMethods.coproduct_on_generators"]], "dqs (sage.combinat.ncsf_qsym.ncsf.noncommutativesymmetricfunctions attribute)": [[145, "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.dQS"]], "dyqs (sage.combinat.ncsf_qsym.ncsf.noncommutativesymmetricfunctions attribute)": [[145, "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.dYQS"]], "dual() (sage.combinat.ncsf_qsym.ncsf.noncommutativesymmetricfunctions method)": [[145, "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.dual"]], "dual() (sage.combinat.ncsf_qsym.ncsf.noncommutativesymmetricfunctions.complete method)": [[145, "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.Complete.dual"]], "dual() (sage.combinat.ncsf_qsym.ncsf.noncommutativesymmetricfunctions.immaculate method)": [[145, "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.Immaculate.dual"]], "dual() (sage.combinat.ncsf_qsym.ncsf.noncommutativesymmetricfunctions.ribbon method)": [[145, "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.Ribbon.dual"]], "dual() (sage.combinat.ncsf_qsym.ncsf.noncommutativesymmetricfunctions.dualquasisymmetric_schur method)": [[145, "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.dualQuasisymmetric_Schur.dual"]], "dual() (sage.combinat.ncsf_qsym.ncsf.noncommutativesymmetricfunctions.dualyoungquasisymmetric_schur method)": [[145, "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.dualYoungQuasisymmetric_Schur.dual"]], "elementary (sage.combinat.ncsf_qsym.ncsf.noncommutativesymmetricfunctions attribute)": [[145, "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.elementary"]], "expand() (sage.combinat.ncsf_qsym.ncsf.noncommutativesymmetricfunctions.bases.elementmethods method)": [[145, "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.Bases.ElementMethods.expand"]], "immaculate_function() (sage.combinat.ncsf_qsym.ncsf.noncommutativesymmetricfunctions.bases.parentmethods method)": [[145, "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.Bases.ParentMethods.immaculate_function"]], "internal_product_on_basis() (sage.combinat.ncsf_qsym.ncsf.noncommutativesymmetricfunctions.complete method)": [[145, "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.Complete.internal_product_on_basis"]], "internal_product_on_basis_by_bracketing() (sage.combinat.ncsf_qsym.ncsf.noncommutativesymmetricfunctions.psi method)": [[145, "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.Psi.internal_product_on_basis_by_bracketing"]], "left_padded_kronecker_product() (sage.combinat.ncsf_qsym.ncsf.noncommutativesymmetricfunctions.bases.elementmethods method)": [[145, "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.Bases.ElementMethods.left_padded_kronecker_product"]], "monomial (sage.combinat.ncsf_qsym.ncsf.noncommutativesymmetricfunctions attribute)": [[145, "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.monomial"]], "nm (sage.combinat.ncsf_qsym.ncsf.noncommutativesymmetricfunctions attribute)": [[145, "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.nM"]], "omega_involution() (sage.combinat.ncsf_qsym.ncsf.noncommutativesymmetricfunctions.bases.elementmethods method)": [[145, "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.Bases.ElementMethods.omega_involution"]], "product_on_basis() (sage.combinat.ncsf_qsym.ncsf.noncommutativesymmetricfunctions.multiplicativebases.parentmethods method)": [[145, "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.MultiplicativeBases.ParentMethods.product_on_basis"]], "product_on_basis() (sage.combinat.ncsf_qsym.ncsf.noncommutativesymmetricfunctions.ribbon method)": [[145, "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.Ribbon.product_on_basis"]], "psi_involution() (sage.combinat.ncsf_qsym.ncsf.noncommutativesymmetricfunctions.bases.elementmethods method)": [[145, "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.Bases.ElementMethods.psi_involution"]], "psi_involution() (sage.combinat.ncsf_qsym.ncsf.noncommutativesymmetricfunctions.complete.element method)": [[145, "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.Complete.Element.psi_involution"]], "psi_involution() (sage.combinat.ncsf_qsym.ncsf.noncommutativesymmetricfunctions.elementary.element method)": [[145, "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.Elementary.Element.psi_involution"]], "psi_involution() (sage.combinat.ncsf_qsym.ncsf.noncommutativesymmetricfunctions.phi.element method)": [[145, "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.Phi.Element.psi_involution"]], "ribbon (sage.combinat.ncsf_qsym.ncsf.noncommutativesymmetricfunctions attribute)": [[145, "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.ribbon"]], "sage.combinat.ncsf_qsym.ncsf": [[145, "module-sage.combinat.ncsf_qsym.ncsf"]], "star_involution() (sage.combinat.ncsf_qsym.ncsf.noncommutativesymmetricfunctions.bases.elementmethods method)": [[145, "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.Bases.ElementMethods.star_involution"]], "star_involution() (sage.combinat.ncsf_qsym.ncsf.noncommutativesymmetricfunctions.elementary.element method)": [[145, "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.Elementary.Element.star_involution"]], "star_involution() (sage.combinat.ncsf_qsym.ncsf.noncommutativesymmetricfunctions.phi.element method)": [[145, "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.Phi.Element.star_involution"]], "star_involution() (sage.combinat.ncsf_qsym.ncsf.noncommutativesymmetricfunctions.ribbon.element method)": [[145, "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.Ribbon.Element.star_involution"]], "super_categories() (sage.combinat.ncsf_qsym.ncsf.noncommutativesymmetricfunctions.bases method)": [[145, "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.Bases.super_categories"]], "super_categories() (sage.combinat.ncsf_qsym.ncsf.noncommutativesymmetricfunctions.multiplicativebases method)": [[145, "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.MultiplicativeBases.super_categories"]], "super_categories() (sage.combinat.ncsf_qsym.ncsf.noncommutativesymmetricfunctions.multiplicativebasesongrouplikeelements method)": [[145, "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.MultiplicativeBasesOnGroupLikeElements.super_categories"]], "super_categories() (sage.combinat.ncsf_qsym.ncsf.noncommutativesymmetricfunctions.multiplicativebasesonprimitiveelements method)": [[145, "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.MultiplicativeBasesOnPrimitiveElements.super_categories"]], "to_descent_algebra() (sage.combinat.ncsf_qsym.ncsf.noncommutativesymmetricfunctions.bases.elementmethods method)": [[145, "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.Bases.ElementMethods.to_descent_algebra"]], "to_fqsym() (sage.combinat.ncsf_qsym.ncsf.noncommutativesymmetricfunctions.bases.elementmethods method)": [[145, "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.Bases.ElementMethods.to_fqsym"]], "to_fsym() (sage.combinat.ncsf_qsym.ncsf.noncommutativesymmetricfunctions.bases.elementmethods method)": [[145, "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.Bases.ElementMethods.to_fsym"]], "to_ncsym() (sage.combinat.ncsf_qsym.ncsf.noncommutativesymmetricfunctions.bases.elementmethods method)": [[145, "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.Bases.ElementMethods.to_ncsym"]], "to_symmetric_function() (sage.combinat.ncsf_qsym.ncsf.noncommutativesymmetricfunctions.bases.elementmethods method)": [[145, "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.Bases.ElementMethods.to_symmetric_function"]], "to_symmetric_function() (sage.combinat.ncsf_qsym.ncsf.noncommutativesymmetricfunctions.bases.parentmethods method)": [[145, "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.Bases.ParentMethods.to_symmetric_function"]], "to_symmetric_function() (sage.combinat.ncsf_qsym.ncsf.noncommutativesymmetricfunctions.complete method)": [[145, "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.Complete.to_symmetric_function"]], "to_symmetric_function() (sage.combinat.ncsf_qsym.ncsf.noncommutativesymmetricfunctions.multiplicativebases.parentmethods method)": [[145, "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.MultiplicativeBases.ParentMethods.to_symmetric_function"]], "to_symmetric_function_on_basis() (sage.combinat.ncsf_qsym.ncsf.noncommutativesymmetricfunctions.bases.parentmethods method)": [[145, "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.Bases.ParentMethods.to_symmetric_function_on_basis"]], "to_symmetric_function_on_basis() (sage.combinat.ncsf_qsym.ncsf.noncommutativesymmetricfunctions.complete method)": [[145, "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.Complete.to_symmetric_function_on_basis"]], "to_symmetric_function_on_basis() (sage.combinat.ncsf_qsym.ncsf.noncommutativesymmetricfunctions.ribbon method)": [[145, "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.Ribbon.to_symmetric_function_on_basis"]], "to_symmetric_function_on_basis() (sage.combinat.ncsf_qsym.ncsf.noncommutativesymmetricfunctions.dualquasisymmetric_schur method)": [[145, "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.dualQuasisymmetric_Schur.to_symmetric_function_on_basis"]], "to_symmetric_function_on_basis() (sage.combinat.ncsf_qsym.ncsf.noncommutativesymmetricfunctions.dualyoungquasisymmetric_schur method)": [[145, "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.dualYoungQuasisymmetric_Schur.to_symmetric_function_on_basis"]], "to_symmetric_function_on_generators() (sage.combinat.ncsf_qsym.ncsf.noncommutativesymmetricfunctions.multiplicativebases.parentmethods method)": [[145, "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.MultiplicativeBases.ParentMethods.to_symmetric_function_on_generators"]], "to_symmetric_group_algebra() (sage.combinat.ncsf_qsym.ncsf.noncommutativesymmetricfunctions.bases.elementmethods method)": [[145, "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.Bases.ElementMethods.to_symmetric_group_algebra"]], "verschiebung() (sage.combinat.ncsf_qsym.ncsf.noncommutativesymmetricfunctions.bases.elementmethods method)": [[145, "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.Bases.ElementMethods.verschiebung"]], "verschiebung() (sage.combinat.ncsf_qsym.ncsf.noncommutativesymmetricfunctions.elementary.element method)": [[145, "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.Elementary.Element.verschiebung"]], "verschiebung() (sage.combinat.ncsf_qsym.ncsf.noncommutativesymmetricfunctions.phi.element method)": [[145, "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.Phi.Element.verschiebung"]], "verschiebung() (sage.combinat.ncsf_qsym.ncsf.noncommutativesymmetricfunctions.psi.element method)": [[145, "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.Psi.Element.verschiebung"]], "verschiebung() (sage.combinat.ncsf_qsym.ncsf.noncommutativesymmetricfunctions.ribbon.element method)": [[145, "sage.combinat.ncsf_qsym.ncsf.NonCommutativeSymmetricFunctions.Ribbon.Element.verschiebung"]], "e (sage.combinat.ncsf_qsym.qsym.quasisymmetricfunctions attribute)": [[146, "sage.combinat.ncsf_qsym.qsym.QuasiSymmetricFunctions.E"]], "eulerian() (sage.combinat.ncsf_qsym.qsym.quasisymmetricfunctions.bases.parentmethods method)": [[146, "sage.combinat.ncsf_qsym.qsym.QuasiSymmetricFunctions.Bases.ParentMethods.Eulerian"]], "eulerian() (sage.combinat.ncsf_qsym.qsym.quasisymmetricfunctions.fundamental method)": [[146, "sage.combinat.ncsf_qsym.qsym.QuasiSymmetricFunctions.Fundamental.Eulerian"]], "f (sage.combinat.ncsf_qsym.qsym.quasisymmetricfunctions attribute)": [[146, "sage.combinat.ncsf_qsym.qsym.QuasiSymmetricFunctions.F"]], "m (sage.combinat.ncsf_qsym.qsym.quasisymmetricfunctions attribute)": [[146, "sage.combinat.ncsf_qsym.qsym.QuasiSymmetricFunctions.M"]], "qs (sage.combinat.ncsf_qsym.qsym.quasisymmetricfunctions attribute)": [[146, "sage.combinat.ncsf_qsym.qsym.QuasiSymmetricFunctions.QS"]], "quasisymmetricfunctions (class in sage.combinat.ncsf_qsym.qsym)": [[146, "sage.combinat.ncsf_qsym.qsym.QuasiSymmetricFunctions"]], "quasisymmetricfunctions.bases (class in sage.combinat.ncsf_qsym.qsym)": [[146, "sage.combinat.ncsf_qsym.qsym.QuasiSymmetricFunctions.Bases"]], "quasisymmetricfunctions.bases.elementmethods (class in sage.combinat.ncsf_qsym.qsym)": [[146, "sage.combinat.ncsf_qsym.qsym.QuasiSymmetricFunctions.Bases.ElementMethods"]], "quasisymmetricfunctions.bases.parentmethods (class in sage.combinat.ncsf_qsym.qsym)": [[146, "sage.combinat.ncsf_qsym.qsym.QuasiSymmetricFunctions.Bases.ParentMethods"]], "quasisymmetricfunctions.essential (class in sage.combinat.ncsf_qsym.qsym)": [[146, "sage.combinat.ncsf_qsym.qsym.QuasiSymmetricFunctions.Essential"]], "quasisymmetricfunctions.fundamental (class in sage.combinat.ncsf_qsym.qsym)": [[146, "sage.combinat.ncsf_qsym.qsym.QuasiSymmetricFunctions.Fundamental"]], "quasisymmetricfunctions.fundamental.element (class in sage.combinat.ncsf_qsym.qsym)": [[146, "sage.combinat.ncsf_qsym.qsym.QuasiSymmetricFunctions.Fundamental.Element"]], "quasisymmetricfunctions.hazewinkellambda (class in sage.combinat.ncsf_qsym.qsym)": [[146, "sage.combinat.ncsf_qsym.qsym.QuasiSymmetricFunctions.HazewinkelLambda"]], "quasisymmetricfunctions.monomial (class in sage.combinat.ncsf_qsym.qsym)": [[146, "sage.combinat.ncsf_qsym.qsym.QuasiSymmetricFunctions.Monomial"]], "quasisymmetricfunctions.monomial.element (class in sage.combinat.ncsf_qsym.qsym)": [[146, "sage.combinat.ncsf_qsym.qsym.QuasiSymmetricFunctions.Monomial.Element"]], "quasisymmetricfunctions.quasisymmetric_schur (class in sage.combinat.ncsf_qsym.qsym)": [[146, "sage.combinat.ncsf_qsym.qsym.QuasiSymmetricFunctions.Quasisymmetric_Schur"]], "quasisymmetricfunctions.young_quasisymmetric_schur (class in sage.combinat.ncsf_qsym.qsym)": [[146, "sage.combinat.ncsf_qsym.qsym.QuasiSymmetricFunctions.Young_Quasisymmetric_Schur"]], "quasisymmetricfunctions.dualimmaculate (class in sage.combinat.ncsf_qsym.qsym)": [[146, "sage.combinat.ncsf_qsym.qsym.QuasiSymmetricFunctions.dualImmaculate"]], "quasisymmetricfunctions.phi (class in sage.combinat.ncsf_qsym.qsym)": [[146, "sage.combinat.ncsf_qsym.qsym.QuasiSymmetricFunctions.phi"]], "quasisymmetricfunctions.psi (class in sage.combinat.ncsf_qsym.qsym)": [[146, "sage.combinat.ncsf_qsym.qsym.QuasiSymmetricFunctions.psi"]], "yqs (sage.combinat.ncsf_qsym.qsym.quasisymmetricfunctions attribute)": [[146, "sage.combinat.ncsf_qsym.qsym.QuasiSymmetricFunctions.YQS"]], "a_realization() (sage.combinat.ncsf_qsym.qsym.quasisymmetricfunctions method)": [[146, "sage.combinat.ncsf_qsym.qsym.QuasiSymmetricFunctions.a_realization"]], "antipode_on_basis() (sage.combinat.ncsf_qsym.qsym.quasisymmetricfunctions.essential method)": [[146, "sage.combinat.ncsf_qsym.qsym.QuasiSymmetricFunctions.Essential.antipode_on_basis"]], "antipode_on_basis() (sage.combinat.ncsf_qsym.qsym.quasisymmetricfunctions.fundamental method)": [[146, "sage.combinat.ncsf_qsym.qsym.QuasiSymmetricFunctions.Fundamental.antipode_on_basis"]], "antipode_on_basis() (sage.combinat.ncsf_qsym.qsym.quasisymmetricfunctions.monomial method)": [[146, "sage.combinat.ncsf_qsym.qsym.QuasiSymmetricFunctions.Monomial.antipode_on_basis"]], "coproduct_on_basis() (sage.combinat.ncsf_qsym.qsym.quasisymmetricfunctions.essential method)": [[146, "sage.combinat.ncsf_qsym.qsym.QuasiSymmetricFunctions.Essential.coproduct_on_basis"]], "coproduct_on_basis() (sage.combinat.ncsf_qsym.qsym.quasisymmetricfunctions.fundamental method)": [[146, "sage.combinat.ncsf_qsym.qsym.QuasiSymmetricFunctions.Fundamental.coproduct_on_basis"]], "coproduct_on_basis() (sage.combinat.ncsf_qsym.qsym.quasisymmetricfunctions.monomial method)": [[146, "sage.combinat.ncsf_qsym.qsym.QuasiSymmetricFunctions.Monomial.coproduct_on_basis"]], "di (sage.combinat.ncsf_qsym.qsym.quasisymmetricfunctions attribute)": [[146, "sage.combinat.ncsf_qsym.qsym.QuasiSymmetricFunctions.dI"]], "dendriform_leq() (sage.combinat.ncsf_qsym.qsym.quasisymmetricfunctions.bases.elementmethods method)": [[146, "sage.combinat.ncsf_qsym.qsym.QuasiSymmetricFunctions.Bases.ElementMethods.dendriform_leq"]], "dendriform_less() (sage.combinat.ncsf_qsym.qsym.quasisymmetricfunctions.bases.elementmethods method)": [[146, "sage.combinat.ncsf_qsym.qsym.QuasiSymmetricFunctions.Bases.ElementMethods.dendriform_less"]], "dual() (sage.combinat.ncsf_qsym.qsym.quasisymmetricfunctions method)": [[146, "sage.combinat.ncsf_qsym.qsym.QuasiSymmetricFunctions.dual"]], "dual() (sage.combinat.ncsf_qsym.qsym.quasisymmetricfunctions.fundamental method)": [[146, "sage.combinat.ncsf_qsym.qsym.QuasiSymmetricFunctions.Fundamental.dual"]], "dual() (sage.combinat.ncsf_qsym.qsym.quasisymmetricfunctions.monomial method)": [[146, "sage.combinat.ncsf_qsym.qsym.QuasiSymmetricFunctions.Monomial.dual"]], "dual() (sage.combinat.ncsf_qsym.qsym.quasisymmetricfunctions.quasisymmetric_schur method)": [[146, "sage.combinat.ncsf_qsym.qsym.QuasiSymmetricFunctions.Quasisymmetric_Schur.dual"]], "expand() (sage.combinat.ncsf_qsym.qsym.quasisymmetricfunctions.bases.elementmethods method)": [[146, "sage.combinat.ncsf_qsym.qsym.QuasiSymmetricFunctions.Bases.ElementMethods.expand"]], "expand() (sage.combinat.ncsf_qsym.qsym.quasisymmetricfunctions.monomial.element method)": [[146, "sage.combinat.ncsf_qsym.qsym.QuasiSymmetricFunctions.Monomial.Element.expand"]], "frobenius() (sage.combinat.ncsf_qsym.qsym.quasisymmetricfunctions.bases.elementmethods method)": [[146, "sage.combinat.ncsf_qsym.qsym.QuasiSymmetricFunctions.Bases.ElementMethods.frobenius"]], "from_polynomial() (sage.combinat.ncsf_qsym.qsym.quasisymmetricfunctions method)": [[146, "sage.combinat.ncsf_qsym.qsym.QuasiSymmetricFunctions.from_polynomial"]], "from_polynomial() (sage.combinat.ncsf_qsym.qsym.quasisymmetricfunctions.bases.parentmethods method)": [[146, "sage.combinat.ncsf_qsym.qsym.QuasiSymmetricFunctions.Bases.ParentMethods.from_polynomial"]], "internal_coproduct() (sage.combinat.ncsf_qsym.qsym.quasisymmetricfunctions.bases.elementmethods method)": [[146, "sage.combinat.ncsf_qsym.qsym.QuasiSymmetricFunctions.Bases.ElementMethods.internal_coproduct"]], "internal_coproduct() (sage.combinat.ncsf_qsym.qsym.quasisymmetricfunctions.fundamental.element method)": [[146, "sage.combinat.ncsf_qsym.qsym.QuasiSymmetricFunctions.Fundamental.Element.internal_coproduct"]], "is_symmetric() (sage.combinat.ncsf_qsym.qsym.quasisymmetricfunctions.bases.elementmethods method)": [[146, "sage.combinat.ncsf_qsym.qsym.QuasiSymmetricFunctions.Bases.ElementMethods.is_symmetric"]], "is_symmetric() (sage.combinat.ncsf_qsym.qsym.quasisymmetricfunctions.monomial.element method)": [[146, "sage.combinat.ncsf_qsym.qsym.QuasiSymmetricFunctions.Monomial.Element.is_symmetric"]], "kronecker_coproduct() (sage.combinat.ncsf_qsym.qsym.quasisymmetricfunctions.bases.elementmethods method)": [[146, "sage.combinat.ncsf_qsym.qsym.QuasiSymmetricFunctions.Bases.ElementMethods.kronecker_coproduct"]], "kronecker_coproduct() (sage.combinat.ncsf_qsym.qsym.quasisymmetricfunctions.fundamental.element method)": [[146, "sage.combinat.ncsf_qsym.qsym.QuasiSymmetricFunctions.Fundamental.Element.kronecker_coproduct"]], "lambda_of_monomial() (sage.combinat.ncsf_qsym.qsym.quasisymmetricfunctions.monomial method)": [[146, "sage.combinat.ncsf_qsym.qsym.QuasiSymmetricFunctions.Monomial.lambda_of_monomial"]], "omega_involution() (sage.combinat.ncsf_qsym.qsym.quasisymmetricfunctions.bases.elementmethods method)": [[146, "sage.combinat.ncsf_qsym.qsym.QuasiSymmetricFunctions.Bases.ElementMethods.omega_involution"]], "product_on_basis() (sage.combinat.ncsf_qsym.qsym.quasisymmetricfunctions.essential method)": [[146, "sage.combinat.ncsf_qsym.qsym.QuasiSymmetricFunctions.Essential.product_on_basis"]], "product_on_basis() (sage.combinat.ncsf_qsym.qsym.quasisymmetricfunctions.hazewinkellambda method)": [[146, "sage.combinat.ncsf_qsym.qsym.QuasiSymmetricFunctions.HazewinkelLambda.product_on_basis"]], "product_on_basis() (sage.combinat.ncsf_qsym.qsym.quasisymmetricfunctions.monomial method)": [[146, "sage.combinat.ncsf_qsym.qsym.QuasiSymmetricFunctions.Monomial.product_on_basis"]], "psi_involution() (sage.combinat.ncsf_qsym.qsym.quasisymmetricfunctions.bases.elementmethods method)": [[146, "sage.combinat.ncsf_qsym.qsym.QuasiSymmetricFunctions.Bases.ElementMethods.psi_involution"]], "psi_involution() (sage.combinat.ncsf_qsym.qsym.quasisymmetricfunctions.monomial.element method)": [[146, "sage.combinat.ncsf_qsym.qsym.QuasiSymmetricFunctions.Monomial.Element.psi_involution"]], "sage.combinat.ncsf_qsym.qsym": [[146, "module-sage.combinat.ncsf_qsym.qsym"]], "star_involution() (sage.combinat.ncsf_qsym.qsym.quasisymmetricfunctions.bases.elementmethods method)": [[146, "sage.combinat.ncsf_qsym.qsym.QuasiSymmetricFunctions.Bases.ElementMethods.star_involution"]], "star_involution() (sage.combinat.ncsf_qsym.qsym.quasisymmetricfunctions.fundamental.element method)": [[146, "sage.combinat.ncsf_qsym.qsym.QuasiSymmetricFunctions.Fundamental.Element.star_involution"]], "super_categories() (sage.combinat.ncsf_qsym.qsym.quasisymmetricfunctions.bases method)": [[146, "sage.combinat.ncsf_qsym.qsym.QuasiSymmetricFunctions.Bases.super_categories"]], "to_symmetric_function() (sage.combinat.ncsf_qsym.qsym.quasisymmetricfunctions.bases.elementmethods method)": [[146, "sage.combinat.ncsf_qsym.qsym.QuasiSymmetricFunctions.Bases.ElementMethods.to_symmetric_function"]], "to_symmetric_function() (sage.combinat.ncsf_qsym.qsym.quasisymmetricfunctions.monomial.element method)": [[146, "sage.combinat.ncsf_qsym.qsym.QuasiSymmetricFunctions.Monomial.Element.to_symmetric_function"]], "sage.combinat.ncsf_qsym.tutorial": [[147, "module-sage.combinat.ncsf_qsym.tutorial"]], "sage.combinat.ncsym.all": [[148, "module-sage.combinat.ncsym.all"]], "multiplicativencsymbases (class in sage.combinat.ncsym.bases)": [[149, "sage.combinat.ncsym.bases.MultiplicativeNCSymBases"]], "multiplicativencsymbases.elementmethods (class in sage.combinat.ncsym.bases)": [[149, "sage.combinat.ncsym.bases.MultiplicativeNCSymBases.ElementMethods"]], "multiplicativencsymbases.parentmethods (class in sage.combinat.ncsym.bases)": [[149, "sage.combinat.ncsym.bases.MultiplicativeNCSymBases.ParentMethods"]], "ncsymbases (class in sage.combinat.ncsym.bases)": [[149, "sage.combinat.ncsym.bases.NCSymBases"]], "ncsymbases.elementmethods (class in sage.combinat.ncsym.bases)": [[149, "sage.combinat.ncsym.bases.NCSymBases.ElementMethods"]], "ncsymbases.parentmethods (class in sage.combinat.ncsym.bases)": [[149, "sage.combinat.ncsym.bases.NCSymBases.ParentMethods"]], "ncsymbasis_abstract (class in sage.combinat.ncsym.bases)": [[149, "sage.combinat.ncsym.bases.NCSymBasis_abstract"]], "ncsymdualbases (class in sage.combinat.ncsym.bases)": [[149, "sage.combinat.ncsym.bases.NCSymDualBases"]], "ncsymorncsymdualbases (class in sage.combinat.ncsym.bases)": [[149, "sage.combinat.ncsym.bases.NCSymOrNCSymDualBases"]], "ncsymorncsymdualbases.elementmethods (class in sage.combinat.ncsym.bases)": [[149, "sage.combinat.ncsym.bases.NCSymOrNCSymDualBases.ElementMethods"]], "ncsymorncsymdualbases.parentmethods (class in sage.combinat.ncsym.bases)": [[149, "sage.combinat.ncsym.bases.NCSymOrNCSymDualBases.ParentMethods"]], "counit_on_basis() (sage.combinat.ncsym.bases.ncsymorncsymdualbases.parentmethods method)": [[149, "sage.combinat.ncsym.bases.NCSymOrNCSymDualBases.ParentMethods.counit_on_basis"]], "duality_pairing() (sage.combinat.ncsym.bases.ncsymorncsymdualbases.elementmethods method)": [[149, "sage.combinat.ncsym.bases.NCSymOrNCSymDualBases.ElementMethods.duality_pairing"]], "duality_pairing() (sage.combinat.ncsym.bases.ncsymorncsymdualbases.parentmethods method)": [[149, "sage.combinat.ncsym.bases.NCSymOrNCSymDualBases.ParentMethods.duality_pairing"]], "duality_pairing_matrix() (sage.combinat.ncsym.bases.ncsymorncsymdualbases.parentmethods method)": [[149, "sage.combinat.ncsym.bases.NCSymOrNCSymDualBases.ParentMethods.duality_pairing_matrix"]], "expand() (sage.combinat.ncsym.bases.ncsymbases.elementmethods method)": [[149, "sage.combinat.ncsym.bases.NCSymBases.ElementMethods.expand"]], "from_symmetric_function() (sage.combinat.ncsym.bases.ncsymbases.parentmethods method)": [[149, "sage.combinat.ncsym.bases.NCSymBases.ParentMethods.from_symmetric_function"]], "internal_coproduct() (sage.combinat.ncsym.bases.ncsymbases.elementmethods method)": [[149, "sage.combinat.ncsym.bases.NCSymBases.ElementMethods.internal_coproduct"]], "internal_coproduct() (sage.combinat.ncsym.bases.ncsymbases.parentmethods method)": [[149, "sage.combinat.ncsym.bases.NCSymBases.ParentMethods.internal_coproduct"]], "internal_coproduct_by_coercion() (sage.combinat.ncsym.bases.ncsymbases.parentmethods method)": [[149, "sage.combinat.ncsym.bases.NCSymBases.ParentMethods.internal_coproduct_by_coercion"]], "internal_coproduct_on_basis() (sage.combinat.ncsym.bases.ncsymbases.parentmethods method)": [[149, "sage.combinat.ncsym.bases.NCSymBases.ParentMethods.internal_coproduct_on_basis"]], "omega() (sage.combinat.ncsym.bases.ncsymbases.elementmethods method)": [[149, "sage.combinat.ncsym.bases.NCSymBases.ElementMethods.omega"]], "one_basis() (sage.combinat.ncsym.bases.ncsymorncsymdualbases.parentmethods method)": [[149, "sage.combinat.ncsym.bases.NCSymOrNCSymDualBases.ParentMethods.one_basis"]], "primitive() (sage.combinat.ncsym.bases.ncsymbases.parentmethods method)": [[149, "sage.combinat.ncsym.bases.NCSymBases.ParentMethods.primitive"]], "product_on_basis() (sage.combinat.ncsym.bases.multiplicativencsymbases.parentmethods method)": [[149, "sage.combinat.ncsym.bases.MultiplicativeNCSymBases.ParentMethods.product_on_basis"]], "sage.combinat.ncsym.bases": [[149, "module-sage.combinat.ncsym.bases"]], "super_categories() (sage.combinat.ncsym.bases.multiplicativencsymbases method)": [[149, "sage.combinat.ncsym.bases.MultiplicativeNCSymBases.super_categories"]], "super_categories() (sage.combinat.ncsym.bases.ncsymbases method)": [[149, "sage.combinat.ncsym.bases.NCSymBases.super_categories"]], "super_categories() (sage.combinat.ncsym.bases.ncsymdualbases method)": [[149, "sage.combinat.ncsym.bases.NCSymDualBases.super_categories"]], "super_categories() (sage.combinat.ncsym.bases.ncsymorncsymdualbases method)": [[149, "sage.combinat.ncsym.bases.NCSymOrNCSymDualBases.super_categories"]], "to_symmetric_function() (sage.combinat.ncsym.bases.ncsymbases.elementmethods method)": [[149, "sage.combinat.ncsym.bases.NCSymBases.ElementMethods.to_symmetric_function"]], "to_wqsym() (sage.combinat.ncsym.bases.ncsymbases.elementmethods method)": [[149, "sage.combinat.ncsym.bases.NCSymBases.ElementMethods.to_wqsym"]], "symmetricfunctionsnoncommutingvariablesdual (class in sage.combinat.ncsym.dual)": [[150, "sage.combinat.ncsym.dual.SymmetricFunctionsNonCommutingVariablesDual"]], "symmetricfunctionsnoncommutingvariablesdual.w (class in sage.combinat.ncsym.dual)": [[150, "sage.combinat.ncsym.dual.SymmetricFunctionsNonCommutingVariablesDual.w"]], "symmetricfunctionsnoncommutingvariablesdual.w.element (class in sage.combinat.ncsym.dual)": [[150, "sage.combinat.ncsym.dual.SymmetricFunctionsNonCommutingVariablesDual.w.Element"]], "a_realization() (sage.combinat.ncsym.dual.symmetricfunctionsnoncommutingvariablesdual method)": [[150, "sage.combinat.ncsym.dual.SymmetricFunctionsNonCommutingVariablesDual.a_realization"]], "antipode_on_basis() (sage.combinat.ncsym.dual.symmetricfunctionsnoncommutingvariablesdual.w method)": [[150, "sage.combinat.ncsym.dual.SymmetricFunctionsNonCommutingVariablesDual.w.antipode_on_basis"]], "coproduct_on_basis() (sage.combinat.ncsym.dual.symmetricfunctionsnoncommutingvariablesdual.w method)": [[150, "sage.combinat.ncsym.dual.SymmetricFunctionsNonCommutingVariablesDual.w.coproduct_on_basis"]], "dual() (sage.combinat.ncsym.dual.symmetricfunctionsnoncommutingvariablesdual method)": [[150, "sage.combinat.ncsym.dual.SymmetricFunctionsNonCommutingVariablesDual.dual"]], "dual_basis() (sage.combinat.ncsym.dual.symmetricfunctionsnoncommutingvariablesdual.w method)": [[150, "sage.combinat.ncsym.dual.SymmetricFunctionsNonCommutingVariablesDual.w.dual_basis"]], "duality_pairing() (sage.combinat.ncsym.dual.symmetricfunctionsnoncommutingvariablesdual.w method)": [[150, "sage.combinat.ncsym.dual.SymmetricFunctionsNonCommutingVariablesDual.w.duality_pairing"]], "expand() (sage.combinat.ncsym.dual.symmetricfunctionsnoncommutingvariablesdual.w.element method)": [[150, "sage.combinat.ncsym.dual.SymmetricFunctionsNonCommutingVariablesDual.w.Element.expand"]], "is_symmetric() (sage.combinat.ncsym.dual.symmetricfunctionsnoncommutingvariablesdual.w.element method)": [[150, "sage.combinat.ncsym.dual.SymmetricFunctionsNonCommutingVariablesDual.w.Element.is_symmetric"]], "product_on_basis() (sage.combinat.ncsym.dual.symmetricfunctionsnoncommutingvariablesdual.w method)": [[150, "sage.combinat.ncsym.dual.SymmetricFunctionsNonCommutingVariablesDual.w.product_on_basis"]], "sage.combinat.ncsym.dual": [[150, "module-sage.combinat.ncsym.dual"]], "sum_of_partitions() (sage.combinat.ncsym.dual.symmetricfunctionsnoncommutingvariablesdual.w method)": [[150, "sage.combinat.ncsym.dual.SymmetricFunctionsNonCommutingVariablesDual.w.sum_of_partitions"]], "to_symmetric_function() (sage.combinat.ncsym.dual.symmetricfunctionsnoncommutingvariablesdual.w method)": [[150, "sage.combinat.ncsym.dual.SymmetricFunctionsNonCommutingVariablesDual.w.to_symmetric_function"]], "to_symmetric_function() (sage.combinat.ncsym.dual.symmetricfunctionsnoncommutingvariablesdual.w.element method)": [[150, "sage.combinat.ncsym.dual.SymmetricFunctionsNonCommutingVariablesDual.w.Element.to_symmetric_function"]], "symmetricfunctionsnoncommutingvariables (class in sage.combinat.ncsym.ncsym)": [[151, "sage.combinat.ncsym.ncsym.SymmetricFunctionsNonCommutingVariables"]], "symmetricfunctionsnoncommutingvariables.coarse_powersum (class in sage.combinat.ncsym.ncsym)": [[151, "sage.combinat.ncsym.ncsym.SymmetricFunctionsNonCommutingVariables.coarse_powersum"]], "symmetricfunctionsnoncommutingvariables.deformed_coarse_powersum (class in sage.combinat.ncsym.ncsym)": [[151, "sage.combinat.ncsym.ncsym.SymmetricFunctionsNonCommutingVariables.deformed_coarse_powersum"]], "symmetricfunctionsnoncommutingvariables.elementary (class in sage.combinat.ncsym.ncsym)": [[151, "sage.combinat.ncsym.ncsym.SymmetricFunctionsNonCommutingVariables.elementary"]], "symmetricfunctionsnoncommutingvariables.elementary.element (class in sage.combinat.ncsym.ncsym)": [[151, "sage.combinat.ncsym.ncsym.SymmetricFunctionsNonCommutingVariables.elementary.Element"]], "symmetricfunctionsnoncommutingvariables.homogeneous (class in sage.combinat.ncsym.ncsym)": [[151, "sage.combinat.ncsym.ncsym.SymmetricFunctionsNonCommutingVariables.homogeneous"]], "symmetricfunctionsnoncommutingvariables.homogeneous.element (class in sage.combinat.ncsym.ncsym)": [[151, "sage.combinat.ncsym.ncsym.SymmetricFunctionsNonCommutingVariables.homogeneous.Element"]], "symmetricfunctionsnoncommutingvariables.monomial (class in sage.combinat.ncsym.ncsym)": [[151, "sage.combinat.ncsym.ncsym.SymmetricFunctionsNonCommutingVariables.monomial"]], "symmetricfunctionsnoncommutingvariables.monomial.element (class in sage.combinat.ncsym.ncsym)": [[151, "sage.combinat.ncsym.ncsym.SymmetricFunctionsNonCommutingVariables.monomial.Element"]], "symmetricfunctionsnoncommutingvariables.powersum (class in sage.combinat.ncsym.ncsym)": [[151, "sage.combinat.ncsym.ncsym.SymmetricFunctionsNonCommutingVariables.powersum"]], "symmetricfunctionsnoncommutingvariables.powersum.element (class in sage.combinat.ncsym.ncsym)": [[151, "sage.combinat.ncsym.ncsym.SymmetricFunctionsNonCommutingVariables.powersum.Element"]], "symmetricfunctionsnoncommutingvariables.supercharacter (class in sage.combinat.ncsym.ncsym)": [[151, "sage.combinat.ncsym.ncsym.SymmetricFunctionsNonCommutingVariables.supercharacter"]], "symmetricfunctionsnoncommutingvariables.x_basis (class in sage.combinat.ncsym.ncsym)": [[151, "sage.combinat.ncsym.ncsym.SymmetricFunctionsNonCommutingVariables.x_basis"]], "a_realization() (sage.combinat.ncsym.ncsym.symmetricfunctionsnoncommutingvariables method)": [[151, "sage.combinat.ncsym.ncsym.SymmetricFunctionsNonCommutingVariables.a_realization"]], "antipode_on_basis() (sage.combinat.ncsym.ncsym.symmetricfunctionsnoncommutingvariables.powersum method)": [[151, "sage.combinat.ncsym.ncsym.SymmetricFunctionsNonCommutingVariables.powersum.antipode_on_basis"]], "chi (sage.combinat.ncsym.ncsym.symmetricfunctionsnoncommutingvariables attribute)": [[151, "sage.combinat.ncsym.ncsym.SymmetricFunctionsNonCommutingVariables.chi"]], "coproduct_on_basis() (sage.combinat.ncsym.ncsym.symmetricfunctionsnoncommutingvariables.monomial method)": [[151, "sage.combinat.ncsym.ncsym.SymmetricFunctionsNonCommutingVariables.monomial.coproduct_on_basis"]], "coproduct_on_basis() (sage.combinat.ncsym.ncsym.symmetricfunctionsnoncommutingvariables.powersum method)": [[151, "sage.combinat.ncsym.ncsym.SymmetricFunctionsNonCommutingVariables.powersum.coproduct_on_basis"]], "cp (sage.combinat.ncsym.ncsym.symmetricfunctionsnoncommutingvariables attribute)": [[151, "sage.combinat.ncsym.ncsym.SymmetricFunctionsNonCommutingVariables.cp"]], "dual() (sage.combinat.ncsym.ncsym.symmetricfunctionsnoncommutingvariables method)": [[151, "sage.combinat.ncsym.ncsym.SymmetricFunctionsNonCommutingVariables.dual"]], "dual_basis() (sage.combinat.ncsym.ncsym.symmetricfunctionsnoncommutingvariables.monomial method)": [[151, "sage.combinat.ncsym.ncsym.SymmetricFunctionsNonCommutingVariables.monomial.dual_basis"]], "duality_pairing() (sage.combinat.ncsym.ncsym.symmetricfunctionsnoncommutingvariables.monomial method)": [[151, "sage.combinat.ncsym.ncsym.SymmetricFunctionsNonCommutingVariables.monomial.duality_pairing"]], "e (sage.combinat.ncsym.ncsym.symmetricfunctionsnoncommutingvariables attribute)": [[151, "sage.combinat.ncsym.ncsym.SymmetricFunctionsNonCommutingVariables.e"]], "expand() (sage.combinat.ncsym.ncsym.symmetricfunctionsnoncommutingvariables.monomial.element method)": [[151, "sage.combinat.ncsym.ncsym.SymmetricFunctionsNonCommutingVariables.monomial.Element.expand"]], "from_symmetric_function() (sage.combinat.ncsym.ncsym.symmetricfunctionsnoncommutingvariables.monomial method)": [[151, "sage.combinat.ncsym.ncsym.SymmetricFunctionsNonCommutingVariables.monomial.from_symmetric_function"]], "h (sage.combinat.ncsym.ncsym.symmetricfunctionsnoncommutingvariables attribute)": [[151, "sage.combinat.ncsym.ncsym.SymmetricFunctionsNonCommutingVariables.h"]], "internal_coproduct_on_basis() (sage.combinat.ncsym.ncsym.symmetricfunctionsnoncommutingvariables.monomial method)": [[151, "sage.combinat.ncsym.ncsym.SymmetricFunctionsNonCommutingVariables.monomial.internal_coproduct_on_basis"]], "internal_coproduct_on_basis() (sage.combinat.ncsym.ncsym.symmetricfunctionsnoncommutingvariables.powersum method)": [[151, "sage.combinat.ncsym.ncsym.SymmetricFunctionsNonCommutingVariables.powersum.internal_coproduct_on_basis"]], "m (sage.combinat.ncsym.ncsym.symmetricfunctionsnoncommutingvariables attribute)": [[151, "sage.combinat.ncsym.ncsym.SymmetricFunctionsNonCommutingVariables.m"]], "matchings() (in module sage.combinat.ncsym.ncsym)": [[151, "sage.combinat.ncsym.ncsym.matchings"]], "nesting() (in module sage.combinat.ncsym.ncsym)": [[151, "sage.combinat.ncsym.ncsym.nesting"]], "omega() (sage.combinat.ncsym.ncsym.symmetricfunctionsnoncommutingvariables.elementary.element method)": [[151, "sage.combinat.ncsym.ncsym.SymmetricFunctionsNonCommutingVariables.elementary.Element.omega"]], "omega() (sage.combinat.ncsym.ncsym.symmetricfunctionsnoncommutingvariables.homogeneous.element method)": [[151, "sage.combinat.ncsym.ncsym.SymmetricFunctionsNonCommutingVariables.homogeneous.Element.omega"]], "p (sage.combinat.ncsym.ncsym.symmetricfunctionsnoncommutingvariables attribute)": [[151, "sage.combinat.ncsym.ncsym.SymmetricFunctionsNonCommutingVariables.p"]], "primitive() (sage.combinat.ncsym.ncsym.symmetricfunctionsnoncommutingvariables.powersum method)": [[151, "sage.combinat.ncsym.ncsym.SymmetricFunctionsNonCommutingVariables.powersum.primitive"]], "product_on_basis() (sage.combinat.ncsym.ncsym.symmetricfunctionsnoncommutingvariables.monomial method)": [[151, "sage.combinat.ncsym.ncsym.SymmetricFunctionsNonCommutingVariables.monomial.product_on_basis"]], "q() (sage.combinat.ncsym.ncsym.symmetricfunctionsnoncommutingvariables.deformed_coarse_powersum method)": [[151, "sage.combinat.ncsym.ncsym.SymmetricFunctionsNonCommutingVariables.deformed_coarse_powersum.q"]], "q() (sage.combinat.ncsym.ncsym.symmetricfunctionsnoncommutingvariables.supercharacter method)": [[151, "sage.combinat.ncsym.ncsym.SymmetricFunctionsNonCommutingVariables.supercharacter.q"]], "rho (sage.combinat.ncsym.ncsym.symmetricfunctionsnoncommutingvariables attribute)": [[151, "sage.combinat.ncsym.ncsym.SymmetricFunctionsNonCommutingVariables.rho"]], "sage.combinat.ncsym.ncsym": [[151, "module-sage.combinat.ncsym.ncsym"]], "sum_of_partitions() (sage.combinat.ncsym.ncsym.symmetricfunctionsnoncommutingvariables.monomial method)": [[151, "sage.combinat.ncsym.ncsym.SymmetricFunctionsNonCommutingVariables.monomial.sum_of_partitions"]], "to_symmetric_function() (sage.combinat.ncsym.ncsym.symmetricfunctionsnoncommutingvariables.elementary.element method)": [[151, "sage.combinat.ncsym.ncsym.SymmetricFunctionsNonCommutingVariables.elementary.Element.to_symmetric_function"]], "to_symmetric_function() (sage.combinat.ncsym.ncsym.symmetricfunctionsnoncommutingvariables.homogeneous.element method)": [[151, "sage.combinat.ncsym.ncsym.SymmetricFunctionsNonCommutingVariables.homogeneous.Element.to_symmetric_function"]], "to_symmetric_function() (sage.combinat.ncsym.ncsym.symmetricfunctionsnoncommutingvariables.monomial.element method)": [[151, "sage.combinat.ncsym.ncsym.SymmetricFunctionsNonCommutingVariables.monomial.Element.to_symmetric_function"]], "to_symmetric_function() (sage.combinat.ncsym.ncsym.symmetricfunctionsnoncommutingvariables.powersum.element method)": [[151, "sage.combinat.ncsym.ncsym.SymmetricFunctionsNonCommutingVariables.powersum.Element.to_symmetric_function"]], "x (sage.combinat.ncsym.ncsym.symmetricfunctionsnoncommutingvariables attribute)": [[151, "sage.combinat.ncsym.ncsym.SymmetricFunctionsNonCommutingVariables.x"]], "necklaces() (in module sage.combinat.necklace)": [[152, "sage.combinat.necklace.Necklaces"]], "necklaces_evaluation (class in sage.combinat.necklace)": [[152, "sage.combinat.necklace.Necklaces_evaluation"]], "cardinality() (sage.combinat.necklace.necklaces_evaluation method)": [[152, "sage.combinat.necklace.Necklaces_evaluation.cardinality"]], "content() (sage.combinat.necklace.necklaces_evaluation method)": [[152, "sage.combinat.necklace.Necklaces_evaluation.content"]], "sage.combinat.necklace": [[152, "module-sage.combinat.necklace"]], "element (sage.combinat.non_decreasing_parking_function.nondecreasingparkingfunctions_n attribute)": [[153, "sage.combinat.non_decreasing_parking_function.NonDecreasingParkingFunctions_n.Element"]], "nondecreasingparkingfunction (class in sage.combinat.non_decreasing_parking_function)": [[153, "sage.combinat.non_decreasing_parking_function.NonDecreasingParkingFunction"]], "nondecreasingparkingfunctions() (in module sage.combinat.non_decreasing_parking_function)": [[153, "sage.combinat.non_decreasing_parking_function.NonDecreasingParkingFunctions"]], "nondecreasingparkingfunctions_all (class in sage.combinat.non_decreasing_parking_function)": [[153, "sage.combinat.non_decreasing_parking_function.NonDecreasingParkingFunctions_all"]], "nondecreasingparkingfunctions_n (class in sage.combinat.non_decreasing_parking_function)": [[153, "sage.combinat.non_decreasing_parking_function.NonDecreasingParkingFunctions_n"]], "cardinality() (sage.combinat.non_decreasing_parking_function.nondecreasingparkingfunctions_n method)": [[153, "sage.combinat.non_decreasing_parking_function.NonDecreasingParkingFunctions_n.cardinality"]], "from_dyck_word() (sage.combinat.non_decreasing_parking_function.nondecreasingparkingfunction class method)": [[153, "sage.combinat.non_decreasing_parking_function.NonDecreasingParkingFunction.from_dyck_word"]], "grade() (sage.combinat.non_decreasing_parking_function.nondecreasingparkingfunction method)": [[153, "sage.combinat.non_decreasing_parking_function.NonDecreasingParkingFunction.grade"]], "graded_component() (sage.combinat.non_decreasing_parking_function.nondecreasingparkingfunctions_all method)": [[153, "sage.combinat.non_decreasing_parking_function.NonDecreasingParkingFunctions_all.graded_component"]], "is_a() (in module sage.combinat.non_decreasing_parking_function)": [[153, "sage.combinat.non_decreasing_parking_function.is_a"]], "one() (sage.combinat.non_decreasing_parking_function.nondecreasingparkingfunctions_n method)": [[153, "sage.combinat.non_decreasing_parking_function.NonDecreasingParkingFunctions_n.one"]], "random_element() (sage.combinat.non_decreasing_parking_function.nondecreasingparkingfunctions_n method)": [[153, "sage.combinat.non_decreasing_parking_function.NonDecreasingParkingFunctions_n.random_element"]], "sage.combinat.non_decreasing_parking_function": [[153, "module-sage.combinat.non_decreasing_parking_function"]], "to_dyck_word() (sage.combinat.non_decreasing_parking_function.nondecreasingparkingfunction method)": [[153, "sage.combinat.non_decreasing_parking_function.NonDecreasingParkingFunction.to_dyck_word"]], "element (sage.combinat.nu_dyck_word.nudyckwords attribute)": [[154, "sage.combinat.nu_dyck_word.NuDyckWords.Element"]], "nudyckword (class in sage.combinat.nu_dyck_word)": [[154, "sage.combinat.nu_dyck_word.NuDyckWord"]], "nudyckwords (class in sage.combinat.nu_dyck_word)": [[154, "sage.combinat.nu_dyck_word.NuDyckWords"]], "can_mutate() (sage.combinat.nu_dyck_word.nudyckword method)": [[154, "sage.combinat.nu_dyck_word.NuDyckWord.can_mutate"]], "cardinality() (sage.combinat.nu_dyck_word.nudyckwords method)": [[154, "sage.combinat.nu_dyck_word.NuDyckWords.cardinality"]], "height() (sage.combinat.nu_dyck_word.nudyckword method)": [[154, "sage.combinat.nu_dyck_word.NuDyckWord.height"]], "heights() (sage.combinat.nu_dyck_word.nudyckword method)": [[154, "sage.combinat.nu_dyck_word.NuDyckWord.heights"]], "horizontal_distance() (sage.combinat.nu_dyck_word.nudyckword method)": [[154, "sage.combinat.nu_dyck_word.NuDyckWord.horizontal_distance"]], "latex_options() (sage.combinat.nu_dyck_word.nudyckword method)": [[154, "sage.combinat.nu_dyck_word.NuDyckWord.latex_options"]], "length() (sage.combinat.nu_dyck_word.nudyckword method)": [[154, "sage.combinat.nu_dyck_word.NuDyckWord.length"]], "mutate() (sage.combinat.nu_dyck_word.nudyckword method)": [[154, "sage.combinat.nu_dyck_word.NuDyckWord.mutate"]], "options (sage.combinat.nu_dyck_word.nudyckwords attribute)": [[154, "sage.combinat.nu_dyck_word.NuDyckWords.options"]], "path() (sage.combinat.nu_dyck_word.nudyckword method)": [[154, "sage.combinat.nu_dyck_word.NuDyckWord.path"]], "path_weakly_above_other() (in module sage.combinat.nu_dyck_word)": [[154, "sage.combinat.nu_dyck_word.path_weakly_above_other"]], "plot() (sage.combinat.nu_dyck_word.nudyckword method)": [[154, "sage.combinat.nu_dyck_word.NuDyckWord.plot"]], "points() (sage.combinat.nu_dyck_word.nudyckword method)": [[154, "sage.combinat.nu_dyck_word.NuDyckWord.points"]], "pp() (sage.combinat.nu_dyck_word.nudyckword method)": [[154, "sage.combinat.nu_dyck_word.NuDyckWord.pp"]], "pretty_print() (sage.combinat.nu_dyck_word.nudyckword method)": [[154, "sage.combinat.nu_dyck_word.NuDyckWord.pretty_print"]], "replace_dyck_char() (in module sage.combinat.nu_dyck_word)": [[154, "sage.combinat.nu_dyck_word.replace_dyck_char"]], "replace_dyck_symbol() (in module sage.combinat.nu_dyck_word)": [[154, "sage.combinat.nu_dyck_word.replace_dyck_symbol"]], "sage.combinat.nu_dyck_word": [[154, "module-sage.combinat.nu_dyck_word"]], "set_latex_options() (sage.combinat.nu_dyck_word.nudyckword method)": [[154, "sage.combinat.nu_dyck_word.NuDyckWord.set_latex_options"]], "to_word_path() (in module sage.combinat.nu_dyck_word)": [[154, "sage.combinat.nu_dyck_word.to_word_path"]], "update_ndw_symbols() (in module sage.combinat.nu_dyck_word)": [[154, "sage.combinat.nu_dyck_word.update_ndw_symbols"]], "width() (sage.combinat.nu_dyck_word.nudyckword method)": [[154, "sage.combinat.nu_dyck_word.NuDyckWord.width"]], "widths() (sage.combinat.nu_dyck_word.nudyckword method)": [[154, "sage.combinat.nu_dyck_word.NuDyckWord.widths"]], "nutamarilattice() (in module sage.combinat.nu_tamari_lattice)": [[155, "sage.combinat.nu_tamari_lattice.NuTamariLattice"]], "sage.combinat.nu_tamari_lattice": [[155, "module-sage.combinat.nu_tamari_lattice"]], "element (sage.combinat.ordered_tree.labelledorderedtrees attribute)": [[156, "sage.combinat.ordered_tree.LabelledOrderedTrees.Element"]], "element (sage.combinat.ordered_tree.orderedtrees_all attribute)": [[156, "sage.combinat.ordered_tree.OrderedTrees_all.Element"]], "labelledorderedtree (class in sage.combinat.ordered_tree)": [[156, "sage.combinat.ordered_tree.LabelledOrderedTree"]], "labelledorderedtrees (class in sage.combinat.ordered_tree)": [[156, "sage.combinat.ordered_tree.LabelledOrderedTrees"]], "orderedtree (class in sage.combinat.ordered_tree)": [[156, "sage.combinat.ordered_tree.OrderedTree"]], "orderedtrees (class in sage.combinat.ordered_tree)": [[156, "sage.combinat.ordered_tree.OrderedTrees"]], "orderedtrees_all (class in sage.combinat.ordered_tree)": [[156, "sage.combinat.ordered_tree.OrderedTrees_all"]], "orderedtrees_size (class in sage.combinat.ordered_tree)": [[156, "sage.combinat.ordered_tree.OrderedTrees_size"]], "cardinality() (sage.combinat.ordered_tree.labelledorderedtrees method)": [[156, "sage.combinat.ordered_tree.LabelledOrderedTrees.cardinality"]], "cardinality() (sage.combinat.ordered_tree.orderedtrees_size method)": [[156, "sage.combinat.ordered_tree.OrderedTrees_size.cardinality"]], "element_class() (sage.combinat.ordered_tree.orderedtrees_size method)": [[156, "sage.combinat.ordered_tree.OrderedTrees_size.element_class"]], "is_empty() (sage.combinat.ordered_tree.orderedtree method)": [[156, "sage.combinat.ordered_tree.OrderedTree.is_empty"]], "labelled_trees() (sage.combinat.ordered_tree.labelledorderedtrees method)": [[156, "sage.combinat.ordered_tree.LabelledOrderedTrees.labelled_trees"]], "labelled_trees() (sage.combinat.ordered_tree.orderedtrees_all method)": [[156, "sage.combinat.ordered_tree.OrderedTrees_all.labelled_trees"]], "leaf() (sage.combinat.ordered_tree.orderedtrees method)": [[156, "sage.combinat.ordered_tree.OrderedTrees.leaf"]], "left_right_symmetry() (sage.combinat.ordered_tree.labelledorderedtree method)": [[156, "sage.combinat.ordered_tree.LabelledOrderedTree.left_right_symmetry"]], "left_right_symmetry() (sage.combinat.ordered_tree.orderedtree method)": [[156, "sage.combinat.ordered_tree.OrderedTree.left_right_symmetry"]], "normalize() (sage.combinat.ordered_tree.orderedtree method)": [[156, "sage.combinat.ordered_tree.OrderedTree.normalize"]], "plot() (sage.combinat.ordered_tree.orderedtree method)": [[156, "sage.combinat.ordered_tree.OrderedTree.plot"]], "random_element() (sage.combinat.ordered_tree.orderedtrees_size method)": [[156, "sage.combinat.ordered_tree.OrderedTrees_size.random_element"]], "sage.combinat.ordered_tree": [[156, "module-sage.combinat.ordered_tree"]], "sort_key() (sage.combinat.ordered_tree.labelledorderedtree method)": [[156, "sage.combinat.ordered_tree.LabelledOrderedTree.sort_key"]], "sort_key() (sage.combinat.ordered_tree.orderedtree method)": [[156, "sage.combinat.ordered_tree.OrderedTree.sort_key"]], "to_binary_tree_left_branch() (sage.combinat.ordered_tree.orderedtree method)": [[156, "sage.combinat.ordered_tree.OrderedTree.to_binary_tree_left_branch"]], "to_binary_tree_right_branch() (sage.combinat.ordered_tree.orderedtree method)": [[156, "sage.combinat.ordered_tree.OrderedTree.to_binary_tree_right_branch"]], "to_dyck_word() (sage.combinat.ordered_tree.orderedtree method)": [[156, "sage.combinat.ordered_tree.OrderedTree.to_dyck_word"]], "to_parallelogram_polyomino() (sage.combinat.ordered_tree.orderedtree method)": [[156, "sage.combinat.ordered_tree.OrderedTree.to_parallelogram_polyomino"]], "to_poset() (sage.combinat.ordered_tree.orderedtree method)": [[156, "sage.combinat.ordered_tree.OrderedTree.to_poset"]], "to_undirected_graph() (sage.combinat.ordered_tree.orderedtree method)": [[156, "sage.combinat.ordered_tree.OrderedTree.to_undirected_graph"]], "unlabelled_trees() (sage.combinat.ordered_tree.labelledorderedtrees method)": [[156, "sage.combinat.ordered_tree.LabelledOrderedTrees.unlabelled_trees"]], "unlabelled_trees() (sage.combinat.ordered_tree.orderedtrees_all method)": [[156, "sage.combinat.ordered_tree.OrderedTrees_all.unlabelled_trees"]], "ascii_art_table() (in module sage.combinat.output)": [[157, "sage.combinat.output.ascii_art_table"]], "ascii_art_table_russian() (in module sage.combinat.output)": [[157, "sage.combinat.output.ascii_art_table_russian"]], "box_exists() (in module sage.combinat.output)": [[157, "sage.combinat.output.box_exists"]], "sage.combinat.output": [[157, "module-sage.combinat.output"]], "tex_from_array() (in module sage.combinat.output)": [[157, "sage.combinat.output.tex_from_array"]], "tex_from_array_tuple() (in module sage.combinat.output)": [[157, "sage.combinat.output.tex_from_array_tuple"]], "tex_from_skew_array() (in module sage.combinat.output)": [[157, "sage.combinat.output.tex_from_skew_array"]], "localoptions (class in sage.combinat.parallelogram_polyomino)": [[158, "sage.combinat.parallelogram_polyomino.LocalOptions"]], "parallelogrampolyomino (class in sage.combinat.parallelogram_polyomino)": [[158, "sage.combinat.parallelogram_polyomino.ParallelogramPolyomino"]], "parallelogrampolyominoes() (in module sage.combinat.parallelogram_polyomino)": [[158, "sage.combinat.parallelogram_polyomino.ParallelogramPolyominoes"]], "parallelogrampolyominoesfactory (class in sage.combinat.parallelogram_polyomino)": [[158, "sage.combinat.parallelogram_polyomino.ParallelogramPolyominoesFactory"]], "parallelogrampolyominoesoptions (in module sage.combinat.parallelogram_polyomino)": [[158, "sage.combinat.parallelogram_polyomino.ParallelogramPolyominoesOptions"]], "parallelogrampolyominoes_all (class in sage.combinat.parallelogram_polyomino)": [[158, "sage.combinat.parallelogram_polyomino.ParallelogramPolyominoes_all"]], "parallelogrampolyominoes_size (class in sage.combinat.parallelogram_polyomino)": [[158, "sage.combinat.parallelogram_polyomino.ParallelogramPolyominoes_size"]], "an_element() (sage.combinat.parallelogram_polyomino.parallelogrampolyominoes_size method)": [[158, "sage.combinat.parallelogram_polyomino.ParallelogramPolyominoes_size.an_element"]], "area() (sage.combinat.parallelogram_polyomino.parallelogrampolyomino method)": [[158, "sage.combinat.parallelogram_polyomino.ParallelogramPolyomino.area"]], "bounce() (sage.combinat.parallelogram_polyomino.parallelogrampolyomino method)": [[158, "sage.combinat.parallelogram_polyomino.ParallelogramPolyomino.bounce"]], "bounce_path() (sage.combinat.parallelogram_polyomino.parallelogrampolyomino method)": [[158, "sage.combinat.parallelogram_polyomino.ParallelogramPolyomino.bounce_path"]], "box_is_node() (sage.combinat.parallelogram_polyomino.parallelogrampolyomino method)": [[158, "sage.combinat.parallelogram_polyomino.ParallelogramPolyomino.box_is_node"]], "box_is_root() (sage.combinat.parallelogram_polyomino.parallelogrampolyomino method)": [[158, "sage.combinat.parallelogram_polyomino.ParallelogramPolyomino.box_is_root"]], "cardinality() (sage.combinat.parallelogram_polyomino.parallelogrampolyominoes_size method)": [[158, "sage.combinat.parallelogram_polyomino.ParallelogramPolyominoes_size.cardinality"]], "cell_is_inside() (sage.combinat.parallelogram_polyomino.parallelogrampolyomino method)": [[158, "sage.combinat.parallelogram_polyomino.ParallelogramPolyomino.cell_is_inside"]], "check() (sage.combinat.parallelogram_polyomino.parallelogrampolyomino method)": [[158, "sage.combinat.parallelogram_polyomino.ParallelogramPolyomino.check"]], "check_element() (sage.combinat.parallelogram_polyomino.parallelogrampolyominoes_all method)": [[158, "sage.combinat.parallelogram_polyomino.ParallelogramPolyominoes_all.check_element"]], "check_element() (sage.combinat.parallelogram_polyomino.parallelogrampolyominoes_size method)": [[158, "sage.combinat.parallelogram_polyomino.ParallelogramPolyominoes_size.check_element"]], "default_tikz_options (in module sage.combinat.parallelogram_polyomino)": [[158, "sage.combinat.parallelogram_polyomino.default_tikz_options"]], "degree_convexity() (sage.combinat.parallelogram_polyomino.parallelogrampolyomino method)": [[158, "sage.combinat.parallelogram_polyomino.ParallelogramPolyomino.degree_convexity"]], "from_dyck_word() (sage.combinat.parallelogram_polyomino.parallelogrampolyomino static method)": [[158, "sage.combinat.parallelogram_polyomino.ParallelogramPolyomino.from_dyck_word"]], "geometry() (sage.combinat.parallelogram_polyomino.parallelogrampolyomino method)": [[158, "sage.combinat.parallelogram_polyomino.ParallelogramPolyomino.geometry"]], "get_bs_nodes() (sage.combinat.parallelogram_polyomino.parallelogrampolyomino method)": [[158, "sage.combinat.parallelogram_polyomino.ParallelogramPolyomino.get_BS_nodes"]], "get_array() (sage.combinat.parallelogram_polyomino.parallelogrampolyomino method)": [[158, "sage.combinat.parallelogram_polyomino.ParallelogramPolyomino.get_array"]], "get_left_bs_nodes() (sage.combinat.parallelogram_polyomino.parallelogrampolyomino method)": [[158, "sage.combinat.parallelogram_polyomino.ParallelogramPolyomino.get_left_BS_nodes"]], "get_node_position_from_box() (sage.combinat.parallelogram_polyomino.parallelogrampolyomino method)": [[158, "sage.combinat.parallelogram_polyomino.ParallelogramPolyomino.get_node_position_from_box"]], "get_options() (sage.combinat.parallelogram_polyomino.parallelogrampolyomino method)": [[158, "sage.combinat.parallelogram_polyomino.ParallelogramPolyomino.get_options"]], "get_options() (sage.combinat.parallelogram_polyomino.parallelogrampolyominoes_all method)": [[158, "sage.combinat.parallelogram_polyomino.ParallelogramPolyominoes_all.get_options"]], "get_options() (sage.combinat.parallelogram_polyomino.parallelogrampolyominoes_size method)": [[158, "sage.combinat.parallelogram_polyomino.ParallelogramPolyominoes_size.get_options"]], "get_right_bs_nodes() (sage.combinat.parallelogram_polyomino.parallelogrampolyomino method)": [[158, "sage.combinat.parallelogram_polyomino.ParallelogramPolyomino.get_right_BS_nodes"]], "get_tikz_options() (sage.combinat.parallelogram_polyomino.parallelogrampolyomino method)": [[158, "sage.combinat.parallelogram_polyomino.ParallelogramPolyomino.get_tikz_options"]], "height() (sage.combinat.parallelogram_polyomino.parallelogrampolyomino method)": [[158, "sage.combinat.parallelogram_polyomino.ParallelogramPolyomino.height"]], "heights() (sage.combinat.parallelogram_polyomino.parallelogrampolyomino method)": [[158, "sage.combinat.parallelogram_polyomino.ParallelogramPolyomino.heights"]], "is_flat() (sage.combinat.parallelogram_polyomino.parallelogrampolyomino method)": [[158, "sage.combinat.parallelogram_polyomino.ParallelogramPolyomino.is_flat"]], "is_k_directed() (sage.combinat.parallelogram_polyomino.parallelogrampolyomino method)": [[158, "sage.combinat.parallelogram_polyomino.ParallelogramPolyomino.is_k_directed"]], "keys() (sage.combinat.parallelogram_polyomino.localoptions method)": [[158, "sage.combinat.parallelogram_polyomino.LocalOptions.keys"]], "lower_heights() (sage.combinat.parallelogram_polyomino.parallelogrampolyomino method)": [[158, "sage.combinat.parallelogram_polyomino.ParallelogramPolyomino.lower_heights"]], "lower_path() (sage.combinat.parallelogram_polyomino.parallelogrampolyomino method)": [[158, "sage.combinat.parallelogram_polyomino.ParallelogramPolyomino.lower_path"]], "lower_widths() (sage.combinat.parallelogram_polyomino.parallelogrampolyomino method)": [[158, "sage.combinat.parallelogram_polyomino.ParallelogramPolyomino.lower_widths"]], "options (sage.combinat.parallelogram_polyomino.parallelogrampolyominoes_all attribute)": [[158, "sage.combinat.parallelogram_polyomino.ParallelogramPolyominoes_all.options"]], "options (sage.combinat.parallelogram_polyomino.parallelogrampolyominoes_size attribute)": [[158, "sage.combinat.parallelogram_polyomino.ParallelogramPolyominoes_size.options"]], "plot() (sage.combinat.parallelogram_polyomino.parallelogrampolyomino method)": [[158, "sage.combinat.parallelogram_polyomino.ParallelogramPolyomino.plot"]], "reflect() (sage.combinat.parallelogram_polyomino.parallelogrampolyomino method)": [[158, "sage.combinat.parallelogram_polyomino.ParallelogramPolyomino.reflect"]], "rotate() (sage.combinat.parallelogram_polyomino.parallelogrampolyomino method)": [[158, "sage.combinat.parallelogram_polyomino.ParallelogramPolyomino.rotate"]], "sage.combinat.parallelogram_polyomino": [[158, "module-sage.combinat.parallelogram_polyomino"]], "set_options() (sage.combinat.parallelogram_polyomino.parallelogrampolyomino method)": [[158, "sage.combinat.parallelogram_polyomino.ParallelogramPolyomino.set_options"]], "set_options() (sage.combinat.parallelogram_polyomino.parallelogrampolyominoes_all method)": [[158, "sage.combinat.parallelogram_polyomino.ParallelogramPolyominoes_all.set_options"]], "set_options() (sage.combinat.parallelogram_polyomino.parallelogrampolyominoes_size method)": [[158, "sage.combinat.parallelogram_polyomino.ParallelogramPolyominoes_size.set_options"]], "size() (sage.combinat.parallelogram_polyomino.parallelogrampolyomino method)": [[158, "sage.combinat.parallelogram_polyomino.ParallelogramPolyomino.size"]], "size() (sage.combinat.parallelogram_polyomino.parallelogrampolyominoes_size method)": [[158, "sage.combinat.parallelogram_polyomino.ParallelogramPolyominoes_size.size"]], "to_binary_tree() (sage.combinat.parallelogram_polyomino.parallelogrampolyomino method)": [[158, "sage.combinat.parallelogram_polyomino.ParallelogramPolyomino.to_binary_tree"]], "to_dyck_word() (sage.combinat.parallelogram_polyomino.parallelogrampolyomino method)": [[158, "sage.combinat.parallelogram_polyomino.ParallelogramPolyomino.to_dyck_word"]], "to_ordered_tree() (sage.combinat.parallelogram_polyomino.parallelogrampolyomino method)": [[158, "sage.combinat.parallelogram_polyomino.ParallelogramPolyomino.to_ordered_tree"]], "to_tikz() (sage.combinat.parallelogram_polyomino.parallelogrampolyomino method)": [[158, "sage.combinat.parallelogram_polyomino.ParallelogramPolyomino.to_tikz"]], "upper_heights() (sage.combinat.parallelogram_polyomino.parallelogrampolyomino method)": [[158, "sage.combinat.parallelogram_polyomino.ParallelogramPolyomino.upper_heights"]], "upper_path() (sage.combinat.parallelogram_polyomino.parallelogrampolyomino method)": [[158, "sage.combinat.parallelogram_polyomino.ParallelogramPolyomino.upper_path"]], "upper_widths() (sage.combinat.parallelogram_polyomino.parallelogrampolyomino method)": [[158, "sage.combinat.parallelogram_polyomino.ParallelogramPolyomino.upper_widths"]], "width() (sage.combinat.parallelogram_polyomino.parallelogrampolyomino method)": [[158, "sage.combinat.parallelogram_polyomino.ParallelogramPolyomino.width"]], "widths() (sage.combinat.parallelogram_polyomino.parallelogrampolyomino method)": [[158, "sage.combinat.parallelogram_polyomino.ParallelogramPolyomino.widths"]], "element (sage.combinat.parking_functions.parkingfunctions_all attribute)": [[159, "sage.combinat.parking_functions.ParkingFunctions_all.Element"]], "element (sage.combinat.parking_functions.parkingfunctions_n attribute)": [[159, "sage.combinat.parking_functions.ParkingFunctions_n.Element"]], "pf (in module sage.combinat.parking_functions)": [[159, "sage.combinat.parking_functions.PF"]], "parkingfunction (class in sage.combinat.parking_functions)": [[159, "sage.combinat.parking_functions.ParkingFunction"]], "parkingfunctions (class in sage.combinat.parking_functions)": [[159, "sage.combinat.parking_functions.ParkingFunctions"]], "parkingfunctions_all (class in sage.combinat.parking_functions)": [[159, "sage.combinat.parking_functions.ParkingFunctions_all"]], "parkingfunctions_n (class in sage.combinat.parking_functions)": [[159, "sage.combinat.parking_functions.ParkingFunctions_n"]], "area() (sage.combinat.parking_functions.parkingfunction method)": [[159, "sage.combinat.parking_functions.ParkingFunction.area"]], "cardinality() (sage.combinat.parking_functions.parkingfunctions_n method)": [[159, "sage.combinat.parking_functions.ParkingFunctions_n.cardinality"]], "cars_permutation() (sage.combinat.parking_functions.parkingfunction method)": [[159, "sage.combinat.parking_functions.ParkingFunction.cars_permutation"]], "characteristic_quasisymmetric_function() (sage.combinat.parking_functions.parkingfunction method)": [[159, "sage.combinat.parking_functions.ParkingFunction.characteristic_quasisymmetric_function"]], "check() (sage.combinat.parking_functions.parkingfunction method)": [[159, "sage.combinat.parking_functions.ParkingFunction.check"]], "diagonal_composition() (sage.combinat.parking_functions.parkingfunction method)": [[159, "sage.combinat.parking_functions.ParkingFunction.diagonal_composition"]], "diagonal_reading_word() (sage.combinat.parking_functions.parkingfunction method)": [[159, "sage.combinat.parking_functions.ParkingFunction.diagonal_reading_word"]], "diagonal_word() (sage.combinat.parking_functions.parkingfunction method)": [[159, "sage.combinat.parking_functions.ParkingFunction.diagonal_word"]], "dinv() (sage.combinat.parking_functions.parkingfunction method)": [[159, "sage.combinat.parking_functions.ParkingFunction.dinv"]], "dinversion_pairs() (sage.combinat.parking_functions.parkingfunction method)": [[159, "sage.combinat.parking_functions.ParkingFunction.dinversion_pairs"]], "from_labelled_dyck_word() (in module sage.combinat.parking_functions)": [[159, "sage.combinat.parking_functions.from_labelled_dyck_word"]], "from_labelling_and_area_sequence() (in module sage.combinat.parking_functions)": [[159, "sage.combinat.parking_functions.from_labelling_and_area_sequence"]], "grade() (sage.combinat.parking_functions.parkingfunction method)": [[159, "sage.combinat.parking_functions.ParkingFunction.grade"]], "graded_component() (sage.combinat.parking_functions.parkingfunctions_all method)": [[159, "sage.combinat.parking_functions.ParkingFunctions_all.graded_component"]], "ides() (sage.combinat.parking_functions.parkingfunction method)": [[159, "sage.combinat.parking_functions.ParkingFunction.ides"]], "ides_composition() (sage.combinat.parking_functions.parkingfunction method)": [[159, "sage.combinat.parking_functions.ParkingFunction.ides_composition"]], "is_a() (in module sage.combinat.parking_functions)": [[159, "sage.combinat.parking_functions.is_a"]], "jump() (sage.combinat.parking_functions.parkingfunction method)": [[159, "sage.combinat.parking_functions.ParkingFunction.jump"]], "jump_list() (sage.combinat.parking_functions.parkingfunction method)": [[159, "sage.combinat.parking_functions.ParkingFunction.jump_list"]], "luck() (sage.combinat.parking_functions.parkingfunction method)": [[159, "sage.combinat.parking_functions.ParkingFunction.luck"]], "lucky_cars() (sage.combinat.parking_functions.parkingfunction method)": [[159, "sage.combinat.parking_functions.ParkingFunction.lucky_cars"]], "parking_permutation() (sage.combinat.parking_functions.parkingfunction method)": [[159, "sage.combinat.parking_functions.ParkingFunction.parking_permutation"]], "pretty_print() (sage.combinat.parking_functions.parkingfunction method)": [[159, "sage.combinat.parking_functions.ParkingFunction.pretty_print"]], "primary_dinversion_pairs() (sage.combinat.parking_functions.parkingfunction method)": [[159, "sage.combinat.parking_functions.ParkingFunction.primary_dinversion_pairs"]], "random_element() (sage.combinat.parking_functions.parkingfunctions_n method)": [[159, "sage.combinat.parking_functions.ParkingFunctions_n.random_element"]], "sage.combinat.parking_functions": [[159, "module-sage.combinat.parking_functions"]], "secondary_dinversion_pairs() (sage.combinat.parking_functions.parkingfunction method)": [[159, "sage.combinat.parking_functions.ParkingFunction.secondary_dinversion_pairs"]], "to_nondecreasingparkingfunction() (sage.combinat.parking_functions.parkingfunction method)": [[159, "sage.combinat.parking_functions.ParkingFunction.to_NonDecreasingParkingFunction"]], "to_area_sequence() (sage.combinat.parking_functions.parkingfunction method)": [[159, "sage.combinat.parking_functions.ParkingFunction.to_area_sequence"]], "to_dyck_word() (sage.combinat.parking_functions.parkingfunction method)": [[159, "sage.combinat.parking_functions.ParkingFunction.to_dyck_word"]], "to_labelled_dyck_word() (sage.combinat.parking_functions.parkingfunction method)": [[159, "sage.combinat.parking_functions.ParkingFunction.to_labelled_dyck_word"]], "to_labelling_area_sequence_pair() (sage.combinat.parking_functions.parkingfunction method)": [[159, "sage.combinat.parking_functions.ParkingFunction.to_labelling_area_sequence_pair"]], "to_labelling_dyck_word_pair() (sage.combinat.parking_functions.parkingfunction method)": [[159, "sage.combinat.parking_functions.ParkingFunction.to_labelling_dyck_word_pair"]], "to_labelling_permutation() (sage.combinat.parking_functions.parkingfunction method)": [[159, "sage.combinat.parking_functions.ParkingFunction.to_labelling_permutation"]], "touch_composition() (sage.combinat.parking_functions.parkingfunction method)": [[159, "sage.combinat.parking_functions.ParkingFunction.touch_composition"]], "touch_points() (sage.combinat.parking_functions.parkingfunction method)": [[159, "sage.combinat.parking_functions.ParkingFunction.touch_points"]], "element (sage.combinat.partition.partitions attribute)": [[160, "sage.combinat.partition.Partitions.Element"]], "element (sage.combinat.partition.partitionsgreatesteq attribute)": [[160, "sage.combinat.partition.PartitionsGreatestEQ.Element"]], "element (sage.combinat.partition.partitionsgreatestle attribute)": [[160, "sage.combinat.partition.PartitionsGreatestLE.Element"]], "element (sage.combinat.partition.partitions_with_constraints attribute)": [[160, "sage.combinat.partition.Partitions_with_constraints.Element"]], "orderedpartitions (class in sage.combinat.partition)": [[160, "sage.combinat.partition.OrderedPartitions"]], "partition (class in sage.combinat.partition)": [[160, "sage.combinat.partition.Partition"]], "partitions (class in sage.combinat.partition)": [[160, "sage.combinat.partition.Partitions"]], "partitionsgreatesteq (class in sage.combinat.partition)": [[160, "sage.combinat.partition.PartitionsGreatestEQ"]], "partitionsgreatestle (class in sage.combinat.partition)": [[160, "sage.combinat.partition.PartitionsGreatestLE"]], "partitionsinbox (class in sage.combinat.partition)": [[160, "sage.combinat.partition.PartitionsInBox"]], "partitions_all (class in sage.combinat.partition)": [[160, "sage.combinat.partition.Partitions_all"]], "partitions_all_bounded (class in sage.combinat.partition)": [[160, "sage.combinat.partition.Partitions_all_bounded"]], "partitions_constraints (class in sage.combinat.partition)": [[160, "sage.combinat.partition.Partitions_constraints"]], "partitions_ending (class in sage.combinat.partition)": [[160, "sage.combinat.partition.Partitions_ending"]], "partitions_n (class in sage.combinat.partition)": [[160, "sage.combinat.partition.Partitions_n"]], "partitions_nk (class in sage.combinat.partition)": [[160, "sage.combinat.partition.Partitions_nk"]], "partitions_parts_in (class in sage.combinat.partition)": [[160, "sage.combinat.partition.Partitions_parts_in"]], "partitions_starting (class in sage.combinat.partition)": [[160, "sage.combinat.partition.Partitions_starting"]], "partitions_with_constraints (class in sage.combinat.partition)": [[160, "sage.combinat.partition.Partitions_with_constraints"]], "regularpartitions (class in sage.combinat.partition)": [[160, "sage.combinat.partition.RegularPartitions"]], "regularpartitions_all (class in sage.combinat.partition)": [[160, "sage.combinat.partition.RegularPartitions_all"]], "regularpartitions_bounded (class in sage.combinat.partition)": [[160, "sage.combinat.partition.RegularPartitions_bounded"]], "regularpartitions_n (class in sage.combinat.partition)": [[160, "sage.combinat.partition.RegularPartitions_n"]], "regularpartitions_truncated (class in sage.combinat.partition)": [[160, "sage.combinat.partition.RegularPartitions_truncated"]], "restrictedpartitions_all (class in sage.combinat.partition)": [[160, "sage.combinat.partition.RestrictedPartitions_all"]], "restrictedpartitions_generic (class in sage.combinat.partition)": [[160, "sage.combinat.partition.RestrictedPartitions_generic"]], "restrictedpartitions_n (class in sage.combinat.partition)": [[160, "sage.combinat.partition.RestrictedPartitions_n"]], "add_cell() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.add_cell"]], "add_horizontal_border_strip() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.add_horizontal_border_strip"]], "add_vertical_border_strip() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.add_vertical_border_strip"]], "addable_cells() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.addable_cells"]], "addable_cells_residue() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.addable_cells_residue"]], "arm_cells() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.arm_cells"]], "arm_length() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.arm_length"]], "arm_lengths() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.arm_lengths"]], "arms_legs_coeff() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.arms_legs_coeff"]], "atom() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.atom"]], "attacking_pairs() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.attacking_pairs"]], "aut() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.aut"]], "beta_numbers() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.beta_numbers"]], "block() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.block"]], "boundary() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.boundary"]], "cardinality() (sage.combinat.partition.orderedpartitions method)": [[160, "sage.combinat.partition.OrderedPartitions.cardinality"]], "cardinality() (sage.combinat.partition.partitionsgreatesteq method)": [[160, "sage.combinat.partition.PartitionsGreatestEQ.cardinality"]], "cardinality() (sage.combinat.partition.partitionsgreatestle method)": [[160, "sage.combinat.partition.PartitionsGreatestLE.cardinality"]], "cardinality() (sage.combinat.partition.partitionsinbox method)": [[160, "sage.combinat.partition.PartitionsInBox.cardinality"]], "cardinality() (sage.combinat.partition.partitions_n method)": [[160, "sage.combinat.partition.Partitions_n.cardinality"]], "cardinality() (sage.combinat.partition.partitions_nk method)": [[160, "sage.combinat.partition.Partitions_nk.cardinality"]], "cardinality() (sage.combinat.partition.partitions_parts_in method)": [[160, "sage.combinat.partition.Partitions_parts_in.cardinality"]], "cardinality() (sage.combinat.partition.regularpartitions_n method)": [[160, "sage.combinat.partition.RegularPartitions_n.cardinality"]], "cardinality() (sage.combinat.partition.restrictedpartitions_n method)": [[160, "sage.combinat.partition.RestrictedPartitions_n.cardinality"]], "cell_poset() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.cell_poset"]], "cells() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.cells"]], "centralizer_size() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.centralizer_size"]], "character_polynomial() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.character_polynomial"]], "components() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.components"]], "conjugacy_class_size() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.conjugacy_class_size"]], "conjugate() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.conjugate"]], "contains() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.contains"]], "content() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.content"]], "contents_tableau() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.contents_tableau"]], "core() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.core"]], "corners() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.corners"]], "corners_residue() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.corners_residue"]], "crank() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.crank"]], "defect() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.defect"]], "degree() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.degree"]], "dimension() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.dimension"]], "dominated_partitions() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.dominated_partitions"]], "dominates() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.dominates"]], "down() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.down"]], "down_list() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.down_list"]], "dual_equivalence_graph() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.dual_equivalence_graph"]], "ell() (sage.combinat.partition.regularpartitions method)": [[160, "sage.combinat.partition.RegularPartitions.ell"]], "ell() (sage.combinat.partition.restrictedpartitions_generic method)": [[160, "sage.combinat.partition.RestrictedPartitions_generic.ell"]], "evaluation() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.evaluation"]], "ferrers_diagram() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.ferrers_diagram"]], "first() (sage.combinat.partition.partitions_ending method)": [[160, "sage.combinat.partition.Partitions_ending.first"]], "first() (sage.combinat.partition.partitions_n method)": [[160, "sage.combinat.partition.Partitions_n.first"]], "first() (sage.combinat.partition.partitions_parts_in method)": [[160, "sage.combinat.partition.Partitions_parts_in.first"]], "first() (sage.combinat.partition.partitions_starting method)": [[160, "sage.combinat.partition.Partitions_starting.first"]], "frobenius_coordinates() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.frobenius_coordinates"]], "frobenius_rank() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.frobenius_rank"]], "from_beta_numbers() (sage.combinat.partition.partitions_all method)": [[160, "sage.combinat.partition.Partitions_all.from_beta_numbers"]], "from_core_and_quotient() (sage.combinat.partition.partitions_all method)": [[160, "sage.combinat.partition.Partitions_all.from_core_and_quotient"]], "from_exp() (sage.combinat.partition.partitions_all method)": [[160, "sage.combinat.partition.Partitions_all.from_exp"]], "from_frobenius_coordinates() (sage.combinat.partition.partitions_all method)": [[160, "sage.combinat.partition.Partitions_all.from_frobenius_coordinates"]], "from_kbounded_to_grassmannian() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.from_kbounded_to_grassmannian"]], "from_kbounded_to_reduced_word() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.from_kbounded_to_reduced_word"]], "from_zero_one() (sage.combinat.partition.partitions_all method)": [[160, "sage.combinat.partition.Partitions_all.from_zero_one"]], "garnir_tableau() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.garnir_tableau"]], "generalized_pochhammer_symbol() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.generalized_pochhammer_symbol"]], "get_part() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.get_part"]], "has_k_rectangle() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.has_k_rectangle"]], "has_rectangle() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.has_rectangle"]], "hook_length() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.hook_length"]], "hook_lengths() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.hook_lengths"]], "hook_polynomial() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.hook_polynomial"]], "hook_product() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.hook_product"]], "hooks() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.hooks"]], "horizontal_border_strip_cells() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.horizontal_border_strip_cells"]], "initial_column_tableau() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.initial_column_tableau"]], "initial_tableau() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.initial_tableau"]], "inside_corners() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.inside_corners"]], "inside_corners_residue() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.inside_corners_residue"]], "is_core() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.is_core"]], "is_empty() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.is_empty"]], "is_k_bounded() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.is_k_bounded"]], "is_k_irreducible() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.is_k_irreducible"]], "is_k_reducible() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.is_k_reducible"]], "is_regular() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.is_regular"]], "is_restricted() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.is_restricted"]], "is_symmetric() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.is_symmetric"]], "jacobi_trudi() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.jacobi_trudi"]], "k_atom() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.k_atom"]], "k_boundary() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.k_boundary"]], "k_column_lengths() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.k_column_lengths"]], "k_conjugate() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.k_conjugate"]], "k_interior() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.k_interior"]], "k_irreducible() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.k_irreducible"]], "k_rim() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.k_rim"]], "k_row_lengths() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.k_row_lengths"]], "k_size() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.k_size"]], "k_skew() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.k_skew"]], "k_split() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.k_split"]], "larger_lex() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.larger_lex"]], "last() (sage.combinat.partition.partitions_n method)": [[160, "sage.combinat.partition.Partitions_n.last"]], "last() (sage.combinat.partition.partitions_parts_in method)": [[160, "sage.combinat.partition.Partitions_parts_in.last"]], "leg_cells() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.leg_cells"]], "leg_length() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.leg_length"]], "leg_lengths() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.leg_lengths"]], "length() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.length"]], "level() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.level"]], "list() (sage.combinat.partition.orderedpartitions method)": [[160, "sage.combinat.partition.OrderedPartitions.list"]], "list() (sage.combinat.partition.partitionsinbox method)": [[160, "sage.combinat.partition.PartitionsInBox.list"]], "lower_hook() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.lower_hook"]], "lower_hook_lengths() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.lower_hook_lengths"]], "max_length() (sage.combinat.partition.regularpartitions_truncated method)": [[160, "sage.combinat.partition.RegularPartitions_truncated.max_length"]], "next() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.next"]], "next() (sage.combinat.partition.partitions_ending method)": [[160, "sage.combinat.partition.Partitions_ending.next"]], "next() (sage.combinat.partition.partitions_n method)": [[160, "sage.combinat.partition.Partitions_n.next"]], "next() (sage.combinat.partition.partitions_starting method)": [[160, "sage.combinat.partition.Partitions_starting.next"]], "next_within_bounds() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.next_within_bounds"]], "number_of_partitions() (in module sage.combinat.partition)": [[160, "sage.combinat.partition.number_of_partitions"]], "number_of_partitions_length() (in module sage.combinat.partition)": [[160, "sage.combinat.partition.number_of_partitions_length"]], "options (sage.combinat.partition.partitions attribute)": [[160, "sage.combinat.partition.Partitions.options"]], "options (sage.combinat.partition.partitionsgreatesteq attribute)": [[160, "sage.combinat.partition.PartitionsGreatestEQ.options"]], "options (sage.combinat.partition.partitionsgreatestle attribute)": [[160, "sage.combinat.partition.PartitionsGreatestLE.options"]], "options (sage.combinat.partition.partitions_with_constraints attribute)": [[160, "sage.combinat.partition.Partitions_with_constraints.options"]], "outer_rim() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.outer_rim"]], "outline() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.outline"]], "outside_corners() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.outside_corners"]], "outside_corners_residue() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.outside_corners_residue"]], "plancherel_measure() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.plancherel_measure"]], "power() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.power"]], "pp() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.pp"]], "prime_degree() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.prime_degree"]], "quotient() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.quotient"]], "random_element() (sage.combinat.partition.partitions_n method)": [[160, "sage.combinat.partition.Partitions_n.random_element"]], "random_element_plancherel() (sage.combinat.partition.partitions_n method)": [[160, "sage.combinat.partition.Partitions_n.random_element_plancherel"]], "random_element_uniform() (sage.combinat.partition.partitions_n method)": [[160, "sage.combinat.partition.Partitions_n.random_element_uniform"]], "reading_tableau() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.reading_tableau"]], "removable_cells() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.removable_cells"]], "removable_cells_residue() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.removable_cells_residue"]], "remove_cell() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.remove_cell"]], "remove_horizontal_border_strip() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.remove_horizontal_border_strip"]], "residue() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.residue"]], "rim() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.rim"]], "row_standard_tableaux() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.row_standard_tableaux"]], "sage.combinat.partition": [[160, "module-sage.combinat.partition"]], "sign() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.sign"]], "size() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.size"]], "specht_module() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.specht_module"]], "specht_module_dimension() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.specht_module_dimension"]], "standard_tableaux() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.standard_tableaux"]], "stretch() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.stretch"]], "subset() (sage.combinat.partition.partitions method)": [[160, "sage.combinat.partition.Partitions.subset"]], "subset() (sage.combinat.partition.partitions_all method)": [[160, "sage.combinat.partition.Partitions_all.subset"]], "subset() (sage.combinat.partition.partitions_n method)": [[160, "sage.combinat.partition.Partitions_n.subset"]], "subset() (sage.combinat.partition.partitions_nk method)": [[160, "sage.combinat.partition.Partitions_nk.subset"]], "suter_diagonal_slide() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.suter_diagonal_slide"]], "t_completion() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.t_completion"]], "to_core() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.to_core"]], "to_dyck_word() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.to_dyck_word"]], "to_exp() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.to_exp"]], "to_exp_dict() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.to_exp_dict"]], "to_list() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.to_list"]], "top_garnir_tableau() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.top_garnir_tableau"]], "up() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.up"]], "up_list() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.up_list"]], "upper_hook() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.upper_hook"]], "upper_hook_lengths() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.upper_hook_lengths"]], "vertical_border_strip_cells() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.vertical_border_strip_cells"]], "weighted_size() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.weighted_size"]], "young_subgroup() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.young_subgroup"]], "young_subgroup_generators() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.young_subgroup_generators"]], "zero_one_sequence() (sage.combinat.partition.partition method)": [[160, "sage.combinat.partition.Partition.zero_one_sequence"]], "element (sage.combinat.partition_algebra.setpartitionsak_k attribute)": [[161, "sage.combinat.partition_algebra.SetPartitionsAk_k.Element"]], "element (sage.combinat.partition_algebra.setpartitionsakhalf_k attribute)": [[161, "sage.combinat.partition_algebra.SetPartitionsAkhalf_k.Element"]], "partitionalgebraelement_ak (class in sage.combinat.partition_algebra)": [[161, "sage.combinat.partition_algebra.PartitionAlgebraElement_ak"]], "partitionalgebraelement_bk (class in sage.combinat.partition_algebra)": [[161, "sage.combinat.partition_algebra.PartitionAlgebraElement_bk"]], "partitionalgebraelement_generic (class in sage.combinat.partition_algebra)": [[161, "sage.combinat.partition_algebra.PartitionAlgebraElement_generic"]], "partitionalgebraelement_pk (class in sage.combinat.partition_algebra)": [[161, "sage.combinat.partition_algebra.PartitionAlgebraElement_pk"]], "partitionalgebraelement_prk (class in sage.combinat.partition_algebra)": [[161, "sage.combinat.partition_algebra.PartitionAlgebraElement_prk"]], "partitionalgebraelement_rk (class in sage.combinat.partition_algebra)": [[161, "sage.combinat.partition_algebra.PartitionAlgebraElement_rk"]], "partitionalgebraelement_sk (class in sage.combinat.partition_algebra)": [[161, "sage.combinat.partition_algebra.PartitionAlgebraElement_sk"]], "partitionalgebraelement_tk (class in sage.combinat.partition_algebra)": [[161, "sage.combinat.partition_algebra.PartitionAlgebraElement_tk"]], "partitionalgebra_ak (class in sage.combinat.partition_algebra)": [[161, "sage.combinat.partition_algebra.PartitionAlgebra_ak"]], "partitionalgebra_bk (class in sage.combinat.partition_algebra)": [[161, "sage.combinat.partition_algebra.PartitionAlgebra_bk"]], "partitionalgebra_generic (class in sage.combinat.partition_algebra)": [[161, "sage.combinat.partition_algebra.PartitionAlgebra_generic"]], "partitionalgebra_pk (class in sage.combinat.partition_algebra)": [[161, "sage.combinat.partition_algebra.PartitionAlgebra_pk"]], "partitionalgebra_prk (class in sage.combinat.partition_algebra)": [[161, "sage.combinat.partition_algebra.PartitionAlgebra_prk"]], "partitionalgebra_rk (class in sage.combinat.partition_algebra)": [[161, "sage.combinat.partition_algebra.PartitionAlgebra_rk"]], "partitionalgebra_sk (class in sage.combinat.partition_algebra)": [[161, "sage.combinat.partition_algebra.PartitionAlgebra_sk"]], "partitionalgebra_tk (class in sage.combinat.partition_algebra)": [[161, "sage.combinat.partition_algebra.PartitionAlgebra_tk"]], "setpartitionsak() (in module sage.combinat.partition_algebra)": [[161, "sage.combinat.partition_algebra.SetPartitionsAk"]], "setpartitionsak_k (class in sage.combinat.partition_algebra)": [[161, "sage.combinat.partition_algebra.SetPartitionsAk_k"]], "setpartitionsakhalf_k (class in sage.combinat.partition_algebra)": [[161, "sage.combinat.partition_algebra.SetPartitionsAkhalf_k"]], "setpartitionsbk() (in module sage.combinat.partition_algebra)": [[161, "sage.combinat.partition_algebra.SetPartitionsBk"]], "setpartitionsbk_k (class in sage.combinat.partition_algebra)": [[161, "sage.combinat.partition_algebra.SetPartitionsBk_k"]], "setpartitionsbkhalf_k (class in sage.combinat.partition_algebra)": [[161, "sage.combinat.partition_algebra.SetPartitionsBkhalf_k"]], "setpartitionsik() (in module sage.combinat.partition_algebra)": [[161, "sage.combinat.partition_algebra.SetPartitionsIk"]], "setpartitionsik_k (class in sage.combinat.partition_algebra)": [[161, "sage.combinat.partition_algebra.SetPartitionsIk_k"]], "setpartitionsikhalf_k (class in sage.combinat.partition_algebra)": [[161, "sage.combinat.partition_algebra.SetPartitionsIkhalf_k"]], "setpartitionsprk() (in module sage.combinat.partition_algebra)": [[161, "sage.combinat.partition_algebra.SetPartitionsPRk"]], "setpartitionsprk_k (class in sage.combinat.partition_algebra)": [[161, "sage.combinat.partition_algebra.SetPartitionsPRk_k"]], "setpartitionsprkhalf_k (class in sage.combinat.partition_algebra)": [[161, "sage.combinat.partition_algebra.SetPartitionsPRkhalf_k"]], "setpartitionspk() (in module sage.combinat.partition_algebra)": [[161, "sage.combinat.partition_algebra.SetPartitionsPk"]], "setpartitionspk_k (class in sage.combinat.partition_algebra)": [[161, "sage.combinat.partition_algebra.SetPartitionsPk_k"]], "setpartitionspkhalf_k (class in sage.combinat.partition_algebra)": [[161, "sage.combinat.partition_algebra.SetPartitionsPkhalf_k"]], "setpartitionsrk() (in module sage.combinat.partition_algebra)": [[161, "sage.combinat.partition_algebra.SetPartitionsRk"]], "setpartitionsrk_k (class in sage.combinat.partition_algebra)": [[161, "sage.combinat.partition_algebra.SetPartitionsRk_k"]], "setpartitionsrkhalf_k (class in sage.combinat.partition_algebra)": [[161, "sage.combinat.partition_algebra.SetPartitionsRkhalf_k"]], "setpartitionssk() (in module sage.combinat.partition_algebra)": [[161, "sage.combinat.partition_algebra.SetPartitionsSk"]], "setpartitionssk_k (class in sage.combinat.partition_algebra)": [[161, "sage.combinat.partition_algebra.SetPartitionsSk_k"]], "setpartitionsskhalf_k (class in sage.combinat.partition_algebra)": [[161, "sage.combinat.partition_algebra.SetPartitionsSkhalf_k"]], "setpartitionstk() (in module sage.combinat.partition_algebra)": [[161, "sage.combinat.partition_algebra.SetPartitionsTk"]], "setpartitionstk_k (class in sage.combinat.partition_algebra)": [[161, "sage.combinat.partition_algebra.SetPartitionsTk_k"]], "setpartitionstkhalf_k (class in sage.combinat.partition_algebra)": [[161, "sage.combinat.partition_algebra.SetPartitionsTkhalf_k"]], "setpartitionsxkelement (class in sage.combinat.partition_algebra)": [[161, "sage.combinat.partition_algebra.SetPartitionsXkElement"]], "cardinality() (sage.combinat.partition_algebra.setpartitionsbk_k method)": [[161, "sage.combinat.partition_algebra.SetPartitionsBk_k.cardinality"]], "cardinality() (sage.combinat.partition_algebra.setpartitionsbkhalf_k method)": [[161, "sage.combinat.partition_algebra.SetPartitionsBkhalf_k.cardinality"]], "cardinality() (sage.combinat.partition_algebra.setpartitionsik_k method)": [[161, "sage.combinat.partition_algebra.SetPartitionsIk_k.cardinality"]], "cardinality() (sage.combinat.partition_algebra.setpartitionsikhalf_k method)": [[161, "sage.combinat.partition_algebra.SetPartitionsIkhalf_k.cardinality"]], "cardinality() (sage.combinat.partition_algebra.setpartitionsprk_k method)": [[161, "sage.combinat.partition_algebra.SetPartitionsPRk_k.cardinality"]], "cardinality() (sage.combinat.partition_algebra.setpartitionsprkhalf_k method)": [[161, "sage.combinat.partition_algebra.SetPartitionsPRkhalf_k.cardinality"]], "cardinality() (sage.combinat.partition_algebra.setpartitionspk_k method)": [[161, "sage.combinat.partition_algebra.SetPartitionsPk_k.cardinality"]], "cardinality() (sage.combinat.partition_algebra.setpartitionspkhalf_k method)": [[161, "sage.combinat.partition_algebra.SetPartitionsPkhalf_k.cardinality"]], "cardinality() (sage.combinat.partition_algebra.setpartitionsrk_k method)": [[161, "sage.combinat.partition_algebra.SetPartitionsRk_k.cardinality"]], "cardinality() (sage.combinat.partition_algebra.setpartitionsrkhalf_k method)": [[161, "sage.combinat.partition_algebra.SetPartitionsRkhalf_k.cardinality"]], "cardinality() (sage.combinat.partition_algebra.setpartitionssk_k method)": [[161, "sage.combinat.partition_algebra.SetPartitionsSk_k.cardinality"]], "cardinality() (sage.combinat.partition_algebra.setpartitionsskhalf_k method)": [[161, "sage.combinat.partition_algebra.SetPartitionsSkhalf_k.cardinality"]], "cardinality() (sage.combinat.partition_algebra.setpartitionstk_k method)": [[161, "sage.combinat.partition_algebra.SetPartitionsTk_k.cardinality"]], "cardinality() (sage.combinat.partition_algebra.setpartitionstkhalf_k method)": [[161, "sage.combinat.partition_algebra.SetPartitionsTkhalf_k.cardinality"]], "check() (sage.combinat.partition_algebra.setpartitionsxkelement method)": [[161, "sage.combinat.partition_algebra.SetPartitionsXkElement.check"]], "identity() (in module sage.combinat.partition_algebra)": [[161, "sage.combinat.partition_algebra.identity"]], "is_planar() (in module sage.combinat.partition_algebra)": [[161, "sage.combinat.partition_algebra.is_planar"]], "one_basis() (sage.combinat.partition_algebra.partitionalgebra_generic method)": [[161, "sage.combinat.partition_algebra.PartitionAlgebra_generic.one_basis"]], "pair_to_graph() (in module sage.combinat.partition_algebra)": [[161, "sage.combinat.partition_algebra.pair_to_graph"]], "product_on_basis() (sage.combinat.partition_algebra.partitionalgebra_generic method)": [[161, "sage.combinat.partition_algebra.PartitionAlgebra_generic.product_on_basis"]], "propagating_number() (in module sage.combinat.partition_algebra)": [[161, "sage.combinat.partition_algebra.propagating_number"]], "sage.combinat.partition_algebra": [[161, "module-sage.combinat.partition_algebra"]], "set_partition_composition() (in module sage.combinat.partition_algebra)": [[161, "sage.combinat.partition_algebra.set_partition_composition"]], "to_graph() (in module sage.combinat.partition_algebra)": [[161, "sage.combinat.partition_algebra.to_graph"]], "to_set_partition() (in module sage.combinat.partition_algebra)": [[161, "sage.combinat.partition_algebra.to_set_partition"]], "element (sage.combinat.partition_kleshchev.kleshchevpartitions_size attribute)": [[162, "sage.combinat.partition_kleshchev.KleshchevPartitions_size.Element"]], "epsilon() (sage.combinat.partition_kleshchev.kleshchevcrystalmixin method)": [[162, "sage.combinat.partition_kleshchev.KleshchevCrystalMixin.Epsilon"], [162, "sage.combinat.partition_kleshchev.KleshchevCrystalMixin.epsilon"]], "kleshchevcrystalmixin (class in sage.combinat.partition_kleshchev)": [[162, "sage.combinat.partition_kleshchev.KleshchevCrystalMixin"]], "kleshchevpartition (class in sage.combinat.partition_kleshchev)": [[162, "sage.combinat.partition_kleshchev.KleshchevPartition"]], "kleshchevpartitioncrystal (class in sage.combinat.partition_kleshchev)": [[162, "sage.combinat.partition_kleshchev.KleshchevPartitionCrystal"]], "kleshchevpartitiontuple (class in sage.combinat.partition_kleshchev)": [[162, "sage.combinat.partition_kleshchev.KleshchevPartitionTuple"]], "kleshchevpartitiontuplecrystal (class in sage.combinat.partition_kleshchev)": [[162, "sage.combinat.partition_kleshchev.KleshchevPartitionTupleCrystal"]], "kleshchevpartitions (class in sage.combinat.partition_kleshchev)": [[162, "sage.combinat.partition_kleshchev.KleshchevPartitions"]], "kleshchevpartitions_all (class in sage.combinat.partition_kleshchev)": [[162, "sage.combinat.partition_kleshchev.KleshchevPartitions_all"]], "kleshchevpartitions_size (class in sage.combinat.partition_kleshchev)": [[162, "sage.combinat.partition_kleshchev.KleshchevPartitions_size"]], "phi() (sage.combinat.partition_kleshchev.kleshchevcrystalmixin method)": [[162, "sage.combinat.partition_kleshchev.KleshchevCrystalMixin.Phi"], [162, "sage.combinat.partition_kleshchev.KleshchevCrystalMixin.phi"]], "cogood_cells() (sage.combinat.partition_kleshchev.kleshchevpartition method)": [[162, "sage.combinat.partition_kleshchev.KleshchevPartition.cogood_cells"]], "cogood_cells() (sage.combinat.partition_kleshchev.kleshchevpartitiontuple method)": [[162, "sage.combinat.partition_kleshchev.KleshchevPartitionTuple.cogood_cells"]], "conormal_cells() (sage.combinat.partition_kleshchev.kleshchevpartition method)": [[162, "sage.combinat.partition_kleshchev.KleshchevPartition.conormal_cells"]], "conormal_cells() (sage.combinat.partition_kleshchev.kleshchevpartitiontuple method)": [[162, "sage.combinat.partition_kleshchev.KleshchevPartitionTuple.conormal_cells"]], "convention() (sage.combinat.partition_kleshchev.kleshchevpartitions method)": [[162, "sage.combinat.partition_kleshchev.KleshchevPartitions.convention"]], "e() (sage.combinat.partition_kleshchev.kleshchevpartitioncrystal method)": [[162, "sage.combinat.partition_kleshchev.KleshchevPartitionCrystal.e"]], "e() (sage.combinat.partition_kleshchev.kleshchevpartitiontuplecrystal method)": [[162, "sage.combinat.partition_kleshchev.KleshchevPartitionTupleCrystal.e"]], "f() (sage.combinat.partition_kleshchev.kleshchevpartitioncrystal method)": [[162, "sage.combinat.partition_kleshchev.KleshchevPartitionCrystal.f"]], "f() (sage.combinat.partition_kleshchev.kleshchevpartitiontuplecrystal method)": [[162, "sage.combinat.partition_kleshchev.KleshchevPartitionTupleCrystal.f"]], "good_cell_sequence() (sage.combinat.partition_kleshchev.kleshchevpartition method)": [[162, "sage.combinat.partition_kleshchev.KleshchevPartition.good_cell_sequence"]], "good_cell_sequence() (sage.combinat.partition_kleshchev.kleshchevpartitiontuple method)": [[162, "sage.combinat.partition_kleshchev.KleshchevPartitionTuple.good_cell_sequence"]], "good_cells() (sage.combinat.partition_kleshchev.kleshchevpartition method)": [[162, "sage.combinat.partition_kleshchev.KleshchevPartition.good_cells"]], "good_cells() (sage.combinat.partition_kleshchev.kleshchevpartitiontuple method)": [[162, "sage.combinat.partition_kleshchev.KleshchevPartitionTuple.good_cells"]], "good_residue_sequence() (sage.combinat.partition_kleshchev.kleshchevpartition method)": [[162, "sage.combinat.partition_kleshchev.KleshchevPartition.good_residue_sequence"]], "good_residue_sequence() (sage.combinat.partition_kleshchev.kleshchevpartitiontuple method)": [[162, "sage.combinat.partition_kleshchev.KleshchevPartitionTuple.good_residue_sequence"]], "is_regular() (sage.combinat.partition_kleshchev.kleshchevpartition method)": [[162, "sage.combinat.partition_kleshchev.KleshchevPartition.is_regular"]], "is_regular() (sage.combinat.partition_kleshchev.kleshchevpartitiontuple method)": [[162, "sage.combinat.partition_kleshchev.KleshchevPartitionTuple.is_regular"]], "is_restricted() (sage.combinat.partition_kleshchev.kleshchevpartition method)": [[162, "sage.combinat.partition_kleshchev.KleshchevPartition.is_restricted"]], "is_restricted() (sage.combinat.partition_kleshchev.kleshchevpartitiontuple method)": [[162, "sage.combinat.partition_kleshchev.KleshchevPartitionTuple.is_restricted"]], "mullineux_conjugate() (sage.combinat.partition_kleshchev.kleshchevpartition method)": [[162, "sage.combinat.partition_kleshchev.KleshchevPartition.mullineux_conjugate"]], "mullineux_conjugate() (sage.combinat.partition_kleshchev.kleshchevpartitiontuple method)": [[162, "sage.combinat.partition_kleshchev.KleshchevPartitionTuple.mullineux_conjugate"]], "multicharge() (sage.combinat.partition_kleshchev.kleshchevpartitions method)": [[162, "sage.combinat.partition_kleshchev.KleshchevPartitions.multicharge"]], "normal_cells() (sage.combinat.partition_kleshchev.kleshchevpartition method)": [[162, "sage.combinat.partition_kleshchev.KleshchevPartition.normal_cells"]], "normal_cells() (sage.combinat.partition_kleshchev.kleshchevpartitiontuple method)": [[162, "sage.combinat.partition_kleshchev.KleshchevPartitionTuple.normal_cells"]], "sage.combinat.partition_kleshchev": [[162, "module-sage.combinat.partition_kleshchev"]], "weight() (sage.combinat.partition_kleshchev.kleshchevcrystalmixin method)": [[162, "sage.combinat.partition_kleshchev.KleshchevCrystalMixin.weight"]], "shiftingoperatoralgebra (class in sage.combinat.partition_shifting_algebras)": [[163, "sage.combinat.partition_shifting_algebras.ShiftingOperatorAlgebra"]], "shiftingoperatoralgebra.element (class in sage.combinat.partition_shifting_algebras)": [[163, "sage.combinat.partition_shifting_algebras.ShiftingOperatorAlgebra.Element"]], "shiftingsequencespace (class in sage.combinat.partition_shifting_algebras)": [[163, "sage.combinat.partition_shifting_algebras.ShiftingSequenceSpace"]], "build_and_register_conversion() (sage.combinat.partition_shifting_algebras.shiftingoperatoralgebra method)": [[163, "sage.combinat.partition_shifting_algebras.ShiftingOperatorAlgebra.build_and_register_conversion"]], "check() (sage.combinat.partition_shifting_algebras.shiftingsequencespace method)": [[163, "sage.combinat.partition_shifting_algebras.ShiftingSequenceSpace.check"]], "ij() (sage.combinat.partition_shifting_algebras.shiftingoperatoralgebra method)": [[163, "sage.combinat.partition_shifting_algebras.ShiftingOperatorAlgebra.ij"]], "one_basis() (sage.combinat.partition_shifting_algebras.shiftingoperatoralgebra method)": [[163, "sage.combinat.partition_shifting_algebras.ShiftingOperatorAlgebra.one_basis"]], "product_on_basis() (sage.combinat.partition_shifting_algebras.shiftingoperatoralgebra method)": [[163, "sage.combinat.partition_shifting_algebras.ShiftingOperatorAlgebra.product_on_basis"]], "sage.combinat.partition_shifting_algebras": [[163, "module-sage.combinat.partition_shifting_algebras"]], "element (sage.combinat.partition_tuple.partitiontuple attribute)": [[164, "sage.combinat.partition_tuple.PartitionTuple.Element"]], "element (sage.combinat.partition_tuple.partitiontuples attribute)": [[164, "sage.combinat.partition_tuple.PartitionTuples.Element"]], "partitiontuple (class in sage.combinat.partition_tuple)": [[164, "sage.combinat.partition_tuple.PartitionTuple"]], "partitiontuples (class in sage.combinat.partition_tuple)": [[164, "sage.combinat.partition_tuple.PartitionTuples"]], "partitiontuples_all (class in sage.combinat.partition_tuple)": [[164, "sage.combinat.partition_tuple.PartitionTuples_all"]], "partitiontuples_level (class in sage.combinat.partition_tuple)": [[164, "sage.combinat.partition_tuple.PartitionTuples_level"]], "partitiontuples_level_size (class in sage.combinat.partition_tuple)": [[164, "sage.combinat.partition_tuple.PartitionTuples_level_size"]], "partitiontuples_size (class in sage.combinat.partition_tuple)": [[164, "sage.combinat.partition_tuple.PartitionTuples_size"]], "regularpartitiontuples (class in sage.combinat.partition_tuple)": [[164, "sage.combinat.partition_tuple.RegularPartitionTuples"]], "regularpartitiontuples_all (class in sage.combinat.partition_tuple)": [[164, "sage.combinat.partition_tuple.RegularPartitionTuples_all"]], "regularpartitiontuples_level (class in sage.combinat.partition_tuple)": [[164, "sage.combinat.partition_tuple.RegularPartitionTuples_level"]], "regularpartitiontuples_level_size (class in sage.combinat.partition_tuple)": [[164, "sage.combinat.partition_tuple.RegularPartitionTuples_level_size"]], "regularpartitiontuples_size (class in sage.combinat.partition_tuple)": [[164, "sage.combinat.partition_tuple.RegularPartitionTuples_size"]], "add_cell() (sage.combinat.partition_tuple.partitiontuple method)": [[164, "sage.combinat.partition_tuple.PartitionTuple.add_cell"]], "addable_cells() (sage.combinat.partition_tuple.partitiontuple method)": [[164, "sage.combinat.partition_tuple.PartitionTuple.addable_cells"]], "arm_length() (sage.combinat.partition_tuple.partitiontuple method)": [[164, "sage.combinat.partition_tuple.PartitionTuple.arm_length"]], "block() (sage.combinat.partition_tuple.partitiontuple method)": [[164, "sage.combinat.partition_tuple.PartitionTuple.block"]], "cardinality() (sage.combinat.partition_tuple.partitiontuples_level_size method)": [[164, "sage.combinat.partition_tuple.PartitionTuples_level_size.cardinality"]], "cells() (sage.combinat.partition_tuple.partitiontuple method)": [[164, "sage.combinat.partition_tuple.PartitionTuple.cells"]], "components() (sage.combinat.partition_tuple.partitiontuple method)": [[164, "sage.combinat.partition_tuple.PartitionTuple.components"]], "conjugate() (sage.combinat.partition_tuple.partitiontuple method)": [[164, "sage.combinat.partition_tuple.PartitionTuple.conjugate"]], "contains() (sage.combinat.partition_tuple.partitiontuple method)": [[164, "sage.combinat.partition_tuple.PartitionTuple.contains"]], "content() (sage.combinat.partition_tuple.partitiontuple method)": [[164, "sage.combinat.partition_tuple.PartitionTuple.content"]], "content_tableau() (sage.combinat.partition_tuple.partitiontuple method)": [[164, "sage.combinat.partition_tuple.PartitionTuple.content_tableau"]], "corners() (sage.combinat.partition_tuple.partitiontuple method)": [[164, "sage.combinat.partition_tuple.PartitionTuple.corners"]], "defect() (sage.combinat.partition_tuple.partitiontuple method)": [[164, "sage.combinat.partition_tuple.PartitionTuple.defect"]], "degree() (sage.combinat.partition_tuple.partitiontuple method)": [[164, "sage.combinat.partition_tuple.PartitionTuple.degree"]], "diagram() (sage.combinat.partition_tuple.partitiontuple method)": [[164, "sage.combinat.partition_tuple.PartitionTuple.diagram"]], "dominates() (sage.combinat.partition_tuple.partitiontuple method)": [[164, "sage.combinat.partition_tuple.PartitionTuple.dominates"]], "down() (sage.combinat.partition_tuple.partitiontuple method)": [[164, "sage.combinat.partition_tuple.PartitionTuple.down"]], "down_list() (sage.combinat.partition_tuple.partitiontuple method)": [[164, "sage.combinat.partition_tuple.PartitionTuple.down_list"]], "ferrers_diagram() (sage.combinat.partition_tuple.partitiontuple method)": [[164, "sage.combinat.partition_tuple.PartitionTuple.ferrers_diagram"]], "garnir_tableau() (sage.combinat.partition_tuple.partitiontuple method)": [[164, "sage.combinat.partition_tuple.PartitionTuple.garnir_tableau"]], "hook_length() (sage.combinat.partition_tuple.partitiontuple method)": [[164, "sage.combinat.partition_tuple.PartitionTuple.hook_length"]], "initial_column_tableau() (sage.combinat.partition_tuple.partitiontuple method)": [[164, "sage.combinat.partition_tuple.PartitionTuple.initial_column_tableau"]], "initial_tableau() (sage.combinat.partition_tuple.partitiontuple method)": [[164, "sage.combinat.partition_tuple.PartitionTuple.initial_tableau"]], "leg_length() (sage.combinat.partition_tuple.partitiontuple method)": [[164, "sage.combinat.partition_tuple.PartitionTuple.leg_length"]], "level() (sage.combinat.partition_tuple.partitiontuple method)": [[164, "sage.combinat.partition_tuple.PartitionTuple.level"]], "level() (sage.combinat.partition_tuple.partitiontuples method)": [[164, "sage.combinat.partition_tuple.PartitionTuples.level"]], "options (sage.combinat.partition_tuple.partitiontuples attribute)": [[164, "sage.combinat.partition_tuple.PartitionTuples.options"]], "outside_corners() (sage.combinat.partition_tuple.partitiontuple method)": [[164, "sage.combinat.partition_tuple.PartitionTuple.outside_corners"]], "pp() (sage.combinat.partition_tuple.partitiontuple method)": [[164, "sage.combinat.partition_tuple.PartitionTuple.pp"]], "prime_degree() (sage.combinat.partition_tuple.partitiontuple method)": [[164, "sage.combinat.partition_tuple.PartitionTuple.prime_degree"]], "removable_cells() (sage.combinat.partition_tuple.partitiontuple method)": [[164, "sage.combinat.partition_tuple.PartitionTuple.removable_cells"]], "remove_cell() (sage.combinat.partition_tuple.partitiontuple method)": [[164, "sage.combinat.partition_tuple.PartitionTuple.remove_cell"]], "row_standard_tableaux() (sage.combinat.partition_tuple.partitiontuple method)": [[164, "sage.combinat.partition_tuple.PartitionTuple.row_standard_tableaux"]], "sage.combinat.partition_tuple": [[164, "module-sage.combinat.partition_tuple"]], "size() (sage.combinat.partition_tuple.partitiontuple method)": [[164, "sage.combinat.partition_tuple.PartitionTuple.size"]], "size() (sage.combinat.partition_tuple.partitiontuples method)": [[164, "sage.combinat.partition_tuple.PartitionTuples.size"]], "standard_tableaux() (sage.combinat.partition_tuple.partitiontuple method)": [[164, "sage.combinat.partition_tuple.PartitionTuple.standard_tableaux"]], "to_exp() (sage.combinat.partition_tuple.partitiontuple method)": [[164, "sage.combinat.partition_tuple.PartitionTuple.to_exp"]], "to_list() (sage.combinat.partition_tuple.partitiontuple method)": [[164, "sage.combinat.partition_tuple.PartitionTuple.to_list"]], "top_garnir_tableau() (sage.combinat.partition_tuple.partitiontuple method)": [[164, "sage.combinat.partition_tuple.PartitionTuple.top_garnir_tableau"]], "up() (sage.combinat.partition_tuple.partitiontuple method)": [[164, "sage.combinat.partition_tuple.PartitionTuple.up"]], "up_list() (sage.combinat.partition_tuple.partitiontuple method)": [[164, "sage.combinat.partition_tuple.PartitionTuple.up_list"]], "young_subgroup() (sage.combinat.partition_tuple.partitiontuple method)": [[164, "sage.combinat.partition_tuple.PartitionTuple.young_subgroup"]], "young_subgroup_generators() (sage.combinat.partition_tuple.partitiontuple method)": [[164, "sage.combinat.partition_tuple.PartitionTuple.young_subgroup_generators"]], "zs1_iterator() (in module sage.combinat.partitions)": [[165, "sage.combinat.partitions.ZS1_iterator"]], "zs1_iterator_nk() (in module sage.combinat.partitions)": [[165, "sage.combinat.partitions.ZS1_iterator_nk"]], "sage.combinat.partitions": [[165, "module-sage.combinat.partitions"]], "sage.combinat.path_tableaux.catalog": [[166, "module-sage.combinat.path_tableaux.catalog"]], "dyckpath (class in sage.combinat.path_tableaux.dyck_path)": [[167, "sage.combinat.path_tableaux.dyck_path.DyckPath"]], "dyckpaths (class in sage.combinat.path_tableaux.dyck_path)": [[167, "sage.combinat.path_tableaux.dyck_path.DyckPaths"]], "element (sage.combinat.path_tableaux.dyck_path.dyckpaths attribute)": [[167, "sage.combinat.path_tableaux.dyck_path.DyckPaths.Element"]], "check() (sage.combinat.path_tableaux.dyck_path.dyckpath method)": [[167, "sage.combinat.path_tableaux.dyck_path.DyckPath.check"]], "descents() (sage.combinat.path_tableaux.dyck_path.dyckpath method)": [[167, "sage.combinat.path_tableaux.dyck_path.DyckPath.descents"]], "is_skew() (sage.combinat.path_tableaux.dyck_path.dyckpath method)": [[167, "sage.combinat.path_tableaux.dyck_path.DyckPath.is_skew"]], "local_rule() (sage.combinat.path_tableaux.dyck_path.dyckpath method)": [[167, "sage.combinat.path_tableaux.dyck_path.DyckPath.local_rule"]], "sage.combinat.path_tableaux.dyck_path": [[167, "module-sage.combinat.path_tableaux.dyck_path"]], "to_dyckword() (sage.combinat.path_tableaux.dyck_path.dyckpath method)": [[167, "sage.combinat.path_tableaux.dyck_path.DyckPath.to_DyckWord"]], "to_perfect_matching() (sage.combinat.path_tableaux.dyck_path.dyckpath method)": [[167, "sage.combinat.path_tableaux.dyck_path.DyckPath.to_perfect_matching"]], "to_tableau() (sage.combinat.path_tableaux.dyck_path.dyckpath method)": [[167, "sage.combinat.path_tableaux.dyck_path.DyckPath.to_tableau"]], "to_word() (sage.combinat.path_tableaux.dyck_path.dyckpath method)": [[167, "sage.combinat.path_tableaux.dyck_path.DyckPath.to_word"]], "element (sage.combinat.path_tableaux.frieze.friezepatterns attribute)": [[168, "sage.combinat.path_tableaux.frieze.FriezePatterns.Element"]], "friezepattern (class in sage.combinat.path_tableaux.frieze)": [[168, "sage.combinat.path_tableaux.frieze.FriezePattern"]], "friezepatterns (class in sage.combinat.path_tableaux.frieze)": [[168, "sage.combinat.path_tableaux.frieze.FriezePatterns"]], "change_ring() (sage.combinat.path_tableaux.frieze.friezepattern method)": [[168, "sage.combinat.path_tableaux.frieze.FriezePattern.change_ring"]], "check() (sage.combinat.path_tableaux.frieze.friezepattern method)": [[168, "sage.combinat.path_tableaux.frieze.FriezePattern.check"]], "is_integral() (sage.combinat.path_tableaux.frieze.friezepattern method)": [[168, "sage.combinat.path_tableaux.frieze.FriezePattern.is_integral"]], "is_positive() (sage.combinat.path_tableaux.frieze.friezepattern method)": [[168, "sage.combinat.path_tableaux.frieze.FriezePattern.is_positive"]], "is_skew() (sage.combinat.path_tableaux.frieze.friezepattern method)": [[168, "sage.combinat.path_tableaux.frieze.FriezePattern.is_skew"]], "local_rule() (sage.combinat.path_tableaux.frieze.friezepattern method)": [[168, "sage.combinat.path_tableaux.frieze.FriezePattern.local_rule"]], "plot() (sage.combinat.path_tableaux.frieze.friezepattern method)": [[168, "sage.combinat.path_tableaux.frieze.FriezePattern.plot"]], "sage.combinat.path_tableaux.frieze": [[168, "module-sage.combinat.path_tableaux.frieze"]], "triangulation() (sage.combinat.path_tableaux.frieze.friezepattern method)": [[168, "sage.combinat.path_tableaux.frieze.FriezePattern.triangulation"]], "width() (sage.combinat.path_tableaux.frieze.friezepattern method)": [[168, "sage.combinat.path_tableaux.frieze.FriezePattern.width"]], "cylindricaldiagram (class in sage.combinat.path_tableaux.path_tableau)": [[169, "sage.combinat.path_tableaux.path_tableau.CylindricalDiagram"]], "pathtableau (class in sage.combinat.path_tableaux.path_tableau)": [[169, "sage.combinat.path_tableaux.path_tableau.PathTableau"]], "pathtableaux (class in sage.combinat.path_tableaux.path_tableau)": [[169, "sage.combinat.path_tableaux.path_tableau.PathTableaux"]], "cactus() (sage.combinat.path_tableaux.path_tableau.pathtableau method)": [[169, "sage.combinat.path_tableaux.path_tableau.PathTableau.cactus"]], "commutor() (sage.combinat.path_tableaux.path_tableau.pathtableau method)": [[169, "sage.combinat.path_tableaux.path_tableau.PathTableau.commutor"]], "dual_equivalence_graph() (sage.combinat.path_tableaux.path_tableau.pathtableau method)": [[169, "sage.combinat.path_tableaux.path_tableau.PathTableau.dual_equivalence_graph"]], "evacuation() (sage.combinat.path_tableaux.path_tableau.pathtableau method)": [[169, "sage.combinat.path_tableaux.path_tableau.PathTableau.evacuation"]], "final_shape() (sage.combinat.path_tableaux.path_tableau.pathtableau method)": [[169, "sage.combinat.path_tableaux.path_tableau.PathTableau.final_shape"]], "initial_shape() (sage.combinat.path_tableaux.path_tableau.pathtableau method)": [[169, "sage.combinat.path_tableaux.path_tableau.PathTableau.initial_shape"]], "local_rule() (sage.combinat.path_tableaux.path_tableau.pathtableau method)": [[169, "sage.combinat.path_tableaux.path_tableau.PathTableau.local_rule"]], "orbit() (sage.combinat.path_tableaux.path_tableau.pathtableau method)": [[169, "sage.combinat.path_tableaux.path_tableau.PathTableau.orbit"]], "pp() (sage.combinat.path_tableaux.path_tableau.cylindricaldiagram method)": [[169, "sage.combinat.path_tableaux.path_tableau.CylindricalDiagram.pp"]], "promotion() (sage.combinat.path_tableaux.path_tableau.pathtableau method)": [[169, "sage.combinat.path_tableaux.path_tableau.PathTableau.promotion"]], "sage.combinat.path_tableaux.path_tableau": [[169, "module-sage.combinat.path_tableaux.path_tableau"]], "size() (sage.combinat.path_tableaux.path_tableau.pathtableau method)": [[169, "sage.combinat.path_tableaux.path_tableau.PathTableau.size"]], "element (sage.combinat.path_tableaux.semistandard.semistandardpathtableaux attribute)": [[170, "sage.combinat.path_tableaux.semistandard.SemistandardPathTableaux.Element"]], "semistandardpathtableau (class in sage.combinat.path_tableaux.semistandard)": [[170, "sage.combinat.path_tableaux.semistandard.SemistandardPathTableau"]], "semistandardpathtableaux (class in sage.combinat.path_tableaux.semistandard)": [[170, "sage.combinat.path_tableaux.semistandard.SemistandardPathTableaux"]], "check() (sage.combinat.path_tableaux.semistandard.semistandardpathtableau method)": [[170, "sage.combinat.path_tableaux.semistandard.SemistandardPathTableau.check"]], "is_integral() (sage.combinat.path_tableaux.semistandard.semistandardpathtableau method)": [[170, "sage.combinat.path_tableaux.semistandard.SemistandardPathTableau.is_integral"]], "is_skew() (sage.combinat.path_tableaux.semistandard.semistandardpathtableau method)": [[170, "sage.combinat.path_tableaux.semistandard.SemistandardPathTableau.is_skew"]], "local_rule() (sage.combinat.path_tableaux.semistandard.semistandardpathtableau method)": [[170, "sage.combinat.path_tableaux.semistandard.SemistandardPathTableau.local_rule"]], "rectify() (sage.combinat.path_tableaux.semistandard.semistandardpathtableau method)": [[170, "sage.combinat.path_tableaux.semistandard.SemistandardPathTableau.rectify"]], "sage.combinat.path_tableaux.semistandard": [[170, "module-sage.combinat.path_tableaux.semistandard"]], "size() (sage.combinat.path_tableaux.semistandard.semistandardpathtableau method)": [[170, "sage.combinat.path_tableaux.semistandard.SemistandardPathTableau.size"]], "to_pattern() (sage.combinat.path_tableaux.semistandard.semistandardpathtableau method)": [[170, "sage.combinat.path_tableaux.semistandard.SemistandardPathTableau.to_pattern"]], "to_tableau() (sage.combinat.path_tableaux.semistandard.semistandardpathtableau method)": [[170, "sage.combinat.path_tableaux.semistandard.SemistandardPathTableau.to_tableau"]], "element (sage.combinat.perfect_matching.perfectmatchings attribute)": [[171, "sage.combinat.perfect_matching.PerfectMatchings.Element"]], "perfectmatching (class in sage.combinat.perfect_matching)": [[171, "sage.combinat.perfect_matching.PerfectMatching"]], "perfectmatchings (class in sage.combinat.perfect_matching)": [[171, "sage.combinat.perfect_matching.PerfectMatchings"]], "weingarten_function() (sage.combinat.perfect_matching.perfectmatching method)": [[171, "sage.combinat.perfect_matching.PerfectMatching.Weingarten_function"]], "weingarten_matrix() (sage.combinat.perfect_matching.perfectmatchings method)": [[171, "sage.combinat.perfect_matching.PerfectMatchings.Weingarten_matrix"]], "base_set() (sage.combinat.perfect_matching.perfectmatchings method)": [[171, "sage.combinat.perfect_matching.PerfectMatchings.base_set"]], "base_set_cardinality() (sage.combinat.perfect_matching.perfectmatchings method)": [[171, "sage.combinat.perfect_matching.PerfectMatchings.base_set_cardinality"]], "cardinality() (sage.combinat.perfect_matching.perfectmatchings method)": [[171, "sage.combinat.perfect_matching.PerfectMatchings.cardinality"]], "loop_type() (sage.combinat.perfect_matching.perfectmatching method)": [[171, "sage.combinat.perfect_matching.PerfectMatching.loop_type"]], "loops() (sage.combinat.perfect_matching.perfectmatching method)": [[171, "sage.combinat.perfect_matching.PerfectMatching.loops"]], "loops_iterator() (sage.combinat.perfect_matching.perfectmatching method)": [[171, "sage.combinat.perfect_matching.PerfectMatching.loops_iterator"]], "number_of_loops() (sage.combinat.perfect_matching.perfectmatching method)": [[171, "sage.combinat.perfect_matching.PerfectMatching.number_of_loops"]], "partner() (sage.combinat.perfect_matching.perfectmatching method)": [[171, "sage.combinat.perfect_matching.PerfectMatching.partner"]], "random_element() (sage.combinat.perfect_matching.perfectmatchings method)": [[171, "sage.combinat.perfect_matching.PerfectMatchings.random_element"]], "sage.combinat.perfect_matching": [[171, "module-sage.combinat.perfect_matching"]], "standardization() (sage.combinat.perfect_matching.perfectmatching method)": [[171, "sage.combinat.perfect_matching.PerfectMatching.standardization"]], "to_graph() (sage.combinat.perfect_matching.perfectmatching method)": [[171, "sage.combinat.perfect_matching.PerfectMatching.to_graph"]], "to_noncrossing_set_partition() (sage.combinat.perfect_matching.perfectmatching method)": [[171, "sage.combinat.perfect_matching.PerfectMatching.to_noncrossing_set_partition"]], "arrangements (class in sage.combinat.permutation)": [[172, "sage.combinat.permutation.Arrangements"]], "arrangements_msetk (class in sage.combinat.permutation)": [[172, "sage.combinat.permutation.Arrangements_msetk"]], "arrangements_setk (class in sage.combinat.permutation)": [[172, "sage.combinat.permutation.Arrangements_setk"]], "cyclicpermutations (class in sage.combinat.permutation)": [[172, "sage.combinat.permutation.CyclicPermutations"]], "cyclicpermutationsofpartition (class in sage.combinat.permutation)": [[172, "sage.combinat.permutation.CyclicPermutationsOfPartition"]], "cyclicpermutationsofpartition.element (class in sage.combinat.permutation)": [[172, "sage.combinat.permutation.CyclicPermutationsOfPartition.Element"]], "element (sage.combinat.permutation.permutations attribute)": [[172, "sage.combinat.permutation.Permutations.Element"]], "patternavoider (class in sage.combinat.permutation)": [[172, "sage.combinat.permutation.PatternAvoider"]], "permutation (class in sage.combinat.permutation)": [[172, "sage.combinat.permutation.Permutation"]], "permutations (class in sage.combinat.permutation)": [[172, "sage.combinat.permutation.Permutations"]], "permutationsnk (class in sage.combinat.permutation)": [[172, "sage.combinat.permutation.PermutationsNK"]], "permutations_mset (class in sage.combinat.permutation)": [[172, "sage.combinat.permutation.Permutations_mset"]], "permutations_mset.element (class in sage.combinat.permutation)": [[172, "sage.combinat.permutation.Permutations_mset.Element"]], "permutations_msetk (class in sage.combinat.permutation)": [[172, "sage.combinat.permutation.Permutations_msetk"]], "permutations_nk (class in sage.combinat.permutation)": [[172, "sage.combinat.permutation.Permutations_nk"]], "permutations_nk.element (class in sage.combinat.permutation)": [[172, "sage.combinat.permutation.Permutations_nk.Element"]], "permutations_set (class in sage.combinat.permutation)": [[172, "sage.combinat.permutation.Permutations_set"]], "permutations_set.element (class in sage.combinat.permutation)": [[172, "sage.combinat.permutation.Permutations_set.Element"]], "permutations_setk (class in sage.combinat.permutation)": [[172, "sage.combinat.permutation.Permutations_setk"]], "rs_partition() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.RS_partition"]], "standardpermutations_all (class in sage.combinat.permutation)": [[172, "sage.combinat.permutation.StandardPermutations_all"]], "standardpermutations_all_avoiding (class in sage.combinat.permutation)": [[172, "sage.combinat.permutation.StandardPermutations_all_avoiding"]], "standardpermutations_avoiding_12 (class in sage.combinat.permutation)": [[172, "sage.combinat.permutation.StandardPermutations_avoiding_12"]], "standardpermutations_avoiding_123 (class in sage.combinat.permutation)": [[172, "sage.combinat.permutation.StandardPermutations_avoiding_123"]], "standardpermutations_avoiding_132 (class in sage.combinat.permutation)": [[172, "sage.combinat.permutation.StandardPermutations_avoiding_132"]], "standardpermutations_avoiding_21 (class in sage.combinat.permutation)": [[172, "sage.combinat.permutation.StandardPermutations_avoiding_21"]], "standardpermutations_avoiding_213 (class in sage.combinat.permutation)": [[172, "sage.combinat.permutation.StandardPermutations_avoiding_213"]], "standardpermutations_avoiding_231 (class in sage.combinat.permutation)": [[172, "sage.combinat.permutation.StandardPermutations_avoiding_231"]], "standardpermutations_avoiding_312 (class in sage.combinat.permutation)": [[172, "sage.combinat.permutation.StandardPermutations_avoiding_312"]], "standardpermutations_avoiding_321 (class in sage.combinat.permutation)": [[172, "sage.combinat.permutation.StandardPermutations_avoiding_321"]], "standardpermutations_avoiding_generic (class in sage.combinat.permutation)": [[172, "sage.combinat.permutation.StandardPermutations_avoiding_generic"]], "standardpermutations_bruhat_greater (class in sage.combinat.permutation)": [[172, "sage.combinat.permutation.StandardPermutations_bruhat_greater"]], "standardpermutations_bruhat_smaller (class in sage.combinat.permutation)": [[172, "sage.combinat.permutation.StandardPermutations_bruhat_smaller"]], "standardpermutations_descents (class in sage.combinat.permutation)": [[172, "sage.combinat.permutation.StandardPermutations_descents"]], "standardpermutations_n (class in sage.combinat.permutation)": [[172, "sage.combinat.permutation.StandardPermutations_n"]], "standardpermutations_n.element (class in sage.combinat.permutation)": [[172, "sage.combinat.permutation.StandardPermutations_n.Element"]], "standardpermutations_n_abstract (class in sage.combinat.permutation)": [[172, "sage.combinat.permutation.StandardPermutations_n_abstract"]], "standardpermutations_recoils (class in sage.combinat.permutation)": [[172, "sage.combinat.permutation.StandardPermutations_recoils"]], "standardpermutations_recoilsfatter (class in sage.combinat.permutation)": [[172, "sage.combinat.permutation.StandardPermutations_recoilsfatter"]], "standardpermutations_recoilsfiner (class in sage.combinat.permutation)": [[172, "sage.combinat.permutation.StandardPermutations_recoilsfiner"]], "a (sage.combinat.permutation.standardpermutations_avoiding_generic property)": [[172, "sage.combinat.permutation.StandardPermutations_avoiding_generic.a"]], "absolute_length() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.absolute_length"]], "action() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.action"]], "algebra() (sage.combinat.permutation.standardpermutations_n method)": [[172, "sage.combinat.permutation.StandardPermutations_n.algebra"]], "apply_simple_reflection_left() (sage.combinat.permutation.standardpermutations_n.element method)": [[172, "sage.combinat.permutation.StandardPermutations_n.Element.apply_simple_reflection_left"]], "apply_simple_reflection_right() (sage.combinat.permutation.standardpermutations_n.element method)": [[172, "sage.combinat.permutation.StandardPermutations_n.Element.apply_simple_reflection_right"]], "as_permutation_group() (sage.combinat.permutation.standardpermutations_n method)": [[172, "sage.combinat.permutation.StandardPermutations_n.as_permutation_group"]], "avoids() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.avoids"]], "binary_search_tree() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.binary_search_tree"]], "binary_search_tree_shape() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.binary_search_tree_shape"]], "bistochastic_as_sum_of_permutations() (in module sage.combinat.permutation)": [[172, "sage.combinat.permutation.bistochastic_as_sum_of_permutations"]], "bounded_affine_permutation() (in module sage.combinat.permutation)": [[172, "sage.combinat.permutation.bounded_affine_permutation"]], "bruhat_greater() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.bruhat_greater"]], "bruhat_inversions() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.bruhat_inversions"]], "bruhat_inversions_iterator() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.bruhat_inversions_iterator"]], "bruhat_lequal() (in module sage.combinat.permutation)": [[172, "sage.combinat.permutation.bruhat_lequal"]], "bruhat_lequal() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.bruhat_lequal"]], "bruhat_pred() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.bruhat_pred"]], "bruhat_pred_iterator() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.bruhat_pred_iterator"]], "bruhat_smaller() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.bruhat_smaller"]], "bruhat_succ() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.bruhat_succ"]], "bruhat_succ_iterator() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.bruhat_succ_iterator"]], "cardinality() (sage.combinat.permutation.arrangements method)": [[172, "sage.combinat.permutation.Arrangements.cardinality"]], "cardinality() (sage.combinat.permutation.permutations_mset method)": [[172, "sage.combinat.permutation.Permutations_mset.cardinality"]], "cardinality() (sage.combinat.permutation.permutations_msetk method)": [[172, "sage.combinat.permutation.Permutations_msetk.cardinality"]], "cardinality() (sage.combinat.permutation.permutations_nk method)": [[172, "sage.combinat.permutation.Permutations_nk.cardinality"]], "cardinality() (sage.combinat.permutation.permutations_set method)": [[172, "sage.combinat.permutation.Permutations_set.cardinality"]], "cardinality() (sage.combinat.permutation.standardpermutations_avoiding_12 method)": [[172, "sage.combinat.permutation.StandardPermutations_avoiding_12.cardinality"]], "cardinality() (sage.combinat.permutation.standardpermutations_avoiding_123 method)": [[172, "sage.combinat.permutation.StandardPermutations_avoiding_123.cardinality"]], "cardinality() (sage.combinat.permutation.standardpermutations_avoiding_132 method)": [[172, "sage.combinat.permutation.StandardPermutations_avoiding_132.cardinality"]], "cardinality() (sage.combinat.permutation.standardpermutations_avoiding_21 method)": [[172, "sage.combinat.permutation.StandardPermutations_avoiding_21.cardinality"]], "cardinality() (sage.combinat.permutation.standardpermutations_avoiding_213 method)": [[172, "sage.combinat.permutation.StandardPermutations_avoiding_213.cardinality"]], "cardinality() (sage.combinat.permutation.standardpermutations_avoiding_231 method)": [[172, "sage.combinat.permutation.StandardPermutations_avoiding_231.cardinality"]], "cardinality() (sage.combinat.permutation.standardpermutations_avoiding_312 method)": [[172, "sage.combinat.permutation.StandardPermutations_avoiding_312.cardinality"]], "cardinality() (sage.combinat.permutation.standardpermutations_avoiding_321 method)": [[172, "sage.combinat.permutation.StandardPermutations_avoiding_321.cardinality"]], "cardinality() (sage.combinat.permutation.standardpermutations_avoiding_generic method)": [[172, "sage.combinat.permutation.StandardPermutations_avoiding_generic.cardinality"]], "cardinality() (sage.combinat.permutation.standardpermutations_descents method)": [[172, "sage.combinat.permutation.StandardPermutations_descents.cardinality"]], "cardinality() (sage.combinat.permutation.standardpermutations_n method)": [[172, "sage.combinat.permutation.StandardPermutations_n.cardinality"]], "cartan_type() (sage.combinat.permutation.standardpermutations_n method)": [[172, "sage.combinat.permutation.StandardPermutations_n.cartan_type"]], "check() (sage.combinat.permutation.cyclicpermutationsofpartition.element method)": [[172, "sage.combinat.permutation.CyclicPermutationsOfPartition.Element.check"]], "check() (sage.combinat.permutation.permutations_mset.element method)": [[172, "sage.combinat.permutation.Permutations_mset.Element.check"]], "check() (sage.combinat.permutation.permutations_nk.element method)": [[172, "sage.combinat.permutation.Permutations_nk.Element.check"]], "check() (sage.combinat.permutation.permutations_set.element method)": [[172, "sage.combinat.permutation.Permutations_set.Element.check"]], "codegrees() (sage.combinat.permutation.standardpermutations_n method)": [[172, "sage.combinat.permutation.StandardPermutations_n.codegrees"]], "complement() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.complement"]], "conjugacy_class() (sage.combinat.permutation.standardpermutations_n method)": [[172, "sage.combinat.permutation.StandardPermutations_n.conjugacy_class"]], "conjugacy_classes() (sage.combinat.permutation.standardpermutations_n method)": [[172, "sage.combinat.permutation.StandardPermutations_n.conjugacy_classes"]], "conjugacy_classes_iterator() (sage.combinat.permutation.standardpermutations_n method)": [[172, "sage.combinat.permutation.StandardPermutations_n.conjugacy_classes_iterator"]], "conjugacy_classes_representatives() (sage.combinat.permutation.standardpermutations_n method)": [[172, "sage.combinat.permutation.StandardPermutations_n.conjugacy_classes_representatives"]], "cycle_string() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.cycle_string"]], "cycle_tuples() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.cycle_tuples"]], "cycle_type() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.cycle_type"]], "decreasing_runs() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.decreasing_runs"]], "degree() (sage.combinat.permutation.standardpermutations_n method)": [[172, "sage.combinat.permutation.StandardPermutations_n.degree"]], "degrees() (sage.combinat.permutation.standardpermutations_n method)": [[172, "sage.combinat.permutation.StandardPermutations_n.degrees"]], "descent_polynomial() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.descent_polynomial"]], "descents() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.descents"]], "descents_composition() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.descents_composition"]], "descents_composition_first() (in module sage.combinat.permutation)": [[172, "sage.combinat.permutation.descents_composition_first"]], "descents_composition_last() (in module sage.combinat.permutation)": [[172, "sage.combinat.permutation.descents_composition_last"]], "descents_composition_list() (in module sage.combinat.permutation)": [[172, "sage.combinat.permutation.descents_composition_list"]], "destandardize() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.destandardize"]], "dict() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.dict"]], "element_in_conjugacy_classes() (sage.combinat.permutation.standardpermutations_n method)": [[172, "sage.combinat.permutation.StandardPermutations_n.element_in_conjugacy_classes"]], "first() (sage.combinat.permutation.standardpermutations_descents method)": [[172, "sage.combinat.permutation.StandardPermutations_descents.first"]], "fixed_points() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.fixed_points"]], "foata_bijection() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.foata_bijection"]], "foata_bijection_inverse() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.foata_bijection_inverse"]], "forget_cycles() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.forget_cycles"]], "from_cycles() (in module sage.combinat.permutation)": [[172, "sage.combinat.permutation.from_cycles"]], "from_inversion_vector() (in module sage.combinat.permutation)": [[172, "sage.combinat.permutation.from_inversion_vector"]], "from_lehmer_cocode() (in module sage.combinat.permutation)": [[172, "sage.combinat.permutation.from_lehmer_cocode"]], "from_lehmer_code() (in module sage.combinat.permutation)": [[172, "sage.combinat.permutation.from_lehmer_code"]], "from_major_code() (in module sage.combinat.permutation)": [[172, "sage.combinat.permutation.from_major_code"]], "from_permutation_group_element() (in module sage.combinat.permutation)": [[172, "sage.combinat.permutation.from_permutation_group_element"]], "from_rank() (in module sage.combinat.permutation)": [[172, "sage.combinat.permutation.from_rank"]], "from_reduced_word() (in module sage.combinat.permutation)": [[172, "sage.combinat.permutation.from_reduced_word"]], "fundamental_transformation() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.fundamental_transformation"]], "fundamental_transformation_inverse() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.fundamental_transformation_inverse"]], "grade() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.grade"]], "graded_component() (sage.combinat.permutation.standardpermutations_all method)": [[172, "sage.combinat.permutation.StandardPermutations_all.graded_component"]], "has_left_descent() (sage.combinat.permutation.standardpermutations_n.element method)": [[172, "sage.combinat.permutation.StandardPermutations_n.Element.has_left_descent"]], "has_nth_root() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.has_nth_root"]], "has_pattern() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.has_pattern"]], "has_right_descent() (sage.combinat.permutation.standardpermutations_n.element method)": [[172, "sage.combinat.permutation.StandardPermutations_n.Element.has_right_descent"]], "hyperoctahedral_double_coset_type() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.hyperoctahedral_double_coset_type"]], "identity() (sage.combinat.permutation.standardpermutations_n method)": [[172, "sage.combinat.permutation.StandardPermutations_n.identity"]], "idescents() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.idescents"]], "idescents_signature() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.idescents_signature"]], "imajor_index() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.imajor_index"]], "increasing_tree() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.increasing_tree"]], "increasing_tree_shape() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.increasing_tree_shape"]], "index_set() (sage.combinat.permutation.standardpermutations_n method)": [[172, "sage.combinat.permutation.StandardPermutations_n.index_set"]], "inverse() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.inverse"]], "inverse() (sage.combinat.permutation.standardpermutations_n.element method)": [[172, "sage.combinat.permutation.StandardPermutations_n.Element.inverse"]], "inversions() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.inversions"]], "is_derangement() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.is_derangement"]], "is_even() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.is_even"]], "is_simple() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.is_simple"]], "ishift() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.ishift"]], "iswitch() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.iswitch"]], "iterator() (sage.combinat.permutation.cyclicpermutations method)": [[172, "sage.combinat.permutation.CyclicPermutations.iterator"]], "iterator() (sage.combinat.permutation.cyclicpermutationsofpartition method)": [[172, "sage.combinat.permutation.CyclicPermutationsOfPartition.iterator"]], "last() (sage.combinat.permutation.standardpermutations_descents method)": [[172, "sage.combinat.permutation.StandardPermutations_descents.last"]], "left_action_product() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.left_action_product"]], "left_tableau() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.left_tableau"]], "length() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.length"]], "list() (sage.combinat.permutation.cyclicpermutations method)": [[172, "sage.combinat.permutation.CyclicPermutations.list"]], "list() (sage.combinat.permutation.cyclicpermutationsofpartition method)": [[172, "sage.combinat.permutation.CyclicPermutationsOfPartition.list"]], "longest_increasing_subsequence_length() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.longest_increasing_subsequence_length"]], "longest_increasing_subsequences() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.longest_increasing_subsequences"]], "longest_increasing_subsequences_number() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.longest_increasing_subsequences_number"]], "major_index() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.major_index"]], "multi_major_index() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.multi_major_index"]], "next() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.next"]], "noninversions() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.noninversions"]], "nth_roots() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.nth_roots"]], "number_of_descents() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.number_of_descents"]], "number_of_fixed_points() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.number_of_fixed_points"]], "number_of_idescents() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.number_of_idescents"]], "number_of_inversions() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.number_of_inversions"]], "number_of_noninversions() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.number_of_noninversions"]], "number_of_nth_roots() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.number_of_nth_roots"]], "number_of_peaks() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.number_of_peaks"]], "number_of_recoils() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.number_of_recoils"]], "number_of_reduced_words() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.number_of_reduced_words"]], "number_of_saliances() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.number_of_saliances"]], "one() (sage.combinat.permutation.standardpermutations_n method)": [[172, "sage.combinat.permutation.StandardPermutations_n.one"]], "options (sage.combinat.permutation.permutations attribute)": [[172, "sage.combinat.permutation.Permutations.options"]], "pattern_positions() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.pattern_positions"]], "patterns() (sage.combinat.permutation.standardpermutations_all_avoiding method)": [[172, "sage.combinat.permutation.StandardPermutations_all_avoiding.patterns"]], "patterns() (sage.combinat.permutation.standardpermutations_avoiding_generic method)": [[172, "sage.combinat.permutation.StandardPermutations_avoiding_generic.patterns"]], "peaks() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.peaks"]], "permutation_poset() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.permutation_poset"]], "permutohedron_greater() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.permutohedron_greater"]], "permutohedron_join() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.permutohedron_join"]], "permutohedron_lequal() (in module sage.combinat.permutation)": [[172, "sage.combinat.permutation.permutohedron_lequal"]], "permutohedron_lequal() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.permutohedron_lequal"]], "permutohedron_meet() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.permutohedron_meet"]], "permutohedron_pred() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.permutohedron_pred"]], "permutohedron_smaller() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.permutohedron_smaller"]], "permutohedron_succ() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.permutohedron_succ"]], "prev() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.prev"]], "random_element() (sage.combinat.permutation.permutations_nk method)": [[172, "sage.combinat.permutation.Permutations_nk.random_element"]], "random_element() (sage.combinat.permutation.permutations_set method)": [[172, "sage.combinat.permutation.Permutations_set.random_element"]], "random_element() (sage.combinat.permutation.permutations_setk method)": [[172, "sage.combinat.permutation.Permutations_setk.random_element"]], "random_element() (sage.combinat.permutation.standardpermutations_n method)": [[172, "sage.combinat.permutation.StandardPermutations_n.random_element"]], "rank() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.rank"]], "rank() (sage.combinat.permutation.permutations_mset method)": [[172, "sage.combinat.permutation.Permutations_mset.rank"]], "rank() (sage.combinat.permutation.standardpermutations_n method)": [[172, "sage.combinat.permutation.StandardPermutations_n.rank"]], "recoils() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.recoils"]], "recoils_composition() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.recoils_composition"]], "reduced_word() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.reduced_word"]], "reduced_word_lexmin() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.reduced_word_lexmin"]], "reduced_words() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.reduced_words"]], "reduced_words_iterator() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.reduced_words_iterator"]], "remove_extra_fixed_points() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.remove_extra_fixed_points"]], "retract_direct_product() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.retract_direct_product"]], "retract_okounkov_vershik() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.retract_okounkov_vershik"]], "retract_plain() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.retract_plain"]], "reverse() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.reverse"]], "right_action_product() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.right_action_product"]], "right_permutohedron_interval() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.right_permutohedron_interval"]], "right_permutohedron_interval_iterator() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.right_permutohedron_interval_iterator"]], "right_tableau() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.right_tableau"]], "robinson_schensted() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.robinson_schensted"]], "rothe_diagram() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.rothe_diagram"]], "runs() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.runs"]], "sage.combinat.permutation": [[172, "module-sage.combinat.permutation"]], "saliances() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.saliances"]], "shifted_concatenation() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.shifted_concatenation"]], "shifted_shuffle() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.shifted_shuffle"]], "show() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.show"]], "sign() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.sign"]], "signature() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.signature"]], "simion_schmidt() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.simion_schmidt"]], "simple_reflection() (sage.combinat.permutation.standardpermutations_n method)": [[172, "sage.combinat.permutation.StandardPermutations_n.simple_reflection"]], "size() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.size"]], "stack_sort() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.stack_sort"]], "sylvester_class() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.sylvester_class"]], "to_alternating_sign_matrix() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.to_alternating_sign_matrix"]], "to_cycles() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.to_cycles"]], "to_digraph() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.to_digraph"]], "to_inversion_vector() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.to_inversion_vector"]], "to_lehmer_cocode() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.to_lehmer_cocode"]], "to_lehmer_code() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.to_lehmer_code"]], "to_major_code() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.to_major_code"]], "to_matrix() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.to_matrix"]], "to_permutation_group_element() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.to_permutation_group_element"]], "to_standard() (in module sage.combinat.permutation)": [[172, "sage.combinat.permutation.to_standard"]], "to_tableau_by_shape() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.to_tableau_by_shape"]], "unrank() (sage.combinat.permutation.permutations_mset method)": [[172, "sage.combinat.permutation.Permutations_mset.unrank"]], "unrank() (sage.combinat.permutation.standardpermutations_n method)": [[172, "sage.combinat.permutation.StandardPermutations_n.unrank"]], "weak_excedences() (sage.combinat.permutation.permutation method)": [[172, "sage.combinat.permutation.Permutation.weak_excedences"]], "left_action_product() (in module sage.combinat.permutation_cython)": [[173, "sage.combinat.permutation_cython.left_action_product"]], "left_action_same_n() (in module sage.combinat.permutation_cython)": [[173, "sage.combinat.permutation_cython.left_action_same_n"]], "map_to_list() (in module sage.combinat.permutation_cython)": [[173, "sage.combinat.permutation_cython.map_to_list"]], "next_perm() (in module sage.combinat.permutation_cython)": [[173, "sage.combinat.permutation_cython.next_perm"]], "permutation_iterator_transposition_list() (in module sage.combinat.permutation_cython)": [[173, "sage.combinat.permutation_cython.permutation_iterator_transposition_list"]], "right_action_product() (in module sage.combinat.permutation_cython)": [[173, "sage.combinat.permutation_cython.right_action_product"]], "right_action_same_n() (in module sage.combinat.permutation_cython)": [[173, "sage.combinat.permutation_cython.right_action_same_n"]], "sage.combinat.permutation_cython": [[173, "module-sage.combinat.permutation_cython"]], "element (sage.combinat.plane_partition.planepartitions attribute)": [[174, "sage.combinat.plane_partition.PlanePartitions.Element"]], "planepartition (class in sage.combinat.plane_partition)": [[174, "sage.combinat.plane_partition.PlanePartition"]], "planepartitions (class in sage.combinat.plane_partition)": [[174, "sage.combinat.plane_partition.PlanePartitions"]], "planepartitions_cspp (class in sage.combinat.plane_partition)": [[174, "sage.combinat.plane_partition.PlanePartitions_CSPP"]], "planepartitions_csscpp (class in sage.combinat.plane_partition)": [[174, "sage.combinat.plane_partition.PlanePartitions_CSSCPP"]], "planepartitions_cstcpp (class in sage.combinat.plane_partition)": [[174, "sage.combinat.plane_partition.PlanePartitions_CSTCPP"]], "planepartitions_scpp (class in sage.combinat.plane_partition)": [[174, "sage.combinat.plane_partition.PlanePartitions_SCPP"]], "planepartitions_spp (class in sage.combinat.plane_partition)": [[174, "sage.combinat.plane_partition.PlanePartitions_SPP"]], "planepartitions_sscpp (class in sage.combinat.plane_partition)": [[174, "sage.combinat.plane_partition.PlanePartitions_SSCPP"]], "planepartitions_tcpp (class in sage.combinat.plane_partition)": [[174, "sage.combinat.plane_partition.PlanePartitions_TCPP"]], "planepartitions_tspp (class in sage.combinat.plane_partition)": [[174, "sage.combinat.plane_partition.PlanePartitions_TSPP"]], "planepartitions_tsscpp (class in sage.combinat.plane_partition)": [[174, "sage.combinat.plane_partition.PlanePartitions_TSSCPP"]], "planepartitions_all (class in sage.combinat.plane_partition)": [[174, "sage.combinat.plane_partition.PlanePartitions_all"]], "planepartitions_box (class in sage.combinat.plane_partition)": [[174, "sage.combinat.plane_partition.PlanePartitions_box"]], "planepartitions_n (class in sage.combinat.plane_partition)": [[174, "sage.combinat.plane_partition.PlanePartitions_n"]], "an_element() (sage.combinat.plane_partition.planepartitions_all method)": [[174, "sage.combinat.plane_partition.PlanePartitions_all.an_element"]], "bounding_box() (sage.combinat.plane_partition.planepartition method)": [[174, "sage.combinat.plane_partition.PlanePartition.bounding_box"]], "box() (sage.combinat.plane_partition.planepartitions method)": [[174, "sage.combinat.plane_partition.PlanePartitions.box"]], "cardinality() (sage.combinat.plane_partition.planepartitions_cspp method)": [[174, "sage.combinat.plane_partition.PlanePartitions_CSPP.cardinality"]], "cardinality() (sage.combinat.plane_partition.planepartitions_csscpp method)": [[174, "sage.combinat.plane_partition.PlanePartitions_CSSCPP.cardinality"]], "cardinality() (sage.combinat.plane_partition.planepartitions_cstcpp method)": [[174, "sage.combinat.plane_partition.PlanePartitions_CSTCPP.cardinality"]], "cardinality() (sage.combinat.plane_partition.planepartitions_scpp method)": [[174, "sage.combinat.plane_partition.PlanePartitions_SCPP.cardinality"]], "cardinality() (sage.combinat.plane_partition.planepartitions_spp method)": [[174, "sage.combinat.plane_partition.PlanePartitions_SPP.cardinality"]], "cardinality() (sage.combinat.plane_partition.planepartitions_sscpp method)": [[174, "sage.combinat.plane_partition.PlanePartitions_SSCPP.cardinality"]], "cardinality() (sage.combinat.plane_partition.planepartitions_tcpp method)": [[174, "sage.combinat.plane_partition.PlanePartitions_TCPP.cardinality"]], "cardinality() (sage.combinat.plane_partition.planepartitions_tspp method)": [[174, "sage.combinat.plane_partition.PlanePartitions_TSPP.cardinality"]], "cardinality() (sage.combinat.plane_partition.planepartitions_tsscpp method)": [[174, "sage.combinat.plane_partition.PlanePartitions_TSSCPP.cardinality"]], "cardinality() (sage.combinat.plane_partition.planepartitions_box method)": [[174, "sage.combinat.plane_partition.PlanePartitions_box.cardinality"]], "cardinality() (sage.combinat.plane_partition.planepartitions_n method)": [[174, "sage.combinat.plane_partition.PlanePartitions_n.cardinality"]], "cells() (sage.combinat.plane_partition.planepartition method)": [[174, "sage.combinat.plane_partition.PlanePartition.cells"]], "check() (sage.combinat.plane_partition.planepartition method)": [[174, "sage.combinat.plane_partition.PlanePartition.check"]], "complement() (sage.combinat.plane_partition.planepartition method)": [[174, "sage.combinat.plane_partition.PlanePartition.complement"]], "contains() (sage.combinat.plane_partition.planepartition method)": [[174, "sage.combinat.plane_partition.PlanePartition.contains"]], "cyclically_rotate() (sage.combinat.plane_partition.planepartition method)": [[174, "sage.combinat.plane_partition.PlanePartition.cyclically_rotate"]], "from_antichain() (sage.combinat.plane_partition.planepartitions_cspp method)": [[174, "sage.combinat.plane_partition.PlanePartitions_CSPP.from_antichain"]], "from_antichain() (sage.combinat.plane_partition.planepartitions_spp method)": [[174, "sage.combinat.plane_partition.PlanePartitions_SPP.from_antichain"]], "from_antichain() (sage.combinat.plane_partition.planepartitions_tspp method)": [[174, "sage.combinat.plane_partition.PlanePartitions_TSPP.from_antichain"]], "from_antichain() (sage.combinat.plane_partition.planepartitions_tsscpp method)": [[174, "sage.combinat.plane_partition.PlanePartitions_TSSCPP.from_antichain"]], "from_antichain() (sage.combinat.plane_partition.planepartitions_box method)": [[174, "sage.combinat.plane_partition.PlanePartitions_box.from_antichain"]], "from_order_ideal() (sage.combinat.plane_partition.planepartitions_cspp method)": [[174, "sage.combinat.plane_partition.PlanePartitions_CSPP.from_order_ideal"]], "from_order_ideal() (sage.combinat.plane_partition.planepartitions_spp method)": [[174, "sage.combinat.plane_partition.PlanePartitions_SPP.from_order_ideal"]], "from_order_ideal() (sage.combinat.plane_partition.planepartitions_tspp method)": [[174, "sage.combinat.plane_partition.PlanePartitions_TSPP.from_order_ideal"]], "from_order_ideal() (sage.combinat.plane_partition.planepartitions_tsscpp method)": [[174, "sage.combinat.plane_partition.PlanePartitions_TSSCPP.from_order_ideal"]], "from_order_ideal() (sage.combinat.plane_partition.planepartitions_box method)": [[174, "sage.combinat.plane_partition.PlanePartitions_box.from_order_ideal"]], "is_cspp() (sage.combinat.plane_partition.planepartition method)": [[174, "sage.combinat.plane_partition.PlanePartition.is_CSPP"]], "is_csscpp() (sage.combinat.plane_partition.planepartition method)": [[174, "sage.combinat.plane_partition.PlanePartition.is_CSSCPP"]], "is_cstcpp() (sage.combinat.plane_partition.planepartition method)": [[174, "sage.combinat.plane_partition.PlanePartition.is_CSTCPP"]], "is_scpp() (sage.combinat.plane_partition.planepartition method)": [[174, "sage.combinat.plane_partition.PlanePartition.is_SCPP"]], "is_spp() (sage.combinat.plane_partition.planepartition method)": [[174, "sage.combinat.plane_partition.PlanePartition.is_SPP"]], "is_sscpp() (sage.combinat.plane_partition.planepartition method)": [[174, "sage.combinat.plane_partition.PlanePartition.is_SSCPP"]], "is_tcpp() (sage.combinat.plane_partition.planepartition method)": [[174, "sage.combinat.plane_partition.PlanePartition.is_TCPP"]], "is_tspp() (sage.combinat.plane_partition.planepartition method)": [[174, "sage.combinat.plane_partition.PlanePartition.is_TSPP"]], "is_tsscpp() (sage.combinat.plane_partition.planepartition method)": [[174, "sage.combinat.plane_partition.PlanePartition.is_TSSCPP"]], "maximal_boxes() (sage.combinat.plane_partition.planepartition method)": [[174, "sage.combinat.plane_partition.PlanePartition.maximal_boxes"]], "number_of_boxes() (sage.combinat.plane_partition.planepartition method)": [[174, "sage.combinat.plane_partition.PlanePartition.number_of_boxes"]], "plot() (sage.combinat.plane_partition.planepartition method)": [[174, "sage.combinat.plane_partition.PlanePartition.plot"]], "plot3d() (sage.combinat.plane_partition.planepartition method)": [[174, "sage.combinat.plane_partition.PlanePartition.plot3d"]], "pp() (sage.combinat.plane_partition.planepartition method)": [[174, "sage.combinat.plane_partition.PlanePartition.pp"]], "random_element() (sage.combinat.plane_partition.planepartitions_cspp method)": [[174, "sage.combinat.plane_partition.PlanePartitions_CSPP.random_element"]], "random_element() (sage.combinat.plane_partition.planepartitions_spp method)": [[174, "sage.combinat.plane_partition.PlanePartitions_SPP.random_element"]], "random_element() (sage.combinat.plane_partition.planepartitions_box method)": [[174, "sage.combinat.plane_partition.PlanePartitions_box.random_element"]], "sage.combinat.plane_partition": [[174, "module-sage.combinat.plane_partition"]], "symmetry() (sage.combinat.plane_partition.planepartitions method)": [[174, "sage.combinat.plane_partition.PlanePartitions.symmetry"]], "to_order_ideal() (sage.combinat.plane_partition.planepartition method)": [[174, "sage.combinat.plane_partition.PlanePartition.to_order_ideal"]], "to_poset() (sage.combinat.plane_partition.planepartitions_cspp method)": [[174, "sage.combinat.plane_partition.PlanePartitions_CSPP.to_poset"]], "to_poset() (sage.combinat.plane_partition.planepartitions_spp method)": [[174, "sage.combinat.plane_partition.PlanePartitions_SPP.to_poset"]], "to_poset() (sage.combinat.plane_partition.planepartitions_tspp method)": [[174, "sage.combinat.plane_partition.PlanePartitions_TSPP.to_poset"]], "to_poset() (sage.combinat.plane_partition.planepartitions_tsscpp method)": [[174, "sage.combinat.plane_partition.PlanePartitions_TSSCPP.to_poset"]], "to_poset() (sage.combinat.plane_partition.planepartitions_box method)": [[174, "sage.combinat.plane_partition.PlanePartitions_box.to_poset"]], "to_tableau() (sage.combinat.plane_partition.planepartition method)": [[174, "sage.combinat.plane_partition.PlanePartition.to_tableau"]], "transpose() (sage.combinat.plane_partition.planepartition method)": [[174, "sage.combinat.plane_partition.PlanePartition.transpose"]], "x_tableau() (sage.combinat.plane_partition.planepartition method)": [[174, "sage.combinat.plane_partition.PlanePartition.x_tableau"]], "y_tableau() (sage.combinat.plane_partition.planepartition method)": [[174, "sage.combinat.plane_partition.PlanePartition.y_tableau"]], "z_tableau() (sage.combinat.plane_partition.planepartition method)": [[174, "sage.combinat.plane_partition.PlanePartition.z_tableau"]], "sage.combinat.posets.all": [[175, "module-sage.combinat.posets.all"]], "cartesianproductposet (class in sage.combinat.posets.cartesian_product)": [[176, "sage.combinat.posets.cartesian_product.CartesianProductPoset"]], "cartesianproductposet.element (class in sage.combinat.posets.cartesian_product)": [[176, "sage.combinat.posets.cartesian_product.CartesianProductPoset.Element"]], "le() (sage.combinat.posets.cartesian_product.cartesianproductposet method)": [[176, "sage.combinat.posets.cartesian_product.CartesianProductPoset.le"]], "le_lex() (sage.combinat.posets.cartesian_product.cartesianproductposet method)": [[176, "sage.combinat.posets.cartesian_product.CartesianProductPoset.le_lex"]], "le_native() (sage.combinat.posets.cartesian_product.cartesianproductposet method)": [[176, "sage.combinat.posets.cartesian_product.CartesianProductPoset.le_native"]], "le_product() (sage.combinat.posets.cartesian_product.cartesianproductposet method)": [[176, "sage.combinat.posets.cartesian_product.CartesianProductPoset.le_product"]], "sage.combinat.posets.cartesian_product": [[176, "module-sage.combinat.posets.cartesian_product"]], "dcompleteposet (class in sage.combinat.posets.d_complete)": [[177, "sage.combinat.posets.d_complete.DCompletePoset"]], "get_hook() (sage.combinat.posets.d_complete.dcompleteposet method)": [[177, "sage.combinat.posets.d_complete.DCompletePoset.get_hook"]], "get_hooks() (sage.combinat.posets.d_complete.dcompleteposet method)": [[177, "sage.combinat.posets.d_complete.DCompletePoset.get_hooks"]], "hook_product() (sage.combinat.posets.d_complete.dcompleteposet method)": [[177, "sage.combinat.posets.d_complete.DCompletePoset.hook_product"]], "sage.combinat.posets.d_complete": [[177, "module-sage.combinat.posets.d_complete"]], "joinsemilatticeelement (class in sage.combinat.posets.elements)": [[178, "sage.combinat.posets.elements.JoinSemilatticeElement"]], "latticeposetelement (class in sage.combinat.posets.elements)": [[178, "sage.combinat.posets.elements.LatticePosetElement"]], "meetsemilatticeelement (class in sage.combinat.posets.elements)": [[178, "sage.combinat.posets.elements.MeetSemilatticeElement"]], "posetelement (class in sage.combinat.posets.elements)": [[178, "sage.combinat.posets.elements.PosetElement"]], "sage.combinat.posets.elements": [[178, "module-sage.combinat.posets.elements"]], "forestposet (class in sage.combinat.posets.forest)": [[179, "sage.combinat.posets.forest.ForestPoset"]], "sage.combinat.posets.forest": [[179, "module-sage.combinat.posets.forest"]], "hassediagram (class in sage.combinat.posets.hasse_diagram)": [[180, "sage.combinat.posets.hasse_diagram.HasseDiagram"]], "latticeerror": [[180, "sage.combinat.posets.hasse_diagram.LatticeError"]], "antichains() (sage.combinat.posets.hasse_diagram.hassediagram method)": [[180, "sage.combinat.posets.hasse_diagram.HasseDiagram.antichains"]], "antichains_iterator() (sage.combinat.posets.hasse_diagram.hassediagram method)": [[180, "sage.combinat.posets.hasse_diagram.HasseDiagram.antichains_iterator"]], "are_comparable() (sage.combinat.posets.hasse_diagram.hassediagram method)": [[180, "sage.combinat.posets.hasse_diagram.HasseDiagram.are_comparable"]], "are_incomparable() (sage.combinat.posets.hasse_diagram.hassediagram method)": [[180, "sage.combinat.posets.hasse_diagram.HasseDiagram.are_incomparable"]], "atoms_of_congruence_lattice() (sage.combinat.posets.hasse_diagram.hassediagram method)": [[180, "sage.combinat.posets.hasse_diagram.HasseDiagram.atoms_of_congruence_lattice"]], "bottom() (sage.combinat.posets.hasse_diagram.hassediagram method)": [[180, "sage.combinat.posets.hasse_diagram.HasseDiagram.bottom"]], "bottom_moebius_function() (sage.combinat.posets.hasse_diagram.hassediagram method)": [[180, "sage.combinat.posets.hasse_diagram.HasseDiagram.bottom_moebius_function"]], "cardinality() (sage.combinat.posets.hasse_diagram.hassediagram method)": [[180, "sage.combinat.posets.hasse_diagram.HasseDiagram.cardinality"]], "chains() (sage.combinat.posets.hasse_diagram.hassediagram method)": [[180, "sage.combinat.posets.hasse_diagram.HasseDiagram.chains"]], "closed_interval() (sage.combinat.posets.hasse_diagram.hassediagram method)": [[180, "sage.combinat.posets.hasse_diagram.HasseDiagram.closed_interval"]], "common_lower_covers() (sage.combinat.posets.hasse_diagram.hassediagram method)": [[180, "sage.combinat.posets.hasse_diagram.HasseDiagram.common_lower_covers"]], "common_upper_covers() (sage.combinat.posets.hasse_diagram.hassediagram method)": [[180, "sage.combinat.posets.hasse_diagram.HasseDiagram.common_upper_covers"]], "congruence() (sage.combinat.posets.hasse_diagram.hassediagram method)": [[180, "sage.combinat.posets.hasse_diagram.HasseDiagram.congruence"]], "congruences_iterator() (sage.combinat.posets.hasse_diagram.hassediagram method)": [[180, "sage.combinat.posets.hasse_diagram.HasseDiagram.congruences_iterator"]], "cover_relations() (sage.combinat.posets.hasse_diagram.hassediagram method)": [[180, "sage.combinat.posets.hasse_diagram.HasseDiagram.cover_relations"]], "cover_relations_iterator() (sage.combinat.posets.hasse_diagram.hassediagram method)": [[180, "sage.combinat.posets.hasse_diagram.HasseDiagram.cover_relations_iterator"]], "covers() (sage.combinat.posets.hasse_diagram.hassediagram method)": [[180, "sage.combinat.posets.hasse_diagram.HasseDiagram.covers"]], "coxeter_transformation() (sage.combinat.posets.hasse_diagram.hassediagram method)": [[180, "sage.combinat.posets.hasse_diagram.HasseDiagram.coxeter_transformation"]], "diamonds() (sage.combinat.posets.hasse_diagram.hassediagram method)": [[180, "sage.combinat.posets.hasse_diagram.HasseDiagram.diamonds"]], "dual() (sage.combinat.posets.hasse_diagram.hassediagram method)": [[180, "sage.combinat.posets.hasse_diagram.HasseDiagram.dual"]], "find_nonsemidistributive_elements() (sage.combinat.posets.hasse_diagram.hassediagram method)": [[180, "sage.combinat.posets.hasse_diagram.HasseDiagram.find_nonsemidistributive_elements"]], "find_nonsemimodular_pair() (sage.combinat.posets.hasse_diagram.hassediagram method)": [[180, "sage.combinat.posets.hasse_diagram.HasseDiagram.find_nonsemimodular_pair"]], "find_nontrivial_congruence() (sage.combinat.posets.hasse_diagram.hassediagram method)": [[180, "sage.combinat.posets.hasse_diagram.HasseDiagram.find_nontrivial_congruence"]], "frattini_sublattice() (sage.combinat.posets.hasse_diagram.hassediagram method)": [[180, "sage.combinat.posets.hasse_diagram.HasseDiagram.frattini_sublattice"]], "greedy_linear_extensions_iterator() (sage.combinat.posets.hasse_diagram.hassediagram method)": [[180, "sage.combinat.posets.hasse_diagram.HasseDiagram.greedy_linear_extensions_iterator"]], "has_bottom() (sage.combinat.posets.hasse_diagram.hassediagram method)": [[180, "sage.combinat.posets.hasse_diagram.HasseDiagram.has_bottom"]], "has_top() (sage.combinat.posets.hasse_diagram.hassediagram method)": [[180, "sage.combinat.posets.hasse_diagram.HasseDiagram.has_top"]], "interval() (sage.combinat.posets.hasse_diagram.hassediagram method)": [[180, "sage.combinat.posets.hasse_diagram.HasseDiagram.interval"]], "interval_iterator() (sage.combinat.posets.hasse_diagram.hassediagram method)": [[180, "sage.combinat.posets.hasse_diagram.HasseDiagram.interval_iterator"]], "is_antichain_of_poset() (sage.combinat.posets.hasse_diagram.hassediagram method)": [[180, "sage.combinat.posets.hasse_diagram.HasseDiagram.is_antichain_of_poset"]], "is_bounded() (sage.combinat.posets.hasse_diagram.hassediagram method)": [[180, "sage.combinat.posets.hasse_diagram.HasseDiagram.is_bounded"]], "is_chain() (sage.combinat.posets.hasse_diagram.hassediagram method)": [[180, "sage.combinat.posets.hasse_diagram.HasseDiagram.is_chain"]], "is_complemented() (sage.combinat.posets.hasse_diagram.hassediagram method)": [[180, "sage.combinat.posets.hasse_diagram.HasseDiagram.is_complemented"]], "is_congruence_normal() (sage.combinat.posets.hasse_diagram.hassediagram method)": [[180, "sage.combinat.posets.hasse_diagram.HasseDiagram.is_congruence_normal"]], "is_convex_subset() (sage.combinat.posets.hasse_diagram.hassediagram method)": [[180, "sage.combinat.posets.hasse_diagram.HasseDiagram.is_convex_subset"]], "is_gequal() (sage.combinat.posets.hasse_diagram.hassediagram method)": [[180, "sage.combinat.posets.hasse_diagram.HasseDiagram.is_gequal"]], "is_greater_than() (sage.combinat.posets.hasse_diagram.hassediagram method)": [[180, "sage.combinat.posets.hasse_diagram.HasseDiagram.is_greater_than"]], "is_join_semilattice() (sage.combinat.posets.hasse_diagram.hassediagram method)": [[180, "sage.combinat.posets.hasse_diagram.HasseDiagram.is_join_semilattice"]], "is_lequal() (sage.combinat.posets.hasse_diagram.hassediagram method)": [[180, "sage.combinat.posets.hasse_diagram.HasseDiagram.is_lequal"]], "is_less_than() (sage.combinat.posets.hasse_diagram.hassediagram method)": [[180, "sage.combinat.posets.hasse_diagram.HasseDiagram.is_less_than"]], "is_linear_extension() (sage.combinat.posets.hasse_diagram.hassediagram method)": [[180, "sage.combinat.posets.hasse_diagram.HasseDiagram.is_linear_extension"]], "is_linear_interval() (sage.combinat.posets.hasse_diagram.hassediagram method)": [[180, "sage.combinat.posets.hasse_diagram.HasseDiagram.is_linear_interval"]], "is_meet_semilattice() (sage.combinat.posets.hasse_diagram.hassediagram method)": [[180, "sage.combinat.posets.hasse_diagram.HasseDiagram.is_meet_semilattice"]], "is_ranked() (sage.combinat.posets.hasse_diagram.hassediagram method)": [[180, "sage.combinat.posets.hasse_diagram.HasseDiagram.is_ranked"]], "join_matrix() (sage.combinat.posets.hasse_diagram.hassediagram method)": [[180, "sage.combinat.posets.hasse_diagram.HasseDiagram.join_matrix"]], "kappa() (sage.combinat.posets.hasse_diagram.hassediagram method)": [[180, "sage.combinat.posets.hasse_diagram.HasseDiagram.kappa"]], "kappa_dual() (sage.combinat.posets.hasse_diagram.hassediagram method)": [[180, "sage.combinat.posets.hasse_diagram.HasseDiagram.kappa_dual"]], "lequal_matrix() (sage.combinat.posets.hasse_diagram.hassediagram method)": [[180, "sage.combinat.posets.hasse_diagram.HasseDiagram.lequal_matrix"]], "linear_extension() (sage.combinat.posets.hasse_diagram.hassediagram method)": [[180, "sage.combinat.posets.hasse_diagram.HasseDiagram.linear_extension"]], "linear_extensions() (sage.combinat.posets.hasse_diagram.hassediagram method)": [[180, "sage.combinat.posets.hasse_diagram.HasseDiagram.linear_extensions"]], "lower_covers_iterator() (sage.combinat.posets.hasse_diagram.hassediagram method)": [[180, "sage.combinat.posets.hasse_diagram.HasseDiagram.lower_covers_iterator"]], "maximal_elements() (sage.combinat.posets.hasse_diagram.hassediagram method)": [[180, "sage.combinat.posets.hasse_diagram.HasseDiagram.maximal_elements"]], "maximal_sublattices() (sage.combinat.posets.hasse_diagram.hassediagram method)": [[180, "sage.combinat.posets.hasse_diagram.HasseDiagram.maximal_sublattices"]], "meet_matrix() (sage.combinat.posets.hasse_diagram.hassediagram method)": [[180, "sage.combinat.posets.hasse_diagram.HasseDiagram.meet_matrix"]], "minimal_elements() (sage.combinat.posets.hasse_diagram.hassediagram method)": [[180, "sage.combinat.posets.hasse_diagram.HasseDiagram.minimal_elements"]], "moebius_function() (sage.combinat.posets.hasse_diagram.hassediagram method)": [[180, "sage.combinat.posets.hasse_diagram.HasseDiagram.moebius_function"]], "moebius_function_matrix() (sage.combinat.posets.hasse_diagram.hassediagram method)": [[180, "sage.combinat.posets.hasse_diagram.HasseDiagram.moebius_function_matrix"]], "neutral_elements() (sage.combinat.posets.hasse_diagram.hassediagram method)": [[180, "sage.combinat.posets.hasse_diagram.HasseDiagram.neutral_elements"]], "open_interval() (sage.combinat.posets.hasse_diagram.hassediagram method)": [[180, "sage.combinat.posets.hasse_diagram.HasseDiagram.open_interval"]], "order_filter() (sage.combinat.posets.hasse_diagram.hassediagram method)": [[180, "sage.combinat.posets.hasse_diagram.HasseDiagram.order_filter"]], "order_ideal() (sage.combinat.posets.hasse_diagram.hassediagram method)": [[180, "sage.combinat.posets.hasse_diagram.HasseDiagram.order_ideal"]], "order_ideal_cardinality() (sage.combinat.posets.hasse_diagram.hassediagram method)": [[180, "sage.combinat.posets.hasse_diagram.HasseDiagram.order_ideal_cardinality"]], "orthocomplementations_iterator() (sage.combinat.posets.hasse_diagram.hassediagram method)": [[180, "sage.combinat.posets.hasse_diagram.HasseDiagram.orthocomplementations_iterator"]], "prime_elements() (sage.combinat.posets.hasse_diagram.hassediagram method)": [[180, "sage.combinat.posets.hasse_diagram.HasseDiagram.prime_elements"]], "principal_congruences_poset() (sage.combinat.posets.hasse_diagram.hassediagram method)": [[180, "sage.combinat.posets.hasse_diagram.HasseDiagram.principal_congruences_poset"]], "principal_order_filter() (sage.combinat.posets.hasse_diagram.hassediagram method)": [[180, "sage.combinat.posets.hasse_diagram.HasseDiagram.principal_order_filter"]], "principal_order_ideal() (sage.combinat.posets.hasse_diagram.hassediagram method)": [[180, "sage.combinat.posets.hasse_diagram.HasseDiagram.principal_order_ideal"]], "pseudocomplement() (sage.combinat.posets.hasse_diagram.hassediagram method)": [[180, "sage.combinat.posets.hasse_diagram.HasseDiagram.pseudocomplement"]], "rank() (sage.combinat.posets.hasse_diagram.hassediagram method)": [[180, "sage.combinat.posets.hasse_diagram.HasseDiagram.rank"]], "rank_function() (sage.combinat.posets.hasse_diagram.hassediagram method)": [[180, "sage.combinat.posets.hasse_diagram.HasseDiagram.rank_function"]], "sage.combinat.posets.hasse_diagram": [[180, "module-sage.combinat.posets.hasse_diagram"]], "skeleton() (sage.combinat.posets.hasse_diagram.hassediagram method)": [[180, "sage.combinat.posets.hasse_diagram.HasseDiagram.skeleton"]], "sublattices_iterator() (sage.combinat.posets.hasse_diagram.hassediagram method)": [[180, "sage.combinat.posets.hasse_diagram.HasseDiagram.sublattices_iterator"]], "supergreedy_linear_extensions_iterator() (sage.combinat.posets.hasse_diagram.hassediagram method)": [[180, "sage.combinat.posets.hasse_diagram.HasseDiagram.supergreedy_linear_extensions_iterator"]], "top() (sage.combinat.posets.hasse_diagram.hassediagram method)": [[180, "sage.combinat.posets.hasse_diagram.HasseDiagram.top"]], "upper_covers_iterator() (sage.combinat.posets.hasse_diagram.hassediagram method)": [[180, "sage.combinat.posets.hasse_diagram.HasseDiagram.upper_covers_iterator"]], "vertical_decomposition() (sage.combinat.posets.hasse_diagram.hassediagram method)": [[180, "sage.combinat.posets.hasse_diagram.HasseDiagram.vertical_decomposition"]], "incidencealgebra (class in sage.combinat.posets.incidence_algebras)": [[181, "sage.combinat.posets.incidence_algebras.IncidenceAlgebra"]], "incidencealgebra.element (class in sage.combinat.posets.incidence_algebras)": [[181, "sage.combinat.posets.incidence_algebras.IncidenceAlgebra.Element"]], "reducedincidencealgebra (class in sage.combinat.posets.incidence_algebras)": [[181, "sage.combinat.posets.incidence_algebras.ReducedIncidenceAlgebra"]], "reducedincidencealgebra.element (class in sage.combinat.posets.incidence_algebras)": [[181, "sage.combinat.posets.incidence_algebras.ReducedIncidenceAlgebra.Element"]], "delta() (sage.combinat.posets.incidence_algebras.incidencealgebra method)": [[181, "sage.combinat.posets.incidence_algebras.IncidenceAlgebra.delta"]], "delta() (sage.combinat.posets.incidence_algebras.reducedincidencealgebra method)": [[181, "sage.combinat.posets.incidence_algebras.ReducedIncidenceAlgebra.delta"]], "is_unit() (sage.combinat.posets.incidence_algebras.incidencealgebra.element method)": [[181, "sage.combinat.posets.incidence_algebras.IncidenceAlgebra.Element.is_unit"]], "is_unit() (sage.combinat.posets.incidence_algebras.reducedincidencealgebra.element method)": [[181, "sage.combinat.posets.incidence_algebras.ReducedIncidenceAlgebra.Element.is_unit"]], "lift() (sage.combinat.posets.incidence_algebras.reducedincidencealgebra method)": [[181, "sage.combinat.posets.incidence_algebras.ReducedIncidenceAlgebra.lift"]], "lift() (sage.combinat.posets.incidence_algebras.reducedincidencealgebra.element method)": [[181, "sage.combinat.posets.incidence_algebras.ReducedIncidenceAlgebra.Element.lift"]], "moebius() (sage.combinat.posets.incidence_algebras.incidencealgebra method)": [[181, "sage.combinat.posets.incidence_algebras.IncidenceAlgebra.moebius"]], "moebius() (sage.combinat.posets.incidence_algebras.reducedincidencealgebra method)": [[181, "sage.combinat.posets.incidence_algebras.ReducedIncidenceAlgebra.moebius"]], "one() (sage.combinat.posets.incidence_algebras.incidencealgebra method)": [[181, "sage.combinat.posets.incidence_algebras.IncidenceAlgebra.one"]], "one_basis() (sage.combinat.posets.incidence_algebras.reducedincidencealgebra method)": [[181, "sage.combinat.posets.incidence_algebras.ReducedIncidenceAlgebra.one_basis"]], "poset() (sage.combinat.posets.incidence_algebras.incidencealgebra method)": [[181, "sage.combinat.posets.incidence_algebras.IncidenceAlgebra.poset"]], "poset() (sage.combinat.posets.incidence_algebras.reducedincidencealgebra method)": [[181, "sage.combinat.posets.incidence_algebras.ReducedIncidenceAlgebra.poset"]], "product_on_basis() (sage.combinat.posets.incidence_algebras.incidencealgebra method)": [[181, "sage.combinat.posets.incidence_algebras.IncidenceAlgebra.product_on_basis"]], "reduced_subalgebra() (sage.combinat.posets.incidence_algebras.incidencealgebra method)": [[181, "sage.combinat.posets.incidence_algebras.IncidenceAlgebra.reduced_subalgebra"]], "sage.combinat.posets.incidence_algebras": [[181, "module-sage.combinat.posets.incidence_algebras"]], "some_elements() (sage.combinat.posets.incidence_algebras.incidencealgebra method)": [[181, "sage.combinat.posets.incidence_algebras.IncidenceAlgebra.some_elements"]], "some_elements() (sage.combinat.posets.incidence_algebras.reducedincidencealgebra method)": [[181, "sage.combinat.posets.incidence_algebras.ReducedIncidenceAlgebra.some_elements"]], "to_matrix() (sage.combinat.posets.incidence_algebras.incidencealgebra.element method)": [[181, "sage.combinat.posets.incidence_algebras.IncidenceAlgebra.Element.to_matrix"]], "to_matrix() (sage.combinat.posets.incidence_algebras.reducedincidencealgebra.element method)": [[181, "sage.combinat.posets.incidence_algebras.ReducedIncidenceAlgebra.Element.to_matrix"]], "zeta() (sage.combinat.posets.incidence_algebras.incidencealgebra method)": [[181, "sage.combinat.posets.incidence_algebras.IncidenceAlgebra.zeta"]], "zeta() (sage.combinat.posets.incidence_algebras.reducedincidencealgebra method)": [[181, "sage.combinat.posets.incidence_algebras.ReducedIncidenceAlgebra.zeta"]], "element (sage.combinat.posets.lattices.finitejoinsemilattice attribute)": [[182, "sage.combinat.posets.lattices.FiniteJoinSemilattice.Element"]], "element (sage.combinat.posets.lattices.finitelatticeposet attribute)": [[182, "sage.combinat.posets.lattices.FiniteLatticePoset.Element"]], "element (sage.combinat.posets.lattices.finitemeetsemilattice attribute)": [[182, "sage.combinat.posets.lattices.FiniteMeetSemilattice.Element"]], "finitejoinsemilattice (class in sage.combinat.posets.lattices)": [[182, "sage.combinat.posets.lattices.FiniteJoinSemilattice"]], "finitelatticeposet (class in sage.combinat.posets.lattices)": [[182, "sage.combinat.posets.lattices.FiniteLatticePoset"]], "finitemeetsemilattice (class in sage.combinat.posets.lattices)": [[182, "sage.combinat.posets.lattices.FiniteMeetSemilattice"]], "joinsemilattice() (in module sage.combinat.posets.lattices)": [[182, "sage.combinat.posets.lattices.JoinSemilattice"]], "latticeposet() (in module sage.combinat.posets.lattices)": [[182, "sage.combinat.posets.lattices.LatticePoset"]], "meetsemilattice() (in module sage.combinat.posets.lattices)": [[182, "sage.combinat.posets.lattices.MeetSemilattice"]], "adjunct() (sage.combinat.posets.lattices.finitelatticeposet method)": [[182, "sage.combinat.posets.lattices.FiniteLatticePoset.adjunct"]], "atoms() (sage.combinat.posets.lattices.finitemeetsemilattice method)": [[182, "sage.combinat.posets.lattices.FiniteMeetSemilattice.atoms"]], "breadth() (sage.combinat.posets.lattices.finitelatticeposet method)": [[182, "sage.combinat.posets.lattices.FiniteLatticePoset.breadth"]], "canonical_joinands() (sage.combinat.posets.lattices.finitelatticeposet method)": [[182, "sage.combinat.posets.lattices.FiniteLatticePoset.canonical_joinands"]], "canonical_meetands() (sage.combinat.posets.lattices.finitelatticeposet method)": [[182, "sage.combinat.posets.lattices.FiniteLatticePoset.canonical_meetands"]], "center() (sage.combinat.posets.lattices.finitelatticeposet method)": [[182, "sage.combinat.posets.lattices.FiniteLatticePoset.center"]], "coatoms() (sage.combinat.posets.lattices.finitejoinsemilattice method)": [[182, "sage.combinat.posets.lattices.FiniteJoinSemilattice.coatoms"]], "complements() (sage.combinat.posets.lattices.finitelatticeposet method)": [[182, "sage.combinat.posets.lattices.FiniteLatticePoset.complements"]], "congruence() (sage.combinat.posets.lattices.finitelatticeposet method)": [[182, "sage.combinat.posets.lattices.FiniteLatticePoset.congruence"]], "congruences_lattice() (sage.combinat.posets.lattices.finitelatticeposet method)": [[182, "sage.combinat.posets.lattices.FiniteLatticePoset.congruences_lattice"]], "day_doubling() (sage.combinat.posets.lattices.finitelatticeposet method)": [[182, "sage.combinat.posets.lattices.FiniteLatticePoset.day_doubling"]], "double_irreducibles() (sage.combinat.posets.lattices.finitelatticeposet method)": [[182, "sage.combinat.posets.lattices.FiniteLatticePoset.double_irreducibles"]], "feichtner_yuzvinsky_ring() (sage.combinat.posets.lattices.finitelatticeposet method)": [[182, "sage.combinat.posets.lattices.FiniteLatticePoset.feichtner_yuzvinsky_ring"]], "frattini_sublattice() (sage.combinat.posets.lattices.finitelatticeposet method)": [[182, "sage.combinat.posets.lattices.FiniteLatticePoset.frattini_sublattice"]], "is_atomic() (sage.combinat.posets.lattices.finitelatticeposet method)": [[182, "sage.combinat.posets.lattices.FiniteLatticePoset.is_atomic"]], "is_coatomic() (sage.combinat.posets.lattices.finitelatticeposet method)": [[182, "sage.combinat.posets.lattices.FiniteLatticePoset.is_coatomic"]], "is_complemented() (sage.combinat.posets.lattices.finitelatticeposet method)": [[182, "sage.combinat.posets.lattices.FiniteLatticePoset.is_complemented"]], "is_constructible_by_doublings() (sage.combinat.posets.lattices.finitelatticeposet method)": [[182, "sage.combinat.posets.lattices.FiniteLatticePoset.is_constructible_by_doublings"]], "is_cosectionally_complemented() (sage.combinat.posets.lattices.finitelatticeposet method)": [[182, "sage.combinat.posets.lattices.FiniteLatticePoset.is_cosectionally_complemented"]], "is_dismantlable() (sage.combinat.posets.lattices.finitelatticeposet method)": [[182, "sage.combinat.posets.lattices.FiniteLatticePoset.is_dismantlable"]], "is_distributive() (sage.combinat.posets.lattices.finitelatticeposet method)": [[182, "sage.combinat.posets.lattices.FiniteLatticePoset.is_distributive"]], "is_extremal() (sage.combinat.posets.lattices.finitelatticeposet method)": [[182, "sage.combinat.posets.lattices.FiniteLatticePoset.is_extremal"]], "is_geometric() (sage.combinat.posets.lattices.finitelatticeposet method)": [[182, "sage.combinat.posets.lattices.FiniteLatticePoset.is_geometric"]], "is_interval_dismantlable() (sage.combinat.posets.lattices.finitelatticeposet method)": [[182, "sage.combinat.posets.lattices.FiniteLatticePoset.is_interval_dismantlable"]], "is_isoform() (sage.combinat.posets.lattices.finitelatticeposet method)": [[182, "sage.combinat.posets.lattices.FiniteLatticePoset.is_isoform"]], "is_join_distributive() (sage.combinat.posets.lattices.finitelatticeposet method)": [[182, "sage.combinat.posets.lattices.FiniteLatticePoset.is_join_distributive"]], "is_join_pseudocomplemented() (sage.combinat.posets.lattices.finitelatticeposet method)": [[182, "sage.combinat.posets.lattices.FiniteLatticePoset.is_join_pseudocomplemented"]], "is_join_semidistributive() (sage.combinat.posets.lattices.finitelatticeposet method)": [[182, "sage.combinat.posets.lattices.FiniteLatticePoset.is_join_semidistributive"]], "is_left_modular_element() (sage.combinat.posets.lattices.finitelatticeposet method)": [[182, "sage.combinat.posets.lattices.FiniteLatticePoset.is_left_modular_element"]], "is_lower_semimodular() (sage.combinat.posets.lattices.finitelatticeposet method)": [[182, "sage.combinat.posets.lattices.FiniteLatticePoset.is_lower_semimodular"]], "is_meet_distributive() (sage.combinat.posets.lattices.finitelatticeposet method)": [[182, "sage.combinat.posets.lattices.FiniteLatticePoset.is_meet_distributive"]], "is_meet_semidistributive() (sage.combinat.posets.lattices.finitelatticeposet method)": [[182, "sage.combinat.posets.lattices.FiniteLatticePoset.is_meet_semidistributive"]], "is_modular() (sage.combinat.posets.lattices.finitelatticeposet method)": [[182, "sage.combinat.posets.lattices.FiniteLatticePoset.is_modular"]], "is_modular_element() (sage.combinat.posets.lattices.finitelatticeposet method)": [[182, "sage.combinat.posets.lattices.FiniteLatticePoset.is_modular_element"]], "is_orthocomplemented() (sage.combinat.posets.lattices.finitelatticeposet method)": [[182, "sage.combinat.posets.lattices.FiniteLatticePoset.is_orthocomplemented"]], "is_planar() (sage.combinat.posets.lattices.finitelatticeposet method)": [[182, "sage.combinat.posets.lattices.FiniteLatticePoset.is_planar"]], "is_pseudocomplemented() (sage.combinat.posets.lattices.finitelatticeposet method)": [[182, "sage.combinat.posets.lattices.FiniteLatticePoset.is_pseudocomplemented"]], "is_regular() (sage.combinat.posets.lattices.finitelatticeposet method)": [[182, "sage.combinat.posets.lattices.FiniteLatticePoset.is_regular"]], "is_relatively_complemented() (sage.combinat.posets.lattices.finitelatticeposet method)": [[182, "sage.combinat.posets.lattices.FiniteLatticePoset.is_relatively_complemented"]], "is_sectionally_complemented() (sage.combinat.posets.lattices.finitelatticeposet method)": [[182, "sage.combinat.posets.lattices.FiniteLatticePoset.is_sectionally_complemented"]], "is_semidistributive() (sage.combinat.posets.lattices.finitelatticeposet method)": [[182, "sage.combinat.posets.lattices.FiniteLatticePoset.is_semidistributive"]], "is_simple() (sage.combinat.posets.lattices.finitelatticeposet method)": [[182, "sage.combinat.posets.lattices.FiniteLatticePoset.is_simple"]], "is_stone() (sage.combinat.posets.lattices.finitelatticeposet method)": [[182, "sage.combinat.posets.lattices.FiniteLatticePoset.is_stone"]], "is_subdirectly_reducible() (sage.combinat.posets.lattices.finitelatticeposet method)": [[182, "sage.combinat.posets.lattices.FiniteLatticePoset.is_subdirectly_reducible"]], "is_sublattice() (sage.combinat.posets.lattices.finitelatticeposet method)": [[182, "sage.combinat.posets.lattices.FiniteLatticePoset.is_sublattice"]], "is_sublattice_dismantlable() (sage.combinat.posets.lattices.finitelatticeposet method)": [[182, "sage.combinat.posets.lattices.FiniteLatticePoset.is_sublattice_dismantlable"]], "is_supersolvable() (sage.combinat.posets.lattices.finitelatticeposet method)": [[182, "sage.combinat.posets.lattices.FiniteLatticePoset.is_supersolvable"]], "is_trim() (sage.combinat.posets.lattices.finitelatticeposet method)": [[182, "sage.combinat.posets.lattices.FiniteLatticePoset.is_trim"]], "is_uniform() (sage.combinat.posets.lattices.finitelatticeposet method)": [[182, "sage.combinat.posets.lattices.FiniteLatticePoset.is_uniform"]], "is_upper_semimodular() (sage.combinat.posets.lattices.finitelatticeposet method)": [[182, "sage.combinat.posets.lattices.FiniteLatticePoset.is_upper_semimodular"]], "is_vertically_decomposable() (sage.combinat.posets.lattices.finitelatticeposet method)": [[182, "sage.combinat.posets.lattices.FiniteLatticePoset.is_vertically_decomposable"]], "isomorphic_sublattices_iterator() (sage.combinat.posets.lattices.finitelatticeposet method)": [[182, "sage.combinat.posets.lattices.FiniteLatticePoset.isomorphic_sublattices_iterator"]], "join() (sage.combinat.posets.lattices.finitejoinsemilattice method)": [[182, "sage.combinat.posets.lattices.FiniteJoinSemilattice.join"]], "join_matrix() (sage.combinat.posets.lattices.finitejoinsemilattice method)": [[182, "sage.combinat.posets.lattices.FiniteJoinSemilattice.join_matrix"]], "join_primes() (sage.combinat.posets.lattices.finitelatticeposet method)": [[182, "sage.combinat.posets.lattices.FiniteLatticePoset.join_primes"]], "maximal_sublattices() (sage.combinat.posets.lattices.finitelatticeposet method)": [[182, "sage.combinat.posets.lattices.FiniteLatticePoset.maximal_sublattices"]], "meet() (sage.combinat.posets.lattices.finitemeetsemilattice method)": [[182, "sage.combinat.posets.lattices.FiniteMeetSemilattice.meet"]], "meet_matrix() (sage.combinat.posets.lattices.finitemeetsemilattice method)": [[182, "sage.combinat.posets.lattices.FiniteMeetSemilattice.meet_matrix"]], "meet_primes() (sage.combinat.posets.lattices.finitelatticeposet method)": [[182, "sage.combinat.posets.lattices.FiniteLatticePoset.meet_primes"]], "moebius_algebra() (sage.combinat.posets.lattices.finitelatticeposet method)": [[182, "sage.combinat.posets.lattices.FiniteLatticePoset.moebius_algebra"]], "neutral_elements() (sage.combinat.posets.lattices.finitelatticeposet method)": [[182, "sage.combinat.posets.lattices.FiniteLatticePoset.neutral_elements"]], "pseudocomplement() (sage.combinat.posets.lattices.finitemeetsemilattice method)": [[182, "sage.combinat.posets.lattices.FiniteMeetSemilattice.pseudocomplement"]], "quantum_moebius_algebra() (sage.combinat.posets.lattices.finitelatticeposet method)": [[182, "sage.combinat.posets.lattices.FiniteLatticePoset.quantum_moebius_algebra"]], "quotient() (sage.combinat.posets.lattices.finitelatticeposet method)": [[182, "sage.combinat.posets.lattices.FiniteLatticePoset.quotient"]], "sage.combinat.posets.lattices": [[182, "module-sage.combinat.posets.lattices"]], "skeleton() (sage.combinat.posets.lattices.finitelatticeposet method)": [[182, "sage.combinat.posets.lattices.FiniteLatticePoset.skeleton"]], "subdirect_decomposition() (sage.combinat.posets.lattices.finitelatticeposet method)": [[182, "sage.combinat.posets.lattices.FiniteLatticePoset.subdirect_decomposition"]], "subjoinsemilattice() (sage.combinat.posets.lattices.finitemeetsemilattice method)": [[182, "sage.combinat.posets.lattices.FiniteMeetSemilattice.subjoinsemilattice"]], "sublattice() (sage.combinat.posets.lattices.finitelatticeposet method)": [[182, "sage.combinat.posets.lattices.FiniteLatticePoset.sublattice"]], "sublattices() (sage.combinat.posets.lattices.finitelatticeposet method)": [[182, "sage.combinat.posets.lattices.FiniteLatticePoset.sublattices"]], "sublattices_lattice() (sage.combinat.posets.lattices.finitelatticeposet method)": [[182, "sage.combinat.posets.lattices.FiniteLatticePoset.sublattices_lattice"]], "submeetsemilattice() (sage.combinat.posets.lattices.finitemeetsemilattice method)": [[182, "sage.combinat.posets.lattices.FiniteMeetSemilattice.submeetsemilattice"]], "vertical_composition() (sage.combinat.posets.lattices.finitelatticeposet method)": [[182, "sage.combinat.posets.lattices.FiniteLatticePoset.vertical_composition"]], "vertical_decomposition() (sage.combinat.posets.lattices.finitelatticeposet method)": [[182, "sage.combinat.posets.lattices.FiniteLatticePoset.vertical_decomposition"]], "element (sage.combinat.posets.linear_extensions.linearextensionsofposet attribute)": [[183, "sage.combinat.posets.linear_extensions.LinearExtensionsOfPoset.Element"]], "linearextensionofposet (class in sage.combinat.posets.linear_extensions)": [[183, "sage.combinat.posets.linear_extensions.LinearExtensionOfPoset"]], "linearextensionsofforest (class in sage.combinat.posets.linear_extensions)": [[183, "sage.combinat.posets.linear_extensions.LinearExtensionsOfForest"]], "linearextensionsofmobile (class in sage.combinat.posets.linear_extensions)": [[183, "sage.combinat.posets.linear_extensions.LinearExtensionsOfMobile"]], "linearextensionsofposet (class in sage.combinat.posets.linear_extensions)": [[183, "sage.combinat.posets.linear_extensions.LinearExtensionsOfPoset"]], "linearextensionsofposetwithhooks (class in sage.combinat.posets.linear_extensions)": [[183, "sage.combinat.posets.linear_extensions.LinearExtensionsOfPosetWithHooks"]], "cardinality() (sage.combinat.posets.linear_extensions.linearextensionsofforest method)": [[183, "sage.combinat.posets.linear_extensions.LinearExtensionsOfForest.cardinality"]], "cardinality() (sage.combinat.posets.linear_extensions.linearextensionsofmobile method)": [[183, "sage.combinat.posets.linear_extensions.LinearExtensionsOfMobile.cardinality"]], "cardinality() (sage.combinat.posets.linear_extensions.linearextensionsofposet method)": [[183, "sage.combinat.posets.linear_extensions.LinearExtensionsOfPoset.cardinality"]], "cardinality() (sage.combinat.posets.linear_extensions.linearextensionsofposetwithhooks method)": [[183, "sage.combinat.posets.linear_extensions.LinearExtensionsOfPosetWithHooks.cardinality"]], "check() (sage.combinat.posets.linear_extensions.linearextensionofposet method)": [[183, "sage.combinat.posets.linear_extensions.LinearExtensionOfPoset.check"]], "evacuation() (sage.combinat.posets.linear_extensions.linearextensionofposet method)": [[183, "sage.combinat.posets.linear_extensions.LinearExtensionOfPoset.evacuation"]], "is_greedy() (sage.combinat.posets.linear_extensions.linearextensionofposet method)": [[183, "sage.combinat.posets.linear_extensions.LinearExtensionOfPoset.is_greedy"]], "is_supergreedy() (sage.combinat.posets.linear_extensions.linearextensionofposet method)": [[183, "sage.combinat.posets.linear_extensions.LinearExtensionOfPoset.is_supergreedy"]], "jump_count() (sage.combinat.posets.linear_extensions.linearextensionofposet method)": [[183, "sage.combinat.posets.linear_extensions.LinearExtensionOfPoset.jump_count"]], "markov_chain_digraph() (sage.combinat.posets.linear_extensions.linearextensionsofposet method)": [[183, "sage.combinat.posets.linear_extensions.LinearExtensionsOfPoset.markov_chain_digraph"]], "markov_chain_transition_matrix() (sage.combinat.posets.linear_extensions.linearextensionsofposet method)": [[183, "sage.combinat.posets.linear_extensions.LinearExtensionsOfPoset.markov_chain_transition_matrix"]], "poset() (sage.combinat.posets.linear_extensions.linearextensionofposet method)": [[183, "sage.combinat.posets.linear_extensions.LinearExtensionOfPoset.poset"]], "poset() (sage.combinat.posets.linear_extensions.linearextensionsofposet method)": [[183, "sage.combinat.posets.linear_extensions.LinearExtensionsOfPoset.poset"]], "promotion() (sage.combinat.posets.linear_extensions.linearextensionofposet method)": [[183, "sage.combinat.posets.linear_extensions.LinearExtensionOfPoset.promotion"]], "sage.combinat.posets.linear_extensions": [[183, "module-sage.combinat.posets.linear_extensions"]], "tau() (sage.combinat.posets.linear_extensions.linearextensionofposet method)": [[183, "sage.combinat.posets.linear_extensions.LinearExtensionOfPoset.tau"]], "to_poset() (sage.combinat.posets.linear_extensions.linearextensionofposet method)": [[183, "sage.combinat.posets.linear_extensions.LinearExtensionOfPoset.to_poset"]], "mobileposet (class in sage.combinat.posets.mobile)": [[184, "sage.combinat.posets.mobile.MobilePoset"]], "anchor() (sage.combinat.posets.mobile.mobileposet method)": [[184, "sage.combinat.posets.mobile.MobilePoset.anchor"]], "ribbon() (sage.combinat.posets.mobile.mobileposet method)": [[184, "sage.combinat.posets.mobile.MobilePoset.ribbon"]], "sage.combinat.posets.mobile": [[184, "module-sage.combinat.posets.mobile"]], "basisabstract (class in sage.combinat.posets.moebius_algebra)": [[185, "sage.combinat.posets.moebius_algebra.BasisAbstract"]], "moebiusalgebra (class in sage.combinat.posets.moebius_algebra)": [[185, "sage.combinat.posets.moebius_algebra.MoebiusAlgebra"]], "moebiusalgebra.e (class in sage.combinat.posets.moebius_algebra)": [[185, "sage.combinat.posets.moebius_algebra.MoebiusAlgebra.E"]], "moebiusalgebra.i (class in sage.combinat.posets.moebius_algebra)": [[185, "sage.combinat.posets.moebius_algebra.MoebiusAlgebra.I"]], "moebiusalgebrabases (class in sage.combinat.posets.moebius_algebra)": [[185, "sage.combinat.posets.moebius_algebra.MoebiusAlgebraBases"]], "moebiusalgebrabases.elementmethods (class in sage.combinat.posets.moebius_algebra)": [[185, "sage.combinat.posets.moebius_algebra.MoebiusAlgebraBases.ElementMethods"]], "moebiusalgebrabases.parentmethods (class in sage.combinat.posets.moebius_algebra)": [[185, "sage.combinat.posets.moebius_algebra.MoebiusAlgebraBases.ParentMethods"]], "quantummoebiusalgebra (class in sage.combinat.posets.moebius_algebra)": [[185, "sage.combinat.posets.moebius_algebra.QuantumMoebiusAlgebra"]], "quantummoebiusalgebra.c (class in sage.combinat.posets.moebius_algebra)": [[185, "sage.combinat.posets.moebius_algebra.QuantumMoebiusAlgebra.C"]], "quantummoebiusalgebra.e (class in sage.combinat.posets.moebius_algebra)": [[185, "sage.combinat.posets.moebius_algebra.QuantumMoebiusAlgebra.E"]], "quantummoebiusalgebra.kl (class in sage.combinat.posets.moebius_algebra)": [[185, "sage.combinat.posets.moebius_algebra.QuantumMoebiusAlgebra.KL"]], "a_realization() (sage.combinat.posets.moebius_algebra.moebiusalgebra method)": [[185, "sage.combinat.posets.moebius_algebra.MoebiusAlgebra.a_realization"]], "a_realization() (sage.combinat.posets.moebius_algebra.quantummoebiusalgebra method)": [[185, "sage.combinat.posets.moebius_algebra.QuantumMoebiusAlgebra.a_realization"]], "characteristic_basis (sage.combinat.posets.moebius_algebra.quantummoebiusalgebra attribute)": [[185, "sage.combinat.posets.moebius_algebra.QuantumMoebiusAlgebra.characteristic_basis"]], "idempotent (sage.combinat.posets.moebius_algebra.moebiusalgebra attribute)": [[185, "sage.combinat.posets.moebius_algebra.MoebiusAlgebra.idempotent"]], "kazhdan_lusztig (sage.combinat.posets.moebius_algebra.quantummoebiusalgebra attribute)": [[185, "sage.combinat.posets.moebius_algebra.QuantumMoebiusAlgebra.kazhdan_lusztig"]], "lattice() (sage.combinat.posets.moebius_algebra.moebiusalgebra method)": [[185, "sage.combinat.posets.moebius_algebra.MoebiusAlgebra.lattice"]], "lattice() (sage.combinat.posets.moebius_algebra.quantummoebiusalgebra method)": [[185, "sage.combinat.posets.moebius_algebra.QuantumMoebiusAlgebra.lattice"]], "natural (sage.combinat.posets.moebius_algebra.moebiusalgebra attribute)": [[185, "sage.combinat.posets.moebius_algebra.MoebiusAlgebra.natural"]], "natural (sage.combinat.posets.moebius_algebra.quantummoebiusalgebra attribute)": [[185, "sage.combinat.posets.moebius_algebra.QuantumMoebiusAlgebra.natural"]], "one() (sage.combinat.posets.moebius_algebra.moebiusalgebra.e method)": [[185, "sage.combinat.posets.moebius_algebra.MoebiusAlgebra.E.one"]], "one() (sage.combinat.posets.moebius_algebra.moebiusalgebra.i method)": [[185, "sage.combinat.posets.moebius_algebra.MoebiusAlgebra.I.one"]], "one() (sage.combinat.posets.moebius_algebra.moebiusalgebrabases.parentmethods method)": [[185, "sage.combinat.posets.moebius_algebra.MoebiusAlgebraBases.ParentMethods.one"]], "one() (sage.combinat.posets.moebius_algebra.quantummoebiusalgebra.e method)": [[185, "sage.combinat.posets.moebius_algebra.QuantumMoebiusAlgebra.E.one"]], "product_on_basis() (sage.combinat.posets.moebius_algebra.moebiusalgebra.e method)": [[185, "sage.combinat.posets.moebius_algebra.MoebiusAlgebra.E.product_on_basis"]], "product_on_basis() (sage.combinat.posets.moebius_algebra.moebiusalgebra.i method)": [[185, "sage.combinat.posets.moebius_algebra.MoebiusAlgebra.I.product_on_basis"]], "product_on_basis() (sage.combinat.posets.moebius_algebra.moebiusalgebrabases.parentmethods method)": [[185, "sage.combinat.posets.moebius_algebra.MoebiusAlgebraBases.ParentMethods.product_on_basis"]], "product_on_basis() (sage.combinat.posets.moebius_algebra.quantummoebiusalgebra.e method)": [[185, "sage.combinat.posets.moebius_algebra.QuantumMoebiusAlgebra.E.product_on_basis"]], "sage.combinat.posets.moebius_algebra": [[185, "module-sage.combinat.posets.moebius_algebra"]], "super_categories() (sage.combinat.posets.moebius_algebra.moebiusalgebrabases method)": [[185, "sage.combinat.posets.moebius_algebra.MoebiusAlgebraBases.super_categories"]], "antichainposet() (sage.combinat.posets.poset_examples.posets static method)": [[186, "sage.combinat.posets.poset_examples.Posets.AntichainPoset"]], "booleanlattice() (sage.combinat.posets.poset_examples.posets static method)": [[186, "sage.combinat.posets.poset_examples.Posets.BooleanLattice"]], "chainposet() (sage.combinat.posets.poset_examples.posets static method)": [[186, "sage.combinat.posets.poset_examples.Posets.ChainPoset"]], "coxetergroupabsoluteorderposet() (sage.combinat.posets.poset_examples.posets static method)": [[186, "sage.combinat.posets.poset_examples.Posets.CoxeterGroupAbsoluteOrderPoset"]], "crown() (sage.combinat.posets.poset_examples.posets static method)": [[186, "sage.combinat.posets.poset_examples.Posets.Crown"]], "dextersemilattice() (sage.combinat.posets.poset_examples.posets static method)": [[186, "sage.combinat.posets.poset_examples.Posets.DexterSemilattice"]], "diamondposet() (sage.combinat.posets.poset_examples.posets static method)": [[186, "sage.combinat.posets.poset_examples.Posets.DiamondPoset"]], "divisorlattice() (sage.combinat.posets.poset_examples.posets static method)": [[186, "sage.combinat.posets.poset_examples.Posets.DivisorLattice"]], "doubletaileddiamond() (sage.combinat.posets.poset_examples.posets static method)": [[186, "sage.combinat.posets.poset_examples.Posets.DoubleTailedDiamond"]], "integercompositions() (sage.combinat.posets.poset_examples.posets static method)": [[186, "sage.combinat.posets.poset_examples.Posets.IntegerCompositions"]], "integerpartitions() (sage.combinat.posets.poset_examples.posets static method)": [[186, "sage.combinat.posets.poset_examples.Posets.IntegerPartitions"]], "integerpartitionsdominanceorder() (sage.combinat.posets.poset_examples.posets static method)": [[186, "sage.combinat.posets.poset_examples.Posets.IntegerPartitionsDominanceOrder"]], "mobileposet() (sage.combinat.posets.poset_examples.posets static method)": [[186, "sage.combinat.posets.poset_examples.Posets.MobilePoset"]], "noncrossingpartitions() (sage.combinat.posets.poset_examples.posets static method)": [[186, "sage.combinat.posets.poset_examples.Posets.NoncrossingPartitions"]], "pentagonposet() (sage.combinat.posets.poset_examples.posets static method)": [[186, "sage.combinat.posets.poset_examples.Posets.PentagonPoset"]], "permutationpattern() (sage.combinat.posets.poset_examples.posets static method)": [[186, "sage.combinat.posets.poset_examples.Posets.PermutationPattern"]], "permutationpatterninterval() (sage.combinat.posets.poset_examples.posets static method)": [[186, "sage.combinat.posets.poset_examples.Posets.PermutationPatternInterval"]], "permutationpatternoccurrenceinterval() (sage.combinat.posets.poset_examples.posets static method)": [[186, "sage.combinat.posets.poset_examples.Posets.PermutationPatternOccurrenceInterval"]], "posets (class in sage.combinat.posets.poset_examples)": [[186, "sage.combinat.posets.poset_examples.Posets"]], "powerposet() (sage.combinat.posets.poset_examples.posets static method)": [[186, "sage.combinat.posets.poset_examples.Posets.PowerPoset"]], "productofchains() (sage.combinat.posets.poset_examples.posets static method)": [[186, "sage.combinat.posets.poset_examples.Posets.ProductOfChains"]], "randomlattice() (sage.combinat.posets.poset_examples.posets static method)": [[186, "sage.combinat.posets.poset_examples.Posets.RandomLattice"]], "randomposet() (sage.combinat.posets.poset_examples.posets static method)": [[186, "sage.combinat.posets.poset_examples.Posets.RandomPoset"]], "restrictedintegerpartitions() (sage.combinat.posets.poset_examples.posets static method)": [[186, "sage.combinat.posets.poset_examples.Posets.RestrictedIntegerPartitions"]], "ribbonposet() (sage.combinat.posets.poset_examples.posets static method)": [[186, "sage.combinat.posets.poset_examples.Posets.RibbonPoset"]], "sstposet() (sage.combinat.posets.poset_examples.posets static method)": [[186, "sage.combinat.posets.poset_examples.Posets.SSTPoset"]], "setpartitions() (sage.combinat.posets.poset_examples.posets static method)": [[186, "sage.combinat.posets.poset_examples.Posets.SetPartitions"]], "shardposet() (sage.combinat.posets.poset_examples.posets static method)": [[186, "sage.combinat.posets.poset_examples.Posets.ShardPoset"]], "standardexample() (sage.combinat.posets.poset_examples.posets static method)": [[186, "sage.combinat.posets.poset_examples.Posets.StandardExample"]], "symmetricgroupabsoluteorderposet() (sage.combinat.posets.poset_examples.posets static method)": [[186, "sage.combinat.posets.poset_examples.Posets.SymmetricGroupAbsoluteOrderPoset"]], "symmetricgroupbruhatintervalposet() (sage.combinat.posets.poset_examples.posets static method)": [[186, "sage.combinat.posets.poset_examples.Posets.SymmetricGroupBruhatIntervalPoset"]], "symmetricgroupbruhatorderposet() (sage.combinat.posets.poset_examples.posets static method)": [[186, "sage.combinat.posets.poset_examples.Posets.SymmetricGroupBruhatOrderPoset"]], "symmetricgroupweakorderposet() (sage.combinat.posets.poset_examples.posets static method)": [[186, "sage.combinat.posets.poset_examples.Posets.SymmetricGroupWeakOrderPoset"]], "tamarilattice() (sage.combinat.posets.poset_examples.posets static method)": [[186, "sage.combinat.posets.poset_examples.Posets.TamariLattice"]], "tetrahedralposet() (sage.combinat.posets.poset_examples.posets static method)": [[186, "sage.combinat.posets.poset_examples.Posets.TetrahedralPoset"]], "updownposet() (sage.combinat.posets.poset_examples.posets static method)": [[186, "sage.combinat.posets.poset_examples.Posets.UpDownPoset"]], "youngdiagramposet() (sage.combinat.posets.poset_examples.posets static method)": [[186, "sage.combinat.posets.poset_examples.Posets.YoungDiagramPoset"]], "youngfibonacci() (sage.combinat.posets.poset_examples.posets static method)": [[186, "sage.combinat.posets.poset_examples.Posets.YoungFibonacci"]], "youngslattice() (sage.combinat.posets.poset_examples.posets static method)": [[186, "sage.combinat.posets.poset_examples.Posets.YoungsLattice"]], "youngslatticeprincipalorderideal() (sage.combinat.posets.poset_examples.posets static method)": [[186, "sage.combinat.posets.poset_examples.Posets.YoungsLatticePrincipalOrderIdeal"]], "check_int() (in module sage.combinat.posets.poset_examples)": [[186, "sage.combinat.posets.poset_examples.check_int"]], "posets (in module sage.combinat.posets.poset_examples)": [[186, "sage.combinat.posets.poset_examples.posets"]], "sage (sage.combinat.posets.poset_examples.posets attribute)": [[186, "sage.combinat.posets.poset_examples.Posets.sage"]], "sage.combinat.posets.poset_examples": [[186, "module-sage.combinat.posets.poset_examples"]], "element (sage.combinat.posets.posets.finiteposet attribute)": [[187, "sage.combinat.posets.posets.FinitePoset.Element"]], "finiteposet (class in sage.combinat.posets.posets)": [[187, "sage.combinat.posets.posets.FinitePoset"]], "finiteposets_n (class in sage.combinat.posets.posets)": [[187, "sage.combinat.posets.posets.FinitePosets_n"]], "m_triangle() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.M_triangle"]], "poset() (in module sage.combinat.posets.posets)": [[187, "sage.combinat.posets.posets.Poset"]], "antichains() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.antichains"]], "antichains_iterator() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.antichains_iterator"]], "atkinson() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.atkinson"]], "bottom() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.bottom"]], "canonical_label() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.canonical_label"]], "cardinality() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.cardinality"]], "cardinality() (sage.combinat.posets.posets.finiteposets_n method)": [[187, "sage.combinat.posets.posets.FinitePosets_n.cardinality"]], "chain_polynomial() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.chain_polynomial"]], "chain_polytope() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.chain_polytope"]], "chains() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.chains"]], "characteristic_polynomial() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.characteristic_polynomial"]], "closed_interval() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.closed_interval"]], "common_lower_covers() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.common_lower_covers"]], "common_upper_covers() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.common_upper_covers"]], "comparability_graph() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.comparability_graph"]], "compare_elements() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.compare_elements"]], "completion_by_cuts() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.completion_by_cuts"]], "connected_components() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.connected_components"]], "cover_relations() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.cover_relations"]], "cover_relations_graph() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.cover_relations_graph"]], "cover_relations_iterator() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.cover_relations_iterator"]], "covers() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.covers"]], "coxeter_polynomial() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.coxeter_polynomial"]], "coxeter_smith_form() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.coxeter_smith_form"]], "coxeter_transformation() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.coxeter_transformation"]], "cuts() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.cuts"]], "degree_polynomial() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.degree_polynomial"]], "diamonds() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.diamonds"]], "dilworth_decomposition() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.dilworth_decomposition"]], "dimension() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.dimension"]], "disjoint_union() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.disjoint_union"]], "dual() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.dual"]], "evacuation() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.evacuation"]], "f_polynomial() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.f_polynomial"]], "factor() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.factor"]], "flag_f_polynomial() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.flag_f_polynomial"]], "flag_h_polynomial() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.flag_h_polynomial"]], "frank_network() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.frank_network"]], "ge() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.ge"]], "graphviz_string() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.graphviz_string"]], "greene_shape() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.greene_shape"]], "gt() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.gt"]], "h_polynomial() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.h_polynomial"]], "has_bottom() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.has_bottom"]], "has_isomorphic_subposet() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.has_isomorphic_subposet"]], "has_top() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.has_top"]], "hasse_diagram() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.hasse_diagram"]], "height() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.height"]], "incidence_algebra() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.incidence_algebra"]], "incomparability_graph() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.incomparability_graph"]], "interval() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.interval"]], "intervals_number() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.intervals_number"]], "intervals_poset() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.intervals_poset"]], "is_el_labelling() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.is_EL_labelling"]], "is_antichain_of_poset() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.is_antichain_of_poset"]], "is_bounded() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.is_bounded"]], "is_chain() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.is_chain"]], "is_chain_of_poset() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.is_chain_of_poset"]], "is_connected() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.is_connected"]], "is_d_complete() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.is_d_complete"]], "is_eulerian() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.is_eulerian"]], "is_gequal() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.is_gequal"]], "is_graded() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.is_graded"]], "is_greater_than() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.is_greater_than"]], "is_greedy() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.is_greedy"]], "is_incomparable_chain_free() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.is_incomparable_chain_free"]], "is_induced_subposet() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.is_induced_subposet"]], "is_isomorphic() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.is_isomorphic"]], "is_join_semilattice() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.is_join_semilattice"]], "is_jump_critical() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.is_jump_critical"]], "is_lequal() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.is_lequal"]], "is_less_than() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.is_less_than"]], "is_linear_extension() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.is_linear_extension"]], "is_linear_interval() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.is_linear_interval"]], "is_meet_semilattice() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.is_meet_semilattice"]], "is_parent_of() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.is_parent_of"]], "is_poset() (in module sage.combinat.posets.posets)": [[187, "sage.combinat.posets.posets.is_poset"]], "is_rank_symmetric() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.is_rank_symmetric"]], "is_ranked() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.is_ranked"]], "is_series_parallel() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.is_series_parallel"]], "is_slender() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.is_slender"]], "is_sperner() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.is_sperner"]], "isomorphic_subposets() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.isomorphic_subposets"]], "isomorphic_subposets_iterator() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.isomorphic_subposets_iterator"]], "join() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.join"]], "jump_number() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.jump_number"]], "kazhdan_lusztig_polynomial() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.kazhdan_lusztig_polynomial"]], "le() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.le"]], "lequal_matrix() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.lequal_matrix"]], "level_sets() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.level_sets"]], "lexicographic_sum() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.lexicographic_sum"]], "linear_extension() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.linear_extension"]], "linear_extensions() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.linear_extensions"]], "linear_extensions_graph() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.linear_extensions_graph"]], "linear_intervals_count() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.linear_intervals_count"]], "list() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.list"]], "lower_covers() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.lower_covers"]], "lower_covers_iterator() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.lower_covers_iterator"]], "lt() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.lt"]], "magnitude() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.magnitude"]], "maximal_antichains() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.maximal_antichains"]], "maximal_chain_length() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.maximal_chain_length"]], "maximal_chains() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.maximal_chains"]], "maximal_chains_iterator() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.maximal_chains_iterator"]], "maximal_elements() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.maximal_elements"]], "meet() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.meet"]], "minimal_elements() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.minimal_elements"]], "moebius_function() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.moebius_function"]], "moebius_function_matrix() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.moebius_function_matrix"]], "open_interval() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.open_interval"]], "order_complex() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.order_complex"]], "order_filter() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.order_filter"]], "order_ideal() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.order_ideal"]], "order_ideal_cardinality() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.order_ideal_cardinality"]], "order_ideal_plot() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.order_ideal_plot"]], "order_polynomial() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.order_polynomial"]], "order_polytope() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.order_polytope"]], "ordinal_product() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.ordinal_product"]], "ordinal_sum() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.ordinal_sum"]], "ordinal_summands() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.ordinal_summands"]], "p_partition_enumerator() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.p_partition_enumerator"]], "plot() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.plot"]], "product() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.product"]], "promotion() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.promotion"]], "random_linear_extension() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.random_linear_extension"]], "random_maximal_antichain() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.random_maximal_antichain"]], "random_maximal_chain() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.random_maximal_chain"]], "random_order_ideal() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.random_order_ideal"]], "random_subposet() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.random_subposet"]], "rank() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.rank"]], "rank_function() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.rank_function"]], "rees_product() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.rees_product"]], "relabel() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.relabel"]], "relations() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.relations"]], "relations_iterator() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.relations_iterator"]], "relations_number() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.relations_number"]], "sage.combinat.posets.posets": [[187, "module-sage.combinat.posets.posets"]], "show() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.show"]], "slant_sum() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.slant_sum"]], "sorted() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.sorted"]], "spectrum() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.spectrum"]], "star_product() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.star_product"]], "subposet() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.subposet"]], "top() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.top"]], "unwrap() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.unwrap"]], "upper_covers() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.upper_covers"]], "upper_covers_iterator() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.upper_covers_iterator"]], "width() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.width"]], "with_bounds() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.with_bounds"]], "with_linear_extension() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.with_linear_extension"]], "without_bounds() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.without_bounds"]], "zeta_polynomial() (sage.combinat.posets.posets.finiteposet method)": [[187, "sage.combinat.posets.posets.FinitePoset.zeta_polynomial"]], "gaussian_binomial() (in module sage.combinat.q_analogues)": [[188, "sage.combinat.q_analogues.gaussian_binomial"]], "gaussian_multinomial() (in module sage.combinat.q_analogues)": [[188, "sage.combinat.q_analogues.gaussian_multinomial"]], "q_binomial() (in module sage.combinat.q_analogues)": [[188, "sage.combinat.q_analogues.q_binomial"]], "q_catalan_number() (in module sage.combinat.q_analogues)": [[188, "sage.combinat.q_analogues.q_catalan_number"]], "q_factorial() (in module sage.combinat.q_analogues)": [[188, "sage.combinat.q_analogues.q_factorial"]], "q_int() (in module sage.combinat.q_analogues)": [[188, "sage.combinat.q_analogues.q_int"]], "q_jordan() (in module sage.combinat.q_analogues)": [[188, "sage.combinat.q_analogues.q_jordan"]], "q_multinomial() (in module sage.combinat.q_analogues)": [[188, "sage.combinat.q_analogues.q_multinomial"]], "q_pochhammer() (in module sage.combinat.q_analogues)": [[188, "sage.combinat.q_analogues.q_pochhammer"]], "q_stirling_number1() (in module sage.combinat.q_analogues)": [[188, "sage.combinat.q_analogues.q_stirling_number1"]], "q_stirling_number2() (in module sage.combinat.q_analogues)": [[188, "sage.combinat.q_analogues.q_stirling_number2"]], "q_subgroups_of_abelian_group() (in module sage.combinat.q_analogues)": [[188, "sage.combinat.q_analogues.q_subgroups_of_abelian_group"]], "qt_catalan_number() (in module sage.combinat.q_analogues)": [[188, "sage.combinat.q_analogues.qt_catalan_number"]], "sage.combinat.q_analogues": [[188, "module-sage.combinat.q_analogues"]], "q_bernoulli() (in module sage.combinat.q_bernoulli)": [[189, "sage.combinat.q_bernoulli.q_bernoulli"]], "q_bernoulli_polynomial() (in module sage.combinat.q_bernoulli)": [[189, "sage.combinat.q_bernoulli.q_bernoulli_polynomial"]], "sage.combinat.q_bernoulli": [[189, "module-sage.combinat.q_bernoulli"]], "sage.combinat.quickref": [[190, "module-sage.combinat.quickref"]], "from_list() (in module sage.combinat.ranker)": [[191, "sage.combinat.ranker.from_list"]], "on_fly() (in module sage.combinat.ranker)": [[191, "sage.combinat.ranker.on_fly"]], "rank_from_list() (in module sage.combinat.ranker)": [[191, "sage.combinat.ranker.rank_from_list"]], "sage.combinat.ranker": [[191, "module-sage.combinat.ranker"]], "unrank() (in module sage.combinat.ranker)": [[191, "sage.combinat.ranker.unrank"]], "unrank_from_list() (in module sage.combinat.ranker)": [[191, "sage.combinat.ranker.unrank_from_list"]], "element (sage.combinat.recognizable_series.recognizableseriesspace attribute)": [[192, "sage.combinat.recognizable_series.RecognizableSeriesSpace.Element"]], "prefixclosedset (class in sage.combinat.recognizable_series)": [[192, "sage.combinat.recognizable_series.PrefixClosedSet"]], "recognizableseries (class in sage.combinat.recognizable_series)": [[192, "sage.combinat.recognizable_series.RecognizableSeries"]], "recognizableseriesspace (class in sage.combinat.recognizable_series)": [[192, "sage.combinat.recognizable_series.RecognizableSeriesSpace"]], "add() (sage.combinat.recognizable_series.prefixclosedset method)": [[192, "sage.combinat.recognizable_series.PrefixClosedSet.add"]], "alphabet() (sage.combinat.recognizable_series.recognizableseriesspace method)": [[192, "sage.combinat.recognizable_series.RecognizableSeriesSpace.alphabet"]], "coefficient_of_word() (sage.combinat.recognizable_series.recognizableseries method)": [[192, "sage.combinat.recognizable_series.RecognizableSeries.coefficient_of_word"]], "coefficient_ring() (sage.combinat.recognizable_series.recognizableseriesspace method)": [[192, "sage.combinat.recognizable_series.RecognizableSeriesSpace.coefficient_ring"]], "create_by_alphabet() (sage.combinat.recognizable_series.prefixclosedset class method)": [[192, "sage.combinat.recognizable_series.PrefixClosedSet.create_by_alphabet"]], "dimension() (sage.combinat.recognizable_series.recognizableseries method)": [[192, "sage.combinat.recognizable_series.RecognizableSeries.dimension"]], "hadamard_product() (sage.combinat.recognizable_series.recognizableseries method)": [[192, "sage.combinat.recognizable_series.RecognizableSeries.hadamard_product"]], "indices() (sage.combinat.recognizable_series.recognizableseriesspace method)": [[192, "sage.combinat.recognizable_series.RecognizableSeriesSpace.indices"]], "is_trivial_zero() (sage.combinat.recognizable_series.recognizableseries method)": [[192, "sage.combinat.recognizable_series.RecognizableSeries.is_trivial_zero"]], "iterate_possible_additions() (sage.combinat.recognizable_series.prefixclosedset method)": [[192, "sage.combinat.recognizable_series.PrefixClosedSet.iterate_possible_additions"]], "left (sage.combinat.recognizable_series.recognizableseries property)": [[192, "sage.combinat.recognizable_series.RecognizableSeries.left"]], "linear_representation() (sage.combinat.recognizable_series.recognizableseries method)": [[192, "sage.combinat.recognizable_series.RecognizableSeries.linear_representation"]], "minimize_result() (in module sage.combinat.recognizable_series)": [[192, "sage.combinat.recognizable_series.minimize_result"]], "minimize_results (sage.combinat.recognizable_series.recognizableseriesspace property)": [[192, "sage.combinat.recognizable_series.RecognizableSeriesSpace.minimize_results"]], "minimized() (sage.combinat.recognizable_series.recognizableseries method)": [[192, "sage.combinat.recognizable_series.RecognizableSeries.minimized"]], "mu (sage.combinat.recognizable_series.recognizableseries property)": [[192, "sage.combinat.recognizable_series.RecognizableSeries.mu"]], "one() (sage.combinat.recognizable_series.recognizableseriesspace method)": [[192, "sage.combinat.recognizable_series.RecognizableSeriesSpace.one"]], "one_hadamard() (sage.combinat.recognizable_series.recognizableseriesspace method)": [[192, "sage.combinat.recognizable_series.RecognizableSeriesSpace.one_hadamard"]], "prefix_set() (sage.combinat.recognizable_series.prefixclosedset method)": [[192, "sage.combinat.recognizable_series.PrefixClosedSet.prefix_set"]], "right (sage.combinat.recognizable_series.recognizableseries property)": [[192, "sage.combinat.recognizable_series.RecognizableSeries.right"]], "sage.combinat.recognizable_series": [[192, "module-sage.combinat.recognizable_series"]], "some_elements() (sage.combinat.recognizable_series.recognizableseriesspace method)": [[192, "sage.combinat.recognizable_series.RecognizableSeriesSpace.some_elements"]], "transposed() (sage.combinat.recognizable_series.recognizableseries method)": [[192, "sage.combinat.recognizable_series.RecognizableSeries.transposed"]], "degeneratedsequenceerror": [[193, "sage.combinat.regular_sequence.DegeneratedSequenceError"]], "element (sage.combinat.regular_sequence.regularsequencering attribute)": [[193, "sage.combinat.regular_sequence.RegularSequenceRing.Element"]], "recurrenceparser (class in sage.combinat.regular_sequence)": [[193, "sage.combinat.regular_sequence.RecurrenceParser"]], "regularsequence (class in sage.combinat.regular_sequence)": [[193, "sage.combinat.regular_sequence.RegularSequence"]], "regularsequencering (class in sage.combinat.regular_sequence)": [[193, "sage.combinat.regular_sequence.RegularSequenceRing"]], "backward_differences() (sage.combinat.regular_sequence.regularsequence method)": [[193, "sage.combinat.regular_sequence.RegularSequence.backward_differences"]], "coefficient_of_n() (sage.combinat.regular_sequence.regularsequence method)": [[193, "sage.combinat.regular_sequence.RegularSequence.coefficient_of_n"]], "convolution() (sage.combinat.regular_sequence.regularsequence method)": [[193, "sage.combinat.regular_sequence.RegularSequence.convolution"]], "forward_differences() (sage.combinat.regular_sequence.regularsequence method)": [[193, "sage.combinat.regular_sequence.RegularSequence.forward_differences"]], "from_recurrence() (sage.combinat.regular_sequence.regularsequencering method)": [[193, "sage.combinat.regular_sequence.RegularSequenceRing.from_recurrence"]], "guess() (sage.combinat.regular_sequence.regularsequencering method)": [[193, "sage.combinat.regular_sequence.RegularSequenceRing.guess"]], "ind() (sage.combinat.regular_sequence.recurrenceparser method)": [[193, "sage.combinat.regular_sequence.RecurrenceParser.ind"]], "is_degenerated() (sage.combinat.regular_sequence.regularsequence method)": [[193, "sage.combinat.regular_sequence.RegularSequence.is_degenerated"]], "left() (sage.combinat.regular_sequence.recurrenceparser method)": [[193, "sage.combinat.regular_sequence.RecurrenceParser.left"]], "matrix() (sage.combinat.regular_sequence.recurrenceparser method)": [[193, "sage.combinat.regular_sequence.RecurrenceParser.matrix"]], "one() (sage.combinat.regular_sequence.regularsequencering method)": [[193, "sage.combinat.regular_sequence.RegularSequenceRing.one"]], "pad_right() (in module sage.combinat.regular_sequence)": [[193, "sage.combinat.regular_sequence.pad_right"]], "parameters() (sage.combinat.regular_sequence.recurrenceparser method)": [[193, "sage.combinat.regular_sequence.RecurrenceParser.parameters"]], "parse_direct_arguments() (sage.combinat.regular_sequence.recurrenceparser method)": [[193, "sage.combinat.regular_sequence.RecurrenceParser.parse_direct_arguments"]], "parse_recurrence() (sage.combinat.regular_sequence.recurrenceparser method)": [[193, "sage.combinat.regular_sequence.RecurrenceParser.parse_recurrence"]], "partial_sums() (sage.combinat.regular_sequence.regularsequence method)": [[193, "sage.combinat.regular_sequence.RegularSequence.partial_sums"]], "regenerated() (sage.combinat.regular_sequence.regularsequence method)": [[193, "sage.combinat.regular_sequence.RegularSequence.regenerated"]], "right() (sage.combinat.regular_sequence.recurrenceparser method)": [[193, "sage.combinat.regular_sequence.RecurrenceParser.right"]], "sage.combinat.regular_sequence": [[193, "module-sage.combinat.regular_sequence"]], "shift_left() (sage.combinat.regular_sequence.regularsequence method)": [[193, "sage.combinat.regular_sequence.RegularSequence.shift_left"]], "shift_right() (sage.combinat.regular_sequence.regularsequence method)": [[193, "sage.combinat.regular_sequence.RegularSequence.shift_right"]], "shifted_inhomogeneities() (sage.combinat.regular_sequence.recurrenceparser method)": [[193, "sage.combinat.regular_sequence.RecurrenceParser.shifted_inhomogeneities"]], "some_elements() (sage.combinat.regular_sequence.regularsequencering method)": [[193, "sage.combinat.regular_sequence.RegularSequenceRing.some_elements"]], "subsequence() (sage.combinat.regular_sequence.regularsequence method)": [[193, "sage.combinat.regular_sequence.RegularSequence.subsequence"]], "transposed() (sage.combinat.regular_sequence.regularsequence method)": [[193, "sage.combinat.regular_sequence.RegularSequence.transposed"]], "v_eval_n() (sage.combinat.regular_sequence.recurrenceparser method)": [[193, "sage.combinat.regular_sequence.RecurrenceParser.v_eval_n"]], "value() (in module sage.combinat.regular_sequence)": [[193, "sage.combinat.regular_sequence.value"]], "values() (sage.combinat.regular_sequence.recurrenceparser method)": [[193, "sage.combinat.regular_sequence.RecurrenceParser.values"]], "restrictedgrowtharrays (class in sage.combinat.restricted_growth)": [[194, "sage.combinat.restricted_growth.RestrictedGrowthArrays"]], "cardinality() (sage.combinat.restricted_growth.restrictedgrowtharrays method)": [[194, "sage.combinat.restricted_growth.RestrictedGrowthArrays.cardinality"]], "sage.combinat.restricted_growth": [[194, "module-sage.combinat.restricted_growth"]], "sage.combinat.ribbon": [[195, "module-sage.combinat.ribbon"]], "element (sage.combinat.ribbon_shaped_tableau.ribbonshapedtableaux attribute)": [[196, "sage.combinat.ribbon_shaped_tableau.RibbonShapedTableaux.Element"]], "element (sage.combinat.ribbon_shaped_tableau.standardribbonshapedtableaux attribute)": [[196, "sage.combinat.ribbon_shaped_tableau.StandardRibbonShapedTableaux.Element"]], "ribbonshapedtableau (class in sage.combinat.ribbon_shaped_tableau)": [[196, "sage.combinat.ribbon_shaped_tableau.RibbonShapedTableau"]], "ribbonshapedtableaux (class in sage.combinat.ribbon_shaped_tableau)": [[196, "sage.combinat.ribbon_shaped_tableau.RibbonShapedTableaux"]], "ribbon_class (class in sage.combinat.ribbon_shaped_tableau)": [[196, "sage.combinat.ribbon_shaped_tableau.Ribbon_class"]], "standardribbonshapedtableaux (class in sage.combinat.ribbon_shaped_tableau)": [[196, "sage.combinat.ribbon_shaped_tableau.StandardRibbonShapedTableaux"]], "standardribbonshapedtableaux_shape (class in sage.combinat.ribbon_shaped_tableau)": [[196, "sage.combinat.ribbon_shaped_tableau.StandardRibbonShapedTableaux_shape"]], "first() (sage.combinat.ribbon_shaped_tableau.standardribbonshapedtableaux_shape method)": [[196, "sage.combinat.ribbon_shaped_tableau.StandardRibbonShapedTableaux_shape.first"]], "from_permutation() (sage.combinat.ribbon_shaped_tableau.standardribbonshapedtableaux method)": [[196, "sage.combinat.ribbon_shaped_tableau.StandardRibbonShapedTableaux.from_permutation"]], "from_shape_and_word() (sage.combinat.ribbon_shaped_tableau.ribbonshapedtableaux method)": [[196, "sage.combinat.ribbon_shaped_tableau.RibbonShapedTableaux.from_shape_and_word"]], "from_shape_and_word() (sage.combinat.ribbon_shaped_tableau.standardribbonshapedtableaux method)": [[196, "sage.combinat.ribbon_shaped_tableau.StandardRibbonShapedTableaux.from_shape_and_word"]], "height() (sage.combinat.ribbon_shaped_tableau.ribbonshapedtableau method)": [[196, "sage.combinat.ribbon_shaped_tableau.RibbonShapedTableau.height"]], "last() (sage.combinat.ribbon_shaped_tableau.standardribbonshapedtableaux_shape method)": [[196, "sage.combinat.ribbon_shaped_tableau.StandardRibbonShapedTableaux_shape.last"]], "options (sage.combinat.ribbon_shaped_tableau.ribbonshapedtableaux attribute)": [[196, "sage.combinat.ribbon_shaped_tableau.RibbonShapedTableaux.options"]], "options (sage.combinat.ribbon_shaped_tableau.standardribbonshapedtableaux attribute)": [[196, "sage.combinat.ribbon_shaped_tableau.StandardRibbonShapedTableaux.options"]], "sage.combinat.ribbon_shaped_tableau": [[196, "module-sage.combinat.ribbon_shaped_tableau"]], "spin() (sage.combinat.ribbon_shaped_tableau.ribbonshapedtableau method)": [[196, "sage.combinat.ribbon_shaped_tableau.RibbonShapedTableau.spin"]], "width() (sage.combinat.ribbon_shaped_tableau.ribbonshapedtableau method)": [[196, "sage.combinat.ribbon_shaped_tableau.RibbonShapedTableau.width"]], "element (sage.combinat.ribbon_tableau.multiskewtableaux attribute)": [[197, "sage.combinat.ribbon_tableau.MultiSkewTableaux.Element"]], "element (sage.combinat.ribbon_tableau.ribbontableaux attribute)": [[197, "sage.combinat.ribbon_tableau.RibbonTableaux.Element"]], "multiskewtableau (class in sage.combinat.ribbon_tableau)": [[197, "sage.combinat.ribbon_tableau.MultiSkewTableau"]], "multiskewtableaux (class in sage.combinat.ribbon_tableau)": [[197, "sage.combinat.ribbon_tableau.MultiSkewTableaux"]], "ribbontableau (class in sage.combinat.ribbon_tableau)": [[197, "sage.combinat.ribbon_tableau.RibbonTableau"]], "ribbontableau_class (class in sage.combinat.ribbon_tableau)": [[197, "sage.combinat.ribbon_tableau.RibbonTableau_class"]], "ribbontableaux (class in sage.combinat.ribbon_tableau)": [[197, "sage.combinat.ribbon_tableau.RibbonTableaux"]], "ribbontableaux_shape_weight_length (class in sage.combinat.ribbon_tableau)": [[197, "sage.combinat.ribbon_tableau.RibbonTableaux_shape_weight_length"]], "semistandardmultiskewtableaux (class in sage.combinat.ribbon_tableau)": [[197, "sage.combinat.ribbon_tableau.SemistandardMultiSkewTableaux"]], "cardinality() (sage.combinat.ribbon_tableau.ribbontableaux_shape_weight_length method)": [[197, "sage.combinat.ribbon_tableau.RibbonTableaux_shape_weight_length.cardinality"]], "cospin_polynomial() (in module sage.combinat.ribbon_tableau)": [[197, "sage.combinat.ribbon_tableau.cospin_polynomial"]], "count_rec() (in module sage.combinat.ribbon_tableau)": [[197, "sage.combinat.ribbon_tableau.count_rec"]], "from_expr() (sage.combinat.ribbon_tableau.ribbontableaux method)": [[197, "sage.combinat.ribbon_tableau.RibbonTableaux.from_expr"]], "graph_implementation_rec() (in module sage.combinat.ribbon_tableau)": [[197, "sage.combinat.ribbon_tableau.graph_implementation_rec"]], "insertion_tableau() (in module sage.combinat.ribbon_tableau)": [[197, "sage.combinat.ribbon_tableau.insertion_tableau"]], "inversion_pairs() (sage.combinat.ribbon_tableau.multiskewtableau method)": [[197, "sage.combinat.ribbon_tableau.MultiSkewTableau.inversion_pairs"]], "inversions() (sage.combinat.ribbon_tableau.multiskewtableau method)": [[197, "sage.combinat.ribbon_tableau.MultiSkewTableau.inversions"]], "length() (sage.combinat.ribbon_tableau.ribbontableau method)": [[197, "sage.combinat.ribbon_tableau.RibbonTableau.length"]], "list_rec() (in module sage.combinat.ribbon_tableau)": [[197, "sage.combinat.ribbon_tableau.list_rec"]], "options (sage.combinat.ribbon_tableau.ribbontableaux attribute)": [[197, "sage.combinat.ribbon_tableau.RibbonTableaux.options"]], "sage.combinat.ribbon_tableau": [[197, "module-sage.combinat.ribbon_tableau"]], "shape() (sage.combinat.ribbon_tableau.multiskewtableau method)": [[197, "sage.combinat.ribbon_tableau.MultiSkewTableau.shape"]], "size() (sage.combinat.ribbon_tableau.multiskewtableau method)": [[197, "sage.combinat.ribbon_tableau.MultiSkewTableau.size"]], "spin_polynomial() (in module sage.combinat.ribbon_tableau)": [[197, "sage.combinat.ribbon_tableau.spin_polynomial"]], "spin_polynomial_square() (in module sage.combinat.ribbon_tableau)": [[197, "sage.combinat.ribbon_tableau.spin_polynomial_square"]], "spin_rec() (in module sage.combinat.ribbon_tableau)": [[197, "sage.combinat.ribbon_tableau.spin_rec"]], "to_word() (sage.combinat.ribbon_tableau.ribbontableau method)": [[197, "sage.combinat.ribbon_tableau.RibbonTableau.to_word"]], "weight() (sage.combinat.ribbon_tableau.multiskewtableau method)": [[197, "sage.combinat.ribbon_tableau.MultiSkewTableau.weight"]], "sage.combinat.rigged_configurations.all": [[198, "module-sage.combinat.rigged_configurations.all"]], "krttorcbijectionabstract (class in sage.combinat.rigged_configurations.bij_abstract_class)": [[199, "sage.combinat.rigged_configurations.bij_abstract_class.KRTToRCBijectionAbstract"]], "rctokrtbijectionabstract (class in sage.combinat.rigged_configurations.bij_abstract_class)": [[199, "sage.combinat.rigged_configurations.bij_abstract_class.RCToKRTBijectionAbstract"]], "next_state() (sage.combinat.rigged_configurations.bij_abstract_class.krttorcbijectionabstract method)": [[199, "sage.combinat.rigged_configurations.bij_abstract_class.KRTToRCBijectionAbstract.next_state"]], "next_state() (sage.combinat.rigged_configurations.bij_abstract_class.rctokrtbijectionabstract method)": [[199, "sage.combinat.rigged_configurations.bij_abstract_class.RCToKRTBijectionAbstract.next_state"]], "run() (sage.combinat.rigged_configurations.bij_abstract_class.krttorcbijectionabstract method)": [[199, "sage.combinat.rigged_configurations.bij_abstract_class.KRTToRCBijectionAbstract.run"]], "run() (sage.combinat.rigged_configurations.bij_abstract_class.rctokrtbijectionabstract method)": [[199, "sage.combinat.rigged_configurations.bij_abstract_class.RCToKRTBijectionAbstract.run"]], "sage.combinat.rigged_configurations.bij_abstract_class": [[199, "module-sage.combinat.rigged_configurations.bij_abstract_class"]], "fromrcisomorphism (class in sage.combinat.rigged_configurations.bij_infinity)": [[200, "sage.combinat.rigged_configurations.bij_infinity.FromRCIsomorphism"]], "fromtableauisomorphism (class in sage.combinat.rigged_configurations.bij_infinity)": [[200, "sage.combinat.rigged_configurations.bij_infinity.FromTableauIsomorphism"]], "mlttorcbijectiontypeb (class in sage.combinat.rigged_configurations.bij_infinity)": [[200, "sage.combinat.rigged_configurations.bij_infinity.MLTToRCBijectionTypeB"]], "mlttorcbijectiontyped (class in sage.combinat.rigged_configurations.bij_infinity)": [[200, "sage.combinat.rigged_configurations.bij_infinity.MLTToRCBijectionTypeD"]], "rctomltbijectiontypeb (class in sage.combinat.rigged_configurations.bij_infinity)": [[200, "sage.combinat.rigged_configurations.bij_infinity.RCToMLTBijectionTypeB"]], "rctomltbijectiontyped (class in sage.combinat.rigged_configurations.bij_infinity)": [[200, "sage.combinat.rigged_configurations.bij_infinity.RCToMLTBijectionTypeD"]], "run() (sage.combinat.rigged_configurations.bij_infinity.mlttorcbijectiontypeb method)": [[200, "sage.combinat.rigged_configurations.bij_infinity.MLTToRCBijectionTypeB.run"]], "run() (sage.combinat.rigged_configurations.bij_infinity.mlttorcbijectiontyped method)": [[200, "sage.combinat.rigged_configurations.bij_infinity.MLTToRCBijectionTypeD.run"]], "run() (sage.combinat.rigged_configurations.bij_infinity.rctomltbijectiontypeb method)": [[200, "sage.combinat.rigged_configurations.bij_infinity.RCToMLTBijectionTypeB.run"]], "run() (sage.combinat.rigged_configurations.bij_infinity.rctomltbijectiontyped method)": [[200, "sage.combinat.rigged_configurations.bij_infinity.RCToMLTBijectionTypeD.run"]], "sage.combinat.rigged_configurations.bij_infinity": [[200, "module-sage.combinat.rigged_configurations.bij_infinity"]], "krttorcbijectiontypea (class in sage.combinat.rigged_configurations.bij_type_a)": [[201, "sage.combinat.rigged_configurations.bij_type_A.KRTToRCBijectionTypeA"]], "rctokrtbijectiontypea (class in sage.combinat.rigged_configurations.bij_type_a)": [[201, "sage.combinat.rigged_configurations.bij_type_A.RCToKRTBijectionTypeA"]], "next_state() (sage.combinat.rigged_configurations.bij_type_a.krttorcbijectiontypea method)": [[201, "sage.combinat.rigged_configurations.bij_type_A.KRTToRCBijectionTypeA.next_state"]], "next_state() (sage.combinat.rigged_configurations.bij_type_a.rctokrtbijectiontypea method)": [[201, "sage.combinat.rigged_configurations.bij_type_A.RCToKRTBijectionTypeA.next_state"]], "sage.combinat.rigged_configurations.bij_type_a": [[201, "module-sage.combinat.rigged_configurations.bij_type_A"]], "krttorcbijectiontypea2dual (class in sage.combinat.rigged_configurations.bij_type_a2_dual)": [[202, "sage.combinat.rigged_configurations.bij_type_A2_dual.KRTToRCBijectionTypeA2Dual"]], "rctokrtbijectiontypea2dual (class in sage.combinat.rigged_configurations.bij_type_a2_dual)": [[202, "sage.combinat.rigged_configurations.bij_type_A2_dual.RCToKRTBijectionTypeA2Dual"]], "next_state() (sage.combinat.rigged_configurations.bij_type_a2_dual.krttorcbijectiontypea2dual method)": [[202, "sage.combinat.rigged_configurations.bij_type_A2_dual.KRTToRCBijectionTypeA2Dual.next_state"]], "next_state() (sage.combinat.rigged_configurations.bij_type_a2_dual.rctokrtbijectiontypea2dual method)": [[202, "sage.combinat.rigged_configurations.bij_type_A2_dual.RCToKRTBijectionTypeA2Dual.next_state"]], "sage.combinat.rigged_configurations.bij_type_a2_dual": [[202, "module-sage.combinat.rigged_configurations.bij_type_A2_dual"]], "krttorcbijectiontypea2even (class in sage.combinat.rigged_configurations.bij_type_a2_even)": [[203, "sage.combinat.rigged_configurations.bij_type_A2_even.KRTToRCBijectionTypeA2Even"]], "rctokrtbijectiontypea2even (class in sage.combinat.rigged_configurations.bij_type_a2_even)": [[203, "sage.combinat.rigged_configurations.bij_type_A2_even.RCToKRTBijectionTypeA2Even"]], "next_state() (sage.combinat.rigged_configurations.bij_type_a2_even.krttorcbijectiontypea2even method)": [[203, "sage.combinat.rigged_configurations.bij_type_A2_even.KRTToRCBijectionTypeA2Even.next_state"]], "next_state() (sage.combinat.rigged_configurations.bij_type_a2_even.rctokrtbijectiontypea2even method)": [[203, "sage.combinat.rigged_configurations.bij_type_A2_even.RCToKRTBijectionTypeA2Even.next_state"]], "sage.combinat.rigged_configurations.bij_type_a2_even": [[203, "module-sage.combinat.rigged_configurations.bij_type_A2_even"]], "krttorcbijectiontypea2odd (class in sage.combinat.rigged_configurations.bij_type_a2_odd)": [[204, "sage.combinat.rigged_configurations.bij_type_A2_odd.KRTToRCBijectionTypeA2Odd"]], "rctokrtbijectiontypea2odd (class in sage.combinat.rigged_configurations.bij_type_a2_odd)": [[204, "sage.combinat.rigged_configurations.bij_type_A2_odd.RCToKRTBijectionTypeA2Odd"]], "next_state() (sage.combinat.rigged_configurations.bij_type_a2_odd.krttorcbijectiontypea2odd method)": [[204, "sage.combinat.rigged_configurations.bij_type_A2_odd.KRTToRCBijectionTypeA2Odd.next_state"]], "next_state() (sage.combinat.rigged_configurations.bij_type_a2_odd.rctokrtbijectiontypea2odd method)": [[204, "sage.combinat.rigged_configurations.bij_type_A2_odd.RCToKRTBijectionTypeA2Odd.next_state"]], "sage.combinat.rigged_configurations.bij_type_a2_odd": [[204, "module-sage.combinat.rigged_configurations.bij_type_A2_odd"]], "krttorcbijectiontypeb (class in sage.combinat.rigged_configurations.bij_type_b)": [[205, "sage.combinat.rigged_configurations.bij_type_B.KRTToRCBijectionTypeB"]], "rctokrtbijectiontypeb (class in sage.combinat.rigged_configurations.bij_type_b)": [[205, "sage.combinat.rigged_configurations.bij_type_B.RCToKRTBijectionTypeB"]], "next_state() (sage.combinat.rigged_configurations.bij_type_b.krttorcbijectiontypeb method)": [[205, "sage.combinat.rigged_configurations.bij_type_B.KRTToRCBijectionTypeB.next_state"]], "next_state() (sage.combinat.rigged_configurations.bij_type_b.rctokrtbijectiontypeb method)": [[205, "sage.combinat.rigged_configurations.bij_type_B.RCToKRTBijectionTypeB.next_state"]], "other_outcome() (sage.combinat.rigged_configurations.bij_type_b.krttorcbijectiontypeb method)": [[205, "sage.combinat.rigged_configurations.bij_type_B.KRTToRCBijectionTypeB.other_outcome"]], "run() (sage.combinat.rigged_configurations.bij_type_b.krttorcbijectiontypeb method)": [[205, "sage.combinat.rigged_configurations.bij_type_B.KRTToRCBijectionTypeB.run"]], "run() (sage.combinat.rigged_configurations.bij_type_b.rctokrtbijectiontypeb method)": [[205, "sage.combinat.rigged_configurations.bij_type_B.RCToKRTBijectionTypeB.run"]], "sage.combinat.rigged_configurations.bij_type_b": [[205, "module-sage.combinat.rigged_configurations.bij_type_B"]], "krttorcbijectiontypec (class in sage.combinat.rigged_configurations.bij_type_c)": [[206, "sage.combinat.rigged_configurations.bij_type_C.KRTToRCBijectionTypeC"]], "rctokrtbijectiontypec (class in sage.combinat.rigged_configurations.bij_type_c)": [[206, "sage.combinat.rigged_configurations.bij_type_C.RCToKRTBijectionTypeC"]], "next_state() (sage.combinat.rigged_configurations.bij_type_c.krttorcbijectiontypec method)": [[206, "sage.combinat.rigged_configurations.bij_type_C.KRTToRCBijectionTypeC.next_state"]], "next_state() (sage.combinat.rigged_configurations.bij_type_c.rctokrtbijectiontypec method)": [[206, "sage.combinat.rigged_configurations.bij_type_C.RCToKRTBijectionTypeC.next_state"]], "sage.combinat.rigged_configurations.bij_type_c": [[206, "module-sage.combinat.rigged_configurations.bij_type_C"]], "krttorcbijectiontyped (class in sage.combinat.rigged_configurations.bij_type_d)": [[207, "sage.combinat.rigged_configurations.bij_type_D.KRTToRCBijectionTypeD"]], "rctokrtbijectiontyped (class in sage.combinat.rigged_configurations.bij_type_d)": [[207, "sage.combinat.rigged_configurations.bij_type_D.RCToKRTBijectionTypeD"]], "doubling_map() (sage.combinat.rigged_configurations.bij_type_d.krttorcbijectiontyped method)": [[207, "sage.combinat.rigged_configurations.bij_type_D.KRTToRCBijectionTypeD.doubling_map"]], "doubling_map() (sage.combinat.rigged_configurations.bij_type_d.rctokrtbijectiontyped method)": [[207, "sage.combinat.rigged_configurations.bij_type_D.RCToKRTBijectionTypeD.doubling_map"]], "halving_map() (sage.combinat.rigged_configurations.bij_type_d.krttorcbijectiontyped method)": [[207, "sage.combinat.rigged_configurations.bij_type_D.KRTToRCBijectionTypeD.halving_map"]], "halving_map() (sage.combinat.rigged_configurations.bij_type_d.rctokrtbijectiontyped method)": [[207, "sage.combinat.rigged_configurations.bij_type_D.RCToKRTBijectionTypeD.halving_map"]], "next_state() (sage.combinat.rigged_configurations.bij_type_d.krttorcbijectiontyped method)": [[207, "sage.combinat.rigged_configurations.bij_type_D.KRTToRCBijectionTypeD.next_state"]], "next_state() (sage.combinat.rigged_configurations.bij_type_d.rctokrtbijectiontyped method)": [[207, "sage.combinat.rigged_configurations.bij_type_D.RCToKRTBijectionTypeD.next_state"]], "run() (sage.combinat.rigged_configurations.bij_type_d.krttorcbijectiontyped method)": [[207, "sage.combinat.rigged_configurations.bij_type_D.KRTToRCBijectionTypeD.run"]], "run() (sage.combinat.rigged_configurations.bij_type_d.rctokrtbijectiontyped method)": [[207, "sage.combinat.rigged_configurations.bij_type_D.RCToKRTBijectionTypeD.run"]], "sage.combinat.rigged_configurations.bij_type_d": [[207, "module-sage.combinat.rigged_configurations.bij_type_D"]], "krttorcbijectiontypedtri (class in sage.combinat.rigged_configurations.bij_type_d_tri)": [[208, "sage.combinat.rigged_configurations.bij_type_D_tri.KRTToRCBijectionTypeDTri"]], "rctokrtbijectiontypedtri (class in sage.combinat.rigged_configurations.bij_type_d_tri)": [[208, "sage.combinat.rigged_configurations.bij_type_D_tri.RCToKRTBijectionTypeDTri"]], "next_state() (sage.combinat.rigged_configurations.bij_type_d_tri.krttorcbijectiontypedtri method)": [[208, "sage.combinat.rigged_configurations.bij_type_D_tri.KRTToRCBijectionTypeDTri.next_state"]], "next_state() (sage.combinat.rigged_configurations.bij_type_d_tri.rctokrtbijectiontypedtri method)": [[208, "sage.combinat.rigged_configurations.bij_type_D_tri.RCToKRTBijectionTypeDTri.next_state"]], "sage.combinat.rigged_configurations.bij_type_d_tri": [[208, "module-sage.combinat.rigged_configurations.bij_type_D_tri"]], "krttorcbijectiontypedtwisted (class in sage.combinat.rigged_configurations.bij_type_d_twisted)": [[209, "sage.combinat.rigged_configurations.bij_type_D_twisted.KRTToRCBijectionTypeDTwisted"]], "rctokrtbijectiontypedtwisted (class in sage.combinat.rigged_configurations.bij_type_d_twisted)": [[209, "sage.combinat.rigged_configurations.bij_type_D_twisted.RCToKRTBijectionTypeDTwisted"]], "next_state() (sage.combinat.rigged_configurations.bij_type_d_twisted.krttorcbijectiontypedtwisted method)": [[209, "sage.combinat.rigged_configurations.bij_type_D_twisted.KRTToRCBijectionTypeDTwisted.next_state"]], "next_state() (sage.combinat.rigged_configurations.bij_type_d_twisted.rctokrtbijectiontypedtwisted method)": [[209, "sage.combinat.rigged_configurations.bij_type_D_twisted.RCToKRTBijectionTypeDTwisted.next_state"]], "run() (sage.combinat.rigged_configurations.bij_type_d_twisted.krttorcbijectiontypedtwisted method)": [[209, "sage.combinat.rigged_configurations.bij_type_D_twisted.KRTToRCBijectionTypeDTwisted.run"]], "run() (sage.combinat.rigged_configurations.bij_type_d_twisted.rctokrtbijectiontypedtwisted method)": [[209, "sage.combinat.rigged_configurations.bij_type_D_twisted.RCToKRTBijectionTypeDTwisted.run"]], "sage.combinat.rigged_configurations.bij_type_d_twisted": [[209, "module-sage.combinat.rigged_configurations.bij_type_D_twisted"]], "krttorcbijection() (in module sage.combinat.rigged_configurations.bijection)": [[210, "sage.combinat.rigged_configurations.bijection.KRTToRCBijection"]], "rctokrtbijection() (in module sage.combinat.rigged_configurations.bijection)": [[210, "sage.combinat.rigged_configurations.bijection.RCToKRTBijection"]], "sage.combinat.rigged_configurations.bijection": [[210, "module-sage.combinat.rigged_configurations.bijection"]], "element (sage.combinat.rigged_configurations.kleber_tree.klebertree attribute)": [[211, "sage.combinat.rigged_configurations.kleber_tree.KleberTree.Element"]], "klebertree (class in sage.combinat.rigged_configurations.kleber_tree)": [[211, "sage.combinat.rigged_configurations.kleber_tree.KleberTree"]], "klebertreenode (class in sage.combinat.rigged_configurations.kleber_tree)": [[211, "sage.combinat.rigged_configurations.kleber_tree.KleberTreeNode"]], "klebertreetypea2even (class in sage.combinat.rigged_configurations.kleber_tree)": [[211, "sage.combinat.rigged_configurations.kleber_tree.KleberTreeTypeA2Even"]], "virtualklebertree (class in sage.combinat.rigged_configurations.kleber_tree)": [[211, "sage.combinat.rigged_configurations.kleber_tree.VirtualKleberTree"]], "base_tree() (sage.combinat.rigged_configurations.kleber_tree.virtualklebertree method)": [[211, "sage.combinat.rigged_configurations.kleber_tree.VirtualKleberTree.base_tree"]], "breadth_first_iter() (sage.combinat.rigged_configurations.kleber_tree.klebertree method)": [[211, "sage.combinat.rigged_configurations.kleber_tree.KleberTree.breadth_first_iter"]], "breadth_first_iter() (sage.combinat.rigged_configurations.kleber_tree.klebertreetypea2even method)": [[211, "sage.combinat.rigged_configurations.kleber_tree.KleberTreeTypeA2Even.breadth_first_iter"]], "breadth_first_iter() (sage.combinat.rigged_configurations.kleber_tree.virtualklebertree method)": [[211, "sage.combinat.rigged_configurations.kleber_tree.VirtualKleberTree.breadth_first_iter"]], "cartan_type() (sage.combinat.rigged_configurations.kleber_tree.klebertree method)": [[211, "sage.combinat.rigged_configurations.kleber_tree.KleberTree.cartan_type"]], "depth() (sage.combinat.rigged_configurations.kleber_tree.klebertreenode method)": [[211, "sage.combinat.rigged_configurations.kleber_tree.KleberTreeNode.depth"]], "depth_first_iter() (sage.combinat.rigged_configurations.kleber_tree.klebertree method)": [[211, "sage.combinat.rigged_configurations.kleber_tree.KleberTree.depth_first_iter"]], "depth_first_iter() (sage.combinat.rigged_configurations.kleber_tree.klebertreetypea2even method)": [[211, "sage.combinat.rigged_configurations.kleber_tree.KleberTreeTypeA2Even.depth_first_iter"]], "depth_first_iter() (sage.combinat.rigged_configurations.kleber_tree.virtualklebertree method)": [[211, "sage.combinat.rigged_configurations.kleber_tree.VirtualKleberTree.depth_first_iter"]], "digraph() (sage.combinat.rigged_configurations.kleber_tree.klebertree method)": [[211, "sage.combinat.rigged_configurations.kleber_tree.KleberTree.digraph"]], "latex_options() (sage.combinat.rigged_configurations.kleber_tree.klebertree method)": [[211, "sage.combinat.rigged_configurations.kleber_tree.KleberTree.latex_options"]], "multiplicity() (sage.combinat.rigged_configurations.kleber_tree.klebertreenode method)": [[211, "sage.combinat.rigged_configurations.kleber_tree.KleberTreeNode.multiplicity"]], "plot() (sage.combinat.rigged_configurations.kleber_tree.klebertree method)": [[211, "sage.combinat.rigged_configurations.kleber_tree.KleberTree.plot"]], "sage.combinat.rigged_configurations.kleber_tree": [[211, "module-sage.combinat.rigged_configurations.kleber_tree"]], "element (sage.combinat.rigged_configurations.kr_tableaux.krtableauxbn attribute)": [[212, "sage.combinat.rigged_configurations.kr_tableaux.KRTableauxBn.Element"]], "element (sage.combinat.rigged_configurations.kr_tableaux.krtableauxdtwistedspin attribute)": [[212, "sage.combinat.rigged_configurations.kr_tableaux.KRTableauxDTwistedSpin.Element"]], "element (sage.combinat.rigged_configurations.kr_tableaux.krtableauxspin attribute)": [[212, "sage.combinat.rigged_configurations.kr_tableaux.KRTableauxSpin.Element"]], "element (sage.combinat.rigged_configurations.kr_tableaux.krtableauxtypefromrc attribute)": [[212, "sage.combinat.rigged_configurations.kr_tableaux.KRTableauxTypeFromRC.Element"]], "element (sage.combinat.rigged_configurations.kr_tableaux.kirillovreshetikhintableaux attribute)": [[212, "sage.combinat.rigged_configurations.kr_tableaux.KirillovReshetikhinTableaux.Element"]], "krtableauxbn (class in sage.combinat.rigged_configurations.kr_tableaux)": [[212, "sage.combinat.rigged_configurations.kr_tableaux.KRTableauxBn"]], "krtableauxdtwistedspin (class in sage.combinat.rigged_configurations.kr_tableaux)": [[212, "sage.combinat.rigged_configurations.kr_tableaux.KRTableauxDTwistedSpin"]], "krtableauxrectangle (class in sage.combinat.rigged_configurations.kr_tableaux)": [[212, "sage.combinat.rigged_configurations.kr_tableaux.KRTableauxRectangle"]], "krtableauxspin (class in sage.combinat.rigged_configurations.kr_tableaux)": [[212, "sage.combinat.rigged_configurations.kr_tableaux.KRTableauxSpin"]], "krtableauxspinelement (class in sage.combinat.rigged_configurations.kr_tableaux)": [[212, "sage.combinat.rigged_configurations.kr_tableaux.KRTableauxSpinElement"]], "krtableauxtypebox (class in sage.combinat.rigged_configurations.kr_tableaux)": [[212, "sage.combinat.rigged_configurations.kr_tableaux.KRTableauxTypeBox"]], "krtableauxtypefromrc (class in sage.combinat.rigged_configurations.kr_tableaux)": [[212, "sage.combinat.rigged_configurations.kr_tableaux.KRTableauxTypeFromRC"]], "krtableauxtypefromrcelement (class in sage.combinat.rigged_configurations.kr_tableaux)": [[212, "sage.combinat.rigged_configurations.kr_tableaux.KRTableauxTypeFromRCElement"]], "krtableauxtypehorizonal (class in sage.combinat.rigged_configurations.kr_tableaux)": [[212, "sage.combinat.rigged_configurations.kr_tableaux.KRTableauxTypeHorizonal"]], "krtableauxtypevertical (class in sage.combinat.rigged_configurations.kr_tableaux)": [[212, "sage.combinat.rigged_configurations.kr_tableaux.KRTableauxTypeVertical"]], "kirillovreshetikhintableaux (class in sage.combinat.rigged_configurations.kr_tableaux)": [[212, "sage.combinat.rigged_configurations.kr_tableaux.KirillovReshetikhinTableaux"]], "kirillovreshetikhintableauxelement (class in sage.combinat.rigged_configurations.kr_tableaux)": [[212, "sage.combinat.rigged_configurations.kr_tableaux.KirillovReshetikhinTableauxElement"]], "classical_decomposition() (sage.combinat.rigged_configurations.kr_tableaux.kirillovreshetikhintableaux method)": [[212, "sage.combinat.rigged_configurations.kr_tableaux.KirillovReshetikhinTableaux.classical_decomposition"]], "classical_weight() (sage.combinat.rigged_configurations.kr_tableaux.krtableauxspinelement method)": [[212, "sage.combinat.rigged_configurations.kr_tableaux.KRTableauxSpinElement.classical_weight"]], "classical_weight() (sage.combinat.rigged_configurations.kr_tableaux.kirillovreshetikhintableauxelement method)": [[212, "sage.combinat.rigged_configurations.kr_tableaux.KirillovReshetikhinTableauxElement.classical_weight"]], "e() (sage.combinat.rigged_configurations.kr_tableaux.krtableauxspinelement method)": [[212, "sage.combinat.rigged_configurations.kr_tableaux.KRTableauxSpinElement.e"]], "e() (sage.combinat.rigged_configurations.kr_tableaux.krtableauxtypefromrcelement method)": [[212, "sage.combinat.rigged_configurations.kr_tableaux.KRTableauxTypeFromRCElement.e"]], "e() (sage.combinat.rigged_configurations.kr_tableaux.kirillovreshetikhintableauxelement method)": [[212, "sage.combinat.rigged_configurations.kr_tableaux.KirillovReshetikhinTableauxElement.e"]], "epsilon() (sage.combinat.rigged_configurations.kr_tableaux.krtableauxspinelement method)": [[212, "sage.combinat.rigged_configurations.kr_tableaux.KRTableauxSpinElement.epsilon"]], "epsilon() (sage.combinat.rigged_configurations.kr_tableaux.krtableauxtypefromrcelement method)": [[212, "sage.combinat.rigged_configurations.kr_tableaux.KRTableauxTypeFromRCElement.epsilon"]], "epsilon() (sage.combinat.rigged_configurations.kr_tableaux.kirillovreshetikhintableauxelement method)": [[212, "sage.combinat.rigged_configurations.kr_tableaux.KirillovReshetikhinTableauxElement.epsilon"]], "f() (sage.combinat.rigged_configurations.kr_tableaux.krtableauxspinelement method)": [[212, "sage.combinat.rigged_configurations.kr_tableaux.KRTableauxSpinElement.f"]], "f() (sage.combinat.rigged_configurations.kr_tableaux.krtableauxtypefromrcelement method)": [[212, "sage.combinat.rigged_configurations.kr_tableaux.KRTableauxTypeFromRCElement.f"]], "f() (sage.combinat.rigged_configurations.kr_tableaux.kirillovreshetikhintableauxelement method)": [[212, "sage.combinat.rigged_configurations.kr_tableaux.KirillovReshetikhinTableauxElement.f"]], "from_kirillov_reshetikhin_crystal() (sage.combinat.rigged_configurations.kr_tableaux.krtableauxbn method)": [[212, "sage.combinat.rigged_configurations.kr_tableaux.KRTableauxBn.from_kirillov_reshetikhin_crystal"]], "from_kirillov_reshetikhin_crystal() (sage.combinat.rigged_configurations.kr_tableaux.krtableauxrectangle method)": [[212, "sage.combinat.rigged_configurations.kr_tableaux.KRTableauxRectangle.from_kirillov_reshetikhin_crystal"]], "from_kirillov_reshetikhin_crystal() (sage.combinat.rigged_configurations.kr_tableaux.krtableauxtypehorizonal method)": [[212, "sage.combinat.rigged_configurations.kr_tableaux.KRTableauxTypeHorizonal.from_kirillov_reshetikhin_crystal"]], "from_kirillov_reshetikhin_crystal() (sage.combinat.rigged_configurations.kr_tableaux.krtableauxtypevertical method)": [[212, "sage.combinat.rigged_configurations.kr_tableaux.KRTableauxTypeVertical.from_kirillov_reshetikhin_crystal"]], "from_kirillov_reshetikhin_crystal() (sage.combinat.rigged_configurations.kr_tableaux.kirillovreshetikhintableaux method)": [[212, "sage.combinat.rigged_configurations.kr_tableaux.KirillovReshetikhinTableaux.from_kirillov_reshetikhin_crystal"]], "kirillov_reshetikhin_crystal() (sage.combinat.rigged_configurations.kr_tableaux.kirillovreshetikhintableaux method)": [[212, "sage.combinat.rigged_configurations.kr_tableaux.KirillovReshetikhinTableaux.kirillov_reshetikhin_crystal"]], "left_split() (sage.combinat.rigged_configurations.kr_tableaux.krtableauxspinelement method)": [[212, "sage.combinat.rigged_configurations.kr_tableaux.KRTableauxSpinElement.left_split"]], "left_split() (sage.combinat.rigged_configurations.kr_tableaux.kirillovreshetikhintableauxelement method)": [[212, "sage.combinat.rigged_configurations.kr_tableaux.KirillovReshetikhinTableauxElement.left_split"]], "module_generator() (sage.combinat.rigged_configurations.kr_tableaux.kirillovreshetikhintableaux method)": [[212, "sage.combinat.rigged_configurations.kr_tableaux.KirillovReshetikhinTableaux.module_generator"]], "module_generators() (sage.combinat.rigged_configurations.kr_tableaux.krtableauxtypefromrc method)": [[212, "sage.combinat.rigged_configurations.kr_tableaux.KRTableauxTypeFromRC.module_generators"]], "phi() (sage.combinat.rigged_configurations.kr_tableaux.krtableauxspinelement method)": [[212, "sage.combinat.rigged_configurations.kr_tableaux.KRTableauxSpinElement.phi"]], "phi() (sage.combinat.rigged_configurations.kr_tableaux.krtableauxtypefromrcelement method)": [[212, "sage.combinat.rigged_configurations.kr_tableaux.KRTableauxTypeFromRCElement.phi"]], "phi() (sage.combinat.rigged_configurations.kr_tableaux.kirillovreshetikhintableauxelement method)": [[212, "sage.combinat.rigged_configurations.kr_tableaux.KirillovReshetikhinTableauxElement.phi"]], "pp() (sage.combinat.rigged_configurations.kr_tableaux.kirillovreshetikhintableauxelement method)": [[212, "sage.combinat.rigged_configurations.kr_tableaux.KirillovReshetikhinTableauxElement.pp"]], "r() (sage.combinat.rigged_configurations.kr_tableaux.kirillovreshetikhintableaux method)": [[212, "sage.combinat.rigged_configurations.kr_tableaux.KirillovReshetikhinTableaux.r"]], "right_split() (sage.combinat.rigged_configurations.kr_tableaux.kirillovreshetikhintableauxelement method)": [[212, "sage.combinat.rigged_configurations.kr_tableaux.KirillovReshetikhinTableauxElement.right_split"]], "s() (sage.combinat.rigged_configurations.kr_tableaux.kirillovreshetikhintableaux method)": [[212, "sage.combinat.rigged_configurations.kr_tableaux.KirillovReshetikhinTableaux.s"]], "sage.combinat.rigged_configurations.kr_tableaux": [[212, "module-sage.combinat.rigged_configurations.kr_tableaux"]], "tensor() (sage.combinat.rigged_configurations.kr_tableaux.kirillovreshetikhintableaux method)": [[212, "sage.combinat.rigged_configurations.kr_tableaux.KirillovReshetikhinTableaux.tensor"]], "to_array() (sage.combinat.rigged_configurations.kr_tableaux.krtableauxspinelement method)": [[212, "sage.combinat.rigged_configurations.kr_tableaux.KRTableauxSpinElement.to_array"]], "to_array() (sage.combinat.rigged_configurations.kr_tableaux.kirillovreshetikhintableauxelement method)": [[212, "sage.combinat.rigged_configurations.kr_tableaux.KirillovReshetikhinTableauxElement.to_array"]], "to_classical_highest_weight() (sage.combinat.rigged_configurations.kr_tableaux.kirillovreshetikhintableauxelement method)": [[212, "sage.combinat.rigged_configurations.kr_tableaux.KirillovReshetikhinTableauxElement.to_classical_highest_weight"]], "to_kirillov_reshetikhin_crystal() (sage.combinat.rigged_configurations.kr_tableaux.kirillovreshetikhintableauxelement method)": [[212, "sage.combinat.rigged_configurations.kr_tableaux.KirillovReshetikhinTableauxElement.to_kirillov_reshetikhin_crystal"]], "to_tableau() (sage.combinat.rigged_configurations.kr_tableaux.kirillovreshetikhintableauxelement method)": [[212, "sage.combinat.rigged_configurations.kr_tableaux.KirillovReshetikhinTableauxElement.to_tableau"]], "weight() (sage.combinat.rigged_configurations.kr_tableaux.kirillovreshetikhintableauxelement method)": [[212, "sage.combinat.rigged_configurations.kr_tableaux.KirillovReshetikhinTableauxElement.weight"]], "crystalofnonsimplylacedrc (class in sage.combinat.rigged_configurations.rc_crystal)": [[213, "sage.combinat.rigged_configurations.rc_crystal.CrystalOfNonSimplyLacedRC"]], "crystalofriggedconfigurations (class in sage.combinat.rigged_configurations.rc_crystal)": [[213, "sage.combinat.rigged_configurations.rc_crystal.CrystalOfRiggedConfigurations"]], "element (sage.combinat.rigged_configurations.rc_crystal.crystalofnonsimplylacedrc attribute)": [[213, "sage.combinat.rigged_configurations.rc_crystal.CrystalOfNonSimplyLacedRC.Element"]], "element (sage.combinat.rigged_configurations.rc_crystal.crystalofriggedconfigurations attribute)": [[213, "sage.combinat.rigged_configurations.rc_crystal.CrystalOfRiggedConfigurations.Element"]], "from_virtual() (sage.combinat.rigged_configurations.rc_crystal.crystalofnonsimplylacedrc method)": [[213, "sage.combinat.rigged_configurations.rc_crystal.CrystalOfNonSimplyLacedRC.from_virtual"]], "options (sage.combinat.rigged_configurations.rc_crystal.crystalofriggedconfigurations attribute)": [[213, "sage.combinat.rigged_configurations.rc_crystal.CrystalOfRiggedConfigurations.options"]], "sage.combinat.rigged_configurations.rc_crystal": [[213, "module-sage.combinat.rigged_configurations.rc_crystal"]], "to_virtual() (sage.combinat.rigged_configurations.rc_crystal.crystalofnonsimplylacedrc method)": [[213, "sage.combinat.rigged_configurations.rc_crystal.CrystalOfNonSimplyLacedRC.to_virtual"]], "virtual() (sage.combinat.rigged_configurations.rc_crystal.crystalofnonsimplylacedrc method)": [[213, "sage.combinat.rigged_configurations.rc_crystal.CrystalOfNonSimplyLacedRC.virtual"]], "weight_lattice_realization() (sage.combinat.rigged_configurations.rc_crystal.crystalofriggedconfigurations method)": [[213, "sage.combinat.rigged_configurations.rc_crystal.CrystalOfRiggedConfigurations.weight_lattice_realization"]], "infinitycrystalofnonsimplylacedrc (class in sage.combinat.rigged_configurations.rc_infinity)": [[214, "sage.combinat.rigged_configurations.rc_infinity.InfinityCrystalOfNonSimplyLacedRC"]], "infinitycrystalofnonsimplylacedrc.element (class in sage.combinat.rigged_configurations.rc_infinity)": [[214, "sage.combinat.rigged_configurations.rc_infinity.InfinityCrystalOfNonSimplyLacedRC.Element"]], "infinitycrystalofriggedconfigurations (class in sage.combinat.rigged_configurations.rc_infinity)": [[214, "sage.combinat.rigged_configurations.rc_infinity.InfinityCrystalOfRiggedConfigurations"]], "infinitycrystalofriggedconfigurations.element (class in sage.combinat.rigged_configurations.rc_infinity)": [[214, "sage.combinat.rigged_configurations.rc_infinity.InfinityCrystalOfRiggedConfigurations.Element"]], "from_virtual() (sage.combinat.rigged_configurations.rc_infinity.infinitycrystalofnonsimplylacedrc method)": [[214, "sage.combinat.rigged_configurations.rc_infinity.InfinityCrystalOfNonSimplyLacedRC.from_virtual"]], "options (sage.combinat.rigged_configurations.rc_infinity.infinitycrystalofriggedconfigurations attribute)": [[214, "sage.combinat.rigged_configurations.rc_infinity.InfinityCrystalOfRiggedConfigurations.options"]], "sage.combinat.rigged_configurations.rc_infinity": [[214, "module-sage.combinat.rigged_configurations.rc_infinity"]], "to_virtual() (sage.combinat.rigged_configurations.rc_infinity.infinitycrystalofnonsimplylacedrc method)": [[214, "sage.combinat.rigged_configurations.rc_infinity.InfinityCrystalOfNonSimplyLacedRC.to_virtual"]], "virtual() (sage.combinat.rigged_configurations.rc_infinity.infinitycrystalofnonsimplylacedrc method)": [[214, "sage.combinat.rigged_configurations.rc_infinity.InfinityCrystalOfNonSimplyLacedRC.virtual"]], "weight() (sage.combinat.rigged_configurations.rc_infinity.infinitycrystalofnonsimplylacedrc.element method)": [[214, "sage.combinat.rigged_configurations.rc_infinity.InfinityCrystalOfNonSimplyLacedRC.Element.weight"]], "weight() (sage.combinat.rigged_configurations.rc_infinity.infinitycrystalofriggedconfigurations.element method)": [[214, "sage.combinat.rigged_configurations.rc_infinity.InfinityCrystalOfRiggedConfigurations.Element.weight"]], "weight_lattice_realization() (sage.combinat.rigged_configurations.rc_infinity.infinitycrystalofriggedconfigurations method)": [[214, "sage.combinat.rigged_configurations.rc_infinity.InfinityCrystalOfRiggedConfigurations.weight_lattice_realization"]], "krrcnonsimplylacedelement (class in sage.combinat.rigged_configurations.rigged_configuration_element)": [[215, "sage.combinat.rigged_configurations.rigged_configuration_element.KRRCNonSimplyLacedElement"]], "krrcsimplylacedelement (class in sage.combinat.rigged_configurations.rigged_configuration_element)": [[215, "sage.combinat.rigged_configurations.rigged_configuration_element.KRRCSimplyLacedElement"]], "krrctypea2dualelement (class in sage.combinat.rigged_configurations.rigged_configuration_element)": [[215, "sage.combinat.rigged_configurations.rigged_configuration_element.KRRCTypeA2DualElement"]], "krriggedconfigurationelement (class in sage.combinat.rigged_configurations.rigged_configuration_element)": [[215, "sage.combinat.rigged_configurations.rigged_configuration_element.KRRiggedConfigurationElement"]], "rchwnonsimplylacedelement (class in sage.combinat.rigged_configurations.rigged_configuration_element)": [[215, "sage.combinat.rigged_configurations.rigged_configuration_element.RCHWNonSimplyLacedElement"]], "rchighestweightelement (class in sage.combinat.rigged_configurations.rigged_configuration_element)": [[215, "sage.combinat.rigged_configurations.rigged_configuration_element.RCHighestWeightElement"]], "rcnonsimplylacedelement (class in sage.combinat.rigged_configurations.rigged_configuration_element)": [[215, "sage.combinat.rigged_configurations.rigged_configuration_element.RCNonSimplyLacedElement"]], "riggedconfigurationelement (class in sage.combinat.rigged_configurations.rigged_configuration_element)": [[215, "sage.combinat.rigged_configurations.rigged_configuration_element.RiggedConfigurationElement"]], "cc() (sage.combinat.rigged_configurations.rigged_configuration_element.krrcnonsimplylacedelement method)": [[215, "sage.combinat.rigged_configurations.rigged_configuration_element.KRRCNonSimplyLacedElement.cc"]], "cc() (sage.combinat.rigged_configurations.rigged_configuration_element.krrcsimplylacedelement method)": [[215, "sage.combinat.rigged_configurations.rigged_configuration_element.KRRCSimplyLacedElement.cc"]], "cc() (sage.combinat.rigged_configurations.rigged_configuration_element.krrctypea2dualelement method)": [[215, "sage.combinat.rigged_configurations.rigged_configuration_element.KRRCTypeA2DualElement.cc"]], "charge() (sage.combinat.rigged_configurations.rigged_configuration_element.krrcsimplylacedelement method)": [[215, "sage.combinat.rigged_configurations.rigged_configuration_element.KRRCSimplyLacedElement.charge"]], "check() (sage.combinat.rigged_configurations.rigged_configuration_element.krriggedconfigurationelement method)": [[215, "sage.combinat.rigged_configurations.rigged_configuration_element.KRRiggedConfigurationElement.check"]], "check() (sage.combinat.rigged_configurations.rigged_configuration_element.rchwnonsimplylacedelement method)": [[215, "sage.combinat.rigged_configurations.rigged_configuration_element.RCHWNonSimplyLacedElement.check"]], "check() (sage.combinat.rigged_configurations.rigged_configuration_element.rchighestweightelement method)": [[215, "sage.combinat.rigged_configurations.rigged_configuration_element.RCHighestWeightElement.check"]], "check() (sage.combinat.rigged_configurations.rigged_configuration_element.riggedconfigurationelement method)": [[215, "sage.combinat.rigged_configurations.rigged_configuration_element.RiggedConfigurationElement.check"]], "classical_weight() (sage.combinat.rigged_configurations.rigged_configuration_element.krriggedconfigurationelement method)": [[215, "sage.combinat.rigged_configurations.rigged_configuration_element.KRRiggedConfigurationElement.classical_weight"]], "cocharge() (sage.combinat.rigged_configurations.rigged_configuration_element.krrcnonsimplylacedelement method)": [[215, "sage.combinat.rigged_configurations.rigged_configuration_element.KRRCNonSimplyLacedElement.cocharge"]], "cocharge() (sage.combinat.rigged_configurations.rigged_configuration_element.krrcsimplylacedelement method)": [[215, "sage.combinat.rigged_configurations.rigged_configuration_element.KRRCSimplyLacedElement.cocharge"]], "cocharge() (sage.combinat.rigged_configurations.rigged_configuration_element.krrctypea2dualelement method)": [[215, "sage.combinat.rigged_configurations.rigged_configuration_element.KRRCTypeA2DualElement.cocharge"]], "complement_rigging() (sage.combinat.rigged_configurations.rigged_configuration_element.krriggedconfigurationelement method)": [[215, "sage.combinat.rigged_configurations.rigged_configuration_element.KRRiggedConfigurationElement.complement_rigging"]], "delta() (sage.combinat.rigged_configurations.rigged_configuration_element.krriggedconfigurationelement method)": [[215, "sage.combinat.rigged_configurations.rigged_configuration_element.KRRiggedConfigurationElement.delta"]], "e() (sage.combinat.rigged_configurations.rigged_configuration_element.krrcnonsimplylacedelement method)": [[215, "sage.combinat.rigged_configurations.rigged_configuration_element.KRRCNonSimplyLacedElement.e"]], "e() (sage.combinat.rigged_configurations.rigged_configuration_element.krriggedconfigurationelement method)": [[215, "sage.combinat.rigged_configurations.rigged_configuration_element.KRRiggedConfigurationElement.e"]], "e() (sage.combinat.rigged_configurations.rigged_configuration_element.rcnonsimplylacedelement method)": [[215, "sage.combinat.rigged_configurations.rigged_configuration_element.RCNonSimplyLacedElement.e"]], "e() (sage.combinat.rigged_configurations.rigged_configuration_element.riggedconfigurationelement method)": [[215, "sage.combinat.rigged_configurations.rigged_configuration_element.RiggedConfigurationElement.e"]], "epsilon() (sage.combinat.rigged_configurations.rigged_configuration_element.krrctypea2dualelement method)": [[215, "sage.combinat.rigged_configurations.rigged_configuration_element.KRRCTypeA2DualElement.epsilon"]], "epsilon() (sage.combinat.rigged_configurations.rigged_configuration_element.krriggedconfigurationelement method)": [[215, "sage.combinat.rigged_configurations.rigged_configuration_element.KRRiggedConfigurationElement.epsilon"]], "epsilon() (sage.combinat.rigged_configurations.rigged_configuration_element.riggedconfigurationelement method)": [[215, "sage.combinat.rigged_configurations.rigged_configuration_element.RiggedConfigurationElement.epsilon"]], "f() (sage.combinat.rigged_configurations.rigged_configuration_element.krrcnonsimplylacedelement method)": [[215, "sage.combinat.rigged_configurations.rigged_configuration_element.KRRCNonSimplyLacedElement.f"]], "f() (sage.combinat.rigged_configurations.rigged_configuration_element.krriggedconfigurationelement method)": [[215, "sage.combinat.rigged_configurations.rigged_configuration_element.KRRiggedConfigurationElement.f"]], "f() (sage.combinat.rigged_configurations.rigged_configuration_element.rchwnonsimplylacedelement method)": [[215, "sage.combinat.rigged_configurations.rigged_configuration_element.RCHWNonSimplyLacedElement.f"]], "f() (sage.combinat.rigged_configurations.rigged_configuration_element.rchighestweightelement method)": [[215, "sage.combinat.rigged_configurations.rigged_configuration_element.RCHighestWeightElement.f"]], "f() (sage.combinat.rigged_configurations.rigged_configuration_element.rcnonsimplylacedelement method)": [[215, "sage.combinat.rigged_configurations.rigged_configuration_element.RCNonSimplyLacedElement.f"]], "f() (sage.combinat.rigged_configurations.rigged_configuration_element.riggedconfigurationelement method)": [[215, "sage.combinat.rigged_configurations.rigged_configuration_element.RiggedConfigurationElement.f"]], "left_box() (sage.combinat.rigged_configurations.rigged_configuration_element.krriggedconfigurationelement method)": [[215, "sage.combinat.rigged_configurations.rigged_configuration_element.KRRiggedConfigurationElement.left_box"]], "left_column_box() (sage.combinat.rigged_configurations.rigged_configuration_element.krriggedconfigurationelement method)": [[215, "sage.combinat.rigged_configurations.rigged_configuration_element.KRRiggedConfigurationElement.left_column_box"]], "left_split() (sage.combinat.rigged_configurations.rigged_configuration_element.krriggedconfigurationelement method)": [[215, "sage.combinat.rigged_configurations.rigged_configuration_element.KRRiggedConfigurationElement.left_split"]], "nu() (sage.combinat.rigged_configurations.rigged_configuration_element.riggedconfigurationelement method)": [[215, "sage.combinat.rigged_configurations.rigged_configuration_element.RiggedConfigurationElement.nu"]], "partition_rigging_lists() (sage.combinat.rigged_configurations.rigged_configuration_element.riggedconfigurationelement method)": [[215, "sage.combinat.rigged_configurations.rigged_configuration_element.RiggedConfigurationElement.partition_rigging_lists"]], "phi() (sage.combinat.rigged_configurations.rigged_configuration_element.krrctypea2dualelement method)": [[215, "sage.combinat.rigged_configurations.rigged_configuration_element.KRRCTypeA2DualElement.phi"]], "phi() (sage.combinat.rigged_configurations.rigged_configuration_element.krriggedconfigurationelement method)": [[215, "sage.combinat.rigged_configurations.rigged_configuration_element.KRRiggedConfigurationElement.phi"]], "phi() (sage.combinat.rigged_configurations.rigged_configuration_element.riggedconfigurationelement method)": [[215, "sage.combinat.rigged_configurations.rigged_configuration_element.RiggedConfigurationElement.phi"]], "right_column_box() (sage.combinat.rigged_configurations.rigged_configuration_element.krriggedconfigurationelement method)": [[215, "sage.combinat.rigged_configurations.rigged_configuration_element.KRRiggedConfigurationElement.right_column_box"]], "right_split() (sage.combinat.rigged_configurations.rigged_configuration_element.krriggedconfigurationelement method)": [[215, "sage.combinat.rigged_configurations.rigged_configuration_element.KRRiggedConfigurationElement.right_split"]], "sage.combinat.rigged_configurations.rigged_configuration_element": [[215, "module-sage.combinat.rigged_configurations.rigged_configuration_element"]], "to_tensor_product_of_kirillov_reshetikhin_crystals() (sage.combinat.rigged_configurations.rigged_configuration_element.krriggedconfigurationelement method)": [[215, "sage.combinat.rigged_configurations.rigged_configuration_element.KRRiggedConfigurationElement.to_tensor_product_of_kirillov_reshetikhin_crystals"]], "to_tensor_product_of_kirillov_reshetikhin_tableaux() (sage.combinat.rigged_configurations.rigged_configuration_element.krriggedconfigurationelement method)": [[215, "sage.combinat.rigged_configurations.rigged_configuration_element.KRRiggedConfigurationElement.to_tensor_product_of_kirillov_reshetikhin_tableaux"]], "to_virtual_configuration() (sage.combinat.rigged_configurations.rigged_configuration_element.rcnonsimplylacedelement method)": [[215, "sage.combinat.rigged_configurations.rigged_configuration_element.RCNonSimplyLacedElement.to_virtual_configuration"]], "vacancy_number() (sage.combinat.rigged_configurations.rigged_configuration_element.riggedconfigurationelement method)": [[215, "sage.combinat.rigged_configurations.rigged_configuration_element.RiggedConfigurationElement.vacancy_number"]], "weight() (sage.combinat.rigged_configurations.rigged_configuration_element.krriggedconfigurationelement method)": [[215, "sage.combinat.rigged_configurations.rigged_configuration_element.KRRiggedConfigurationElement.weight"]], "weight() (sage.combinat.rigged_configurations.rigged_configuration_element.rchwnonsimplylacedelement method)": [[215, "sage.combinat.rigged_configurations.rigged_configuration_element.RCHWNonSimplyLacedElement.weight"]], "weight() (sage.combinat.rigged_configurations.rigged_configuration_element.rchighestweightelement method)": [[215, "sage.combinat.rigged_configurations.rigged_configuration_element.RCHighestWeightElement.weight"]], "element (sage.combinat.rigged_configurations.rigged_configurations.rcnonsimplylaced attribute)": [[216, "sage.combinat.rigged_configurations.rigged_configurations.RCNonSimplyLaced.Element"]], "element (sage.combinat.rigged_configurations.rigged_configurations.rctypea2dual attribute)": [[216, "sage.combinat.rigged_configurations.rigged_configurations.RCTypeA2Dual.Element"]], "element (sage.combinat.rigged_configurations.rigged_configurations.riggedconfigurations attribute)": [[216, "sage.combinat.rigged_configurations.rigged_configurations.RiggedConfigurations.Element"]], "kirillovreshetikhincrystal() (in module sage.combinat.rigged_configurations.rigged_configurations)": [[216, "sage.combinat.rigged_configurations.rigged_configurations.KirillovReshetikhinCrystal"]], "rcnonsimplylaced (class in sage.combinat.rigged_configurations.rigged_configurations)": [[216, "sage.combinat.rigged_configurations.rigged_configurations.RCNonSimplyLaced"]], "rctypea2dual (class in sage.combinat.rigged_configurations.rigged_configurations)": [[216, "sage.combinat.rigged_configurations.rigged_configurations.RCTypeA2Dual"]], "rctypea2even (class in sage.combinat.rigged_configurations.rigged_configurations)": [[216, "sage.combinat.rigged_configurations.rigged_configurations.RCTypeA2Even"]], "riggedconfigurations (class in sage.combinat.rigged_configurations.rigged_configurations)": [[216, "sage.combinat.rigged_configurations.rigged_configurations.RiggedConfigurations"]], "cardinality() (sage.combinat.rigged_configurations.rigged_configurations.rctypea2even method)": [[216, "sage.combinat.rigged_configurations.rigged_configurations.RCTypeA2Even.cardinality"]], "classically_highest_weight_vectors() (sage.combinat.rigged_configurations.rigged_configurations.riggedconfigurations method)": [[216, "sage.combinat.rigged_configurations.rigged_configurations.RiggedConfigurations.classically_highest_weight_vectors"]], "fermionic_formula() (sage.combinat.rigged_configurations.rigged_configurations.riggedconfigurations method)": [[216, "sage.combinat.rigged_configurations.rigged_configurations.RiggedConfigurations.fermionic_formula"]], "from_virtual() (sage.combinat.rigged_configurations.rigged_configurations.rcnonsimplylaced method)": [[216, "sage.combinat.rigged_configurations.rigged_configurations.RCNonSimplyLaced.from_virtual"]], "from_virtual() (sage.combinat.rigged_configurations.rigged_configurations.rctypea2dual method)": [[216, "sage.combinat.rigged_configurations.rigged_configurations.RCTypeA2Dual.from_virtual"]], "from_virtual() (sage.combinat.rigged_configurations.rigged_configurations.rctypea2even method)": [[216, "sage.combinat.rigged_configurations.rigged_configurations.RCTypeA2Even.from_virtual"]], "kleber_tree() (sage.combinat.rigged_configurations.rigged_configurations.rcnonsimplylaced method)": [[216, "sage.combinat.rigged_configurations.rigged_configurations.RCNonSimplyLaced.kleber_tree"]], "kleber_tree() (sage.combinat.rigged_configurations.rigged_configurations.riggedconfigurations method)": [[216, "sage.combinat.rigged_configurations.rigged_configurations.RiggedConfigurations.kleber_tree"]], "module_generators() (sage.combinat.rigged_configurations.rigged_configurations.rcnonsimplylaced method)": [[216, "sage.combinat.rigged_configurations.rigged_configurations.RCNonSimplyLaced.module_generators"]], "module_generators() (sage.combinat.rigged_configurations.rigged_configurations.rctypea2dual method)": [[216, "sage.combinat.rigged_configurations.rigged_configurations.RCTypeA2Dual.module_generators"]], "module_generators() (sage.combinat.rigged_configurations.rigged_configurations.riggedconfigurations method)": [[216, "sage.combinat.rigged_configurations.rigged_configurations.RiggedConfigurations.module_generators"]], "options (sage.combinat.rigged_configurations.rigged_configurations.riggedconfigurations attribute)": [[216, "sage.combinat.rigged_configurations.rigged_configurations.RiggedConfigurations.options"]], "sage.combinat.rigged_configurations.rigged_configurations": [[216, "module-sage.combinat.rigged_configurations.rigged_configurations"]], "tensor() (sage.combinat.rigged_configurations.rigged_configurations.riggedconfigurations method)": [[216, "sage.combinat.rigged_configurations.rigged_configurations.RiggedConfigurations.tensor"]], "tensor_product_of_kirillov_reshetikhin_crystals() (sage.combinat.rigged_configurations.rigged_configurations.riggedconfigurations method)": [[216, "sage.combinat.rigged_configurations.rigged_configurations.RiggedConfigurations.tensor_product_of_kirillov_reshetikhin_crystals"]], "tensor_product_of_kirillov_reshetikhin_tableaux() (sage.combinat.rigged_configurations.rigged_configurations.riggedconfigurations method)": [[216, "sage.combinat.rigged_configurations.rigged_configurations.RiggedConfigurations.tensor_product_of_kirillov_reshetikhin_tableaux"]], "to_virtual() (sage.combinat.rigged_configurations.rigged_configurations.rcnonsimplylaced method)": [[216, "sage.combinat.rigged_configurations.rigged_configurations.RCNonSimplyLaced.to_virtual"]], "to_virtual() (sage.combinat.rigged_configurations.rigged_configurations.rctypea2dual method)": [[216, "sage.combinat.rigged_configurations.rigged_configurations.RCTypeA2Dual.to_virtual"]], "to_virtual() (sage.combinat.rigged_configurations.rigged_configurations.rctypea2even method)": [[216, "sage.combinat.rigged_configurations.rigged_configurations.RCTypeA2Even.to_virtual"]], "virtual() (sage.combinat.rigged_configurations.rigged_configurations.rcnonsimplylaced method)": [[216, "sage.combinat.rigged_configurations.rigged_configurations.RCNonSimplyLaced.virtual"]], "virtual() (sage.combinat.rigged_configurations.rigged_configurations.rctypea2even method)": [[216, "sage.combinat.rigged_configurations.rigged_configurations.RCTypeA2Even.virtual"]], "riggedpartition (class in sage.combinat.rigged_configurations.rigged_partition)": [[217, "sage.combinat.rigged_configurations.rigged_partition.RiggedPartition"]], "riggedpartitiontypeb (class in sage.combinat.rigged_configurations.rigged_partition)": [[217, "sage.combinat.rigged_configurations.rigged_partition.RiggedPartitionTypeB"]], "get_num_cells_to_column() (sage.combinat.rigged_configurations.rigged_partition.riggedpartition method)": [[217, "sage.combinat.rigged_configurations.rigged_partition.RiggedPartition.get_num_cells_to_column"]], "insert_cell() (sage.combinat.rigged_configurations.rigged_partition.riggedpartition method)": [[217, "sage.combinat.rigged_configurations.rigged_partition.RiggedPartition.insert_cell"]], "remove_cell() (sage.combinat.rigged_configurations.rigged_partition.riggedpartition method)": [[217, "sage.combinat.rigged_configurations.rigged_partition.RiggedPartition.remove_cell"]], "rigging (sage.combinat.rigged_configurations.rigged_partition.riggedpartition attribute)": [[217, "sage.combinat.rigged_configurations.rigged_partition.RiggedPartition.rigging"]], "sage.combinat.rigged_configurations.rigged_partition": [[217, "module-sage.combinat.rigged_configurations.rigged_partition"]], "vacancy_numbers (sage.combinat.rigged_configurations.rigged_partition.riggedpartition attribute)": [[217, "sage.combinat.rigged_configurations.rigged_partition.RiggedPartition.vacancy_numbers"]], "element (sage.combinat.rigged_configurations.tensor_product_kr_tableaux.tensorproductofkirillovreshetikhintableaux attribute)": [[218, "sage.combinat.rigged_configurations.tensor_product_kr_tableaux.TensorProductOfKirillovReshetikhinTableaux.Element"]], "highestweighttensorkrt (class in sage.combinat.rigged_configurations.tensor_product_kr_tableaux)": [[218, "sage.combinat.rigged_configurations.tensor_product_kr_tableaux.HighestWeightTensorKRT"]], "tensorproductofkirillovreshetikhintableaux (class in sage.combinat.rigged_configurations.tensor_product_kr_tableaux)": [[218, "sage.combinat.rigged_configurations.tensor_product_kr_tableaux.TensorProductOfKirillovReshetikhinTableaux"]], "cardinality() (sage.combinat.rigged_configurations.tensor_product_kr_tableaux.highestweighttensorkrt method)": [[218, "sage.combinat.rigged_configurations.tensor_product_kr_tableaux.HighestWeightTensorKRT.cardinality"]], "rigged_configurations() (sage.combinat.rigged_configurations.tensor_product_kr_tableaux.tensorproductofkirillovreshetikhintableaux method)": [[218, "sage.combinat.rigged_configurations.tensor_product_kr_tableaux.TensorProductOfKirillovReshetikhinTableaux.rigged_configurations"]], "sage.combinat.rigged_configurations.tensor_product_kr_tableaux": [[218, "module-sage.combinat.rigged_configurations.tensor_product_kr_tableaux"]], "tensor() (sage.combinat.rigged_configurations.tensor_product_kr_tableaux.tensorproductofkirillovreshetikhintableaux method)": [[218, "sage.combinat.rigged_configurations.tensor_product_kr_tableaux.TensorProductOfKirillovReshetikhinTableaux.tensor"]], "tensor_product_of_kirillov_reshetikhin_crystals() (sage.combinat.rigged_configurations.tensor_product_kr_tableaux.tensorproductofkirillovreshetikhintableaux method)": [[218, "sage.combinat.rigged_configurations.tensor_product_kr_tableaux.TensorProductOfKirillovReshetikhinTableaux.tensor_product_of_kirillov_reshetikhin_crystals"]], "tensorproductofkirillovreshetikhintableauxelement (class in sage.combinat.rigged_configurations.tensor_product_kr_tableaux_element)": [[219, "sage.combinat.rigged_configurations.tensor_product_kr_tableaux_element.TensorProductOfKirillovReshetikhinTableauxElement"]], "classical_weight() (sage.combinat.rigged_configurations.tensor_product_kr_tableaux_element.tensorproductofkirillovreshetikhintableauxelement method)": [[219, "sage.combinat.rigged_configurations.tensor_product_kr_tableaux_element.TensorProductOfKirillovReshetikhinTableauxElement.classical_weight"]], "left_split() (sage.combinat.rigged_configurations.tensor_product_kr_tableaux_element.tensorproductofkirillovreshetikhintableauxelement method)": [[219, "sage.combinat.rigged_configurations.tensor_product_kr_tableaux_element.TensorProductOfKirillovReshetikhinTableauxElement.left_split"]], "lusztig_involution() (sage.combinat.rigged_configurations.tensor_product_kr_tableaux_element.tensorproductofkirillovreshetikhintableauxelement method)": [[219, "sage.combinat.rigged_configurations.tensor_product_kr_tableaux_element.TensorProductOfKirillovReshetikhinTableauxElement.lusztig_involution"]], "pp() (sage.combinat.rigged_configurations.tensor_product_kr_tableaux_element.tensorproductofkirillovreshetikhintableauxelement method)": [[219, "sage.combinat.rigged_configurations.tensor_product_kr_tableaux_element.TensorProductOfKirillovReshetikhinTableauxElement.pp"]], "right_split() (sage.combinat.rigged_configurations.tensor_product_kr_tableaux_element.tensorproductofkirillovreshetikhintableauxelement method)": [[219, "sage.combinat.rigged_configurations.tensor_product_kr_tableaux_element.TensorProductOfKirillovReshetikhinTableauxElement.right_split"]], "sage.combinat.rigged_configurations.tensor_product_kr_tableaux_element": [[219, "module-sage.combinat.rigged_configurations.tensor_product_kr_tableaux_element"]], "to_rigged_configuration() (sage.combinat.rigged_configurations.tensor_product_kr_tableaux_element.tensorproductofkirillovreshetikhintableauxelement method)": [[219, "sage.combinat.rigged_configurations.tensor_product_kr_tableaux_element.TensorProductOfKirillovReshetikhinTableauxElement.to_rigged_configuration"]], "to_tensor_product_of_kirillov_reshetikhin_crystals() (sage.combinat.rigged_configurations.tensor_product_kr_tableaux_element.tensorproductofkirillovreshetikhintableauxelement method)": [[219, "sage.combinat.rigged_configurations.tensor_product_kr_tableaux_element.TensorProductOfKirillovReshetikhinTableauxElement.to_tensor_product_of_kirillov_reshetikhin_crystals"]], "sage.combinat.root_system.all": [[220, "module-sage.combinat.root_system.all"]], "ambientspace (class in sage.combinat.root_system.ambient_space)": [[221, "sage.combinat.root_system.ambient_space.AmbientSpace"]], "ambientspaceelement (class in sage.combinat.root_system.ambient_space)": [[221, "sage.combinat.root_system.ambient_space.AmbientSpaceElement"]], "element (sage.combinat.root_system.ambient_space.ambientspace attribute)": [[221, "sage.combinat.root_system.ambient_space.AmbientSpace.Element"]], "associated_coroot() (sage.combinat.root_system.ambient_space.ambientspaceelement method)": [[221, "sage.combinat.root_system.ambient_space.AmbientSpaceElement.associated_coroot"]], "coerce_to_e6() (sage.combinat.root_system.ambient_space.ambientspaceelement method)": [[221, "sage.combinat.root_system.ambient_space.AmbientSpaceElement.coerce_to_e6"]], "coerce_to_e7() (sage.combinat.root_system.ambient_space.ambientspaceelement method)": [[221, "sage.combinat.root_system.ambient_space.AmbientSpaceElement.coerce_to_e7"]], "coerce_to_sl() (sage.combinat.root_system.ambient_space.ambientspaceelement method)": [[221, "sage.combinat.root_system.ambient_space.AmbientSpaceElement.coerce_to_sl"]], "coroot_lattice() (sage.combinat.root_system.ambient_space.ambientspace method)": [[221, "sage.combinat.root_system.ambient_space.AmbientSpace.coroot_lattice"]], "dimension() (sage.combinat.root_system.ambient_space.ambientspace method)": [[221, "sage.combinat.root_system.ambient_space.AmbientSpace.dimension"]], "dot_product() (sage.combinat.root_system.ambient_space.ambientspaceelement method)": [[221, "sage.combinat.root_system.ambient_space.AmbientSpaceElement.dot_product"]], "from_vector_notation() (sage.combinat.root_system.ambient_space.ambientspace method)": [[221, "sage.combinat.root_system.ambient_space.AmbientSpace.from_vector_notation"]], "fundamental_weight() (sage.combinat.root_system.ambient_space.ambientspace method)": [[221, "sage.combinat.root_system.ambient_space.AmbientSpace.fundamental_weight"]], "inner_product() (sage.combinat.root_system.ambient_space.ambientspaceelement method)": [[221, "sage.combinat.root_system.ambient_space.AmbientSpaceElement.inner_product"]], "is_positive_root() (sage.combinat.root_system.ambient_space.ambientspaceelement method)": [[221, "sage.combinat.root_system.ambient_space.AmbientSpaceElement.is_positive_root"]], "reflection() (sage.combinat.root_system.ambient_space.ambientspace method)": [[221, "sage.combinat.root_system.ambient_space.AmbientSpace.reflection"]], "sage.combinat.root_system.ambient_space": [[221, "module-sage.combinat.root_system.ambient_space"]], "scalar() (sage.combinat.root_system.ambient_space.ambientspaceelement method)": [[221, "sage.combinat.root_system.ambient_space.AmbientSpaceElement.scalar"]], "simple_coroot() (sage.combinat.root_system.ambient_space.ambientspace method)": [[221, "sage.combinat.root_system.ambient_space.AmbientSpace.simple_coroot"]], "smallest_base_ring() (sage.combinat.root_system.ambient_space.ambientspace class method)": [[221, "sage.combinat.root_system.ambient_space.AmbientSpace.smallest_base_ring"]], "to_ambient() (sage.combinat.root_system.ambient_space.ambientspaceelement method)": [[221, "sage.combinat.root_system.ambient_space.AmbientSpaceElement.to_ambient"]], "to_ambient_space_morphism() (sage.combinat.root_system.ambient_space.ambientspace method)": [[221, "sage.combinat.root_system.ambient_space.AmbientSpace.to_ambient_space_morphism"]], "associahedra() (in module sage.combinat.root_system.associahedron)": [[222, "sage.combinat.root_system.associahedron.Associahedra"]], "associahedra_base (class in sage.combinat.root_system.associahedron)": [[222, "sage.combinat.root_system.associahedron.Associahedra_base"]], "associahedra_cdd (class in sage.combinat.root_system.associahedron)": [[222, "sage.combinat.root_system.associahedron.Associahedra_cdd"]], "associahedra_field (class in sage.combinat.root_system.associahedron)": [[222, "sage.combinat.root_system.associahedron.Associahedra_field"]], "associahedra_normaliz (class in sage.combinat.root_system.associahedron)": [[222, "sage.combinat.root_system.associahedron.Associahedra_normaliz"]], "associahedra_polymake (class in sage.combinat.root_system.associahedron)": [[222, "sage.combinat.root_system.associahedron.Associahedra_polymake"]], "associahedra_ppl (class in sage.combinat.root_system.associahedron)": [[222, "sage.combinat.root_system.associahedron.Associahedra_ppl"]], "associahedron() (in module sage.combinat.root_system.associahedron)": [[222, "sage.combinat.root_system.associahedron.Associahedron"]], "associahedron_class_base (class in sage.combinat.root_system.associahedron)": [[222, "sage.combinat.root_system.associahedron.Associahedron_class_base"]], "associahedron_class_cdd (class in sage.combinat.root_system.associahedron)": [[222, "sage.combinat.root_system.associahedron.Associahedron_class_cdd"]], "associahedron_class_field (class in sage.combinat.root_system.associahedron)": [[222, "sage.combinat.root_system.associahedron.Associahedron_class_field"]], "associahedron_class_normaliz (class in sage.combinat.root_system.associahedron)": [[222, "sage.combinat.root_system.associahedron.Associahedron_class_normaliz"]], "associahedron_class_polymake (class in sage.combinat.root_system.associahedron)": [[222, "sage.combinat.root_system.associahedron.Associahedron_class_polymake"]], "associahedron_class_ppl (class in sage.combinat.root_system.associahedron)": [[222, "sage.combinat.root_system.associahedron.Associahedron_class_ppl"]], "element (sage.combinat.root_system.associahedron.associahedra_cdd attribute)": [[222, "sage.combinat.root_system.associahedron.Associahedra_cdd.Element"]], "element (sage.combinat.root_system.associahedron.associahedra_field attribute)": [[222, "sage.combinat.root_system.associahedron.Associahedra_field.Element"]], "element (sage.combinat.root_system.associahedron.associahedra_normaliz attribute)": [[222, "sage.combinat.root_system.associahedron.Associahedra_normaliz.Element"]], "element (sage.combinat.root_system.associahedron.associahedra_polymake attribute)": [[222, "sage.combinat.root_system.associahedron.Associahedra_polymake.Element"]], "element (sage.combinat.root_system.associahedron.associahedra_ppl attribute)": [[222, "sage.combinat.root_system.associahedron.Associahedra_ppl.Element"]], "cartan_type() (sage.combinat.root_system.associahedron.associahedron_class_base method)": [[222, "sage.combinat.root_system.associahedron.Associahedron_class_base.cartan_type"]], "sage.combinat.root_system.associahedron": [[222, "module-sage.combinat.root_system.associahedron"]], "vertices_in_root_space() (sage.combinat.root_system.associahedron.associahedron_class_base method)": [[222, "sage.combinat.root_system.associahedron.Associahedron_class_base.vertices_in_root_space"]], "braidmovecalculator (class in sage.combinat.root_system.braid_move_calculator)": [[223, "sage.combinat.root_system.braid_move_calculator.BraidMoveCalculator"]], "chain_of_reduced_words() (sage.combinat.root_system.braid_move_calculator.braidmovecalculator method)": [[223, "sage.combinat.root_system.braid_move_calculator.BraidMoveCalculator.chain_of_reduced_words"]], "put_in_front() (sage.combinat.root_system.braid_move_calculator.braidmovecalculator method)": [[223, "sage.combinat.root_system.braid_move_calculator.BraidMoveCalculator.put_in_front"]], "sage.combinat.root_system.braid_move_calculator": [[223, "module-sage.combinat.root_system.braid_move_calculator"]], "braidorbit() (in module sage.combinat.root_system.braid_orbit)": [[224, "sage.combinat.root_system.braid_orbit.BraidOrbit"]], "is_fully_commutative() (in module sage.combinat.root_system.braid_orbit)": [[224, "sage.combinat.root_system.braid_orbit.is_fully_commutative"]], "sage.combinat.root_system.braid_orbit": [[224, "module-sage.combinat.root_system.braid_orbit"]], "branchingrule (class in sage.combinat.root_system.branching_rules)": [[225, "sage.combinat.root_system.branching_rules.BranchingRule"]], "rtype() (sage.combinat.root_system.branching_rules.branchingrule method)": [[225, "sage.combinat.root_system.branching_rules.BranchingRule.Rtype"]], "stype() (sage.combinat.root_system.branching_rules.branchingrule method)": [[225, "sage.combinat.root_system.branching_rules.BranchingRule.Stype"]], "branch() (sage.combinat.root_system.branching_rules.branchingrule method)": [[225, "sage.combinat.root_system.branching_rules.BranchingRule.branch"]], "branch_weyl_character() (in module sage.combinat.root_system.branching_rules)": [[225, "sage.combinat.root_system.branching_rules.branch_weyl_character"]], "branching_rule() (in module sage.combinat.root_system.branching_rules)": [[225, "sage.combinat.root_system.branching_rules.branching_rule"]], "branching_rule_from_plethysm() (in module sage.combinat.root_system.branching_rules)": [[225, "sage.combinat.root_system.branching_rules.branching_rule_from_plethysm"]], "describe() (sage.combinat.root_system.branching_rules.branchingrule method)": [[225, "sage.combinat.root_system.branching_rules.BranchingRule.describe"]], "get_branching_rule() (in module sage.combinat.root_system.branching_rules)": [[225, "sage.combinat.root_system.branching_rules.get_branching_rule"]], "maximal_subgroups() (in module sage.combinat.root_system.branching_rules)": [[225, "sage.combinat.root_system.branching_rules.maximal_subgroups"]], "sage.combinat.root_system.branching_rules": [[225, "module-sage.combinat.root_system.branching_rules"]], "cartanmatrix (class in sage.combinat.root_system.cartan_matrix)": [[226, "sage.combinat.root_system.cartan_matrix.CartanMatrix"]], "cartan_matrix() (sage.combinat.root_system.cartan_matrix.cartanmatrix method)": [[226, "sage.combinat.root_system.cartan_matrix.CartanMatrix.cartan_matrix"]], "cartan_type() (sage.combinat.root_system.cartan_matrix.cartanmatrix method)": [[226, "sage.combinat.root_system.cartan_matrix.CartanMatrix.cartan_type"]], "column_with_indices() (sage.combinat.root_system.cartan_matrix.cartanmatrix method)": [[226, "sage.combinat.root_system.cartan_matrix.CartanMatrix.column_with_indices"]], "coxeter_diagram() (sage.combinat.root_system.cartan_matrix.cartanmatrix method)": [[226, "sage.combinat.root_system.cartan_matrix.CartanMatrix.coxeter_diagram"]], "coxeter_matrix() (sage.combinat.root_system.cartan_matrix.cartanmatrix method)": [[226, "sage.combinat.root_system.cartan_matrix.CartanMatrix.coxeter_matrix"]], "dual() (sage.combinat.root_system.cartan_matrix.cartanmatrix method)": [[226, "sage.combinat.root_system.cartan_matrix.CartanMatrix.dual"]], "dynkin_diagram() (sage.combinat.root_system.cartan_matrix.cartanmatrix method)": [[226, "sage.combinat.root_system.cartan_matrix.CartanMatrix.dynkin_diagram"]], "find_cartan_type_from_matrix() (in module sage.combinat.root_system.cartan_matrix)": [[226, "sage.combinat.root_system.cartan_matrix.find_cartan_type_from_matrix"]], "indecomposable_blocks() (sage.combinat.root_system.cartan_matrix.cartanmatrix method)": [[226, "sage.combinat.root_system.cartan_matrix.CartanMatrix.indecomposable_blocks"]], "index_set() (sage.combinat.root_system.cartan_matrix.cartanmatrix method)": [[226, "sage.combinat.root_system.cartan_matrix.CartanMatrix.index_set"]], "is_affine() (sage.combinat.root_system.cartan_matrix.cartanmatrix method)": [[226, "sage.combinat.root_system.cartan_matrix.CartanMatrix.is_affine"]], "is_borcherds_cartan_matrix() (in module sage.combinat.root_system.cartan_matrix)": [[226, "sage.combinat.root_system.cartan_matrix.is_borcherds_cartan_matrix"]], "is_crystallographic() (sage.combinat.root_system.cartan_matrix.cartanmatrix method)": [[226, "sage.combinat.root_system.cartan_matrix.CartanMatrix.is_crystallographic"]], "is_finite() (sage.combinat.root_system.cartan_matrix.cartanmatrix method)": [[226, "sage.combinat.root_system.cartan_matrix.CartanMatrix.is_finite"]], "is_generalized_cartan_matrix() (in module sage.combinat.root_system.cartan_matrix)": [[226, "sage.combinat.root_system.cartan_matrix.is_generalized_cartan_matrix"]], "is_hyperbolic() (sage.combinat.root_system.cartan_matrix.cartanmatrix method)": [[226, "sage.combinat.root_system.cartan_matrix.CartanMatrix.is_hyperbolic"]], "is_indecomposable() (sage.combinat.root_system.cartan_matrix.cartanmatrix method)": [[226, "sage.combinat.root_system.cartan_matrix.CartanMatrix.is_indecomposable"]], "is_indefinite() (sage.combinat.root_system.cartan_matrix.cartanmatrix method)": [[226, "sage.combinat.root_system.cartan_matrix.CartanMatrix.is_indefinite"]], "is_lorentzian() (sage.combinat.root_system.cartan_matrix.cartanmatrix method)": [[226, "sage.combinat.root_system.cartan_matrix.CartanMatrix.is_lorentzian"]], "is_simply_laced() (sage.combinat.root_system.cartan_matrix.cartanmatrix method)": [[226, "sage.combinat.root_system.cartan_matrix.CartanMatrix.is_simply_laced"]], "matrix_space() (sage.combinat.root_system.cartan_matrix.cartanmatrix method)": [[226, "sage.combinat.root_system.cartan_matrix.CartanMatrix.matrix_space"]], "principal_submatrices() (sage.combinat.root_system.cartan_matrix.cartanmatrix method)": [[226, "sage.combinat.root_system.cartan_matrix.CartanMatrix.principal_submatrices"]], "rank() (sage.combinat.root_system.cartan_matrix.cartanmatrix method)": [[226, "sage.combinat.root_system.cartan_matrix.CartanMatrix.rank"]], "reflection_group() (sage.combinat.root_system.cartan_matrix.cartanmatrix method)": [[226, "sage.combinat.root_system.cartan_matrix.CartanMatrix.reflection_group"]], "relabel() (sage.combinat.root_system.cartan_matrix.cartanmatrix method)": [[226, "sage.combinat.root_system.cartan_matrix.CartanMatrix.relabel"]], "root_space() (sage.combinat.root_system.cartan_matrix.cartanmatrix method)": [[226, "sage.combinat.root_system.cartan_matrix.CartanMatrix.root_space"]], "root_system() (sage.combinat.root_system.cartan_matrix.cartanmatrix method)": [[226, "sage.combinat.root_system.cartan_matrix.CartanMatrix.root_system"]], "row_with_indices() (sage.combinat.root_system.cartan_matrix.cartanmatrix method)": [[226, "sage.combinat.root_system.cartan_matrix.CartanMatrix.row_with_indices"]], "sage.combinat.root_system.cartan_matrix": [[226, "module-sage.combinat.root_system.cartan_matrix"]], "subtype() (sage.combinat.root_system.cartan_matrix.cartanmatrix method)": [[226, "sage.combinat.root_system.cartan_matrix.CartanMatrix.subtype"]], "symmetrized_matrix() (sage.combinat.root_system.cartan_matrix.cartanmatrix method)": [[226, "sage.combinat.root_system.cartan_matrix.CartanMatrix.symmetrized_matrix"]], "symmetrizer() (sage.combinat.root_system.cartan_matrix.cartanmatrix method)": [[226, "sage.combinat.root_system.cartan_matrix.CartanMatrix.symmetrizer"]], "ambientspace (sage.combinat.root_system.cartan_type.cartantype_affine attribute)": [[227, "sage.combinat.root_system.cartan_type.CartanType_affine.AmbientSpace"]], "cartantype() (in module sage.combinat.root_system.cartan_type)": [[227, "sage.combinat.root_system.cartan_type.CartanType"]], "cartantypefactory (class in sage.combinat.root_system.cartan_type)": [[227, "sage.combinat.root_system.cartan_type.CartanTypeFactory"]], "cartantype_abstract (class in sage.combinat.root_system.cartan_type)": [[227, "sage.combinat.root_system.cartan_type.CartanType_abstract"]], "cartantype_affine (class in sage.combinat.root_system.cartan_type)": [[227, "sage.combinat.root_system.cartan_type.CartanType_affine"]], "cartantype_crystallographic (class in sage.combinat.root_system.cartan_type)": [[227, "sage.combinat.root_system.cartan_type.CartanType_crystallographic"]], "cartantype_decorator (class in sage.combinat.root_system.cartan_type)": [[227, "sage.combinat.root_system.cartan_type.CartanType_decorator"]], "cartantype_finite (class in sage.combinat.root_system.cartan_type)": [[227, "sage.combinat.root_system.cartan_type.CartanType_finite"]], "cartantype_simple (class in sage.combinat.root_system.cartan_type)": [[227, "sage.combinat.root_system.cartan_type.CartanType_simple"]], "cartantype_simple_finite (class in sage.combinat.root_system.cartan_type)": [[227, "sage.combinat.root_system.cartan_type.CartanType_simple_finite"]], "cartantype_simply_laced (class in sage.combinat.root_system.cartan_type)": [[227, "sage.combinat.root_system.cartan_type.CartanType_simply_laced"]], "cartantype_standard (class in sage.combinat.root_system.cartan_type)": [[227, "sage.combinat.root_system.cartan_type.CartanType_standard"]], "cartantype_standard_affine (class in sage.combinat.root_system.cartan_type)": [[227, "sage.combinat.root_system.cartan_type.CartanType_standard_affine"]], "cartantype_standard_finite (class in sage.combinat.root_system.cartan_type)": [[227, "sage.combinat.root_system.cartan_type.CartanType_standard_finite"]], "cartantype_standard_untwisted_affine (class in sage.combinat.root_system.cartan_type)": [[227, "sage.combinat.root_system.cartan_type.CartanType_standard_untwisted_affine"]], "supercartantype_standard (class in sage.combinat.root_system.cartan_type)": [[227, "sage.combinat.root_system.cartan_type.SuperCartanType_standard"]], "a() (sage.combinat.root_system.cartan_type.cartantype_affine method)": [[227, "sage.combinat.root_system.cartan_type.CartanType_affine.a"]], "acheck() (sage.combinat.root_system.cartan_type.cartantype_affine method)": [[227, "sage.combinat.root_system.cartan_type.CartanType_affine.acheck"]], "affine() (sage.combinat.root_system.cartan_type.cartantype_standard_finite method)": [[227, "sage.combinat.root_system.cartan_type.CartanType_standard_finite.affine"]], "as_folding() (sage.combinat.root_system.cartan_type.cartantype_abstract method)": [[227, "sage.combinat.root_system.cartan_type.CartanType_abstract.as_folding"]], "ascii_art() (sage.combinat.root_system.cartan_type.cartantype_crystallographic method)": [[227, "sage.combinat.root_system.cartan_type.CartanType_crystallographic.ascii_art"]], "basic_untwisted() (sage.combinat.root_system.cartan_type.cartantype_affine method)": [[227, "sage.combinat.root_system.cartan_type.CartanType_affine.basic_untwisted"]], "basic_untwisted() (sage.combinat.root_system.cartan_type.cartantype_standard_untwisted_affine method)": [[227, "sage.combinat.root_system.cartan_type.CartanType_standard_untwisted_affine.basic_untwisted"]], "c() (sage.combinat.root_system.cartan_type.cartantype_affine method)": [[227, "sage.combinat.root_system.cartan_type.CartanType_affine.c"]], "cartan_matrix() (sage.combinat.root_system.cartan_type.cartantype_crystallographic method)": [[227, "sage.combinat.root_system.cartan_type.CartanType_crystallographic.cartan_matrix"]], "classical() (sage.combinat.root_system.cartan_type.cartantype_affine method)": [[227, "sage.combinat.root_system.cartan_type.CartanType_affine.classical"]], "classical() (sage.combinat.root_system.cartan_type.cartantype_standard_untwisted_affine method)": [[227, "sage.combinat.root_system.cartan_type.CartanType_standard_untwisted_affine.classical"]], "col_annihilator() (sage.combinat.root_system.cartan_type.cartantype_affine method)": [[227, "sage.combinat.root_system.cartan_type.CartanType_affine.col_annihilator"]], "color() (sage.combinat.root_system.cartan_type.cartantypefactory class method)": [[227, "sage.combinat.root_system.cartan_type.CartanTypeFactory.color"]], "coxeter_diagram() (sage.combinat.root_system.cartan_type.cartantype_abstract method)": [[227, "sage.combinat.root_system.cartan_type.CartanType_abstract.coxeter_diagram"]], "coxeter_diagram() (sage.combinat.root_system.cartan_type.cartantype_crystallographic method)": [[227, "sage.combinat.root_system.cartan_type.CartanType_crystallographic.coxeter_diagram"]], "coxeter_matrix() (sage.combinat.root_system.cartan_type.cartantype_abstract method)": [[227, "sage.combinat.root_system.cartan_type.CartanType_abstract.coxeter_matrix"]], "coxeter_number() (sage.combinat.root_system.cartan_type.cartantype_standard_finite method)": [[227, "sage.combinat.root_system.cartan_type.CartanType_standard_finite.coxeter_number"]], "coxeter_type() (sage.combinat.root_system.cartan_type.cartantype_abstract method)": [[227, "sage.combinat.root_system.cartan_type.CartanType_abstract.coxeter_type"]], "dual() (sage.combinat.root_system.cartan_type.cartantype_abstract method)": [[227, "sage.combinat.root_system.cartan_type.CartanType_abstract.dual"]], "dual() (sage.combinat.root_system.cartan_type.cartantype_simply_laced method)": [[227, "sage.combinat.root_system.cartan_type.CartanType_simply_laced.dual"]], "dual_coxeter_number() (sage.combinat.root_system.cartan_type.cartantype_standard_finite method)": [[227, "sage.combinat.root_system.cartan_type.CartanType_standard_finite.dual_coxeter_number"]], "dynkin_diagram() (sage.combinat.root_system.cartan_type.cartantype_crystallographic method)": [[227, "sage.combinat.root_system.cartan_type.CartanType_crystallographic.dynkin_diagram"]], "index_set() (sage.combinat.root_system.cartan_type.cartantype_abstract method)": [[227, "sage.combinat.root_system.cartan_type.CartanType_abstract.index_set"]], "index_set() (sage.combinat.root_system.cartan_type.cartantype_decorator method)": [[227, "sage.combinat.root_system.cartan_type.CartanType_decorator.index_set"]], "index_set() (sage.combinat.root_system.cartan_type.cartantype_standard_affine method)": [[227, "sage.combinat.root_system.cartan_type.CartanType_standard_affine.index_set"]], "index_set() (sage.combinat.root_system.cartan_type.cartantype_standard_finite method)": [[227, "sage.combinat.root_system.cartan_type.CartanType_standard_finite.index_set"]], "index_set_bipartition() (sage.combinat.root_system.cartan_type.cartantype_crystallographic method)": [[227, "sage.combinat.root_system.cartan_type.CartanType_crystallographic.index_set_bipartition"]], "is_affine() (sage.combinat.root_system.cartan_type.cartantype_abstract method)": [[227, "sage.combinat.root_system.cartan_type.CartanType_abstract.is_affine"]], "is_affine() (sage.combinat.root_system.cartan_type.cartantype_affine method)": [[227, "sage.combinat.root_system.cartan_type.CartanType_affine.is_affine"]], "is_affine() (sage.combinat.root_system.cartan_type.cartantype_decorator method)": [[227, "sage.combinat.root_system.cartan_type.CartanType_decorator.is_affine"]], "is_affine() (sage.combinat.root_system.cartan_type.cartantype_finite method)": [[227, "sage.combinat.root_system.cartan_type.CartanType_finite.is_affine"]], "is_atomic() (sage.combinat.root_system.cartan_type.cartantype_abstract method)": [[227, "sage.combinat.root_system.cartan_type.CartanType_abstract.is_atomic"]], "is_compound() (sage.combinat.root_system.cartan_type.cartantype_abstract method)": [[227, "sage.combinat.root_system.cartan_type.CartanType_abstract.is_compound"]], "is_crystallographic() (sage.combinat.root_system.cartan_type.cartantype_abstract method)": [[227, "sage.combinat.root_system.cartan_type.CartanType_abstract.is_crystallographic"]], "is_crystallographic() (sage.combinat.root_system.cartan_type.cartantype_crystallographic method)": [[227, "sage.combinat.root_system.cartan_type.CartanType_crystallographic.is_crystallographic"]], "is_crystallographic() (sage.combinat.root_system.cartan_type.cartantype_decorator method)": [[227, "sage.combinat.root_system.cartan_type.CartanType_decorator.is_crystallographic"]], "is_finite() (sage.combinat.root_system.cartan_type.cartantype_abstract method)": [[227, "sage.combinat.root_system.cartan_type.CartanType_abstract.is_finite"]], "is_finite() (sage.combinat.root_system.cartan_type.cartantype_affine method)": [[227, "sage.combinat.root_system.cartan_type.CartanType_affine.is_finite"]], "is_finite() (sage.combinat.root_system.cartan_type.cartantype_decorator method)": [[227, "sage.combinat.root_system.cartan_type.CartanType_decorator.is_finite"]], "is_finite() (sage.combinat.root_system.cartan_type.cartantype_finite method)": [[227, "sage.combinat.root_system.cartan_type.CartanType_finite.is_finite"]], "is_implemented() (sage.combinat.root_system.cartan_type.cartantype_abstract method)": [[227, "sage.combinat.root_system.cartan_type.CartanType_abstract.is_implemented"]], "is_irreducible() (sage.combinat.root_system.cartan_type.cartantype_abstract method)": [[227, "sage.combinat.root_system.cartan_type.CartanType_abstract.is_irreducible"]], "is_irreducible() (sage.combinat.root_system.cartan_type.cartantype_decorator method)": [[227, "sage.combinat.root_system.cartan_type.CartanType_decorator.is_irreducible"]], "is_irreducible() (sage.combinat.root_system.cartan_type.cartantype_simple method)": [[227, "sage.combinat.root_system.cartan_type.CartanType_simple.is_irreducible"]], "is_reducible() (sage.combinat.root_system.cartan_type.cartantype_abstract method)": [[227, "sage.combinat.root_system.cartan_type.CartanType_abstract.is_reducible"]], "is_simply_laced() (sage.combinat.root_system.cartan_type.cartantype_abstract method)": [[227, "sage.combinat.root_system.cartan_type.CartanType_abstract.is_simply_laced"]], "is_simply_laced() (sage.combinat.root_system.cartan_type.cartantype_simply_laced method)": [[227, "sage.combinat.root_system.cartan_type.CartanType_simply_laced.is_simply_laced"]], "is_untwisted_affine() (sage.combinat.root_system.cartan_type.cartantype_affine method)": [[227, "sage.combinat.root_system.cartan_type.CartanType_affine.is_untwisted_affine"]], "is_untwisted_affine() (sage.combinat.root_system.cartan_type.cartantype_standard_untwisted_affine method)": [[227, "sage.combinat.root_system.cartan_type.CartanType_standard_untwisted_affine.is_untwisted_affine"]], "marked_nodes() (sage.combinat.root_system.cartan_type.cartantype_abstract method)": [[227, "sage.combinat.root_system.cartan_type.CartanType_abstract.marked_nodes"]], "opposition_automorphism() (sage.combinat.root_system.cartan_type.cartantype_standard_finite method)": [[227, "sage.combinat.root_system.cartan_type.CartanType_standard_finite.opposition_automorphism"]], "options (sage.combinat.root_system.cartan_type.cartantypefactory attribute)": [[227, "sage.combinat.root_system.cartan_type.CartanTypeFactory.options"]], "options (sage.combinat.root_system.cartan_type.cartantype_abstract attribute)": [[227, "sage.combinat.root_system.cartan_type.CartanType_abstract.options"]], "options (sage.combinat.root_system.cartan_type.supercartantype_standard attribute)": [[227, "sage.combinat.root_system.cartan_type.SuperCartanType_standard.options"]], "other_affinization() (sage.combinat.root_system.cartan_type.cartantype_affine method)": [[227, "sage.combinat.root_system.cartan_type.CartanType_affine.other_affinization"]], "rank() (sage.combinat.root_system.cartan_type.cartantype_abstract method)": [[227, "sage.combinat.root_system.cartan_type.CartanType_abstract.rank"]], "rank() (sage.combinat.root_system.cartan_type.cartantype_decorator method)": [[227, "sage.combinat.root_system.cartan_type.CartanType_decorator.rank"]], "rank() (sage.combinat.root_system.cartan_type.cartantype_standard_affine method)": [[227, "sage.combinat.root_system.cartan_type.CartanType_standard_affine.rank"]], "rank() (sage.combinat.root_system.cartan_type.cartantype_standard_finite method)": [[227, "sage.combinat.root_system.cartan_type.CartanType_standard_finite.rank"]], "relabel() (sage.combinat.root_system.cartan_type.cartantype_abstract method)": [[227, "sage.combinat.root_system.cartan_type.CartanType_abstract.relabel"]], "root_system() (sage.combinat.root_system.cartan_type.cartantype_abstract method)": [[227, "sage.combinat.root_system.cartan_type.CartanType_abstract.root_system"]], "row_annihilator() (sage.combinat.root_system.cartan_type.cartantype_affine method)": [[227, "sage.combinat.root_system.cartan_type.CartanType_affine.row_annihilator"]], "sage.combinat.root_system.cartan_type": [[227, "module-sage.combinat.root_system.cartan_type"]], "samples() (sage.combinat.root_system.cartan_type.cartantypefactory method)": [[227, "sage.combinat.root_system.cartan_type.CartanTypeFactory.samples"]], "special_node() (sage.combinat.root_system.cartan_type.cartantype_affine method)": [[227, "sage.combinat.root_system.cartan_type.CartanType_affine.special_node"]], "special_node() (sage.combinat.root_system.cartan_type.cartantype_standard_affine method)": [[227, "sage.combinat.root_system.cartan_type.CartanType_standard_affine.special_node"]], "special_nodes() (sage.combinat.root_system.cartan_type.cartantype_affine method)": [[227, "sage.combinat.root_system.cartan_type.CartanType_affine.special_nodes"]], "subtype() (sage.combinat.root_system.cartan_type.cartantype_abstract method)": [[227, "sage.combinat.root_system.cartan_type.CartanType_abstract.subtype"]], "symmetrizer() (sage.combinat.root_system.cartan_type.cartantype_crystallographic method)": [[227, "sage.combinat.root_system.cartan_type.CartanType_crystallographic.symmetrizer"]], "translation_factors() (sage.combinat.root_system.cartan_type.cartantype_affine method)": [[227, "sage.combinat.root_system.cartan_type.CartanType_affine.translation_factors"]], "type() (sage.combinat.root_system.cartan_type.cartantype_abstract method)": [[227, "sage.combinat.root_system.cartan_type.CartanType_abstract.type"]], "type() (sage.combinat.root_system.cartan_type.cartantype_standard_affine method)": [[227, "sage.combinat.root_system.cartan_type.CartanType_standard_affine.type"]], "type() (sage.combinat.root_system.cartan_type.cartantype_standard_finite method)": [[227, "sage.combinat.root_system.cartan_type.CartanType_standard_finite.type"]], "coxetergroup() (in module sage.combinat.root_system.coxeter_group)": [[228, "sage.combinat.root_system.coxeter_group.CoxeterGroup"]], "sage.combinat.root_system.coxeter_group": [[228, "module-sage.combinat.root_system.coxeter_group"]], "coxetermatrix (class in sage.combinat.root_system.coxeter_matrix)": [[229, "sage.combinat.root_system.coxeter_matrix.CoxeterMatrix"]], "bilinear_form() (sage.combinat.root_system.coxeter_matrix.coxetermatrix method)": [[229, "sage.combinat.root_system.coxeter_matrix.CoxeterMatrix.bilinear_form"]], "check_coxeter_matrix() (in module sage.combinat.root_system.coxeter_matrix)": [[229, "sage.combinat.root_system.coxeter_matrix.check_coxeter_matrix"]], "coxeter_graph() (sage.combinat.root_system.coxeter_matrix.coxetermatrix method)": [[229, "sage.combinat.root_system.coxeter_matrix.CoxeterMatrix.coxeter_graph"]], "coxeter_matrix() (sage.combinat.root_system.coxeter_matrix.coxetermatrix method)": [[229, "sage.combinat.root_system.coxeter_matrix.CoxeterMatrix.coxeter_matrix"]], "coxeter_matrix_as_function() (in module sage.combinat.root_system.coxeter_matrix)": [[229, "sage.combinat.root_system.coxeter_matrix.coxeter_matrix_as_function"]], "coxeter_type() (sage.combinat.root_system.coxeter_matrix.coxetermatrix method)": [[229, "sage.combinat.root_system.coxeter_matrix.CoxeterMatrix.coxeter_type"]], "index_set() (sage.combinat.root_system.coxeter_matrix.coxetermatrix method)": [[229, "sage.combinat.root_system.coxeter_matrix.CoxeterMatrix.index_set"]], "is_affine() (sage.combinat.root_system.coxeter_matrix.coxetermatrix method)": [[229, "sage.combinat.root_system.coxeter_matrix.CoxeterMatrix.is_affine"]], "is_crystallographic() (sage.combinat.root_system.coxeter_matrix.coxetermatrix method)": [[229, "sage.combinat.root_system.coxeter_matrix.CoxeterMatrix.is_crystallographic"]], "is_finite() (sage.combinat.root_system.coxeter_matrix.coxetermatrix method)": [[229, "sage.combinat.root_system.coxeter_matrix.CoxeterMatrix.is_finite"]], "is_irreducible() (sage.combinat.root_system.coxeter_matrix.coxetermatrix method)": [[229, "sage.combinat.root_system.coxeter_matrix.CoxeterMatrix.is_irreducible"]], "is_simply_laced() (sage.combinat.root_system.coxeter_matrix.coxetermatrix method)": [[229, "sage.combinat.root_system.coxeter_matrix.CoxeterMatrix.is_simply_laced"]], "rank() (sage.combinat.root_system.coxeter_matrix.coxetermatrix method)": [[229, "sage.combinat.root_system.coxeter_matrix.CoxeterMatrix.rank"]], "recognize_coxeter_type_from_matrix() (in module sage.combinat.root_system.coxeter_matrix)": [[229, "sage.combinat.root_system.coxeter_matrix.recognize_coxeter_type_from_matrix"]], "relabel() (sage.combinat.root_system.coxeter_matrix.coxetermatrix method)": [[229, "sage.combinat.root_system.coxeter_matrix.CoxeterMatrix.relabel"]], "sage.combinat.root_system.coxeter_matrix": [[229, "module-sage.combinat.root_system.coxeter_matrix"]], "samples() (sage.combinat.root_system.coxeter_matrix.coxetermatrix class method)": [[229, "sage.combinat.root_system.coxeter_matrix.CoxeterMatrix.samples"]], "coxetertype (class in sage.combinat.root_system.coxeter_type)": [[230, "sage.combinat.root_system.coxeter_type.CoxeterType"]], "coxetertypefromcartantype (class in sage.combinat.root_system.coxeter_type)": [[230, "sage.combinat.root_system.coxeter_type.CoxeterTypeFromCartanType"]], "bilinear_form() (sage.combinat.root_system.coxeter_type.coxetertype method)": [[230, "sage.combinat.root_system.coxeter_type.CoxeterType.bilinear_form"]], "cartan_type() (sage.combinat.root_system.coxeter_type.coxetertypefromcartantype method)": [[230, "sage.combinat.root_system.coxeter_type.CoxeterTypeFromCartanType.cartan_type"]], "component_types() (sage.combinat.root_system.coxeter_type.coxetertypefromcartantype method)": [[230, "sage.combinat.root_system.coxeter_type.CoxeterTypeFromCartanType.component_types"]], "coxeter_graph() (sage.combinat.root_system.coxeter_type.coxetertype method)": [[230, "sage.combinat.root_system.coxeter_type.CoxeterType.coxeter_graph"]], "coxeter_graph() (sage.combinat.root_system.coxeter_type.coxetertypefromcartantype method)": [[230, "sage.combinat.root_system.coxeter_type.CoxeterTypeFromCartanType.coxeter_graph"]], "coxeter_matrix() (sage.combinat.root_system.coxeter_type.coxetertype method)": [[230, "sage.combinat.root_system.coxeter_type.CoxeterType.coxeter_matrix"]], "coxeter_matrix() (sage.combinat.root_system.coxeter_type.coxetertypefromcartantype method)": [[230, "sage.combinat.root_system.coxeter_type.CoxeterTypeFromCartanType.coxeter_matrix"]], "index_set() (sage.combinat.root_system.coxeter_type.coxetertype method)": [[230, "sage.combinat.root_system.coxeter_type.CoxeterType.index_set"]], "index_set() (sage.combinat.root_system.coxeter_type.coxetertypefromcartantype method)": [[230, "sage.combinat.root_system.coxeter_type.CoxeterTypeFromCartanType.index_set"]], "is_affine() (sage.combinat.root_system.coxeter_type.coxetertype method)": [[230, "sage.combinat.root_system.coxeter_type.CoxeterType.is_affine"]], "is_affine() (sage.combinat.root_system.coxeter_type.coxetertypefromcartantype method)": [[230, "sage.combinat.root_system.coxeter_type.CoxeterTypeFromCartanType.is_affine"]], "is_crystallographic() (sage.combinat.root_system.coxeter_type.coxetertype method)": [[230, "sage.combinat.root_system.coxeter_type.CoxeterType.is_crystallographic"]], "is_crystallographic() (sage.combinat.root_system.coxeter_type.coxetertypefromcartantype method)": [[230, "sage.combinat.root_system.coxeter_type.CoxeterTypeFromCartanType.is_crystallographic"]], "is_finite() (sage.combinat.root_system.coxeter_type.coxetertype method)": [[230, "sage.combinat.root_system.coxeter_type.CoxeterType.is_finite"]], "is_finite() (sage.combinat.root_system.coxeter_type.coxetertypefromcartantype method)": [[230, "sage.combinat.root_system.coxeter_type.CoxeterTypeFromCartanType.is_finite"]], "is_irreducible() (sage.combinat.root_system.coxeter_type.coxetertypefromcartantype method)": [[230, "sage.combinat.root_system.coxeter_type.CoxeterTypeFromCartanType.is_irreducible"]], "is_reducible() (sage.combinat.root_system.coxeter_type.coxetertypefromcartantype method)": [[230, "sage.combinat.root_system.coxeter_type.CoxeterTypeFromCartanType.is_reducible"]], "is_simply_laced() (sage.combinat.root_system.coxeter_type.coxetertype method)": [[230, "sage.combinat.root_system.coxeter_type.CoxeterType.is_simply_laced"]], "is_simply_laced() (sage.combinat.root_system.coxeter_type.coxetertypefromcartantype method)": [[230, "sage.combinat.root_system.coxeter_type.CoxeterTypeFromCartanType.is_simply_laced"]], "rank() (sage.combinat.root_system.coxeter_type.coxetertype method)": [[230, "sage.combinat.root_system.coxeter_type.CoxeterType.rank"]], "rank() (sage.combinat.root_system.coxeter_type.coxetertypefromcartantype method)": [[230, "sage.combinat.root_system.coxeter_type.CoxeterTypeFromCartanType.rank"]], "relabel() (sage.combinat.root_system.coxeter_type.coxetertypefromcartantype method)": [[230, "sage.combinat.root_system.coxeter_type.CoxeterTypeFromCartanType.relabel"]], "sage.combinat.root_system.coxeter_type": [[230, "module-sage.combinat.root_system.coxeter_type"]], "samples() (sage.combinat.root_system.coxeter_type.coxetertype class method)": [[230, "sage.combinat.root_system.coxeter_type.CoxeterType.samples"]], "type() (sage.combinat.root_system.coxeter_type.coxetertypefromcartantype method)": [[230, "sage.combinat.root_system.coxeter_type.CoxeterTypeFromCartanType.type"]], "dynkindiagram() (in module sage.combinat.root_system.dynkin_diagram)": [[231, "sage.combinat.root_system.dynkin_diagram.DynkinDiagram"]], "dynkindiagram_class (class in sage.combinat.root_system.dynkin_diagram)": [[231, "sage.combinat.root_system.dynkin_diagram.DynkinDiagram_class"]], "add_edge() (sage.combinat.root_system.dynkin_diagram.dynkindiagram_class method)": [[231, "sage.combinat.root_system.dynkin_diagram.DynkinDiagram_class.add_edge"]], "an_instance() (sage.combinat.root_system.dynkin_diagram.dynkindiagram_class static method)": [[231, "sage.combinat.root_system.dynkin_diagram.DynkinDiagram_class.an_instance"]], "cartan_matrix() (sage.combinat.root_system.dynkin_diagram.dynkindiagram_class method)": [[231, "sage.combinat.root_system.dynkin_diagram.DynkinDiagram_class.cartan_matrix"]], "cartan_type() (sage.combinat.root_system.dynkin_diagram.dynkindiagram_class method)": [[231, "sage.combinat.root_system.dynkin_diagram.DynkinDiagram_class.cartan_type"]], "column() (sage.combinat.root_system.dynkin_diagram.dynkindiagram_class method)": [[231, "sage.combinat.root_system.dynkin_diagram.DynkinDiagram_class.column"]], "coxeter_diagram() (sage.combinat.root_system.dynkin_diagram.dynkindiagram_class method)": [[231, "sage.combinat.root_system.dynkin_diagram.DynkinDiagram_class.coxeter_diagram"]], "dual() (sage.combinat.root_system.dynkin_diagram.dynkindiagram_class method)": [[231, "sage.combinat.root_system.dynkin_diagram.DynkinDiagram_class.dual"]], "dynkin_diagram() (sage.combinat.root_system.dynkin_diagram.dynkindiagram_class method)": [[231, "sage.combinat.root_system.dynkin_diagram.DynkinDiagram_class.dynkin_diagram"]], "index_set() (sage.combinat.root_system.dynkin_diagram.dynkindiagram_class method)": [[231, "sage.combinat.root_system.dynkin_diagram.DynkinDiagram_class.index_set"]], "is_affine() (sage.combinat.root_system.dynkin_diagram.dynkindiagram_class method)": [[231, "sage.combinat.root_system.dynkin_diagram.DynkinDiagram_class.is_affine"]], "is_crystallographic() (sage.combinat.root_system.dynkin_diagram.dynkindiagram_class method)": [[231, "sage.combinat.root_system.dynkin_diagram.DynkinDiagram_class.is_crystallographic"]], "is_finite() (sage.combinat.root_system.dynkin_diagram.dynkindiagram_class method)": [[231, "sage.combinat.root_system.dynkin_diagram.DynkinDiagram_class.is_finite"]], "is_irreducible() (sage.combinat.root_system.dynkin_diagram.dynkindiagram_class method)": [[231, "sage.combinat.root_system.dynkin_diagram.DynkinDiagram_class.is_irreducible"]], "odd_isotropic_roots() (sage.combinat.root_system.dynkin_diagram.dynkindiagram_class method)": [[231, "sage.combinat.root_system.dynkin_diagram.DynkinDiagram_class.odd_isotropic_roots"]], "precheck() (in module sage.combinat.root_system.dynkin_diagram)": [[231, "sage.combinat.root_system.dynkin_diagram.precheck"]], "rank() (sage.combinat.root_system.dynkin_diagram.dynkindiagram_class method)": [[231, "sage.combinat.root_system.dynkin_diagram.DynkinDiagram_class.rank"]], "relabel() (sage.combinat.root_system.dynkin_diagram.dynkindiagram_class method)": [[231, "sage.combinat.root_system.dynkin_diagram.DynkinDiagram_class.relabel"]], "row() (sage.combinat.root_system.dynkin_diagram.dynkindiagram_class method)": [[231, "sage.combinat.root_system.dynkin_diagram.DynkinDiagram_class.row"]], "sage.combinat.root_system.dynkin_diagram": [[231, "module-sage.combinat.root_system.dynkin_diagram"]], "subtype() (sage.combinat.root_system.dynkin_diagram.dynkindiagram_class method)": [[231, "sage.combinat.root_system.dynkin_diagram.DynkinDiagram_class.subtype"]], "symmetrizer() (sage.combinat.root_system.dynkin_diagram.dynkindiagram_class method)": [[231, "sage.combinat.root_system.dynkin_diagram.DynkinDiagram_class.symmetrizer"]], "element (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class.extendedaffineweylgroupfw attribute)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.ExtendedAffineWeylGroupFW.Element"]], "element (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class.extendedaffineweylgrouppw0 attribute)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.ExtendedAffineWeylGroupPW0.Element"]], "element (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class.extendedaffineweylgrouppvw0 attribute)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.ExtendedAffineWeylGroupPvW0.Element"]], "element (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class.extendedaffineweylgroupw0p attribute)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.ExtendedAffineWeylGroupW0P.Element"]], "element (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class.extendedaffineweylgroupw0pv attribute)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.ExtendedAffineWeylGroupW0Pv.Element"]], "element (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class.extendedaffineweylgroupwf attribute)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.ExtendedAffineWeylGroupWF.Element"]], "extendedaffineweylgroup() (in module sage.combinat.root_system.extended_affine_weyl_group)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup"]], "extendedaffineweylgroup_class (class in sage.combinat.root_system.extended_affine_weyl_group)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class"]], "extendedaffineweylgroup_class.extendedaffineweylgroupfw (class in sage.combinat.root_system.extended_affine_weyl_group)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.ExtendedAffineWeylGroupFW"]], "extendedaffineweylgroup_class.extendedaffineweylgroupfwelement (class in sage.combinat.root_system.extended_affine_weyl_group)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.ExtendedAffineWeylGroupFWElement"]], "extendedaffineweylgroup_class.extendedaffineweylgrouppw0 (class in sage.combinat.root_system.extended_affine_weyl_group)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.ExtendedAffineWeylGroupPW0"]], "extendedaffineweylgroup_class.extendedaffineweylgrouppw0element (class in sage.combinat.root_system.extended_affine_weyl_group)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.ExtendedAffineWeylGroupPW0Element"]], "extendedaffineweylgroup_class.extendedaffineweylgrouppvw0 (class in sage.combinat.root_system.extended_affine_weyl_group)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.ExtendedAffineWeylGroupPvW0"]], "extendedaffineweylgroup_class.extendedaffineweylgrouppvw0element (class in sage.combinat.root_system.extended_affine_weyl_group)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.ExtendedAffineWeylGroupPvW0Element"]], "extendedaffineweylgroup_class.extendedaffineweylgroupw0p (class in sage.combinat.root_system.extended_affine_weyl_group)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.ExtendedAffineWeylGroupW0P"]], "extendedaffineweylgroup_class.extendedaffineweylgroupw0pelement (class in sage.combinat.root_system.extended_affine_weyl_group)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.ExtendedAffineWeylGroupW0PElement"]], "extendedaffineweylgroup_class.extendedaffineweylgroupw0pv (class in sage.combinat.root_system.extended_affine_weyl_group)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.ExtendedAffineWeylGroupW0Pv"]], "extendedaffineweylgroup_class.extendedaffineweylgroupw0pvelement (class in sage.combinat.root_system.extended_affine_weyl_group)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.ExtendedAffineWeylGroupW0PvElement"]], "extendedaffineweylgroup_class.extendedaffineweylgroupwf (class in sage.combinat.root_system.extended_affine_weyl_group)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.ExtendedAffineWeylGroupWF"]], "extendedaffineweylgroup_class.extendedaffineweylgroupwfelement (class in sage.combinat.root_system.extended_affine_weyl_group)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.ExtendedAffineWeylGroupWFElement"]], "extendedaffineweylgroup_class.realizations (class in sage.combinat.root_system.extended_affine_weyl_group)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.Realizations"]], "extendedaffineweylgroup_class.realizations.elementmethods (class in sage.combinat.root_system.extended_affine_weyl_group)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.Realizations.ElementMethods"]], "extendedaffineweylgroup_class.realizations.parentmethods (class in sage.combinat.root_system.extended_affine_weyl_group)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.Realizations.ParentMethods"]], "fw() (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class method)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.FW"]], "pw0() (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class method)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.PW0"]], "pw0_to_wf_func() (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class method)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.PW0_to_WF_func"]], "pvw0() (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class method)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.PvW0"]], "s0() (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class.extendedaffineweylgrouppw0 method)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.ExtendedAffineWeylGroupPW0.S0"]], "s0() (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class.extendedaffineweylgroupw0p method)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.ExtendedAffineWeylGroupW0P.S0"]], "w0p() (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class method)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.W0P"]], "w0pv() (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class method)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.W0Pv"]], "wf() (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class method)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.WF"]], "wf_to_pw0_func() (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class method)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.WF_to_PW0_func"]], "a_realization() (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class method)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.a_realization"]], "action() (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class.extendedaffineweylgrouppw0element method)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.ExtendedAffineWeylGroupPW0Element.action"]], "action() (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class.realizations.elementmethods method)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.Realizations.ElementMethods.action"]], "action_on_affine_roots() (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class.extendedaffineweylgroupfwelement method)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.ExtendedAffineWeylGroupFWElement.action_on_affine_roots"]], "action_on_affine_roots() (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class.realizations.elementmethods method)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.Realizations.ElementMethods.action_on_affine_roots"]], "affine_weyl() (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class method)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.affine_weyl"]], "alcove_walk_signs() (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class.realizations.elementmethods method)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.Realizations.ElementMethods.alcove_walk_signs"]], "apply_simple_projection() (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class.realizations.elementmethods method)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.Realizations.ElementMethods.apply_simple_projection"]], "apply_simple_reflection() (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class.realizations.elementmethods method)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.Realizations.ElementMethods.apply_simple_reflection"]], "bruhat_le() (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class.extendedaffineweylgroupwfelement method)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.ExtendedAffineWeylGroupWFElement.bruhat_le"]], "bruhat_le() (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class.realizations.elementmethods method)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.Realizations.ElementMethods.bruhat_le"]], "cartan_type() (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class method)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.cartan_type"]], "classical_weyl() (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class method)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.classical_weyl"]], "classical_weyl_to_affine() (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class method)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.classical_weyl_to_affine"]], "coset_representative() (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class.realizations.elementmethods method)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.Realizations.ElementMethods.coset_representative"]], "dual_action() (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class.extendedaffineweylgrouppvw0element method)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.ExtendedAffineWeylGroupPvW0Element.dual_action"]], "dual_action() (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class.extendedaffineweylgroupw0pvelement method)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.ExtendedAffineWeylGroupW0PvElement.dual_action"]], "dual_action() (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class.realizations.elementmethods method)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.Realizations.ElementMethods.dual_action"]], "dual_classical_weyl() (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class method)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.dual_classical_weyl"]], "dual_classical_weyl_to_affine() (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class method)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.dual_classical_weyl_to_affine"]], "dual_lattice() (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class method)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.dual_lattice"]], "dual_lattice_basis() (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class method)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.dual_lattice_basis"]], "exp_dual_lattice() (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class method)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.exp_dual_lattice"]], "exp_lattice() (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class method)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.exp_lattice"]], "face_data() (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class.realizations.elementmethods method)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.Realizations.ElementMethods.face_data"]], "first_descent() (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class.realizations.elementmethods method)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.Realizations.ElementMethods.first_descent"]], "from_affine_weyl() (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class.extendedaffineweylgroupfw method)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.ExtendedAffineWeylGroupFW.from_affine_weyl"]], "from_affine_weyl() (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class.extendedaffineweylgroupwf method)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.ExtendedAffineWeylGroupWF.from_affine_weyl"]], "from_affine_weyl() (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class.realizations.parentmethods method)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.Realizations.ParentMethods.from_affine_weyl"]], "from_classical_weyl() (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class.extendedaffineweylgrouppw0 method)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.ExtendedAffineWeylGroupPW0.from_classical_weyl"]], "from_classical_weyl() (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class.extendedaffineweylgroupw0p method)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.ExtendedAffineWeylGroupW0P.from_classical_weyl"]], "from_classical_weyl() (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class.realizations.parentmethods method)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.Realizations.ParentMethods.from_classical_weyl"]], "from_dual_classical_weyl() (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class.extendedaffineweylgrouppvw0 method)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.ExtendedAffineWeylGroupPvW0.from_dual_classical_weyl"]], "from_dual_classical_weyl() (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class.extendedaffineweylgroupw0pv method)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.ExtendedAffineWeylGroupW0Pv.from_dual_classical_weyl"]], "from_dual_classical_weyl() (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class.realizations.parentmethods method)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.Realizations.ParentMethods.from_dual_classical_weyl"]], "from_dual_translation() (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class.extendedaffineweylgrouppvw0 method)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.ExtendedAffineWeylGroupPvW0.from_dual_translation"]], "from_dual_translation() (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class.extendedaffineweylgroupw0pv method)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.ExtendedAffineWeylGroupW0Pv.from_dual_translation"]], "from_dual_translation() (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class.realizations.parentmethods method)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.Realizations.ParentMethods.from_dual_translation"]], "from_fundamental() (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class.extendedaffineweylgroupfw method)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.ExtendedAffineWeylGroupFW.from_fundamental"]], "from_fundamental() (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class.extendedaffineweylgroupwf method)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.ExtendedAffineWeylGroupWF.from_fundamental"]], "from_fundamental() (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class.realizations.parentmethods method)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.Realizations.ParentMethods.from_fundamental"]], "from_reduced_word() (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class.realizations.parentmethods method)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.Realizations.ParentMethods.from_reduced_word"]], "from_translation() (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class.extendedaffineweylgrouppw0 method)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.ExtendedAffineWeylGroupPW0.from_translation"]], "from_translation() (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class.extendedaffineweylgroupw0p method)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.ExtendedAffineWeylGroupW0P.from_translation"]], "from_translation() (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class.realizations.parentmethods method)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.Realizations.ParentMethods.from_translation"]], "fundamental_group() (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class method)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.fundamental_group"]], "group_generators() (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class method)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.group_generators"]], "has_descent() (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class.extendedaffineweylgroupfwelement method)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.ExtendedAffineWeylGroupFWElement.has_descent"]], "has_descent() (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class.extendedaffineweylgrouppw0element method)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.ExtendedAffineWeylGroupPW0Element.has_descent"]], "has_descent() (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class.extendedaffineweylgrouppvw0element method)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.ExtendedAffineWeylGroupPvW0Element.has_descent"]], "has_descent() (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class.extendedaffineweylgroupw0pelement method)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.ExtendedAffineWeylGroupW0PElement.has_descent"]], "has_descent() (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class.extendedaffineweylgroupw0pvelement method)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.ExtendedAffineWeylGroupW0PvElement.has_descent"]], "has_descent() (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class.extendedaffineweylgroupwfelement method)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.ExtendedAffineWeylGroupWFElement.has_descent"]], "has_descent() (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class.realizations.elementmethods method)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.Realizations.ElementMethods.has_descent"]], "is_affine_grassmannian() (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class.realizations.elementmethods method)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.Realizations.ElementMethods.is_affine_grassmannian"]], "is_grassmannian() (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class.realizations.elementmethods method)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.Realizations.ElementMethods.is_grassmannian"]], "is_translation() (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class.realizations.elementmethods method)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.Realizations.ElementMethods.is_translation"]], "lattice() (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class method)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.lattice"]], "lattice_basis() (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class method)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.lattice_basis"]], "length() (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class.realizations.elementmethods method)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.Realizations.ElementMethods.length"]], "sage.combinat.root_system.extended_affine_weyl_group": [[232, "module-sage.combinat.root_system.extended_affine_weyl_group"]], "simple_reflection() (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class.extendedaffineweylgrouppw0 method)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.ExtendedAffineWeylGroupPW0.simple_reflection"]], "simple_reflection() (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class.extendedaffineweylgroupw0p method)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.ExtendedAffineWeylGroupW0P.simple_reflection"]], "simple_reflection() (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class.realizations.parentmethods method)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.Realizations.ParentMethods.simple_reflection"]], "simple_reflections() (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class.extendedaffineweylgroupfw method)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.ExtendedAffineWeylGroupFW.simple_reflections"]], "simple_reflections() (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class.extendedaffineweylgrouppw0 method)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.ExtendedAffineWeylGroupPW0.simple_reflections"]], "simple_reflections() (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class.extendedaffineweylgrouppvw0 method)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.ExtendedAffineWeylGroupPvW0.simple_reflections"]], "simple_reflections() (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class.extendedaffineweylgroupw0p method)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.ExtendedAffineWeylGroupW0P.simple_reflections"]], "simple_reflections() (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class.extendedaffineweylgroupw0pv method)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.ExtendedAffineWeylGroupW0Pv.simple_reflections"]], "simple_reflections() (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class.extendedaffineweylgroupwf method)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.ExtendedAffineWeylGroupWF.simple_reflections"]], "simple_reflections() (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class.realizations.parentmethods method)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.Realizations.ParentMethods.simple_reflections"]], "super_categories() (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class.realizations method)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.Realizations.super_categories"]], "to_affine_grassmannian() (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class.realizations.elementmethods method)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.Realizations.ElementMethods.to_affine_grassmannian"]], "to_affine_weyl_left() (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class.extendedaffineweylgroupwfelement method)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.ExtendedAffineWeylGroupWFElement.to_affine_weyl_left"]], "to_affine_weyl_left() (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class.realizations.elementmethods method)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.Realizations.ElementMethods.to_affine_weyl_left"]], "to_affine_weyl_right() (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class.extendedaffineweylgroupfwelement method)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.ExtendedAffineWeylGroupFWElement.to_affine_weyl_right"]], "to_affine_weyl_right() (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class.realizations.elementmethods method)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.Realizations.ElementMethods.to_affine_weyl_right"]], "to_classical_weyl() (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class.extendedaffineweylgrouppw0element method)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.ExtendedAffineWeylGroupPW0Element.to_classical_weyl"]], "to_classical_weyl() (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class.extendedaffineweylgroupw0pelement method)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.ExtendedAffineWeylGroupW0PElement.to_classical_weyl"]], "to_classical_weyl() (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class.realizations.elementmethods method)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.Realizations.ElementMethods.to_classical_weyl"]], "to_dual_classical_weyl() (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class.extendedaffineweylgrouppvw0element method)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.ExtendedAffineWeylGroupPvW0Element.to_dual_classical_weyl"]], "to_dual_classical_weyl() (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class.extendedaffineweylgroupw0pvelement method)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.ExtendedAffineWeylGroupW0PvElement.to_dual_classical_weyl"]], "to_dual_classical_weyl() (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class.realizations.elementmethods method)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.Realizations.ElementMethods.to_dual_classical_weyl"]], "to_dual_translation_left() (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class.extendedaffineweylgrouppvw0element method)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.ExtendedAffineWeylGroupPvW0Element.to_dual_translation_left"]], "to_dual_translation_left() (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class.realizations.elementmethods method)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.Realizations.ElementMethods.to_dual_translation_left"]], "to_dual_translation_right() (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class.extendedaffineweylgroupw0pvelement method)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.ExtendedAffineWeylGroupW0PvElement.to_dual_translation_right"]], "to_dual_translation_right() (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class.realizations.elementmethods method)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.Realizations.ElementMethods.to_dual_translation_right"]], "to_fundamental_group() (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class.extendedaffineweylgroupfwelement method)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.ExtendedAffineWeylGroupFWElement.to_fundamental_group"]], "to_fundamental_group() (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class.extendedaffineweylgroupwfelement method)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.ExtendedAffineWeylGroupWFElement.to_fundamental_group"]], "to_fundamental_group() (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class.realizations.elementmethods method)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.Realizations.ElementMethods.to_fundamental_group"]], "to_translation_left() (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class.extendedaffineweylgrouppw0element method)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.ExtendedAffineWeylGroupPW0Element.to_translation_left"]], "to_translation_left() (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class.realizations.elementmethods method)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.Realizations.ElementMethods.to_translation_left"]], "to_translation_right() (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class.extendedaffineweylgroupw0pelement method)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.ExtendedAffineWeylGroupW0PElement.to_translation_right"]], "to_translation_right() (sage.combinat.root_system.extended_affine_weyl_group.extendedaffineweylgroup_class.realizations.elementmethods method)": [[232, "sage.combinat.root_system.extended_affine_weyl_group.ExtendedAffineWeylGroup_Class.Realizations.ElementMethods.to_translation_right"]], "element (sage.combinat.root_system.fundamental_group.fundamentalgroupgl attribute)": [[233, "sage.combinat.root_system.fundamental_group.FundamentalGroupGL.Element"]], "element (sage.combinat.root_system.fundamental_group.fundamentalgroupofextendedaffineweylgroup_class attribute)": [[233, "sage.combinat.root_system.fundamental_group.FundamentalGroupOfExtendedAffineWeylGroup_Class.Element"]], "fundamentalgroupelement (class in sage.combinat.root_system.fundamental_group)": [[233, "sage.combinat.root_system.fundamental_group.FundamentalGroupElement"]], "fundamentalgroupgl (class in sage.combinat.root_system.fundamental_group)": [[233, "sage.combinat.root_system.fundamental_group.FundamentalGroupGL"]], "fundamentalgroupglelement (class in sage.combinat.root_system.fundamental_group)": [[233, "sage.combinat.root_system.fundamental_group.FundamentalGroupGLElement"]], "fundamentalgroupofextendedaffineweylgroup() (in module sage.combinat.root_system.fundamental_group)": [[233, "sage.combinat.root_system.fundamental_group.FundamentalGroupOfExtendedAffineWeylGroup"]], "fundamentalgroupofextendedaffineweylgroup_class (class in sage.combinat.root_system.fundamental_group)": [[233, "sage.combinat.root_system.fundamental_group.FundamentalGroupOfExtendedAffineWeylGroup_Class"]], "act_on_affine_lattice() (sage.combinat.root_system.fundamental_group.fundamentalgroupelement method)": [[233, "sage.combinat.root_system.fundamental_group.FundamentalGroupElement.act_on_affine_lattice"]], "act_on_affine_weyl() (sage.combinat.root_system.fundamental_group.fundamentalgroupelement method)": [[233, "sage.combinat.root_system.fundamental_group.FundamentalGroupElement.act_on_affine_weyl"]], "act_on_classical_ambient() (sage.combinat.root_system.fundamental_group.fundamentalgroupglelement method)": [[233, "sage.combinat.root_system.fundamental_group.FundamentalGroupGLElement.act_on_classical_ambient"]], "action() (sage.combinat.root_system.fundamental_group.fundamentalgroupgl method)": [[233, "sage.combinat.root_system.fundamental_group.FundamentalGroupGL.action"]], "action() (sage.combinat.root_system.fundamental_group.fundamentalgroupofextendedaffineweylgroup_class method)": [[233, "sage.combinat.root_system.fundamental_group.FundamentalGroupOfExtendedAffineWeylGroup_Class.action"]], "an_element() (sage.combinat.root_system.fundamental_group.fundamentalgroupgl method)": [[233, "sage.combinat.root_system.fundamental_group.FundamentalGroupGL.an_element"]], "an_element() (sage.combinat.root_system.fundamental_group.fundamentalgroupofextendedaffineweylgroup_class method)": [[233, "sage.combinat.root_system.fundamental_group.FundamentalGroupOfExtendedAffineWeylGroup_Class.an_element"]], "cartan_type() (sage.combinat.root_system.fundamental_group.fundamentalgroupofextendedaffineweylgroup_class method)": [[233, "sage.combinat.root_system.fundamental_group.FundamentalGroupOfExtendedAffineWeylGroup_Class.cartan_type"]], "dual_node() (sage.combinat.root_system.fundamental_group.fundamentalgroupgl method)": [[233, "sage.combinat.root_system.fundamental_group.FundamentalGroupGL.dual_node"]], "dual_node() (sage.combinat.root_system.fundamental_group.fundamentalgroupofextendedaffineweylgroup_class method)": [[233, "sage.combinat.root_system.fundamental_group.FundamentalGroupOfExtendedAffineWeylGroup_Class.dual_node"]], "family() (sage.combinat.root_system.fundamental_group.fundamentalgroupgl method)": [[233, "sage.combinat.root_system.fundamental_group.FundamentalGroupGL.family"]], "group_generators() (sage.combinat.root_system.fundamental_group.fundamentalgroupgl method)": [[233, "sage.combinat.root_system.fundamental_group.FundamentalGroupGL.group_generators"]], "group_generators() (sage.combinat.root_system.fundamental_group.fundamentalgroupofextendedaffineweylgroup_class method)": [[233, "sage.combinat.root_system.fundamental_group.FundamentalGroupOfExtendedAffineWeylGroup_Class.group_generators"]], "index_set() (sage.combinat.root_system.fundamental_group.fundamentalgroupofextendedaffineweylgroup_class method)": [[233, "sage.combinat.root_system.fundamental_group.FundamentalGroupOfExtendedAffineWeylGroup_Class.index_set"]], "one() (sage.combinat.root_system.fundamental_group.fundamentalgroupgl method)": [[233, "sage.combinat.root_system.fundamental_group.FundamentalGroupGL.one"]], "one() (sage.combinat.root_system.fundamental_group.fundamentalgroupofextendedaffineweylgroup_class method)": [[233, "sage.combinat.root_system.fundamental_group.FundamentalGroupOfExtendedAffineWeylGroup_Class.one"]], "product() (sage.combinat.root_system.fundamental_group.fundamentalgroupgl method)": [[233, "sage.combinat.root_system.fundamental_group.FundamentalGroupGL.product"]], "product() (sage.combinat.root_system.fundamental_group.fundamentalgroupofextendedaffineweylgroup_class method)": [[233, "sage.combinat.root_system.fundamental_group.FundamentalGroupOfExtendedAffineWeylGroup_Class.product"]], "reduced_word() (sage.combinat.root_system.fundamental_group.fundamentalgroupgl method)": [[233, "sage.combinat.root_system.fundamental_group.FundamentalGroupGL.reduced_word"]], "reduced_word() (sage.combinat.root_system.fundamental_group.fundamentalgroupofextendedaffineweylgroup_class method)": [[233, "sage.combinat.root_system.fundamental_group.FundamentalGroupOfExtendedAffineWeylGroup_Class.reduced_word"]], "sage.combinat.root_system.fundamental_group": [[233, "module-sage.combinat.root_system.fundamental_group"]], "some_elements() (sage.combinat.root_system.fundamental_group.fundamentalgroupgl method)": [[233, "sage.combinat.root_system.fundamental_group.FundamentalGroupGL.some_elements"]], "special_nodes() (sage.combinat.root_system.fundamental_group.fundamentalgroupofextendedaffineweylgroup_class method)": [[233, "sage.combinat.root_system.fundamental_group.FundamentalGroupOfExtendedAffineWeylGroup_Class.special_nodes"]], "value() (sage.combinat.root_system.fundamental_group.fundamentalgroupelement method)": [[233, "sage.combinat.root_system.fundamental_group.FundamentalGroupElement.value"]], "cherednikoperatorseigenvectors (class in sage.combinat.root_system.hecke_algebra_representation)": [[234, "sage.combinat.root_system.hecke_algebra_representation.CherednikOperatorsEigenvectors"]], "heckealgebrarepresentation (class in sage.combinat.root_system.hecke_algebra_representation)": [[234, "sage.combinat.root_system.hecke_algebra_representation.HeckeAlgebraRepresentation"]], "ti_inverse_on_basis() (sage.combinat.root_system.hecke_algebra_representation.heckealgebrarepresentation method)": [[234, "sage.combinat.root_system.hecke_algebra_representation.HeckeAlgebraRepresentation.Ti_inverse_on_basis"]], "ti_on_basis() (sage.combinat.root_system.hecke_algebra_representation.heckealgebrarepresentation method)": [[234, "sage.combinat.root_system.hecke_algebra_representation.HeckeAlgebraRepresentation.Ti_on_basis"]], "tw() (sage.combinat.root_system.hecke_algebra_representation.heckealgebrarepresentation method)": [[234, "sage.combinat.root_system.hecke_algebra_representation.HeckeAlgebraRepresentation.Tw"]], "tw_inverse() (sage.combinat.root_system.hecke_algebra_representation.heckealgebrarepresentation method)": [[234, "sage.combinat.root_system.hecke_algebra_representation.HeckeAlgebraRepresentation.Tw_inverse"]], "y() (sage.combinat.root_system.hecke_algebra_representation.cherednikoperatorseigenvectors method)": [[234, "sage.combinat.root_system.hecke_algebra_representation.CherednikOperatorsEigenvectors.Y"]], "y() (sage.combinat.root_system.hecke_algebra_representation.heckealgebrarepresentation method)": [[234, "sage.combinat.root_system.hecke_algebra_representation.HeckeAlgebraRepresentation.Y"]], "y_eigenvectors() (sage.combinat.root_system.hecke_algebra_representation.heckealgebrarepresentation method)": [[234, "sage.combinat.root_system.hecke_algebra_representation.HeckeAlgebraRepresentation.Y_eigenvectors"]], "y_lambdacheck() (sage.combinat.root_system.hecke_algebra_representation.heckealgebrarepresentation method)": [[234, "sage.combinat.root_system.hecke_algebra_representation.HeckeAlgebraRepresentation.Y_lambdacheck"]], "affine_lift() (sage.combinat.root_system.hecke_algebra_representation.cherednikoperatorseigenvectors method)": [[234, "sage.combinat.root_system.hecke_algebra_representation.CherednikOperatorsEigenvectors.affine_lift"]], "affine_retract() (sage.combinat.root_system.hecke_algebra_representation.cherednikoperatorseigenvectors method)": [[234, "sage.combinat.root_system.hecke_algebra_representation.CherednikOperatorsEigenvectors.affine_retract"]], "cartan_type() (sage.combinat.root_system.hecke_algebra_representation.cherednikoperatorseigenvectors method)": [[234, "sage.combinat.root_system.hecke_algebra_representation.CherednikOperatorsEigenvectors.cartan_type"]], "cartan_type() (sage.combinat.root_system.hecke_algebra_representation.heckealgebrarepresentation method)": [[234, "sage.combinat.root_system.hecke_algebra_representation.HeckeAlgebraRepresentation.cartan_type"]], "domain() (sage.combinat.root_system.hecke_algebra_representation.cherednikoperatorseigenvectors method)": [[234, "sage.combinat.root_system.hecke_algebra_representation.CherednikOperatorsEigenvectors.domain"]], "domain() (sage.combinat.root_system.hecke_algebra_representation.heckealgebrarepresentation method)": [[234, "sage.combinat.root_system.hecke_algebra_representation.HeckeAlgebraRepresentation.domain"]], "eigenvalue() (sage.combinat.root_system.hecke_algebra_representation.cherednikoperatorseigenvectors method)": [[234, "sage.combinat.root_system.hecke_algebra_representation.CherednikOperatorsEigenvectors.eigenvalue"]], "eigenvalues() (sage.combinat.root_system.hecke_algebra_representation.cherednikoperatorseigenvectors method)": [[234, "sage.combinat.root_system.hecke_algebra_representation.CherednikOperatorsEigenvectors.eigenvalues"]], "hecke_parameters() (sage.combinat.root_system.hecke_algebra_representation.cherednikoperatorseigenvectors method)": [[234, "sage.combinat.root_system.hecke_algebra_representation.CherednikOperatorsEigenvectors.hecke_parameters"]], "keys() (sage.combinat.root_system.hecke_algebra_representation.cherednikoperatorseigenvectors method)": [[234, "sage.combinat.root_system.hecke_algebra_representation.CherednikOperatorsEigenvectors.keys"]], "on_basis() (sage.combinat.root_system.hecke_algebra_representation.heckealgebrarepresentation method)": [[234, "sage.combinat.root_system.hecke_algebra_representation.HeckeAlgebraRepresentation.on_basis"]], "parameters() (sage.combinat.root_system.hecke_algebra_representation.heckealgebrarepresentation method)": [[234, "sage.combinat.root_system.hecke_algebra_representation.HeckeAlgebraRepresentation.parameters"]], "recursion() (sage.combinat.root_system.hecke_algebra_representation.cherednikoperatorseigenvectors method)": [[234, "sage.combinat.root_system.hecke_algebra_representation.CherednikOperatorsEigenvectors.recursion"]], "sage.combinat.root_system.hecke_algebra_representation": [[234, "module-sage.combinat.root_system.hecke_algebra_representation"]], "seed() (sage.combinat.root_system.hecke_algebra_representation.cherednikoperatorseigenvectors method)": [[234, "sage.combinat.root_system.hecke_algebra_representation.CherednikOperatorsEigenvectors.seed"]], "straighten_word() (sage.combinat.root_system.hecke_algebra_representation.heckealgebrarepresentation method)": [[234, "sage.combinat.root_system.hecke_algebra_representation.HeckeAlgebraRepresentation.straighten_word"]], "twist() (sage.combinat.root_system.hecke_algebra_representation.cherednikoperatorseigenvectors method)": [[234, "sage.combinat.root_system.hecke_algebra_representation.CherednikOperatorsEigenvectors.twist"]], "integrablerepresentation (class in sage.combinat.root_system.integrable_representations)": [[235, "sage.combinat.root_system.integrable_representations.IntegrableRepresentation"]], "branch() (sage.combinat.root_system.integrable_representations.integrablerepresentation method)": [[235, "sage.combinat.root_system.integrable_representations.IntegrableRepresentation.branch"]], "cartan_type() (sage.combinat.root_system.integrable_representations.integrablerepresentation method)": [[235, "sage.combinat.root_system.integrable_representations.IntegrableRepresentation.cartan_type"]], "coxeter_number() (sage.combinat.root_system.integrable_representations.integrablerepresentation method)": [[235, "sage.combinat.root_system.integrable_representations.IntegrableRepresentation.coxeter_number"]], "dominant_maximal_weights() (sage.combinat.root_system.integrable_representations.integrablerepresentation method)": [[235, "sage.combinat.root_system.integrable_representations.IntegrableRepresentation.dominant_maximal_weights"]], "dual_coxeter_number() (sage.combinat.root_system.integrable_representations.integrablerepresentation method)": [[235, "sage.combinat.root_system.integrable_representations.IntegrableRepresentation.dual_coxeter_number"]], "from_weight() (sage.combinat.root_system.integrable_representations.integrablerepresentation method)": [[235, "sage.combinat.root_system.integrable_representations.IntegrableRepresentation.from_weight"]], "highest_weight() (sage.combinat.root_system.integrable_representations.integrablerepresentation method)": [[235, "sage.combinat.root_system.integrable_representations.IntegrableRepresentation.highest_weight"]], "level() (sage.combinat.root_system.integrable_representations.integrablerepresentation method)": [[235, "sage.combinat.root_system.integrable_representations.IntegrableRepresentation.level"]], "m() (sage.combinat.root_system.integrable_representations.integrablerepresentation method)": [[235, "sage.combinat.root_system.integrable_representations.IntegrableRepresentation.m"]], "modular_characteristic() (sage.combinat.root_system.integrable_representations.integrablerepresentation method)": [[235, "sage.combinat.root_system.integrable_representations.IntegrableRepresentation.modular_characteristic"]], "mult() (sage.combinat.root_system.integrable_representations.integrablerepresentation method)": [[235, "sage.combinat.root_system.integrable_representations.IntegrableRepresentation.mult"]], "print_strings() (sage.combinat.root_system.integrable_representations.integrablerepresentation method)": [[235, "sage.combinat.root_system.integrable_representations.IntegrableRepresentation.print_strings"]], "root_lattice() (sage.combinat.root_system.integrable_representations.integrablerepresentation method)": [[235, "sage.combinat.root_system.integrable_representations.IntegrableRepresentation.root_lattice"]], "s() (sage.combinat.root_system.integrable_representations.integrablerepresentation method)": [[235, "sage.combinat.root_system.integrable_representations.IntegrableRepresentation.s"]], "sage.combinat.root_system.integrable_representations": [[235, "module-sage.combinat.root_system.integrable_representations"]], "string() (sage.combinat.root_system.integrable_representations.integrablerepresentation method)": [[235, "sage.combinat.root_system.integrable_representations.IntegrableRepresentation.string"]], "strings() (sage.combinat.root_system.integrable_representations.integrablerepresentation method)": [[235, "sage.combinat.root_system.integrable_representations.IntegrableRepresentation.strings"]], "to_dominant() (sage.combinat.root_system.integrable_representations.integrablerepresentation method)": [[235, "sage.combinat.root_system.integrable_representations.IntegrableRepresentation.to_dominant"]], "to_weight() (sage.combinat.root_system.integrable_representations.integrablerepresentation method)": [[235, "sage.combinat.root_system.integrable_representations.IntegrableRepresentation.to_weight"]], "weight_lattice() (sage.combinat.root_system.integrable_representations.integrablerepresentation method)": [[235, "sage.combinat.root_system.integrable_representations.IntegrableRepresentation.weight_lattice"]], "kl0() (sage.combinat.root_system.non_symmetric_macdonald_polynomials.nonsymmetricmacdonaldpolynomials method)": [[236, "sage.combinat.root_system.non_symmetric_macdonald_polynomials.NonSymmetricMacdonaldPolynomials.KL0"]], "l() (sage.combinat.root_system.non_symmetric_macdonald_polynomials.nonsymmetricmacdonaldpolynomials method)": [[236, "sage.combinat.root_system.non_symmetric_macdonald_polynomials.NonSymmetricMacdonaldPolynomials.L"]], "l0() (sage.combinat.root_system.non_symmetric_macdonald_polynomials.nonsymmetricmacdonaldpolynomials method)": [[236, "sage.combinat.root_system.non_symmetric_macdonald_polynomials.NonSymmetricMacdonaldPolynomials.L0"]], "l_check() (sage.combinat.root_system.non_symmetric_macdonald_polynomials.nonsymmetricmacdonaldpolynomials method)": [[236, "sage.combinat.root_system.non_symmetric_macdonald_polynomials.NonSymmetricMacdonaldPolynomials.L_check"]], "l_prime() (sage.combinat.root_system.non_symmetric_macdonald_polynomials.nonsymmetricmacdonaldpolynomials method)": [[236, "sage.combinat.root_system.non_symmetric_macdonald_polynomials.NonSymmetricMacdonaldPolynomials.L_prime"]], "nonsymmetricmacdonaldpolynomials (class in sage.combinat.root_system.non_symmetric_macdonald_polynomials)": [[236, "sage.combinat.root_system.non_symmetric_macdonald_polynomials.NonSymmetricMacdonaldPolynomials"]], "q_to_qcheck() (sage.combinat.root_system.non_symmetric_macdonald_polynomials.nonsymmetricmacdonaldpolynomials method)": [[236, "sage.combinat.root_system.non_symmetric_macdonald_polynomials.NonSymmetricMacdonaldPolynomials.Q_to_Qcheck"]], "y() (sage.combinat.root_system.non_symmetric_macdonald_polynomials.nonsymmetricmacdonaldpolynomials method)": [[236, "sage.combinat.root_system.non_symmetric_macdonald_polynomials.NonSymmetricMacdonaldPolynomials.Y"]], "affine_lift() (sage.combinat.root_system.non_symmetric_macdonald_polynomials.nonsymmetricmacdonaldpolynomials method)": [[236, "sage.combinat.root_system.non_symmetric_macdonald_polynomials.NonSymmetricMacdonaldPolynomials.affine_lift"]], "affine_retract() (sage.combinat.root_system.non_symmetric_macdonald_polynomials.nonsymmetricmacdonaldpolynomials method)": [[236, "sage.combinat.root_system.non_symmetric_macdonald_polynomials.NonSymmetricMacdonaldPolynomials.affine_retract"]], "cartan_type() (sage.combinat.root_system.non_symmetric_macdonald_polynomials.nonsymmetricmacdonaldpolynomials method)": [[236, "sage.combinat.root_system.non_symmetric_macdonald_polynomials.NonSymmetricMacdonaldPolynomials.cartan_type"]], "eigenvalue_experimental() (sage.combinat.root_system.non_symmetric_macdonald_polynomials.nonsymmetricmacdonaldpolynomials method)": [[236, "sage.combinat.root_system.non_symmetric_macdonald_polynomials.NonSymmetricMacdonaldPolynomials.eigenvalue_experimental"]], "rho_prime() (sage.combinat.root_system.non_symmetric_macdonald_polynomials.nonsymmetricmacdonaldpolynomials method)": [[236, "sage.combinat.root_system.non_symmetric_macdonald_polynomials.NonSymmetricMacdonaldPolynomials.rho_prime"]], "sage.combinat.root_system.non_symmetric_macdonald_polynomials": [[236, "module-sage.combinat.root_system.non_symmetric_macdonald_polynomials"]], "seed() (sage.combinat.root_system.non_symmetric_macdonald_polynomials.nonsymmetricmacdonaldpolynomials method)": [[236, "sage.combinat.root_system.non_symmetric_macdonald_polynomials.NonSymmetricMacdonaldPolynomials.seed"]], "symmetric_macdonald_polynomial() (sage.combinat.root_system.non_symmetric_macdonald_polynomials.nonsymmetricmacdonaldpolynomials method)": [[236, "sage.combinat.root_system.non_symmetric_macdonald_polynomials.NonSymmetricMacdonaldPolynomials.symmetric_macdonald_polynomial"]], "twist() (sage.combinat.root_system.non_symmetric_macdonald_polynomials.nonsymmetricmacdonaldpolynomials method)": [[236, "sage.combinat.root_system.non_symmetric_macdonald_polynomials.NonSymmetricMacdonaldPolynomials.twist"]], "pierifactors (class in sage.combinat.root_system.pieri_factors)": [[237, "sage.combinat.root_system.pieri_factors.PieriFactors"]], "pierifactors_affine_type (class in sage.combinat.root_system.pieri_factors)": [[237, "sage.combinat.root_system.pieri_factors.PieriFactors_affine_type"]], "pierifactors_finite_type (class in sage.combinat.root_system.pieri_factors)": [[237, "sage.combinat.root_system.pieri_factors.PieriFactors_finite_type"]], "pierifactors_type_a (class in sage.combinat.root_system.pieri_factors)": [[237, "sage.combinat.root_system.pieri_factors.PieriFactors_type_A"]], "pierifactors_type_a_affine (class in sage.combinat.root_system.pieri_factors)": [[237, "sage.combinat.root_system.pieri_factors.PieriFactors_type_A_affine"]], "pierifactors_type_b (class in sage.combinat.root_system.pieri_factors)": [[237, "sage.combinat.root_system.pieri_factors.PieriFactors_type_B"]], "pierifactors_type_b_affine (class in sage.combinat.root_system.pieri_factors)": [[237, "sage.combinat.root_system.pieri_factors.PieriFactors_type_B_affine"]], "pierifactors_type_c_affine (class in sage.combinat.root_system.pieri_factors)": [[237, "sage.combinat.root_system.pieri_factors.PieriFactors_type_C_affine"]], "pierifactors_type_d_affine (class in sage.combinat.root_system.pieri_factors)": [[237, "sage.combinat.root_system.pieri_factors.PieriFactors_type_D_affine"]], "cardinality() (sage.combinat.root_system.pieri_factors.pierifactors_type_a_affine method)": [[237, "sage.combinat.root_system.pieri_factors.PieriFactors_type_A_affine.cardinality"]], "default_weight() (sage.combinat.root_system.pieri_factors.pierifactors method)": [[237, "sage.combinat.root_system.pieri_factors.PieriFactors.default_weight"]], "elements() (sage.combinat.root_system.pieri_factors.pierifactors method)": [[237, "sage.combinat.root_system.pieri_factors.PieriFactors.elements"]], "generating_series() (sage.combinat.root_system.pieri_factors.pierifactors method)": [[237, "sage.combinat.root_system.pieri_factors.PieriFactors.generating_series"]], "generating_series() (sage.combinat.root_system.pieri_factors.pierifactors_type_a_affine method)": [[237, "sage.combinat.root_system.pieri_factors.PieriFactors_type_A_affine.generating_series"]], "max_length() (sage.combinat.root_system.pieri_factors.pierifactors method)": [[237, "sage.combinat.root_system.pieri_factors.PieriFactors.max_length"]], "maximal_elements() (sage.combinat.root_system.pieri_factors.pierifactors_affine_type method)": [[237, "sage.combinat.root_system.pieri_factors.PieriFactors_affine_type.maximal_elements"]], "maximal_elements() (sage.combinat.root_system.pieri_factors.pierifactors_finite_type method)": [[237, "sage.combinat.root_system.pieri_factors.PieriFactors_finite_type.maximal_elements"]], "maximal_elements_combinatorial() (sage.combinat.root_system.pieri_factors.pierifactors_type_a method)": [[237, "sage.combinat.root_system.pieri_factors.PieriFactors_type_A.maximal_elements_combinatorial"]], "maximal_elements_combinatorial() (sage.combinat.root_system.pieri_factors.pierifactors_type_a_affine method)": [[237, "sage.combinat.root_system.pieri_factors.PieriFactors_type_A_affine.maximal_elements_combinatorial"]], "maximal_elements_combinatorial() (sage.combinat.root_system.pieri_factors.pierifactors_type_b method)": [[237, "sage.combinat.root_system.pieri_factors.PieriFactors_type_B.maximal_elements_combinatorial"]], "maximal_elements_combinatorial() (sage.combinat.root_system.pieri_factors.pierifactors_type_b_affine method)": [[237, "sage.combinat.root_system.pieri_factors.PieriFactors_type_B_affine.maximal_elements_combinatorial"]], "maximal_elements_combinatorial() (sage.combinat.root_system.pieri_factors.pierifactors_type_c_affine method)": [[237, "sage.combinat.root_system.pieri_factors.PieriFactors_type_C_affine.maximal_elements_combinatorial"]], "maximal_elements_combinatorial() (sage.combinat.root_system.pieri_factors.pierifactors_type_d_affine method)": [[237, "sage.combinat.root_system.pieri_factors.PieriFactors_type_D_affine.maximal_elements_combinatorial"]], "sage.combinat.root_system.pieri_factors": [[237, "module-sage.combinat.root_system.pieri_factors"]], "stanley_symm_poly_weight() (sage.combinat.root_system.pieri_factors.pierifactors_type_a method)": [[237, "sage.combinat.root_system.pieri_factors.PieriFactors_type_A.stanley_symm_poly_weight"]], "stanley_symm_poly_weight() (sage.combinat.root_system.pieri_factors.pierifactors_type_a_affine method)": [[237, "sage.combinat.root_system.pieri_factors.PieriFactors_type_A_affine.stanley_symm_poly_weight"]], "stanley_symm_poly_weight() (sage.combinat.root_system.pieri_factors.pierifactors_type_b method)": [[237, "sage.combinat.root_system.pieri_factors.PieriFactors_type_B.stanley_symm_poly_weight"]], "stanley_symm_poly_weight() (sage.combinat.root_system.pieri_factors.pierifactors_type_b_affine method)": [[237, "sage.combinat.root_system.pieri_factors.PieriFactors_type_B_affine.stanley_symm_poly_weight"]], "stanley_symm_poly_weight() (sage.combinat.root_system.pieri_factors.pierifactors_type_c_affine method)": [[237, "sage.combinat.root_system.pieri_factors.PieriFactors_type_C_affine.stanley_symm_poly_weight"]], "stanley_symm_poly_weight() (sage.combinat.root_system.pieri_factors.pierifactors_type_d_affine method)": [[237, "sage.combinat.root_system.pieri_factors.PieriFactors_type_D_affine.stanley_symm_poly_weight"]], "subset() (sage.combinat.root_system.pieri_factors.pierifactors_type_a_affine method)": [[237, "sage.combinat.root_system.pieri_factors.PieriFactors_type_A_affine.subset"]], "plotoptions (class in sage.combinat.root_system.plot)": [[238, "sage.combinat.root_system.plot.PlotOptions"]], "barycentric_projection_matrix() (in module sage.combinat.root_system.plot)": [[238, "sage.combinat.root_system.plot.barycentric_projection_matrix"]], "color() (sage.combinat.root_system.plot.plotoptions method)": [[238, "sage.combinat.root_system.plot.PlotOptions.color"]], "cone() (sage.combinat.root_system.plot.plotoptions method)": [[238, "sage.combinat.root_system.plot.PlotOptions.cone"]], "empty() (sage.combinat.root_system.plot.plotoptions method)": [[238, "sage.combinat.root_system.plot.PlotOptions.empty"]], "family_of_vectors() (sage.combinat.root_system.plot.plotoptions method)": [[238, "sage.combinat.root_system.plot.PlotOptions.family_of_vectors"]], "finalize() (sage.combinat.root_system.plot.plotoptions method)": [[238, "sage.combinat.root_system.plot.PlotOptions.finalize"]], "in_bounding_box() (sage.combinat.root_system.plot.plotoptions method)": [[238, "sage.combinat.root_system.plot.PlotOptions.in_bounding_box"]], "index_of_object() (sage.combinat.root_system.plot.plotoptions method)": [[238, "sage.combinat.root_system.plot.PlotOptions.index_of_object"]], "intersection_at_level_1() (sage.combinat.root_system.plot.plotoptions method)": [[238, "sage.combinat.root_system.plot.PlotOptions.intersection_at_level_1"]], "projection() (sage.combinat.root_system.plot.plotoptions method)": [[238, "sage.combinat.root_system.plot.PlotOptions.projection"]], "reflection_hyperplane() (sage.combinat.root_system.plot.plotoptions method)": [[238, "sage.combinat.root_system.plot.PlotOptions.reflection_hyperplane"]], "sage.combinat.root_system.plot": [[238, "module-sage.combinat.root_system.plot"]], "text() (sage.combinat.root_system.plot.plotoptions method)": [[238, "sage.combinat.root_system.plot.PlotOptions.text"]], "thickness() (sage.combinat.root_system.plot.plotoptions method)": [[238, "sage.combinat.root_system.plot.PlotOptions.thickness"]], "complexreflectiongroup (class in sage.combinat.root_system.reflection_group_complex)": [[239, "sage.combinat.root_system.reflection_group_complex.ComplexReflectionGroup"]], "complexreflectiongroup.element (class in sage.combinat.root_system.reflection_group_complex)": [[239, "sage.combinat.root_system.reflection_group_complex.ComplexReflectionGroup.Element"]], "irreduciblecomplexreflectiongroup (class in sage.combinat.root_system.reflection_group_complex)": [[239, "sage.combinat.root_system.reflection_group_complex.IrreducibleComplexReflectionGroup"]], "irreduciblecomplexreflectiongroup.element (class in sage.combinat.root_system.reflection_group_complex)": [[239, "sage.combinat.root_system.reflection_group_complex.IrreducibleComplexReflectionGroup.Element"]], "apply_vector_field() (sage.combinat.root_system.reflection_group_complex.complexreflectiongroup method)": [[239, "sage.combinat.root_system.reflection_group_complex.ComplexReflectionGroup.apply_vector_field"]], "braid_relations() (sage.combinat.root_system.reflection_group_complex.complexreflectiongroup method)": [[239, "sage.combinat.root_system.reflection_group_complex.ComplexReflectionGroup.braid_relations"]], "cartan_matrix() (sage.combinat.root_system.reflection_group_complex.complexreflectiongroup method)": [[239, "sage.combinat.root_system.reflection_group_complex.ComplexReflectionGroup.cartan_matrix"]], "codegrees() (sage.combinat.root_system.reflection_group_complex.complexreflectiongroup method)": [[239, "sage.combinat.root_system.reflection_group_complex.ComplexReflectionGroup.codegrees"]], "conjugacy_class() (sage.combinat.root_system.reflection_group_complex.complexreflectiongroup.element method)": [[239, "sage.combinat.root_system.reflection_group_complex.ComplexReflectionGroup.Element.conjugacy_class"]], "conjugacy_class_representative() (sage.combinat.root_system.reflection_group_complex.complexreflectiongroup.element method)": [[239, "sage.combinat.root_system.reflection_group_complex.ComplexReflectionGroup.Element.conjugacy_class_representative"]], "conjugacy_classes() (sage.combinat.root_system.reflection_group_complex.complexreflectiongroup method)": [[239, "sage.combinat.root_system.reflection_group_complex.ComplexReflectionGroup.conjugacy_classes"]], "conjugacy_classes_representatives() (sage.combinat.root_system.reflection_group_complex.complexreflectiongroup method)": [[239, "sage.combinat.root_system.reflection_group_complex.ComplexReflectionGroup.conjugacy_classes_representatives"]], "coxeter_number() (sage.combinat.root_system.reflection_group_complex.complexreflectiongroup method)": [[239, "sage.combinat.root_system.reflection_group_complex.ComplexReflectionGroup.coxeter_number"]], "degrees() (sage.combinat.root_system.reflection_group_complex.complexreflectiongroup method)": [[239, "sage.combinat.root_system.reflection_group_complex.ComplexReflectionGroup.degrees"]], "discriminant() (sage.combinat.root_system.reflection_group_complex.complexreflectiongroup method)": [[239, "sage.combinat.root_system.reflection_group_complex.ComplexReflectionGroup.discriminant"]], "discriminant_in_invariant_ring() (sage.combinat.root_system.reflection_group_complex.complexreflectiongroup method)": [[239, "sage.combinat.root_system.reflection_group_complex.ComplexReflectionGroup.discriminant_in_invariant_ring"]], "distinguished_reflection() (sage.combinat.root_system.reflection_group_complex.complexreflectiongroup method)": [[239, "sage.combinat.root_system.reflection_group_complex.ComplexReflectionGroup.distinguished_reflection"]], "distinguished_reflections() (sage.combinat.root_system.reflection_group_complex.complexreflectiongroup method)": [[239, "sage.combinat.root_system.reflection_group_complex.ComplexReflectionGroup.distinguished_reflections"]], "fake_degrees() (sage.combinat.root_system.reflection_group_complex.complexreflectiongroup method)": [[239, "sage.combinat.root_system.reflection_group_complex.ComplexReflectionGroup.fake_degrees"]], "fundamental_invariants() (sage.combinat.root_system.reflection_group_complex.complexreflectiongroup method)": [[239, "sage.combinat.root_system.reflection_group_complex.ComplexReflectionGroup.fundamental_invariants"]], "hyperplane_index_set() (sage.combinat.root_system.reflection_group_complex.complexreflectiongroup method)": [[239, "sage.combinat.root_system.reflection_group_complex.ComplexReflectionGroup.hyperplane_index_set"]], "independent_roots() (sage.combinat.root_system.reflection_group_complex.complexreflectiongroup method)": [[239, "sage.combinat.root_system.reflection_group_complex.ComplexReflectionGroup.independent_roots"]], "index_set() (sage.combinat.root_system.reflection_group_complex.complexreflectiongroup method)": [[239, "sage.combinat.root_system.reflection_group_complex.ComplexReflectionGroup.index_set"]], "invariant_form() (sage.combinat.root_system.reflection_group_complex.complexreflectiongroup method)": [[239, "sage.combinat.root_system.reflection_group_complex.ComplexReflectionGroup.invariant_form"]], "invariant_form_standardization() (sage.combinat.root_system.reflection_group_complex.complexreflectiongroup method)": [[239, "sage.combinat.root_system.reflection_group_complex.ComplexReflectionGroup.invariant_form_standardization"]], "irreducible_components() (sage.combinat.root_system.reflection_group_complex.complexreflectiongroup method)": [[239, "sage.combinat.root_system.reflection_group_complex.ComplexReflectionGroup.irreducible_components"]], "is_coxeter_element() (sage.combinat.root_system.reflection_group_complex.irreduciblecomplexreflectiongroup.element method)": [[239, "sage.combinat.root_system.reflection_group_complex.IrreducibleComplexReflectionGroup.Element.is_coxeter_element"]], "is_crystallographic() (sage.combinat.root_system.reflection_group_complex.complexreflectiongroup method)": [[239, "sage.combinat.root_system.reflection_group_complex.ComplexReflectionGroup.is_crystallographic"]], "is_h_regular() (sage.combinat.root_system.reflection_group_complex.irreduciblecomplexreflectiongroup.element method)": [[239, "sage.combinat.root_system.reflection_group_complex.IrreducibleComplexReflectionGroup.Element.is_h_regular"]], "is_regular() (sage.combinat.root_system.reflection_group_complex.irreduciblecomplexreflectiongroup.element method)": [[239, "sage.combinat.root_system.reflection_group_complex.IrreducibleComplexReflectionGroup.Element.is_regular"]], "iteration_tracking_words() (sage.combinat.root_system.reflection_group_complex.complexreflectiongroup method)": [[239, "sage.combinat.root_system.reflection_group_complex.ComplexReflectionGroup.iteration_tracking_words"]], "jacobian_of_fundamental_invariants() (sage.combinat.root_system.reflection_group_complex.complexreflectiongroup method)": [[239, "sage.combinat.root_system.reflection_group_complex.ComplexReflectionGroup.jacobian_of_fundamental_invariants"]], "multi_partitions() (in module sage.combinat.root_system.reflection_group_complex)": [[239, "sage.combinat.root_system.reflection_group_complex.multi_partitions"]], "number_of_irreducible_components() (sage.combinat.root_system.reflection_group_complex.complexreflectiongroup method)": [[239, "sage.combinat.root_system.reflection_group_complex.ComplexReflectionGroup.number_of_irreducible_components"]], "power() (in module sage.combinat.root_system.reflection_group_complex)": [[239, "sage.combinat.root_system.reflection_group_complex.power"]], "primitive_vector_field() (sage.combinat.root_system.reflection_group_complex.complexreflectiongroup method)": [[239, "sage.combinat.root_system.reflection_group_complex.ComplexReflectionGroup.primitive_vector_field"]], "rank() (sage.combinat.root_system.reflection_group_complex.complexreflectiongroup method)": [[239, "sage.combinat.root_system.reflection_group_complex.ComplexReflectionGroup.rank"]], "reflection() (sage.combinat.root_system.reflection_group_complex.complexreflectiongroup method)": [[239, "sage.combinat.root_system.reflection_group_complex.ComplexReflectionGroup.reflection"]], "reflection_character() (sage.combinat.root_system.reflection_group_complex.complexreflectiongroup method)": [[239, "sage.combinat.root_system.reflection_group_complex.ComplexReflectionGroup.reflection_character"]], "reflection_eigenvalues() (sage.combinat.root_system.reflection_group_complex.complexreflectiongroup method)": [[239, "sage.combinat.root_system.reflection_group_complex.ComplexReflectionGroup.reflection_eigenvalues"]], "reflection_eigenvalues_family() (sage.combinat.root_system.reflection_group_complex.complexreflectiongroup method)": [[239, "sage.combinat.root_system.reflection_group_complex.ComplexReflectionGroup.reflection_eigenvalues_family"]], "reflection_hyperplane() (sage.combinat.root_system.reflection_group_complex.complexreflectiongroup method)": [[239, "sage.combinat.root_system.reflection_group_complex.ComplexReflectionGroup.reflection_hyperplane"]], "reflection_hyperplanes() (sage.combinat.root_system.reflection_group_complex.complexreflectiongroup method)": [[239, "sage.combinat.root_system.reflection_group_complex.ComplexReflectionGroup.reflection_hyperplanes"]], "reflection_index_set() (sage.combinat.root_system.reflection_group_complex.complexreflectiongroup method)": [[239, "sage.combinat.root_system.reflection_group_complex.ComplexReflectionGroup.reflection_index_set"]], "reflection_length() (sage.combinat.root_system.reflection_group_complex.complexreflectiongroup.element method)": [[239, "sage.combinat.root_system.reflection_group_complex.ComplexReflectionGroup.Element.reflection_length"]], "reflections() (sage.combinat.root_system.reflection_group_complex.complexreflectiongroup method)": [[239, "sage.combinat.root_system.reflection_group_complex.ComplexReflectionGroup.reflections"]], "roots() (sage.combinat.root_system.reflection_group_complex.complexreflectiongroup method)": [[239, "sage.combinat.root_system.reflection_group_complex.ComplexReflectionGroup.roots"]], "sage.combinat.root_system.reflection_group_complex": [[239, "module-sage.combinat.root_system.reflection_group_complex"]], "series() (sage.combinat.root_system.reflection_group_complex.complexreflectiongroup method)": [[239, "sage.combinat.root_system.reflection_group_complex.ComplexReflectionGroup.series"]], "set_reflection_representation() (sage.combinat.root_system.reflection_group_complex.complexreflectiongroup method)": [[239, "sage.combinat.root_system.reflection_group_complex.ComplexReflectionGroup.set_reflection_representation"]], "simple_coroot() (sage.combinat.root_system.reflection_group_complex.complexreflectiongroup method)": [[239, "sage.combinat.root_system.reflection_group_complex.ComplexReflectionGroup.simple_coroot"]], "simple_coroots() (sage.combinat.root_system.reflection_group_complex.complexreflectiongroup method)": [[239, "sage.combinat.root_system.reflection_group_complex.ComplexReflectionGroup.simple_coroots"]], "simple_reflection() (sage.combinat.root_system.reflection_group_complex.complexreflectiongroup method)": [[239, "sage.combinat.root_system.reflection_group_complex.ComplexReflectionGroup.simple_reflection"]], "simple_root() (sage.combinat.root_system.reflection_group_complex.complexreflectiongroup method)": [[239, "sage.combinat.root_system.reflection_group_complex.ComplexReflectionGroup.simple_root"]], "simple_roots() (sage.combinat.root_system.reflection_group_complex.complexreflectiongroup method)": [[239, "sage.combinat.root_system.reflection_group_complex.ComplexReflectionGroup.simple_roots"]], "irreduciblerealreflectiongroup (class in sage.combinat.root_system.reflection_group_real)": [[240, "sage.combinat.root_system.reflection_group_real.IrreducibleRealReflectionGroup"]], "irreduciblerealreflectiongroup.element (class in sage.combinat.root_system.reflection_group_real)": [[240, "sage.combinat.root_system.reflection_group_real.IrreducibleRealReflectionGroup.Element"]], "realreflectiongroup (class in sage.combinat.root_system.reflection_group_real)": [[240, "sage.combinat.root_system.reflection_group_real.RealReflectionGroup"]], "realreflectiongroup.element (class in sage.combinat.root_system.reflection_group_real)": [[240, "sage.combinat.root_system.reflection_group_real.RealReflectionGroup.Element"]], "reflectiongroup() (in module sage.combinat.root_system.reflection_group_real)": [[240, "sage.combinat.root_system.reflection_group_real.ReflectionGroup"]], "almost_positive_roots() (sage.combinat.root_system.reflection_group_real.realreflectiongroup method)": [[240, "sage.combinat.root_system.reflection_group_real.RealReflectionGroup.almost_positive_roots"]], "bipartite_index_set() (sage.combinat.root_system.reflection_group_real.realreflectiongroup method)": [[240, "sage.combinat.root_system.reflection_group_real.RealReflectionGroup.bipartite_index_set"]], "bruhat_cone() (sage.combinat.root_system.reflection_group_real.realreflectiongroup method)": [[240, "sage.combinat.root_system.reflection_group_real.RealReflectionGroup.bruhat_cone"]], "cartan_type() (sage.combinat.root_system.reflection_group_real.realreflectiongroup method)": [[240, "sage.combinat.root_system.reflection_group_real.RealReflectionGroup.cartan_type"]], "coxeter_diagram() (sage.combinat.root_system.reflection_group_real.realreflectiongroup method)": [[240, "sage.combinat.root_system.reflection_group_real.RealReflectionGroup.coxeter_diagram"]], "coxeter_matrix() (sage.combinat.root_system.reflection_group_real.realreflectiongroup method)": [[240, "sage.combinat.root_system.reflection_group_real.RealReflectionGroup.coxeter_matrix"]], "fundamental_weight() (sage.combinat.root_system.reflection_group_real.realreflectiongroup method)": [[240, "sage.combinat.root_system.reflection_group_real.RealReflectionGroup.fundamental_weight"]], "fundamental_weights() (sage.combinat.root_system.reflection_group_real.realreflectiongroup method)": [[240, "sage.combinat.root_system.reflection_group_real.RealReflectionGroup.fundamental_weights"]], "is_chevie_available() (in module sage.combinat.root_system.reflection_group_real)": [[240, "sage.combinat.root_system.reflection_group_real.is_chevie_available"]], "iteration() (sage.combinat.root_system.reflection_group_real.realreflectiongroup method)": [[240, "sage.combinat.root_system.reflection_group_real.RealReflectionGroup.iteration"]], "left_coset_representatives() (sage.combinat.root_system.reflection_group_real.realreflectiongroup.element method)": [[240, "sage.combinat.root_system.reflection_group_real.RealReflectionGroup.Element.left_coset_representatives"]], "positive_roots() (sage.combinat.root_system.reflection_group_real.realreflectiongroup method)": [[240, "sage.combinat.root_system.reflection_group_real.RealReflectionGroup.positive_roots"]], "reflection_to_positive_root() (sage.combinat.root_system.reflection_group_real.realreflectiongroup method)": [[240, "sage.combinat.root_system.reflection_group_real.RealReflectionGroup.reflection_to_positive_root"]], "right_coset_representatives() (sage.combinat.root_system.reflection_group_real.realreflectiongroup method)": [[240, "sage.combinat.root_system.reflection_group_real.RealReflectionGroup.right_coset_representatives"]], "right_coset_representatives() (sage.combinat.root_system.reflection_group_real.realreflectiongroup.element method)": [[240, "sage.combinat.root_system.reflection_group_real.RealReflectionGroup.Element.right_coset_representatives"]], "root_to_reflection() (sage.combinat.root_system.reflection_group_real.realreflectiongroup method)": [[240, "sage.combinat.root_system.reflection_group_real.RealReflectionGroup.root_to_reflection"]], "sage.combinat.root_system.reflection_group_real": [[240, "module-sage.combinat.root_system.reflection_group_real"]], "simple_root_index() (sage.combinat.root_system.reflection_group_real.realreflectiongroup method)": [[240, "sage.combinat.root_system.reflection_group_real.RealReflectionGroup.simple_root_index"]], "algebras (class in sage.combinat.root_system.root_lattice_realization_algebras)": [[241, "sage.combinat.root_system.root_lattice_realization_algebras.Algebras"]], "algebras.elementmethods (class in sage.combinat.root_system.root_lattice_realization_algebras)": [[241, "sage.combinat.root_system.root_lattice_realization_algebras.Algebras.ElementMethods"]], "algebras.parentmethods (class in sage.combinat.root_system.root_lattice_realization_algebras)": [[241, "sage.combinat.root_system.root_lattice_realization_algebras.Algebras.ParentMethods"]], "t0_check_on_basis() (sage.combinat.root_system.root_lattice_realization_algebras.algebras.parentmethods method)": [[241, "sage.combinat.root_system.root_lattice_realization_algebras.Algebras.ParentMethods.T0_check_on_basis"]], "acted_upon() (sage.combinat.root_system.root_lattice_realization_algebras.algebras.elementmethods method)": [[241, "sage.combinat.root_system.root_lattice_realization_algebras.Algebras.ElementMethods.acted_upon"]], "cartan_type() (sage.combinat.root_system.root_lattice_realization_algebras.algebras.parentmethods method)": [[241, "sage.combinat.root_system.root_lattice_realization_algebras.Algebras.ParentMethods.cartan_type"]], "classical() (sage.combinat.root_system.root_lattice_realization_algebras.algebras.parentmethods method)": [[241, "sage.combinat.root_system.root_lattice_realization_algebras.Algebras.ParentMethods.classical"]], "demazure_lusztig_operator_on_basis() (sage.combinat.root_system.root_lattice_realization_algebras.algebras.parentmethods method)": [[241, "sage.combinat.root_system.root_lattice_realization_algebras.Algebras.ParentMethods.demazure_lusztig_operator_on_basis"]], "demazure_lusztig_operator_on_classical_on_basis() (sage.combinat.root_system.root_lattice_realization_algebras.algebras.parentmethods method)": [[241, "sage.combinat.root_system.root_lattice_realization_algebras.Algebras.ParentMethods.demazure_lusztig_operator_on_classical_on_basis"]], "demazure_lusztig_operators() (sage.combinat.root_system.root_lattice_realization_algebras.algebras.parentmethods method)": [[241, "sage.combinat.root_system.root_lattice_realization_algebras.Algebras.ParentMethods.demazure_lusztig_operators"]], "demazure_lusztig_operators_on_classical() (sage.combinat.root_system.root_lattice_realization_algebras.algebras.parentmethods method)": [[241, "sage.combinat.root_system.root_lattice_realization_algebras.Algebras.ParentMethods.demazure_lusztig_operators_on_classical"]], "demazure_operators() (sage.combinat.root_system.root_lattice_realization_algebras.algebras.parentmethods method)": [[241, "sage.combinat.root_system.root_lattice_realization_algebras.Algebras.ParentMethods.demazure_operators"]], "divided_difference_on_basis() (sage.combinat.root_system.root_lattice_realization_algebras.algebras.parentmethods method)": [[241, "sage.combinat.root_system.root_lattice_realization_algebras.Algebras.ParentMethods.divided_difference_on_basis"]], "expand() (sage.combinat.root_system.root_lattice_realization_algebras.algebras.elementmethods method)": [[241, "sage.combinat.root_system.root_lattice_realization_algebras.Algebras.ElementMethods.expand"]], "from_polynomial() (sage.combinat.root_system.root_lattice_realization_algebras.algebras.parentmethods method)": [[241, "sage.combinat.root_system.root_lattice_realization_algebras.Algebras.ParentMethods.from_polynomial"]], "isobaric_divided_difference_on_basis() (sage.combinat.root_system.root_lattice_realization_algebras.algebras.parentmethods method)": [[241, "sage.combinat.root_system.root_lattice_realization_algebras.Algebras.ParentMethods.isobaric_divided_difference_on_basis"]], "q_project() (sage.combinat.root_system.root_lattice_realization_algebras.algebras.parentmethods method)": [[241, "sage.combinat.root_system.root_lattice_realization_algebras.Algebras.ParentMethods.q_project"]], "q_project_on_basis() (sage.combinat.root_system.root_lattice_realization_algebras.algebras.parentmethods method)": [[241, "sage.combinat.root_system.root_lattice_realization_algebras.Algebras.ParentMethods.q_project_on_basis"]], "sage.combinat.root_system.root_lattice_realization_algebras": [[241, "module-sage.combinat.root_system.root_lattice_realization_algebras"]], "some_elements() (sage.combinat.root_system.root_lattice_realization_algebras.algebras.parentmethods method)": [[241, "sage.combinat.root_system.root_lattice_realization_algebras.Algebras.ParentMethods.some_elements"]], "twisted_demazure_lusztig_operator_on_basis() (sage.combinat.root_system.root_lattice_realization_algebras.algebras.parentmethods method)": [[241, "sage.combinat.root_system.root_lattice_realization_algebras.Algebras.ParentMethods.twisted_demazure_lusztig_operator_on_basis"]], "twisted_demazure_lusztig_operators() (sage.combinat.root_system.root_lattice_realization_algebras.algebras.parentmethods method)": [[241, "sage.combinat.root_system.root_lattice_realization_algebras.Algebras.ParentMethods.twisted_demazure_lusztig_operators"]], "algebras (sage.combinat.root_system.root_lattice_realizations.rootlatticerealizations attribute)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.Algebras"]], "rootlatticerealizations (class in sage.combinat.root_system.root_lattice_realizations)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations"]], "rootlatticerealizations.elementmethods (class in sage.combinat.root_system.root_lattice_realizations)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ElementMethods"]], "rootlatticerealizations.parentmethods (class in sage.combinat.root_system.root_lattice_realizations)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ParentMethods"]], "a_long_simple_root() (sage.combinat.root_system.root_lattice_realizations.rootlatticerealizations.parentmethods method)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ParentMethods.a_long_simple_root"]], "affine_orbit() (sage.combinat.root_system.root_lattice_realizations.rootlatticerealizations.elementmethods method)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ElementMethods.affine_orbit"]], "almost_positive_roots() (sage.combinat.root_system.root_lattice_realizations.rootlatticerealizations.parentmethods method)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ParentMethods.almost_positive_roots"]], "almost_positive_roots_decomposition() (sage.combinat.root_system.root_lattice_realizations.rootlatticerealizations.parentmethods method)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ParentMethods.almost_positive_roots_decomposition"]], "alpha() (sage.combinat.root_system.root_lattice_realizations.rootlatticerealizations.parentmethods method)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ParentMethods.alpha"]], "alphacheck() (sage.combinat.root_system.root_lattice_realizations.rootlatticerealizations.parentmethods method)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ParentMethods.alphacheck"]], "associated_coroot() (sage.combinat.root_system.root_lattice_realizations.rootlatticerealizations.elementmethods method)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ElementMethods.associated_coroot"]], "associated_reflection() (sage.combinat.root_system.root_lattice_realizations.rootlatticerealizations.elementmethods method)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ElementMethods.associated_reflection"]], "basic_imaginary_roots() (sage.combinat.root_system.root_lattice_realizations.rootlatticerealizations.parentmethods method)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ParentMethods.basic_imaginary_roots"]], "cartan_type() (sage.combinat.root_system.root_lattice_realizations.rootlatticerealizations.parentmethods method)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ParentMethods.cartan_type"]], "classical() (sage.combinat.root_system.root_lattice_realizations.rootlatticerealizations.parentmethods method)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ParentMethods.classical"]], "cohighest_root() (sage.combinat.root_system.root_lattice_realizations.rootlatticerealizations.parentmethods method)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ParentMethods.cohighest_root"]], "coroot_lattice() (sage.combinat.root_system.root_lattice_realizations.rootlatticerealizations.parentmethods method)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ParentMethods.coroot_lattice"]], "coroot_space() (sage.combinat.root_system.root_lattice_realizations.rootlatticerealizations.parentmethods method)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ParentMethods.coroot_space"]], "descents() (sage.combinat.root_system.root_lattice_realizations.rootlatticerealizations.elementmethods method)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ElementMethods.descents"]], "dot_action() (sage.combinat.root_system.root_lattice_realizations.rootlatticerealizations.elementmethods method)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ElementMethods.dot_action"]], "dot_orbit() (sage.combinat.root_system.root_lattice_realizations.rootlatticerealizations.elementmethods method)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ElementMethods.dot_orbit"]], "dual_type_cospace() (sage.combinat.root_system.root_lattice_realizations.rootlatticerealizations.parentmethods method)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ParentMethods.dual_type_cospace"]], "dynkin_diagram() (sage.combinat.root_system.root_lattice_realizations.rootlatticerealizations.parentmethods method)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ParentMethods.dynkin_diagram"]], "extraspecial_pair() (sage.combinat.root_system.root_lattice_realizations.rootlatticerealizations.elementmethods method)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ElementMethods.extraspecial_pair"]], "first_descent() (sage.combinat.root_system.root_lattice_realizations.rootlatticerealizations.elementmethods method)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ElementMethods.first_descent"]], "fundamental_weights_from_simple_roots() (sage.combinat.root_system.root_lattice_realizations.rootlatticerealizations.parentmethods method)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ParentMethods.fundamental_weights_from_simple_roots"]], "generalized_nonnesting_partition_lattice() (sage.combinat.root_system.root_lattice_realizations.rootlatticerealizations.parentmethods method)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ParentMethods.generalized_nonnesting_partition_lattice"]], "greater() (sage.combinat.root_system.root_lattice_realizations.rootlatticerealizations.elementmethods method)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ElementMethods.greater"]], "has_descent() (sage.combinat.root_system.root_lattice_realizations.rootlatticerealizations.elementmethods method)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ElementMethods.has_descent"]], "height() (sage.combinat.root_system.root_lattice_realizations.rootlatticerealizations.elementmethods method)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ElementMethods.height"]], "highest_root() (sage.combinat.root_system.root_lattice_realizations.rootlatticerealizations.parentmethods method)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ParentMethods.highest_root"]], "index_set() (sage.combinat.root_system.root_lattice_realizations.rootlatticerealizations.parentmethods method)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ParentMethods.index_set"]], "is_dominant() (sage.combinat.root_system.root_lattice_realizations.rootlatticerealizations.elementmethods method)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ElementMethods.is_dominant"]], "is_dominant_weight() (sage.combinat.root_system.root_lattice_realizations.rootlatticerealizations.elementmethods method)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ElementMethods.is_dominant_weight"]], "is_imaginary_root() (sage.combinat.root_system.root_lattice_realizations.rootlatticerealizations.elementmethods method)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ElementMethods.is_imaginary_root"]], "is_long_root() (sage.combinat.root_system.root_lattice_realizations.rootlatticerealizations.elementmethods method)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ElementMethods.is_long_root"]], "is_parabolic_root() (sage.combinat.root_system.root_lattice_realizations.rootlatticerealizations.elementmethods method)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ElementMethods.is_parabolic_root"]], "is_real_root() (sage.combinat.root_system.root_lattice_realizations.rootlatticerealizations.elementmethods method)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ElementMethods.is_real_root"]], "is_short_root() (sage.combinat.root_system.root_lattice_realizations.rootlatticerealizations.elementmethods method)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ElementMethods.is_short_root"]], "level() (sage.combinat.root_system.root_lattice_realizations.rootlatticerealizations.elementmethods method)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ElementMethods.level"]], "long_roots() (sage.combinat.root_system.root_lattice_realizations.rootlatticerealizations.parentmethods method)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ParentMethods.long_roots"]], "negative_roots() (sage.combinat.root_system.root_lattice_realizations.rootlatticerealizations.parentmethods method)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ParentMethods.negative_roots"]], "nonnesting_partition_lattice() (sage.combinat.root_system.root_lattice_realizations.rootlatticerealizations.parentmethods method)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ParentMethods.nonnesting_partition_lattice"]], "nonparabolic_positive_root_sum() (sage.combinat.root_system.root_lattice_realizations.rootlatticerealizations.parentmethods method)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ParentMethods.nonparabolic_positive_root_sum"]], "nonparabolic_positive_roots() (sage.combinat.root_system.root_lattice_realizations.rootlatticerealizations.parentmethods method)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ParentMethods.nonparabolic_positive_roots"]], "norm_squared() (sage.combinat.root_system.root_lattice_realizations.rootlatticerealizations.elementmethods method)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ElementMethods.norm_squared"]], "null_coroot() (sage.combinat.root_system.root_lattice_realizations.rootlatticerealizations.parentmethods method)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ParentMethods.null_coroot"]], "null_root() (sage.combinat.root_system.root_lattice_realizations.rootlatticerealizations.parentmethods method)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ParentMethods.null_root"]], "orbit() (sage.combinat.root_system.root_lattice_realizations.rootlatticerealizations.elementmethods method)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ElementMethods.orbit"]], "plot() (sage.combinat.root_system.root_lattice_realizations.rootlatticerealizations.parentmethods method)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ParentMethods.plot"]], "plot_alcove_walk() (sage.combinat.root_system.root_lattice_realizations.rootlatticerealizations.parentmethods method)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ParentMethods.plot_alcove_walk"]], "plot_alcoves() (sage.combinat.root_system.root_lattice_realizations.rootlatticerealizations.parentmethods method)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ParentMethods.plot_alcoves"]], "plot_bounding_box() (sage.combinat.root_system.root_lattice_realizations.rootlatticerealizations.parentmethods method)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ParentMethods.plot_bounding_box"]], "plot_coroots() (sage.combinat.root_system.root_lattice_realizations.rootlatticerealizations.parentmethods method)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ParentMethods.plot_coroots"]], "plot_crystal() (sage.combinat.root_system.root_lattice_realizations.rootlatticerealizations.parentmethods method)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ParentMethods.plot_crystal"]], "plot_fundamental_chamber() (sage.combinat.root_system.root_lattice_realizations.rootlatticerealizations.parentmethods method)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ParentMethods.plot_fundamental_chamber"]], "plot_fundamental_weights() (sage.combinat.root_system.root_lattice_realizations.rootlatticerealizations.parentmethods method)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ParentMethods.plot_fundamental_weights"]], "plot_hedron() (sage.combinat.root_system.root_lattice_realizations.rootlatticerealizations.parentmethods method)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ParentMethods.plot_hedron"]], "plot_ls_paths() (sage.combinat.root_system.root_lattice_realizations.rootlatticerealizations.parentmethods method)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ParentMethods.plot_ls_paths"]], "plot_mv_polytope() (sage.combinat.root_system.root_lattice_realizations.rootlatticerealizations.parentmethods method)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ParentMethods.plot_mv_polytope"]], "plot_parse_options() (sage.combinat.root_system.root_lattice_realizations.rootlatticerealizations.parentmethods method)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ParentMethods.plot_parse_options"]], "plot_reflection_hyperplanes() (sage.combinat.root_system.root_lattice_realizations.rootlatticerealizations.parentmethods method)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ParentMethods.plot_reflection_hyperplanes"]], "plot_roots() (sage.combinat.root_system.root_lattice_realizations.rootlatticerealizations.parentmethods method)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ParentMethods.plot_roots"]], "positive_imaginary_roots() (sage.combinat.root_system.root_lattice_realizations.rootlatticerealizations.parentmethods method)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ParentMethods.positive_imaginary_roots"]], "positive_real_roots() (sage.combinat.root_system.root_lattice_realizations.rootlatticerealizations.parentmethods method)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ParentMethods.positive_real_roots"]], "positive_roots() (sage.combinat.root_system.root_lattice_realizations.rootlatticerealizations.parentmethods method)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ParentMethods.positive_roots"]], "positive_roots_by_height() (sage.combinat.root_system.root_lattice_realizations.rootlatticerealizations.parentmethods method)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ParentMethods.positive_roots_by_height"]], "positive_roots_nonparabolic() (sage.combinat.root_system.root_lattice_realizations.rootlatticerealizations.parentmethods method)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ParentMethods.positive_roots_nonparabolic"]], "positive_roots_nonparabolic_sum() (sage.combinat.root_system.root_lattice_realizations.rootlatticerealizations.parentmethods method)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ParentMethods.positive_roots_nonparabolic_sum"]], "positive_roots_parabolic() (sage.combinat.root_system.root_lattice_realizations.rootlatticerealizations.parentmethods method)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ParentMethods.positive_roots_parabolic"]], "pred() (sage.combinat.root_system.root_lattice_realizations.rootlatticerealizations.elementmethods method)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ElementMethods.pred"]], "projection() (sage.combinat.root_system.root_lattice_realizations.rootlatticerealizations.parentmethods method)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ParentMethods.projection"]], "reduced_word() (sage.combinat.root_system.root_lattice_realizations.rootlatticerealizations.elementmethods method)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ElementMethods.reduced_word"]], "reflection() (sage.combinat.root_system.root_lattice_realizations.rootlatticerealizations.elementmethods method)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ElementMethods.reflection"]], "reflection() (sage.combinat.root_system.root_lattice_realizations.rootlatticerealizations.parentmethods method)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ParentMethods.reflection"]], "root_poset() (sage.combinat.root_system.root_lattice_realizations.rootlatticerealizations.parentmethods method)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ParentMethods.root_poset"]], "roots() (sage.combinat.root_system.root_lattice_realizations.rootlatticerealizations.parentmethods method)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ParentMethods.roots"]], "s() (sage.combinat.root_system.root_lattice_realizations.rootlatticerealizations.parentmethods method)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ParentMethods.s"]], "sage.combinat.root_system.root_lattice_realizations": [[242, "module-sage.combinat.root_system.root_lattice_realizations"]], "scalar() (sage.combinat.root_system.root_lattice_realizations.rootlatticerealizations.elementmethods method)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ElementMethods.scalar"]], "short_roots() (sage.combinat.root_system.root_lattice_realizations.rootlatticerealizations.parentmethods method)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ParentMethods.short_roots"]], "simple_coroot() (sage.combinat.root_system.root_lattice_realizations.rootlatticerealizations.parentmethods method)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ParentMethods.simple_coroot"]], "simple_coroots() (sage.combinat.root_system.root_lattice_realizations.rootlatticerealizations.parentmethods method)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ParentMethods.simple_coroots"]], "simple_projection() (sage.combinat.root_system.root_lattice_realizations.rootlatticerealizations.parentmethods method)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ParentMethods.simple_projection"]], "simple_projections() (sage.combinat.root_system.root_lattice_realizations.rootlatticerealizations.parentmethods method)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ParentMethods.simple_projections"]], "simple_reflection() (sage.combinat.root_system.root_lattice_realizations.rootlatticerealizations.elementmethods method)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ElementMethods.simple_reflection"]], "simple_reflection() (sage.combinat.root_system.root_lattice_realizations.rootlatticerealizations.parentmethods method)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ParentMethods.simple_reflection"]], "simple_reflections() (sage.combinat.root_system.root_lattice_realizations.rootlatticerealizations.elementmethods method)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ElementMethods.simple_reflections"]], "simple_reflections() (sage.combinat.root_system.root_lattice_realizations.rootlatticerealizations.parentmethods method)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ParentMethods.simple_reflections"]], "simple_root() (sage.combinat.root_system.root_lattice_realizations.rootlatticerealizations.parentmethods method)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ParentMethods.simple_root"]], "simple_roots() (sage.combinat.root_system.root_lattice_realizations.rootlatticerealizations.parentmethods method)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ParentMethods.simple_roots"]], "simple_roots_tilde() (sage.combinat.root_system.root_lattice_realizations.rootlatticerealizations.parentmethods method)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ParentMethods.simple_roots_tilde"]], "smaller() (sage.combinat.root_system.root_lattice_realizations.rootlatticerealizations.elementmethods method)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ElementMethods.smaller"]], "some_elements() (sage.combinat.root_system.root_lattice_realizations.rootlatticerealizations.parentmethods method)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ParentMethods.some_elements"]], "succ() (sage.combinat.root_system.root_lattice_realizations.rootlatticerealizations.elementmethods method)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ElementMethods.succ"]], "super_categories() (sage.combinat.root_system.root_lattice_realizations.rootlatticerealizations method)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.super_categories"]], "symmetric_form() (sage.combinat.root_system.root_lattice_realizations.rootlatticerealizations.elementmethods method)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ElementMethods.symmetric_form"]], "tau_epsilon_operator_on_almost_positive_roots() (sage.combinat.root_system.root_lattice_realizations.rootlatticerealizations.parentmethods method)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ParentMethods.tau_epsilon_operator_on_almost_positive_roots"]], "tau_plus_minus() (sage.combinat.root_system.root_lattice_realizations.rootlatticerealizations.parentmethods method)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ParentMethods.tau_plus_minus"]], "to_ambient() (sage.combinat.root_system.root_lattice_realizations.rootlatticerealizations.elementmethods method)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ElementMethods.to_ambient"]], "to_ambient_space_morphism() (sage.combinat.root_system.root_lattice_realizations.rootlatticerealizations.parentmethods method)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ParentMethods.to_ambient_space_morphism"]], "to_classical() (sage.combinat.root_system.root_lattice_realizations.rootlatticerealizations.elementmethods method)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ElementMethods.to_classical"]], "to_dominant_chamber() (sage.combinat.root_system.root_lattice_realizations.rootlatticerealizations.elementmethods method)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ElementMethods.to_dominant_chamber"]], "to_dual_type_cospace() (sage.combinat.root_system.root_lattice_realizations.rootlatticerealizations.elementmethods method)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ElementMethods.to_dual_type_cospace"]], "to_simple_root() (sage.combinat.root_system.root_lattice_realizations.rootlatticerealizations.elementmethods method)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ElementMethods.to_simple_root"]], "translation() (sage.combinat.root_system.root_lattice_realizations.rootlatticerealizations.elementmethods method)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ElementMethods.translation"]], "weyl_action() (sage.combinat.root_system.root_lattice_realizations.rootlatticerealizations.elementmethods method)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ElementMethods.weyl_action"]], "weyl_group() (sage.combinat.root_system.root_lattice_realizations.rootlatticerealizations.parentmethods method)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ParentMethods.weyl_group"]], "weyl_stabilizer() (sage.combinat.root_system.root_lattice_realizations.rootlatticerealizations.elementmethods method)": [[242, "sage.combinat.root_system.root_lattice_realizations.RootLatticeRealizations.ElementMethods.weyl_stabilizer"]], "element (sage.combinat.root_system.root_space.rootspace attribute)": [[243, "sage.combinat.root_system.root_space.RootSpace.Element"]], "rootspace (class in sage.combinat.root_system.root_space)": [[243, "sage.combinat.root_system.root_space.RootSpace"]], "rootspaceelement (class in sage.combinat.root_system.root_space)": [[243, "sage.combinat.root_system.root_space.RootSpaceElement"]], "associated_coroot() (sage.combinat.root_system.root_space.rootspaceelement method)": [[243, "sage.combinat.root_system.root_space.RootSpaceElement.associated_coroot"]], "is_positive_root() (sage.combinat.root_system.root_space.rootspaceelement method)": [[243, "sage.combinat.root_system.root_space.RootSpaceElement.is_positive_root"]], "max_coroot_le() (sage.combinat.root_system.root_space.rootspaceelement method)": [[243, "sage.combinat.root_system.root_space.RootSpaceElement.max_coroot_le"]], "max_quantum_element() (sage.combinat.root_system.root_space.rootspaceelement method)": [[243, "sage.combinat.root_system.root_space.RootSpaceElement.max_quantum_element"]], "quantum_root() (sage.combinat.root_system.root_space.rootspaceelement method)": [[243, "sage.combinat.root_system.root_space.RootSpaceElement.quantum_root"]], "sage.combinat.root_system.root_space": [[243, "module-sage.combinat.root_system.root_space"]], "scalar() (sage.combinat.root_system.root_space.rootspaceelement method)": [[243, "sage.combinat.root_system.root_space.RootSpaceElement.scalar"]], "simple_root() (sage.combinat.root_system.root_space.rootspace method)": [[243, "sage.combinat.root_system.root_space.RootSpace.simple_root"]], "to_ambient() (sage.combinat.root_system.root_space.rootspaceelement method)": [[243, "sage.combinat.root_system.root_space.RootSpaceElement.to_ambient"]], "to_ambient_space_morphism() (sage.combinat.root_system.root_space.rootspace method)": [[243, "sage.combinat.root_system.root_space.RootSpace.to_ambient_space_morphism"]], "to_coroot_space_morphism() (sage.combinat.root_system.root_space.rootspace method)": [[243, "sage.combinat.root_system.root_space.RootSpace.to_coroot_space_morphism"]], "rootsystem (class in sage.combinat.root_system.root_system)": [[244, "sage.combinat.root_system.root_system.RootSystem"]], "weyldim() (in module sage.combinat.root_system.root_system)": [[244, "sage.combinat.root_system.root_system.WeylDim"]], "ambient_lattice() (sage.combinat.root_system.root_system.rootsystem method)": [[244, "sage.combinat.root_system.root_system.RootSystem.ambient_lattice"]], "ambient_space() (sage.combinat.root_system.root_system.rootsystem method)": [[244, "sage.combinat.root_system.root_system.RootSystem.ambient_space"]], "cartan_matrix() (sage.combinat.root_system.root_system.rootsystem method)": [[244, "sage.combinat.root_system.root_system.RootSystem.cartan_matrix"]], "cartan_type() (sage.combinat.root_system.root_system.rootsystem method)": [[244, "sage.combinat.root_system.root_system.RootSystem.cartan_type"]], "coambient_space() (sage.combinat.root_system.root_system.rootsystem method)": [[244, "sage.combinat.root_system.root_system.RootSystem.coambient_space"]], "coroot_lattice() (sage.combinat.root_system.root_system.rootsystem method)": [[244, "sage.combinat.root_system.root_system.RootSystem.coroot_lattice"]], "coroot_space() (sage.combinat.root_system.root_system.rootsystem method)": [[244, "sage.combinat.root_system.root_system.RootSystem.coroot_space"]], "coweight_lattice() (sage.combinat.root_system.root_system.rootsystem method)": [[244, "sage.combinat.root_system.root_system.RootSystem.coweight_lattice"]], "coweight_space() (sage.combinat.root_system.root_system.rootsystem method)": [[244, "sage.combinat.root_system.root_system.RootSystem.coweight_space"]], "dynkin_diagram() (sage.combinat.root_system.root_system.rootsystem method)": [[244, "sage.combinat.root_system.root_system.RootSystem.dynkin_diagram"]], "index_set() (sage.combinat.root_system.root_system.rootsystem method)": [[244, "sage.combinat.root_system.root_system.RootSystem.index_set"]], "is_finite() (sage.combinat.root_system.root_system.rootsystem method)": [[244, "sage.combinat.root_system.root_system.RootSystem.is_finite"]], "is_irreducible() (sage.combinat.root_system.root_system.rootsystem method)": [[244, "sage.combinat.root_system.root_system.RootSystem.is_irreducible"]], "root_lattice() (sage.combinat.root_system.root_system.rootsystem method)": [[244, "sage.combinat.root_system.root_system.RootSystem.root_lattice"]], "root_poset() (sage.combinat.root_system.root_system.rootsystem method)": [[244, "sage.combinat.root_system.root_system.RootSystem.root_poset"]], "root_space() (sage.combinat.root_system.root_system.rootsystem method)": [[244, "sage.combinat.root_system.root_system.RootSystem.root_space"]], "sage.combinat.root_system.root_system": [[244, "module-sage.combinat.root_system.root_system"]], "weight_lattice() (sage.combinat.root_system.root_system.rootsystem method)": [[244, "sage.combinat.root_system.root_system.RootSystem.weight_lattice"]], "weight_space() (sage.combinat.root_system.root_system.rootsystem method)": [[244, "sage.combinat.root_system.root_system.RootSystem.weight_space"]], "ambientspace (class in sage.combinat.root_system.type_a)": [[245, "sage.combinat.root_system.type_A.AmbientSpace"]], "ambientspace (sage.combinat.root_system.type_a.cartantype attribute)": [[245, "sage.combinat.root_system.type_A.CartanType.AmbientSpace"]], "cartantype (class in sage.combinat.root_system.type_a)": [[245, "sage.combinat.root_system.type_A.CartanType"]], "pierifactors (sage.combinat.root_system.type_a.cartantype attribute)": [[245, "sage.combinat.root_system.type_A.CartanType.PieriFactors"]], "ascii_art() (sage.combinat.root_system.type_a.cartantype method)": [[245, "sage.combinat.root_system.type_A.CartanType.ascii_art"]], "coxeter_number() (sage.combinat.root_system.type_a.cartantype method)": [[245, "sage.combinat.root_system.type_A.CartanType.coxeter_number"]], "det() (sage.combinat.root_system.type_a.ambientspace method)": [[245, "sage.combinat.root_system.type_A.AmbientSpace.det"]], "dimension() (sage.combinat.root_system.type_a.ambientspace method)": [[245, "sage.combinat.root_system.type_A.AmbientSpace.dimension"]], "dual_coxeter_number() (sage.combinat.root_system.type_a.cartantype method)": [[245, "sage.combinat.root_system.type_A.CartanType.dual_coxeter_number"]], "dynkin_diagram() (sage.combinat.root_system.type_a.cartantype method)": [[245, "sage.combinat.root_system.type_A.CartanType.dynkin_diagram"]], "fundamental_weight() (sage.combinat.root_system.type_a.ambientspace method)": [[245, "sage.combinat.root_system.type_A.AmbientSpace.fundamental_weight"]], "highest_root() (sage.combinat.root_system.type_a.ambientspace method)": [[245, "sage.combinat.root_system.type_A.AmbientSpace.highest_root"]], "negative_roots() (sage.combinat.root_system.type_a.ambientspace method)": [[245, "sage.combinat.root_system.type_A.AmbientSpace.negative_roots"]], "positive_roots() (sage.combinat.root_system.type_a.ambientspace method)": [[245, "sage.combinat.root_system.type_A.AmbientSpace.positive_roots"]], "root() (sage.combinat.root_system.type_a.ambientspace method)": [[245, "sage.combinat.root_system.type_A.AmbientSpace.root"]], "sage.combinat.root_system.type_a": [[245, "module-sage.combinat.root_system.type_A"]], "simple_root() (sage.combinat.root_system.type_a.ambientspace method)": [[245, "sage.combinat.root_system.type_A.AmbientSpace.simple_root"]], "smallest_base_ring() (sage.combinat.root_system.type_a.ambientspace class method)": [[245, "sage.combinat.root_system.type_A.AmbientSpace.smallest_base_ring"]], "cartantype (class in sage.combinat.root_system.type_a_affine)": [[246, "sage.combinat.root_system.type_A_affine.CartanType"]], "pierifactors (sage.combinat.root_system.type_a_affine.cartantype attribute)": [[246, "sage.combinat.root_system.type_A_affine.CartanType.PieriFactors"]], "ascii_art() (sage.combinat.root_system.type_a_affine.cartantype method)": [[246, "sage.combinat.root_system.type_A_affine.CartanType.ascii_art"]], "dual() (sage.combinat.root_system.type_a_affine.cartantype method)": [[246, "sage.combinat.root_system.type_A_affine.CartanType.dual"]], "dynkin_diagram() (sage.combinat.root_system.type_a_affine.cartantype method)": [[246, "sage.combinat.root_system.type_A_affine.CartanType.dynkin_diagram"]], "sage.combinat.root_system.type_a_affine": [[246, "module-sage.combinat.root_system.type_A_affine"]], "cartantype (class in sage.combinat.root_system.type_a_infinity)": [[247, "sage.combinat.root_system.type_A_infinity.CartanType"]], "ascii_art() (sage.combinat.root_system.type_a_infinity.cartantype method)": [[247, "sage.combinat.root_system.type_A_infinity.CartanType.ascii_art"]], "dual() (sage.combinat.root_system.type_a_infinity.cartantype method)": [[247, "sage.combinat.root_system.type_A_infinity.CartanType.dual"]], "index_set() (sage.combinat.root_system.type_a_infinity.cartantype method)": [[247, "sage.combinat.root_system.type_A_infinity.CartanType.index_set"]], "is_affine() (sage.combinat.root_system.type_a_infinity.cartantype method)": [[247, "sage.combinat.root_system.type_A_infinity.CartanType.is_affine"]], "is_crystallographic() (sage.combinat.root_system.type_a_infinity.cartantype method)": [[247, "sage.combinat.root_system.type_A_infinity.CartanType.is_crystallographic"]], "is_finite() (sage.combinat.root_system.type_a_infinity.cartantype method)": [[247, "sage.combinat.root_system.type_A_infinity.CartanType.is_finite"]], "is_simply_laced() (sage.combinat.root_system.type_a_infinity.cartantype method)": [[247, "sage.combinat.root_system.type_A_infinity.CartanType.is_simply_laced"]], "is_untwisted_affine() (sage.combinat.root_system.type_a_infinity.cartantype method)": [[247, "sage.combinat.root_system.type_A_infinity.CartanType.is_untwisted_affine"]], "rank() (sage.combinat.root_system.type_a_infinity.cartantype method)": [[247, "sage.combinat.root_system.type_A_infinity.CartanType.rank"]], "sage.combinat.root_system.type_a_infinity": [[247, "module-sage.combinat.root_system.type_A_infinity"]], "type() (sage.combinat.root_system.type_a_infinity.cartantype method)": [[247, "sage.combinat.root_system.type_A_infinity.CartanType.type"]], "ambientspace (class in sage.combinat.root_system.type_b)": [[248, "sage.combinat.root_system.type_B.AmbientSpace"]], "ambientspace (sage.combinat.root_system.type_b.cartantype attribute)": [[248, "sage.combinat.root_system.type_B.CartanType.AmbientSpace"]], "cartantype (class in sage.combinat.root_system.type_b)": [[248, "sage.combinat.root_system.type_B.CartanType"]], "pierifactors (sage.combinat.root_system.type_b.cartantype attribute)": [[248, "sage.combinat.root_system.type_B.CartanType.PieriFactors"]], "ascii_art() (sage.combinat.root_system.type_b.cartantype method)": [[248, "sage.combinat.root_system.type_B.CartanType.ascii_art"]], "coxeter_number() (sage.combinat.root_system.type_b.cartantype method)": [[248, "sage.combinat.root_system.type_B.CartanType.coxeter_number"]], "dimension() (sage.combinat.root_system.type_b.ambientspace method)": [[248, "sage.combinat.root_system.type_B.AmbientSpace.dimension"]], "dual() (sage.combinat.root_system.type_b.cartantype method)": [[248, "sage.combinat.root_system.type_B.CartanType.dual"]], "dual_coxeter_number() (sage.combinat.root_system.type_b.cartantype method)": [[248, "sage.combinat.root_system.type_B.CartanType.dual_coxeter_number"]], "dynkin_diagram() (sage.combinat.root_system.type_b.cartantype method)": [[248, "sage.combinat.root_system.type_B.CartanType.dynkin_diagram"]], "fundamental_weight() (sage.combinat.root_system.type_b.ambientspace method)": [[248, "sage.combinat.root_system.type_B.AmbientSpace.fundamental_weight"]], "negative_roots() (sage.combinat.root_system.type_b.ambientspace method)": [[248, "sage.combinat.root_system.type_B.AmbientSpace.negative_roots"]], "positive_roots() (sage.combinat.root_system.type_b.ambientspace method)": [[248, "sage.combinat.root_system.type_B.AmbientSpace.positive_roots"]], "root() (sage.combinat.root_system.type_b.ambientspace method)": [[248, "sage.combinat.root_system.type_B.AmbientSpace.root"]], "sage.combinat.root_system.type_b": [[248, "module-sage.combinat.root_system.type_B"]], "simple_root() (sage.combinat.root_system.type_b.ambientspace method)": [[248, "sage.combinat.root_system.type_B.AmbientSpace.simple_root"]], "cartantype (class in sage.combinat.root_system.type_bc_affine)": [[249, "sage.combinat.root_system.type_BC_affine.CartanType"]], "ascii_art() (sage.combinat.root_system.type_bc_affine.cartantype method)": [[249, "sage.combinat.root_system.type_BC_affine.CartanType.ascii_art"]], "basic_untwisted() (sage.combinat.root_system.type_bc_affine.cartantype method)": [[249, "sage.combinat.root_system.type_BC_affine.CartanType.basic_untwisted"]], "classical() (sage.combinat.root_system.type_bc_affine.cartantype method)": [[249, "sage.combinat.root_system.type_BC_affine.CartanType.classical"]], "dynkin_diagram() (sage.combinat.root_system.type_bc_affine.cartantype method)": [[249, "sage.combinat.root_system.type_BC_affine.CartanType.dynkin_diagram"]], "sage.combinat.root_system.type_bc_affine": [[249, "module-sage.combinat.root_system.type_BC_affine"]], "cartantype (class in sage.combinat.root_system.type_b_affine)": [[250, "sage.combinat.root_system.type_B_affine.CartanType"]], "pierifactors (sage.combinat.root_system.type_b_affine.cartantype attribute)": [[250, "sage.combinat.root_system.type_B_affine.CartanType.PieriFactors"]], "ascii_art() (sage.combinat.root_system.type_b_affine.cartantype method)": [[250, "sage.combinat.root_system.type_B_affine.CartanType.ascii_art"]], "dynkin_diagram() (sage.combinat.root_system.type_b_affine.cartantype method)": [[250, "sage.combinat.root_system.type_B_affine.CartanType.dynkin_diagram"]], "sage.combinat.root_system.type_b_affine": [[250, "module-sage.combinat.root_system.type_B_affine"]], "ambientspace (class in sage.combinat.root_system.type_c)": [[251, "sage.combinat.root_system.type_C.AmbientSpace"]], "ambientspace (sage.combinat.root_system.type_c.cartantype attribute)": [[251, "sage.combinat.root_system.type_C.CartanType.AmbientSpace"]], "cartantype (class in sage.combinat.root_system.type_c)": [[251, "sage.combinat.root_system.type_C.CartanType"]], "ascii_art() (sage.combinat.root_system.type_c.cartantype method)": [[251, "sage.combinat.root_system.type_C.CartanType.ascii_art"]], "coxeter_number() (sage.combinat.root_system.type_c.cartantype method)": [[251, "sage.combinat.root_system.type_C.CartanType.coxeter_number"]], "dimension() (sage.combinat.root_system.type_c.ambientspace method)": [[251, "sage.combinat.root_system.type_C.AmbientSpace.dimension"]], "dual() (sage.combinat.root_system.type_c.cartantype method)": [[251, "sage.combinat.root_system.type_C.CartanType.dual"]], "dual_coxeter_number() (sage.combinat.root_system.type_c.cartantype method)": [[251, "sage.combinat.root_system.type_C.CartanType.dual_coxeter_number"]], "dynkin_diagram() (sage.combinat.root_system.type_c.cartantype method)": [[251, "sage.combinat.root_system.type_C.CartanType.dynkin_diagram"]], "fundamental_weight() (sage.combinat.root_system.type_c.ambientspace method)": [[251, "sage.combinat.root_system.type_C.AmbientSpace.fundamental_weight"]], "negative_roots() (sage.combinat.root_system.type_c.ambientspace method)": [[251, "sage.combinat.root_system.type_C.AmbientSpace.negative_roots"]], "positive_roots() (sage.combinat.root_system.type_c.ambientspace method)": [[251, "sage.combinat.root_system.type_C.AmbientSpace.positive_roots"]], "root() (sage.combinat.root_system.type_c.ambientspace method)": [[251, "sage.combinat.root_system.type_C.AmbientSpace.root"]], "sage.combinat.root_system.type_c": [[251, "module-sage.combinat.root_system.type_C"]], "simple_root() (sage.combinat.root_system.type_c.ambientspace method)": [[251, "sage.combinat.root_system.type_C.AmbientSpace.simple_root"]], "cartantype (class in sage.combinat.root_system.type_c_affine)": [[252, "sage.combinat.root_system.type_C_affine.CartanType"]], "pierifactors (sage.combinat.root_system.type_c_affine.cartantype attribute)": [[252, "sage.combinat.root_system.type_C_affine.CartanType.PieriFactors"]], "ascii_art() (sage.combinat.root_system.type_c_affine.cartantype method)": [[252, "sage.combinat.root_system.type_C_affine.CartanType.ascii_art"]], "dynkin_diagram() (sage.combinat.root_system.type_c_affine.cartantype method)": [[252, "sage.combinat.root_system.type_C_affine.CartanType.dynkin_diagram"]], "sage.combinat.root_system.type_c_affine": [[252, "module-sage.combinat.root_system.type_C_affine"]], "ambientspace (class in sage.combinat.root_system.type_d)": [[253, "sage.combinat.root_system.type_D.AmbientSpace"]], "ambientspace (sage.combinat.root_system.type_d.cartantype attribute)": [[253, "sage.combinat.root_system.type_D.CartanType.AmbientSpace"]], "cartantype (class in sage.combinat.root_system.type_d)": [[253, "sage.combinat.root_system.type_D.CartanType"]], "ascii_art() (sage.combinat.root_system.type_d.cartantype method)": [[253, "sage.combinat.root_system.type_D.CartanType.ascii_art"]], "coxeter_number() (sage.combinat.root_system.type_d.cartantype method)": [[253, "sage.combinat.root_system.type_D.CartanType.coxeter_number"]], "dimension() (sage.combinat.root_system.type_d.ambientspace method)": [[253, "sage.combinat.root_system.type_D.AmbientSpace.dimension"]], "dual_coxeter_number() (sage.combinat.root_system.type_d.cartantype method)": [[253, "sage.combinat.root_system.type_D.CartanType.dual_coxeter_number"]], "dynkin_diagram() (sage.combinat.root_system.type_d.cartantype method)": [[253, "sage.combinat.root_system.type_D.CartanType.dynkin_diagram"]], "fundamental_weight() (sage.combinat.root_system.type_d.ambientspace method)": [[253, "sage.combinat.root_system.type_D.AmbientSpace.fundamental_weight"]], "is_atomic() (sage.combinat.root_system.type_d.cartantype method)": [[253, "sage.combinat.root_system.type_D.CartanType.is_atomic"]], "negative_roots() (sage.combinat.root_system.type_d.ambientspace method)": [[253, "sage.combinat.root_system.type_D.AmbientSpace.negative_roots"]], "positive_roots() (sage.combinat.root_system.type_d.ambientspace method)": [[253, "sage.combinat.root_system.type_D.AmbientSpace.positive_roots"]], "root() (sage.combinat.root_system.type_d.ambientspace method)": [[253, "sage.combinat.root_system.type_D.AmbientSpace.root"]], "sage.combinat.root_system.type_d": [[253, "module-sage.combinat.root_system.type_D"]], "simple_root() (sage.combinat.root_system.type_d.ambientspace method)": [[253, "sage.combinat.root_system.type_D.AmbientSpace.simple_root"]], "cartantype (class in sage.combinat.root_system.type_d_affine)": [[254, "sage.combinat.root_system.type_D_affine.CartanType"]], "pierifactors (sage.combinat.root_system.type_d_affine.cartantype attribute)": [[254, "sage.combinat.root_system.type_D_affine.CartanType.PieriFactors"]], "ascii_art() (sage.combinat.root_system.type_d_affine.cartantype method)": [[254, "sage.combinat.root_system.type_D_affine.CartanType.ascii_art"]], "dynkin_diagram() (sage.combinat.root_system.type_d_affine.cartantype method)": [[254, "sage.combinat.root_system.type_D_affine.CartanType.dynkin_diagram"]], "sage.combinat.root_system.type_d_affine": [[254, "module-sage.combinat.root_system.type_D_affine"]], "ambientspace (class in sage.combinat.root_system.type_e)": [[255, "sage.combinat.root_system.type_E.AmbientSpace"]], "ambientspace (sage.combinat.root_system.type_e.cartantype attribute)": [[255, "sage.combinat.root_system.type_E.CartanType.AmbientSpace"]], "cartantype (class in sage.combinat.root_system.type_e)": [[255, "sage.combinat.root_system.type_E.CartanType"]], "ascii_art() (sage.combinat.root_system.type_e.cartantype method)": [[255, "sage.combinat.root_system.type_E.CartanType.ascii_art"]], "coxeter_number() (sage.combinat.root_system.type_e.cartantype method)": [[255, "sage.combinat.root_system.type_E.CartanType.coxeter_number"]], "dimension() (sage.combinat.root_system.type_e.ambientspace method)": [[255, "sage.combinat.root_system.type_E.AmbientSpace.dimension"]], "dual_coxeter_number() (sage.combinat.root_system.type_e.cartantype method)": [[255, "sage.combinat.root_system.type_E.CartanType.dual_coxeter_number"]], "dynkin_diagram() (sage.combinat.root_system.type_e.cartantype method)": [[255, "sage.combinat.root_system.type_E.CartanType.dynkin_diagram"]], "fundamental_weights() (sage.combinat.root_system.type_e.ambientspace method)": [[255, "sage.combinat.root_system.type_E.AmbientSpace.fundamental_weights"]], "negative_roots() (sage.combinat.root_system.type_e.ambientspace method)": [[255, "sage.combinat.root_system.type_E.AmbientSpace.negative_roots"]], "positive_roots() (sage.combinat.root_system.type_e.ambientspace method)": [[255, "sage.combinat.root_system.type_E.AmbientSpace.positive_roots"]], "root() (sage.combinat.root_system.type_e.ambientspace method)": [[255, "sage.combinat.root_system.type_E.AmbientSpace.root"]], "sage.combinat.root_system.type_e": [[255, "module-sage.combinat.root_system.type_E"]], "simple_root() (sage.combinat.root_system.type_e.ambientspace method)": [[255, "sage.combinat.root_system.type_E.AmbientSpace.simple_root"]], "cartantype (class in sage.combinat.root_system.type_e_affine)": [[256, "sage.combinat.root_system.type_E_affine.CartanType"]], "ascii_art() (sage.combinat.root_system.type_e_affine.cartantype method)": [[256, "sage.combinat.root_system.type_E_affine.CartanType.ascii_art"]], "dynkin_diagram() (sage.combinat.root_system.type_e_affine.cartantype method)": [[256, "sage.combinat.root_system.type_E_affine.CartanType.dynkin_diagram"]], "sage.combinat.root_system.type_e_affine": [[256, "module-sage.combinat.root_system.type_E_affine"]], "ambientspace (class in sage.combinat.root_system.type_f)": [[257, "sage.combinat.root_system.type_F.AmbientSpace"]], "ambientspace (sage.combinat.root_system.type_f.cartantype attribute)": [[257, "sage.combinat.root_system.type_F.CartanType.AmbientSpace"]], "cartantype (class in sage.combinat.root_system.type_f)": [[257, "sage.combinat.root_system.type_F.CartanType"]], "ascii_art() (sage.combinat.root_system.type_f.cartantype method)": [[257, "sage.combinat.root_system.type_F.CartanType.ascii_art"]], "coxeter_number() (sage.combinat.root_system.type_f.cartantype method)": [[257, "sage.combinat.root_system.type_F.CartanType.coxeter_number"]], "dimension() (sage.combinat.root_system.type_f.ambientspace method)": [[257, "sage.combinat.root_system.type_F.AmbientSpace.dimension"]], "dual() (sage.combinat.root_system.type_f.cartantype method)": [[257, "sage.combinat.root_system.type_F.CartanType.dual"]], "dual_coxeter_number() (sage.combinat.root_system.type_f.cartantype method)": [[257, "sage.combinat.root_system.type_F.CartanType.dual_coxeter_number"]], "dynkin_diagram() (sage.combinat.root_system.type_f.cartantype method)": [[257, "sage.combinat.root_system.type_F.CartanType.dynkin_diagram"]], "fundamental_weights() (sage.combinat.root_system.type_f.ambientspace method)": [[257, "sage.combinat.root_system.type_F.AmbientSpace.fundamental_weights"]], "negative_roots() (sage.combinat.root_system.type_f.ambientspace method)": [[257, "sage.combinat.root_system.type_F.AmbientSpace.negative_roots"]], "positive_roots() (sage.combinat.root_system.type_f.ambientspace method)": [[257, "sage.combinat.root_system.type_F.AmbientSpace.positive_roots"]], "root() (sage.combinat.root_system.type_f.ambientspace method)": [[257, "sage.combinat.root_system.type_F.AmbientSpace.root"]], "sage.combinat.root_system.type_f": [[257, "module-sage.combinat.root_system.type_F"]], "simple_root() (sage.combinat.root_system.type_f.ambientspace method)": [[257, "sage.combinat.root_system.type_F.AmbientSpace.simple_root"]], "cartantype (class in sage.combinat.root_system.type_f_affine)": [[258, "sage.combinat.root_system.type_F_affine.CartanType"]], "ascii_art() (sage.combinat.root_system.type_f_affine.cartantype method)": [[258, "sage.combinat.root_system.type_F_affine.CartanType.ascii_art"]], "dynkin_diagram() (sage.combinat.root_system.type_f_affine.cartantype method)": [[258, "sage.combinat.root_system.type_F_affine.CartanType.dynkin_diagram"]], "sage.combinat.root_system.type_f_affine": [[258, "module-sage.combinat.root_system.type_F_affine"]], "ambientspace (class in sage.combinat.root_system.type_g)": [[259, "sage.combinat.root_system.type_G.AmbientSpace"]], "ambientspace (sage.combinat.root_system.type_g.cartantype attribute)": [[259, "sage.combinat.root_system.type_G.CartanType.AmbientSpace"]], "cartantype (class in sage.combinat.root_system.type_g)": [[259, "sage.combinat.root_system.type_G.CartanType"]], "ascii_art() (sage.combinat.root_system.type_g.cartantype method)": [[259, "sage.combinat.root_system.type_G.CartanType.ascii_art"]], "coxeter_number() (sage.combinat.root_system.type_g.cartantype method)": [[259, "sage.combinat.root_system.type_G.CartanType.coxeter_number"]], "dimension() (sage.combinat.root_system.type_g.ambientspace method)": [[259, "sage.combinat.root_system.type_G.AmbientSpace.dimension"]], "dual() (sage.combinat.root_system.type_g.cartantype method)": [[259, "sage.combinat.root_system.type_G.CartanType.dual"]], "dual_coxeter_number() (sage.combinat.root_system.type_g.cartantype method)": [[259, "sage.combinat.root_system.type_G.CartanType.dual_coxeter_number"]], "dynkin_diagram() (sage.combinat.root_system.type_g.cartantype method)": [[259, "sage.combinat.root_system.type_G.CartanType.dynkin_diagram"]], "fundamental_weights() (sage.combinat.root_system.type_g.ambientspace method)": [[259, "sage.combinat.root_system.type_G.AmbientSpace.fundamental_weights"]], "negative_roots() (sage.combinat.root_system.type_g.ambientspace method)": [[259, "sage.combinat.root_system.type_G.AmbientSpace.negative_roots"]], "positive_roots() (sage.combinat.root_system.type_g.ambientspace method)": [[259, "sage.combinat.root_system.type_G.AmbientSpace.positive_roots"]], "sage.combinat.root_system.type_g": [[259, "module-sage.combinat.root_system.type_G"]], "simple_root() (sage.combinat.root_system.type_g.ambientspace method)": [[259, "sage.combinat.root_system.type_G.AmbientSpace.simple_root"]], "cartantype (class in sage.combinat.root_system.type_g_affine)": [[260, "sage.combinat.root_system.type_G_affine.CartanType"]], "ascii_art() (sage.combinat.root_system.type_g_affine.cartantype method)": [[260, "sage.combinat.root_system.type_G_affine.CartanType.ascii_art"]], "dynkin_diagram() (sage.combinat.root_system.type_g_affine.cartantype method)": [[260, "sage.combinat.root_system.type_G_affine.CartanType.dynkin_diagram"]], "sage.combinat.root_system.type_g_affine": [[260, "module-sage.combinat.root_system.type_G_affine"]], "cartantype (class in sage.combinat.root_system.type_h)": [[261, "sage.combinat.root_system.type_H.CartanType"]], "coxeter_diagram() (sage.combinat.root_system.type_h.cartantype method)": [[261, "sage.combinat.root_system.type_H.CartanType.coxeter_diagram"]], "coxeter_number() (sage.combinat.root_system.type_h.cartantype method)": [[261, "sage.combinat.root_system.type_H.CartanType.coxeter_number"]], "sage.combinat.root_system.type_h": [[261, "module-sage.combinat.root_system.type_H"]], "cartantype (class in sage.combinat.root_system.type_i)": [[262, "sage.combinat.root_system.type_I.CartanType"]], "coxeter_diagram() (sage.combinat.root_system.type_i.cartantype method)": [[262, "sage.combinat.root_system.type_I.CartanType.coxeter_diagram"]], "coxeter_number() (sage.combinat.root_system.type_i.cartantype method)": [[262, "sage.combinat.root_system.type_I.CartanType.coxeter_number"]], "index_set() (sage.combinat.root_system.type_i.cartantype method)": [[262, "sage.combinat.root_system.type_I.CartanType.index_set"]], "rank() (sage.combinat.root_system.type_i.cartantype method)": [[262, "sage.combinat.root_system.type_I.CartanType.rank"]], "sage.combinat.root_system.type_i": [[262, "module-sage.combinat.root_system.type_I"]], "cartantype (class in sage.combinat.root_system.type_q)": [[263, "sage.combinat.root_system.type_Q.CartanType"]], "dual() (sage.combinat.root_system.type_q.cartantype method)": [[263, "sage.combinat.root_system.type_Q.CartanType.dual"]], "index_set() (sage.combinat.root_system.type_q.cartantype method)": [[263, "sage.combinat.root_system.type_Q.CartanType.index_set"]], "is_irreducible() (sage.combinat.root_system.type_q.cartantype method)": [[263, "sage.combinat.root_system.type_Q.CartanType.is_irreducible"]], "is_simply_laced() (sage.combinat.root_system.type_q.cartantype method)": [[263, "sage.combinat.root_system.type_Q.CartanType.is_simply_laced"]], "root_system() (sage.combinat.root_system.type_q.cartantype method)": [[263, "sage.combinat.root_system.type_Q.CartanType.root_system"]], "sage.combinat.root_system.type_q": [[263, "module-sage.combinat.root_system.type_Q"]], "ambientspace (class in sage.combinat.root_system.type_affine)": [[264, "sage.combinat.root_system.type_affine.AmbientSpace"]], "ambientspace.element (class in sage.combinat.root_system.type_affine)": [[264, "sage.combinat.root_system.type_affine.AmbientSpace.Element"]], "associated_coroot() (sage.combinat.root_system.type_affine.ambientspace.element method)": [[264, "sage.combinat.root_system.type_affine.AmbientSpace.Element.associated_coroot"]], "coroot_lattice() (sage.combinat.root_system.type_affine.ambientspace method)": [[264, "sage.combinat.root_system.type_affine.AmbientSpace.coroot_lattice"]], "fundamental_weight() (sage.combinat.root_system.type_affine.ambientspace method)": [[264, "sage.combinat.root_system.type_affine.AmbientSpace.fundamental_weight"]], "inner_product() (sage.combinat.root_system.type_affine.ambientspace.element method)": [[264, "sage.combinat.root_system.type_affine.AmbientSpace.Element.inner_product"]], "is_extended() (sage.combinat.root_system.type_affine.ambientspace method)": [[264, "sage.combinat.root_system.type_affine.AmbientSpace.is_extended"]], "sage.combinat.root_system.type_affine": [[264, "module-sage.combinat.root_system.type_affine"]], "scalar() (sage.combinat.root_system.type_affine.ambientspace.element method)": [[264, "sage.combinat.root_system.type_affine.AmbientSpace.Element.scalar"]], "simple_coroot() (sage.combinat.root_system.type_affine.ambientspace method)": [[264, "sage.combinat.root_system.type_affine.AmbientSpace.simple_coroot"]], "simple_root() (sage.combinat.root_system.type_affine.ambientspace method)": [[264, "sage.combinat.root_system.type_affine.AmbientSpace.simple_root"]], "smallest_base_ring() (sage.combinat.root_system.type_affine.ambientspace class method)": [[264, "sage.combinat.root_system.type_affine.AmbientSpace.smallest_base_ring"]], "ambientspace (class in sage.combinat.root_system.type_dual)": [[265, "sage.combinat.root_system.type_dual.AmbientSpace"]], "ambientspace (sage.combinat.root_system.type_dual.cartantype_finite attribute)": [[265, "sage.combinat.root_system.type_dual.CartanType_finite.AmbientSpace"]], "cartantype (class in sage.combinat.root_system.type_dual)": [[265, "sage.combinat.root_system.type_dual.CartanType"]], "cartantype_affine (class in sage.combinat.root_system.type_dual)": [[265, "sage.combinat.root_system.type_dual.CartanType_affine"]], "cartantype_finite (class in sage.combinat.root_system.type_dual)": [[265, "sage.combinat.root_system.type_dual.CartanType_finite"]], "ascii_art() (sage.combinat.root_system.type_dual.cartantype method)": [[265, "sage.combinat.root_system.type_dual.CartanType.ascii_art"]], "basic_untwisted() (sage.combinat.root_system.type_dual.cartantype_affine method)": [[265, "sage.combinat.root_system.type_dual.CartanType_affine.basic_untwisted"]], "classical() (sage.combinat.root_system.type_dual.cartantype_affine method)": [[265, "sage.combinat.root_system.type_dual.CartanType_affine.classical"]], "dimension() (sage.combinat.root_system.type_dual.ambientspace method)": [[265, "sage.combinat.root_system.type_dual.AmbientSpace.dimension"]], "dual() (sage.combinat.root_system.type_dual.cartantype method)": [[265, "sage.combinat.root_system.type_dual.CartanType.dual"]], "dynkin_diagram() (sage.combinat.root_system.type_dual.cartantype method)": [[265, "sage.combinat.root_system.type_dual.CartanType.dynkin_diagram"]], "fundamental_weights() (sage.combinat.root_system.type_dual.ambientspace method)": [[265, "sage.combinat.root_system.type_dual.AmbientSpace.fundamental_weights"]], "sage.combinat.root_system.type_dual": [[265, "module-sage.combinat.root_system.type_dual"]], "simple_root() (sage.combinat.root_system.type_dual.ambientspace method)": [[265, "sage.combinat.root_system.type_dual.AmbientSpace.simple_root"]], "special_node() (sage.combinat.root_system.type_dual.cartantype_affine method)": [[265, "sage.combinat.root_system.type_dual.CartanType_affine.special_node"]], "cartantypefolded (class in sage.combinat.root_system.type_folded)": [[266, "sage.combinat.root_system.type_folded.CartanTypeFolded"]], "cartan_type() (sage.combinat.root_system.type_folded.cartantypefolded method)": [[266, "sage.combinat.root_system.type_folded.CartanTypeFolded.cartan_type"]], "folding_of() (sage.combinat.root_system.type_folded.cartantypefolded method)": [[266, "sage.combinat.root_system.type_folded.CartanTypeFolded.folding_of"]], "folding_orbit() (sage.combinat.root_system.type_folded.cartantypefolded method)": [[266, "sage.combinat.root_system.type_folded.CartanTypeFolded.folding_orbit"]], "sage.combinat.root_system.type_folded": [[266, "module-sage.combinat.root_system.type_folded"]], "scaling_factors() (sage.combinat.root_system.type_folded.cartantypefolded method)": [[266, "sage.combinat.root_system.type_folded.CartanTypeFolded.scaling_factors"]], "ambientspace (class in sage.combinat.root_system.type_marked)": [[267, "sage.combinat.root_system.type_marked.AmbientSpace"]], "ambientspace (sage.combinat.root_system.type_marked.cartantype_finite attribute)": [[267, "sage.combinat.root_system.type_marked.CartanType_finite.AmbientSpace"]], "cartantype (class in sage.combinat.root_system.type_marked)": [[267, "sage.combinat.root_system.type_marked.CartanType"]], "cartantype_affine (class in sage.combinat.root_system.type_marked)": [[267, "sage.combinat.root_system.type_marked.CartanType_affine"]], "cartantype_finite (class in sage.combinat.root_system.type_marked)": [[267, "sage.combinat.root_system.type_marked.CartanType_finite"]], "affine() (sage.combinat.root_system.type_marked.cartantype_finite method)": [[267, "sage.combinat.root_system.type_marked.CartanType_finite.affine"]], "ascii_art() (sage.combinat.root_system.type_marked.cartantype method)": [[267, "sage.combinat.root_system.type_marked.CartanType.ascii_art"]], "basic_untwisted() (sage.combinat.root_system.type_marked.cartantype_affine method)": [[267, "sage.combinat.root_system.type_marked.CartanType_affine.basic_untwisted"]], "classical() (sage.combinat.root_system.type_marked.cartantype_affine method)": [[267, "sage.combinat.root_system.type_marked.CartanType_affine.classical"]], "dimension() (sage.combinat.root_system.type_marked.ambientspace method)": [[267, "sage.combinat.root_system.type_marked.AmbientSpace.dimension"]], "dual() (sage.combinat.root_system.type_marked.cartantype method)": [[267, "sage.combinat.root_system.type_marked.CartanType.dual"]], "dynkin_diagram() (sage.combinat.root_system.type_marked.cartantype method)": [[267, "sage.combinat.root_system.type_marked.CartanType.dynkin_diagram"]], "fundamental_weight() (sage.combinat.root_system.type_marked.ambientspace method)": [[267, "sage.combinat.root_system.type_marked.AmbientSpace.fundamental_weight"]], "is_untwisted_affine() (sage.combinat.root_system.type_marked.cartantype_affine method)": [[267, "sage.combinat.root_system.type_marked.CartanType_affine.is_untwisted_affine"]], "marked_nodes() (sage.combinat.root_system.type_marked.cartantype method)": [[267, "sage.combinat.root_system.type_marked.CartanType.marked_nodes"]], "relabel() (sage.combinat.root_system.type_marked.cartantype method)": [[267, "sage.combinat.root_system.type_marked.CartanType.relabel"]], "sage.combinat.root_system.type_marked": [[267, "module-sage.combinat.root_system.type_marked"]], "simple_root() (sage.combinat.root_system.type_marked.ambientspace method)": [[267, "sage.combinat.root_system.type_marked.AmbientSpace.simple_root"]], "special_node() (sage.combinat.root_system.type_marked.cartantype_affine method)": [[267, "sage.combinat.root_system.type_marked.CartanType_affine.special_node"]], "type() (sage.combinat.root_system.type_marked.cartantype method)": [[267, "sage.combinat.root_system.type_marked.CartanType.type"]], "ambientspace (class in sage.combinat.root_system.type_reducible)": [[268, "sage.combinat.root_system.type_reducible.AmbientSpace"]], "ambientspace (sage.combinat.root_system.type_reducible.cartantype attribute)": [[268, "sage.combinat.root_system.type_reducible.CartanType.AmbientSpace"]], "cartantype (class in sage.combinat.root_system.type_reducible)": [[268, "sage.combinat.root_system.type_reducible.CartanType"]], "ambient_spaces() (sage.combinat.root_system.type_reducible.ambientspace method)": [[268, "sage.combinat.root_system.type_reducible.AmbientSpace.ambient_spaces"]], "ascii_art() (sage.combinat.root_system.type_reducible.cartantype method)": [[268, "sage.combinat.root_system.type_reducible.CartanType.ascii_art"]], "cartan_matrix() (sage.combinat.root_system.type_reducible.cartantype method)": [[268, "sage.combinat.root_system.type_reducible.CartanType.cartan_matrix"]], "cartan_type() (sage.combinat.root_system.type_reducible.ambientspace method)": [[268, "sage.combinat.root_system.type_reducible.AmbientSpace.cartan_type"]], "component_types() (sage.combinat.root_system.type_reducible.ambientspace method)": [[268, "sage.combinat.root_system.type_reducible.AmbientSpace.component_types"]], "component_types() (sage.combinat.root_system.type_reducible.cartantype method)": [[268, "sage.combinat.root_system.type_reducible.CartanType.component_types"]], "coxeter_diagram() (sage.combinat.root_system.type_reducible.cartantype method)": [[268, "sage.combinat.root_system.type_reducible.CartanType.coxeter_diagram"]], "dimension() (sage.combinat.root_system.type_reducible.ambientspace method)": [[268, "sage.combinat.root_system.type_reducible.AmbientSpace.dimension"]], "dual() (sage.combinat.root_system.type_reducible.cartantype method)": [[268, "sage.combinat.root_system.type_reducible.CartanType.dual"]], "dynkin_diagram() (sage.combinat.root_system.type_reducible.cartantype method)": [[268, "sage.combinat.root_system.type_reducible.CartanType.dynkin_diagram"]], "fundamental_weights() (sage.combinat.root_system.type_reducible.ambientspace method)": [[268, "sage.combinat.root_system.type_reducible.AmbientSpace.fundamental_weights"]], "index_set() (sage.combinat.root_system.type_reducible.cartantype method)": [[268, "sage.combinat.root_system.type_reducible.CartanType.index_set"]], "inject_weights() (sage.combinat.root_system.type_reducible.ambientspace method)": [[268, "sage.combinat.root_system.type_reducible.AmbientSpace.inject_weights"]], "is_affine() (sage.combinat.root_system.type_reducible.cartantype method)": [[268, "sage.combinat.root_system.type_reducible.CartanType.is_affine"]], "is_finite() (sage.combinat.root_system.type_reducible.cartantype method)": [[268, "sage.combinat.root_system.type_reducible.CartanType.is_finite"]], "is_irreducible() (sage.combinat.root_system.type_reducible.cartantype method)": [[268, "sage.combinat.root_system.type_reducible.CartanType.is_irreducible"]], "negative_roots() (sage.combinat.root_system.type_reducible.ambientspace method)": [[268, "sage.combinat.root_system.type_reducible.AmbientSpace.negative_roots"]], "positive_roots() (sage.combinat.root_system.type_reducible.ambientspace method)": [[268, "sage.combinat.root_system.type_reducible.AmbientSpace.positive_roots"]], "rank() (sage.combinat.root_system.type_reducible.cartantype method)": [[268, "sage.combinat.root_system.type_reducible.CartanType.rank"]], "sage.combinat.root_system.type_reducible": [[268, "module-sage.combinat.root_system.type_reducible"]], "simple_coroot() (sage.combinat.root_system.type_reducible.ambientspace method)": [[268, "sage.combinat.root_system.type_reducible.AmbientSpace.simple_coroot"]], "simple_root() (sage.combinat.root_system.type_reducible.ambientspace method)": [[268, "sage.combinat.root_system.type_reducible.AmbientSpace.simple_root"]], "type() (sage.combinat.root_system.type_reducible.cartantype method)": [[268, "sage.combinat.root_system.type_reducible.CartanType.type"]], "ambientspace (class in sage.combinat.root_system.type_relabel)": [[269, "sage.combinat.root_system.type_relabel.AmbientSpace"]], "ambientspace (sage.combinat.root_system.type_relabel.cartantype_finite attribute)": [[269, "sage.combinat.root_system.type_relabel.CartanType_finite.AmbientSpace"]], "cartantype (class in sage.combinat.root_system.type_relabel)": [[269, "sage.combinat.root_system.type_relabel.CartanType"]], "cartantype_affine (class in sage.combinat.root_system.type_relabel)": [[269, "sage.combinat.root_system.type_relabel.CartanType_affine"]], "cartantype_finite (class in sage.combinat.root_system.type_relabel)": [[269, "sage.combinat.root_system.type_relabel.CartanType_finite"]], "affine() (sage.combinat.root_system.type_relabel.cartantype_finite method)": [[269, "sage.combinat.root_system.type_relabel.CartanType_finite.affine"]], "ascii_art() (sage.combinat.root_system.type_relabel.cartantype method)": [[269, "sage.combinat.root_system.type_relabel.CartanType.ascii_art"]], "basic_untwisted() (sage.combinat.root_system.type_relabel.cartantype_affine method)": [[269, "sage.combinat.root_system.type_relabel.CartanType_affine.basic_untwisted"]], "classical() (sage.combinat.root_system.type_relabel.cartantype_affine method)": [[269, "sage.combinat.root_system.type_relabel.CartanType_affine.classical"]], "coxeter_diagram() (sage.combinat.root_system.type_relabel.cartantype method)": [[269, "sage.combinat.root_system.type_relabel.CartanType.coxeter_diagram"]], "dimension() (sage.combinat.root_system.type_relabel.ambientspace method)": [[269, "sage.combinat.root_system.type_relabel.AmbientSpace.dimension"]], "dual() (sage.combinat.root_system.type_relabel.cartantype method)": [[269, "sage.combinat.root_system.type_relabel.CartanType.dual"]], "dynkin_diagram() (sage.combinat.root_system.type_relabel.cartantype method)": [[269, "sage.combinat.root_system.type_relabel.CartanType.dynkin_diagram"]], "fundamental_weight() (sage.combinat.root_system.type_relabel.ambientspace method)": [[269, "sage.combinat.root_system.type_relabel.AmbientSpace.fundamental_weight"]], "index_set() (sage.combinat.root_system.type_relabel.cartantype method)": [[269, "sage.combinat.root_system.type_relabel.CartanType.index_set"]], "is_untwisted_affine() (sage.combinat.root_system.type_relabel.cartantype_affine method)": [[269, "sage.combinat.root_system.type_relabel.CartanType_affine.is_untwisted_affine"]], "sage.combinat.root_system.type_relabel": [[269, "module-sage.combinat.root_system.type_relabel"]], "simple_root() (sage.combinat.root_system.type_relabel.ambientspace method)": [[269, "sage.combinat.root_system.type_relabel.AmbientSpace.simple_root"]], "special_node() (sage.combinat.root_system.type_relabel.cartantype_affine method)": [[269, "sage.combinat.root_system.type_relabel.CartanType_affine.special_node"]], "type() (sage.combinat.root_system.type_relabel.cartantype method)": [[269, "sage.combinat.root_system.type_relabel.CartanType.type"]], "ambientspace (class in sage.combinat.root_system.type_super_a)": [[270, "sage.combinat.root_system.type_super_A.AmbientSpace"]], "ambientspace (sage.combinat.root_system.type_super_a.cartantype attribute)": [[270, "sage.combinat.root_system.type_super_A.CartanType.AmbientSpace"]], "ambientspace.element (class in sage.combinat.root_system.type_super_a)": [[270, "sage.combinat.root_system.type_super_A.AmbientSpace.Element"]], "cartantype (class in sage.combinat.root_system.type_super_a)": [[270, "sage.combinat.root_system.type_super_A.CartanType"]], "ascii_art() (sage.combinat.root_system.type_super_a.cartantype method)": [[270, "sage.combinat.root_system.type_super_A.CartanType.ascii_art"]], "associated_coroot() (sage.combinat.root_system.type_super_a.ambientspace.element method)": [[270, "sage.combinat.root_system.type_super_A.AmbientSpace.Element.associated_coroot"]], "cartan_matrix() (sage.combinat.root_system.type_super_a.cartantype method)": [[270, "sage.combinat.root_system.type_super_A.CartanType.cartan_matrix"]], "dimension() (sage.combinat.root_system.type_super_a.ambientspace method)": [[270, "sage.combinat.root_system.type_super_A.AmbientSpace.dimension"]], "dot_product() (sage.combinat.root_system.type_super_a.ambientspace.element method)": [[270, "sage.combinat.root_system.type_super_A.AmbientSpace.Element.dot_product"]], "dual() (sage.combinat.root_system.type_super_a.cartantype method)": [[270, "sage.combinat.root_system.type_super_A.CartanType.dual"]], "dynkin_diagram() (sage.combinat.root_system.type_super_a.cartantype method)": [[270, "sage.combinat.root_system.type_super_A.CartanType.dynkin_diagram"]], "fundamental_weight() (sage.combinat.root_system.type_super_a.ambientspace method)": [[270, "sage.combinat.root_system.type_super_A.AmbientSpace.fundamental_weight"]], "has_descent() (sage.combinat.root_system.type_super_a.ambientspace.element method)": [[270, "sage.combinat.root_system.type_super_A.AmbientSpace.Element.has_descent"]], "highest_root() (sage.combinat.root_system.type_super_a.ambientspace method)": [[270, "sage.combinat.root_system.type_super_A.AmbientSpace.highest_root"]], "index_set() (sage.combinat.root_system.type_super_a.cartantype method)": [[270, "sage.combinat.root_system.type_super_A.CartanType.index_set"]], "inner_product() (sage.combinat.root_system.type_super_a.ambientspace.element method)": [[270, "sage.combinat.root_system.type_super_A.AmbientSpace.Element.inner_product"]], "is_affine() (sage.combinat.root_system.type_super_a.cartantype method)": [[270, "sage.combinat.root_system.type_super_A.CartanType.is_affine"]], "is_dominant_weight() (sage.combinat.root_system.type_super_a.ambientspace.element method)": [[270, "sage.combinat.root_system.type_super_A.AmbientSpace.Element.is_dominant_weight"]], "is_finite() (sage.combinat.root_system.type_super_a.cartantype method)": [[270, "sage.combinat.root_system.type_super_A.CartanType.is_finite"]], "is_irreducible() (sage.combinat.root_system.type_super_a.cartantype method)": [[270, "sage.combinat.root_system.type_super_A.CartanType.is_irreducible"]], "negative_even_roots() (sage.combinat.root_system.type_super_a.ambientspace method)": [[270, "sage.combinat.root_system.type_super_A.AmbientSpace.negative_even_roots"]], "negative_odd_roots() (sage.combinat.root_system.type_super_a.ambientspace method)": [[270, "sage.combinat.root_system.type_super_A.AmbientSpace.negative_odd_roots"]], "negative_roots() (sage.combinat.root_system.type_super_a.ambientspace method)": [[270, "sage.combinat.root_system.type_super_A.AmbientSpace.negative_roots"]], "positive_even_roots() (sage.combinat.root_system.type_super_a.ambientspace method)": [[270, "sage.combinat.root_system.type_super_A.AmbientSpace.positive_even_roots"]], "positive_odd_roots() (sage.combinat.root_system.type_super_a.ambientspace method)": [[270, "sage.combinat.root_system.type_super_A.AmbientSpace.positive_odd_roots"]], "positive_roots() (sage.combinat.root_system.type_super_a.ambientspace method)": [[270, "sage.combinat.root_system.type_super_A.AmbientSpace.positive_roots"]], "relabel() (sage.combinat.root_system.type_super_a.cartantype method)": [[270, "sage.combinat.root_system.type_super_A.CartanType.relabel"]], "root_system() (sage.combinat.root_system.type_super_a.cartantype method)": [[270, "sage.combinat.root_system.type_super_A.CartanType.root_system"]], "sage.combinat.root_system.type_super_a": [[270, "module-sage.combinat.root_system.type_super_A"]], "scalar() (sage.combinat.root_system.type_super_a.ambientspace.element method)": [[270, "sage.combinat.root_system.type_super_A.AmbientSpace.Element.scalar"]], "simple_coroot() (sage.combinat.root_system.type_super_a.ambientspace method)": [[270, "sage.combinat.root_system.type_super_A.AmbientSpace.simple_coroot"]], "simple_root() (sage.combinat.root_system.type_super_a.ambientspace method)": [[270, "sage.combinat.root_system.type_super_A.AmbientSpace.simple_root"]], "smallest_base_ring() (sage.combinat.root_system.type_super_a.ambientspace class method)": [[270, "sage.combinat.root_system.type_super_A.AmbientSpace.smallest_base_ring"]], "symmetrizer() (sage.combinat.root_system.type_super_a.cartantype method)": [[270, "sage.combinat.root_system.type_super_A.CartanType.symmetrizer"]], "type() (sage.combinat.root_system.type_super_a.cartantype method)": [[270, "sage.combinat.root_system.type_super_A.CartanType.type"]], "weightlatticerealizations (class in sage.combinat.root_system.weight_lattice_realizations)": [[271, "sage.combinat.root_system.weight_lattice_realizations.WeightLatticeRealizations"]], "weightlatticerealizations.elementmethods (class in sage.combinat.root_system.weight_lattice_realizations)": [[271, "sage.combinat.root_system.weight_lattice_realizations.WeightLatticeRealizations.ElementMethods"]], "weightlatticerealizations.parentmethods (class in sage.combinat.root_system.weight_lattice_realizations)": [[271, "sage.combinat.root_system.weight_lattice_realizations.WeightLatticeRealizations.ParentMethods"]], "dynkin_diagram_automorphism_of_alcove_morphism() (sage.combinat.root_system.weight_lattice_realizations.weightlatticerealizations.parentmethods method)": [[271, "sage.combinat.root_system.weight_lattice_realizations.WeightLatticeRealizations.ParentMethods.dynkin_diagram_automorphism_of_alcove_morphism"]], "embed_at_level() (sage.combinat.root_system.weight_lattice_realizations.weightlatticerealizations.parentmethods method)": [[271, "sage.combinat.root_system.weight_lattice_realizations.WeightLatticeRealizations.ParentMethods.embed_at_level"]], "fundamental_weight() (sage.combinat.root_system.weight_lattice_realizations.weightlatticerealizations.parentmethods method)": [[271, "sage.combinat.root_system.weight_lattice_realizations.WeightLatticeRealizations.ParentMethods.fundamental_weight"]], "fundamental_weights() (sage.combinat.root_system.weight_lattice_realizations.weightlatticerealizations.parentmethods method)": [[271, "sage.combinat.root_system.weight_lattice_realizations.WeightLatticeRealizations.ParentMethods.fundamental_weights"]], "is_extended() (sage.combinat.root_system.weight_lattice_realizations.weightlatticerealizations.parentmethods method)": [[271, "sage.combinat.root_system.weight_lattice_realizations.WeightLatticeRealizations.ParentMethods.is_extended"]], "reduced_word_of_alcove_morphism() (sage.combinat.root_system.weight_lattice_realizations.weightlatticerealizations.parentmethods method)": [[271, "sage.combinat.root_system.weight_lattice_realizations.WeightLatticeRealizations.ParentMethods.reduced_word_of_alcove_morphism"]], "reduced_word_of_translation() (sage.combinat.root_system.weight_lattice_realizations.weightlatticerealizations.parentmethods method)": [[271, "sage.combinat.root_system.weight_lattice_realizations.WeightLatticeRealizations.ParentMethods.reduced_word_of_translation"]], "rho() (sage.combinat.root_system.weight_lattice_realizations.weightlatticerealizations.parentmethods method)": [[271, "sage.combinat.root_system.weight_lattice_realizations.WeightLatticeRealizations.ParentMethods.rho"]], "rho_classical() (sage.combinat.root_system.weight_lattice_realizations.weightlatticerealizations.parentmethods method)": [[271, "sage.combinat.root_system.weight_lattice_realizations.WeightLatticeRealizations.ParentMethods.rho_classical"]], "sage.combinat.root_system.weight_lattice_realizations": [[271, "module-sage.combinat.root_system.weight_lattice_realizations"]], "signs_of_alcovewalk() (sage.combinat.root_system.weight_lattice_realizations.weightlatticerealizations.parentmethods method)": [[271, "sage.combinat.root_system.weight_lattice_realizations.WeightLatticeRealizations.ParentMethods.signs_of_alcovewalk"]], "simple_root() (sage.combinat.root_system.weight_lattice_realizations.weightlatticerealizations.parentmethods method)": [[271, "sage.combinat.root_system.weight_lattice_realizations.WeightLatticeRealizations.ParentMethods.simple_root"]], "super_categories() (sage.combinat.root_system.weight_lattice_realizations.weightlatticerealizations method)": [[271, "sage.combinat.root_system.weight_lattice_realizations.WeightLatticeRealizations.super_categories"]], "symmetric_form() (sage.combinat.root_system.weight_lattice_realizations.weightlatticerealizations.elementmethods method)": [[271, "sage.combinat.root_system.weight_lattice_realizations.WeightLatticeRealizations.ElementMethods.symmetric_form"]], "to_weight_space() (sage.combinat.root_system.weight_lattice_realizations.weightlatticerealizations.elementmethods method)": [[271, "sage.combinat.root_system.weight_lattice_realizations.WeightLatticeRealizations.ElementMethods.to_weight_space"]], "weyl_dimension() (sage.combinat.root_system.weight_lattice_realizations.weightlatticerealizations.parentmethods method)": [[271, "sage.combinat.root_system.weight_lattice_realizations.WeightLatticeRealizations.ParentMethods.weyl_dimension"]], "element (sage.combinat.root_system.weight_space.weightspace attribute)": [[272, "sage.combinat.root_system.weight_space.WeightSpace.Element"]], "weightspace (class in sage.combinat.root_system.weight_space)": [[272, "sage.combinat.root_system.weight_space.WeightSpace"]], "weightspaceelement (class in sage.combinat.root_system.weight_space)": [[272, "sage.combinat.root_system.weight_space.WeightSpaceElement"]], "basis_extension() (sage.combinat.root_system.weight_space.weightspace method)": [[272, "sage.combinat.root_system.weight_space.WeightSpace.basis_extension"]], "fundamental_weight() (sage.combinat.root_system.weight_space.weightspace method)": [[272, "sage.combinat.root_system.weight_space.WeightSpace.fundamental_weight"]], "is_dominant() (sage.combinat.root_system.weight_space.weightspaceelement method)": [[272, "sage.combinat.root_system.weight_space.WeightSpaceElement.is_dominant"]], "is_extended() (sage.combinat.root_system.weight_space.weightspace method)": [[272, "sage.combinat.root_system.weight_space.WeightSpace.is_extended"]], "sage.combinat.root_system.weight_space": [[272, "module-sage.combinat.root_system.weight_space"]], "scalar() (sage.combinat.root_system.weight_space.weightspaceelement method)": [[272, "sage.combinat.root_system.weight_space.WeightSpaceElement.scalar"]], "simple_root() (sage.combinat.root_system.weight_space.weightspace method)": [[272, "sage.combinat.root_system.weight_space.WeightSpace.simple_root"]], "to_ambient() (sage.combinat.root_system.weight_space.weightspaceelement method)": [[272, "sage.combinat.root_system.weight_space.WeightSpaceElement.to_ambient"]], "to_ambient_space_morphism() (sage.combinat.root_system.weight_space.weightspace method)": [[272, "sage.combinat.root_system.weight_space.WeightSpace.to_ambient_space_morphism"]], "to_weight_space() (sage.combinat.root_system.weight_space.weightspaceelement method)": [[272, "sage.combinat.root_system.weight_space.WeightSpaceElement.to_weight_space"]], "weightring (class in sage.combinat.root_system.weyl_characters)": [[273, "sage.combinat.root_system.weyl_characters.WeightRing"]], "weightring.element (class in sage.combinat.root_system.weyl_characters)": [[273, "sage.combinat.root_system.weyl_characters.WeightRing.Element"]], "weylcharacterring (class in sage.combinat.root_system.weyl_characters)": [[273, "sage.combinat.root_system.weyl_characters.WeylCharacterRing"]], "weylcharacterring.element (class in sage.combinat.root_system.weyl_characters)": [[273, "sage.combinat.root_system.weyl_characters.WeylCharacterRing.Element"]], "adams_operation() (sage.combinat.root_system.weyl_characters.weylcharacterring.element method)": [[273, "sage.combinat.root_system.weyl_characters.WeylCharacterRing.Element.adams_operation"]], "adams_operator() (sage.combinat.root_system.weyl_characters.weylcharacterring.element method)": [[273, "sage.combinat.root_system.weyl_characters.WeylCharacterRing.Element.adams_operator"]], "adjoint_representation() (sage.combinat.root_system.weyl_characters.weylcharacterring method)": [[273, "sage.combinat.root_system.weyl_characters.WeylCharacterRing.adjoint_representation"]], "affine_reflect() (sage.combinat.root_system.weyl_characters.weylcharacterring method)": [[273, "sage.combinat.root_system.weyl_characters.WeylCharacterRing.affine_reflect"]], "ambient() (sage.combinat.root_system.weyl_characters.weylcharacterring method)": [[273, "sage.combinat.root_system.weyl_characters.WeylCharacterRing.ambient"]], "base_ring() (sage.combinat.root_system.weyl_characters.weylcharacterring method)": [[273, "sage.combinat.root_system.weyl_characters.WeylCharacterRing.base_ring"]], "branch() (sage.combinat.root_system.weyl_characters.weylcharacterring.element method)": [[273, "sage.combinat.root_system.weyl_characters.WeylCharacterRing.Element.branch"]], "cartan_type() (sage.combinat.root_system.weyl_characters.weightring method)": [[273, "sage.combinat.root_system.weyl_characters.WeightRing.cartan_type"]], "cartan_type() (sage.combinat.root_system.weyl_characters.weightring.element method)": [[273, "sage.combinat.root_system.weyl_characters.WeightRing.Element.cartan_type"]], "cartan_type() (sage.combinat.root_system.weyl_characters.weylcharacterring method)": [[273, "sage.combinat.root_system.weyl_characters.WeylCharacterRing.cartan_type"]], "cartan_type() (sage.combinat.root_system.weyl_characters.weylcharacterring.element method)": [[273, "sage.combinat.root_system.weyl_characters.WeylCharacterRing.Element.cartan_type"]], "char_from_weights() (sage.combinat.root_system.weyl_characters.weylcharacterring method)": [[273, "sage.combinat.root_system.weyl_characters.WeylCharacterRing.char_from_weights"]], "character() (sage.combinat.root_system.weyl_characters.weightring.element method)": [[273, "sage.combinat.root_system.weyl_characters.WeightRing.Element.character"]], "degree() (sage.combinat.root_system.weyl_characters.weylcharacterring.element method)": [[273, "sage.combinat.root_system.weyl_characters.WeylCharacterRing.Element.degree"]], "demazure() (sage.combinat.root_system.weyl_characters.weightring.element method)": [[273, "sage.combinat.root_system.weyl_characters.WeightRing.Element.demazure"]], "demazure_character() (sage.combinat.root_system.weyl_characters.weylcharacterring method)": [[273, "sage.combinat.root_system.weyl_characters.WeylCharacterRing.demazure_character"]], "demazure_lusztig() (sage.combinat.root_system.weyl_characters.weightring.element method)": [[273, "sage.combinat.root_system.weyl_characters.WeightRing.Element.demazure_lusztig"]], "dot_reduce() (sage.combinat.root_system.weyl_characters.weylcharacterring method)": [[273, "sage.combinat.root_system.weyl_characters.WeylCharacterRing.dot_reduce"]], "dual() (sage.combinat.root_system.weyl_characters.weylcharacterring.element method)": [[273, "sage.combinat.root_system.weyl_characters.WeylCharacterRing.Element.dual"]], "dynkin_diagram() (sage.combinat.root_system.weyl_characters.weylcharacterring method)": [[273, "sage.combinat.root_system.weyl_characters.WeylCharacterRing.dynkin_diagram"]], "extended_dynkin_diagram() (sage.combinat.root_system.weyl_characters.weylcharacterring method)": [[273, "sage.combinat.root_system.weyl_characters.WeylCharacterRing.extended_dynkin_diagram"]], "exterior_power() (sage.combinat.root_system.weyl_characters.weylcharacterring.element method)": [[273, "sage.combinat.root_system.weyl_characters.WeylCharacterRing.Element.exterior_power"]], "exterior_square() (sage.combinat.root_system.weyl_characters.weylcharacterring.element method)": [[273, "sage.combinat.root_system.weyl_characters.WeylCharacterRing.Element.exterior_square"]], "frobenius_schur_indicator() (sage.combinat.root_system.weyl_characters.weylcharacterring.element method)": [[273, "sage.combinat.root_system.weyl_characters.WeylCharacterRing.Element.frobenius_schur_indicator"]], "fundamental_weights() (sage.combinat.root_system.weyl_characters.weightring method)": [[273, "sage.combinat.root_system.weyl_characters.WeightRing.fundamental_weights"]], "fundamental_weights() (sage.combinat.root_system.weyl_characters.weylcharacterring method)": [[273, "sage.combinat.root_system.weyl_characters.WeylCharacterRing.fundamental_weights"]], "highest_root() (sage.combinat.root_system.weyl_characters.weylcharacterring method)": [[273, "sage.combinat.root_system.weyl_characters.WeylCharacterRing.highest_root"]], "highest_weight() (sage.combinat.root_system.weyl_characters.weylcharacterring.element method)": [[273, "sage.combinat.root_system.weyl_characters.WeylCharacterRing.Element.highest_weight"]], "inner_product() (sage.combinat.root_system.weyl_characters.weylcharacterring.element method)": [[273, "sage.combinat.root_system.weyl_characters.WeylCharacterRing.Element.inner_product"]], "invariant_degree() (sage.combinat.root_system.weyl_characters.weylcharacterring.element method)": [[273, "sage.combinat.root_system.weyl_characters.WeylCharacterRing.Element.invariant_degree"]], "irr_repr() (sage.combinat.root_system.weyl_characters.weylcharacterring method)": [[273, "sage.combinat.root_system.weyl_characters.WeylCharacterRing.irr_repr"]], "irreducible_character_freudenthal() (in module sage.combinat.root_system.weyl_characters)": [[273, "sage.combinat.root_system.weyl_characters.irreducible_character_freudenthal"]], "is_irreducible() (sage.combinat.root_system.weyl_characters.weylcharacterring.element method)": [[273, "sage.combinat.root_system.weyl_characters.WeylCharacterRing.Element.is_irreducible"]], "level() (sage.combinat.root_system.weyl_characters.weylcharacterring method)": [[273, "sage.combinat.root_system.weyl_characters.WeylCharacterRing.level"]], "lift() (sage.combinat.root_system.weyl_characters.weylcharacterring method)": [[273, "sage.combinat.root_system.weyl_characters.WeylCharacterRing.lift"]], "lift_on_basis() (sage.combinat.root_system.weyl_characters.weylcharacterring method)": [[273, "sage.combinat.root_system.weyl_characters.WeylCharacterRing.lift_on_basis"]], "maximal_subgroup() (sage.combinat.root_system.weyl_characters.weylcharacterring method)": [[273, "sage.combinat.root_system.weyl_characters.WeylCharacterRing.maximal_subgroup"]], "maximal_subgroups() (sage.combinat.root_system.weyl_characters.weylcharacterring method)": [[273, "sage.combinat.root_system.weyl_characters.WeylCharacterRing.maximal_subgroups"]], "multiplicity() (sage.combinat.root_system.weyl_characters.weylcharacterring.element method)": [[273, "sage.combinat.root_system.weyl_characters.WeylCharacterRing.Element.multiplicity"]], "one_basis() (sage.combinat.root_system.weyl_characters.weightring method)": [[273, "sage.combinat.root_system.weyl_characters.WeightRing.one_basis"]], "one_basis() (sage.combinat.root_system.weyl_characters.weylcharacterring method)": [[273, "sage.combinat.root_system.weyl_characters.WeylCharacterRing.one_basis"]], "parent() (sage.combinat.root_system.weyl_characters.weightring method)": [[273, "sage.combinat.root_system.weyl_characters.WeightRing.parent"]], "positive_roots() (sage.combinat.root_system.weyl_characters.weightring method)": [[273, "sage.combinat.root_system.weyl_characters.WeightRing.positive_roots"]], "positive_roots() (sage.combinat.root_system.weyl_characters.weylcharacterring method)": [[273, "sage.combinat.root_system.weyl_characters.WeylCharacterRing.positive_roots"]], "product_on_basis() (sage.combinat.root_system.weyl_characters.weightring method)": [[273, "sage.combinat.root_system.weyl_characters.WeightRing.product_on_basis"]], "product_on_basis() (sage.combinat.root_system.weyl_characters.weylcharacterring method)": [[273, "sage.combinat.root_system.weyl_characters.WeylCharacterRing.product_on_basis"]], "rank() (sage.combinat.root_system.weyl_characters.weylcharacterring method)": [[273, "sage.combinat.root_system.weyl_characters.WeylCharacterRing.rank"]], "retract() (sage.combinat.root_system.weyl_characters.weylcharacterring method)": [[273, "sage.combinat.root_system.weyl_characters.WeylCharacterRing.retract"]], "sage.combinat.root_system.weyl_characters": [[273, "module-sage.combinat.root_system.weyl_characters"]], "scale() (sage.combinat.root_system.weyl_characters.weightring.element method)": [[273, "sage.combinat.root_system.weyl_characters.WeightRing.Element.scale"]], "shift() (sage.combinat.root_system.weyl_characters.weightring.element method)": [[273, "sage.combinat.root_system.weyl_characters.WeightRing.Element.shift"]], "simple_coroots() (sage.combinat.root_system.weyl_characters.weylcharacterring method)": [[273, "sage.combinat.root_system.weyl_characters.WeylCharacterRing.simple_coroots"]], "simple_roots() (sage.combinat.root_system.weyl_characters.weightring method)": [[273, "sage.combinat.root_system.weyl_characters.WeightRing.simple_roots"]], "simple_roots() (sage.combinat.root_system.weyl_characters.weylcharacterring method)": [[273, "sage.combinat.root_system.weyl_characters.WeylCharacterRing.simple_roots"]], "some_elements() (sage.combinat.root_system.weyl_characters.weightring method)": [[273, "sage.combinat.root_system.weyl_characters.WeightRing.some_elements"]], "some_elements() (sage.combinat.root_system.weyl_characters.weylcharacterring method)": [[273, "sage.combinat.root_system.weyl_characters.WeylCharacterRing.some_elements"]], "space() (sage.combinat.root_system.weyl_characters.weightring method)": [[273, "sage.combinat.root_system.weyl_characters.WeightRing.space"]], "space() (sage.combinat.root_system.weyl_characters.weylcharacterring method)": [[273, "sage.combinat.root_system.weyl_characters.WeylCharacterRing.space"]], "symmetric_power() (sage.combinat.root_system.weyl_characters.weylcharacterring.element method)": [[273, "sage.combinat.root_system.weyl_characters.WeylCharacterRing.Element.symmetric_power"]], "symmetric_square() (sage.combinat.root_system.weyl_characters.weylcharacterring.element method)": [[273, "sage.combinat.root_system.weyl_characters.WeylCharacterRing.Element.symmetric_square"]], "weight_multiplicities() (sage.combinat.root_system.weyl_characters.weylcharacterring.element method)": [[273, "sage.combinat.root_system.weyl_characters.WeylCharacterRing.Element.weight_multiplicities"]], "weyl_character_ring() (sage.combinat.root_system.weyl_characters.weightring method)": [[273, "sage.combinat.root_system.weyl_characters.WeightRing.weyl_character_ring"]], "weyl_group_action() (sage.combinat.root_system.weyl_characters.weightring.element method)": [[273, "sage.combinat.root_system.weyl_characters.WeightRing.Element.weyl_group_action"]], "wt_repr() (sage.combinat.root_system.weyl_characters.weightring method)": [[273, "sage.combinat.root_system.weyl_characters.WeightRing.wt_repr"]], "classicalweylsubgroup (class in sage.combinat.root_system.weyl_group)": [[274, "sage.combinat.root_system.weyl_group.ClassicalWeylSubgroup"]], "element (sage.combinat.root_system.weyl_group.weylgroup_gens attribute)": [[274, "sage.combinat.root_system.weyl_group.WeylGroup_gens.Element"]], "weylgroup() (in module sage.combinat.root_system.weyl_group)": [[274, "sage.combinat.root_system.weyl_group.WeylGroup"]], "weylgroupelement (class in sage.combinat.root_system.weyl_group)": [[274, "sage.combinat.root_system.weyl_group.WeylGroupElement"]], "weylgroup_gens (class in sage.combinat.root_system.weyl_group)": [[274, "sage.combinat.root_system.weyl_group.WeylGroup_gens"]], "weylgroup_permutation (class in sage.combinat.root_system.weyl_group)": [[274, "sage.combinat.root_system.weyl_group.WeylGroup_permutation"]], "weylgroup_permutation.element (class in sage.combinat.root_system.weyl_group)": [[274, "sage.combinat.root_system.weyl_group.WeylGroup_permutation.Element"]], "action() (sage.combinat.root_system.weyl_group.weylgroupelement method)": [[274, "sage.combinat.root_system.weyl_group.WeylGroupElement.action"]], "apply_simple_reflection() (sage.combinat.root_system.weyl_group.weylgroupelement method)": [[274, "sage.combinat.root_system.weyl_group.WeylGroupElement.apply_simple_reflection"]], "cartan_type() (sage.combinat.root_system.weyl_group.classicalweylsubgroup method)": [[274, "sage.combinat.root_system.weyl_group.ClassicalWeylSubgroup.cartan_type"]], "cartan_type() (sage.combinat.root_system.weyl_group.weylgroup_gens method)": [[274, "sage.combinat.root_system.weyl_group.WeylGroup_gens.cartan_type"]], "cartan_type() (sage.combinat.root_system.weyl_group.weylgroup_permutation method)": [[274, "sage.combinat.root_system.weyl_group.WeylGroup_permutation.cartan_type"]], "character_table() (sage.combinat.root_system.weyl_group.weylgroup_gens method)": [[274, "sage.combinat.root_system.weyl_group.WeylGroup_gens.character_table"]], "classical() (sage.combinat.root_system.weyl_group.weylgroup_gens method)": [[274, "sage.combinat.root_system.weyl_group.WeylGroup_gens.classical"]], "distinguished_reflections() (sage.combinat.root_system.weyl_group.weylgroup_permutation method)": [[274, "sage.combinat.root_system.weyl_group.WeylGroup_permutation.distinguished_reflections"]], "domain() (sage.combinat.root_system.weyl_group.weylgroupelement method)": [[274, "sage.combinat.root_system.weyl_group.WeylGroupElement.domain"]], "domain() (sage.combinat.root_system.weyl_group.weylgroup_gens method)": [[274, "sage.combinat.root_system.weyl_group.WeylGroup_gens.domain"]], "from_morphism() (sage.combinat.root_system.weyl_group.weylgroup_gens method)": [[274, "sage.combinat.root_system.weyl_group.WeylGroup_gens.from_morphism"]], "has_descent() (sage.combinat.root_system.weyl_group.weylgroupelement method)": [[274, "sage.combinat.root_system.weyl_group.WeylGroupElement.has_descent"]], "has_left_descent() (sage.combinat.root_system.weyl_group.weylgroupelement method)": [[274, "sage.combinat.root_system.weyl_group.WeylGroupElement.has_left_descent"]], "has_right_descent() (sage.combinat.root_system.weyl_group.weylgroupelement method)": [[274, "sage.combinat.root_system.weyl_group.WeylGroupElement.has_right_descent"]], "independent_roots() (sage.combinat.root_system.weyl_group.weylgroup_permutation method)": [[274, "sage.combinat.root_system.weyl_group.WeylGroup_permutation.independent_roots"]], "index_set() (sage.combinat.root_system.weyl_group.weylgroup_gens method)": [[274, "sage.combinat.root_system.weyl_group.WeylGroup_gens.index_set"]], "index_set() (sage.combinat.root_system.weyl_group.weylgroup_permutation method)": [[274, "sage.combinat.root_system.weyl_group.WeylGroup_permutation.index_set"]], "iteration() (sage.combinat.root_system.weyl_group.weylgroup_permutation method)": [[274, "sage.combinat.root_system.weyl_group.WeylGroup_permutation.iteration"]], "long_element_hardcoded() (sage.combinat.root_system.weyl_group.weylgroup_gens method)": [[274, "sage.combinat.root_system.weyl_group.WeylGroup_gens.long_element_hardcoded"]], "morphism_matrix() (sage.combinat.root_system.weyl_group.weylgroup_gens method)": [[274, "sage.combinat.root_system.weyl_group.WeylGroup_gens.morphism_matrix"]], "number_of_reflections() (sage.combinat.root_system.weyl_group.weylgroup_permutation method)": [[274, "sage.combinat.root_system.weyl_group.WeylGroup_permutation.number_of_reflections"]], "one() (sage.combinat.root_system.weyl_group.weylgroup_gens method)": [[274, "sage.combinat.root_system.weyl_group.WeylGroup_gens.one"]], "positive_roots() (sage.combinat.root_system.weyl_group.weylgroup_permutation method)": [[274, "sage.combinat.root_system.weyl_group.WeylGroup_permutation.positive_roots"]], "rank() (sage.combinat.root_system.weyl_group.weylgroup_permutation method)": [[274, "sage.combinat.root_system.weyl_group.WeylGroup_permutation.rank"]], "reflection_index_set() (sage.combinat.root_system.weyl_group.weylgroup_permutation method)": [[274, "sage.combinat.root_system.weyl_group.WeylGroup_permutation.reflection_index_set"]], "reflections() (sage.combinat.root_system.weyl_group.weylgroup_gens method)": [[274, "sage.combinat.root_system.weyl_group.WeylGroup_gens.reflections"]], "reflections() (sage.combinat.root_system.weyl_group.weylgroup_permutation method)": [[274, "sage.combinat.root_system.weyl_group.WeylGroup_permutation.reflections"]], "roots() (sage.combinat.root_system.weyl_group.weylgroup_permutation method)": [[274, "sage.combinat.root_system.weyl_group.WeylGroup_permutation.roots"]], "sage.combinat.root_system.weyl_group": [[274, "module-sage.combinat.root_system.weyl_group"]], "simple_reflection() (sage.combinat.root_system.weyl_group.weylgroup_gens method)": [[274, "sage.combinat.root_system.weyl_group.WeylGroup_gens.simple_reflection"]], "simple_reflection() (sage.combinat.root_system.weyl_group.weylgroup_permutation method)": [[274, "sage.combinat.root_system.weyl_group.WeylGroup_permutation.simple_reflection"]], "simple_reflections() (sage.combinat.root_system.weyl_group.classicalweylsubgroup method)": [[274, "sage.combinat.root_system.weyl_group.ClassicalWeylSubgroup.simple_reflections"]], "simple_reflections() (sage.combinat.root_system.weyl_group.weylgroup_gens method)": [[274, "sage.combinat.root_system.weyl_group.WeylGroup_gens.simple_reflections"]], "simple_root_index() (sage.combinat.root_system.weyl_group.weylgroup_permutation method)": [[274, "sage.combinat.root_system.weyl_group.WeylGroup_permutation.simple_root_index"]], "simple_roots() (sage.combinat.root_system.weyl_group.weylgroup_permutation method)": [[274, "sage.combinat.root_system.weyl_group.WeylGroup_permutation.simple_roots"]], "to_matrix() (sage.combinat.root_system.weyl_group.weylgroupelement method)": [[274, "sage.combinat.root_system.weyl_group.WeylGroupElement.to_matrix"]], "to_permutation() (sage.combinat.root_system.weyl_group.weylgroupelement method)": [[274, "sage.combinat.root_system.weyl_group.WeylGroupElement.to_permutation"]], "to_permutation_string() (sage.combinat.root_system.weyl_group.weylgroupelement method)": [[274, "sage.combinat.root_system.weyl_group.WeylGroupElement.to_permutation_string"]], "unit() (sage.combinat.root_system.weyl_group.weylgroup_gens method)": [[274, "sage.combinat.root_system.weyl_group.WeylGroup_gens.unit"]], "weyl_group() (sage.combinat.root_system.weyl_group.classicalweylsubgroup method)": [[274, "sage.combinat.root_system.weyl_group.ClassicalWeylSubgroup.weyl_group"]], "element (sage.combinat.rooted_tree.labelledrootedtrees_all attribute)": [[275, "sage.combinat.rooted_tree.LabelledRootedTrees_all.Element"]], "element (sage.combinat.rooted_tree.rootedtrees_all attribute)": [[275, "sage.combinat.rooted_tree.RootedTrees_all.Element"]], "labelledrootedtree (class in sage.combinat.rooted_tree)": [[275, "sage.combinat.rooted_tree.LabelledRootedTree"]], "labelledrootedtrees (class in sage.combinat.rooted_tree)": [[275, "sage.combinat.rooted_tree.LabelledRootedTrees"]], "labelledrootedtrees_all (class in sage.combinat.rooted_tree)": [[275, "sage.combinat.rooted_tree.LabelledRootedTrees_all"]], "rootedtree (class in sage.combinat.rooted_tree)": [[275, "sage.combinat.rooted_tree.RootedTree"]], "rootedtrees (class in sage.combinat.rooted_tree)": [[275, "sage.combinat.rooted_tree.RootedTrees"]], "rootedtrees_all (class in sage.combinat.rooted_tree)": [[275, "sage.combinat.rooted_tree.RootedTrees_all"]], "rootedtrees_size (class in sage.combinat.rooted_tree)": [[275, "sage.combinat.rooted_tree.RootedTrees_size"]], "cardinality() (sage.combinat.rooted_tree.rootedtrees_size method)": [[275, "sage.combinat.rooted_tree.RootedTrees_size.cardinality"]], "check_element() (sage.combinat.rooted_tree.rootedtrees_size method)": [[275, "sage.combinat.rooted_tree.RootedTrees_size.check_element"]], "element_class() (sage.combinat.rooted_tree.rootedtrees_size method)": [[275, "sage.combinat.rooted_tree.RootedTrees_size.element_class"]], "graft_list() (sage.combinat.rooted_tree.rootedtree method)": [[275, "sage.combinat.rooted_tree.RootedTree.graft_list"]], "graft_on_root() (sage.combinat.rooted_tree.rootedtree method)": [[275, "sage.combinat.rooted_tree.RootedTree.graft_on_root"]], "is_empty() (sage.combinat.rooted_tree.rootedtree method)": [[275, "sage.combinat.rooted_tree.RootedTree.is_empty"]], "labelled_trees() (sage.combinat.rooted_tree.labelledrootedtrees_all method)": [[275, "sage.combinat.rooted_tree.LabelledRootedTrees_all.labelled_trees"]], "labelled_trees() (sage.combinat.rooted_tree.rootedtrees_all method)": [[275, "sage.combinat.rooted_tree.RootedTrees_all.labelled_trees"]], "leaf() (sage.combinat.rooted_tree.rootedtrees_all method)": [[275, "sage.combinat.rooted_tree.RootedTrees_all.leaf"]], "normalize() (sage.combinat.rooted_tree.rootedtree method)": [[275, "sage.combinat.rooted_tree.RootedTree.normalize"]], "number_of_rooted_trees() (in module sage.combinat.rooted_tree)": [[275, "sage.combinat.rooted_tree.number_of_rooted_trees"]], "sage.combinat.rooted_tree": [[275, "module-sage.combinat.rooted_tree"]], "single_graft() (sage.combinat.rooted_tree.rootedtree method)": [[275, "sage.combinat.rooted_tree.RootedTree.single_graft"]], "sort_key() (sage.combinat.rooted_tree.labelledrootedtree method)": [[275, "sage.combinat.rooted_tree.LabelledRootedTree.sort_key"]], "sort_key() (sage.combinat.rooted_tree.rootedtree method)": [[275, "sage.combinat.rooted_tree.RootedTree.sort_key"]], "unlabelled_trees() (sage.combinat.rooted_tree.labelledrootedtrees_all method)": [[275, "sage.combinat.rooted_tree.LabelledRootedTrees_all.unlabelled_trees"]], "unlabelled_trees() (sage.combinat.rooted_tree.rootedtrees_all method)": [[275, "sage.combinat.rooted_tree.RootedTrees_all.unlabelled_trees"]], "eg (sage.combinat.rsk.insertionrules attribute)": [[276, "sage.combinat.rsk.InsertionRules.EG"]], "hecke (sage.combinat.rsk.insertionrules attribute)": [[276, "sage.combinat.rsk.InsertionRules.Hecke"]], "insertionrules (class in sage.combinat.rsk)": [[276, "sage.combinat.rsk.InsertionRules"]], "rsk (sage.combinat.rsk.insertionrules attribute)": [[276, "sage.combinat.rsk.InsertionRules.RSK"]], "rsk() (in module sage.combinat.rsk)": [[276, "sage.combinat.rsk.RSK"]], "rsk_inverse() (in module sage.combinat.rsk)": [[276, "sage.combinat.rsk.RSK_inverse"]], "rule (class in sage.combinat.rsk)": [[276, "sage.combinat.rsk.Rule"]], "rulecorsk (class in sage.combinat.rsk)": [[276, "sage.combinat.rsk.RuleCoRSK"]], "ruledualrsk (class in sage.combinat.rsk)": [[276, "sage.combinat.rsk.RuleDualRSK"]], "ruleeg (class in sage.combinat.rsk)": [[276, "sage.combinat.rsk.RuleEG"]], "rulehecke (class in sage.combinat.rsk)": [[276, "sage.combinat.rsk.RuleHecke"]], "rulersk (class in sage.combinat.rsk)": [[276, "sage.combinat.rsk.RuleRSK"]], "rulestar (class in sage.combinat.rsk)": [[276, "sage.combinat.rsk.RuleStar"]], "rulesuperrsk (class in sage.combinat.rsk)": [[276, "sage.combinat.rsk.RuleSuperRSK"]], "star (sage.combinat.rsk.insertionrules attribute)": [[276, "sage.combinat.rsk.InsertionRules.Star"]], "backward_rule() (sage.combinat.rsk.rule method)": [[276, "sage.combinat.rsk.Rule.backward_rule"]], "backward_rule() (sage.combinat.rsk.rulecorsk method)": [[276, "sage.combinat.rsk.RuleCoRSK.backward_rule"]], "backward_rule() (sage.combinat.rsk.rulehecke method)": [[276, "sage.combinat.rsk.RuleHecke.backward_rule"]], "backward_rule() (sage.combinat.rsk.rulestar method)": [[276, "sage.combinat.rsk.RuleStar.backward_rule"]], "backward_rule() (sage.combinat.rsk.rulesuperrsk method)": [[276, "sage.combinat.rsk.RuleSuperRSK.backward_rule"]], "corsk (sage.combinat.rsk.insertionrules attribute)": [[276, "sage.combinat.rsk.InsertionRules.coRSK"]], "dualrsk (sage.combinat.rsk.insertionrules attribute)": [[276, "sage.combinat.rsk.InsertionRules.dualRSK"]], "forward_rule() (sage.combinat.rsk.rule method)": [[276, "sage.combinat.rsk.Rule.forward_rule"]], "forward_rule() (sage.combinat.rsk.rulehecke method)": [[276, "sage.combinat.rsk.RuleHecke.forward_rule"]], "forward_rule() (sage.combinat.rsk.rulestar method)": [[276, "sage.combinat.rsk.RuleStar.forward_rule"]], "forward_rule() (sage.combinat.rsk.rulesuperrsk method)": [[276, "sage.combinat.rsk.RuleSuperRSK.forward_rule"]], "insertion() (sage.combinat.rsk.ruledualrsk method)": [[276, "sage.combinat.rsk.RuleDualRSK.insertion"]], "insertion() (sage.combinat.rsk.ruleeg method)": [[276, "sage.combinat.rsk.RuleEG.insertion"]], "insertion() (sage.combinat.rsk.rulehecke method)": [[276, "sage.combinat.rsk.RuleHecke.insertion"]], "insertion() (sage.combinat.rsk.rulersk method)": [[276, "sage.combinat.rsk.RuleRSK.insertion"]], "insertion() (sage.combinat.rsk.rulestar method)": [[276, "sage.combinat.rsk.RuleStar.insertion"]], "insertion() (sage.combinat.rsk.rulesuperrsk method)": [[276, "sage.combinat.rsk.RuleSuperRSK.insertion"]], "reverse_insertion() (sage.combinat.rsk.ruledualrsk method)": [[276, "sage.combinat.rsk.RuleDualRSK.reverse_insertion"]], "reverse_insertion() (sage.combinat.rsk.ruleeg method)": [[276, "sage.combinat.rsk.RuleEG.reverse_insertion"]], "reverse_insertion() (sage.combinat.rsk.rulehecke method)": [[276, "sage.combinat.rsk.RuleHecke.reverse_insertion"]], "reverse_insertion() (sage.combinat.rsk.rulersk method)": [[276, "sage.combinat.rsk.RuleRSK.reverse_insertion"]], "reverse_insertion() (sage.combinat.rsk.rulestar method)": [[276, "sage.combinat.rsk.RuleStar.reverse_insertion"]], "reverse_insertion() (sage.combinat.rsk.rulesuperrsk method)": [[276, "sage.combinat.rsk.RuleSuperRSK.reverse_insertion"]], "robinson_schensted_knuth() (in module sage.combinat.rsk)": [[276, "sage.combinat.rsk.robinson_schensted_knuth"]], "robinson_schensted_knuth_inverse() (in module sage.combinat.rsk)": [[276, "sage.combinat.rsk.robinson_schensted_knuth_inverse"]], "sage.combinat.rsk": [[276, "module-sage.combinat.rsk"]], "superrsk (sage.combinat.rsk.insertionrules attribute)": [[276, "sage.combinat.rsk.InsertionRules.superRSK"]], "to_matrix() (in module sage.combinat.rsk)": [[276, "sage.combinat.rsk.to_matrix"]], "to_pairs() (sage.combinat.rsk.rule method)": [[276, "sage.combinat.rsk.Rule.to_pairs"]], "to_pairs() (sage.combinat.rsk.rulecorsk method)": [[276, "sage.combinat.rsk.RuleCoRSK.to_pairs"]], "to_pairs() (sage.combinat.rsk.ruledualrsk method)": [[276, "sage.combinat.rsk.RuleDualRSK.to_pairs"]], "to_pairs() (sage.combinat.rsk.rulesuperrsk method)": [[276, "sage.combinat.rsk.RuleSuperRSK.to_pairs"]], "element (sage.combinat.schubert_polynomial.schubertpolynomialring_xbasis attribute)": [[277, "sage.combinat.schubert_polynomial.SchubertPolynomialRing_xbasis.Element"]], "schubertpolynomialring() (in module sage.combinat.schubert_polynomial)": [[277, "sage.combinat.schubert_polynomial.SchubertPolynomialRing"]], "schubertpolynomialring_xbasis (class in sage.combinat.schubert_polynomial)": [[277, "sage.combinat.schubert_polynomial.SchubertPolynomialRing_xbasis"]], "schubertpolynomial_class (class in sage.combinat.schubert_polynomial)": [[277, "sage.combinat.schubert_polynomial.SchubertPolynomial_class"]], "divided_difference() (sage.combinat.schubert_polynomial.schubertpolynomial_class method)": [[277, "sage.combinat.schubert_polynomial.SchubertPolynomial_class.divided_difference"]], "expand() (sage.combinat.schubert_polynomial.schubertpolynomial_class method)": [[277, "sage.combinat.schubert_polynomial.SchubertPolynomial_class.expand"]], "multiply_variable() (sage.combinat.schubert_polynomial.schubertpolynomial_class method)": [[277, "sage.combinat.schubert_polynomial.SchubertPolynomial_class.multiply_variable"]], "one_basis() (sage.combinat.schubert_polynomial.schubertpolynomialring_xbasis method)": [[277, "sage.combinat.schubert_polynomial.SchubertPolynomialRing_xbasis.one_basis"]], "product_on_basis() (sage.combinat.schubert_polynomial.schubertpolynomialring_xbasis method)": [[277, "sage.combinat.schubert_polynomial.SchubertPolynomialRing_xbasis.product_on_basis"]], "sage.combinat.schubert_polynomial": [[277, "module-sage.combinat.schubert_polynomial"]], "scalar_product() (sage.combinat.schubert_polynomial.schubertpolynomial_class method)": [[277, "sage.combinat.schubert_polynomial.SchubertPolynomial_class.scalar_product"]], "some_elements() (sage.combinat.schubert_polynomial.schubertpolynomialring_xbasis method)": [[277, "sage.combinat.schubert_polynomial.SchubertPolynomialRing_xbasis.some_elements"]], "abstractsetpartition (class in sage.combinat.set_partition)": [[278, "sage.combinat.set_partition.AbstractSetPartition"]], "element (sage.combinat.set_partition.setpartitions attribute)": [[278, "sage.combinat.set_partition.SetPartitions.Element"]], "setpartition (class in sage.combinat.set_partition)": [[278, "sage.combinat.set_partition.SetPartition"]], "setpartitions (class in sage.combinat.set_partition)": [[278, "sage.combinat.set_partition.SetPartitions"]], "setpartitions_all (class in sage.combinat.set_partition)": [[278, "sage.combinat.set_partition.SetPartitions_all"]], "setpartitions_set (class in sage.combinat.set_partition)": [[278, "sage.combinat.set_partition.SetPartitions_set"]], "setpartitions_setn (class in sage.combinat.set_partition)": [[278, "sage.combinat.set_partition.SetPartitions_setn"]], "setpartitions_setparts (class in sage.combinat.set_partition)": [[278, "sage.combinat.set_partition.SetPartitions_setparts"]], "apply_permutation() (sage.combinat.set_partition.setpartition method)": [[278, "sage.combinat.set_partition.SetPartition.apply_permutation"]], "arcs() (sage.combinat.set_partition.setpartition method)": [[278, "sage.combinat.set_partition.SetPartition.arcs"]], "base_set() (sage.combinat.set_partition.abstractsetpartition method)": [[278, "sage.combinat.set_partition.AbstractSetPartition.base_set"]], "base_set() (sage.combinat.set_partition.setpartitions_set method)": [[278, "sage.combinat.set_partition.SetPartitions_set.base_set"]], "base_set_cardinality() (sage.combinat.set_partition.abstractsetpartition method)": [[278, "sage.combinat.set_partition.AbstractSetPartition.base_set_cardinality"]], "base_set_cardinality() (sage.combinat.set_partition.setpartitions_set method)": [[278, "sage.combinat.set_partition.SetPartitions_set.base_set_cardinality"]], "cardinality() (sage.combinat.set_partition.setpartition method)": [[278, "sage.combinat.set_partition.SetPartition.cardinality"]], "cardinality() (sage.combinat.set_partition.setpartitions_set method)": [[278, "sage.combinat.set_partition.SetPartitions_set.cardinality"]], "cardinality() (sage.combinat.set_partition.setpartitions_setn method)": [[278, "sage.combinat.set_partition.SetPartitions_setn.cardinality"]], "cardinality() (sage.combinat.set_partition.setpartitions_setparts method)": [[278, "sage.combinat.set_partition.SetPartitions_setparts.cardinality"]], "check() (sage.combinat.set_partition.setpartition method)": [[278, "sage.combinat.set_partition.SetPartition.check"]], "closers() (sage.combinat.set_partition.setpartition method)": [[278, "sage.combinat.set_partition.SetPartition.closers"]], "coarsenings() (sage.combinat.set_partition.abstractsetpartition method)": [[278, "sage.combinat.set_partition.AbstractSetPartition.coarsenings"]], "conjugate() (sage.combinat.set_partition.abstractsetpartition method)": [[278, "sage.combinat.set_partition.AbstractSetPartition.conjugate"]], "crossings() (sage.combinat.set_partition.setpartition method)": [[278, "sage.combinat.set_partition.SetPartition.crossings"]], "crossings_iterator() (sage.combinat.set_partition.setpartition method)": [[278, "sage.combinat.set_partition.SetPartition.crossings_iterator"]], "cyclic_permutations_of_set_partition() (in module sage.combinat.set_partition)": [[278, "sage.combinat.set_partition.cyclic_permutations_of_set_partition"]], "cyclic_permutations_of_set_partition_iterator() (in module sage.combinat.set_partition)": [[278, "sage.combinat.set_partition.cyclic_permutations_of_set_partition_iterator"]], "from_arcs() (sage.combinat.set_partition.setpartitions method)": [[278, "sage.combinat.set_partition.SetPartitions.from_arcs"]], "from_restricted_growth_word() (sage.combinat.set_partition.setpartitions method)": [[278, "sage.combinat.set_partition.SetPartitions.from_restricted_growth_word"]], "from_restricted_growth_word_blocks() (sage.combinat.set_partition.setpartitions method)": [[278, "sage.combinat.set_partition.SetPartitions.from_restricted_growth_word_blocks"]], "from_restricted_growth_word_intertwining() (sage.combinat.set_partition.setpartitions method)": [[278, "sage.combinat.set_partition.SetPartitions.from_restricted_growth_word_intertwining"]], "from_rook_placement() (sage.combinat.set_partition.setpartitions method)": [[278, "sage.combinat.set_partition.SetPartitions.from_rook_placement"]], "from_rook_placement_gamma() (sage.combinat.set_partition.setpartitions method)": [[278, "sage.combinat.set_partition.SetPartitions.from_rook_placement_gamma"]], "from_rook_placement_psi() (sage.combinat.set_partition.setpartitions method)": [[278, "sage.combinat.set_partition.SetPartitions.from_rook_placement_psi"]], "from_rook_placement_rho() (sage.combinat.set_partition.setpartitions method)": [[278, "sage.combinat.set_partition.SetPartitions.from_rook_placement_rho"]], "inf() (sage.combinat.set_partition.abstractsetpartition method)": [[278, "sage.combinat.set_partition.AbstractSetPartition.inf"]], "is_atomic() (sage.combinat.set_partition.setpartition method)": [[278, "sage.combinat.set_partition.SetPartition.is_atomic"]], "is_less_than() (sage.combinat.set_partition.setpartitions method)": [[278, "sage.combinat.set_partition.SetPartitions.is_less_than"]], "is_noncrossing() (sage.combinat.set_partition.setpartition method)": [[278, "sage.combinat.set_partition.SetPartition.is_noncrossing"]], "is_nonnesting() (sage.combinat.set_partition.setpartition method)": [[278, "sage.combinat.set_partition.SetPartition.is_nonnesting"]], "is_strict_refinement() (sage.combinat.set_partition.setpartitions method)": [[278, "sage.combinat.set_partition.SetPartitions.is_strict_refinement"]], "latex_options() (sage.combinat.set_partition.setpartition method)": [[278, "sage.combinat.set_partition.SetPartition.latex_options"]], "lt() (sage.combinat.set_partition.setpartitions method)": [[278, "sage.combinat.set_partition.SetPartitions.lt"]], "max_block_size() (sage.combinat.set_partition.abstractsetpartition method)": [[278, "sage.combinat.set_partition.AbstractSetPartition.max_block_size"]], "nestings() (sage.combinat.set_partition.setpartition method)": [[278, "sage.combinat.set_partition.SetPartition.nestings"]], "nestings_iterator() (sage.combinat.set_partition.setpartition method)": [[278, "sage.combinat.set_partition.SetPartition.nestings_iterator"]], "number_of_blocks() (sage.combinat.set_partition.setpartitions_setn method)": [[278, "sage.combinat.set_partition.SetPartitions_setn.number_of_blocks"]], "number_of_crossings() (sage.combinat.set_partition.setpartition method)": [[278, "sage.combinat.set_partition.SetPartition.number_of_crossings"]], "number_of_nestings() (sage.combinat.set_partition.setpartition method)": [[278, "sage.combinat.set_partition.SetPartition.number_of_nestings"]], "openers() (sage.combinat.set_partition.setpartition method)": [[278, "sage.combinat.set_partition.SetPartition.openers"]], "ordered_set_partition_action() (sage.combinat.set_partition.setpartition method)": [[278, "sage.combinat.set_partition.SetPartition.ordered_set_partition_action"]], "pipe() (sage.combinat.set_partition.setpartition method)": [[278, "sage.combinat.set_partition.SetPartition.pipe"]], "plot() (sage.combinat.set_partition.setpartition method)": [[278, "sage.combinat.set_partition.SetPartition.plot"]], "random_element() (sage.combinat.set_partition.setpartitions_set method)": [[278, "sage.combinat.set_partition.SetPartitions_set.random_element"]], "random_element() (sage.combinat.set_partition.setpartitions_setn method)": [[278, "sage.combinat.set_partition.SetPartitions_setn.random_element"]], "random_element() (sage.combinat.set_partition.setpartitions_setparts method)": [[278, "sage.combinat.set_partition.SetPartitions_setparts.random_element"]], "refinements() (sage.combinat.set_partition.setpartition method)": [[278, "sage.combinat.set_partition.SetPartition.refinements"]], "restriction() (sage.combinat.set_partition.setpartition method)": [[278, "sage.combinat.set_partition.SetPartition.restriction"]], "sage.combinat.set_partition": [[278, "module-sage.combinat.set_partition"]], "set_latex_options() (sage.combinat.set_partition.setpartition method)": [[278, "sage.combinat.set_partition.SetPartition.set_latex_options"]], "shape() (sage.combinat.set_partition.setpartition method)": [[278, "sage.combinat.set_partition.SetPartition.shape"]], "shape() (sage.combinat.set_partition.setpartitions_setparts method)": [[278, "sage.combinat.set_partition.SetPartitions_setparts.shape"]], "shape_partition() (sage.combinat.set_partition.setpartition method)": [[278, "sage.combinat.set_partition.SetPartition.shape_partition"]], "size() (sage.combinat.set_partition.setpartition method)": [[278, "sage.combinat.set_partition.SetPartition.size"]], "standard_form() (sage.combinat.set_partition.abstractsetpartition method)": [[278, "sage.combinat.set_partition.AbstractSetPartition.standard_form"]], "standardization() (sage.combinat.set_partition.setpartition method)": [[278, "sage.combinat.set_partition.SetPartition.standardization"]], "strict_coarsenings() (sage.combinat.set_partition.setpartition method)": [[278, "sage.combinat.set_partition.SetPartition.strict_coarsenings"]], "subset() (sage.combinat.set_partition.setpartitions_all method)": [[278, "sage.combinat.set_partition.SetPartitions_all.subset"]], "sup() (sage.combinat.set_partition.abstractsetpartition method)": [[278, "sage.combinat.set_partition.AbstractSetPartition.sup"]], "to_partition() (sage.combinat.set_partition.setpartition method)": [[278, "sage.combinat.set_partition.SetPartition.to_partition"]], "to_permutation() (sage.combinat.set_partition.setpartition method)": [[278, "sage.combinat.set_partition.SetPartition.to_permutation"]], "to_restricted_growth_word() (sage.combinat.set_partition.setpartition method)": [[278, "sage.combinat.set_partition.SetPartition.to_restricted_growth_word"]], "to_restricted_growth_word_blocks() (sage.combinat.set_partition.setpartition method)": [[278, "sage.combinat.set_partition.SetPartition.to_restricted_growth_word_blocks"]], "to_restricted_growth_word_intertwining() (sage.combinat.set_partition.setpartition method)": [[278, "sage.combinat.set_partition.SetPartition.to_restricted_growth_word_intertwining"]], "to_rook_placement() (sage.combinat.set_partition.setpartition method)": [[278, "sage.combinat.set_partition.SetPartition.to_rook_placement"]], "to_rook_placement_gamma() (sage.combinat.set_partition.setpartition method)": [[278, "sage.combinat.set_partition.SetPartition.to_rook_placement_gamma"]], "to_rook_placement_psi() (sage.combinat.set_partition.setpartition method)": [[278, "sage.combinat.set_partition.SetPartition.to_rook_placement_psi"]], "to_rook_placement_rho() (sage.combinat.set_partition.setpartition method)": [[278, "sage.combinat.set_partition.SetPartition.to_rook_placement_rho"]], "sage.combinat.set_partition_iterator": [[279, "module-sage.combinat.set_partition_iterator"]], "set_partition_iterator() (in module sage.combinat.set_partition_iterator)": [[279, "sage.combinat.set_partition_iterator.set_partition_iterator"]], "set_partition_iterator_blocks() (in module sage.combinat.set_partition_iterator)": [[279, "sage.combinat.set_partition_iterator.set_partition_iterator_blocks"]], "element (sage.combinat.set_partition_ordered.orderedsetpartitions attribute)": [[280, "sage.combinat.set_partition_ordered.OrderedSetPartitions.Element"]], "orderedsetpartition (class in sage.combinat.set_partition_ordered)": [[280, "sage.combinat.set_partition_ordered.OrderedSetPartition"]], "orderedsetpartitions (class in sage.combinat.set_partition_ordered)": [[280, "sage.combinat.set_partition_ordered.OrderedSetPartitions"]], "orderedsetpartitions_all (class in sage.combinat.set_partition_ordered)": [[280, "sage.combinat.set_partition_ordered.OrderedSetPartitions_all"]], "orderedsetpartitions_all.element (class in sage.combinat.set_partition_ordered)": [[280, "sage.combinat.set_partition_ordered.OrderedSetPartitions_all.Element"]], "orderedsetpartitions_s (class in sage.combinat.set_partition_ordered)": [[280, "sage.combinat.set_partition_ordered.OrderedSetPartitions_s"]], "orderedsetpartitions_scomp (class in sage.combinat.set_partition_ordered)": [[280, "sage.combinat.set_partition_ordered.OrderedSetPartitions_scomp"]], "orderedsetpartitions_sn (class in sage.combinat.set_partition_ordered)": [[280, "sage.combinat.set_partition_ordered.OrderedSetPartitions_sn"]], "splitnk (class in sage.combinat.set_partition_ordered)": [[280, "sage.combinat.set_partition_ordered.SplitNK"]], "base_set() (sage.combinat.set_partition_ordered.orderedsetpartition method)": [[280, "sage.combinat.set_partition_ordered.OrderedSetPartition.base_set"]], "base_set_cardinality() (sage.combinat.set_partition_ordered.orderedsetpartition method)": [[280, "sage.combinat.set_partition_ordered.OrderedSetPartition.base_set_cardinality"]], "bottom_up_osp() (sage.combinat.set_partition_ordered.orderedsetpartition static method)": [[280, "sage.combinat.set_partition_ordered.OrderedSetPartition.bottom_up_osp"]], "cardinality() (sage.combinat.set_partition_ordered.orderedsetpartitions_s method)": [[280, "sage.combinat.set_partition_ordered.OrderedSetPartitions_s.cardinality"]], "cardinality() (sage.combinat.set_partition_ordered.orderedsetpartitions_scomp method)": [[280, "sage.combinat.set_partition_ordered.OrderedSetPartitions_scomp.cardinality"]], "cardinality() (sage.combinat.set_partition_ordered.orderedsetpartitions_sn method)": [[280, "sage.combinat.set_partition_ordered.OrderedSetPartitions_sn.cardinality"]], "check() (sage.combinat.set_partition_ordered.orderedsetpartition method)": [[280, "sage.combinat.set_partition_ordered.OrderedSetPartition.check"]], "complement() (sage.combinat.set_partition_ordered.orderedsetpartition method)": [[280, "sage.combinat.set_partition_ordered.OrderedSetPartition.complement"]], "fatten() (sage.combinat.set_partition_ordered.orderedsetpartition method)": [[280, "sage.combinat.set_partition_ordered.OrderedSetPartition.fatten"]], "fatter() (sage.combinat.set_partition_ordered.orderedsetpartition method)": [[280, "sage.combinat.set_partition_ordered.OrderedSetPartition.fatter"]], "finer() (sage.combinat.set_partition_ordered.orderedsetpartition method)": [[280, "sage.combinat.set_partition_ordered.OrderedSetPartition.finer"]], "from_finite_word() (sage.combinat.set_partition_ordered.orderedsetpartitions method)": [[280, "sage.combinat.set_partition_ordered.OrderedSetPartitions.from_finite_word"]], "is_finer() (sage.combinat.set_partition_ordered.orderedsetpartition method)": [[280, "sage.combinat.set_partition_ordered.OrderedSetPartition.is_finer"]], "is_strongly_finer() (sage.combinat.set_partition_ordered.orderedsetpartition method)": [[280, "sage.combinat.set_partition_ordered.OrderedSetPartition.is_strongly_finer"]], "length() (sage.combinat.set_partition_ordered.orderedsetpartition method)": [[280, "sage.combinat.set_partition_ordered.OrderedSetPartition.length"]], "multiset_permutation_next_lex() (in module sage.combinat.set_partition_ordered)": [[280, "sage.combinat.set_partition_ordered.multiset_permutation_next_lex"]], "multiset_permutation_to_ordered_set_partition() (in module sage.combinat.set_partition_ordered)": [[280, "sage.combinat.set_partition_ordered.multiset_permutation_to_ordered_set_partition"]], "number_of_inversions() (sage.combinat.set_partition_ordered.orderedsetpartition method)": [[280, "sage.combinat.set_partition_ordered.OrderedSetPartition.number_of_inversions"]], "reversed() (sage.combinat.set_partition_ordered.orderedsetpartition method)": [[280, "sage.combinat.set_partition_ordered.OrderedSetPartition.reversed"]], "sage.combinat.set_partition_ordered": [[280, "module-sage.combinat.set_partition_ordered"]], "size() (sage.combinat.set_partition_ordered.orderedsetpartition method)": [[280, "sage.combinat.set_partition_ordered.OrderedSetPartition.size"]], "strongly_fatter() (sage.combinat.set_partition_ordered.orderedsetpartition method)": [[280, "sage.combinat.set_partition_ordered.OrderedSetPartition.strongly_fatter"]], "strongly_finer() (sage.combinat.set_partition_ordered.orderedsetpartition method)": [[280, "sage.combinat.set_partition_ordered.OrderedSetPartition.strongly_finer"]], "subset() (sage.combinat.set_partition_ordered.orderedsetpartitions_all method)": [[280, "sage.combinat.set_partition_ordered.OrderedSetPartitions_all.subset"]], "sum() (sage.combinat.set_partition_ordered.orderedsetpartition static method)": [[280, "sage.combinat.set_partition_ordered.OrderedSetPartition.sum"]], "to_composition() (sage.combinat.set_partition_ordered.orderedsetpartition method)": [[280, "sage.combinat.set_partition_ordered.OrderedSetPartition.to_composition"]], "to_packed_word() (sage.combinat.set_partition_ordered.orderedsetpartition method)": [[280, "sage.combinat.set_partition_ordered.OrderedSetPartition.to_packed_word"]], "sage.combinat.sf.all": [[281, "module-sage.combinat.sf.all"]], "generic_character (class in sage.combinat.sf.character)": [[282, "sage.combinat.sf.character.generic_character"]], "induced_trivial_character_basis (class in sage.combinat.sf.character)": [[282, "sage.combinat.sf.character.induced_trivial_character_basis"]], "irreducible_character_basis (class in sage.combinat.sf.character)": [[282, "sage.combinat.sf.character.irreducible_character_basis"]], "sage.combinat.sf.character": [[282, "module-sage.combinat.sf.character"]], "symmetricfunctionalgebra_classical (class in sage.combinat.sf.classical)": [[283, "sage.combinat.sf.classical.SymmetricFunctionAlgebra_classical"]], "symmetricfunctionalgebra_classical.element (class in sage.combinat.sf.classical)": [[283, "sage.combinat.sf.classical.SymmetricFunctionAlgebra_classical.Element"]], "init() (in module sage.combinat.sf.classical)": [[283, "sage.combinat.sf.classical.init"]], "sage.combinat.sf.classical": [[283, "module-sage.combinat.sf.classical"]], "symmetricfunctionalgebra_dual (class in sage.combinat.sf.dual)": [[284, "sage.combinat.sf.dual.SymmetricFunctionAlgebra_dual"]], "symmetricfunctionalgebra_dual.element (class in sage.combinat.sf.dual)": [[284, "sage.combinat.sf.dual.SymmetricFunctionAlgebra_dual.Element"]], "dual() (sage.combinat.sf.dual.symmetricfunctionalgebra_dual.element method)": [[284, "sage.combinat.sf.dual.SymmetricFunctionAlgebra_dual.Element.dual"]], "expand() (sage.combinat.sf.dual.symmetricfunctionalgebra_dual.element method)": [[284, "sage.combinat.sf.dual.SymmetricFunctionAlgebra_dual.Element.expand"]], "omega() (sage.combinat.sf.dual.symmetricfunctionalgebra_dual.element method)": [[284, "sage.combinat.sf.dual.SymmetricFunctionAlgebra_dual.Element.omega"]], "omega_involution() (sage.combinat.sf.dual.symmetricfunctionalgebra_dual.element method)": [[284, "sage.combinat.sf.dual.SymmetricFunctionAlgebra_dual.Element.omega_involution"]], "product() (sage.combinat.sf.dual.symmetricfunctionalgebra_dual method)": [[284, "sage.combinat.sf.dual.SymmetricFunctionAlgebra_dual.product"]], "sage.combinat.sf.dual": [[284, "module-sage.combinat.sf.dual"]], "scalar() (sage.combinat.sf.dual.symmetricfunctionalgebra_dual.element method)": [[284, "sage.combinat.sf.dual.SymmetricFunctionAlgebra_dual.Element.scalar"]], "scalar_hl() (sage.combinat.sf.dual.symmetricfunctionalgebra_dual.element method)": [[284, "sage.combinat.sf.dual.SymmetricFunctionAlgebra_dual.Element.scalar_hl"]], "transition_matrix() (sage.combinat.sf.dual.symmetricfunctionalgebra_dual method)": [[284, "sage.combinat.sf.dual.SymmetricFunctionAlgebra_dual.transition_matrix"]], "symmetricfunctionalgebra_elementary (class in sage.combinat.sf.elementary)": [[285, "sage.combinat.sf.elementary.SymmetricFunctionAlgebra_elementary"]], "symmetricfunctionalgebra_elementary.element (class in sage.combinat.sf.elementary)": [[285, "sage.combinat.sf.elementary.SymmetricFunctionAlgebra_elementary.Element"]], "coproduct_on_generators() (sage.combinat.sf.elementary.symmetricfunctionalgebra_elementary method)": [[285, "sage.combinat.sf.elementary.SymmetricFunctionAlgebra_elementary.coproduct_on_generators"]], "expand() (sage.combinat.sf.elementary.symmetricfunctionalgebra_elementary.element method)": [[285, "sage.combinat.sf.elementary.SymmetricFunctionAlgebra_elementary.Element.expand"]], "exponential_specialization() (sage.combinat.sf.elementary.symmetricfunctionalgebra_elementary.element method)": [[285, "sage.combinat.sf.elementary.SymmetricFunctionAlgebra_elementary.Element.exponential_specialization"]], "omega() (sage.combinat.sf.elementary.symmetricfunctionalgebra_elementary.element method)": [[285, "sage.combinat.sf.elementary.SymmetricFunctionAlgebra_elementary.Element.omega"]], "omega_involution() (sage.combinat.sf.elementary.symmetricfunctionalgebra_elementary.element method)": [[285, "sage.combinat.sf.elementary.SymmetricFunctionAlgebra_elementary.Element.omega_involution"]], "principal_specialization() (sage.combinat.sf.elementary.symmetricfunctionalgebra_elementary.element method)": [[285, "sage.combinat.sf.elementary.SymmetricFunctionAlgebra_elementary.Element.principal_specialization"]], "sage.combinat.sf.elementary": [[285, "module-sage.combinat.sf.elementary"]], "verschiebung() (sage.combinat.sf.elementary.symmetricfunctionalgebra_elementary.element method)": [[285, "sage.combinat.sf.elementary.SymmetricFunctionAlgebra_elementary.Element.verschiebung"]], "halllittlewood (class in sage.combinat.sf.hall_littlewood)": [[286, "sage.combinat.sf.hall_littlewood.HallLittlewood"]], "halllittlewood_generic (class in sage.combinat.sf.hall_littlewood)": [[286, "sage.combinat.sf.hall_littlewood.HallLittlewood_generic"]], "halllittlewood_generic.element (class in sage.combinat.sf.hall_littlewood)": [[286, "sage.combinat.sf.hall_littlewood.HallLittlewood_generic.Element"]], "halllittlewood_p (class in sage.combinat.sf.hall_littlewood)": [[286, "sage.combinat.sf.hall_littlewood.HallLittlewood_p"]], "halllittlewood_p.element (class in sage.combinat.sf.hall_littlewood)": [[286, "sage.combinat.sf.hall_littlewood.HallLittlewood_p.Element"]], "halllittlewood_q (class in sage.combinat.sf.hall_littlewood)": [[286, "sage.combinat.sf.hall_littlewood.HallLittlewood_q"]], "halllittlewood_q.element (class in sage.combinat.sf.hall_littlewood)": [[286, "sage.combinat.sf.hall_littlewood.HallLittlewood_q.Element"]], "halllittlewood_qp (class in sage.combinat.sf.hall_littlewood)": [[286, "sage.combinat.sf.hall_littlewood.HallLittlewood_qp"]], "halllittlewood_qp.element (class in sage.combinat.sf.hall_littlewood)": [[286, "sage.combinat.sf.hall_littlewood.HallLittlewood_qp.Element"]], "p() (sage.combinat.sf.hall_littlewood.halllittlewood method)": [[286, "sage.combinat.sf.hall_littlewood.HallLittlewood.P"]], "q() (sage.combinat.sf.hall_littlewood.halllittlewood method)": [[286, "sage.combinat.sf.hall_littlewood.HallLittlewood.Q"]], "qp() (sage.combinat.sf.hall_littlewood.halllittlewood method)": [[286, "sage.combinat.sf.hall_littlewood.HallLittlewood.Qp"]], "base_ring() (sage.combinat.sf.hall_littlewood.halllittlewood method)": [[286, "sage.combinat.sf.hall_littlewood.HallLittlewood.base_ring"]], "expand() (sage.combinat.sf.hall_littlewood.halllittlewood_generic.element method)": [[286, "sage.combinat.sf.hall_littlewood.HallLittlewood_generic.Element.expand"]], "hall_littlewood_family() (sage.combinat.sf.hall_littlewood.halllittlewood_generic method)": [[286, "sage.combinat.sf.hall_littlewood.HallLittlewood_generic.hall_littlewood_family"]], "product() (sage.combinat.sf.hall_littlewood.halllittlewood_generic method)": [[286, "sage.combinat.sf.hall_littlewood.HallLittlewood_generic.product"]], "sage.combinat.sf.hall_littlewood": [[286, "module-sage.combinat.sf.hall_littlewood"]], "scalar() (sage.combinat.sf.hall_littlewood.halllittlewood_generic.element method)": [[286, "sage.combinat.sf.hall_littlewood.HallLittlewood_generic.Element.scalar"]], "scalar_hl() (sage.combinat.sf.hall_littlewood.halllittlewood_generic.element method)": [[286, "sage.combinat.sf.hall_littlewood.HallLittlewood_generic.Element.scalar_hl"]], "symmetric_function_ring() (sage.combinat.sf.hall_littlewood.halllittlewood method)": [[286, "sage.combinat.sf.hall_littlewood.HallLittlewood.symmetric_function_ring"]], "transition_matrix() (sage.combinat.sf.hall_littlewood.halllittlewood_generic method)": [[286, "sage.combinat.sf.hall_littlewood.HallLittlewood_generic.transition_matrix"]], "heckecharacter (class in sage.combinat.sf.hecke)": [[287, "sage.combinat.sf.hecke.HeckeCharacter"]], "coproduct_on_generators() (sage.combinat.sf.hecke.heckecharacter method)": [[287, "sage.combinat.sf.hecke.HeckeCharacter.coproduct_on_generators"]], "sage.combinat.sf.hecke": [[287, "module-sage.combinat.sf.hecke"]], "symmetricfunctionalgebra_homogeneous (class in sage.combinat.sf.homogeneous)": [[288, "sage.combinat.sf.homogeneous.SymmetricFunctionAlgebra_homogeneous"]], "symmetricfunctionalgebra_homogeneous.element (class in sage.combinat.sf.homogeneous)": [[288, "sage.combinat.sf.homogeneous.SymmetricFunctionAlgebra_homogeneous.Element"]], "coproduct_on_generators() (sage.combinat.sf.homogeneous.symmetricfunctionalgebra_homogeneous method)": [[288, "sage.combinat.sf.homogeneous.SymmetricFunctionAlgebra_homogeneous.coproduct_on_generators"]], "expand() (sage.combinat.sf.homogeneous.symmetricfunctionalgebra_homogeneous.element method)": [[288, "sage.combinat.sf.homogeneous.SymmetricFunctionAlgebra_homogeneous.Element.expand"]], "exponential_specialization() (sage.combinat.sf.homogeneous.symmetricfunctionalgebra_homogeneous.element method)": [[288, "sage.combinat.sf.homogeneous.SymmetricFunctionAlgebra_homogeneous.Element.exponential_specialization"]], "omega() (sage.combinat.sf.homogeneous.symmetricfunctionalgebra_homogeneous.element method)": [[288, "sage.combinat.sf.homogeneous.SymmetricFunctionAlgebra_homogeneous.Element.omega"]], "omega_involution() (sage.combinat.sf.homogeneous.symmetricfunctionalgebra_homogeneous.element method)": [[288, "sage.combinat.sf.homogeneous.SymmetricFunctionAlgebra_homogeneous.Element.omega_involution"]], "principal_specialization() (sage.combinat.sf.homogeneous.symmetricfunctionalgebra_homogeneous.element method)": [[288, "sage.combinat.sf.homogeneous.SymmetricFunctionAlgebra_homogeneous.Element.principal_specialization"]], "sage.combinat.sf.homogeneous": [[288, "module-sage.combinat.sf.homogeneous"]], "j() (sage.combinat.sf.jack.jack method)": [[289, "sage.combinat.sf.jack.Jack.J"]], "jack (class in sage.combinat.sf.jack)": [[289, "sage.combinat.sf.jack.Jack"]], "jackpolynomials_generic (class in sage.combinat.sf.jack)": [[289, "sage.combinat.sf.jack.JackPolynomials_generic"]], "jackpolynomials_generic.element (class in sage.combinat.sf.jack)": [[289, "sage.combinat.sf.jack.JackPolynomials_generic.Element"]], "jackpolynomials_j (class in sage.combinat.sf.jack)": [[289, "sage.combinat.sf.jack.JackPolynomials_j"]], "jackpolynomials_j.element (class in sage.combinat.sf.jack)": [[289, "sage.combinat.sf.jack.JackPolynomials_j.Element"]], "jackpolynomials_p (class in sage.combinat.sf.jack)": [[289, "sage.combinat.sf.jack.JackPolynomials_p"]], "jackpolynomials_p.element (class in sage.combinat.sf.jack)": [[289, "sage.combinat.sf.jack.JackPolynomials_p.Element"]], "jackpolynomials_q (class in sage.combinat.sf.jack)": [[289, "sage.combinat.sf.jack.JackPolynomials_q"]], "jackpolynomials_q.element (class in sage.combinat.sf.jack)": [[289, "sage.combinat.sf.jack.JackPolynomials_q.Element"]], "jackpolynomials_qp (class in sage.combinat.sf.jack)": [[289, "sage.combinat.sf.jack.JackPolynomials_qp"]], "jackpolynomials_qp.element (class in sage.combinat.sf.jack)": [[289, "sage.combinat.sf.jack.JackPolynomials_qp.Element"]], "p() (sage.combinat.sf.jack.jack method)": [[289, "sage.combinat.sf.jack.Jack.P"]], "q() (sage.combinat.sf.jack.jack method)": [[289, "sage.combinat.sf.jack.Jack.Q"]], "qp() (sage.combinat.sf.jack.jack method)": [[289, "sage.combinat.sf.jack.Jack.Qp"]], "symmetricfunctionalgebra_zonal (class in sage.combinat.sf.jack)": [[289, "sage.combinat.sf.jack.SymmetricFunctionAlgebra_zonal"]], "symmetricfunctionalgebra_zonal.element (class in sage.combinat.sf.jack)": [[289, "sage.combinat.sf.jack.SymmetricFunctionAlgebra_zonal.Element"]], "base_ring() (sage.combinat.sf.jack.jack method)": [[289, "sage.combinat.sf.jack.Jack.base_ring"]], "c1() (in module sage.combinat.sf.jack)": [[289, "sage.combinat.sf.jack.c1"]], "c1() (sage.combinat.sf.jack.jackpolynomials_generic method)": [[289, "sage.combinat.sf.jack.JackPolynomials_generic.c1"]], "c2() (in module sage.combinat.sf.jack)": [[289, "sage.combinat.sf.jack.c2"]], "c2() (sage.combinat.sf.jack.jackpolynomials_generic method)": [[289, "sage.combinat.sf.jack.JackPolynomials_generic.c2"]], "coproduct_by_coercion() (sage.combinat.sf.jack.jackpolynomials_generic method)": [[289, "sage.combinat.sf.jack.JackPolynomials_generic.coproduct_by_coercion"]], "coproduct_by_coercion() (sage.combinat.sf.jack.jackpolynomials_qp method)": [[289, "sage.combinat.sf.jack.JackPolynomials_qp.coproduct_by_coercion"]], "jack_family() (sage.combinat.sf.jack.jackpolynomials_generic method)": [[289, "sage.combinat.sf.jack.JackPolynomials_generic.jack_family"]], "normalize_coefficients() (in module sage.combinat.sf.jack)": [[289, "sage.combinat.sf.jack.normalize_coefficients"]], "part_scalar_jack() (in module sage.combinat.sf.jack)": [[289, "sage.combinat.sf.jack.part_scalar_jack"]], "product() (sage.combinat.sf.jack.jackpolynomials_generic method)": [[289, "sage.combinat.sf.jack.JackPolynomials_generic.product"]], "product() (sage.combinat.sf.jack.jackpolynomials_p method)": [[289, "sage.combinat.sf.jack.JackPolynomials_p.product"]], "product() (sage.combinat.sf.jack.jackpolynomials_qp method)": [[289, "sage.combinat.sf.jack.JackPolynomials_qp.product"]], "product() (sage.combinat.sf.jack.symmetricfunctionalgebra_zonal method)": [[289, "sage.combinat.sf.jack.SymmetricFunctionAlgebra_zonal.product"]], "sage.combinat.sf.jack": [[289, "module-sage.combinat.sf.jack"]], "scalar_jack() (sage.combinat.sf.jack.jackpolynomials_generic.element method)": [[289, "sage.combinat.sf.jack.JackPolynomials_generic.Element.scalar_jack"]], "scalar_jack() (sage.combinat.sf.jack.jackpolynomials_p.element method)": [[289, "sage.combinat.sf.jack.JackPolynomials_p.Element.scalar_jack"]], "scalar_jack_basis() (sage.combinat.sf.jack.jackpolynomials_p method)": [[289, "sage.combinat.sf.jack.JackPolynomials_p.scalar_jack_basis"]], "scalar_zonal() (sage.combinat.sf.jack.symmetricfunctionalgebra_zonal.element method)": [[289, "sage.combinat.sf.jack.SymmetricFunctionAlgebra_zonal.Element.scalar_zonal"]], "symmetric_function_ring() (sage.combinat.sf.jack.jack method)": [[289, "sage.combinat.sf.jack.Jack.symmetric_function_ring"]], "affinegrothendieckpolynomial() (sage.combinat.sf.k_dual.kboundedquotient method)": [[290, "sage.combinat.sf.k_dual.KBoundedQuotient.AffineGrothendieckPolynomial"]], "affineschurfunctions (class in sage.combinat.sf.k_dual)": [[290, "sage.combinat.sf.k_dual.AffineSchurFunctions"]], "dualkschurfunctions (class in sage.combinat.sf.k_dual)": [[290, "sage.combinat.sf.k_dual.DualkSchurFunctions"]], "f() (sage.combinat.sf.k_dual.kboundedquotient method)": [[290, "sage.combinat.sf.k_dual.KBoundedQuotient.F"]], "kboundedquotient (class in sage.combinat.sf.k_dual)": [[290, "sage.combinat.sf.k_dual.KBoundedQuotient"]], "kboundedquotientbases (class in sage.combinat.sf.k_dual)": [[290, "sage.combinat.sf.k_dual.KBoundedQuotientBases"]], "kboundedquotientbases.elementmethods (class in sage.combinat.sf.k_dual)": [[290, "sage.combinat.sf.k_dual.KBoundedQuotientBases.ElementMethods"]], "kboundedquotientbases.parentmethods (class in sage.combinat.sf.k_dual)": [[290, "sage.combinat.sf.k_dual.KBoundedQuotientBases.ParentMethods"]], "kboundedquotientbasis (class in sage.combinat.sf.k_dual)": [[290, "sage.combinat.sf.k_dual.KBoundedQuotientBasis"]], "a_realization() (sage.combinat.sf.k_dual.kboundedquotient method)": [[290, "sage.combinat.sf.k_dual.KBoundedQuotient.a_realization"]], "affineschur() (sage.combinat.sf.k_dual.kboundedquotient method)": [[290, "sage.combinat.sf.k_dual.KBoundedQuotient.affineSchur"]], "ambient() (sage.combinat.sf.k_dual.kboundedquotient method)": [[290, "sage.combinat.sf.k_dual.KBoundedQuotient.ambient"]], "ambient() (sage.combinat.sf.k_dual.kboundedquotientbases.parentmethods method)": [[290, "sage.combinat.sf.k_dual.KBoundedQuotientBases.ParentMethods.ambient"]], "an_element() (sage.combinat.sf.k_dual.kboundedquotient method)": [[290, "sage.combinat.sf.k_dual.KBoundedQuotient.an_element"]], "antipode() (sage.combinat.sf.k_dual.kboundedquotientbases.parentmethods method)": [[290, "sage.combinat.sf.k_dual.KBoundedQuotientBases.ParentMethods.antipode"]], "coproduct() (sage.combinat.sf.k_dual.kboundedquotientbases.parentmethods method)": [[290, "sage.combinat.sf.k_dual.KBoundedQuotientBases.ParentMethods.coproduct"]], "counit() (sage.combinat.sf.k_dual.kboundedquotientbases.parentmethods method)": [[290, "sage.combinat.sf.k_dual.KBoundedQuotientBases.ParentMethods.counit"]], "degree_on_basis() (sage.combinat.sf.k_dual.kboundedquotientbases.parentmethods method)": [[290, "sage.combinat.sf.k_dual.KBoundedQuotientBases.ParentMethods.degree_on_basis"]], "dks() (sage.combinat.sf.k_dual.kboundedquotient method)": [[290, "sage.combinat.sf.k_dual.KBoundedQuotient.dks"]], "dual_k_schur() (sage.combinat.sf.k_dual.kboundedquotient method)": [[290, "sage.combinat.sf.k_dual.KBoundedQuotient.dual_k_Schur"]], "indices() (sage.combinat.sf.k_dual.kboundedquotientbases.parentmethods method)": [[290, "sage.combinat.sf.k_dual.KBoundedQuotientBases.ParentMethods.indices"]], "khlp() (sage.combinat.sf.k_dual.kboundedquotient method)": [[290, "sage.combinat.sf.k_dual.KBoundedQuotient.kHLP"]], "khalllittlewoodp() (sage.combinat.sf.k_dual.kboundedquotient method)": [[290, "sage.combinat.sf.k_dual.KBoundedQuotient.kHallLittlewoodP"]], "kmonomial (class in sage.combinat.sf.k_dual)": [[290, "sage.combinat.sf.k_dual.kMonomial"]], "kbounded_halllittlewoodp (class in sage.combinat.sf.k_dual)": [[290, "sage.combinat.sf.k_dual.kbounded_HallLittlewoodP"]], "km() (sage.combinat.sf.k_dual.kboundedquotient method)": [[290, "sage.combinat.sf.k_dual.KBoundedQuotient.km"]], "kmonomial() (sage.combinat.sf.k_dual.kboundedquotient method)": [[290, "sage.combinat.sf.k_dual.KBoundedQuotient.kmonomial"]], "lift() (sage.combinat.sf.k_dual.kboundedquotient method)": [[290, "sage.combinat.sf.k_dual.KBoundedQuotient.lift"]], "lift() (sage.combinat.sf.k_dual.kboundedquotientbases.parentmethods method)": [[290, "sage.combinat.sf.k_dual.KBoundedQuotientBases.ParentMethods.lift"]], "lift() (sage.combinat.sf.k_dual.kmonomial method)": [[290, "sage.combinat.sf.k_dual.kMonomial.lift"]], "lift() (sage.combinat.sf.k_dual.kbounded_halllittlewoodp method)": [[290, "sage.combinat.sf.k_dual.kbounded_HallLittlewoodP.lift"]], "one() (sage.combinat.sf.k_dual.kboundedquotient method)": [[290, "sage.combinat.sf.k_dual.KBoundedQuotient.one"]], "one_basis() (sage.combinat.sf.k_dual.kboundedquotientbases.parentmethods method)": [[290, "sage.combinat.sf.k_dual.KBoundedQuotientBases.ParentMethods.one_basis"]], "product() (sage.combinat.sf.k_dual.kboundedquotientbases.parentmethods method)": [[290, "sage.combinat.sf.k_dual.KBoundedQuotientBases.ParentMethods.product"]], "realizations() (sage.combinat.sf.k_dual.kboundedquotient method)": [[290, "sage.combinat.sf.k_dual.KBoundedQuotient.realizations"]], "retract() (sage.combinat.sf.k_dual.kboundedquotient method)": [[290, "sage.combinat.sf.k_dual.KBoundedQuotient.retract"]], "retract() (sage.combinat.sf.k_dual.kboundedquotientbases.parentmethods method)": [[290, "sage.combinat.sf.k_dual.KBoundedQuotientBases.ParentMethods.retract"]], "retract() (sage.combinat.sf.k_dual.kmonomial method)": [[290, "sage.combinat.sf.k_dual.kMonomial.retract"]], "retract() (sage.combinat.sf.k_dual.kbounded_halllittlewoodp method)": [[290, "sage.combinat.sf.k_dual.kbounded_HallLittlewoodP.retract"]], "sage.combinat.sf.k_dual": [[290, "module-sage.combinat.sf.k_dual"]], "super_categories() (sage.combinat.sf.k_dual.kboundedquotientbases method)": [[290, "sage.combinat.sf.k_dual.KBoundedQuotientBases.super_categories"]], "kostkafoulkespolynomial() (in module sage.combinat.sf.kfpoly)": [[291, "sage.combinat.sf.kfpoly.KostkaFoulkesPolynomial"]], "compat() (in module sage.combinat.sf.kfpoly)": [[291, "sage.combinat.sf.kfpoly.compat"]], "dom() (in module sage.combinat.sf.kfpoly)": [[291, "sage.combinat.sf.kfpoly.dom"]], "kfpoly() (in module sage.combinat.sf.kfpoly)": [[291, "sage.combinat.sf.kfpoly.kfpoly"]], "riggings() (in module sage.combinat.sf.kfpoly)": [[291, "sage.combinat.sf.kfpoly.riggings"]], "sage.combinat.sf.kfpoly": [[291, "module-sage.combinat.sf.kfpoly"]], "schur_to_hl() (in module sage.combinat.sf.kfpoly)": [[291, "sage.combinat.sf.kfpoly.schur_to_hl"]], "weight() (in module sage.combinat.sf.kfpoly)": [[291, "sage.combinat.sf.kfpoly.weight"]], "llt_class (class in sage.combinat.sf.llt)": [[292, "sage.combinat.sf.llt.LLT_class"]], "llt_cospin (class in sage.combinat.sf.llt)": [[292, "sage.combinat.sf.llt.LLT_cospin"]], "llt_cospin.element (class in sage.combinat.sf.llt)": [[292, "sage.combinat.sf.llt.LLT_cospin.Element"]], "llt_generic (class in sage.combinat.sf.llt)": [[292, "sage.combinat.sf.llt.LLT_generic"]], "llt_generic.element (class in sage.combinat.sf.llt)": [[292, "sage.combinat.sf.llt.LLT_generic.Element"]], "llt_spin (class in sage.combinat.sf.llt)": [[292, "sage.combinat.sf.llt.LLT_spin"]], "llt_spin.element (class in sage.combinat.sf.llt)": [[292, "sage.combinat.sf.llt.LLT_spin.Element"]], "base_ring() (sage.combinat.sf.llt.llt_class method)": [[292, "sage.combinat.sf.llt.LLT_class.base_ring"]], "cospin() (sage.combinat.sf.llt.llt_class method)": [[292, "sage.combinat.sf.llt.LLT_class.cospin"]], "hcospin() (sage.combinat.sf.llt.llt_class method)": [[292, "sage.combinat.sf.llt.LLT_class.hcospin"]], "hspin() (sage.combinat.sf.llt.llt_class method)": [[292, "sage.combinat.sf.llt.LLT_class.hspin"]], "level() (sage.combinat.sf.llt.llt_class method)": [[292, "sage.combinat.sf.llt.LLT_class.level"]], "level() (sage.combinat.sf.llt.llt_generic method)": [[292, "sage.combinat.sf.llt.LLT_generic.level"]], "llt_family() (sage.combinat.sf.llt.llt_generic method)": [[292, "sage.combinat.sf.llt.LLT_generic.llt_family"]], "product() (sage.combinat.sf.llt.llt_generic method)": [[292, "sage.combinat.sf.llt.LLT_generic.product"]], "sage.combinat.sf.llt": [[292, "module-sage.combinat.sf.llt"]], "spin_square() (sage.combinat.sf.llt.llt_class method)": [[292, "sage.combinat.sf.llt.LLT_class.spin_square"]], "symmetric_function_ring() (sage.combinat.sf.llt.llt_class method)": [[292, "sage.combinat.sf.llt.LLT_class.symmetric_function_ring"]], "h() (sage.combinat.sf.macdonald.macdonald method)": [[293, "sage.combinat.sf.macdonald.Macdonald.H"]], "ht() (sage.combinat.sf.macdonald.macdonald method)": [[293, "sage.combinat.sf.macdonald.Macdonald.Ht"]], "j() (sage.combinat.sf.macdonald.macdonald method)": [[293, "sage.combinat.sf.macdonald.Macdonald.J"]], "macdonald (class in sage.combinat.sf.macdonald)": [[293, "sage.combinat.sf.macdonald.Macdonald"]], "macdonaldpolynomials_generic (class in sage.combinat.sf.macdonald)": [[293, "sage.combinat.sf.macdonald.MacdonaldPolynomials_generic"]], "macdonaldpolynomials_generic.element (class in sage.combinat.sf.macdonald)": [[293, "sage.combinat.sf.macdonald.MacdonaldPolynomials_generic.Element"]], "macdonaldpolynomials_h (class in sage.combinat.sf.macdonald)": [[293, "sage.combinat.sf.macdonald.MacdonaldPolynomials_h"]], "macdonaldpolynomials_h.element (class in sage.combinat.sf.macdonald)": [[293, "sage.combinat.sf.macdonald.MacdonaldPolynomials_h.Element"]], "macdonaldpolynomials_ht (class in sage.combinat.sf.macdonald)": [[293, "sage.combinat.sf.macdonald.MacdonaldPolynomials_ht"]], "macdonaldpolynomials_ht.element (class in sage.combinat.sf.macdonald)": [[293, "sage.combinat.sf.macdonald.MacdonaldPolynomials_ht.Element"]], "macdonaldpolynomials_j (class in sage.combinat.sf.macdonald)": [[293, "sage.combinat.sf.macdonald.MacdonaldPolynomials_j"]], "macdonaldpolynomials_j.element (class in sage.combinat.sf.macdonald)": [[293, "sage.combinat.sf.macdonald.MacdonaldPolynomials_j.Element"]], "macdonaldpolynomials_p (class in sage.combinat.sf.macdonald)": [[293, "sage.combinat.sf.macdonald.MacdonaldPolynomials_p"]], "macdonaldpolynomials_p.element (class in sage.combinat.sf.macdonald)": [[293, "sage.combinat.sf.macdonald.MacdonaldPolynomials_p.Element"]], "macdonaldpolynomials_q (class in sage.combinat.sf.macdonald)": [[293, "sage.combinat.sf.macdonald.MacdonaldPolynomials_q"]], "macdonaldpolynomials_q.element (class in sage.combinat.sf.macdonald)": [[293, "sage.combinat.sf.macdonald.MacdonaldPolynomials_q.Element"]], "macdonaldpolynomials_s (class in sage.combinat.sf.macdonald)": [[293, "sage.combinat.sf.macdonald.MacdonaldPolynomials_s"]], "macdonaldpolynomials_s.element (class in sage.combinat.sf.macdonald)": [[293, "sage.combinat.sf.macdonald.MacdonaldPolynomials_s.Element"]], "p() (sage.combinat.sf.macdonald.macdonald method)": [[293, "sage.combinat.sf.macdonald.Macdonald.P"]], "q() (sage.combinat.sf.macdonald.macdonald method)": [[293, "sage.combinat.sf.macdonald.Macdonald.Q"]], "s() (sage.combinat.sf.macdonald.macdonald method)": [[293, "sage.combinat.sf.macdonald.Macdonald.S"]], "base_ring() (sage.combinat.sf.macdonald.macdonald method)": [[293, "sage.combinat.sf.macdonald.Macdonald.base_ring"]], "c1() (in module sage.combinat.sf.macdonald)": [[293, "sage.combinat.sf.macdonald.c1"]], "c1() (sage.combinat.sf.macdonald.macdonaldpolynomials_generic method)": [[293, "sage.combinat.sf.macdonald.MacdonaldPolynomials_generic.c1"]], "c2() (in module sage.combinat.sf.macdonald)": [[293, "sage.combinat.sf.macdonald.c2"]], "c2() (sage.combinat.sf.macdonald.macdonaldpolynomials_generic method)": [[293, "sage.combinat.sf.macdonald.MacdonaldPolynomials_generic.c2"]], "cmunu() (in module sage.combinat.sf.macdonald)": [[293, "sage.combinat.sf.macdonald.cmunu"]], "cmunu1() (in module sage.combinat.sf.macdonald)": [[293, "sage.combinat.sf.macdonald.cmunu1"]], "creation() (sage.combinat.sf.macdonald.macdonaldpolynomials_s.element method)": [[293, "sage.combinat.sf.macdonald.MacdonaldPolynomials_s.Element.creation"]], "macdonald_family() (sage.combinat.sf.macdonald.macdonaldpolynomials_generic method)": [[293, "sage.combinat.sf.macdonald.MacdonaldPolynomials_generic.macdonald_family"]], "nabla() (sage.combinat.sf.macdonald.macdonaldpolynomials_generic.element method)": [[293, "sage.combinat.sf.macdonald.MacdonaldPolynomials_generic.Element.nabla"]], "nabla() (sage.combinat.sf.macdonald.macdonaldpolynomials_ht.element method)": [[293, "sage.combinat.sf.macdonald.MacdonaldPolynomials_ht.Element.nabla"]], "product() (sage.combinat.sf.macdonald.macdonaldpolynomials_generic method)": [[293, "sage.combinat.sf.macdonald.MacdonaldPolynomials_generic.product"]], "product() (sage.combinat.sf.macdonald.macdonaldpolynomials_s method)": [[293, "sage.combinat.sf.macdonald.MacdonaldPolynomials_s.product"]], "qt_kostka() (in module sage.combinat.sf.macdonald)": [[293, "sage.combinat.sf.macdonald.qt_kostka"]], "sage.combinat.sf.macdonald": [[293, "module-sage.combinat.sf.macdonald"]], "scalar_qt_basis() (sage.combinat.sf.macdonald.macdonaldpolynomials_p method)": [[293, "sage.combinat.sf.macdonald.MacdonaldPolynomials_p.scalar_qt_basis"]], "symmetric_function_ring() (sage.combinat.sf.macdonald.macdonald method)": [[293, "sage.combinat.sf.macdonald.Macdonald.symmetric_function_ring"]], "symmetricfunctionalgebra_monomial (class in sage.combinat.sf.monomial)": [[294, "sage.combinat.sf.monomial.SymmetricFunctionAlgebra_monomial"]], "symmetricfunctionalgebra_monomial.element (class in sage.combinat.sf.monomial)": [[294, "sage.combinat.sf.monomial.SymmetricFunctionAlgebra_monomial.Element"]], "antipode_by_coercion() (sage.combinat.sf.monomial.symmetricfunctionalgebra_monomial method)": [[294, "sage.combinat.sf.monomial.SymmetricFunctionAlgebra_monomial.antipode_by_coercion"]], "expand() (sage.combinat.sf.monomial.symmetricfunctionalgebra_monomial.element method)": [[294, "sage.combinat.sf.monomial.SymmetricFunctionAlgebra_monomial.Element.expand"]], "exponential_specialization() (sage.combinat.sf.monomial.symmetricfunctionalgebra_monomial.element method)": [[294, "sage.combinat.sf.monomial.SymmetricFunctionAlgebra_monomial.Element.exponential_specialization"]], "from_polynomial() (sage.combinat.sf.monomial.symmetricfunctionalgebra_monomial method)": [[294, "sage.combinat.sf.monomial.SymmetricFunctionAlgebra_monomial.from_polynomial"]], "from_polynomial_exp() (sage.combinat.sf.monomial.symmetricfunctionalgebra_monomial method)": [[294, "sage.combinat.sf.monomial.SymmetricFunctionAlgebra_monomial.from_polynomial_exp"]], "principal_specialization() (sage.combinat.sf.monomial.symmetricfunctionalgebra_monomial.element method)": [[294, "sage.combinat.sf.monomial.SymmetricFunctionAlgebra_monomial.Element.principal_specialization"]], "product() (sage.combinat.sf.monomial.symmetricfunctionalgebra_monomial method)": [[294, "sage.combinat.sf.monomial.SymmetricFunctionAlgebra_monomial.product"]], "sage.combinat.sf.monomial": [[294, "module-sage.combinat.sf.monomial"]], "symmetricfunctionalgebra_multiplicative (class in sage.combinat.sf.multiplicative)": [[295, "sage.combinat.sf.multiplicative.SymmetricFunctionAlgebra_multiplicative"]], "coproduct_on_basis() (sage.combinat.sf.multiplicative.symmetricfunctionalgebra_multiplicative method)": [[295, "sage.combinat.sf.multiplicative.SymmetricFunctionAlgebra_multiplicative.coproduct_on_basis"]], "product_on_basis() (sage.combinat.sf.multiplicative.symmetricfunctionalgebra_multiplicative method)": [[295, "sage.combinat.sf.multiplicative.SymmetricFunctionAlgebra_multiplicative.product_on_basis"]], "sage.combinat.sf.multiplicative": [[295, "module-sage.combinat.sf.multiplicative"]], "kboundedsubspace (class in sage.combinat.sf.new_kschur)": [[296, "sage.combinat.sf.new_kschur.KBoundedSubspace"]], "kboundedsubspacebases (class in sage.combinat.sf.new_kschur)": [[296, "sage.combinat.sf.new_kschur.KBoundedSubspaceBases"]], "kboundedsubspacebases.elementmethods (class in sage.combinat.sf.new_kschur)": [[296, "sage.combinat.sf.new_kschur.KBoundedSubspaceBases.ElementMethods"]], "kboundedsubspacebases.parentmethods (class in sage.combinat.sf.new_kschur)": [[296, "sage.combinat.sf.new_kschur.KBoundedSubspaceBases.ParentMethods"]], "k_kschur (class in sage.combinat.sf.new_kschur)": [[296, "sage.combinat.sf.new_kschur.K_kSchur"]], "k_k_schur_non_commutative_variables() (sage.combinat.sf.new_kschur.k_kschur method)": [[296, "sage.combinat.sf.new_kschur.K_kSchur.K_k_Schur_non_commutative_variables"]], "k_kschur() (sage.combinat.sf.new_kschur.kboundedsubspace method)": [[296, "sage.combinat.sf.new_kschur.KBoundedSubspace.K_kschur"]], "an_element() (sage.combinat.sf.new_kschur.kboundedsubspacebases.parentmethods method)": [[296, "sage.combinat.sf.new_kschur.KBoundedSubspaceBases.ParentMethods.an_element"]], "antipode() (sage.combinat.sf.new_kschur.kboundedsubspacebases.parentmethods method)": [[296, "sage.combinat.sf.new_kschur.KBoundedSubspaceBases.ParentMethods.antipode"]], "coproduct() (sage.combinat.sf.new_kschur.kboundedsubspacebases.parentmethods method)": [[296, "sage.combinat.sf.new_kschur.KBoundedSubspaceBases.ParentMethods.coproduct"]], "counit() (sage.combinat.sf.new_kschur.kboundedsubspacebases.parentmethods method)": [[296, "sage.combinat.sf.new_kschur.KBoundedSubspaceBases.ParentMethods.counit"]], "degree_on_basis() (sage.combinat.sf.new_kschur.kboundedsubspacebases.parentmethods method)": [[296, "sage.combinat.sf.new_kschur.KBoundedSubspaceBases.ParentMethods.degree_on_basis"]], "expand() (sage.combinat.sf.new_kschur.kboundedsubspacebases.elementmethods method)": [[296, "sage.combinat.sf.new_kschur.KBoundedSubspaceBases.ElementMethods.expand"]], "hl_creation_operator() (sage.combinat.sf.new_kschur.kboundedsubspacebases.elementmethods method)": [[296, "sage.combinat.sf.new_kschur.KBoundedSubspaceBases.ElementMethods.hl_creation_operator"]], "homogeneous_basis_noncommutative_variables_zero_hecke() (sage.combinat.sf.new_kschur.k_kschur method)": [[296, "sage.combinat.sf.new_kschur.K_kSchur.homogeneous_basis_noncommutative_variables_zero_Hecke"]], "is_schur_positive() (sage.combinat.sf.new_kschur.kboundedsubspacebases.elementmethods method)": [[296, "sage.combinat.sf.new_kschur.KBoundedSubspaceBases.ElementMethods.is_schur_positive"]], "khomogeneous (class in sage.combinat.sf.new_kschur)": [[296, "sage.combinat.sf.new_kschur.kHomogeneous"]], "kschur (class in sage.combinat.sf.new_kschur)": [[296, "sage.combinat.sf.new_kschur.kSchur"]], "ksplit (class in sage.combinat.sf.new_kschur)": [[296, "sage.combinat.sf.new_kschur.kSplit"]], "khomogeneous() (sage.combinat.sf.new_kschur.kboundedsubspace method)": [[296, "sage.combinat.sf.new_kschur.KBoundedSubspace.khomogeneous"]], "kschur() (sage.combinat.sf.new_kschur.kboundedsubspace method)": [[296, "sage.combinat.sf.new_kschur.KBoundedSubspace.kschur"]], "ksplit() (sage.combinat.sf.new_kschur.kboundedsubspace method)": [[296, "sage.combinat.sf.new_kschur.KBoundedSubspace.ksplit"]], "lift() (sage.combinat.sf.new_kschur.k_kschur method)": [[296, "sage.combinat.sf.new_kschur.K_kSchur.lift"]], "omega() (sage.combinat.sf.new_kschur.kboundedsubspacebases.elementmethods method)": [[296, "sage.combinat.sf.new_kschur.KBoundedSubspaceBases.ElementMethods.omega"]], "omega_t_inverse() (sage.combinat.sf.new_kschur.kboundedsubspacebases.elementmethods method)": [[296, "sage.combinat.sf.new_kschur.KBoundedSubspaceBases.ElementMethods.omega_t_inverse"]], "one_basis() (sage.combinat.sf.new_kschur.kboundedsubspacebases.parentmethods method)": [[296, "sage.combinat.sf.new_kschur.KBoundedSubspaceBases.ParentMethods.one_basis"]], "product() (sage.combinat.sf.new_kschur.k_kschur method)": [[296, "sage.combinat.sf.new_kschur.K_kSchur.product"]], "product_on_basis() (sage.combinat.sf.new_kschur.kschur method)": [[296, "sage.combinat.sf.new_kschur.kSchur.product_on_basis"]], "realizations() (sage.combinat.sf.new_kschur.kboundedsubspace method)": [[296, "sage.combinat.sf.new_kschur.KBoundedSubspace.realizations"]], "retract() (sage.combinat.sf.new_kschur.kboundedsubspace method)": [[296, "sage.combinat.sf.new_kschur.KBoundedSubspace.retract"]], "retract() (sage.combinat.sf.new_kschur.k_kschur method)": [[296, "sage.combinat.sf.new_kschur.K_kSchur.retract"]], "sage.combinat.sf.new_kschur": [[296, "module-sage.combinat.sf.new_kschur"]], "scalar() (sage.combinat.sf.new_kschur.kboundedsubspacebases.elementmethods method)": [[296, "sage.combinat.sf.new_kschur.KBoundedSubspaceBases.ElementMethods.scalar"]], "super_categories() (sage.combinat.sf.new_kschur.kboundedsubspacebases method)": [[296, "sage.combinat.sf.new_kschur.KBoundedSubspaceBases.super_categories"]], "transition_matrix() (sage.combinat.sf.new_kschur.kboundedsubspacebases.parentmethods method)": [[296, "sage.combinat.sf.new_kschur.KBoundedSubspaceBases.ParentMethods.transition_matrix"]], "augmentedlatticediagramfilling (class in sage.combinat.sf.ns_macdonald)": [[297, "sage.combinat.sf.ns_macdonald.AugmentedLatticeDiagramFilling"]], "e() (in module sage.combinat.sf.ns_macdonald)": [[297, "sage.combinat.sf.ns_macdonald.E"]], "e_integral() (in module sage.combinat.sf.ns_macdonald)": [[297, "sage.combinat.sf.ns_macdonald.E_integral"]], "ht() (in module sage.combinat.sf.ns_macdonald)": [[297, "sage.combinat.sf.ns_macdonald.Ht"]], "latticediagram (class in sage.combinat.sf.ns_macdonald)": [[297, "sage.combinat.sf.ns_macdonald.LatticeDiagram"]], "nonattackingbacktracker (class in sage.combinat.sf.ns_macdonald)": [[297, "sage.combinat.sf.ns_macdonald.NonattackingBacktracker"]], "nonattackingfillings() (in module sage.combinat.sf.ns_macdonald)": [[297, "sage.combinat.sf.ns_macdonald.NonattackingFillings"]], "nonattackingfillings_shape (class in sage.combinat.sf.ns_macdonald)": [[297, "sage.combinat.sf.ns_macdonald.NonattackingFillings_shape"]], "a() (sage.combinat.sf.ns_macdonald.latticediagram method)": [[297, "sage.combinat.sf.ns_macdonald.LatticeDiagram.a"]], "are_attacking() (sage.combinat.sf.ns_macdonald.augmentedlatticediagramfilling method)": [[297, "sage.combinat.sf.ns_macdonald.AugmentedLatticeDiagramFilling.are_attacking"]], "arm() (sage.combinat.sf.ns_macdonald.latticediagram method)": [[297, "sage.combinat.sf.ns_macdonald.LatticeDiagram.arm"]], "arm_left() (sage.combinat.sf.ns_macdonald.latticediagram method)": [[297, "sage.combinat.sf.ns_macdonald.LatticeDiagram.arm_left"]], "arm_right() (sage.combinat.sf.ns_macdonald.latticediagram method)": [[297, "sage.combinat.sf.ns_macdonald.LatticeDiagram.arm_right"]], "attacking_boxes() (sage.combinat.sf.ns_macdonald.augmentedlatticediagramfilling method)": [[297, "sage.combinat.sf.ns_macdonald.AugmentedLatticeDiagramFilling.attacking_boxes"]], "boxes() (sage.combinat.sf.ns_macdonald.augmentedlatticediagramfilling method)": [[297, "sage.combinat.sf.ns_macdonald.AugmentedLatticeDiagramFilling.boxes"]], "boxes() (sage.combinat.sf.ns_macdonald.latticediagram method)": [[297, "sage.combinat.sf.ns_macdonald.LatticeDiagram.boxes"]], "boxes_same_and_lower_right() (sage.combinat.sf.ns_macdonald.latticediagram method)": [[297, "sage.combinat.sf.ns_macdonald.LatticeDiagram.boxes_same_and_lower_right"]], "coeff() (sage.combinat.sf.ns_macdonald.augmentedlatticediagramfilling method)": [[297, "sage.combinat.sf.ns_macdonald.AugmentedLatticeDiagramFilling.coeff"]], "coeff_integral() (sage.combinat.sf.ns_macdonald.augmentedlatticediagramfilling method)": [[297, "sage.combinat.sf.ns_macdonald.AugmentedLatticeDiagramFilling.coeff_integral"]], "coinv() (sage.combinat.sf.ns_macdonald.augmentedlatticediagramfilling method)": [[297, "sage.combinat.sf.ns_macdonald.AugmentedLatticeDiagramFilling.coinv"]], "descents() (sage.combinat.sf.ns_macdonald.augmentedlatticediagramfilling method)": [[297, "sage.combinat.sf.ns_macdonald.AugmentedLatticeDiagramFilling.descents"]], "flip() (sage.combinat.sf.ns_macdonald.latticediagram method)": [[297, "sage.combinat.sf.ns_macdonald.LatticeDiagram.flip"]], "flip() (sage.combinat.sf.ns_macdonald.nonattackingfillings_shape method)": [[297, "sage.combinat.sf.ns_macdonald.NonattackingFillings_shape.flip"]], "get_next_pos() (sage.combinat.sf.ns_macdonald.nonattackingbacktracker method)": [[297, "sage.combinat.sf.ns_macdonald.NonattackingBacktracker.get_next_pos"]], "inv() (sage.combinat.sf.ns_macdonald.augmentedlatticediagramfilling method)": [[297, "sage.combinat.sf.ns_macdonald.AugmentedLatticeDiagramFilling.inv"]], "inversions() (sage.combinat.sf.ns_macdonald.augmentedlatticediagramfilling method)": [[297, "sage.combinat.sf.ns_macdonald.AugmentedLatticeDiagramFilling.inversions"]], "is_non_attacking() (sage.combinat.sf.ns_macdonald.augmentedlatticediagramfilling method)": [[297, "sage.combinat.sf.ns_macdonald.AugmentedLatticeDiagramFilling.is_non_attacking"]], "l() (sage.combinat.sf.ns_macdonald.latticediagram method)": [[297, "sage.combinat.sf.ns_macdonald.LatticeDiagram.l"]], "leg() (sage.combinat.sf.ns_macdonald.latticediagram method)": [[297, "sage.combinat.sf.ns_macdonald.LatticeDiagram.leg"]], "maj() (sage.combinat.sf.ns_macdonald.augmentedlatticediagramfilling method)": [[297, "sage.combinat.sf.ns_macdonald.AugmentedLatticeDiagramFilling.maj"]], "permuted_filling() (sage.combinat.sf.ns_macdonald.augmentedlatticediagramfilling method)": [[297, "sage.combinat.sf.ns_macdonald.AugmentedLatticeDiagramFilling.permuted_filling"]], "reading_order() (sage.combinat.sf.ns_macdonald.augmentedlatticediagramfilling method)": [[297, "sage.combinat.sf.ns_macdonald.AugmentedLatticeDiagramFilling.reading_order"]], "reading_word() (sage.combinat.sf.ns_macdonald.augmentedlatticediagramfilling method)": [[297, "sage.combinat.sf.ns_macdonald.AugmentedLatticeDiagramFilling.reading_word"]], "sage.combinat.sf.ns_macdonald": [[297, "module-sage.combinat.sf.ns_macdonald"]], "shape() (sage.combinat.sf.ns_macdonald.augmentedlatticediagramfilling method)": [[297, "sage.combinat.sf.ns_macdonald.AugmentedLatticeDiagramFilling.shape"]], "size() (sage.combinat.sf.ns_macdonald.latticediagram method)": [[297, "sage.combinat.sf.ns_macdonald.LatticeDiagram.size"]], "weight() (sage.combinat.sf.ns_macdonald.augmentedlatticediagramfilling method)": [[297, "sage.combinat.sf.ns_macdonald.AugmentedLatticeDiagramFilling.weight"]], "symmetricfunctionalgebra_orthogonal (class in sage.combinat.sf.orthogonal)": [[298, "sage.combinat.sf.orthogonal.SymmetricFunctionAlgebra_orthogonal"]], "sage.combinat.sf.orthogonal": [[298, "module-sage.combinat.sf.orthogonal"]], "symmetricfunctionalgebra_orthotriang (class in sage.combinat.sf.orthotriang)": [[299, "sage.combinat.sf.orthotriang.SymmetricFunctionAlgebra_orthotriang"]], "symmetricfunctionalgebra_orthotriang.element (class in sage.combinat.sf.orthotriang)": [[299, "sage.combinat.sf.orthotriang.SymmetricFunctionAlgebra_orthotriang.Element"]], "product() (sage.combinat.sf.orthotriang.symmetricfunctionalgebra_orthotriang method)": [[299, "sage.combinat.sf.orthotriang.SymmetricFunctionAlgebra_orthotriang.product"]], "sage.combinat.sf.orthotriang": [[299, "module-sage.combinat.sf.orthotriang"]], "symmetricfunctionalgebra_power (class in sage.combinat.sf.powersum)": [[300, "sage.combinat.sf.powersum.SymmetricFunctionAlgebra_power"]], "symmetricfunctionalgebra_power.element (class in sage.combinat.sf.powersum)": [[300, "sage.combinat.sf.powersum.SymmetricFunctionAlgebra_power.Element"]], "adams_operation() (sage.combinat.sf.powersum.symmetricfunctionalgebra_power.element method)": [[300, "sage.combinat.sf.powersum.SymmetricFunctionAlgebra_power.Element.adams_operation"]], "antipode_on_basis() (sage.combinat.sf.powersum.symmetricfunctionalgebra_power method)": [[300, "sage.combinat.sf.powersum.SymmetricFunctionAlgebra_power.antipode_on_basis"]], "bottom_schur_function() (sage.combinat.sf.powersum.symmetricfunctionalgebra_power method)": [[300, "sage.combinat.sf.powersum.SymmetricFunctionAlgebra_power.bottom_schur_function"]], "coproduct_on_generators() (sage.combinat.sf.powersum.symmetricfunctionalgebra_power method)": [[300, "sage.combinat.sf.powersum.SymmetricFunctionAlgebra_power.coproduct_on_generators"]], "eval_at_permutation_roots() (sage.combinat.sf.powersum.symmetricfunctionalgebra_power.element method)": [[300, "sage.combinat.sf.powersum.SymmetricFunctionAlgebra_power.Element.eval_at_permutation_roots"]], "eval_at_permutation_roots_on_generators() (sage.combinat.sf.powersum.symmetricfunctionalgebra_power method)": [[300, "sage.combinat.sf.powersum.SymmetricFunctionAlgebra_power.eval_at_permutation_roots_on_generators"]], "expand() (sage.combinat.sf.powersum.symmetricfunctionalgebra_power.element method)": [[300, "sage.combinat.sf.powersum.SymmetricFunctionAlgebra_power.Element.expand"]], "exponential_specialization() (sage.combinat.sf.powersum.symmetricfunctionalgebra_power.element method)": [[300, "sage.combinat.sf.powersum.SymmetricFunctionAlgebra_power.Element.exponential_specialization"]], "frobenius() (sage.combinat.sf.powersum.symmetricfunctionalgebra_power.element method)": [[300, "sage.combinat.sf.powersum.SymmetricFunctionAlgebra_power.Element.frobenius"]], "omega() (sage.combinat.sf.powersum.symmetricfunctionalgebra_power.element method)": [[300, "sage.combinat.sf.powersum.SymmetricFunctionAlgebra_power.Element.omega"]], "omega_involution() (sage.combinat.sf.powersum.symmetricfunctionalgebra_power.element method)": [[300, "sage.combinat.sf.powersum.SymmetricFunctionAlgebra_power.Element.omega_involution"]], "principal_specialization() (sage.combinat.sf.powersum.symmetricfunctionalgebra_power.element method)": [[300, "sage.combinat.sf.powersum.SymmetricFunctionAlgebra_power.Element.principal_specialization"]], "sage.combinat.sf.powersum": [[300, "module-sage.combinat.sf.powersum"]], "scalar() (sage.combinat.sf.powersum.symmetricfunctionalgebra_power.element method)": [[300, "sage.combinat.sf.powersum.SymmetricFunctionAlgebra_power.Element.scalar"]], "verschiebung() (sage.combinat.sf.powersum.symmetricfunctionalgebra_power.element method)": [[300, "sage.combinat.sf.powersum.SymmetricFunctionAlgebra_power.Element.verschiebung"]], "symmetricfunctionalgebra_schur (class in sage.combinat.sf.schur)": [[301, "sage.combinat.sf.schur.SymmetricFunctionAlgebra_schur"]], "symmetricfunctionalgebra_schur.element (class in sage.combinat.sf.schur)": [[301, "sage.combinat.sf.schur.SymmetricFunctionAlgebra_schur.Element"]], "coproduct_on_basis() (sage.combinat.sf.schur.symmetricfunctionalgebra_schur method)": [[301, "sage.combinat.sf.schur.SymmetricFunctionAlgebra_schur.coproduct_on_basis"]], "expand() (sage.combinat.sf.schur.symmetricfunctionalgebra_schur.element method)": [[301, "sage.combinat.sf.schur.SymmetricFunctionAlgebra_schur.Element.expand"]], "exponential_specialization() (sage.combinat.sf.schur.symmetricfunctionalgebra_schur.element method)": [[301, "sage.combinat.sf.schur.SymmetricFunctionAlgebra_schur.Element.exponential_specialization"]], "omega() (sage.combinat.sf.schur.symmetricfunctionalgebra_schur.element method)": [[301, "sage.combinat.sf.schur.SymmetricFunctionAlgebra_schur.Element.omega"]], "omega_involution() (sage.combinat.sf.schur.symmetricfunctionalgebra_schur.element method)": [[301, "sage.combinat.sf.schur.SymmetricFunctionAlgebra_schur.Element.omega_involution"]], "principal_specialization() (sage.combinat.sf.schur.symmetricfunctionalgebra_schur.element method)": [[301, "sage.combinat.sf.schur.SymmetricFunctionAlgebra_schur.Element.principal_specialization"]], "product_on_basis() (sage.combinat.sf.schur.symmetricfunctionalgebra_schur method)": [[301, "sage.combinat.sf.schur.SymmetricFunctionAlgebra_schur.product_on_basis"]], "sage.combinat.sf.schur": [[301, "module-sage.combinat.sf.schur"]], "scalar() (sage.combinat.sf.schur.symmetricfunctionalgebra_schur.element method)": [[301, "sage.combinat.sf.schur.SymmetricFunctionAlgebra_schur.Element.scalar"]], "verschiebung() (sage.combinat.sf.schur.symmetricfunctionalgebra_schur.element method)": [[301, "sage.combinat.sf.schur.SymmetricFunctionAlgebra_schur.Element.verschiebung"]], "schur() (sage.combinat.sf.sf.symmetricfunctions method)": [[302, "sage.combinat.sf.sf.SymmetricFunctions.Schur"], [302, "sage.combinat.sf.sf.SymmetricFunctions.schur"]], "symmetricfunctions (class in sage.combinat.sf.sf)": [[302, "sage.combinat.sf.sf.SymmetricFunctions"]], "symmetricaconversiononbasis (class in sage.combinat.sf.sf)": [[302, "sage.combinat.sf.sf.SymmetricaConversionOnBasis"]], "witt() (sage.combinat.sf.sf.symmetricfunctions method)": [[302, "sage.combinat.sf.sf.SymmetricFunctions.Witt"], [302, "sage.combinat.sf.sf.SymmetricFunctions.witt"]], "a_realization() (sage.combinat.sf.sf.symmetricfunctions method)": [[302, "sage.combinat.sf.sf.SymmetricFunctions.a_realization"]], "complete() (sage.combinat.sf.sf.symmetricfunctions method)": [[302, "sage.combinat.sf.sf.SymmetricFunctions.complete"]], "e() (sage.combinat.sf.sf.symmetricfunctions method)": [[302, "sage.combinat.sf.sf.SymmetricFunctions.e"]], "elementary() (sage.combinat.sf.sf.symmetricfunctions method)": [[302, "sage.combinat.sf.sf.SymmetricFunctions.elementary"]], "f() (sage.combinat.sf.sf.symmetricfunctions method)": [[302, "sage.combinat.sf.sf.SymmetricFunctions.f"]], "forgotten() (sage.combinat.sf.sf.symmetricfunctions method)": [[302, "sage.combinat.sf.sf.SymmetricFunctions.forgotten"]], "from_polynomial() (sage.combinat.sf.sf.symmetricfunctions method)": [[302, "sage.combinat.sf.sf.SymmetricFunctions.from_polynomial"]], "h() (sage.combinat.sf.sf.symmetricfunctions method)": [[302, "sage.combinat.sf.sf.SymmetricFunctions.h"]], "hall_littlewood() (sage.combinat.sf.sf.symmetricfunctions method)": [[302, "sage.combinat.sf.sf.SymmetricFunctions.hall_littlewood"]], "hecke_character() (sage.combinat.sf.sf.symmetricfunctions method)": [[302, "sage.combinat.sf.sf.SymmetricFunctions.hecke_character"]], "homogeneous() (sage.combinat.sf.sf.symmetricfunctions method)": [[302, "sage.combinat.sf.sf.SymmetricFunctions.homogeneous"]], "ht() (sage.combinat.sf.sf.symmetricfunctions method)": [[302, "sage.combinat.sf.sf.SymmetricFunctions.ht"]], "induced_trivial_character() (sage.combinat.sf.sf.symmetricfunctions method)": [[302, "sage.combinat.sf.sf.SymmetricFunctions.induced_trivial_character"]], "irreducible_symmetric_group_character() (sage.combinat.sf.sf.symmetricfunctions method)": [[302, "sage.combinat.sf.sf.SymmetricFunctions.irreducible_symmetric_group_character"]], "jack() (sage.combinat.sf.sf.symmetricfunctions method)": [[302, "sage.combinat.sf.sf.SymmetricFunctions.jack"]], "kboundedquotient() (sage.combinat.sf.sf.symmetricfunctions method)": [[302, "sage.combinat.sf.sf.SymmetricFunctions.kBoundedQuotient"]], "kboundedsubspace() (sage.combinat.sf.sf.symmetricfunctions method)": [[302, "sage.combinat.sf.sf.SymmetricFunctions.kBoundedSubspace"]], "khomogeneous() (sage.combinat.sf.sf.symmetricfunctions method)": [[302, "sage.combinat.sf.sf.SymmetricFunctions.khomogeneous"]], "kschur() (sage.combinat.sf.sf.symmetricfunctions method)": [[302, "sage.combinat.sf.sf.SymmetricFunctions.kschur"]], "ksplit() (sage.combinat.sf.sf.symmetricfunctions method)": [[302, "sage.combinat.sf.sf.SymmetricFunctions.ksplit"]], "llt() (sage.combinat.sf.sf.symmetricfunctions method)": [[302, "sage.combinat.sf.sf.SymmetricFunctions.llt"]], "m() (sage.combinat.sf.sf.symmetricfunctions method)": [[302, "sage.combinat.sf.sf.SymmetricFunctions.m"]], "macdonald() (sage.combinat.sf.sf.symmetricfunctions method)": [[302, "sage.combinat.sf.sf.SymmetricFunctions.macdonald"]], "monomial() (sage.combinat.sf.sf.symmetricfunctions method)": [[302, "sage.combinat.sf.sf.SymmetricFunctions.monomial"]], "o() (sage.combinat.sf.sf.symmetricfunctions method)": [[302, "sage.combinat.sf.sf.SymmetricFunctions.o"]], "orthogonal() (sage.combinat.sf.sf.symmetricfunctions method)": [[302, "sage.combinat.sf.sf.SymmetricFunctions.orthogonal"]], "p() (sage.combinat.sf.sf.symmetricfunctions method)": [[302, "sage.combinat.sf.sf.SymmetricFunctions.p"]], "power() (sage.combinat.sf.sf.symmetricfunctions method)": [[302, "sage.combinat.sf.sf.SymmetricFunctions.power"]], "powersum() (sage.combinat.sf.sf.symmetricfunctions method)": [[302, "sage.combinat.sf.sf.SymmetricFunctions.powersum"]], "qbar() (sage.combinat.sf.sf.symmetricfunctions method)": [[302, "sage.combinat.sf.sf.SymmetricFunctions.qbar"]], "register_isomorphism() (sage.combinat.sf.sf.symmetricfunctions method)": [[302, "sage.combinat.sf.sf.SymmetricFunctions.register_isomorphism"]], "s() (sage.combinat.sf.sf.symmetricfunctions method)": [[302, "sage.combinat.sf.sf.SymmetricFunctions.s"]], "sage.combinat.sf.sf": [[302, "module-sage.combinat.sf.sf"]], "sp() (sage.combinat.sf.sf.symmetricfunctions method)": [[302, "sage.combinat.sf.sf.SymmetricFunctions.sp"]], "st() (sage.combinat.sf.sf.symmetricfunctions method)": [[302, "sage.combinat.sf.sf.SymmetricFunctions.st"]], "symplectic() (sage.combinat.sf.sf.symmetricfunctions method)": [[302, "sage.combinat.sf.sf.SymmetricFunctions.symplectic"]], "w() (sage.combinat.sf.sf.symmetricfunctions method)": [[302, "sage.combinat.sf.sf.SymmetricFunctions.w"]], "zonal() (sage.combinat.sf.sf.symmetricfunctions method)": [[302, "sage.combinat.sf.sf.SymmetricFunctions.zonal"]], "element (sage.combinat.sf.sfa.symmetricfunctionalgebra_generic attribute)": [[303, "sage.combinat.sf.sfa.SymmetricFunctionAlgebra_generic.Element"]], "eulerian() (sage.combinat.sf.sfa.symmetricfunctionsbases.parentmethods method)": [[303, "sage.combinat.sf.sfa.SymmetricFunctionsBases.ParentMethods.Eulerian"]], "filteredsymmetricfunctionsbases (class in sage.combinat.sf.sfa)": [[303, "sage.combinat.sf.sfa.FilteredSymmetricFunctionsBases"]], "gradedsymmetricfunctionsbases (class in sage.combinat.sf.sfa)": [[303, "sage.combinat.sf.sfa.GradedSymmetricFunctionsBases"]], "gradedsymmetricfunctionsbases.elementmethods (class in sage.combinat.sf.sfa)": [[303, "sage.combinat.sf.sfa.GradedSymmetricFunctionsBases.ElementMethods"]], "gradedsymmetricfunctionsbases.parentmethods (class in sage.combinat.sf.sfa)": [[303, "sage.combinat.sf.sfa.GradedSymmetricFunctionsBases.ParentMethods"]], "symmetricfunctionalgebra_generic (class in sage.combinat.sf.sfa)": [[303, "sage.combinat.sf.sfa.SymmetricFunctionAlgebra_generic"]], "symmetricfunctionalgebra_generic_element (class in sage.combinat.sf.sfa)": [[303, "sage.combinat.sf.sfa.SymmetricFunctionAlgebra_generic_Element"]], "symmetricfunctionsbases (class in sage.combinat.sf.sfa)": [[303, "sage.combinat.sf.sfa.SymmetricFunctionsBases"]], "symmetricfunctionsbases.parentmethods (class in sage.combinat.sf.sfa)": [[303, "sage.combinat.sf.sfa.SymmetricFunctionsBases.ParentMethods"]], "antipode_by_coercion() (sage.combinat.sf.sfa.gradedsymmetricfunctionsbases.parentmethods method)": [[303, "sage.combinat.sf.sfa.GradedSymmetricFunctionsBases.ParentMethods.antipode_by_coercion"]], "arithmetic_product() (sage.combinat.sf.sfa.symmetricfunctionalgebra_generic_element method)": [[303, "sage.combinat.sf.sfa.SymmetricFunctionAlgebra_generic_Element.arithmetic_product"]], "basis_name() (sage.combinat.sf.sfa.symmetricfunctionalgebra_generic method)": [[303, "sage.combinat.sf.sfa.SymmetricFunctionAlgebra_generic.basis_name"]], "bernstein_creation_operator() (sage.combinat.sf.sfa.symmetricfunctionalgebra_generic_element method)": [[303, "sage.combinat.sf.sfa.SymmetricFunctionAlgebra_generic_Element.bernstein_creation_operator"]], "carlitz_shareshian_wachs() (sage.combinat.sf.sfa.symmetricfunctionsbases.parentmethods method)": [[303, "sage.combinat.sf.sfa.SymmetricFunctionsBases.ParentMethods.carlitz_shareshian_wachs"]], "character_to_frobenius_image() (sage.combinat.sf.sfa.symmetricfunctionalgebra_generic_element method)": [[303, "sage.combinat.sf.sfa.SymmetricFunctionAlgebra_generic_Element.character_to_frobenius_image"]], "coproduct_by_coercion() (sage.combinat.sf.sfa.symmetricfunctionalgebra_generic method)": [[303, "sage.combinat.sf.sfa.SymmetricFunctionAlgebra_generic.coproduct_by_coercion"]], "corresponding_basis_over() (sage.combinat.sf.sfa.symmetricfunctionsbases.parentmethods method)": [[303, "sage.combinat.sf.sfa.SymmetricFunctionsBases.ParentMethods.corresponding_basis_over"]], "counit() (sage.combinat.sf.sfa.gradedsymmetricfunctionsbases.parentmethods method)": [[303, "sage.combinat.sf.sfa.GradedSymmetricFunctionsBases.ParentMethods.counit"]], "degree() (sage.combinat.sf.sfa.symmetricfunctionalgebra_generic_element method)": [[303, "sage.combinat.sf.sfa.SymmetricFunctionAlgebra_generic_Element.degree"]], "degree_negation() (sage.combinat.sf.sfa.gradedsymmetricfunctionsbases.elementmethods method)": [[303, "sage.combinat.sf.sfa.GradedSymmetricFunctionsBases.ElementMethods.degree_negation"]], "degree_negation() (sage.combinat.sf.sfa.gradedsymmetricfunctionsbases.parentmethods method)": [[303, "sage.combinat.sf.sfa.GradedSymmetricFunctionsBases.ParentMethods.degree_negation"]], "degree_on_basis() (sage.combinat.sf.sfa.symmetricfunctionsbases.parentmethods method)": [[303, "sage.combinat.sf.sfa.SymmetricFunctionsBases.ParentMethods.degree_on_basis"]], "degree_zero_coefficient() (sage.combinat.sf.sfa.gradedsymmetricfunctionsbases.elementmethods method)": [[303, "sage.combinat.sf.sfa.GradedSymmetricFunctionsBases.ElementMethods.degree_zero_coefficient"]], "derivative_with_respect_to_p1() (sage.combinat.sf.sfa.symmetricfunctionalgebra_generic_element method)": [[303, "sage.combinat.sf.sfa.SymmetricFunctionAlgebra_generic_Element.derivative_with_respect_to_p1"]], "dual_basis() (sage.combinat.sf.sfa.symmetricfunctionalgebra_generic method)": [[303, "sage.combinat.sf.sfa.SymmetricFunctionAlgebra_generic.dual_basis"]], "eval_at_permutation_roots() (sage.combinat.sf.sfa.symmetricfunctionalgebra_generic_element method)": [[303, "sage.combinat.sf.sfa.SymmetricFunctionAlgebra_generic_Element.eval_at_permutation_roots"]], "expand() (sage.combinat.sf.sfa.symmetricfunctionalgebra_generic_element method)": [[303, "sage.combinat.sf.sfa.SymmetricFunctionAlgebra_generic_Element.expand"]], "exponential_specialization() (sage.combinat.sf.sfa.symmetricfunctionalgebra_generic_element method)": [[303, "sage.combinat.sf.sfa.SymmetricFunctionAlgebra_generic_Element.exponential_specialization"]], "factor() (sage.combinat.sf.sfa.symmetricfunctionalgebra_generic_element method)": [[303, "sage.combinat.sf.sfa.SymmetricFunctionAlgebra_generic_Element.factor"]], "formal_series_ring() (sage.combinat.sf.sfa.symmetricfunctionsbases.parentmethods method)": [[303, "sage.combinat.sf.sfa.SymmetricFunctionsBases.ParentMethods.formal_series_ring"]], "frobenius() (sage.combinat.sf.sfa.symmetricfunctionalgebra_generic_element method)": [[303, "sage.combinat.sf.sfa.SymmetricFunctionAlgebra_generic_Element.frobenius"]], "from_polynomial() (sage.combinat.sf.sfa.symmetricfunctionalgebra_generic method)": [[303, "sage.combinat.sf.sfa.SymmetricFunctionAlgebra_generic.from_polynomial"]], "gcd() (sage.combinat.sf.sfa.symmetricfunctionalgebra_generic_element method)": [[303, "sage.combinat.sf.sfa.SymmetricFunctionAlgebra_generic_Element.gcd"]], "gessel_reutenauer() (sage.combinat.sf.sfa.symmetricfunctionsbases.parentmethods method)": [[303, "sage.combinat.sf.sfa.SymmetricFunctionsBases.ParentMethods.gessel_reutenauer"]], "get_print_style() (sage.combinat.sf.sfa.symmetricfunctionalgebra_generic method)": [[303, "sage.combinat.sf.sfa.SymmetricFunctionAlgebra_generic.get_print_style"]], "higher_lie_character() (sage.combinat.sf.sfa.symmetricfunctionsbases.parentmethods method)": [[303, "sage.combinat.sf.sfa.SymmetricFunctionsBases.ParentMethods.higher_lie_character"]], "hl_creation_operator() (sage.combinat.sf.sfa.symmetricfunctionalgebra_generic_element method)": [[303, "sage.combinat.sf.sfa.SymmetricFunctionAlgebra_generic_Element.hl_creation_operator"]], "inner_plethysm() (sage.combinat.sf.sfa.symmetricfunctionalgebra_generic_element method)": [[303, "sage.combinat.sf.sfa.SymmetricFunctionAlgebra_generic_Element.inner_plethysm"]], "inner_tensor() (sage.combinat.sf.sfa.symmetricfunctionalgebra_generic_element method)": [[303, "sage.combinat.sf.sfa.SymmetricFunctionAlgebra_generic_Element.inner_tensor"]], "internal_coproduct() (sage.combinat.sf.sfa.symmetricfunctionalgebra_generic_element method)": [[303, "sage.combinat.sf.sfa.SymmetricFunctionAlgebra_generic_Element.internal_coproduct"]], "internal_product() (sage.combinat.sf.sfa.symmetricfunctionalgebra_generic_element method)": [[303, "sage.combinat.sf.sfa.SymmetricFunctionAlgebra_generic_Element.internal_product"]], "is_symmetricfunction() (in module sage.combinat.sf.sfa)": [[303, "sage.combinat.sf.sfa.is_SymmetricFunction"]], "is_symmetricfunctionalgebra() (in module sage.combinat.sf.sfa)": [[303, "sage.combinat.sf.sfa.is_SymmetricFunctionAlgebra"]], "is_commutative() (sage.combinat.sf.sfa.symmetricfunctionsbases.parentmethods method)": [[303, "sage.combinat.sf.sfa.SymmetricFunctionsBases.ParentMethods.is_commutative"]], "is_field() (sage.combinat.sf.sfa.symmetricfunctionsbases.parentmethods method)": [[303, "sage.combinat.sf.sfa.SymmetricFunctionsBases.ParentMethods.is_field"]], "is_integral_domain() (sage.combinat.sf.sfa.symmetricfunctionsbases.parentmethods method)": [[303, "sage.combinat.sf.sfa.SymmetricFunctionsBases.ParentMethods.is_integral_domain"]], "is_schur_positive() (sage.combinat.sf.sfa.symmetricfunctionalgebra_generic_element method)": [[303, "sage.combinat.sf.sfa.SymmetricFunctionAlgebra_generic_Element.is_schur_positive"]], "is_unit() (sage.combinat.sf.sfa.gradedsymmetricfunctionsbases.elementmethods method)": [[303, "sage.combinat.sf.sfa.GradedSymmetricFunctionsBases.ElementMethods.is_unit"]], "itensor() (sage.combinat.sf.sfa.symmetricfunctionalgebra_generic_element method)": [[303, "sage.combinat.sf.sfa.SymmetricFunctionAlgebra_generic_Element.itensor"]], "kronecker_coproduct() (sage.combinat.sf.sfa.symmetricfunctionalgebra_generic_element method)": [[303, "sage.combinat.sf.sfa.SymmetricFunctionAlgebra_generic_Element.kronecker_coproduct"]], "kronecker_product() (sage.combinat.sf.sfa.symmetricfunctionalgebra_generic_element method)": [[303, "sage.combinat.sf.sfa.SymmetricFunctionAlgebra_generic_Element.kronecker_product"]], "left_padded_kronecker_product() (sage.combinat.sf.sfa.symmetricfunctionalgebra_generic_element method)": [[303, "sage.combinat.sf.sfa.SymmetricFunctionAlgebra_generic_Element.left_padded_kronecker_product"]], "lehrer_solomon() (sage.combinat.sf.sfa.symmetricfunctionsbases.parentmethods method)": [[303, "sage.combinat.sf.sfa.SymmetricFunctionsBases.ParentMethods.lehrer_solomon"]], "nabla() (sage.combinat.sf.sfa.symmetricfunctionalgebra_generic_element method)": [[303, "sage.combinat.sf.sfa.SymmetricFunctionAlgebra_generic_Element.nabla"]], "omega() (sage.combinat.sf.sfa.symmetricfunctionalgebra_generic_element method)": [[303, "sage.combinat.sf.sfa.SymmetricFunctionAlgebra_generic_Element.omega"]], "omega_involution() (sage.combinat.sf.sfa.symmetricfunctionalgebra_generic_element method)": [[303, "sage.combinat.sf.sfa.SymmetricFunctionAlgebra_generic_Element.omega_involution"]], "omega_qt() (sage.combinat.sf.sfa.symmetricfunctionalgebra_generic_element method)": [[303, "sage.combinat.sf.sfa.SymmetricFunctionAlgebra_generic_Element.omega_qt"]], "one_basis() (sage.combinat.sf.sfa.symmetricfunctionsbases.parentmethods method)": [[303, "sage.combinat.sf.sfa.SymmetricFunctionsBases.ParentMethods.one_basis"]], "plethysm() (sage.combinat.sf.sfa.symmetricfunctionalgebra_generic_element method)": [[303, "sage.combinat.sf.sfa.SymmetricFunctionAlgebra_generic_Element.plethysm"]], "prefix() (sage.combinat.sf.sfa.symmetricfunctionalgebra_generic method)": [[303, "sage.combinat.sf.sfa.SymmetricFunctionAlgebra_generic.prefix"]], "principal_specialization() (sage.combinat.sf.sfa.symmetricfunctionalgebra_generic_element method)": [[303, "sage.combinat.sf.sfa.SymmetricFunctionAlgebra_generic_Element.principal_specialization"]], "product_by_coercion() (sage.combinat.sf.sfa.symmetricfunctionalgebra_generic method)": [[303, "sage.combinat.sf.sfa.SymmetricFunctionAlgebra_generic.product_by_coercion"]], "reduced_kronecker_product() (sage.combinat.sf.sfa.symmetricfunctionalgebra_generic_element method)": [[303, "sage.combinat.sf.sfa.SymmetricFunctionAlgebra_generic_Element.reduced_kronecker_product"]], "restrict_degree() (sage.combinat.sf.sfa.symmetricfunctionalgebra_generic_element method)": [[303, "sage.combinat.sf.sfa.SymmetricFunctionAlgebra_generic_Element.restrict_degree"]], "restrict_partition_lengths() (sage.combinat.sf.sfa.symmetricfunctionalgebra_generic_element method)": [[303, "sage.combinat.sf.sfa.SymmetricFunctionAlgebra_generic_Element.restrict_partition_lengths"]], "restrict_parts() (sage.combinat.sf.sfa.symmetricfunctionalgebra_generic_element method)": [[303, "sage.combinat.sf.sfa.SymmetricFunctionAlgebra_generic_Element.restrict_parts"]], "sage.combinat.sf.sfa": [[303, "module-sage.combinat.sf.sfa"]], "scalar() (sage.combinat.sf.sfa.symmetricfunctionalgebra_generic_element method)": [[303, "sage.combinat.sf.sfa.SymmetricFunctionAlgebra_generic_Element.scalar"]], "scalar_hl() (sage.combinat.sf.sfa.symmetricfunctionalgebra_generic_element method)": [[303, "sage.combinat.sf.sfa.SymmetricFunctionAlgebra_generic_Element.scalar_hl"]], "scalar_jack() (sage.combinat.sf.sfa.symmetricfunctionalgebra_generic_element method)": [[303, "sage.combinat.sf.sfa.SymmetricFunctionAlgebra_generic_Element.scalar_jack"]], "scalar_qt() (sage.combinat.sf.sfa.symmetricfunctionalgebra_generic_element method)": [[303, "sage.combinat.sf.sfa.SymmetricFunctionAlgebra_generic_Element.scalar_qt"]], "scalar_t() (sage.combinat.sf.sfa.symmetricfunctionalgebra_generic_element method)": [[303, "sage.combinat.sf.sfa.SymmetricFunctionAlgebra_generic_Element.scalar_t"]], "set_print_style() (sage.combinat.sf.sfa.symmetricfunctionalgebra_generic method)": [[303, "sage.combinat.sf.sfa.SymmetricFunctionAlgebra_generic.set_print_style"]], "skew_by() (sage.combinat.sf.sfa.symmetricfunctionalgebra_generic_element method)": [[303, "sage.combinat.sf.sfa.SymmetricFunctionAlgebra_generic_Element.skew_by"]], "skew_schur() (sage.combinat.sf.sfa.symmetricfunctionsbases.parentmethods method)": [[303, "sage.combinat.sf.sfa.SymmetricFunctionsBases.ParentMethods.skew_schur"]], "super_categories() (sage.combinat.sf.sfa.filteredsymmetricfunctionsbases method)": [[303, "sage.combinat.sf.sfa.FilteredSymmetricFunctionsBases.super_categories"]], "super_categories() (sage.combinat.sf.sfa.gradedsymmetricfunctionsbases method)": [[303, "sage.combinat.sf.sfa.GradedSymmetricFunctionsBases.super_categories"]], "super_categories() (sage.combinat.sf.sfa.symmetricfunctionsbases method)": [[303, "sage.combinat.sf.sfa.SymmetricFunctionsBases.super_categories"]], "symmetric_function_ring() (sage.combinat.sf.sfa.symmetricfunctionalgebra_generic method)": [[303, "sage.combinat.sf.sfa.SymmetricFunctionAlgebra_generic.symmetric_function_ring"]], "theta() (sage.combinat.sf.sfa.symmetricfunctionalgebra_generic_element method)": [[303, "sage.combinat.sf.sfa.SymmetricFunctionAlgebra_generic_Element.theta"]], "theta_qt() (sage.combinat.sf.sfa.symmetricfunctionalgebra_generic_element method)": [[303, "sage.combinat.sf.sfa.SymmetricFunctionAlgebra_generic_Element.theta_qt"]], "transition_matrix() (sage.combinat.sf.sfa.symmetricfunctionalgebra_generic method)": [[303, "sage.combinat.sf.sfa.SymmetricFunctionAlgebra_generic.transition_matrix"]], "verschiebung() (sage.combinat.sf.sfa.symmetricfunctionalgebra_generic_element method)": [[303, "sage.combinat.sf.sfa.SymmetricFunctionAlgebra_generic_Element.verschiebung"]], "whitney_homology_character() (sage.combinat.sf.sfa.symmetricfunctionsbases.parentmethods method)": [[303, "sage.combinat.sf.sfa.SymmetricFunctionsBases.ParentMethods.whitney_homology_character"]], "zee() (in module sage.combinat.sf.sfa)": [[303, "sage.combinat.sf.sfa.zee"]], "symmetricfunctionalgebra_symplectic (class in sage.combinat.sf.symplectic)": [[304, "sage.combinat.sf.symplectic.SymmetricFunctionAlgebra_symplectic"]], "sage.combinat.sf.symplectic": [[304, "module-sage.combinat.sf.symplectic"]], "symmetricfunctionalgebra_witt (class in sage.combinat.sf.witt)": [[305, "sage.combinat.sf.witt.SymmetricFunctionAlgebra_witt"]], "coproduct() (sage.combinat.sf.witt.symmetricfunctionalgebra_witt method)": [[305, "sage.combinat.sf.witt.SymmetricFunctionAlgebra_witt.coproduct"]], "from_other_uncached() (sage.combinat.sf.witt.symmetricfunctionalgebra_witt method)": [[305, "sage.combinat.sf.witt.SymmetricFunctionAlgebra_witt.from_other_uncached"]], "sage.combinat.sf.witt": [[305, "module-sage.combinat.sf.witt"]], "verschiebung() (sage.combinat.sf.witt.symmetricfunctionalgebra_witt method)": [[305, "sage.combinat.sf.witt.SymmetricFunctionAlgebra_witt.verschiebung"]], "shardposetelement (class in sage.combinat.shard_order)": [[306, "sage.combinat.shard_order.ShardPosetElement"]], "sage.combinat.shard_order": [[306, "module-sage.combinat.shard_order"]], "shard_poset() (in module sage.combinat.shard_order)": [[306, "sage.combinat.shard_order.shard_poset"]], "shard_preorder_graph() (in module sage.combinat.shard_order)": [[306, "sage.combinat.shard_order.shard_preorder_graph"]], "crystalelementshiftedprimedtableau (class in sage.combinat.shifted_primed_tableau)": [[307, "sage.combinat.shifted_primed_tableau.CrystalElementShiftedPrimedTableau"]], "element (sage.combinat.shifted_primed_tableau.shiftedprimedtableaux attribute)": [[307, "sage.combinat.shifted_primed_tableau.ShiftedPrimedTableaux.Element"]], "primedentry (class in sage.combinat.shifted_primed_tableau)": [[307, "sage.combinat.shifted_primed_tableau.PrimedEntry"]], "shiftedprimedtableau (class in sage.combinat.shifted_primed_tableau)": [[307, "sage.combinat.shifted_primed_tableau.ShiftedPrimedTableau"]], "shiftedprimedtableaux (class in sage.combinat.shifted_primed_tableau)": [[307, "sage.combinat.shifted_primed_tableau.ShiftedPrimedTableaux"]], "shiftedprimedtableaux_all (class in sage.combinat.shifted_primed_tableau)": [[307, "sage.combinat.shifted_primed_tableau.ShiftedPrimedTableaux_all"]], "shiftedprimedtableaux_shape (class in sage.combinat.shifted_primed_tableau)": [[307, "sage.combinat.shifted_primed_tableau.ShiftedPrimedTableaux_shape"]], "shiftedprimedtableaux_weight (class in sage.combinat.shifted_primed_tableau)": [[307, "sage.combinat.shifted_primed_tableau.ShiftedPrimedTableaux_weight"]], "shiftedprimedtableaux_weight_shape (class in sage.combinat.shifted_primed_tableau)": [[307, "sage.combinat.shifted_primed_tableau.ShiftedPrimedTableaux_weight_shape"]], "check() (sage.combinat.shifted_primed_tableau.shiftedprimedtableau method)": [[307, "sage.combinat.shifted_primed_tableau.ShiftedPrimedTableau.check"]], "decrease_half() (sage.combinat.shifted_primed_tableau.primedentry method)": [[307, "sage.combinat.shifted_primed_tableau.PrimedEntry.decrease_half"]], "decrease_one() (sage.combinat.shifted_primed_tableau.primedentry method)": [[307, "sage.combinat.shifted_primed_tableau.PrimedEntry.decrease_one"]], "e() (sage.combinat.shifted_primed_tableau.crystalelementshiftedprimedtableau method)": [[307, "sage.combinat.shifted_primed_tableau.CrystalElementShiftedPrimedTableau.e"]], "f() (sage.combinat.shifted_primed_tableau.crystalelementshiftedprimedtableau method)": [[307, "sage.combinat.shifted_primed_tableau.CrystalElementShiftedPrimedTableau.f"]], "increase_half() (sage.combinat.shifted_primed_tableau.primedentry method)": [[307, "sage.combinat.shifted_primed_tableau.PrimedEntry.increase_half"]], "increase_one() (sage.combinat.shifted_primed_tableau.primedentry method)": [[307, "sage.combinat.shifted_primed_tableau.PrimedEntry.increase_one"]], "integer() (sage.combinat.shifted_primed_tableau.primedentry method)": [[307, "sage.combinat.shifted_primed_tableau.PrimedEntry.integer"]], "is_highest_weight() (sage.combinat.shifted_primed_tableau.crystalelementshiftedprimedtableau method)": [[307, "sage.combinat.shifted_primed_tableau.CrystalElementShiftedPrimedTableau.is_highest_weight"]], "is_primed() (sage.combinat.shifted_primed_tableau.primedentry method)": [[307, "sage.combinat.shifted_primed_tableau.PrimedEntry.is_primed"]], "is_standard() (sage.combinat.shifted_primed_tableau.shiftedprimedtableau method)": [[307, "sage.combinat.shifted_primed_tableau.ShiftedPrimedTableau.is_standard"]], "is_unprimed() (sage.combinat.shifted_primed_tableau.primedentry method)": [[307, "sage.combinat.shifted_primed_tableau.PrimedEntry.is_unprimed"]], "max_entry() (sage.combinat.shifted_primed_tableau.shiftedprimedtableau method)": [[307, "sage.combinat.shifted_primed_tableau.ShiftedPrimedTableau.max_entry"]], "module_generators() (sage.combinat.shifted_primed_tableau.shiftedprimedtableaux_shape method)": [[307, "sage.combinat.shifted_primed_tableau.ShiftedPrimedTableaux_shape.module_generators"]], "options (sage.combinat.shifted_primed_tableau.shiftedprimedtableaux attribute)": [[307, "sage.combinat.shifted_primed_tableau.ShiftedPrimedTableaux.options"]], "pp() (sage.combinat.shifted_primed_tableau.shiftedprimedtableau method)": [[307, "sage.combinat.shifted_primed_tableau.ShiftedPrimedTableau.pp"]], "primed() (sage.combinat.shifted_primed_tableau.primedentry method)": [[307, "sage.combinat.shifted_primed_tableau.PrimedEntry.primed"]], "reading_word() (sage.combinat.shifted_primed_tableau.crystalelementshiftedprimedtableau method)": [[307, "sage.combinat.shifted_primed_tableau.CrystalElementShiftedPrimedTableau.reading_word"]], "restrict() (sage.combinat.shifted_primed_tableau.shiftedprimedtableau method)": [[307, "sage.combinat.shifted_primed_tableau.ShiftedPrimedTableau.restrict"]], "restriction_outer_shape() (sage.combinat.shifted_primed_tableau.shiftedprimedtableau method)": [[307, "sage.combinat.shifted_primed_tableau.ShiftedPrimedTableau.restriction_outer_shape"]], "restriction_shape() (sage.combinat.shifted_primed_tableau.shiftedprimedtableau method)": [[307, "sage.combinat.shifted_primed_tableau.ShiftedPrimedTableau.restriction_shape"]], "sage.combinat.shifted_primed_tableau": [[307, "module-sage.combinat.shifted_primed_tableau"]], "shape() (sage.combinat.shifted_primed_tableau.shiftedprimedtableau method)": [[307, "sage.combinat.shifted_primed_tableau.ShiftedPrimedTableau.shape"]], "shape() (sage.combinat.shifted_primed_tableau.shiftedprimedtableaux_shape method)": [[307, "sage.combinat.shifted_primed_tableau.ShiftedPrimedTableaux_shape.shape"]], "to_chain() (sage.combinat.shifted_primed_tableau.shiftedprimedtableau method)": [[307, "sage.combinat.shifted_primed_tableau.ShiftedPrimedTableau.to_chain"]], "unprimed() (sage.combinat.shifted_primed_tableau.primedentry method)": [[307, "sage.combinat.shifted_primed_tableau.PrimedEntry.unprimed"]], "weight() (sage.combinat.shifted_primed_tableau.crystalelementshiftedprimedtableau method)": [[307, "sage.combinat.shifted_primed_tableau.CrystalElementShiftedPrimedTableau.weight"]], "weight() (sage.combinat.shifted_primed_tableau.shiftedprimedtableau method)": [[307, "sage.combinat.shifted_primed_tableau.ShiftedPrimedTableau.weight"]], "setshuffleproduct (class in sage.combinat.shuffle)": [[308, "sage.combinat.shuffle.SetShuffleProduct"]], "shuffleproduct (class in sage.combinat.shuffle)": [[308, "sage.combinat.shuffle.ShuffleProduct"]], "shuffleproduct_abstract (class in sage.combinat.shuffle)": [[308, "sage.combinat.shuffle.ShuffleProduct_abstract"]], "shuffleproduct_overlapping (class in sage.combinat.shuffle)": [[308, "sage.combinat.shuffle.ShuffleProduct_overlapping"]], "shuffleproduct_overlapping_r (class in sage.combinat.shuffle)": [[308, "sage.combinat.shuffle.ShuffleProduct_overlapping_r"]], "cardinality() (sage.combinat.shuffle.setshuffleproduct method)": [[308, "sage.combinat.shuffle.SetShuffleProduct.cardinality"]], "cardinality() (sage.combinat.shuffle.shuffleproduct method)": [[308, "sage.combinat.shuffle.ShuffleProduct.cardinality"]], "sage.combinat.shuffle": [[308, "module-sage.combinat.shuffle"]], "sage.combinat.sidon_sets": [[309, "module-sage.combinat.sidon_sets"]], "sidon_sets() (in module sage.combinat.sidon_sets)": [[309, "sage.combinat.sidon_sets.sidon_sets"]], "sidon_sets_rec() (in module sage.combinat.sidon_sets)": [[309, "sage.combinat.sidon_sets.sidon_sets_rec"]], "element (sage.combinat.similarity_class_type.primarysimilarityclasstypes attribute)": [[310, "sage.combinat.similarity_class_type.PrimarySimilarityClassTypes.Element"]], "element (sage.combinat.similarity_class_type.similarityclasstypes attribute)": [[310, "sage.combinat.similarity_class_type.SimilarityClassTypes.Element"]], "primarysimilarityclasstype (class in sage.combinat.similarity_class_type)": [[310, "sage.combinat.similarity_class_type.PrimarySimilarityClassType"]], "primarysimilarityclasstypes (class in sage.combinat.similarity_class_type)": [[310, "sage.combinat.similarity_class_type.PrimarySimilarityClassTypes"]], "similarityclasstype (class in sage.combinat.similarity_class_type)": [[310, "sage.combinat.similarity_class_type.SimilarityClassType"]], "similarityclasstypes (class in sage.combinat.similarity_class_type)": [[310, "sage.combinat.similarity_class_type.SimilarityClassTypes"]], "as_partition_dictionary() (sage.combinat.similarity_class_type.similarityclasstype method)": [[310, "sage.combinat.similarity_class_type.SimilarityClassType.as_partition_dictionary"]], "centralizer_algebra_dim() (in module sage.combinat.similarity_class_type)": [[310, "sage.combinat.similarity_class_type.centralizer_algebra_dim"]], "centralizer_algebra_dim() (sage.combinat.similarity_class_type.primarysimilarityclasstype method)": [[310, "sage.combinat.similarity_class_type.PrimarySimilarityClassType.centralizer_algebra_dim"]], "centralizer_algebra_dim() (sage.combinat.similarity_class_type.similarityclasstype method)": [[310, "sage.combinat.similarity_class_type.SimilarityClassType.centralizer_algebra_dim"]], "centralizer_group_card() (sage.combinat.similarity_class_type.primarysimilarityclasstype method)": [[310, "sage.combinat.similarity_class_type.PrimarySimilarityClassType.centralizer_group_card"]], "centralizer_group_card() (sage.combinat.similarity_class_type.similarityclasstype method)": [[310, "sage.combinat.similarity_class_type.SimilarityClassType.centralizer_group_card"]], "centralizer_group_cardinality() (in module sage.combinat.similarity_class_type)": [[310, "sage.combinat.similarity_class_type.centralizer_group_cardinality"]], "class_card() (sage.combinat.similarity_class_type.similarityclasstype method)": [[310, "sage.combinat.similarity_class_type.SimilarityClassType.class_card"]], "degree() (sage.combinat.similarity_class_type.primarysimilarityclasstype method)": [[310, "sage.combinat.similarity_class_type.PrimarySimilarityClassType.degree"]], "dictionary_from_generator() (in module sage.combinat.similarity_class_type)": [[310, "sage.combinat.similarity_class_type.dictionary_from_generator"]], "ext_orbit_centralizers() (in module sage.combinat.similarity_class_type)": [[310, "sage.combinat.similarity_class_type.ext_orbit_centralizers"]], "ext_orbits() (in module sage.combinat.similarity_class_type)": [[310, "sage.combinat.similarity_class_type.ext_orbits"]], "fq() (in module sage.combinat.similarity_class_type)": [[310, "sage.combinat.similarity_class_type.fq"]], "input_parsing() (in module sage.combinat.similarity_class_type)": [[310, "sage.combinat.similarity_class_type.input_parsing"]], "invariant_subspace_generating_function() (in module sage.combinat.similarity_class_type)": [[310, "sage.combinat.similarity_class_type.invariant_subspace_generating_function"]], "invariant_subspace_generating_function() (sage.combinat.similarity_class_type.primarysimilarityclasstype method)": [[310, "sage.combinat.similarity_class_type.PrimarySimilarityClassType.invariant_subspace_generating_function"]], "invariant_subspace_generating_function() (sage.combinat.similarity_class_type.similarityclasstype method)": [[310, "sage.combinat.similarity_class_type.SimilarityClassType.invariant_subspace_generating_function"]], "is_regular() (sage.combinat.similarity_class_type.similarityclasstype method)": [[310, "sage.combinat.similarity_class_type.SimilarityClassType.is_regular"]], "is_semisimple() (sage.combinat.similarity_class_type.similarityclasstype method)": [[310, "sage.combinat.similarity_class_type.SimilarityClassType.is_semisimple"]], "matrix_centralizer_cardinalities() (in module sage.combinat.similarity_class_type)": [[310, "sage.combinat.similarity_class_type.matrix_centralizer_cardinalities"]], "matrix_centralizer_cardinalities_length_two() (in module sage.combinat.similarity_class_type)": [[310, "sage.combinat.similarity_class_type.matrix_centralizer_cardinalities_length_two"]], "matrix_similarity_classes() (in module sage.combinat.similarity_class_type)": [[310, "sage.combinat.similarity_class_type.matrix_similarity_classes"]], "matrix_similarity_classes_length_two() (in module sage.combinat.similarity_class_type)": [[310, "sage.combinat.similarity_class_type.matrix_similarity_classes_length_two"]], "number_of_classes() (sage.combinat.similarity_class_type.similarityclasstype method)": [[310, "sage.combinat.similarity_class_type.SimilarityClassType.number_of_classes"]], "number_of_matrices() (sage.combinat.similarity_class_type.similarityclasstype method)": [[310, "sage.combinat.similarity_class_type.SimilarityClassType.number_of_matrices"]], "order_of_general_linear_group() (in module sage.combinat.similarity_class_type)": [[310, "sage.combinat.similarity_class_type.order_of_general_linear_group"]], "partition() (sage.combinat.similarity_class_type.primarysimilarityclasstype method)": [[310, "sage.combinat.similarity_class_type.PrimarySimilarityClassType.partition"]], "primitives() (in module sage.combinat.similarity_class_type)": [[310, "sage.combinat.similarity_class_type.primitives"]], "rcf() (sage.combinat.similarity_class_type.similarityclasstype method)": [[310, "sage.combinat.similarity_class_type.SimilarityClassType.rcf"]], "sage.combinat.similarity_class_type": [[310, "module-sage.combinat.similarity_class_type"]], "size() (sage.combinat.similarity_class_type.primarysimilarityclasstype method)": [[310, "sage.combinat.similarity_class_type.PrimarySimilarityClassType.size"]], "size() (sage.combinat.similarity_class_type.primarysimilarityclasstypes method)": [[310, "sage.combinat.similarity_class_type.PrimarySimilarityClassTypes.size"]], "size() (sage.combinat.similarity_class_type.similarityclasstype method)": [[310, "sage.combinat.similarity_class_type.SimilarityClassType.size"]], "size() (sage.combinat.similarity_class_type.similarityclasstypes method)": [[310, "sage.combinat.similarity_class_type.SimilarityClassTypes.size"]], "statistic() (sage.combinat.similarity_class_type.primarysimilarityclasstype method)": [[310, "sage.combinat.similarity_class_type.PrimarySimilarityClassType.statistic"]], "statistic() (sage.combinat.similarity_class_type.similarityclasstype method)": [[310, "sage.combinat.similarity_class_type.SimilarityClassType.statistic"]], "sum() (sage.combinat.similarity_class_type.similarityclasstypes method)": [[310, "sage.combinat.similarity_class_type.SimilarityClassTypes.sum"]], "f() (sage.combinat.sine_gordon.sinegordonysystem method)": [[311, "sage.combinat.sine_gordon.SineGordonYsystem.F"]], "sinegordonysystem (class in sage.combinat.sine_gordon)": [[311, "sage.combinat.sine_gordon.SineGordonYsystem"]], "intervals() (sage.combinat.sine_gordon.sinegordonysystem method)": [[311, "sage.combinat.sine_gordon.SineGordonYsystem.intervals"]], "na() (sage.combinat.sine_gordon.sinegordonysystem method)": [[311, "sage.combinat.sine_gordon.SineGordonYsystem.na"]], "pa() (sage.combinat.sine_gordon.sinegordonysystem method)": [[311, "sage.combinat.sine_gordon.SineGordonYsystem.pa"]], "plot() (sage.combinat.sine_gordon.sinegordonysystem method)": [[311, "sage.combinat.sine_gordon.SineGordonYsystem.plot"]], "qa() (sage.combinat.sine_gordon.sinegordonysystem method)": [[311, "sage.combinat.sine_gordon.SineGordonYsystem.qa"]], "r() (sage.combinat.sine_gordon.sinegordonysystem method)": [[311, "sage.combinat.sine_gordon.SineGordonYsystem.r"]], "rk() (sage.combinat.sine_gordon.sinegordonysystem method)": [[311, "sage.combinat.sine_gordon.SineGordonYsystem.rk"]], "sage.combinat.sine_gordon": [[311, "module-sage.combinat.sine_gordon"]], "triangulation() (sage.combinat.sine_gordon.sinegordonysystem method)": [[311, "sage.combinat.sine_gordon.SineGordonYsystem.triangulation"]], "type() (sage.combinat.sine_gordon.sinegordonysystem method)": [[311, "sage.combinat.sine_gordon.SineGordonYsystem.type"]], "vertices() (sage.combinat.sine_gordon.sinegordonysystem method)": [[311, "sage.combinat.sine_gordon.SineGordonYsystem.vertices"]], "element (sage.combinat.six_vertex_model.sixvertexmodel attribute)": [[312, "sage.combinat.six_vertex_model.SixVertexModel.Element"]], "sixvertexconfiguration (class in sage.combinat.six_vertex_model)": [[312, "sage.combinat.six_vertex_model.SixVertexConfiguration"]], "sixvertexmodel (class in sage.combinat.six_vertex_model)": [[312, "sage.combinat.six_vertex_model.SixVertexModel"]], "squareicemodel (class in sage.combinat.six_vertex_model)": [[312, "sage.combinat.six_vertex_model.SquareIceModel"]], "squareicemodel.element (class in sage.combinat.six_vertex_model)": [[312, "sage.combinat.six_vertex_model.SquareIceModel.Element"]], "boundary_conditions() (sage.combinat.six_vertex_model.sixvertexmodel method)": [[312, "sage.combinat.six_vertex_model.SixVertexModel.boundary_conditions"]], "check() (sage.combinat.six_vertex_model.sixvertexconfiguration method)": [[312, "sage.combinat.six_vertex_model.SixVertexConfiguration.check"]], "energy() (sage.combinat.six_vertex_model.sixvertexconfiguration method)": [[312, "sage.combinat.six_vertex_model.SixVertexConfiguration.energy"]], "from_alternating_sign_matrix() (sage.combinat.six_vertex_model.squareicemodel method)": [[312, "sage.combinat.six_vertex_model.SquareIceModel.from_alternating_sign_matrix"]], "partition_function() (sage.combinat.six_vertex_model.sixvertexmodel method)": [[312, "sage.combinat.six_vertex_model.SixVertexModel.partition_function"]], "plot() (sage.combinat.six_vertex_model.sixvertexconfiguration method)": [[312, "sage.combinat.six_vertex_model.SixVertexConfiguration.plot"]], "sage.combinat.six_vertex_model": [[312, "module-sage.combinat.six_vertex_model"]], "to_alternating_sign_matrix() (sage.combinat.six_vertex_model.squareicemodel.element method)": [[312, "sage.combinat.six_vertex_model.SquareIceModel.Element.to_alternating_sign_matrix"]], "to_signed_matrix() (sage.combinat.six_vertex_model.sixvertexconfiguration method)": [[312, "sage.combinat.six_vertex_model.SixVertexConfiguration.to_signed_matrix"]], "element (sage.combinat.skew_partition.skewpartitions attribute)": [[313, "sage.combinat.skew_partition.SkewPartitions.Element"]], "skewpartition (class in sage.combinat.skew_partition)": [[313, "sage.combinat.skew_partition.SkewPartition"]], "skewpartitions (class in sage.combinat.skew_partition)": [[313, "sage.combinat.skew_partition.SkewPartitions"]], "skewpartitions_all (class in sage.combinat.skew_partition)": [[313, "sage.combinat.skew_partition.SkewPartitions_all"]], "skewpartitions_n (class in sage.combinat.skew_partition)": [[313, "sage.combinat.skew_partition.SkewPartitions_n"]], "skewpartitions_rowlengths (class in sage.combinat.skew_partition)": [[313, "sage.combinat.skew_partition.SkewPartitions_rowlengths"]], "cardinality() (sage.combinat.skew_partition.skewpartitions_n method)": [[313, "sage.combinat.skew_partition.SkewPartitions_n.cardinality"]], "cell_poset() (sage.combinat.skew_partition.skewpartition method)": [[313, "sage.combinat.skew_partition.SkewPartition.cell_poset"]], "cells() (sage.combinat.skew_partition.skewpartition method)": [[313, "sage.combinat.skew_partition.SkewPartition.cells"]], "column_lengths() (sage.combinat.skew_partition.skewpartition method)": [[313, "sage.combinat.skew_partition.SkewPartition.column_lengths"]], "columns_intersection_set() (sage.combinat.skew_partition.skewpartition method)": [[313, "sage.combinat.skew_partition.SkewPartition.columns_intersection_set"]], "conjugate() (sage.combinat.skew_partition.skewpartition method)": [[313, "sage.combinat.skew_partition.SkewPartition.conjugate"]], "diagram() (sage.combinat.skew_partition.skewpartition method)": [[313, "sage.combinat.skew_partition.SkewPartition.diagram"]], "ferrers_diagram() (sage.combinat.skew_partition.skewpartition method)": [[313, "sage.combinat.skew_partition.SkewPartition.ferrers_diagram"]], "frobenius_rank() (sage.combinat.skew_partition.skewpartition method)": [[313, "sage.combinat.skew_partition.SkewPartition.frobenius_rank"]], "from_row_and_column_length() (sage.combinat.skew_partition.skewpartitions method)": [[313, "sage.combinat.skew_partition.SkewPartitions.from_row_and_column_length"]], "inner() (sage.combinat.skew_partition.skewpartition method)": [[313, "sage.combinat.skew_partition.SkewPartition.inner"]], "inner_corners() (sage.combinat.skew_partition.skewpartition method)": [[313, "sage.combinat.skew_partition.SkewPartition.inner_corners"]], "is_connected() (sage.combinat.skew_partition.skewpartition method)": [[313, "sage.combinat.skew_partition.SkewPartition.is_connected"]], "is_overlap() (sage.combinat.skew_partition.skewpartition method)": [[313, "sage.combinat.skew_partition.SkewPartition.is_overlap"]], "is_ribbon() (sage.combinat.skew_partition.skewpartition method)": [[313, "sage.combinat.skew_partition.SkewPartition.is_ribbon"]], "jacobi_trudi() (sage.combinat.skew_partition.skewpartition method)": [[313, "sage.combinat.skew_partition.SkewPartition.jacobi_trudi"]], "k_conjugate() (sage.combinat.skew_partition.skewpartition method)": [[313, "sage.combinat.skew_partition.SkewPartition.k_conjugate"]], "options (sage.combinat.skew_partition.skewpartitions attribute)": [[313, "sage.combinat.skew_partition.SkewPartitions.options"]], "outer() (sage.combinat.skew_partition.skewpartition method)": [[313, "sage.combinat.skew_partition.SkewPartition.outer"]], "outer_corners() (sage.combinat.skew_partition.skewpartition method)": [[313, "sage.combinat.skew_partition.SkewPartition.outer_corners"]], "outside_corners() (sage.combinat.skew_partition.skewpartition method)": [[313, "sage.combinat.skew_partition.SkewPartition.outside_corners"]], "overlap() (sage.combinat.skew_partition.skewpartition method)": [[313, "sage.combinat.skew_partition.SkewPartition.overlap"]], "pieri_macdonald_coeffs() (sage.combinat.skew_partition.skewpartition method)": [[313, "sage.combinat.skew_partition.SkewPartition.pieri_macdonald_coeffs"]], "pp() (sage.combinat.skew_partition.skewpartition method)": [[313, "sage.combinat.skew_partition.SkewPartition.pp"]], "quotient() (sage.combinat.skew_partition.skewpartition method)": [[313, "sage.combinat.skew_partition.SkewPartition.quotient"]], "row_lengths() (sage.combinat.skew_partition.skewpartition method)": [[313, "sage.combinat.skew_partition.SkewPartition.row_lengths"]], "row_lengths_aux() (in module sage.combinat.skew_partition)": [[313, "sage.combinat.skew_partition.row_lengths_aux"]], "rows_intersection_set() (sage.combinat.skew_partition.skewpartition method)": [[313, "sage.combinat.skew_partition.SkewPartition.rows_intersection_set"]], "sage.combinat.skew_partition": [[313, "module-sage.combinat.skew_partition"]], "size() (sage.combinat.skew_partition.skewpartition method)": [[313, "sage.combinat.skew_partition.SkewPartition.size"]], "specht_module() (sage.combinat.skew_partition.skewpartition method)": [[313, "sage.combinat.skew_partition.SkewPartition.specht_module"]], "specht_module_dimension() (sage.combinat.skew_partition.skewpartition method)": [[313, "sage.combinat.skew_partition.SkewPartition.specht_module_dimension"]], "to_dag() (sage.combinat.skew_partition.skewpartition method)": [[313, "sage.combinat.skew_partition.SkewPartition.to_dag"]], "to_list() (sage.combinat.skew_partition.skewpartition method)": [[313, "sage.combinat.skew_partition.SkewPartition.to_list"]], "element (sage.combinat.skew_tableau.skewtableaux attribute)": [[314, "sage.combinat.skew_tableau.SkewTableaux.Element"]], "semistandardskewtableaux (class in sage.combinat.skew_tableau)": [[314, "sage.combinat.skew_tableau.SemistandardSkewTableaux"]], "semistandardskewtableaux_all (class in sage.combinat.skew_tableau)": [[314, "sage.combinat.skew_tableau.SemistandardSkewTableaux_all"]], "semistandardskewtableaux_shape (class in sage.combinat.skew_tableau)": [[314, "sage.combinat.skew_tableau.SemistandardSkewTableaux_shape"]], "semistandardskewtableaux_shape_weight (class in sage.combinat.skew_tableau)": [[314, "sage.combinat.skew_tableau.SemistandardSkewTableaux_shape_weight"]], "semistandardskewtableaux_size (class in sage.combinat.skew_tableau)": [[314, "sage.combinat.skew_tableau.SemistandardSkewTableaux_size"]], "semistandardskewtableaux_size_weight (class in sage.combinat.skew_tableau)": [[314, "sage.combinat.skew_tableau.SemistandardSkewTableaux_size_weight"]], "skewtableau (class in sage.combinat.skew_tableau)": [[314, "sage.combinat.skew_tableau.SkewTableau"]], "skewtableau_class (class in sage.combinat.skew_tableau)": [[314, "sage.combinat.skew_tableau.SkewTableau_class"]], "skewtableaux (class in sage.combinat.skew_tableau)": [[314, "sage.combinat.skew_tableau.SkewTableaux"]], "standardskewtableaux (class in sage.combinat.skew_tableau)": [[314, "sage.combinat.skew_tableau.StandardSkewTableaux"]], "standardskewtableaux_all (class in sage.combinat.skew_tableau)": [[314, "sage.combinat.skew_tableau.StandardSkewTableaux_all"]], "standardskewtableaux_shape (class in sage.combinat.skew_tableau)": [[314, "sage.combinat.skew_tableau.StandardSkewTableaux_shape"]], "standardskewtableaux_size (class in sage.combinat.skew_tableau)": [[314, "sage.combinat.skew_tableau.StandardSkewTableaux_size"]], "backward_slide() (sage.combinat.skew_tableau.skewtableau method)": [[314, "sage.combinat.skew_tableau.SkewTableau.backward_slide"]], "bender_knuth_involution() (sage.combinat.skew_tableau.skewtableau method)": [[314, "sage.combinat.skew_tableau.SkewTableau.bender_knuth_involution"]], "cardinality() (sage.combinat.skew_tableau.semistandardskewtableaux_shape method)": [[314, "sage.combinat.skew_tableau.SemistandardSkewTableaux_shape.cardinality"]], "cardinality() (sage.combinat.skew_tableau.semistandardskewtableaux_size method)": [[314, "sage.combinat.skew_tableau.SemistandardSkewTableaux_size.cardinality"]], "cardinality() (sage.combinat.skew_tableau.semistandardskewtableaux_size_weight method)": [[314, "sage.combinat.skew_tableau.SemistandardSkewTableaux_size_weight.cardinality"]], "cardinality() (sage.combinat.skew_tableau.standardskewtableaux_shape method)": [[314, "sage.combinat.skew_tableau.StandardSkewTableaux_shape.cardinality"]], "cardinality() (sage.combinat.skew_tableau.standardskewtableaux_size method)": [[314, "sage.combinat.skew_tableau.StandardSkewTableaux_size.cardinality"]], "cells() (sage.combinat.skew_tableau.skewtableau method)": [[314, "sage.combinat.skew_tableau.SkewTableau.cells"]], "cells_by_content() (sage.combinat.skew_tableau.skewtableau method)": [[314, "sage.combinat.skew_tableau.SkewTableau.cells_by_content"]], "cells_containing() (sage.combinat.skew_tableau.skewtableau method)": [[314, "sage.combinat.skew_tableau.SkewTableau.cells_containing"]], "check() (sage.combinat.skew_tableau.skewtableau method)": [[314, "sage.combinat.skew_tableau.SkewTableau.check"]], "conjugate() (sage.combinat.skew_tableau.skewtableau method)": [[314, "sage.combinat.skew_tableau.SkewTableau.conjugate"]], "entries_by_content() (sage.combinat.skew_tableau.skewtableau method)": [[314, "sage.combinat.skew_tableau.SkewTableau.entries_by_content"]], "evaluation() (sage.combinat.skew_tableau.skewtableau method)": [[314, "sage.combinat.skew_tableau.SkewTableau.evaluation"]], "filling() (sage.combinat.skew_tableau.skewtableau method)": [[314, "sage.combinat.skew_tableau.SkewTableau.filling"]], "from_chain() (sage.combinat.skew_tableau.skewtableaux method)": [[314, "sage.combinat.skew_tableau.SkewTableaux.from_chain"]], "from_expr() (sage.combinat.skew_tableau.skewtableaux method)": [[314, "sage.combinat.skew_tableau.SkewTableaux.from_expr"]], "from_shape_and_word() (sage.combinat.skew_tableau.skewtableaux method)": [[314, "sage.combinat.skew_tableau.SkewTableaux.from_shape_and_word"]], "inner_shape() (sage.combinat.skew_tableau.skewtableau method)": [[314, "sage.combinat.skew_tableau.SkewTableau.inner_shape"]], "inner_size() (sage.combinat.skew_tableau.skewtableau method)": [[314, "sage.combinat.skew_tableau.SkewTableau.inner_size"]], "is_k_tableau() (sage.combinat.skew_tableau.skewtableau method)": [[314, "sage.combinat.skew_tableau.SkewTableau.is_k_tableau"]], "is_ribbon() (sage.combinat.skew_tableau.skewtableau method)": [[314, "sage.combinat.skew_tableau.SkewTableau.is_ribbon"]], "is_semistandard() (sage.combinat.skew_tableau.skewtableau method)": [[314, "sage.combinat.skew_tableau.SkewTableau.is_semistandard"]], "is_standard() (sage.combinat.skew_tableau.skewtableau method)": [[314, "sage.combinat.skew_tableau.SkewTableau.is_standard"]], "options (sage.combinat.skew_tableau.skewtableaux attribute)": [[314, "sage.combinat.skew_tableau.SkewTableaux.options"]], "outer_shape() (sage.combinat.skew_tableau.skewtableau method)": [[314, "sage.combinat.skew_tableau.SkewTableau.outer_shape"]], "outer_size() (sage.combinat.skew_tableau.skewtableau method)": [[314, "sage.combinat.skew_tableau.SkewTableau.outer_size"]], "pp() (sage.combinat.skew_tableau.skewtableau method)": [[314, "sage.combinat.skew_tableau.SkewTableau.pp"]], "rectify() (sage.combinat.skew_tableau.skewtableau method)": [[314, "sage.combinat.skew_tableau.SkewTableau.rectify"]], "restrict() (sage.combinat.skew_tableau.skewtableau method)": [[314, "sage.combinat.skew_tableau.SkewTableau.restrict"]], "restriction_outer_shape() (sage.combinat.skew_tableau.skewtableau method)": [[314, "sage.combinat.skew_tableau.SkewTableau.restriction_outer_shape"]], "restriction_shape() (sage.combinat.skew_tableau.skewtableau method)": [[314, "sage.combinat.skew_tableau.SkewTableau.restriction_shape"]], "reverse_slide() (sage.combinat.skew_tableau.skewtableau method)": [[314, "sage.combinat.skew_tableau.SkewTableau.reverse_slide"]], "sage.combinat.skew_tableau": [[314, "module-sage.combinat.skew_tableau"]], "shape() (sage.combinat.skew_tableau.skewtableau method)": [[314, "sage.combinat.skew_tableau.SkewTableau.shape"]], "shuffle() (sage.combinat.skew_tableau.skewtableau method)": [[314, "sage.combinat.skew_tableau.SkewTableau.shuffle"]], "size() (sage.combinat.skew_tableau.skewtableau method)": [[314, "sage.combinat.skew_tableau.SkewTableau.size"]], "slide() (sage.combinat.skew_tableau.skewtableau method)": [[314, "sage.combinat.skew_tableau.SkewTableau.slide"]], "standardization() (sage.combinat.skew_tableau.skewtableau method)": [[314, "sage.combinat.skew_tableau.SkewTableau.standardization"]], "to_chain() (sage.combinat.skew_tableau.skewtableau method)": [[314, "sage.combinat.skew_tableau.SkewTableau.to_chain"]], "to_expr() (sage.combinat.skew_tableau.skewtableau method)": [[314, "sage.combinat.skew_tableau.SkewTableau.to_expr"]], "to_list() (sage.combinat.skew_tableau.skewtableau method)": [[314, "sage.combinat.skew_tableau.SkewTableau.to_list"]], "to_permutation() (sage.combinat.skew_tableau.skewtableau method)": [[314, "sage.combinat.skew_tableau.SkewTableau.to_permutation"]], "to_ribbon() (sage.combinat.skew_tableau.skewtableau method)": [[314, "sage.combinat.skew_tableau.SkewTableau.to_ribbon"]], "to_tableau() (sage.combinat.skew_tableau.skewtableau method)": [[314, "sage.combinat.skew_tableau.SkewTableau.to_tableau"]], "to_word() (sage.combinat.skew_tableau.skewtableau method)": [[314, "sage.combinat.skew_tableau.SkewTableau.to_word"]], "to_word_by_column() (sage.combinat.skew_tableau.skewtableau method)": [[314, "sage.combinat.skew_tableau.SkewTableau.to_word_by_column"]], "to_word_by_row() (sage.combinat.skew_tableau.skewtableau method)": [[314, "sage.combinat.skew_tableau.SkewTableau.to_word_by_row"]], "weight() (sage.combinat.skew_tableau.skewtableau method)": [[314, "sage.combinat.skew_tableau.SkewTableau.weight"]], "a000001 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A000001"]], "a000004 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A000004"]], "a000005 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A000005"]], "a000007 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A000007"]], "a000008 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A000008"]], "a000009 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A000009"]], "a000010 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A000010"]], "a000012 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A000012"]], "a000015 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A000015"]], "a000016 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A000016"]], "a000027 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A000027"]], "a000030 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A000030"]], "a000032 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A000032"]], "a000035 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A000035"]], "a000040 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A000040"]], "a000041 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A000041"]], "a000043 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A000043"]], "a000045 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A000045"]], "a000069 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A000069"]], "a000073 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A000073"]], "a000079 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A000079"]], "a000085 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A000085"]], "a000100 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A000100"]], "a000108 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A000108"]], "a000110 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A000110"]], "a000120 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A000120"]], "a000124 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A000124"]], "a000129 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A000129"]], "a000142 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A000142"]], "a000153 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A000153"]], "a000165 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A000165"]], "a000166 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A000166"]], "a000169 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A000169"]], "a000203 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A000203"]], "a000204 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A000204"]], "a000213 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A000213"]], "a000217 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A000217"]], "a000225 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A000225"]], "a000244 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A000244"]], "a000255 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A000255"]], "a000261 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A000261"]], "a000272 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A000272"]], "a000290 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A000290"]], "a000292 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A000292"]], "a000302 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A000302"]], "a000312 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A000312"]], "a000326 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A000326"]], "a000330 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A000330"]], "a000396 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A000396"]], "a000578 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A000578"]], "a000583 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A000583"]], "a000587 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A000587"]], "a000668 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A000668"]], "a000670 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A000670"]], "a000720 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A000720"]], "a000796 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A000796"]], "a000961 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A000961"]], "a000984 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A000984"]], "a001006 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A001006"]], "a001045 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A001045"]], "a001055 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A001055"]], "a001109 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A001109"]], "a001110 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A001110"]], "a001147 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A001147"]], "a001157 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A001157"]], "a001189 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A001189"]], "a001221 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A001221"]], "a001222 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A001222"]], "a001227 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A001227"]], "a001333 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A001333"]], "a001358 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A001358"]], "a001405 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A001405"]], "a001477 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A001477"]], "a001694 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A001694"]], "a001836 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A001836"]], "a001906 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A001906"]], "a001909 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A001909"]], "a001910 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A001910"]], "a001969 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A001969"]], "a002110 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A002110"]], "a002113 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A002113"]], "a002275 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A002275"]], "a002378 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A002378"]], "a002620 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A002620"]], "a002808 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A002808"]], "a003418 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A003418"]], "a004086 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A004086"]], "a004526 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A004526"]], "a005100 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A005100"]], "a005101 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A005101"]], "a005117 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A005117"]], "a005408 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A005408"]], "a005843 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A005843"]], "a006318 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A006318"]], "a006530 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A006530"]], "a006882 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A006882"]], "a007318 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A007318"]], "a008275 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A008275"]], "a008277 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A008277"]], "a008683 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A008683"]], "a010060 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A010060"]], "a015521 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A015521"]], "a015523 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A015523"]], "a015530 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A015530"]], "a015531 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A015531"]], "a015551 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A015551"]], "a018252 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A018252"]], "a020639 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A020639"]], "a046660 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A046660"]], "a049310 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A049310"]], "a051959 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A051959"]], "a055790 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A055790"]], "a061084 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A061084"]], "a064553 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A064553"]], "a079922 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A079922"]], "a079923 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A079923"]], "a082411 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A082411"]], "a083103 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A083103"]], "a083104 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A083104"]], "a083105 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A083105"]], "a083216 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A083216"]], "a090010 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A090010"]], "a090012 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A090012"]], "a090013 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A090013"]], "a090014 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A090014"]], "a090015 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A090015"]], "a090016 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A090016"]], "a109814 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A109814"]], "a111774 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A111774"]], "a111775 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A111775"]], "a111787 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.A111787"]], "exponentialnumbers (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.ExponentialNumbers"]], "extremesofpermanentssequence (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.ExtremesOfPermanentsSequence"]], "extremesofpermanentssequence2 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.ExtremesOfPermanentsSequence2"]], "recurrencesequence (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.RecurrenceSequence"]], "recurrencesequence2 (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.RecurrenceSequence2"]], "sloane (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.Sloane"]], "sloanesequence (class in sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.SloaneSequence"]], "cf() (sage.combinat.sloane_functions.a000009 method)": [[315, "sage.combinat.sloane_functions.A000009.cf"]], "df() (sage.combinat.sloane_functions.a006882 method)": [[315, "sage.combinat.sloane_functions.A006882.df"]], "f() (sage.combinat.sloane_functions.a000120 method)": [[315, "sage.combinat.sloane_functions.A000120.f"]], "fib() (sage.combinat.sloane_functions.a000045 method)": [[315, "sage.combinat.sloane_functions.A000045.fib"]], "g() (sage.combinat.sloane_functions.a001110 method)": [[315, "sage.combinat.sloane_functions.A001110.g"]], "g() (sage.combinat.sloane_functions.a051959 method)": [[315, "sage.combinat.sloane_functions.A051959.g"]], "gen() (sage.combinat.sloane_functions.extremesofpermanentssequence method)": [[315, "sage.combinat.sloane_functions.ExtremesOfPermanentsSequence.gen"]], "gen() (sage.combinat.sloane_functions.extremesofpermanentssequence2 method)": [[315, "sage.combinat.sloane_functions.ExtremesOfPermanentsSequence2.gen"]], "is_number_of_the_third_kind() (sage.combinat.sloane_functions.a111774 method)": [[315, "sage.combinat.sloane_functions.A111774.is_number_of_the_third_kind"]], "is_powerful() (sage.combinat.sloane_functions.a001694 method)": [[315, "sage.combinat.sloane_functions.A001694.is_powerful"]], "keyword (sage.combinat.sloane_functions.a007318 attribute)": [[315, "sage.combinat.sloane_functions.A007318.keyword"]], "keyword (sage.combinat.sloane_functions.a008275 attribute)": [[315, "sage.combinat.sloane_functions.A008275.keyword"]], "keyword (sage.combinat.sloane_functions.a008277 attribute)": [[315, "sage.combinat.sloane_functions.A008277.keyword"]], "keyword (sage.combinat.sloane_functions.a049310 attribute)": [[315, "sage.combinat.sloane_functions.A049310.keyword"]], "keyword (sage.combinat.sloane_functions.a061084 attribute)": [[315, "sage.combinat.sloane_functions.A061084.keyword"]], "link (sage.combinat.sloane_functions.a000027 attribute)": [[315, "sage.combinat.sloane_functions.A000027.link"]], "link (sage.combinat.sloane_functions.a001110 attribute)": [[315, "sage.combinat.sloane_functions.A001110.link"]], "list() (sage.combinat.sloane_functions.a000009 method)": [[315, "sage.combinat.sloane_functions.A000009.list"]], "list() (sage.combinat.sloane_functions.a000045 method)": [[315, "sage.combinat.sloane_functions.A000045.list"]], "list() (sage.combinat.sloane_functions.a000073 method)": [[315, "sage.combinat.sloane_functions.A000073.list"]], "list() (sage.combinat.sloane_functions.a000213 method)": [[315, "sage.combinat.sloane_functions.A000213.list"]], "list() (sage.combinat.sloane_functions.a000796 method)": [[315, "sage.combinat.sloane_functions.A000796.list"]], "list() (sage.combinat.sloane_functions.a000961 method)": [[315, "sage.combinat.sloane_functions.A000961.list"]], "list() (sage.combinat.sloane_functions.a001358 method)": [[315, "sage.combinat.sloane_functions.A001358.list"]], "list() (sage.combinat.sloane_functions.a001694 method)": [[315, "sage.combinat.sloane_functions.A001694.list"]], "list() (sage.combinat.sloane_functions.a001836 method)": [[315, "sage.combinat.sloane_functions.A001836.list"]], "list() (sage.combinat.sloane_functions.a002113 method)": [[315, "sage.combinat.sloane_functions.A002113.list"]], "list() (sage.combinat.sloane_functions.a002808 method)": [[315, "sage.combinat.sloane_functions.A002808.list"]], "list() (sage.combinat.sloane_functions.a005100 method)": [[315, "sage.combinat.sloane_functions.A005100.list"]], "list() (sage.combinat.sloane_functions.a005101 method)": [[315, "sage.combinat.sloane_functions.A005101.list"]], "list() (sage.combinat.sloane_functions.a005117 method)": [[315, "sage.combinat.sloane_functions.A005117.list"]], "list() (sage.combinat.sloane_functions.a006882 method)": [[315, "sage.combinat.sloane_functions.A006882.list"]], "list() (sage.combinat.sloane_functions.a020639 method)": [[315, "sage.combinat.sloane_functions.A020639.list"]], "list() (sage.combinat.sloane_functions.a111774 method)": [[315, "sage.combinat.sloane_functions.A111774.list"]], "list() (sage.combinat.sloane_functions.extremesofpermanentssequence method)": [[315, "sage.combinat.sloane_functions.ExtremesOfPermanentsSequence.list"]], "list() (sage.combinat.sloane_functions.recurrencesequence method)": [[315, "sage.combinat.sloane_functions.RecurrenceSequence.list"]], "list() (sage.combinat.sloane_functions.recurrencesequence2 method)": [[315, "sage.combinat.sloane_functions.RecurrenceSequence2.list"]], "list() (sage.combinat.sloane_functions.sloanesequence method)": [[315, "sage.combinat.sloane_functions.SloaneSequence.list"]], "nwf() (sage.combinat.sloane_functions.a001055 method)": [[315, "sage.combinat.sloane_functions.A001055.nwf"]], "perm_mh() (in module sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.perm_mh"]], "pi() (sage.combinat.sloane_functions.a000796 method)": [[315, "sage.combinat.sloane_functions.A000796.pi"]], "recur_gen2() (in module sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.recur_gen2"]], "recur_gen2b() (in module sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.recur_gen2b"]], "recur_gen3() (in module sage.combinat.sloane_functions)": [[315, "sage.combinat.sloane_functions.recur_gen3"]], "s() (sage.combinat.sloane_functions.a008275 method)": [[315, "sage.combinat.sloane_functions.A008275.s"]], "s2() (sage.combinat.sloane_functions.a008277 method)": [[315, "sage.combinat.sloane_functions.A008277.s2"]], "sage.combinat.sloane_functions": [[315, "module-sage.combinat.sloane_functions"]], "spechtmodule (class in sage.combinat.specht_module)": [[316, "sage.combinat.specht_module.SpechtModule"]], "spechtmodule.element (class in sage.combinat.specht_module)": [[316, "sage.combinat.specht_module.SpechtModule.Element"]], "frobenius_image() (sage.combinat.specht_module.spechtmodule method)": [[316, "sage.combinat.specht_module.SpechtModule.frobenius_image"]], "representation_matrix() (sage.combinat.specht_module.spechtmodule method)": [[316, "sage.combinat.specht_module.SpechtModule.representation_matrix"]], "sage.combinat.specht_module": [[316, "module-sage.combinat.specht_module"]], "specht_module_rank() (in module sage.combinat.specht_module)": [[316, "sage.combinat.specht_module.specht_module_rank"]], "specht_module_spanning_set() (in module sage.combinat.specht_module)": [[316, "sage.combinat.specht_module.specht_module_spanning_set"]], "sage.combinat.species.all": [[317, "module-sage.combinat.species.all"]], "characteristicspecies (class in sage.combinat.species.characteristic_species)": [[318, "sage.combinat.species.characteristic_species.CharacteristicSpecies"]], "characteristicspeciesstructure (class in sage.combinat.species.characteristic_species)": [[318, "sage.combinat.species.characteristic_species.CharacteristicSpeciesStructure"]], "characteristicspecies_class (in module sage.combinat.species.characteristic_species)": [[318, "sage.combinat.species.characteristic_species.CharacteristicSpecies_class"]], "emptysetspecies (class in sage.combinat.species.characteristic_species)": [[318, "sage.combinat.species.characteristic_species.EmptySetSpecies"]], "emptysetspecies_class (in module sage.combinat.species.characteristic_species)": [[318, "sage.combinat.species.characteristic_species.EmptySetSpecies_class"]], "singletonspecies (class in sage.combinat.species.characteristic_species)": [[318, "sage.combinat.species.characteristic_species.SingletonSpecies"]], "singletonspecies_class (in module sage.combinat.species.characteristic_species)": [[318, "sage.combinat.species.characteristic_species.SingletonSpecies_class"]], "automorphism_group() (sage.combinat.species.characteristic_species.characteristicspeciesstructure method)": [[318, "sage.combinat.species.characteristic_species.CharacteristicSpeciesStructure.automorphism_group"]], "canonical_label() (sage.combinat.species.characteristic_species.characteristicspeciesstructure method)": [[318, "sage.combinat.species.characteristic_species.CharacteristicSpeciesStructure.canonical_label"]], "sage.combinat.species.characteristic_species": [[318, "module-sage.combinat.species.characteristic_species"]], "transport() (sage.combinat.species.characteristic_species.characteristicspeciesstructure method)": [[318, "sage.combinat.species.characteristic_species.CharacteristicSpeciesStructure.transport"]], "compositionspecies (class in sage.combinat.species.composition_species)": [[319, "sage.combinat.species.composition_species.CompositionSpecies"]], "compositionspeciesstructure (class in sage.combinat.species.composition_species)": [[319, "sage.combinat.species.composition_species.CompositionSpeciesStructure"]], "compositionspecies_class (in module sage.combinat.species.composition_species)": [[319, "sage.combinat.species.composition_species.CompositionSpecies_class"]], "change_labels() (sage.combinat.species.composition_species.compositionspeciesstructure method)": [[319, "sage.combinat.species.composition_species.CompositionSpeciesStructure.change_labels"]], "sage.combinat.species.composition_species": [[319, "module-sage.combinat.species.composition_species"]], "transport() (sage.combinat.species.composition_species.compositionspeciesstructure method)": [[319, "sage.combinat.species.composition_species.CompositionSpeciesStructure.transport"]], "weight_ring() (sage.combinat.species.composition_species.compositionspecies method)": [[319, "sage.combinat.species.composition_species.CompositionSpecies.weight_ring"]], "cyclespecies (class in sage.combinat.species.cycle_species)": [[320, "sage.combinat.species.cycle_species.CycleSpecies"]], "cyclespeciesstructure (class in sage.combinat.species.cycle_species)": [[320, "sage.combinat.species.cycle_species.CycleSpeciesStructure"]], "cyclespecies_class (in module sage.combinat.species.cycle_species)": [[320, "sage.combinat.species.cycle_species.CycleSpecies_class"]], "automorphism_group() (sage.combinat.species.cycle_species.cyclespeciesstructure method)": [[320, "sage.combinat.species.cycle_species.CycleSpeciesStructure.automorphism_group"]], "canonical_label() (sage.combinat.species.cycle_species.cyclespeciesstructure method)": [[320, "sage.combinat.species.cycle_species.CycleSpeciesStructure.canonical_label"]], "permutation_group_element() (sage.combinat.species.cycle_species.cyclespeciesstructure method)": [[320, "sage.combinat.species.cycle_species.CycleSpeciesStructure.permutation_group_element"]], "sage.combinat.species.cycle_species": [[320, "module-sage.combinat.species.cycle_species"]], "transport() (sage.combinat.species.cycle_species.cyclespeciesstructure method)": [[320, "sage.combinat.species.cycle_species.CycleSpeciesStructure.transport"]], "emptyspecies (class in sage.combinat.species.empty_species)": [[321, "sage.combinat.species.empty_species.EmptySpecies"]], "emptyspecies_class (in module sage.combinat.species.empty_species)": [[321, "sage.combinat.species.empty_species.EmptySpecies_class"]], "sage.combinat.species.empty_species": [[321, "module-sage.combinat.species.empty_species"]], "functorialcompositionspecies (class in sage.combinat.species.functorial_composition_species)": [[322, "sage.combinat.species.functorial_composition_species.FunctorialCompositionSpecies"]], "functorialcompositionspecies_class (in module sage.combinat.species.functorial_composition_species)": [[322, "sage.combinat.species.functorial_composition_species.FunctorialCompositionSpecies_class"]], "functorialcompositionstructure (class in sage.combinat.species.functorial_composition_species)": [[322, "sage.combinat.species.functorial_composition_species.FunctorialCompositionStructure"]], "sage.combinat.species.functorial_composition_species": [[322, "module-sage.combinat.species.functorial_composition_species"]], "weight_ring() (sage.combinat.species.functorial_composition_species.functorialcompositionspecies method)": [[322, "sage.combinat.species.functorial_composition_species.FunctorialCompositionSpecies.weight_ring"]], "cycleindexseries (class in sage.combinat.species.generating_series)": [[323, "sage.combinat.species.generating_series.CycleIndexSeries"]], "cycleindexseriesring (class in sage.combinat.species.generating_series)": [[323, "sage.combinat.species.generating_series.CycleIndexSeriesRing"]], "element (sage.combinat.species.generating_series.cycleindexseriesring attribute)": [[323, "sage.combinat.species.generating_series.CycleIndexSeriesRing.Element"]], "element (sage.combinat.species.generating_series.exponentialgeneratingseriesring attribute)": [[323, "sage.combinat.species.generating_series.ExponentialGeneratingSeriesRing.Element"]], "element (sage.combinat.species.generating_series.ordinarygeneratingseriesring attribute)": [[323, "sage.combinat.species.generating_series.OrdinaryGeneratingSeriesRing.Element"]], "exponentialcycleindexseries() (in module sage.combinat.species.generating_series)": [[323, "sage.combinat.species.generating_series.ExponentialCycleIndexSeries"]], "exponentialgeneratingseries (class in sage.combinat.species.generating_series)": [[323, "sage.combinat.species.generating_series.ExponentialGeneratingSeries"]], "exponentialgeneratingseriesring (class in sage.combinat.species.generating_series)": [[323, "sage.combinat.species.generating_series.ExponentialGeneratingSeriesRing"]], "logarithmcycleindexseries() (in module sage.combinat.species.generating_series)": [[323, "sage.combinat.species.generating_series.LogarithmCycleIndexSeries"]], "ordinarygeneratingseries (class in sage.combinat.species.generating_series)": [[323, "sage.combinat.species.generating_series.OrdinaryGeneratingSeries"]], "ordinarygeneratingseriesring (class in sage.combinat.species.generating_series)": [[323, "sage.combinat.species.generating_series.OrdinaryGeneratingSeriesRing"]], "coefficient_cycle_type() (sage.combinat.species.generating_series.cycleindexseries method)": [[323, "sage.combinat.species.generating_series.CycleIndexSeries.coefficient_cycle_type"]], "count() (sage.combinat.species.generating_series.cycleindexseries method)": [[323, "sage.combinat.species.generating_series.CycleIndexSeries.count"]], "count() (sage.combinat.species.generating_series.exponentialgeneratingseries method)": [[323, "sage.combinat.species.generating_series.ExponentialGeneratingSeries.count"]], "count() (sage.combinat.species.generating_series.ordinarygeneratingseries method)": [[323, "sage.combinat.species.generating_series.OrdinaryGeneratingSeries.count"]], "counts() (sage.combinat.species.generating_series.exponentialgeneratingseries method)": [[323, "sage.combinat.species.generating_series.ExponentialGeneratingSeries.counts"]], "counts() (sage.combinat.species.generating_series.ordinarygeneratingseries method)": [[323, "sage.combinat.species.generating_series.OrdinaryGeneratingSeries.counts"]], "derivative() (sage.combinat.species.generating_series.cycleindexseries method)": [[323, "sage.combinat.species.generating_series.CycleIndexSeries.derivative"]], "exponential() (sage.combinat.species.generating_series.cycleindexseries method)": [[323, "sage.combinat.species.generating_series.CycleIndexSeries.exponential"]], "functorial_composition() (sage.combinat.species.generating_series.exponentialgeneratingseries method)": [[323, "sage.combinat.species.generating_series.ExponentialGeneratingSeries.functorial_composition"]], "generating_series() (sage.combinat.species.generating_series.cycleindexseries method)": [[323, "sage.combinat.species.generating_series.CycleIndexSeries.generating_series"]], "isotype_generating_series() (sage.combinat.species.generating_series.cycleindexseries method)": [[323, "sage.combinat.species.generating_series.CycleIndexSeries.isotype_generating_series"]], "logarithm() (sage.combinat.species.generating_series.cycleindexseries method)": [[323, "sage.combinat.species.generating_series.CycleIndexSeries.logarithm"]], "pointing() (sage.combinat.species.generating_series.cycleindexseries method)": [[323, "sage.combinat.species.generating_series.CycleIndexSeries.pointing"]], "sage.combinat.species.generating_series": [[323, "module-sage.combinat.species.generating_series"]], "binaryforestspecies() (in module sage.combinat.species.library)": [[324, "sage.combinat.species.library.BinaryForestSpecies"]], "binarytreespecies() (in module sage.combinat.species.library)": [[324, "sage.combinat.species.library.BinaryTreeSpecies"]], "simplegraphspecies() (in module sage.combinat.species.library)": [[324, "sage.combinat.species.library.SimpleGraphSpecies"]], "sage.combinat.species.library": [[324, "module-sage.combinat.species.library"]], "linearorderspecies (class in sage.combinat.species.linear_order_species)": [[325, "sage.combinat.species.linear_order_species.LinearOrderSpecies"]], "linearorderspeciesstructure (class in sage.combinat.species.linear_order_species)": [[325, "sage.combinat.species.linear_order_species.LinearOrderSpeciesStructure"]], "linearorderspecies_class (in module sage.combinat.species.linear_order_species)": [[325, "sage.combinat.species.linear_order_species.LinearOrderSpecies_class"]], "automorphism_group() (sage.combinat.species.linear_order_species.linearorderspeciesstructure method)": [[325, "sage.combinat.species.linear_order_species.LinearOrderSpeciesStructure.automorphism_group"]], "canonical_label() (sage.combinat.species.linear_order_species.linearorderspeciesstructure method)": [[325, "sage.combinat.species.linear_order_species.LinearOrderSpeciesStructure.canonical_label"]], "sage.combinat.species.linear_order_species": [[325, "module-sage.combinat.species.linear_order_species"]], "transport() (sage.combinat.species.linear_order_species.linearorderspeciesstructure method)": [[325, "sage.combinat.species.linear_order_species.LinearOrderSpeciesStructure.transport"]], "accept_size() (in module sage.combinat.species.misc)": [[326, "sage.combinat.species.misc.accept_size"]], "change_support() (in module sage.combinat.species.misc)": [[326, "sage.combinat.species.misc.change_support"]], "sage.combinat.species.misc": [[326, "module-sage.combinat.species.misc"]], "partitionspecies (class in sage.combinat.species.partition_species)": [[327, "sage.combinat.species.partition_species.PartitionSpecies"]], "partitionspeciesstructure (class in sage.combinat.species.partition_species)": [[327, "sage.combinat.species.partition_species.PartitionSpeciesStructure"]], "partitionspecies_class (in module sage.combinat.species.partition_species)": [[327, "sage.combinat.species.partition_species.PartitionSpecies_class"]], "automorphism_group() (sage.combinat.species.partition_species.partitionspeciesstructure method)": [[327, "sage.combinat.species.partition_species.PartitionSpeciesStructure.automorphism_group"]], "canonical_label() (sage.combinat.species.partition_species.partitionspeciesstructure method)": [[327, "sage.combinat.species.partition_species.PartitionSpeciesStructure.canonical_label"]], "change_labels() (sage.combinat.species.partition_species.partitionspeciesstructure method)": [[327, "sage.combinat.species.partition_species.PartitionSpeciesStructure.change_labels"]], "sage.combinat.species.partition_species": [[327, "module-sage.combinat.species.partition_species"]], "transport() (sage.combinat.species.partition_species.partitionspeciesstructure method)": [[327, "sage.combinat.species.partition_species.PartitionSpeciesStructure.transport"]], "permutationspecies (class in sage.combinat.species.permutation_species)": [[328, "sage.combinat.species.permutation_species.PermutationSpecies"]], "permutationspeciesstructure (class in sage.combinat.species.permutation_species)": [[328, "sage.combinat.species.permutation_species.PermutationSpeciesStructure"]], "permutationspecies_class (in module sage.combinat.species.permutation_species)": [[328, "sage.combinat.species.permutation_species.PermutationSpecies_class"]], "automorphism_group() (sage.combinat.species.permutation_species.permutationspeciesstructure method)": [[328, "sage.combinat.species.permutation_species.PermutationSpeciesStructure.automorphism_group"]], "canonical_label() (sage.combinat.species.permutation_species.permutationspeciesstructure method)": [[328, "sage.combinat.species.permutation_species.PermutationSpeciesStructure.canonical_label"]], "permutation_group_element() (sage.combinat.species.permutation_species.permutationspeciesstructure method)": [[328, "sage.combinat.species.permutation_species.PermutationSpeciesStructure.permutation_group_element"]], "sage.combinat.species.permutation_species": [[328, "module-sage.combinat.species.permutation_species"]], "transport() (sage.combinat.species.permutation_species.permutationspeciesstructure method)": [[328, "sage.combinat.species.permutation_species.PermutationSpeciesStructure.transport"]], "productspecies (class in sage.combinat.species.product_species)": [[329, "sage.combinat.species.product_species.ProductSpecies"]], "productspeciesstructure (class in sage.combinat.species.product_species)": [[329, "sage.combinat.species.product_species.ProductSpeciesStructure"]], "productspecies_class (in module sage.combinat.species.product_species)": [[329, "sage.combinat.species.product_species.ProductSpecies_class"]], "automorphism_group() (sage.combinat.species.product_species.productspeciesstructure method)": [[329, "sage.combinat.species.product_species.ProductSpeciesStructure.automorphism_group"]], "canonical_label() (sage.combinat.species.product_species.productspeciesstructure method)": [[329, "sage.combinat.species.product_species.ProductSpeciesStructure.canonical_label"]], "change_labels() (sage.combinat.species.product_species.productspeciesstructure method)": [[329, "sage.combinat.species.product_species.ProductSpeciesStructure.change_labels"]], "left_factor() (sage.combinat.species.product_species.productspecies method)": [[329, "sage.combinat.species.product_species.ProductSpecies.left_factor"]], "right_factor() (sage.combinat.species.product_species.productspecies method)": [[329, "sage.combinat.species.product_species.ProductSpecies.right_factor"]], "sage.combinat.species.product_species": [[329, "module-sage.combinat.species.product_species"]], "transport() (sage.combinat.species.product_species.productspeciesstructure method)": [[329, "sage.combinat.species.product_species.ProductSpeciesStructure.transport"]], "weight_ring() (sage.combinat.species.product_species.productspecies method)": [[329, "sage.combinat.species.product_species.ProductSpecies.weight_ring"]], "combinatorialspecies (class in sage.combinat.species.recursive_species)": [[330, "sage.combinat.species.recursive_species.CombinatorialSpecies"]], "combinatorialspeciesstructure (class in sage.combinat.species.recursive_species)": [[330, "sage.combinat.species.recursive_species.CombinatorialSpeciesStructure"]], "define() (sage.combinat.species.recursive_species.combinatorialspecies method)": [[330, "sage.combinat.species.recursive_species.CombinatorialSpecies.define"]], "sage.combinat.species.recursive_species": [[330, "module-sage.combinat.species.recursive_species"]], "weight_ring() (sage.combinat.species.recursive_species.combinatorialspecies method)": [[330, "sage.combinat.species.recursive_species.CombinatorialSpecies.weight_ring"]], "setspecies (class in sage.combinat.species.set_species)": [[331, "sage.combinat.species.set_species.SetSpecies"]], "setspeciesstructure (class in sage.combinat.species.set_species)": [[331, "sage.combinat.species.set_species.SetSpeciesStructure"]], "setspecies_class (in module sage.combinat.species.set_species)": [[331, "sage.combinat.species.set_species.SetSpecies_class"]], "automorphism_group() (sage.combinat.species.set_species.setspeciesstructure method)": [[331, "sage.combinat.species.set_species.SetSpeciesStructure.automorphism_group"]], "canonical_label() (sage.combinat.species.set_species.setspeciesstructure method)": [[331, "sage.combinat.species.set_species.SetSpeciesStructure.canonical_label"]], "sage.combinat.species.set_species": [[331, "module-sage.combinat.species.set_species"]], "transport() (sage.combinat.species.set_species.setspeciesstructure method)": [[331, "sage.combinat.species.set_species.SetSpeciesStructure.transport"]], "genericcombinatorialspecies (class in sage.combinat.species.species)": [[332, "sage.combinat.species.species.GenericCombinatorialSpecies"]], "algebraic_equation_system() (sage.combinat.species.species.genericcombinatorialspecies method)": [[332, "sage.combinat.species.species.GenericCombinatorialSpecies.algebraic_equation_system"]], "composition() (sage.combinat.species.species.genericcombinatorialspecies method)": [[332, "sage.combinat.species.species.GenericCombinatorialSpecies.composition"]], "cycle_index_series() (sage.combinat.species.species.genericcombinatorialspecies method)": [[332, "sage.combinat.species.species.GenericCombinatorialSpecies.cycle_index_series"]], "digraph() (sage.combinat.species.species.genericcombinatorialspecies method)": [[332, "sage.combinat.species.species.GenericCombinatorialSpecies.digraph"]], "functorial_composition() (sage.combinat.species.species.genericcombinatorialspecies method)": [[332, "sage.combinat.species.species.GenericCombinatorialSpecies.functorial_composition"]], "generating_series() (sage.combinat.species.species.genericcombinatorialspecies method)": [[332, "sage.combinat.species.species.GenericCombinatorialSpecies.generating_series"]], "is_weighted() (sage.combinat.species.species.genericcombinatorialspecies method)": [[332, "sage.combinat.species.species.GenericCombinatorialSpecies.is_weighted"]], "isotype_generating_series() (sage.combinat.species.species.genericcombinatorialspecies method)": [[332, "sage.combinat.species.species.GenericCombinatorialSpecies.isotype_generating_series"]], "isotypes() (sage.combinat.species.species.genericcombinatorialspecies method)": [[332, "sage.combinat.species.species.GenericCombinatorialSpecies.isotypes"]], "product() (sage.combinat.species.species.genericcombinatorialspecies method)": [[332, "sage.combinat.species.species.GenericCombinatorialSpecies.product"]], "restricted() (sage.combinat.species.species.genericcombinatorialspecies method)": [[332, "sage.combinat.species.species.GenericCombinatorialSpecies.restricted"]], "sage.combinat.species.species": [[332, "module-sage.combinat.species.species"]], "structures() (sage.combinat.species.species.genericcombinatorialspecies method)": [[332, "sage.combinat.species.species.GenericCombinatorialSpecies.structures"]], "sum() (sage.combinat.species.species.genericcombinatorialspecies method)": [[332, "sage.combinat.species.species.GenericCombinatorialSpecies.sum"]], "weight_ring() (sage.combinat.species.species.genericcombinatorialspecies method)": [[332, "sage.combinat.species.species.GenericCombinatorialSpecies.weight_ring"]], "weighted() (sage.combinat.species.species.genericcombinatorialspecies method)": [[332, "sage.combinat.species.species.GenericCombinatorialSpecies.weighted"]], "genericspeciesstructure (class in sage.combinat.species.structure)": [[333, "sage.combinat.species.structure.GenericSpeciesStructure"]], "isotypeswrapper (class in sage.combinat.species.structure)": [[333, "sage.combinat.species.structure.IsotypesWrapper"]], "simpleisotypeswrapper (class in sage.combinat.species.structure)": [[333, "sage.combinat.species.structure.SimpleIsotypesWrapper"]], "simplestructureswrapper (class in sage.combinat.species.structure)": [[333, "sage.combinat.species.structure.SimpleStructuresWrapper"]], "speciesstructure (in module sage.combinat.species.structure)": [[333, "sage.combinat.species.structure.SpeciesStructure"]], "speciesstructurewrapper (class in sage.combinat.species.structure)": [[333, "sage.combinat.species.structure.SpeciesStructureWrapper"]], "specieswrapper (class in sage.combinat.species.structure)": [[333, "sage.combinat.species.structure.SpeciesWrapper"]], "structureswrapper (class in sage.combinat.species.structure)": [[333, "sage.combinat.species.structure.StructuresWrapper"]], "canonical_label() (sage.combinat.species.structure.speciesstructurewrapper method)": [[333, "sage.combinat.species.structure.SpeciesStructureWrapper.canonical_label"]], "cardinality() (sage.combinat.species.structure.specieswrapper method)": [[333, "sage.combinat.species.structure.SpeciesWrapper.cardinality"]], "change_labels() (sage.combinat.species.structure.genericspeciesstructure method)": [[333, "sage.combinat.species.structure.GenericSpeciesStructure.change_labels"]], "change_labels() (sage.combinat.species.structure.speciesstructurewrapper method)": [[333, "sage.combinat.species.structure.SpeciesStructureWrapper.change_labels"]], "is_isomorphic() (sage.combinat.species.structure.genericspeciesstructure method)": [[333, "sage.combinat.species.structure.GenericSpeciesStructure.is_isomorphic"]], "labels() (sage.combinat.species.structure.genericspeciesstructure method)": [[333, "sage.combinat.species.structure.GenericSpeciesStructure.labels"]], "labels() (sage.combinat.species.structure.specieswrapper method)": [[333, "sage.combinat.species.structure.SpeciesWrapper.labels"]], "parent() (sage.combinat.species.structure.genericspeciesstructure method)": [[333, "sage.combinat.species.structure.GenericSpeciesStructure.parent"]], "sage.combinat.species.structure": [[333, "module-sage.combinat.species.structure"]], "transport() (sage.combinat.species.structure.speciesstructurewrapper method)": [[333, "sage.combinat.species.structure.SpeciesStructureWrapper.transport"]], "subsetspecies (class in sage.combinat.species.subset_species)": [[334, "sage.combinat.species.subset_species.SubsetSpecies"]], "subsetspeciesstructure (class in sage.combinat.species.subset_species)": [[334, "sage.combinat.species.subset_species.SubsetSpeciesStructure"]], "subsetspecies_class (in module sage.combinat.species.subset_species)": [[334, "sage.combinat.species.subset_species.SubsetSpecies_class"]], "automorphism_group() (sage.combinat.species.subset_species.subsetspeciesstructure method)": [[334, "sage.combinat.species.subset_species.SubsetSpeciesStructure.automorphism_group"]], "canonical_label() (sage.combinat.species.subset_species.subsetspeciesstructure method)": [[334, "sage.combinat.species.subset_species.SubsetSpeciesStructure.canonical_label"]], "complement() (sage.combinat.species.subset_species.subsetspeciesstructure method)": [[334, "sage.combinat.species.subset_species.SubsetSpeciesStructure.complement"]], "label_subset() (sage.combinat.species.subset_species.subsetspeciesstructure method)": [[334, "sage.combinat.species.subset_species.SubsetSpeciesStructure.label_subset"]], "sage.combinat.species.subset_species": [[334, "module-sage.combinat.species.subset_species"]], "transport() (sage.combinat.species.subset_species.subsetspeciesstructure method)": [[334, "sage.combinat.species.subset_species.SubsetSpeciesStructure.transport"]], "sumspecies (class in sage.combinat.species.sum_species)": [[335, "sage.combinat.species.sum_species.SumSpecies"]], "sumspeciesstructure (class in sage.combinat.species.sum_species)": [[335, "sage.combinat.species.sum_species.SumSpeciesStructure"]], "sumspecies_class (in module sage.combinat.species.sum_species)": [[335, "sage.combinat.species.sum_species.SumSpecies_class"]], "left_summand() (sage.combinat.species.sum_species.sumspecies method)": [[335, "sage.combinat.species.sum_species.SumSpecies.left_summand"]], "right_summand() (sage.combinat.species.sum_species.sumspecies method)": [[335, "sage.combinat.species.sum_species.SumSpecies.right_summand"]], "sage.combinat.species.sum_species": [[335, "module-sage.combinat.species.sum_species"]], "weight_ring() (sage.combinat.species.sum_species.sumspecies method)": [[335, "sage.combinat.species.sum_species.SumSpecies.weight_ring"]], "submultiset_s (class in sage.combinat.subset)": [[336, "sage.combinat.subset.SubMultiset_s"]], "submultiset_sk (class in sage.combinat.subset)": [[336, "sage.combinat.subset.SubMultiset_sk"]], "subsets() (in module sage.combinat.subset)": [[336, "sage.combinat.subset.Subsets"], [336, "sage.combinat.subset.subsets"]], "subsetssorted (class in sage.combinat.subset)": [[336, "sage.combinat.subset.SubsetsSorted"]], "subsets_s (class in sage.combinat.subset)": [[336, "sage.combinat.subset.Subsets_s"]], "subsets_sk (class in sage.combinat.subset)": [[336, "sage.combinat.subset.Subsets_sk"]], "an_element() (sage.combinat.subset.subsets_sk method)": [[336, "sage.combinat.subset.Subsets_sk.an_element"]], "cardinality() (sage.combinat.subset.submultiset_s method)": [[336, "sage.combinat.subset.SubMultiset_s.cardinality"]], "cardinality() (sage.combinat.subset.submultiset_sk method)": [[336, "sage.combinat.subset.SubMultiset_sk.cardinality"]], "cardinality() (sage.combinat.subset.subsets_s method)": [[336, "sage.combinat.subset.Subsets_s.cardinality"]], "cardinality() (sage.combinat.subset.subsets_sk method)": [[336, "sage.combinat.subset.Subsets_sk.cardinality"]], "dict_to_list() (in module sage.combinat.subset)": [[336, "sage.combinat.subset.dict_to_list"]], "element_class (sage.combinat.subset.submultiset_s attribute)": [[336, "sage.combinat.subset.SubMultiset_s.element_class"]], "element_class (sage.combinat.subset.subsetssorted attribute)": [[336, "sage.combinat.subset.SubsetsSorted.element_class"]], "element_class (sage.combinat.subset.subsets_s attribute)": [[336, "sage.combinat.subset.Subsets_s.element_class"]], "first() (sage.combinat.subset.subsetssorted method)": [[336, "sage.combinat.subset.SubsetsSorted.first"]], "first() (sage.combinat.subset.subsets_s method)": [[336, "sage.combinat.subset.Subsets_s.first"]], "first() (sage.combinat.subset.subsets_sk method)": [[336, "sage.combinat.subset.Subsets_sk.first"]], "generating_serie() (sage.combinat.subset.submultiset_s method)": [[336, "sage.combinat.subset.SubMultiset_s.generating_serie"]], "generating_serie() (sage.combinat.subset.submultiset_sk method)": [[336, "sage.combinat.subset.SubMultiset_sk.generating_serie"]], "last() (sage.combinat.subset.subsetssorted method)": [[336, "sage.combinat.subset.SubsetsSorted.last"]], "last() (sage.combinat.subset.subsets_s method)": [[336, "sage.combinat.subset.Subsets_s.last"]], "last() (sage.combinat.subset.subsets_sk method)": [[336, "sage.combinat.subset.Subsets_sk.last"]], "lattice() (sage.combinat.subset.subsets_s method)": [[336, "sage.combinat.subset.Subsets_s.lattice"]], "list_to_dict() (in module sage.combinat.subset)": [[336, "sage.combinat.subset.list_to_dict"]], "powerset() (in module sage.combinat.subset)": [[336, "sage.combinat.subset.powerset"]], "random_element() (sage.combinat.subset.submultiset_s method)": [[336, "sage.combinat.subset.SubMultiset_s.random_element"]], "random_element() (sage.combinat.subset.submultiset_sk method)": [[336, "sage.combinat.subset.SubMultiset_sk.random_element"]], "random_element() (sage.combinat.subset.subsetssorted method)": [[336, "sage.combinat.subset.SubsetsSorted.random_element"]], "random_element() (sage.combinat.subset.subsets_s method)": [[336, "sage.combinat.subset.Subsets_s.random_element"]], "random_element() (sage.combinat.subset.subsets_sk method)": [[336, "sage.combinat.subset.Subsets_sk.random_element"]], "rank() (sage.combinat.subset.subsets_s method)": [[336, "sage.combinat.subset.Subsets_s.rank"]], "rank() (sage.combinat.subset.subsets_sk method)": [[336, "sage.combinat.subset.Subsets_sk.rank"]], "sage.combinat.subset": [[336, "module-sage.combinat.subset"]], "underlying_set() (sage.combinat.subset.subsets_s method)": [[336, "sage.combinat.subset.Subsets_s.underlying_set"]], "uniq() (in module sage.combinat.subset)": [[336, "sage.combinat.subset.uniq"]], "unrank() (sage.combinat.subset.subsetssorted method)": [[336, "sage.combinat.subset.SubsetsSorted.unrank"]], "unrank() (sage.combinat.subset.subsets_s method)": [[336, "sage.combinat.subset.Subsets_s.unrank"]], "unrank() (sage.combinat.subset.subsets_sk method)": [[336, "sage.combinat.subset.Subsets_sk.unrank"]], "sage.combinat.subsets_hereditary": [[337, "module-sage.combinat.subsets_hereditary"]], "subsets_with_hereditary_property() (in module sage.combinat.subsets_hereditary)": [[337, "sage.combinat.subsets_hereditary.subsets_with_hereditary_property"]], "pairwisecompatiblesubsets (class in sage.combinat.subsets_pairwise)": [[338, "sage.combinat.subsets_pairwise.PairwiseCompatibleSubsets"]], "children() (sage.combinat.subsets_pairwise.pairwisecompatiblesubsets method)": [[338, "sage.combinat.subsets_pairwise.PairwiseCompatibleSubsets.children"]], "post_process() (sage.combinat.subsets_pairwise.pairwisecompatiblesubsets method)": [[338, "sage.combinat.subsets_pairwise.PairwiseCompatibleSubsets.post_process"]], "sage.combinat.subsets_pairwise": [[338, "module-sage.combinat.subsets_pairwise"]], "subwords() (in module sage.combinat.subword)": [[339, "sage.combinat.subword.Subwords"]], "subwords_w (class in sage.combinat.subword)": [[339, "sage.combinat.subword.Subwords_w"]], "subwords_wk (class in sage.combinat.subword)": [[339, "sage.combinat.subword.Subwords_wk"]], "cardinality() (sage.combinat.subword.subwords_w method)": [[339, "sage.combinat.subword.Subwords_w.cardinality"]], "cardinality() (sage.combinat.subword.subwords_wk method)": [[339, "sage.combinat.subword.Subwords_wk.cardinality"]], "first() (sage.combinat.subword.subwords_w method)": [[339, "sage.combinat.subword.Subwords_w.first"]], "first() (sage.combinat.subword.subwords_wk method)": [[339, "sage.combinat.subword.Subwords_wk.first"]], "last() (sage.combinat.subword.subwords_w method)": [[339, "sage.combinat.subword.Subwords_w.last"]], "last() (sage.combinat.subword.subwords_wk method)": [[339, "sage.combinat.subword.Subwords_wk.last"]], "random_element() (sage.combinat.subword.subwords_w method)": [[339, "sage.combinat.subword.Subwords_w.random_element"]], "random_element() (sage.combinat.subword.subwords_wk method)": [[339, "sage.combinat.subword.Subwords_wk.random_element"]], "sage.combinat.subword": [[339, "module-sage.combinat.subword"]], "smallest_positions() (in module sage.combinat.subword)": [[339, "sage.combinat.subword.smallest_positions"]], "element (sage.combinat.subword_complex.subwordcomplex attribute)": [[340, "sage.combinat.subword_complex.SubwordComplex.Element"]], "subwordcomplex (class in sage.combinat.subword_complex)": [[340, "sage.combinat.subword_complex.SubwordComplex"]], "subwordcomplexfacet (class in sage.combinat.subword_complex)": [[340, "sage.combinat.subword_complex.SubwordComplexFacet"]], "barycenter() (sage.combinat.subword_complex.subwordcomplex method)": [[340, "sage.combinat.subword_complex.SubwordComplex.barycenter"]], "brick_fan() (sage.combinat.subword_complex.subwordcomplex method)": [[340, "sage.combinat.subword_complex.SubwordComplex.brick_fan"]], "brick_polytope() (sage.combinat.subword_complex.subwordcomplex method)": [[340, "sage.combinat.subword_complex.SubwordComplex.brick_polytope"]], "brick_vector() (sage.combinat.subword_complex.subwordcomplexfacet method)": [[340, "sage.combinat.subword_complex.SubwordComplexFacet.brick_vector"]], "brick_vectors() (sage.combinat.subword_complex.subwordcomplex method)": [[340, "sage.combinat.subword_complex.SubwordComplex.brick_vectors"]], "cartan_type() (sage.combinat.subword_complex.subwordcomplex method)": [[340, "sage.combinat.subword_complex.SubwordComplex.cartan_type"]], "cover_relations() (sage.combinat.subword_complex.subwordcomplex method)": [[340, "sage.combinat.subword_complex.SubwordComplex.cover_relations"]], "dimension() (sage.combinat.subword_complex.subwordcomplex method)": [[340, "sage.combinat.subword_complex.SubwordComplex.dimension"]], "extended_root_configuration() (sage.combinat.subword_complex.subwordcomplexfacet method)": [[340, "sage.combinat.subword_complex.SubwordComplexFacet.extended_root_configuration"]], "extended_weight_configuration() (sage.combinat.subword_complex.subwordcomplexfacet method)": [[340, "sage.combinat.subword_complex.SubwordComplexFacet.extended_weight_configuration"]], "facets() (sage.combinat.subword_complex.subwordcomplex method)": [[340, "sage.combinat.subword_complex.SubwordComplex.facets"]], "flip() (sage.combinat.subword_complex.subwordcomplexfacet method)": [[340, "sage.combinat.subword_complex.SubwordComplexFacet.flip"]], "greedy_facet() (sage.combinat.subword_complex.subwordcomplex method)": [[340, "sage.combinat.subword_complex.SubwordComplex.greedy_facet"]], "group() (sage.combinat.subword_complex.subwordcomplex method)": [[340, "sage.combinat.subword_complex.SubwordComplex.group"]], "increasing_flip_graph() (sage.combinat.subword_complex.subwordcomplex method)": [[340, "sage.combinat.subword_complex.SubwordComplex.increasing_flip_graph"]], "increasing_flip_poset() (sage.combinat.subword_complex.subwordcomplex method)": [[340, "sage.combinat.subword_complex.SubwordComplex.increasing_flip_poset"]], "interval() (sage.combinat.subword_complex.subwordcomplex method)": [[340, "sage.combinat.subword_complex.SubwordComplex.interval"]], "is_ball() (sage.combinat.subword_complex.subwordcomplex method)": [[340, "sage.combinat.subword_complex.SubwordComplex.is_ball"]], "is_double_root_free() (sage.combinat.subword_complex.subwordcomplex method)": [[340, "sage.combinat.subword_complex.SubwordComplex.is_double_root_free"]], "is_pure() (sage.combinat.subword_complex.subwordcomplex method)": [[340, "sage.combinat.subword_complex.SubwordComplex.is_pure"]], "is_root_independent() (sage.combinat.subword_complex.subwordcomplex method)": [[340, "sage.combinat.subword_complex.SubwordComplex.is_root_independent"]], "is_sphere() (sage.combinat.subword_complex.subwordcomplex method)": [[340, "sage.combinat.subword_complex.SubwordComplex.is_sphere"]], "is_vertex() (sage.combinat.subword_complex.subwordcomplexfacet method)": [[340, "sage.combinat.subword_complex.SubwordComplexFacet.is_vertex"]], "kappa_preimage() (sage.combinat.subword_complex.subwordcomplexfacet method)": [[340, "sage.combinat.subword_complex.SubwordComplexFacet.kappa_preimage"]], "kappa_preimages() (sage.combinat.subword_complex.subwordcomplex method)": [[340, "sage.combinat.subword_complex.SubwordComplex.kappa_preimages"]], "minkowski_summand() (sage.combinat.subword_complex.subwordcomplex method)": [[340, "sage.combinat.subword_complex.SubwordComplex.minkowski_summand"]], "pi() (sage.combinat.subword_complex.subwordcomplex method)": [[340, "sage.combinat.subword_complex.SubwordComplex.pi"]], "plot() (sage.combinat.subword_complex.subwordcomplexfacet method)": [[340, "sage.combinat.subword_complex.SubwordComplexFacet.plot"]], "root_cone() (sage.combinat.subword_complex.subwordcomplexfacet method)": [[340, "sage.combinat.subword_complex.SubwordComplexFacet.root_cone"]], "root_configuration() (sage.combinat.subword_complex.subwordcomplexfacet method)": [[340, "sage.combinat.subword_complex.SubwordComplexFacet.root_configuration"]], "sage.combinat.subword_complex": [[340, "module-sage.combinat.subword_complex"]], "show() (sage.combinat.subword_complex.subwordcomplexfacet method)": [[340, "sage.combinat.subword_complex.SubwordComplexFacet.show"]], "upper_root_configuration() (sage.combinat.subword_complex.subwordcomplexfacet method)": [[340, "sage.combinat.subword_complex.SubwordComplexFacet.upper_root_configuration"]], "weight_cone() (sage.combinat.subword_complex.subwordcomplexfacet method)": [[340, "sage.combinat.subword_complex.SubwordComplexFacet.weight_cone"]], "weight_configuration() (sage.combinat.subword_complex.subwordcomplexfacet method)": [[340, "sage.combinat.subword_complex.SubwordComplexFacet.weight_configuration"]], "word() (sage.combinat.subword_complex.subwordcomplex method)": [[340, "sage.combinat.subword_complex.SubwordComplex.word"]], "element (sage.combinat.super_tableau.semistandardsupertableaux attribute)": [[341, "sage.combinat.super_tableau.SemistandardSuperTableaux.Element"]], "element (sage.combinat.super_tableau.standardsupertableaux attribute)": [[341, "sage.combinat.super_tableau.StandardSuperTableaux.Element"]], "semistandardsupertableau (class in sage.combinat.super_tableau)": [[341, "sage.combinat.super_tableau.SemistandardSuperTableau"]], "semistandardsupertableaux (class in sage.combinat.super_tableau)": [[341, "sage.combinat.super_tableau.SemistandardSuperTableaux"]], "semistandardsupertableaux_all (class in sage.combinat.super_tableau)": [[341, "sage.combinat.super_tableau.SemistandardSuperTableaux_all"]], "standardsupertableau (class in sage.combinat.super_tableau)": [[341, "sage.combinat.super_tableau.StandardSuperTableau"]], "standardsupertableaux (class in sage.combinat.super_tableau)": [[341, "sage.combinat.super_tableau.StandardSuperTableaux"]], "standardsupertableaux_all (class in sage.combinat.super_tableau)": [[341, "sage.combinat.super_tableau.StandardSuperTableaux_all"]], "standardsupertableaux_shape (class in sage.combinat.super_tableau)": [[341, "sage.combinat.super_tableau.StandardSuperTableaux_shape"]], "standardsupertableaux_size (class in sage.combinat.super_tableau)": [[341, "sage.combinat.super_tableau.StandardSuperTableaux_size"]], "cardinality() (sage.combinat.super_tableau.standardsupertableaux_shape method)": [[341, "sage.combinat.super_tableau.StandardSuperTableaux_shape.cardinality"]], "cardinality() (sage.combinat.super_tableau.standardsupertableaux_size method)": [[341, "sage.combinat.super_tableau.StandardSuperTableaux_size.cardinality"]], "check() (sage.combinat.super_tableau.semistandardsupertableau method)": [[341, "sage.combinat.super_tableau.SemistandardSuperTableau.check"]], "check() (sage.combinat.super_tableau.standardsupertableau method)": [[341, "sage.combinat.super_tableau.StandardSuperTableau.check"]], "is_standard() (sage.combinat.super_tableau.standardsupertableau method)": [[341, "sage.combinat.super_tableau.StandardSuperTableau.is_standard"]], "sage.combinat.super_tableau": [[341, "module-sage.combinat.super_tableau"]], "element (sage.combinat.superpartition.superpartitions attribute)": [[342, "sage.combinat.superpartition.SuperPartitions.Element"]], "superpartition (class in sage.combinat.superpartition)": [[342, "sage.combinat.superpartition.SuperPartition"]], "superpartitions (class in sage.combinat.superpartition)": [[342, "sage.combinat.superpartition.SuperPartitions"]], "superpartitions_all (class in sage.combinat.superpartition)": [[342, "sage.combinat.superpartition.SuperPartitions_all"]], "superpartitions_n (class in sage.combinat.superpartition)": [[342, "sage.combinat.superpartition.SuperPartitions_n"]], "superpartitions_n_m (class in sage.combinat.superpartition)": [[342, "sage.combinat.superpartition.SuperPartitions_n_m"]], "a_part() (sage.combinat.superpartition.superpartition method)": [[342, "sage.combinat.superpartition.SuperPartition.a_part"]], "add_horizontal_border_strip_star() (sage.combinat.superpartition.superpartition method)": [[342, "sage.combinat.superpartition.SuperPartition.add_horizontal_border_strip_star"]], "add_horizontal_border_strip_star_bar() (sage.combinat.superpartition.superpartition method)": [[342, "sage.combinat.superpartition.SuperPartition.add_horizontal_border_strip_star_bar"]], "antisymmetric_part() (sage.combinat.superpartition.superpartition method)": [[342, "sage.combinat.superpartition.SuperPartition.antisymmetric_part"]], "bi_degree() (sage.combinat.superpartition.superpartition method)": [[342, "sage.combinat.superpartition.SuperPartition.bi_degree"]], "bosonic_degree() (sage.combinat.superpartition.superpartition method)": [[342, "sage.combinat.superpartition.SuperPartition.bosonic_degree"]], "bosonic_length() (sage.combinat.superpartition.superpartition method)": [[342, "sage.combinat.superpartition.SuperPartition.bosonic_length"]], "check() (sage.combinat.superpartition.superpartition method)": [[342, "sage.combinat.superpartition.SuperPartition.check"]], "conjugate() (sage.combinat.superpartition.superpartition method)": [[342, "sage.combinat.superpartition.SuperPartition.conjugate"]], "degree() (sage.combinat.superpartition.superpartition method)": [[342, "sage.combinat.superpartition.SuperPartition.degree"]], "dominates() (sage.combinat.superpartition.superpartition method)": [[342, "sage.combinat.superpartition.SuperPartition.dominates"]], "fermionic_degree() (sage.combinat.superpartition.superpartition method)": [[342, "sage.combinat.superpartition.SuperPartition.fermionic_degree"]], "fermionic_sector() (sage.combinat.superpartition.superpartition method)": [[342, "sage.combinat.superpartition.SuperPartition.fermionic_sector"]], "from_circled_diagram() (sage.combinat.superpartition.superpartition static method)": [[342, "sage.combinat.superpartition.SuperPartition.from_circled_diagram"]], "length() (sage.combinat.superpartition.superpartition method)": [[342, "sage.combinat.superpartition.SuperPartition.length"]], "options (sage.combinat.superpartition.superpartitions attribute)": [[342, "sage.combinat.superpartition.SuperPartitions.options"]], "s_part() (sage.combinat.superpartition.superpartition method)": [[342, "sage.combinat.superpartition.SuperPartition.s_part"]], "sage.combinat.superpartition": [[342, "module-sage.combinat.superpartition"]], "shape_circled_diagram() (sage.combinat.superpartition.superpartition method)": [[342, "sage.combinat.superpartition.SuperPartition.shape_circled_diagram"]], "sign() (sage.combinat.superpartition.superpartition method)": [[342, "sage.combinat.superpartition.SuperPartition.sign"]], "symmetric_part() (sage.combinat.superpartition.superpartition method)": [[342, "sage.combinat.superpartition.SuperPartition.symmetric_part"]], "to_circled_diagram() (sage.combinat.superpartition.superpartition method)": [[342, "sage.combinat.superpartition.SuperPartition.to_circled_diagram"]], "to_composition() (sage.combinat.superpartition.superpartition method)": [[342, "sage.combinat.superpartition.SuperPartition.to_composition"]], "to_list() (sage.combinat.superpartition.superpartition method)": [[342, "sage.combinat.superpartition.SuperPartition.to_list"]], "to_partition() (sage.combinat.superpartition.superpartition method)": [[342, "sage.combinat.superpartition.SuperPartition.to_partition"]], "zee() (sage.combinat.superpartition.superpartition method)": [[342, "sage.combinat.superpartition.SuperPartition.zee"]], "heckealgebrasymmetricgroupt() (in module sage.combinat.symmetric_group_algebra)": [[343, "sage.combinat.symmetric_group_algebra.HeckeAlgebraSymmetricGroupT"]], "heckealgebrasymmetricgroup_generic (class in sage.combinat.symmetric_group_algebra)": [[343, "sage.combinat.symmetric_group_algebra.HeckeAlgebraSymmetricGroup_generic"]], "heckealgebrasymmetricgroup_t (class in sage.combinat.symmetric_group_algebra)": [[343, "sage.combinat.symmetric_group_algebra.HeckeAlgebraSymmetricGroup_t"]], "symmetricgroupalgebra() (in module sage.combinat.symmetric_group_algebra)": [[343, "sage.combinat.symmetric_group_algebra.SymmetricGroupAlgebra"]], "symmetricgroupalgebra_n (class in sage.combinat.symmetric_group_algebra)": [[343, "sage.combinat.symmetric_group_algebra.SymmetricGroupAlgebra_n"]], "a() (in module sage.combinat.symmetric_group_algebra)": [[343, "sage.combinat.symmetric_group_algebra.a"]], "algebra_generators() (sage.combinat.symmetric_group_algebra.heckealgebrasymmetricgroup_t method)": [[343, "sage.combinat.symmetric_group_algebra.HeckeAlgebraSymmetricGroup_t.algebra_generators"]], "algebra_generators() (sage.combinat.symmetric_group_algebra.symmetricgroupalgebra_n method)": [[343, "sage.combinat.symmetric_group_algebra.SymmetricGroupAlgebra_n.algebra_generators"]], "antipode() (sage.combinat.symmetric_group_algebra.symmetricgroupalgebra_n method)": [[343, "sage.combinat.symmetric_group_algebra.SymmetricGroupAlgebra_n.antipode"]], "b() (in module sage.combinat.symmetric_group_algebra)": [[343, "sage.combinat.symmetric_group_algebra.b"]], "binary_unshuffle_sum() (sage.combinat.symmetric_group_algebra.symmetricgroupalgebra_n method)": [[343, "sage.combinat.symmetric_group_algebra.SymmetricGroupAlgebra_n.binary_unshuffle_sum"]], "canonical_embedding() (sage.combinat.symmetric_group_algebra.symmetricgroupalgebra_n method)": [[343, "sage.combinat.symmetric_group_algebra.SymmetricGroupAlgebra_n.canonical_embedding"]], "cell_module() (sage.combinat.symmetric_group_algebra.symmetricgroupalgebra_n method)": [[343, "sage.combinat.symmetric_group_algebra.SymmetricGroupAlgebra_n.cell_module"]], "cell_module_indices() (sage.combinat.symmetric_group_algebra.symmetricgroupalgebra_n method)": [[343, "sage.combinat.symmetric_group_algebra.SymmetricGroupAlgebra_n.cell_module_indices"]], "cell_poset() (sage.combinat.symmetric_group_algebra.symmetricgroupalgebra_n method)": [[343, "sage.combinat.symmetric_group_algebra.SymmetricGroupAlgebra_n.cell_poset"]], "central_orthogonal_idempotent() (sage.combinat.symmetric_group_algebra.symmetricgroupalgebra_n method)": [[343, "sage.combinat.symmetric_group_algebra.SymmetricGroupAlgebra_n.central_orthogonal_idempotent"]], "central_orthogonal_idempotents() (sage.combinat.symmetric_group_algebra.symmetricgroupalgebra_n method)": [[343, "sage.combinat.symmetric_group_algebra.SymmetricGroupAlgebra_n.central_orthogonal_idempotents"]], "dft() (sage.combinat.symmetric_group_algebra.symmetricgroupalgebra_n method)": [[343, "sage.combinat.symmetric_group_algebra.SymmetricGroupAlgebra_n.dft"]], "e() (in module sage.combinat.symmetric_group_algebra)": [[343, "sage.combinat.symmetric_group_algebra.e"]], "e_hat() (in module sage.combinat.symmetric_group_algebra)": [[343, "sage.combinat.symmetric_group_algebra.e_hat"]], "e_ik() (in module sage.combinat.symmetric_group_algebra)": [[343, "sage.combinat.symmetric_group_algebra.e_ik"]], "epsilon() (in module sage.combinat.symmetric_group_algebra)": [[343, "sage.combinat.symmetric_group_algebra.epsilon"]], "epsilon_ik() (in module sage.combinat.symmetric_group_algebra)": [[343, "sage.combinat.symmetric_group_algebra.epsilon_ik"]], "epsilon_ik() (sage.combinat.symmetric_group_algebra.symmetricgroupalgebra_n method)": [[343, "sage.combinat.symmetric_group_algebra.SymmetricGroupAlgebra_n.epsilon_ik"]], "jucys_murphy() (sage.combinat.symmetric_group_algebra.heckealgebrasymmetricgroup_t method)": [[343, "sage.combinat.symmetric_group_algebra.HeckeAlgebraSymmetricGroup_t.jucys_murphy"]], "jucys_murphy() (sage.combinat.symmetric_group_algebra.symmetricgroupalgebra_n method)": [[343, "sage.combinat.symmetric_group_algebra.SymmetricGroupAlgebra_n.jucys_murphy"]], "kappa() (in module sage.combinat.symmetric_group_algebra)": [[343, "sage.combinat.symmetric_group_algebra.kappa"]], "left_action_product() (sage.combinat.symmetric_group_algebra.symmetricgroupalgebra_n method)": [[343, "sage.combinat.symmetric_group_algebra.SymmetricGroupAlgebra_n.left_action_product"]], "monomial_from_smaller_permutation() (sage.combinat.symmetric_group_algebra.symmetricgroupalgebra_n method)": [[343, "sage.combinat.symmetric_group_algebra.SymmetricGroupAlgebra_n.monomial_from_smaller_permutation"]], "one_basis() (sage.combinat.symmetric_group_algebra.heckealgebrasymmetricgroup_generic method)": [[343, "sage.combinat.symmetric_group_algebra.HeckeAlgebraSymmetricGroup_generic.one_basis"]], "pi_ik() (in module sage.combinat.symmetric_group_algebra)": [[343, "sage.combinat.symmetric_group_algebra.pi_ik"]], "product_on_basis() (sage.combinat.symmetric_group_algebra.heckealgebrasymmetricgroup_t method)": [[343, "sage.combinat.symmetric_group_algebra.HeckeAlgebraSymmetricGroup_t.product_on_basis"]], "q() (sage.combinat.symmetric_group_algebra.heckealgebrasymmetricgroup_generic method)": [[343, "sage.combinat.symmetric_group_algebra.HeckeAlgebraSymmetricGroup_generic.q"]], "retract_direct_product() (sage.combinat.symmetric_group_algebra.symmetricgroupalgebra_n method)": [[343, "sage.combinat.symmetric_group_algebra.SymmetricGroupAlgebra_n.retract_direct_product"]], "retract_okounkov_vershik() (sage.combinat.symmetric_group_algebra.symmetricgroupalgebra_n method)": [[343, "sage.combinat.symmetric_group_algebra.SymmetricGroupAlgebra_n.retract_okounkov_vershik"]], "retract_plain() (sage.combinat.symmetric_group_algebra.symmetricgroupalgebra_n method)": [[343, "sage.combinat.symmetric_group_algebra.SymmetricGroupAlgebra_n.retract_plain"]], "right_action_product() (sage.combinat.symmetric_group_algebra.symmetricgroupalgebra_n method)": [[343, "sage.combinat.symmetric_group_algebra.SymmetricGroupAlgebra_n.right_action_product"]], "rsw_shuffling_element() (sage.combinat.symmetric_group_algebra.symmetricgroupalgebra_n method)": [[343, "sage.combinat.symmetric_group_algebra.SymmetricGroupAlgebra_n.rsw_shuffling_element"]], "sage.combinat.symmetric_group_algebra": [[343, "module-sage.combinat.symmetric_group_algebra"]], "semi_rsw_element() (sage.combinat.symmetric_group_algebra.symmetricgroupalgebra_n method)": [[343, "sage.combinat.symmetric_group_algebra.SymmetricGroupAlgebra_n.semi_rsw_element"]], "seminormal_basis() (sage.combinat.symmetric_group_algebra.symmetricgroupalgebra_n method)": [[343, "sage.combinat.symmetric_group_algebra.SymmetricGroupAlgebra_n.seminormal_basis"]], "seminormal_test() (in module sage.combinat.symmetric_group_algebra)": [[343, "sage.combinat.symmetric_group_algebra.seminormal_test"]], "specht_module() (sage.combinat.symmetric_group_algebra.symmetricgroupalgebra_n method)": [[343, "sage.combinat.symmetric_group_algebra.SymmetricGroupAlgebra_n.specht_module"]], "specht_module_dimension() (sage.combinat.symmetric_group_algebra.symmetricgroupalgebra_n method)": [[343, "sage.combinat.symmetric_group_algebra.SymmetricGroupAlgebra_n.specht_module_dimension"]], "t() (sage.combinat.symmetric_group_algebra.heckealgebrasymmetricgroup_t method)": [[343, "sage.combinat.symmetric_group_algebra.HeckeAlgebraSymmetricGroup_t.t"]], "t_action() (sage.combinat.symmetric_group_algebra.heckealgebrasymmetricgroup_t method)": [[343, "sage.combinat.symmetric_group_algebra.HeckeAlgebraSymmetricGroup_t.t_action"]], "t_action_on_basis() (sage.combinat.symmetric_group_algebra.heckealgebrasymmetricgroup_t method)": [[343, "sage.combinat.symmetric_group_algebra.HeckeAlgebraSymmetricGroup_t.t_action_on_basis"]], "element (sage.combinat.symmetric_group_representations.spechtrepresentations attribute)": [[344, "sage.combinat.symmetric_group_representations.SpechtRepresentations.Element"]], "element (sage.combinat.symmetric_group_representations.youngrepresentations_orthogonal attribute)": [[344, "sage.combinat.symmetric_group_representations.YoungRepresentations_Orthogonal.Element"]], "element (sage.combinat.symmetric_group_representations.youngrepresentations_seminormal attribute)": [[344, "sage.combinat.symmetric_group_representations.YoungRepresentations_Seminormal.Element"]], "spechtrepresentation (class in sage.combinat.symmetric_group_representations)": [[344, "sage.combinat.symmetric_group_representations.SpechtRepresentation"]], "spechtrepresentations (class in sage.combinat.symmetric_group_representations)": [[344, "sage.combinat.symmetric_group_representations.SpechtRepresentations"]], "symmetricgrouprepresentation() (in module sage.combinat.symmetric_group_representations)": [[344, "sage.combinat.symmetric_group_representations.SymmetricGroupRepresentation"]], "symmetricgrouprepresentation_generic_class (class in sage.combinat.symmetric_group_representations)": [[344, "sage.combinat.symmetric_group_representations.SymmetricGroupRepresentation_generic_class"]], "symmetricgrouprepresentations() (in module sage.combinat.symmetric_group_representations)": [[344, "sage.combinat.symmetric_group_representations.SymmetricGroupRepresentations"]], "symmetricgrouprepresentations_class (class in sage.combinat.symmetric_group_representations)": [[344, "sage.combinat.symmetric_group_representations.SymmetricGroupRepresentations_class"]], "youngrepresentation_orthogonal (class in sage.combinat.symmetric_group_representations)": [[344, "sage.combinat.symmetric_group_representations.YoungRepresentation_Orthogonal"]], "youngrepresentation_seminormal (class in sage.combinat.symmetric_group_representations)": [[344, "sage.combinat.symmetric_group_representations.YoungRepresentation_Seminormal"]], "youngrepresentation_generic (class in sage.combinat.symmetric_group_representations)": [[344, "sage.combinat.symmetric_group_representations.YoungRepresentation_generic"]], "youngrepresentations_orthogonal (class in sage.combinat.symmetric_group_representations)": [[344, "sage.combinat.symmetric_group_representations.YoungRepresentations_Orthogonal"]], "youngrepresentations_seminormal (class in sage.combinat.symmetric_group_representations)": [[344, "sage.combinat.symmetric_group_representations.YoungRepresentations_Seminormal"]], "cardinality() (sage.combinat.symmetric_group_representations.symmetricgrouprepresentations_class method)": [[344, "sage.combinat.symmetric_group_representations.SymmetricGroupRepresentations_class.cardinality"]], "partition_to_vector_of_contents() (in module sage.combinat.symmetric_group_representations)": [[344, "sage.combinat.symmetric_group_representations.partition_to_vector_of_contents"]], "representation_matrix() (sage.combinat.symmetric_group_representations.spechtrepresentation method)": [[344, "sage.combinat.symmetric_group_representations.SpechtRepresentation.representation_matrix"]], "representation_matrix() (sage.combinat.symmetric_group_representations.youngrepresentation_generic method)": [[344, "sage.combinat.symmetric_group_representations.YoungRepresentation_generic.representation_matrix"]], "representation_matrix_for_simple_transposition() (sage.combinat.symmetric_group_representations.youngrepresentation_generic method)": [[344, "sage.combinat.symmetric_group_representations.YoungRepresentation_generic.representation_matrix_for_simple_transposition"]], "sage.combinat.symmetric_group_representations": [[344, "module-sage.combinat.symmetric_group_representations"]], "scalar_product() (sage.combinat.symmetric_group_representations.spechtrepresentation method)": [[344, "sage.combinat.symmetric_group_representations.SpechtRepresentation.scalar_product"]], "scalar_product_matrix() (sage.combinat.symmetric_group_representations.spechtrepresentation method)": [[344, "sage.combinat.symmetric_group_representations.SpechtRepresentation.scalar_product_matrix"]], "to_character() (sage.combinat.symmetric_group_representations.symmetricgrouprepresentation_generic_class method)": [[344, "sage.combinat.symmetric_group_representations.SymmetricGroupRepresentation_generic_class.to_character"]], "verify_representation() (sage.combinat.symmetric_group_representations.symmetricgrouprepresentation_generic_class method)": [[344, "sage.combinat.symmetric_group_representations.SymmetricGroupRepresentation_generic_class.verify_representation"]], "t_sequences_construction_from_base_sequences() (in module sage.combinat.t_sequences)": [[345, "sage.combinat.t_sequences.T_sequences_construction_from_base_sequences"]], "t_sequences_construction_from_turyn_sequences() (in module sage.combinat.t_sequences)": [[345, "sage.combinat.t_sequences.T_sequences_construction_from_turyn_sequences"]], "t_sequences_smallcases() (in module sage.combinat.t_sequences)": [[345, "sage.combinat.t_sequences.T_sequences_smallcases"]], "base_sequences_construction() (in module sage.combinat.t_sequences)": [[345, "sage.combinat.t_sequences.base_sequences_construction"]], "base_sequences_smallcases() (in module sage.combinat.t_sequences)": [[345, "sage.combinat.t_sequences.base_sequences_smallcases"]], "is_t_sequences_set() (in module sage.combinat.t_sequences)": [[345, "sage.combinat.t_sequences.is_T_sequences_set"]], "is_base_sequences_tuple() (in module sage.combinat.t_sequences)": [[345, "sage.combinat.t_sequences.is_base_sequences_tuple"]], "is_skew() (in module sage.combinat.t_sequences)": [[345, "sage.combinat.t_sequences.is_skew"]], "is_symmetric() (in module sage.combinat.t_sequences)": [[345, "sage.combinat.t_sequences.is_symmetric"]], "sage.combinat.t_sequences": [[345, "module-sage.combinat.t_sequences"]], "turyn_sequences_smallcases() (in module sage.combinat.t_sequences)": [[345, "sage.combinat.t_sequences.turyn_sequences_smallcases"]], "turyn_type_sequences_smallcases() (in module sage.combinat.t_sequences)": [[345, "sage.combinat.t_sequences.turyn_type_sequences_smallcases"]], "element (sage.combinat.tableau.increasingtableaux attribute)": [[346, "sage.combinat.tableau.IncreasingTableaux.Element"]], "element (sage.combinat.tableau.rowstandardtableaux attribute)": [[346, "sage.combinat.tableau.RowStandardTableaux.Element"]], "element (sage.combinat.tableau.semistandardtableaux attribute)": [[346, "sage.combinat.tableau.SemistandardTableaux.Element"]], "element (sage.combinat.tableau.standardtableaux attribute)": [[346, "sage.combinat.tableau.StandardTableaux.Element"]], "element (sage.combinat.tableau.tableaux attribute)": [[346, "sage.combinat.tableau.Tableaux.Element"]], "increasingtableau (class in sage.combinat.tableau)": [[346, "sage.combinat.tableau.IncreasingTableau"]], "increasingtableaux (class in sage.combinat.tableau)": [[346, "sage.combinat.tableau.IncreasingTableaux"]], "increasingtableaux_all (class in sage.combinat.tableau)": [[346, "sage.combinat.tableau.IncreasingTableaux_all"]], "increasingtableaux_shape (class in sage.combinat.tableau)": [[346, "sage.combinat.tableau.IncreasingTableaux_shape"]], "increasingtableaux_shape_inf (class in sage.combinat.tableau)": [[346, "sage.combinat.tableau.IncreasingTableaux_shape_inf"]], "increasingtableaux_shape_weight (class in sage.combinat.tableau)": [[346, "sage.combinat.tableau.IncreasingTableaux_shape_weight"]], "increasingtableaux_size (class in sage.combinat.tableau)": [[346, "sage.combinat.tableau.IncreasingTableaux_size"]], "increasingtableaux_size_inf (class in sage.combinat.tableau)": [[346, "sage.combinat.tableau.IncreasingTableaux_size_inf"]], "increasingtableaux_size_weight (class in sage.combinat.tableau)": [[346, "sage.combinat.tableau.IncreasingTableaux_size_weight"]], "k_bender_knuth() (sage.combinat.tableau.increasingtableau method)": [[346, "sage.combinat.tableau.IncreasingTableau.K_bender_knuth"]], "k_evacuation() (sage.combinat.tableau.increasingtableau method)": [[346, "sage.combinat.tableau.IncreasingTableau.K_evacuation"]], "k_promotion() (sage.combinat.tableau.increasingtableau method)": [[346, "sage.combinat.tableau.IncreasingTableau.K_promotion"]], "k_promotion_inverse() (sage.combinat.tableau.increasingtableau method)": [[346, "sage.combinat.tableau.IncreasingTableau.K_promotion_inverse"]], "rowstandardtableau (class in sage.combinat.tableau)": [[346, "sage.combinat.tableau.RowStandardTableau"]], "rowstandardtableaux (class in sage.combinat.tableau)": [[346, "sage.combinat.tableau.RowStandardTableaux"]], "rowstandardtableaux_all (class in sage.combinat.tableau)": [[346, "sage.combinat.tableau.RowStandardTableaux_all"]], "rowstandardtableaux_shape (class in sage.combinat.tableau)": [[346, "sage.combinat.tableau.RowStandardTableaux_shape"]], "rowstandardtableaux_size (class in sage.combinat.tableau)": [[346, "sage.combinat.tableau.RowStandardTableaux_size"]], "semistandardtableau (class in sage.combinat.tableau)": [[346, "sage.combinat.tableau.SemistandardTableau"]], "semistandardtableaux (class in sage.combinat.tableau)": [[346, "sage.combinat.tableau.SemistandardTableaux"]], "semistandardtableaux_all (class in sage.combinat.tableau)": [[346, "sage.combinat.tableau.SemistandardTableaux_all"]], "semistandardtableaux_shape (class in sage.combinat.tableau)": [[346, "sage.combinat.tableau.SemistandardTableaux_shape"]], "semistandardtableaux_shape_inf (class in sage.combinat.tableau)": [[346, "sage.combinat.tableau.SemistandardTableaux_shape_inf"]], "semistandardtableaux_shape_weight (class in sage.combinat.tableau)": [[346, "sage.combinat.tableau.SemistandardTableaux_shape_weight"]], "semistandardtableaux_size (class in sage.combinat.tableau)": [[346, "sage.combinat.tableau.SemistandardTableaux_size"]], "semistandardtableaux_size_inf (class in sage.combinat.tableau)": [[346, "sage.combinat.tableau.SemistandardTableaux_size_inf"]], "semistandardtableaux_size_weight (class in sage.combinat.tableau)": [[346, "sage.combinat.tableau.SemistandardTableaux_size_weight"]], "standardtableau (class in sage.combinat.tableau)": [[346, "sage.combinat.tableau.StandardTableau"]], "standardtableaux (class in sage.combinat.tableau)": [[346, "sage.combinat.tableau.StandardTableaux"]], "standardtableaux_all (class in sage.combinat.tableau)": [[346, "sage.combinat.tableau.StandardTableaux_all"]], "standardtableaux_shape (class in sage.combinat.tableau)": [[346, "sage.combinat.tableau.StandardTableaux_shape"]], "standardtableaux_size (class in sage.combinat.tableau)": [[346, "sage.combinat.tableau.StandardTableaux_size"]], "tableau (class in sage.combinat.tableau)": [[346, "sage.combinat.tableau.Tableau"]], "tableau_class (class in sage.combinat.tableau)": [[346, "sage.combinat.tableau.Tableau_class"]], "tableaux (class in sage.combinat.tableau)": [[346, "sage.combinat.tableau.Tableaux"]], "tableaux_all (class in sage.combinat.tableau)": [[346, "sage.combinat.tableau.Tableaux_all"]], "tableaux_size (class in sage.combinat.tableau)": [[346, "sage.combinat.tableau.Tableaux_size"]], "add_entry() (sage.combinat.tableau.tableau method)": [[346, "sage.combinat.tableau.Tableau.add_entry"]], "an_element() (sage.combinat.tableau.rowstandardtableaux_size method)": [[346, "sage.combinat.tableau.RowStandardTableaux_size.an_element"]], "an_element() (sage.combinat.tableau.tableaux_all method)": [[346, "sage.combinat.tableau.Tableaux_all.an_element"]], "an_element() (sage.combinat.tableau.tableaux_size method)": [[346, "sage.combinat.tableau.Tableaux_size.an_element"]], "anti_restrict() (sage.combinat.tableau.tableau method)": [[346, "sage.combinat.tableau.Tableau.anti_restrict"]], "atom() (sage.combinat.tableau.tableau method)": [[346, "sage.combinat.tableau.Tableau.atom"]], "bender_knuth_involution() (sage.combinat.tableau.tableau method)": [[346, "sage.combinat.tableau.Tableau.bender_knuth_involution"]], "bump() (sage.combinat.tableau.tableau method)": [[346, "sage.combinat.tableau.Tableau.bump"]], "bump_multiply() (sage.combinat.tableau.tableau method)": [[346, "sage.combinat.tableau.Tableau.bump_multiply"]], "cardinality() (sage.combinat.tableau.rowstandardtableaux_shape method)": [[346, "sage.combinat.tableau.RowStandardTableaux_shape.cardinality"]], "cardinality() (sage.combinat.tableau.semistandardtableaux_shape method)": [[346, "sage.combinat.tableau.SemistandardTableaux_shape.cardinality"]], "cardinality() (sage.combinat.tableau.semistandardtableaux_shape_weight method)": [[346, "sage.combinat.tableau.SemistandardTableaux_shape_weight.cardinality"]], "cardinality() (sage.combinat.tableau.semistandardtableaux_size method)": [[346, "sage.combinat.tableau.SemistandardTableaux_size.cardinality"]], "cardinality() (sage.combinat.tableau.semistandardtableaux_size_weight method)": [[346, "sage.combinat.tableau.SemistandardTableaux_size_weight.cardinality"]], "cardinality() (sage.combinat.tableau.standardtableaux_shape method)": [[346, "sage.combinat.tableau.StandardTableaux_shape.cardinality"]], "cardinality() (sage.combinat.tableau.standardtableaux_size method)": [[346, "sage.combinat.tableau.StandardTableaux_size.cardinality"]], "catabolism() (sage.combinat.tableau.tableau method)": [[346, "sage.combinat.tableau.Tableau.catabolism"]], "catabolism_projector() (sage.combinat.tableau.tableau method)": [[346, "sage.combinat.tableau.Tableau.catabolism_projector"]], "catabolism_sequence() (sage.combinat.tableau.tableau method)": [[346, "sage.combinat.tableau.Tableau.catabolism_sequence"]], "cells() (sage.combinat.tableau.tableau method)": [[346, "sage.combinat.tableau.Tableau.cells"]], "cells_containing() (sage.combinat.tableau.tableau method)": [[346, "sage.combinat.tableau.Tableau.cells_containing"]], "charge() (sage.combinat.tableau.tableau method)": [[346, "sage.combinat.tableau.Tableau.charge"]], "check() (sage.combinat.tableau.increasingtableau method)": [[346, "sage.combinat.tableau.IncreasingTableau.check"]], "check() (sage.combinat.tableau.rowstandardtableau method)": [[346, "sage.combinat.tableau.RowStandardTableau.check"]], "check() (sage.combinat.tableau.semistandardtableau method)": [[346, "sage.combinat.tableau.SemistandardTableau.check"]], "check() (sage.combinat.tableau.standardtableau method)": [[346, "sage.combinat.tableau.StandardTableau.check"]], "check() (sage.combinat.tableau.tableau method)": [[346, "sage.combinat.tableau.Tableau.check"]], "cocharge() (sage.combinat.tableau.tableau method)": [[346, "sage.combinat.tableau.Tableau.cocharge"]], "codegree() (sage.combinat.tableau.tableau method)": [[346, "sage.combinat.tableau.Tableau.codegree"]], "column_stabilizer() (sage.combinat.tableau.tableau method)": [[346, "sage.combinat.tableau.Tableau.column_stabilizer"]], "components() (sage.combinat.tableau.tableau method)": [[346, "sage.combinat.tableau.Tableau.components"]], "conjugate() (sage.combinat.tableau.tableau method)": [[346, "sage.combinat.tableau.Tableau.conjugate"]], "content() (sage.combinat.tableau.tableau method)": [[346, "sage.combinat.tableau.Tableau.content"]], "corners() (sage.combinat.tableau.tableau method)": [[346, "sage.combinat.tableau.Tableau.corners"]], "degree() (sage.combinat.tableau.tableau method)": [[346, "sage.combinat.tableau.Tableau.degree"]], "descent_set() (sage.combinat.tableau.increasingtableau method)": [[346, "sage.combinat.tableau.IncreasingTableau.descent_set"]], "descents() (sage.combinat.tableau.tableau method)": [[346, "sage.combinat.tableau.Tableau.descents"]], "dominates() (sage.combinat.tableau.standardtableau method)": [[346, "sage.combinat.tableau.StandardTableau.dominates"]], "down() (sage.combinat.tableau.standardtableau method)": [[346, "sage.combinat.tableau.StandardTableau.down"]], "down_list() (sage.combinat.tableau.standardtableau method)": [[346, "sage.combinat.tableau.StandardTableau.down_list"]], "dual_k_evacuation() (sage.combinat.tableau.increasingtableau method)": [[346, "sage.combinat.tableau.IncreasingTableau.dual_K_evacuation"]], "entries() (sage.combinat.tableau.tableau method)": [[346, "sage.combinat.tableau.Tableau.entries"]], "entry() (sage.combinat.tableau.tableau method)": [[346, "sage.combinat.tableau.Tableau.entry"]], "evacuation() (sage.combinat.tableau.tableau method)": [[346, "sage.combinat.tableau.Tableau.evacuation"]], "evaluation() (sage.combinat.tableau.tableau method)": [[346, "sage.combinat.tableau.Tableau.evaluation"]], "first_column_descent() (sage.combinat.tableau.tableau method)": [[346, "sage.combinat.tableau.Tableau.first_column_descent"]], "first_row_descent() (sage.combinat.tableau.tableau method)": [[346, "sage.combinat.tableau.Tableau.first_row_descent"]], "flush() (sage.combinat.tableau.tableau method)": [[346, "sage.combinat.tableau.Tableau.flush"]], "from_chain() (in module sage.combinat.tableau)": [[346, "sage.combinat.tableau.from_chain"]], "from_shape_and_word() (in module sage.combinat.tableau)": [[346, "sage.combinat.tableau.from_shape_and_word"]], "height() (sage.combinat.tableau.tableau method)": [[346, "sage.combinat.tableau.Tableau.height"]], "hillman_grassl() (sage.combinat.tableau.tableau method)": [[346, "sage.combinat.tableau.Tableau.hillman_grassl"]], "insert_word() (sage.combinat.tableau.tableau method)": [[346, "sage.combinat.tableau.Tableau.insert_word"]], "inversion_number() (sage.combinat.tableau.tableau method)": [[346, "sage.combinat.tableau.Tableau.inversion_number"]], "inversions() (sage.combinat.tableau.tableau method)": [[346, "sage.combinat.tableau.Tableau.inversions"]], "is_column_increasing() (sage.combinat.tableau.tableau method)": [[346, "sage.combinat.tableau.Tableau.is_column_increasing"]], "is_column_strict() (sage.combinat.tableau.tableau method)": [[346, "sage.combinat.tableau.Tableau.is_column_strict"]], "is_increasing() (sage.combinat.tableau.tableau method)": [[346, "sage.combinat.tableau.Tableau.is_increasing"]], "is_k_tableau() (sage.combinat.tableau.tableau method)": [[346, "sage.combinat.tableau.Tableau.is_k_tableau"]], "is_key_tableau() (sage.combinat.tableau.tableau method)": [[346, "sage.combinat.tableau.Tableau.is_key_tableau"]], "is_rectangular() (sage.combinat.tableau.tableau method)": [[346, "sage.combinat.tableau.Tableau.is_rectangular"]], "is_row_increasing() (sage.combinat.tableau.tableau method)": [[346, "sage.combinat.tableau.Tableau.is_row_increasing"]], "is_row_strict() (sage.combinat.tableau.tableau method)": [[346, "sage.combinat.tableau.Tableau.is_row_strict"]], "is_semistandard() (sage.combinat.tableau.tableau method)": [[346, "sage.combinat.tableau.Tableau.is_semistandard"]], "is_standard() (sage.combinat.tableau.standardtableau method)": [[346, "sage.combinat.tableau.StandardTableau.is_standard"]], "is_standard() (sage.combinat.tableau.tableau method)": [[346, "sage.combinat.tableau.Tableau.is_standard"]], "k_weight() (sage.combinat.tableau.tableau method)": [[346, "sage.combinat.tableau.Tableau.k_weight"]], "lambda_catabolism() (sage.combinat.tableau.tableau method)": [[346, "sage.combinat.tableau.Tableau.lambda_catabolism"]], "last_letter_lequal() (sage.combinat.tableau.tableau method)": [[346, "sage.combinat.tableau.Tableau.last_letter_lequal"]], "left_key_tableau() (sage.combinat.tableau.tableau method)": [[346, "sage.combinat.tableau.Tableau.left_key_tableau"]], "leq() (sage.combinat.tableau.tableau method)": [[346, "sage.combinat.tableau.Tableau.leq"]], "level() (sage.combinat.tableau.tableau method)": [[346, "sage.combinat.tableau.Tableau.level"]], "list() (sage.combinat.tableau.semistandardtableaux_all method)": [[346, "sage.combinat.tableau.SemistandardTableaux_all.list"]], "list() (sage.combinat.tableau.semistandardtableaux_shape_weight method)": [[346, "sage.combinat.tableau.SemistandardTableaux_shape_weight.list"]], "list() (sage.combinat.tableau.semistandardtableaux_size_inf method)": [[346, "sage.combinat.tableau.SemistandardTableaux_size_inf.list"]], "list() (sage.combinat.tableau.standardtableaux_shape method)": [[346, "sage.combinat.tableau.StandardTableaux_shape.list"]], "major_index() (sage.combinat.tableau.tableau method)": [[346, "sage.combinat.tableau.Tableau.major_index"]], "options (sage.combinat.tableau.tableaux attribute)": [[346, "sage.combinat.tableau.Tableaux.options"]], "plot() (sage.combinat.tableau.tableau method)": [[346, "sage.combinat.tableau.Tableau.plot"]], "pp() (sage.combinat.tableau.tableau method)": [[346, "sage.combinat.tableau.Tableau.pp"]], "promotion() (sage.combinat.tableau.standardtableau method)": [[346, "sage.combinat.tableau.StandardTableau.promotion"]], "promotion() (sage.combinat.tableau.tableau method)": [[346, "sage.combinat.tableau.Tableau.promotion"]], "promotion_inverse() (sage.combinat.tableau.standardtableau method)": [[346, "sage.combinat.tableau.StandardTableau.promotion_inverse"]], "promotion_inverse() (sage.combinat.tableau.tableau method)": [[346, "sage.combinat.tableau.Tableau.promotion_inverse"]], "promotion_operator() (sage.combinat.tableau.tableau method)": [[346, "sage.combinat.tableau.Tableau.promotion_operator"]], "raise_action_from_words() (sage.combinat.tableau.tableau method)": [[346, "sage.combinat.tableau.Tableau.raise_action_from_words"]], "random_element() (sage.combinat.tableau.semistandardtableaux_shape method)": [[346, "sage.combinat.tableau.SemistandardTableaux_shape.random_element"]], "random_element() (sage.combinat.tableau.semistandardtableaux_size method)": [[346, "sage.combinat.tableau.SemistandardTableaux_size.random_element"]], "random_element() (sage.combinat.tableau.standardtableaux_shape method)": [[346, "sage.combinat.tableau.StandardTableaux_shape.random_element"]], "random_element() (sage.combinat.tableau.standardtableaux_size method)": [[346, "sage.combinat.tableau.StandardTableaux_size.random_element"]], "reading_word_permutation() (sage.combinat.tableau.tableau method)": [[346, "sage.combinat.tableau.Tableau.reading_word_permutation"]], "reduced_column_word() (sage.combinat.tableau.tableau method)": [[346, "sage.combinat.tableau.Tableau.reduced_column_word"]], "reduced_lambda_catabolism() (sage.combinat.tableau.tableau method)": [[346, "sage.combinat.tableau.Tableau.reduced_lambda_catabolism"]], "reduced_row_word() (sage.combinat.tableau.tableau method)": [[346, "sage.combinat.tableau.Tableau.reduced_row_word"]], "residue() (sage.combinat.tableau.tableau method)": [[346, "sage.combinat.tableau.Tableau.residue"]], "residue_sequence() (sage.combinat.tableau.tableau method)": [[346, "sage.combinat.tableau.Tableau.residue_sequence"]], "restrict() (sage.combinat.tableau.tableau method)": [[346, "sage.combinat.tableau.Tableau.restrict"]], "restriction_shape() (sage.combinat.tableau.tableau method)": [[346, "sage.combinat.tableau.Tableau.restriction_shape"]], "reverse_bump() (sage.combinat.tableau.tableau method)": [[346, "sage.combinat.tableau.Tableau.reverse_bump"]], "right_key_tableau() (sage.combinat.tableau.tableau method)": [[346, "sage.combinat.tableau.Tableau.right_key_tableau"]], "rotate_180() (sage.combinat.tableau.tableau method)": [[346, "sage.combinat.tableau.Tableau.rotate_180"]], "row_stabilizer() (sage.combinat.tableau.tableau method)": [[346, "sage.combinat.tableau.Tableau.row_stabilizer"]], "sage.combinat.tableau": [[346, "module-sage.combinat.tableau"]], "schensted_insert() (sage.combinat.tableau.tableau method)": [[346, "sage.combinat.tableau.Tableau.schensted_insert"]], "schuetzenberger_involution() (sage.combinat.tableau.tableau method)": [[346, "sage.combinat.tableau.Tableau.schuetzenberger_involution"]], "seg() (sage.combinat.tableau.tableau method)": [[346, "sage.combinat.tableau.Tableau.seg"]], "shape() (sage.combinat.tableau.tableau method)": [[346, "sage.combinat.tableau.Tableau.shape"]], "size() (sage.combinat.tableau.tableau method)": [[346, "sage.combinat.tableau.Tableau.size"]], "slide_multiply() (sage.combinat.tableau.tableau method)": [[346, "sage.combinat.tableau.Tableau.slide_multiply"]], "socle() (sage.combinat.tableau.tableau method)": [[346, "sage.combinat.tableau.Tableau.socle"]], "standard_descents() (sage.combinat.tableau.standardtableau method)": [[346, "sage.combinat.tableau.StandardTableau.standard_descents"]], "standard_major_index() (sage.combinat.tableau.standardtableau method)": [[346, "sage.combinat.tableau.StandardTableau.standard_major_index"]], "standard_number_of_descents() (sage.combinat.tableau.standardtableau method)": [[346, "sage.combinat.tableau.StandardTableau.standard_number_of_descents"]], "standardization() (sage.combinat.tableau.tableau method)": [[346, "sage.combinat.tableau.Tableau.standardization"]], "sulzgruber_correspondence() (sage.combinat.tableau.tableau method)": [[346, "sage.combinat.tableau.Tableau.sulzgruber_correspondence"]], "symmetric_group_action_on_entries() (sage.combinat.tableau.tableau method)": [[346, "sage.combinat.tableau.Tableau.symmetric_group_action_on_entries"]], "symmetric_group_action_on_values() (in module sage.combinat.tableau)": [[346, "sage.combinat.tableau.symmetric_group_action_on_values"]], "symmetric_group_action_on_values() (sage.combinat.tableau.tableau method)": [[346, "sage.combinat.tableau.Tableau.symmetric_group_action_on_values"]], "to_gelfand_tsetlin_pattern() (sage.combinat.tableau.tableau method)": [[346, "sage.combinat.tableau.Tableau.to_Gelfand_Tsetlin_pattern"]], "to_chain() (sage.combinat.tableau.tableau method)": [[346, "sage.combinat.tableau.Tableau.to_chain"]], "to_list() (sage.combinat.tableau.tableau method)": [[346, "sage.combinat.tableau.Tableau.to_list"]], "to_sign_matrix() (sage.combinat.tableau.tableau method)": [[346, "sage.combinat.tableau.Tableau.to_sign_matrix"]], "to_word() (sage.combinat.tableau.tableau method)": [[346, "sage.combinat.tableau.Tableau.to_word"]], "to_word_by_column() (sage.combinat.tableau.tableau method)": [[346, "sage.combinat.tableau.Tableau.to_word_by_column"]], "to_word_by_row() (sage.combinat.tableau.tableau method)": [[346, "sage.combinat.tableau.Tableau.to_word_by_row"]], "unmatched_places() (in module sage.combinat.tableau)": [[346, "sage.combinat.tableau.unmatched_places"]], "up() (sage.combinat.tableau.standardtableau method)": [[346, "sage.combinat.tableau.StandardTableau.up"]], "up_list() (sage.combinat.tableau.standardtableau method)": [[346, "sage.combinat.tableau.StandardTableau.up_list"]], "vertical_flip() (sage.combinat.tableau.tableau method)": [[346, "sage.combinat.tableau.Tableau.vertical_flip"]], "weight() (sage.combinat.tableau.tableau method)": [[346, "sage.combinat.tableau.Tableau.weight"]], "element (sage.combinat.tableau_residues.residuesequences attribute)": [[347, "sage.combinat.tableau_residues.ResidueSequences.Element"]], "residuesequence (class in sage.combinat.tableau_residues)": [[347, "sage.combinat.tableau_residues.ResidueSequence"]], "residuesequences (class in sage.combinat.tableau_residues)": [[347, "sage.combinat.tableau_residues.ResidueSequences"]], "an_element() (sage.combinat.tableau_residues.residuesequences method)": [[347, "sage.combinat.tableau_residues.ResidueSequences.an_element"]], "base_ring() (sage.combinat.tableau_residues.residuesequence method)": [[347, "sage.combinat.tableau_residues.ResidueSequence.base_ring"]], "block() (sage.combinat.tableau_residues.residuesequence method)": [[347, "sage.combinat.tableau_residues.ResidueSequence.block"]], "cell_residue() (sage.combinat.tableau_residues.residuesequences method)": [[347, "sage.combinat.tableau_residues.ResidueSequences.cell_residue"]], "check() (sage.combinat.tableau_residues.residuesequence method)": [[347, "sage.combinat.tableau_residues.ResidueSequence.check"]], "check_element() (sage.combinat.tableau_residues.residuesequences method)": [[347, "sage.combinat.tableau_residues.ResidueSequences.check_element"]], "level() (sage.combinat.tableau_residues.residuesequence method)": [[347, "sage.combinat.tableau_residues.ResidueSequence.level"]], "multicharge() (sage.combinat.tableau_residues.residuesequence method)": [[347, "sage.combinat.tableau_residues.ResidueSequence.multicharge"]], "negative() (sage.combinat.tableau_residues.residuesequence method)": [[347, "sage.combinat.tableau_residues.ResidueSequence.negative"]], "quantum_characteristic() (sage.combinat.tableau_residues.residuesequence method)": [[347, "sage.combinat.tableau_residues.ResidueSequence.quantum_characteristic"]], "residues() (sage.combinat.tableau_residues.residuesequence method)": [[347, "sage.combinat.tableau_residues.ResidueSequence.residues"]], "restrict() (sage.combinat.tableau_residues.residuesequence method)": [[347, "sage.combinat.tableau_residues.ResidueSequence.restrict"]], "restrict_row() (sage.combinat.tableau_residues.residuesequence method)": [[347, "sage.combinat.tableau_residues.ResidueSequence.restrict_row"]], "row_standard_tableaux() (sage.combinat.tableau_residues.residuesequence method)": [[347, "sage.combinat.tableau_residues.ResidueSequence.row_standard_tableaux"]], "sage.combinat.tableau_residues": [[347, "module-sage.combinat.tableau_residues"]], "size() (sage.combinat.tableau_residues.residuesequence method)": [[347, "sage.combinat.tableau_residues.ResidueSequence.size"]], "standard_tableaux() (sage.combinat.tableau_residues.residuesequence method)": [[347, "sage.combinat.tableau_residues.ResidueSequence.standard_tableaux"]], "swap_residues() (sage.combinat.tableau_residues.residuesequence method)": [[347, "sage.combinat.tableau_residues.ResidueSequence.swap_residues"]], "element (sage.combinat.tableau_tuple.rowstandardtableautuples attribute)": [[348, "sage.combinat.tableau_tuple.RowStandardTableauTuples.Element"]], "element (sage.combinat.tableau_tuple.standardtableautuples attribute)": [[348, "sage.combinat.tableau_tuple.StandardTableauTuples.Element"]], "element (sage.combinat.tableau_tuple.tableautuple attribute)": [[348, "sage.combinat.tableau_tuple.TableauTuple.Element"]], "element (sage.combinat.tableau_tuple.tableautuples attribute)": [[348, "sage.combinat.tableau_tuple.TableauTuples.Element"]], "rowstandardtableautuple (class in sage.combinat.tableau_tuple)": [[348, "sage.combinat.tableau_tuple.RowStandardTableauTuple"]], "rowstandardtableautuples (class in sage.combinat.tableau_tuple)": [[348, "sage.combinat.tableau_tuple.RowStandardTableauTuples"]], "rowstandardtableautuples_all (class in sage.combinat.tableau_tuple)": [[348, "sage.combinat.tableau_tuple.RowStandardTableauTuples_all"]], "rowstandardtableautuples_level (class in sage.combinat.tableau_tuple)": [[348, "sage.combinat.tableau_tuple.RowStandardTableauTuples_level"]], "rowstandardtableautuples_level_size (class in sage.combinat.tableau_tuple)": [[348, "sage.combinat.tableau_tuple.RowStandardTableauTuples_level_size"]], "rowstandardtableautuples_residue (class in sage.combinat.tableau_tuple)": [[348, "sage.combinat.tableau_tuple.RowStandardTableauTuples_residue"]], "rowstandardtableautuples_residue_shape (class in sage.combinat.tableau_tuple)": [[348, "sage.combinat.tableau_tuple.RowStandardTableauTuples_residue_shape"]], "rowstandardtableautuples_shape (class in sage.combinat.tableau_tuple)": [[348, "sage.combinat.tableau_tuple.RowStandardTableauTuples_shape"]], "rowstandardtableautuples_size (class in sage.combinat.tableau_tuple)": [[348, "sage.combinat.tableau_tuple.RowStandardTableauTuples_size"]], "standardtableautuple (class in sage.combinat.tableau_tuple)": [[348, "sage.combinat.tableau_tuple.StandardTableauTuple"]], "standardtableautuples (class in sage.combinat.tableau_tuple)": [[348, "sage.combinat.tableau_tuple.StandardTableauTuples"]], "standardtableautuples_all (class in sage.combinat.tableau_tuple)": [[348, "sage.combinat.tableau_tuple.StandardTableauTuples_all"]], "standardtableautuples_level (class in sage.combinat.tableau_tuple)": [[348, "sage.combinat.tableau_tuple.StandardTableauTuples_level"]], "standardtableautuples_level_size (class in sage.combinat.tableau_tuple)": [[348, "sage.combinat.tableau_tuple.StandardTableauTuples_level_size"]], "standardtableautuples_shape (class in sage.combinat.tableau_tuple)": [[348, "sage.combinat.tableau_tuple.StandardTableauTuples_shape"]], "standardtableautuples_size (class in sage.combinat.tableau_tuple)": [[348, "sage.combinat.tableau_tuple.StandardTableauTuples_size"]], "standardtableaux_residue (class in sage.combinat.tableau_tuple)": [[348, "sage.combinat.tableau_tuple.StandardTableaux_residue"]], "standardtableaux_residue_shape (class in sage.combinat.tableau_tuple)": [[348, "sage.combinat.tableau_tuple.StandardTableaux_residue_shape"]], "tableautuple (class in sage.combinat.tableau_tuple)": [[348, "sage.combinat.tableau_tuple.TableauTuple"]], "tableautuples (class in sage.combinat.tableau_tuple)": [[348, "sage.combinat.tableau_tuple.TableauTuples"]], "tableautuples_all (class in sage.combinat.tableau_tuple)": [[348, "sage.combinat.tableau_tuple.TableauTuples_all"]], "tableautuples_level (class in sage.combinat.tableau_tuple)": [[348, "sage.combinat.tableau_tuple.TableauTuples_level"]], "tableautuples_level_size (class in sage.combinat.tableau_tuple)": [[348, "sage.combinat.tableau_tuple.TableauTuples_level_size"]], "tableautuples_size (class in sage.combinat.tableau_tuple)": [[348, "sage.combinat.tableau_tuple.TableauTuples_size"]], "add_entry() (sage.combinat.tableau_tuple.tableautuple method)": [[348, "sage.combinat.tableau_tuple.TableauTuple.add_entry"]], "an_element() (sage.combinat.tableau_tuple.rowstandardtableautuples_all method)": [[348, "sage.combinat.tableau_tuple.RowStandardTableauTuples_all.an_element"]], "an_element() (sage.combinat.tableau_tuple.rowstandardtableautuples_level method)": [[348, "sage.combinat.tableau_tuple.RowStandardTableauTuples_level.an_element"]], "an_element() (sage.combinat.tableau_tuple.rowstandardtableautuples_level_size method)": [[348, "sage.combinat.tableau_tuple.RowStandardTableauTuples_level_size.an_element"]], "an_element() (sage.combinat.tableau_tuple.rowstandardtableautuples_residue method)": [[348, "sage.combinat.tableau_tuple.RowStandardTableauTuples_residue.an_element"]], "an_element() (sage.combinat.tableau_tuple.rowstandardtableautuples_shape method)": [[348, "sage.combinat.tableau_tuple.RowStandardTableauTuples_shape.an_element"]], "an_element() (sage.combinat.tableau_tuple.rowstandardtableautuples_size method)": [[348, "sage.combinat.tableau_tuple.RowStandardTableauTuples_size.an_element"]], "an_element() (sage.combinat.tableau_tuple.standardtableautuples_level method)": [[348, "sage.combinat.tableau_tuple.StandardTableauTuples_level.an_element"]], "an_element() (sage.combinat.tableau_tuple.standardtableautuples_level_size method)": [[348, "sage.combinat.tableau_tuple.StandardTableauTuples_level_size.an_element"]], "an_element() (sage.combinat.tableau_tuple.standardtableautuples_shape method)": [[348, "sage.combinat.tableau_tuple.StandardTableauTuples_shape.an_element"]], "an_element() (sage.combinat.tableau_tuple.standardtableautuples_size method)": [[348, "sage.combinat.tableau_tuple.StandardTableauTuples_size.an_element"]], "an_element() (sage.combinat.tableau_tuple.standardtableaux_residue_shape method)": [[348, "sage.combinat.tableau_tuple.StandardTableaux_residue_shape.an_element"]], "an_element() (sage.combinat.tableau_tuple.tableautuples_all method)": [[348, "sage.combinat.tableau_tuple.TableauTuples_all.an_element"]], "an_element() (sage.combinat.tableau_tuple.tableautuples_level method)": [[348, "sage.combinat.tableau_tuple.TableauTuples_level.an_element"]], "an_element() (sage.combinat.tableau_tuple.tableautuples_level_size method)": [[348, "sage.combinat.tableau_tuple.TableauTuples_level_size.an_element"]], "an_element() (sage.combinat.tableau_tuple.tableautuples_size method)": [[348, "sage.combinat.tableau_tuple.TableauTuples_size.an_element"]], "cardinality() (sage.combinat.tableau_tuple.rowstandardtableautuples_shape method)": [[348, "sage.combinat.tableau_tuple.RowStandardTableauTuples_shape.cardinality"]], "cardinality() (sage.combinat.tableau_tuple.standardtableautuples_level_size method)": [[348, "sage.combinat.tableau_tuple.StandardTableauTuples_level_size.cardinality"]], "cardinality() (sage.combinat.tableau_tuple.standardtableautuples_shape method)": [[348, "sage.combinat.tableau_tuple.StandardTableauTuples_shape.cardinality"]], "cells_containing() (sage.combinat.tableau_tuple.tableautuple method)": [[348, "sage.combinat.tableau_tuple.TableauTuple.cells_containing"]], "charge() (sage.combinat.tableau_tuple.tableautuple method)": [[348, "sage.combinat.tableau_tuple.TableauTuple.charge"]], "cocharge() (sage.combinat.tableau_tuple.tableautuple method)": [[348, "sage.combinat.tableau_tuple.TableauTuple.cocharge"]], "codegree() (sage.combinat.tableau_tuple.rowstandardtableautuple method)": [[348, "sage.combinat.tableau_tuple.RowStandardTableauTuple.codegree"]], "column_stabilizer() (sage.combinat.tableau_tuple.tableautuple method)": [[348, "sage.combinat.tableau_tuple.TableauTuple.column_stabilizer"]], "components() (sage.combinat.tableau_tuple.tableautuple method)": [[348, "sage.combinat.tableau_tuple.TableauTuple.components"]], "conjugate() (sage.combinat.tableau_tuple.tableautuple method)": [[348, "sage.combinat.tableau_tuple.TableauTuple.conjugate"]], "content() (sage.combinat.tableau_tuple.tableautuple method)": [[348, "sage.combinat.tableau_tuple.TableauTuple.content"]], "degree() (sage.combinat.tableau_tuple.rowstandardtableautuple method)": [[348, "sage.combinat.tableau_tuple.RowStandardTableauTuple.degree"]], "dominates() (sage.combinat.tableau_tuple.standardtableautuple method)": [[348, "sage.combinat.tableau_tuple.StandardTableauTuple.dominates"]], "entries() (sage.combinat.tableau_tuple.tableautuple method)": [[348, "sage.combinat.tableau_tuple.TableauTuple.entries"]], "entry() (sage.combinat.tableau_tuple.tableautuple method)": [[348, "sage.combinat.tableau_tuple.TableauTuple.entry"]], "first_column_descent() (sage.combinat.tableau_tuple.tableautuple method)": [[348, "sage.combinat.tableau_tuple.TableauTuple.first_column_descent"]], "first_row_descent() (sage.combinat.tableau_tuple.tableautuple method)": [[348, "sage.combinat.tableau_tuple.TableauTuple.first_row_descent"]], "inverse() (sage.combinat.tableau_tuple.rowstandardtableautuple method)": [[348, "sage.combinat.tableau_tuple.RowStandardTableauTuple.inverse"]], "is_column_strict() (sage.combinat.tableau_tuple.tableautuple method)": [[348, "sage.combinat.tableau_tuple.TableauTuple.is_column_strict"]], "is_row_strict() (sage.combinat.tableau_tuple.tableautuple method)": [[348, "sage.combinat.tableau_tuple.TableauTuple.is_row_strict"]], "is_standard() (sage.combinat.tableau_tuple.tableautuple method)": [[348, "sage.combinat.tableau_tuple.TableauTuple.is_standard"]], "last() (sage.combinat.tableau_tuple.standardtableautuples_shape method)": [[348, "sage.combinat.tableau_tuple.StandardTableauTuples_shape.last"]], "level() (sage.combinat.tableau_tuple.rowstandardtableautuples_residue method)": [[348, "sage.combinat.tableau_tuple.RowStandardTableauTuples_residue.level"]], "level() (sage.combinat.tableau_tuple.tableautuple method)": [[348, "sage.combinat.tableau_tuple.TableauTuple.level"]], "level() (sage.combinat.tableau_tuple.tableautuples method)": [[348, "sage.combinat.tableau_tuple.TableauTuples.level"]], "level_one_parent_class (sage.combinat.tableau_tuple.rowstandardtableautuples attribute)": [[348, "sage.combinat.tableau_tuple.RowStandardTableauTuples.level_one_parent_class"]], "level_one_parent_class (sage.combinat.tableau_tuple.standardtableautuples attribute)": [[348, "sage.combinat.tableau_tuple.StandardTableauTuples.level_one_parent_class"]], "level_one_parent_class (sage.combinat.tableau_tuple.tableautuples attribute)": [[348, "sage.combinat.tableau_tuple.TableauTuples.level_one_parent_class"]], "list() (sage.combinat.tableau_tuple.tableautuples method)": [[348, "sage.combinat.tableau_tuple.TableauTuples.list"]], "multicharge() (sage.combinat.tableau_tuple.rowstandardtableautuples_residue method)": [[348, "sage.combinat.tableau_tuple.RowStandardTableauTuples_residue.multicharge"]], "options (sage.combinat.tableau_tuple.tableautuples attribute)": [[348, "sage.combinat.tableau_tuple.TableauTuples.options"]], "pp() (sage.combinat.tableau_tuple.tableautuple method)": [[348, "sage.combinat.tableau_tuple.TableauTuple.pp"]], "quantum_characteristic() (sage.combinat.tableau_tuple.rowstandardtableautuples_residue method)": [[348, "sage.combinat.tableau_tuple.RowStandardTableauTuples_residue.quantum_characteristic"]], "random_element() (sage.combinat.tableau_tuple.standardtableautuples_shape method)": [[348, "sage.combinat.tableau_tuple.StandardTableauTuples_shape.random_element"]], "reduced_column_word() (sage.combinat.tableau_tuple.tableautuple method)": [[348, "sage.combinat.tableau_tuple.TableauTuple.reduced_column_word"]], "reduced_row_word() (sage.combinat.tableau_tuple.tableautuple method)": [[348, "sage.combinat.tableau_tuple.TableauTuple.reduced_row_word"]], "residue() (sage.combinat.tableau_tuple.tableautuple method)": [[348, "sage.combinat.tableau_tuple.TableauTuple.residue"]], "residue_sequence() (sage.combinat.tableau_tuple.rowstandardtableautuple method)": [[348, "sage.combinat.tableau_tuple.RowStandardTableauTuple.residue_sequence"]], "residue_sequence() (sage.combinat.tableau_tuple.rowstandardtableautuples_residue method)": [[348, "sage.combinat.tableau_tuple.RowStandardTableauTuples_residue.residue_sequence"]], "restrict() (sage.combinat.tableau_tuple.standardtableautuple method)": [[348, "sage.combinat.tableau_tuple.StandardTableauTuple.restrict"]], "restrict() (sage.combinat.tableau_tuple.tableautuple method)": [[348, "sage.combinat.tableau_tuple.TableauTuple.restrict"]], "row_stabilizer() (sage.combinat.tableau_tuple.tableautuple method)": [[348, "sage.combinat.tableau_tuple.TableauTuple.row_stabilizer"]], "sage.combinat.tableau_tuple": [[348, "module-sage.combinat.tableau_tuple"]], "shape() (sage.combinat.tableau_tuple.rowstandardtableautuples method)": [[348, "sage.combinat.tableau_tuple.RowStandardTableauTuples.shape"]], "shape() (sage.combinat.tableau_tuple.standardtableautuples method)": [[348, "sage.combinat.tableau_tuple.StandardTableauTuples.shape"]], "shape() (sage.combinat.tableau_tuple.tableautuple method)": [[348, "sage.combinat.tableau_tuple.TableauTuple.shape"]], "size() (sage.combinat.tableau_tuple.rowstandardtableautuples_residue method)": [[348, "sage.combinat.tableau_tuple.RowStandardTableauTuples_residue.size"]], "size() (sage.combinat.tableau_tuple.tableautuple method)": [[348, "sage.combinat.tableau_tuple.TableauTuple.size"]], "size() (sage.combinat.tableau_tuple.tableautuples method)": [[348, "sage.combinat.tableau_tuple.TableauTuples.size"]], "symmetric_group_action_on_entries() (sage.combinat.tableau_tuple.tableautuple method)": [[348, "sage.combinat.tableau_tuple.TableauTuple.symmetric_group_action_on_entries"]], "to_chain() (sage.combinat.tableau_tuple.standardtableautuple method)": [[348, "sage.combinat.tableau_tuple.StandardTableauTuple.to_chain"]], "to_list() (sage.combinat.tableau_tuple.tableautuple method)": [[348, "sage.combinat.tableau_tuple.TableauTuple.to_list"]], "to_permutation() (sage.combinat.tableau_tuple.tableautuple method)": [[348, "sage.combinat.tableau_tuple.TableauTuple.to_permutation"]], "to_word() (sage.combinat.tableau_tuple.tableautuple method)": [[348, "sage.combinat.tableau_tuple.TableauTuple.to_word"]], "to_word_by_column() (sage.combinat.tableau_tuple.tableautuple method)": [[348, "sage.combinat.tableau_tuple.TableauTuple.to_word_by_column"]], "to_word_by_row() (sage.combinat.tableau_tuple.tableautuple method)": [[348, "sage.combinat.tableau_tuple.TableauTuple.to_word_by_row"]], "up() (sage.combinat.tableau_tuple.tableautuple method)": [[348, "sage.combinat.tableau_tuple.TableauTuple.up"]], "dextersemilattice() (in module sage.combinat.tamari_lattices)": [[349, "sage.combinat.tamari_lattices.DexterSemilattice"]], "generalizedtamarilattice() (in module sage.combinat.tamari_lattices)": [[349, "sage.combinat.tamari_lattices.GeneralizedTamariLattice"]], "tamarilattice() (in module sage.combinat.tamari_lattices)": [[349, "sage.combinat.tamari_lattices.TamariLattice"]], "paths_in_triangle() (in module sage.combinat.tamari_lattices)": [[349, "sage.combinat.tamari_lattices.paths_in_triangle"]], "sage.combinat.tamari_lattices": [[349, "module-sage.combinat.tamari_lattices"]], "swap() (in module sage.combinat.tamari_lattices)": [[349, "sage.combinat.tamari_lattices.swap"]], "swap_dexter() (in module sage.combinat.tamari_lattices)": [[349, "sage.combinat.tamari_lattices.swap_dexter"]], "polyomino (class in sage.combinat.tiling)": [[350, "sage.combinat.tiling.Polyomino"]], "tilingsolver (class in sage.combinat.tiling)": [[350, "sage.combinat.tiling.TilingSolver"]], "animate() (sage.combinat.tiling.tilingsolver method)": [[350, "sage.combinat.tiling.TilingSolver.animate"]], "boundary() (sage.combinat.tiling.polyomino method)": [[350, "sage.combinat.tiling.Polyomino.boundary"]], "bounding_box() (sage.combinat.tiling.polyomino method)": [[350, "sage.combinat.tiling.Polyomino.bounding_box"]], "canonical() (sage.combinat.tiling.polyomino method)": [[350, "sage.combinat.tiling.Polyomino.canonical"]], "canonical_isometric_copies() (sage.combinat.tiling.polyomino method)": [[350, "sage.combinat.tiling.Polyomino.canonical_isometric_copies"]], "center() (sage.combinat.tiling.polyomino method)": [[350, "sage.combinat.tiling.Polyomino.center"]], "color() (sage.combinat.tiling.polyomino method)": [[350, "sage.combinat.tiling.Polyomino.color"]], "coord_to_int_dict() (sage.combinat.tiling.tilingsolver method)": [[350, "sage.combinat.tiling.TilingSolver.coord_to_int_dict"]], "dlx_solver() (sage.combinat.tiling.tilingsolver method)": [[350, "sage.combinat.tiling.TilingSolver.dlx_solver"]], "frozenset() (sage.combinat.tiling.polyomino method)": [[350, "sage.combinat.tiling.Polyomino.frozenset"]], "int_to_coord_dict() (sage.combinat.tiling.tilingsolver method)": [[350, "sage.combinat.tiling.TilingSolver.int_to_coord_dict"]], "intersection() (sage.combinat.tiling.polyomino method)": [[350, "sage.combinat.tiling.Polyomino.intersection"]], "is_suitable() (sage.combinat.tiling.tilingsolver method)": [[350, "sage.combinat.tiling.TilingSolver.is_suitable"]], "isometric_copies() (sage.combinat.tiling.polyomino method)": [[350, "sage.combinat.tiling.Polyomino.isometric_copies"]], "isometric_copies_intersection() (sage.combinat.tiling.polyomino method)": [[350, "sage.combinat.tiling.Polyomino.isometric_copies_intersection"]], "ncube_isometry_group() (in module sage.combinat.tiling)": [[350, "sage.combinat.tiling.ncube_isometry_group"]], "ncube_isometry_group_cosets() (in module sage.combinat.tiling)": [[350, "sage.combinat.tiling.ncube_isometry_group_cosets"]], "neighbor_edges() (sage.combinat.tiling.polyomino method)": [[350, "sage.combinat.tiling.Polyomino.neighbor_edges"]], "nrows_per_piece() (sage.combinat.tiling.tilingsolver method)": [[350, "sage.combinat.tiling.TilingSolver.nrows_per_piece"]], "number_of_solutions() (sage.combinat.tiling.tilingsolver method)": [[350, "sage.combinat.tiling.TilingSolver.number_of_solutions"]], "pieces() (sage.combinat.tiling.tilingsolver method)": [[350, "sage.combinat.tiling.TilingSolver.pieces"]], "row_to_polyomino() (sage.combinat.tiling.tilingsolver method)": [[350, "sage.combinat.tiling.TilingSolver.row_to_polyomino"]], "rows() (sage.combinat.tiling.tilingsolver method)": [[350, "sage.combinat.tiling.TilingSolver.rows"]], "rows_for_piece() (sage.combinat.tiling.tilingsolver method)": [[350, "sage.combinat.tiling.TilingSolver.rows_for_piece"]], "sage.combinat.tiling": [[350, "module-sage.combinat.tiling"]], "self_surrounding() (sage.combinat.tiling.polyomino method)": [[350, "sage.combinat.tiling.Polyomino.self_surrounding"]], "show2d() (sage.combinat.tiling.polyomino method)": [[350, "sage.combinat.tiling.Polyomino.show2d"]], "show3d() (sage.combinat.tiling.polyomino method)": [[350, "sage.combinat.tiling.Polyomino.show3d"]], "solve() (sage.combinat.tiling.tilingsolver method)": [[350, "sage.combinat.tiling.TilingSolver.solve"]], "sorted_list() (sage.combinat.tiling.polyomino method)": [[350, "sage.combinat.tiling.Polyomino.sorted_list"]], "space() (sage.combinat.tiling.tilingsolver method)": [[350, "sage.combinat.tiling.TilingSolver.space"]], "starting_rows() (sage.combinat.tiling.tilingsolver method)": [[350, "sage.combinat.tiling.TilingSolver.starting_rows"]], "translated_copies() (sage.combinat.tiling.polyomino method)": [[350, "sage.combinat.tiling.Polyomino.translated_copies"]], "translated_copies_intersection() (sage.combinat.tiling.polyomino method)": [[350, "sage.combinat.tiling.Polyomino.translated_copies_intersection"]], "sage.combinat.tools": [[351, "module-sage.combinat.tools"]], "transitive_ideal() (in module sage.combinat.tools)": [[351, "sage.combinat.tools.transitive_ideal"]], "f_triangle (class in sage.combinat.triangles_fhm)": [[352, "sage.combinat.triangles_FHM.F_triangle"]], "gamma_triangle (class in sage.combinat.triangles_fhm)": [[352, "sage.combinat.triangles_FHM.Gamma_triangle"]], "h_triangle (class in sage.combinat.triangles_fhm)": [[352, "sage.combinat.triangles_FHM.H_triangle"]], "m_triangle (class in sage.combinat.triangles_fhm)": [[352, "sage.combinat.triangles_FHM.M_triangle"]], "triangle (class in sage.combinat.triangles_fhm)": [[352, "sage.combinat.triangles_FHM.Triangle"]], "dual() (sage.combinat.triangles_fhm.m_triangle method)": [[352, "sage.combinat.triangles_FHM.M_triangle.dual"]], "f() (sage.combinat.triangles_fhm.h_triangle method)": [[352, "sage.combinat.triangles_FHM.H_triangle.f"]], "f() (sage.combinat.triangles_fhm.m_triangle method)": [[352, "sage.combinat.triangles_FHM.M_triangle.f"]], "gamma() (sage.combinat.triangles_fhm.h_triangle method)": [[352, "sage.combinat.triangles_FHM.H_triangle.gamma"]], "h() (sage.combinat.triangles_fhm.f_triangle method)": [[352, "sage.combinat.triangles_FHM.F_triangle.h"]], "h() (sage.combinat.triangles_fhm.gamma_triangle method)": [[352, "sage.combinat.triangles_FHM.Gamma_triangle.h"]], "h() (sage.combinat.triangles_fhm.m_triangle method)": [[352, "sage.combinat.triangles_FHM.M_triangle.h"]], "m() (sage.combinat.triangles_fhm.f_triangle method)": [[352, "sage.combinat.triangles_FHM.F_triangle.m"]], "m() (sage.combinat.triangles_fhm.h_triangle method)": [[352, "sage.combinat.triangles_FHM.H_triangle.m"]], "matrix() (sage.combinat.triangles_fhm.triangle method)": [[352, "sage.combinat.triangles_FHM.Triangle.matrix"]], "polynomial() (sage.combinat.triangles_fhm.triangle method)": [[352, "sage.combinat.triangles_FHM.Triangle.polynomial"]], "sage.combinat.triangles_fhm": [[352, "module-sage.combinat.triangles_FHM"]], "transmute() (sage.combinat.triangles_fhm.m_triangle method)": [[352, "sage.combinat.triangles_FHM.M_triangle.transmute"]], "transpose() (sage.combinat.triangles_fhm.h_triangle method)": [[352, "sage.combinat.triangles_FHM.H_triangle.transpose"]], "truncate() (sage.combinat.triangles_fhm.triangle method)": [[352, "sage.combinat.triangles_FHM.Triangle.truncate"]], "vector() (sage.combinat.triangles_fhm.f_triangle method)": [[352, "sage.combinat.triangles_FHM.F_triangle.vector"]], "vector() (sage.combinat.triangles_fhm.gamma_triangle method)": [[352, "sage.combinat.triangles_FHM.Gamma_triangle.vector"]], "vector() (sage.combinat.triangles_fhm.h_triangle method)": [[352, "sage.combinat.triangles_FHM.H_triangle.vector"]], "tuples (class in sage.combinat.tuple)": [[353, "sage.combinat.tuple.Tuples"]], "tuples_sk (in module sage.combinat.tuple)": [[353, "sage.combinat.tuple.Tuples_sk"]], "unorderedtuples (class in sage.combinat.tuple)": [[353, "sage.combinat.tuple.UnorderedTuples"]], "unorderedtuples_sk (in module sage.combinat.tuple)": [[353, "sage.combinat.tuple.UnorderedTuples_sk"]], "cardinality() (sage.combinat.tuple.tuples method)": [[353, "sage.combinat.tuple.Tuples.cardinality"]], "cardinality() (sage.combinat.tuple.unorderedtuples method)": [[353, "sage.combinat.tuple.UnorderedTuples.cardinality"]], "sage.combinat.tuple": [[353, "module-sage.combinat.tuple"]], "sage.combinat.tutorial": [[354, "module-sage.combinat.tutorial"]], "element (sage.combinat.vector_partition.vectorpartitions attribute)": [[355, "sage.combinat.vector_partition.VectorPartitions.Element"]], "integervectorsiterator() (in module sage.combinat.vector_partition)": [[355, "sage.combinat.vector_partition.IntegerVectorsIterator"]], "vectorpartition (class in sage.combinat.vector_partition)": [[355, "sage.combinat.vector_partition.VectorPartition"]], "vectorpartitions (class in sage.combinat.vector_partition)": [[355, "sage.combinat.vector_partition.VectorPartitions"]], "find_min() (in module sage.combinat.vector_partition)": [[355, "sage.combinat.vector_partition.find_min"]], "partition_at_vertex() (sage.combinat.vector_partition.vectorpartition method)": [[355, "sage.combinat.vector_partition.VectorPartition.partition_at_vertex"]], "sage.combinat.vector_partition": [[355, "module-sage.combinat.vector_partition"]], "sum() (sage.combinat.vector_partition.vectorpartition method)": [[355, "sage.combinat.vector_partition.VectorPartition.sum"]], "word_class (class in sage.combinat.words.abstract_word)": [[356, "sage.combinat.words.abstract_word.Word_class"]], "apply_morphism() (sage.combinat.words.abstract_word.word_class method)": [[356, "sage.combinat.words.abstract_word.Word_class.apply_morphism"]], "complete_return_words_iterator() (sage.combinat.words.abstract_word.word_class method)": [[356, "sage.combinat.words.abstract_word.Word_class.complete_return_words_iterator"]], "delta() (sage.combinat.words.abstract_word.word_class method)": [[356, "sage.combinat.words.abstract_word.Word_class.delta"]], "factor_occurrences_iterator() (sage.combinat.words.abstract_word.word_class method)": [[356, "sage.combinat.words.abstract_word.Word_class.factor_occurrences_iterator"]], "finite_differences() (sage.combinat.words.abstract_word.word_class method)": [[356, "sage.combinat.words.abstract_word.Word_class.finite_differences"]], "first_occurrence() (sage.combinat.words.abstract_word.word_class method)": [[356, "sage.combinat.words.abstract_word.Word_class.first_occurrence"]], "is_empty() (sage.combinat.words.abstract_word.word_class method)": [[356, "sage.combinat.words.abstract_word.Word_class.is_empty"]], "is_finite() (sage.combinat.words.abstract_word.word_class method)": [[356, "sage.combinat.words.abstract_word.Word_class.is_finite"]], "iterated_right_palindromic_closure() (sage.combinat.words.abstract_word.word_class method)": [[356, "sage.combinat.words.abstract_word.Word_class.iterated_right_palindromic_closure"]], "length() (sage.combinat.words.abstract_word.word_class method)": [[356, "sage.combinat.words.abstract_word.Word_class.length"]], "lex_greater() (sage.combinat.words.abstract_word.word_class method)": [[356, "sage.combinat.words.abstract_word.Word_class.lex_greater"]], "lex_less() (sage.combinat.words.abstract_word.word_class method)": [[356, "sage.combinat.words.abstract_word.Word_class.lex_less"]], "longest_common_prefix() (sage.combinat.words.abstract_word.word_class method)": [[356, "sage.combinat.words.abstract_word.Word_class.longest_common_prefix"]], "longest_periodic_prefix() (sage.combinat.words.abstract_word.word_class method)": [[356, "sage.combinat.words.abstract_word.Word_class.longest_periodic_prefix"]], "palindrome_prefixes_iterator() (sage.combinat.words.abstract_word.word_class method)": [[356, "sage.combinat.words.abstract_word.Word_class.palindrome_prefixes_iterator"]], "parent() (sage.combinat.words.abstract_word.word_class method)": [[356, "sage.combinat.words.abstract_word.Word_class.parent"]], "partial_sums() (sage.combinat.words.abstract_word.word_class method)": [[356, "sage.combinat.words.abstract_word.Word_class.partial_sums"]], "prefixes_iterator() (sage.combinat.words.abstract_word.word_class method)": [[356, "sage.combinat.words.abstract_word.Word_class.prefixes_iterator"]], "return_words_iterator() (sage.combinat.words.abstract_word.word_class method)": [[356, "sage.combinat.words.abstract_word.Word_class.return_words_iterator"]], "sage.combinat.words.abstract_word": [[356, "module-sage.combinat.words.abstract_word"]], "string_rep() (sage.combinat.words.abstract_word.word_class method)": [[356, "sage.combinat.words.abstract_word.Word_class.string_rep"]], "sum_digits() (sage.combinat.words.abstract_word.word_class method)": [[356, "sage.combinat.words.abstract_word.Word_class.sum_digits"]], "to_integer_word() (sage.combinat.words.abstract_word.word_class method)": [[356, "sage.combinat.words.abstract_word.Word_class.to_integer_word"]], "sage.combinat.words.all": [[357, "module-sage.combinat.words.all"]], "alphabet() (in module sage.combinat.words.alphabet)": [[358, "sage.combinat.words.alphabet.Alphabet"]], "build_alphabet() (in module sage.combinat.words.alphabet)": [[358, "sage.combinat.words.alphabet.build_alphabet"]], "sage.combinat.words.alphabet": [[358, "module-sage.combinat.words.alphabet"]], "bwt() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.BWT"]], "callablefromlistofwords (class in sage.combinat.words.finite_word)": [[359, "sage.combinat.words.finite_word.CallableFromListOfWords"]], "factorization (class in sage.combinat.words.finite_word)": [[359, "sage.combinat.words.finite_word.Factorization"]], "finiteword_class (class in sage.combinat.words.finite_word)": [[359, "sage.combinat.words.finite_word.FiniteWord_class"]], "lz_decomposition() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.LZ_decomposition"]], "abelian_complexity() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.abelian_complexity"]], "abelian_vector() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.abelian_vector"]], "abelian_vectors() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.abelian_vectors"]], "apply_permutation_to_letters() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.apply_permutation_to_letters"]], "apply_permutation_to_positions() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.apply_permutation_to_positions"]], "balance() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.balance"]], "bispecial_factors() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.bispecial_factors"]], "bispecial_factors_iterator() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.bispecial_factors_iterator"]], "border() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.border"]], "charge() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.charge"]], "cocharge() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.cocharge"]], "coerce() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.coerce"]], "colored_vector() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.colored_vector"]], "commutes_with() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.commutes_with"]], "complete_return_words() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.complete_return_words"]], "concatenate() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.concatenate"]], "conjugate() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.conjugate"]], "conjugate_position() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.conjugate_position"]], "conjugates() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.conjugates"]], "conjugates_iterator() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.conjugates_iterator"]], "content() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.content"]], "count() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.count"]], "critical_exponent() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.critical_exponent"]], "crochemore_factorization() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.crochemore_factorization"]], "defect() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.defect"]], "deg_inv_lex_less() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.deg_inv_lex_less"]], "deg_lex_less() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.deg_lex_less"]], "deg_rev_lex_less() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.deg_rev_lex_less"]], "degree() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.degree"]], "delta() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.delta"]], "delta_derivate() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.delta_derivate"]], "delta_derivate_left() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.delta_derivate_left"]], "delta_derivate_right() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.delta_derivate_right"]], "delta_inv() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.delta_inv"]], "evaluation() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.evaluation"]], "evaluation_dict() (in module sage.combinat.words.finite_word)": [[359, "sage.combinat.words.finite_word.evaluation_dict"]], "evaluation_dict() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.evaluation_dict"]], "evaluation_partition() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.evaluation_partition"]], "evaluation_sparse() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.evaluation_sparse"]], "exponent() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.exponent"]], "factor_complexity() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.factor_complexity"]], "factor_iterator() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.factor_iterator"]], "factor_occurrences_in() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.factor_occurrences_in"]], "factor_set() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.factor_set"]], "find() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.find"]], "first_pos_in() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.first_pos_in"]], "foata_bijection() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.foata_bijection"]], "good_suffix_table() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.good_suffix_table"]], "has_period() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.has_period"]], "has_prefix() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.has_prefix"]], "has_suffix() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.has_suffix"]], "implicit_suffix_tree() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.implicit_suffix_tree"]], "inv_lex_less() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.inv_lex_less"]], "inversions() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.inversions"]], "is_balanced() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.is_balanced"]], "is_cadence() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.is_cadence"]], "is_christoffel() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.is_christoffel"]], "is_conjugate_with() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.is_conjugate_with"]], "is_cube() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.is_cube"]], "is_cube_free() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.is_cube_free"]], "is_empty() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.is_empty"]], "is_factor() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.is_factor"]], "is_finite() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.is_finite"]], "is_full() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.is_full"]], "is_lyndon() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.is_lyndon"]], "is_overlap() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.is_overlap"]], "is_palindrome() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.is_palindrome"]], "is_prefix() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.is_prefix"]], "is_primitive() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.is_primitive"]], "is_proper_prefix() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.is_proper_prefix"]], "is_proper_suffix() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.is_proper_suffix"]], "is_quasiperiodic() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.is_quasiperiodic"]], "is_rich() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.is_rich"]], "is_smooth_prefix() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.is_smooth_prefix"]], "is_square() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.is_square"]], "is_square_free() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.is_square_free"]], "is_sturmian_factor() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.is_sturmian_factor"]], "is_subword_of() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.is_subword_of"]], "is_suffix() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.is_suffix"]], "is_symmetric() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.is_symmetric"]], "is_tangent() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.is_tangent"]], "is_yamanouchi() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.is_yamanouchi"]], "iterated_left_palindromic_closure() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.iterated_left_palindromic_closure"]], "lacunas() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.lacunas"]], "last_position_dict() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.last_position_dict"]], "left_special_factors() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.left_special_factors"]], "left_special_factors_iterator() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.left_special_factors_iterator"]], "length() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.length"]], "length_border() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.length_border"]], "length_maximal_palindrome() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.length_maximal_palindrome"]], "lengths_maximal_palindromes() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.lengths_maximal_palindromes"]], "lengths_unioccurrent_lps() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.lengths_unioccurrent_lps"]], "letters() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.letters"]], "longest_backward_extension() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.longest_backward_extension"]], "longest_common_subword() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.longest_common_subword"]], "longest_common_suffix() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.longest_common_suffix"]], "longest_forward_extension() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.longest_forward_extension"]], "lps() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.lps"]], "lps_lengths() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.lps_lengths"]], "lyndon_factorization() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.lyndon_factorization"]], "major_index() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.major_index"]], "minimal_conjugate() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.minimal_conjugate"]], "minimal_period() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.minimal_period"]], "nb_factor_occurrences_in() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.nb_factor_occurrences_in"]], "nb_subword_occurrences_in() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.nb_subword_occurrences_in"]], "number_of_factor_occurrences() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.number_of_factor_occurrences"]], "number_of_factors() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.number_of_factors"]], "number_of_inversions() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.number_of_inversions"]], "number_of_left_special_factors() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.number_of_left_special_factors"]], "number_of_letter_occurrences() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.number_of_letter_occurrences"]], "number_of_right_special_factors() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.number_of_right_special_factors"]], "number_of_subword_occurrences() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.number_of_subword_occurrences"]], "order() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.order"]], "overlap_partition() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.overlap_partition"]], "palindrome_prefixes() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.palindrome_prefixes"]], "palindromes() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.palindromes"]], "palindromic_closure() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.palindromic_closure"]], "palindromic_complexity() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.palindromic_complexity"]], "palindromic_lacunas_study() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.palindromic_lacunas_study"]], "periods() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.periods"]], "phi() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.phi"]], "phi_inv() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.phi_inv"]], "prefix_function_table() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.prefix_function_table"]], "primitive() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.primitive"]], "primitive_length() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.primitive_length"]], "quasiperiods() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.quasiperiods"]], "rauzy_graph() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.rauzy_graph"]], "reduced_rauzy_graph() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.reduced_rauzy_graph"]], "return_words() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.return_words"]], "return_words_derivate() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.return_words_derivate"]], "rev_lex_less() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.rev_lex_less"]], "reversal() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.reversal"]], "rfind() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.rfind"]], "right_special_factors() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.right_special_factors"]], "right_special_factors_iterator() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.right_special_factors_iterator"]], "robinson_schensted() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.robinson_schensted"]], "sage.combinat.words.finite_word": [[359, "module-sage.combinat.words.finite_word"]], "schuetzenberger_involution() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.schuetzenberger_involution"]], "shifted_shuffle() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.shifted_shuffle"]], "shuffle() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.shuffle"]], "squares() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.squares"]], "standard_factorization() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.standard_factorization"]], "standard_permutation() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.standard_permutation"]], "sturmian_desubstitute_as_possible() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.sturmian_desubstitute_as_possible"]], "subword_complementaries() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.subword_complementaries"]], "suffix_tree() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.suffix_tree"]], "suffix_trie() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.suffix_trie"]], "swap() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.swap"]], "swap_decrease() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.swap_decrease"]], "swap_increase() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.swap_increase"]], "to_integer_list() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.to_integer_list"]], "to_integer_word() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.to_integer_word"]], "to_monoid_element() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.to_monoid_element"]], "to_ordered_set_partition() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.to_ordered_set_partition"]], "topological_entropy() (sage.combinat.words.finite_word.finiteword_class method)": [[359, "sage.combinat.words.finite_word.FiniteWord_class.topological_entropy"]], "word_to_ordered_set_partition() (in module sage.combinat.words.finite_word)": [[359, "sage.combinat.words.finite_word.word_to_ordered_set_partition"]], "infiniteword_class (class in sage.combinat.words.infinite_word)": [[360, "sage.combinat.words.infinite_word.InfiniteWord_class"]], "length() (sage.combinat.words.infinite_word.infiniteword_class method)": [[360, "sage.combinat.words.infinite_word.InfiniteWord_class.length"]], "sage.combinat.words.infinite_word": [[360, "module-sage.combinat.words.infinite_word"]], "lyndonword() (in module sage.combinat.words.lyndon_word)": [[361, "sage.combinat.words.lyndon_word.LyndonWord"]], "lyndonwords() (in module sage.combinat.words.lyndon_word)": [[361, "sage.combinat.words.lyndon_word.LyndonWords"]], "lyndonwords_class (class in sage.combinat.words.lyndon_word)": [[361, "sage.combinat.words.lyndon_word.LyndonWords_class"]], "lyndonwords_evaluation (class in sage.combinat.words.lyndon_word)": [[361, "sage.combinat.words.lyndon_word.LyndonWords_evaluation"]], "lyndonwords_nk (class in sage.combinat.words.lyndon_word)": [[361, "sage.combinat.words.lyndon_word.LyndonWords_nk"]], "standardbracketedlyndonwords() (in module sage.combinat.words.lyndon_word)": [[361, "sage.combinat.words.lyndon_word.StandardBracketedLyndonWords"]], "standardbracketedlyndonwords_nk (class in sage.combinat.words.lyndon_word)": [[361, "sage.combinat.words.lyndon_word.StandardBracketedLyndonWords_nk"]], "cardinality() (sage.combinat.words.lyndon_word.lyndonwords_evaluation method)": [[361, "sage.combinat.words.lyndon_word.LyndonWords_evaluation.cardinality"]], "cardinality() (sage.combinat.words.lyndon_word.lyndonwords_nk method)": [[361, "sage.combinat.words.lyndon_word.LyndonWords_nk.cardinality"]], "cardinality() (sage.combinat.words.lyndon_word.standardbracketedlyndonwords_nk method)": [[361, "sage.combinat.words.lyndon_word.StandardBracketedLyndonWords_nk.cardinality"]], "sage.combinat.words.lyndon_word": [[361, "module-sage.combinat.words.lyndon_word"]], "standard_bracketing() (in module sage.combinat.words.lyndon_word)": [[361, "sage.combinat.words.lyndon_word.standard_bracketing"]], "standard_unbracketing() (in module sage.combinat.words.lyndon_word)": [[361, "sage.combinat.words.lyndon_word.standard_unbracketing"]], "periodicpointiterator (class in sage.combinat.words.morphism)": [[362, "sage.combinat.words.morphism.PeriodicPointIterator"]], "wordmorphism (class in sage.combinat.words.morphism)": [[362, "sage.combinat.words.morphism.WordMorphism"]], "abelian_rotation_subspace() (sage.combinat.words.morphism.wordmorphism method)": [[362, "sage.combinat.words.morphism.WordMorphism.abelian_rotation_subspace"]], "codomain() (sage.combinat.words.morphism.wordmorphism method)": [[362, "sage.combinat.words.morphism.WordMorphism.codomain"]], "conjugate() (sage.combinat.words.morphism.wordmorphism method)": [[362, "sage.combinat.words.morphism.WordMorphism.conjugate"]], "domain() (sage.combinat.words.morphism.wordmorphism method)": [[362, "sage.combinat.words.morphism.WordMorphism.domain"]], "dual_map() (sage.combinat.words.morphism.wordmorphism method)": [[362, "sage.combinat.words.morphism.WordMorphism.dual_map"]], "extend_by() (sage.combinat.words.morphism.wordmorphism method)": [[362, "sage.combinat.words.morphism.WordMorphism.extend_by"]], "fixed_point() (sage.combinat.words.morphism.wordmorphism method)": [[362, "sage.combinat.words.morphism.WordMorphism.fixed_point"]], "fixed_points() (sage.combinat.words.morphism.wordmorphism method)": [[362, "sage.combinat.words.morphism.WordMorphism.fixed_points"]], "get_cycles() (in module sage.combinat.words.morphism)": [[362, "sage.combinat.words.morphism.get_cycles"]], "get_iterator() (sage.combinat.words.morphism.periodicpointiterator method)": [[362, "sage.combinat.words.morphism.PeriodicPointIterator.get_iterator"]], "growing_letters() (sage.combinat.words.morphism.wordmorphism method)": [[362, "sage.combinat.words.morphism.WordMorphism.growing_letters"]], "has_conjugate_in_classp() (sage.combinat.words.morphism.wordmorphism method)": [[362, "sage.combinat.words.morphism.WordMorphism.has_conjugate_in_classP"]], "has_left_conjugate() (sage.combinat.words.morphism.wordmorphism method)": [[362, "sage.combinat.words.morphism.WordMorphism.has_left_conjugate"]], "has_right_conjugate() (sage.combinat.words.morphism.wordmorphism method)": [[362, "sage.combinat.words.morphism.WordMorphism.has_right_conjugate"]], "image() (sage.combinat.words.morphism.wordmorphism method)": [[362, "sage.combinat.words.morphism.WordMorphism.image"]], "images() (sage.combinat.words.morphism.wordmorphism method)": [[362, "sage.combinat.words.morphism.WordMorphism.images"]], "immortal_letters() (sage.combinat.words.morphism.wordmorphism method)": [[362, "sage.combinat.words.morphism.WordMorphism.immortal_letters"]], "incidence_matrix() (sage.combinat.words.morphism.wordmorphism method)": [[362, "sage.combinat.words.morphism.WordMorphism.incidence_matrix"]], "infinite_repetitions_primitive_roots() (sage.combinat.words.morphism.wordmorphism method)": [[362, "sage.combinat.words.morphism.WordMorphism.infinite_repetitions_primitive_roots"]], "is_empty() (sage.combinat.words.morphism.wordmorphism method)": [[362, "sage.combinat.words.morphism.WordMorphism.is_empty"]], "is_endomorphism() (sage.combinat.words.morphism.wordmorphism method)": [[362, "sage.combinat.words.morphism.WordMorphism.is_endomorphism"]], "is_erasing() (sage.combinat.words.morphism.wordmorphism method)": [[362, "sage.combinat.words.morphism.WordMorphism.is_erasing"]], "is_growing() (sage.combinat.words.morphism.wordmorphism method)": [[362, "sage.combinat.words.morphism.WordMorphism.is_growing"]], "is_identity() (sage.combinat.words.morphism.wordmorphism method)": [[362, "sage.combinat.words.morphism.WordMorphism.is_identity"]], "is_in_classp() (sage.combinat.words.morphism.wordmorphism method)": [[362, "sage.combinat.words.morphism.WordMorphism.is_in_classP"]], "is_injective() (sage.combinat.words.morphism.wordmorphism method)": [[362, "sage.combinat.words.morphism.WordMorphism.is_injective"]], "is_involution() (sage.combinat.words.morphism.wordmorphism method)": [[362, "sage.combinat.words.morphism.WordMorphism.is_involution"]], "is_primitive() (sage.combinat.words.morphism.wordmorphism method)": [[362, "sage.combinat.words.morphism.WordMorphism.is_primitive"]], "is_prolongable() (sage.combinat.words.morphism.wordmorphism method)": [[362, "sage.combinat.words.morphism.WordMorphism.is_prolongable"]], "is_pushy() (sage.combinat.words.morphism.wordmorphism method)": [[362, "sage.combinat.words.morphism.WordMorphism.is_pushy"]], "is_repetitive() (sage.combinat.words.morphism.wordmorphism method)": [[362, "sage.combinat.words.morphism.WordMorphism.is_repetitive"]], "is_self_composable() (sage.combinat.words.morphism.wordmorphism method)": [[362, "sage.combinat.words.morphism.WordMorphism.is_self_composable"]], "is_unboundedly_repetitive() (sage.combinat.words.morphism.wordmorphism method)": [[362, "sage.combinat.words.morphism.WordMorphism.is_unboundedly_repetitive"]], "is_uniform() (sage.combinat.words.morphism.wordmorphism method)": [[362, "sage.combinat.words.morphism.WordMorphism.is_uniform"]], "language() (sage.combinat.words.morphism.wordmorphism method)": [[362, "sage.combinat.words.morphism.WordMorphism.language"]], "latex_layout() (sage.combinat.words.morphism.wordmorphism method)": [[362, "sage.combinat.words.morphism.WordMorphism.latex_layout"]], "letter_growth_types() (sage.combinat.words.morphism.wordmorphism method)": [[362, "sage.combinat.words.morphism.WordMorphism.letter_growth_types"]], "list_of_conjugates() (sage.combinat.words.morphism.wordmorphism method)": [[362, "sage.combinat.words.morphism.WordMorphism.list_of_conjugates"]], "partition_of_domain_alphabet() (sage.combinat.words.morphism.wordmorphism method)": [[362, "sage.combinat.words.morphism.WordMorphism.partition_of_domain_alphabet"]], "periodic_point() (sage.combinat.words.morphism.wordmorphism method)": [[362, "sage.combinat.words.morphism.WordMorphism.periodic_point"]], "periodic_points() (sage.combinat.words.morphism.wordmorphism method)": [[362, "sage.combinat.words.morphism.WordMorphism.periodic_points"]], "pisot_eigenvector_left() (sage.combinat.words.morphism.wordmorphism method)": [[362, "sage.combinat.words.morphism.WordMorphism.pisot_eigenvector_left"]], "pisot_eigenvector_right() (sage.combinat.words.morphism.wordmorphism method)": [[362, "sage.combinat.words.morphism.WordMorphism.pisot_eigenvector_right"]], "rauzy_fractal_plot() (sage.combinat.words.morphism.wordmorphism method)": [[362, "sage.combinat.words.morphism.WordMorphism.rauzy_fractal_plot"]], "rauzy_fractal_points() (sage.combinat.words.morphism.wordmorphism method)": [[362, "sage.combinat.words.morphism.WordMorphism.rauzy_fractal_points"]], "rauzy_fractal_projection() (sage.combinat.words.morphism.wordmorphism method)": [[362, "sage.combinat.words.morphism.WordMorphism.rauzy_fractal_projection"]], "restrict_domain() (sage.combinat.words.morphism.wordmorphism method)": [[362, "sage.combinat.words.morphism.WordMorphism.restrict_domain"]], "reversal() (sage.combinat.words.morphism.wordmorphism method)": [[362, "sage.combinat.words.morphism.WordMorphism.reversal"]], "sage.combinat.words.morphism": [[362, "module-sage.combinat.words.morphism"]], "simplify_alphabet_size() (sage.combinat.words.morphism.wordmorphism method)": [[362, "sage.combinat.words.morphism.WordMorphism.simplify_alphabet_size"]], "simplify_until_injective() (sage.combinat.words.morphism.wordmorphism method)": [[362, "sage.combinat.words.morphism.WordMorphism.simplify_until_injective"]], "finitewordpath_2d (class in sage.combinat.words.paths)": [[363, "sage.combinat.words.paths.FiniteWordPath_2d"]], "finitewordpath_2d_callable (class in sage.combinat.words.paths)": [[363, "sage.combinat.words.paths.FiniteWordPath_2d_callable"]], "finitewordpath_2d_callable_with_caching (class in sage.combinat.words.paths)": [[363, "sage.combinat.words.paths.FiniteWordPath_2d_callable_with_caching"]], "finitewordpath_2d_iter (class in sage.combinat.words.paths)": [[363, "sage.combinat.words.paths.FiniteWordPath_2d_iter"]], "finitewordpath_2d_iter_with_caching (class in sage.combinat.words.paths)": [[363, "sage.combinat.words.paths.FiniteWordPath_2d_iter_with_caching"]], "finitewordpath_2d_list (class in sage.combinat.words.paths)": [[363, "sage.combinat.words.paths.FiniteWordPath_2d_list"]], "finitewordpath_2d_str (class in sage.combinat.words.paths)": [[363, "sage.combinat.words.paths.FiniteWordPath_2d_str"]], "finitewordpath_2d_tuple (class in sage.combinat.words.paths)": [[363, "sage.combinat.words.paths.FiniteWordPath_2d_tuple"]], "finitewordpath_3d (class in sage.combinat.words.paths)": [[363, "sage.combinat.words.paths.FiniteWordPath_3d"]], "finitewordpath_3d_callable (class in sage.combinat.words.paths)": [[363, "sage.combinat.words.paths.FiniteWordPath_3d_callable"]], "finitewordpath_3d_callable_with_caching (class in sage.combinat.words.paths)": [[363, "sage.combinat.words.paths.FiniteWordPath_3d_callable_with_caching"]], "finitewordpath_3d_iter (class in sage.combinat.words.paths)": [[363, "sage.combinat.words.paths.FiniteWordPath_3d_iter"]], "finitewordpath_3d_iter_with_caching (class in sage.combinat.words.paths)": [[363, "sage.combinat.words.paths.FiniteWordPath_3d_iter_with_caching"]], "finitewordpath_3d_list (class in sage.combinat.words.paths)": [[363, "sage.combinat.words.paths.FiniteWordPath_3d_list"]], "finitewordpath_3d_str (class in sage.combinat.words.paths)": [[363, "sage.combinat.words.paths.FiniteWordPath_3d_str"]], "finitewordpath_3d_tuple (class in sage.combinat.words.paths)": [[363, "sage.combinat.words.paths.FiniteWordPath_3d_tuple"]], "finitewordpath_all (class in sage.combinat.words.paths)": [[363, "sage.combinat.words.paths.FiniteWordPath_all"]], "finitewordpath_all_callable (class in sage.combinat.words.paths)": [[363, "sage.combinat.words.paths.FiniteWordPath_all_callable"]], "finitewordpath_all_callable_with_caching (class in sage.combinat.words.paths)": [[363, "sage.combinat.words.paths.FiniteWordPath_all_callable_with_caching"]], "finitewordpath_all_iter (class in sage.combinat.words.paths)": [[363, "sage.combinat.words.paths.FiniteWordPath_all_iter"]], "finitewordpath_all_iter_with_caching (class in sage.combinat.words.paths)": [[363, "sage.combinat.words.paths.FiniteWordPath_all_iter_with_caching"]], "finitewordpath_all_list (class in sage.combinat.words.paths)": [[363, "sage.combinat.words.paths.FiniteWordPath_all_list"]], "finitewordpath_all_str (class in sage.combinat.words.paths)": [[363, "sage.combinat.words.paths.FiniteWordPath_all_str"]], "finitewordpath_all_tuple (class in sage.combinat.words.paths)": [[363, "sage.combinat.words.paths.FiniteWordPath_all_tuple"]], "finitewordpath_cube_grid (class in sage.combinat.words.paths)": [[363, "sage.combinat.words.paths.FiniteWordPath_cube_grid"]], "finitewordpath_cube_grid_callable (class in sage.combinat.words.paths)": [[363, "sage.combinat.words.paths.FiniteWordPath_cube_grid_callable"]], "finitewordpath_cube_grid_callable_with_caching (class in sage.combinat.words.paths)": [[363, "sage.combinat.words.paths.FiniteWordPath_cube_grid_callable_with_caching"]], "finitewordpath_cube_grid_iter (class in sage.combinat.words.paths)": [[363, "sage.combinat.words.paths.FiniteWordPath_cube_grid_iter"]], "finitewordpath_cube_grid_iter_with_caching (class in sage.combinat.words.paths)": [[363, "sage.combinat.words.paths.FiniteWordPath_cube_grid_iter_with_caching"]], "finitewordpath_cube_grid_list (class in sage.combinat.words.paths)": [[363, "sage.combinat.words.paths.FiniteWordPath_cube_grid_list"]], "finitewordpath_cube_grid_str (class in sage.combinat.words.paths)": [[363, "sage.combinat.words.paths.FiniteWordPath_cube_grid_str"]], "finitewordpath_cube_grid_tuple (class in sage.combinat.words.paths)": [[363, "sage.combinat.words.paths.FiniteWordPath_cube_grid_tuple"]], "finitewordpath_dyck (class in sage.combinat.words.paths)": [[363, "sage.combinat.words.paths.FiniteWordPath_dyck"]], "finitewordpath_dyck_callable (class in sage.combinat.words.paths)": [[363, "sage.combinat.words.paths.FiniteWordPath_dyck_callable"]], "finitewordpath_dyck_callable_with_caching (class in sage.combinat.words.paths)": [[363, "sage.combinat.words.paths.FiniteWordPath_dyck_callable_with_caching"]], "finitewordpath_dyck_iter (class in sage.combinat.words.paths)": [[363, "sage.combinat.words.paths.FiniteWordPath_dyck_iter"]], "finitewordpath_dyck_iter_with_caching (class in sage.combinat.words.paths)": [[363, "sage.combinat.words.paths.FiniteWordPath_dyck_iter_with_caching"]], "finitewordpath_dyck_list (class in sage.combinat.words.paths)": [[363, "sage.combinat.words.paths.FiniteWordPath_dyck_list"]], "finitewordpath_dyck_str (class in sage.combinat.words.paths)": [[363, "sage.combinat.words.paths.FiniteWordPath_dyck_str"]], "finitewordpath_dyck_tuple (class in sage.combinat.words.paths)": [[363, "sage.combinat.words.paths.FiniteWordPath_dyck_tuple"]], "finitewordpath_hexagonal_grid (class in sage.combinat.words.paths)": [[363, "sage.combinat.words.paths.FiniteWordPath_hexagonal_grid"]], "finitewordpath_hexagonal_grid_callable (class in sage.combinat.words.paths)": [[363, "sage.combinat.words.paths.FiniteWordPath_hexagonal_grid_callable"]], "finitewordpath_hexagonal_grid_callable_with_caching (class in sage.combinat.words.paths)": [[363, "sage.combinat.words.paths.FiniteWordPath_hexagonal_grid_callable_with_caching"]], "finitewordpath_hexagonal_grid_iter (class in sage.combinat.words.paths)": [[363, "sage.combinat.words.paths.FiniteWordPath_hexagonal_grid_iter"]], "finitewordpath_hexagonal_grid_iter_with_caching (class in sage.combinat.words.paths)": [[363, "sage.combinat.words.paths.FiniteWordPath_hexagonal_grid_iter_with_caching"]], "finitewordpath_hexagonal_grid_list (class in sage.combinat.words.paths)": [[363, "sage.combinat.words.paths.FiniteWordPath_hexagonal_grid_list"]], "finitewordpath_hexagonal_grid_str (class in sage.combinat.words.paths)": [[363, "sage.combinat.words.paths.FiniteWordPath_hexagonal_grid_str"]], "finitewordpath_hexagonal_grid_tuple (class in sage.combinat.words.paths)": [[363, "sage.combinat.words.paths.FiniteWordPath_hexagonal_grid_tuple"]], "finitewordpath_north_east (class in sage.combinat.words.paths)": [[363, "sage.combinat.words.paths.FiniteWordPath_north_east"]], "finitewordpath_north_east_callable (class in sage.combinat.words.paths)": [[363, "sage.combinat.words.paths.FiniteWordPath_north_east_callable"]], "finitewordpath_north_east_callable_with_caching (class in sage.combinat.words.paths)": [[363, "sage.combinat.words.paths.FiniteWordPath_north_east_callable_with_caching"]], "finitewordpath_north_east_iter (class in sage.combinat.words.paths)": [[363, "sage.combinat.words.paths.FiniteWordPath_north_east_iter"]], "finitewordpath_north_east_iter_with_caching (class in sage.combinat.words.paths)": [[363, "sage.combinat.words.paths.FiniteWordPath_north_east_iter_with_caching"]], "finitewordpath_north_east_list (class in sage.combinat.words.paths)": [[363, "sage.combinat.words.paths.FiniteWordPath_north_east_list"]], "finitewordpath_north_east_str (class in sage.combinat.words.paths)": [[363, "sage.combinat.words.paths.FiniteWordPath_north_east_str"]], "finitewordpath_north_east_tuple (class in sage.combinat.words.paths)": [[363, "sage.combinat.words.paths.FiniteWordPath_north_east_tuple"]], "finitewordpath_square_grid (class in sage.combinat.words.paths)": [[363, "sage.combinat.words.paths.FiniteWordPath_square_grid"]], "finitewordpath_square_grid_callable (class in sage.combinat.words.paths)": [[363, "sage.combinat.words.paths.FiniteWordPath_square_grid_callable"]], "finitewordpath_square_grid_callable_with_caching (class in sage.combinat.words.paths)": [[363, "sage.combinat.words.paths.FiniteWordPath_square_grid_callable_with_caching"]], "finitewordpath_square_grid_iter (class in sage.combinat.words.paths)": [[363, "sage.combinat.words.paths.FiniteWordPath_square_grid_iter"]], "finitewordpath_square_grid_iter_with_caching (class in sage.combinat.words.paths)": [[363, "sage.combinat.words.paths.FiniteWordPath_square_grid_iter_with_caching"]], "finitewordpath_square_grid_list (class in sage.combinat.words.paths)": [[363, "sage.combinat.words.paths.FiniteWordPath_square_grid_list"]], "finitewordpath_square_grid_str (class in sage.combinat.words.paths)": [[363, "sage.combinat.words.paths.FiniteWordPath_square_grid_str"]], "finitewordpath_square_grid_tuple (class in sage.combinat.words.paths)": [[363, "sage.combinat.words.paths.FiniteWordPath_square_grid_tuple"]], "finitewordpath_triangle_grid (class in sage.combinat.words.paths)": [[363, "sage.combinat.words.paths.FiniteWordPath_triangle_grid"]], "finitewordpath_triangle_grid_callable (class in sage.combinat.words.paths)": [[363, "sage.combinat.words.paths.FiniteWordPath_triangle_grid_callable"]], "finitewordpath_triangle_grid_callable_with_caching (class in sage.combinat.words.paths)": [[363, "sage.combinat.words.paths.FiniteWordPath_triangle_grid_callable_with_caching"]], "finitewordpath_triangle_grid_iter (class in sage.combinat.words.paths)": [[363, "sage.combinat.words.paths.FiniteWordPath_triangle_grid_iter"]], "finitewordpath_triangle_grid_iter_with_caching (class in sage.combinat.words.paths)": [[363, "sage.combinat.words.paths.FiniteWordPath_triangle_grid_iter_with_caching"]], "finitewordpath_triangle_grid_list (class in sage.combinat.words.paths)": [[363, "sage.combinat.words.paths.FiniteWordPath_triangle_grid_list"]], "finitewordpath_triangle_grid_str (class in sage.combinat.words.paths)": [[363, "sage.combinat.words.paths.FiniteWordPath_triangle_grid_str"]], "finitewordpath_triangle_grid_tuple (class in sage.combinat.words.paths)": [[363, "sage.combinat.words.paths.FiniteWordPath_triangle_grid_tuple"]], "wordpaths() (in module sage.combinat.words.paths)": [[363, "sage.combinat.words.paths.WordPaths"]], "wordpaths_all (class in sage.combinat.words.paths)": [[363, "sage.combinat.words.paths.WordPaths_all"]], "wordpaths_cube_grid (class in sage.combinat.words.paths)": [[363, "sage.combinat.words.paths.WordPaths_cube_grid"]], "wordpaths_dyck (class in sage.combinat.words.paths)": [[363, "sage.combinat.words.paths.WordPaths_dyck"]], "wordpaths_hexagonal_grid (class in sage.combinat.words.paths)": [[363, "sage.combinat.words.paths.WordPaths_hexagonal_grid"]], "wordpaths_north_east (class in sage.combinat.words.paths)": [[363, "sage.combinat.words.paths.WordPaths_north_east"]], "wordpaths_square_grid (class in sage.combinat.words.paths)": [[363, "sage.combinat.words.paths.WordPaths_square_grid"]], "wordpaths_triangle_grid (class in sage.combinat.words.paths)": [[363, "sage.combinat.words.paths.WordPaths_triangle_grid"]], "animate() (sage.combinat.words.paths.finitewordpath_2d method)": [[363, "sage.combinat.words.paths.FiniteWordPath_2d.animate"]], "area() (sage.combinat.words.paths.finitewordpath_2d method)": [[363, "sage.combinat.words.paths.FiniteWordPath_2d.area"]], "area() (sage.combinat.words.paths.finitewordpath_square_grid method)": [[363, "sage.combinat.words.paths.FiniteWordPath_square_grid.area"]], "directive_vector() (sage.combinat.words.paths.finitewordpath_all method)": [[363, "sage.combinat.words.paths.FiniteWordPath_all.directive_vector"]], "end_point() (sage.combinat.words.paths.finitewordpath_all method)": [[363, "sage.combinat.words.paths.FiniteWordPath_all.end_point"]], "height() (sage.combinat.words.paths.finitewordpath_2d method)": [[363, "sage.combinat.words.paths.FiniteWordPath_2d.height"]], "height_vector() (sage.combinat.words.paths.finitewordpath_2d method)": [[363, "sage.combinat.words.paths.FiniteWordPath_2d.height_vector"]], "is_closed() (sage.combinat.words.paths.finitewordpath_all method)": [[363, "sage.combinat.words.paths.FiniteWordPath_all.is_closed"]], "is_closed() (sage.combinat.words.paths.finitewordpath_square_grid method)": [[363, "sage.combinat.words.paths.FiniteWordPath_square_grid.is_closed"]], "is_simple() (sage.combinat.words.paths.finitewordpath_all method)": [[363, "sage.combinat.words.paths.FiniteWordPath_all.is_simple"]], "is_simple() (sage.combinat.words.paths.finitewordpath_square_grid method)": [[363, "sage.combinat.words.paths.FiniteWordPath_square_grid.is_simple"]], "is_tangent() (sage.combinat.words.paths.finitewordpath_all method)": [[363, "sage.combinat.words.paths.FiniteWordPath_all.is_tangent"]], "letters_to_steps() (sage.combinat.words.paths.wordpaths_all method)": [[363, "sage.combinat.words.paths.WordPaths_all.letters_to_steps"]], "plot() (sage.combinat.words.paths.finitewordpath_2d method)": [[363, "sage.combinat.words.paths.FiniteWordPath_2d.plot"]], "plot() (sage.combinat.words.paths.finitewordpath_3d method)": [[363, "sage.combinat.words.paths.FiniteWordPath_3d.plot"]], "plot_directive_vector() (sage.combinat.words.paths.finitewordpath_2d method)": [[363, "sage.combinat.words.paths.FiniteWordPath_2d.plot_directive_vector"]], "plot_projection() (sage.combinat.words.paths.finitewordpath_all method)": [[363, "sage.combinat.words.paths.FiniteWordPath_all.plot_projection"]], "points() (sage.combinat.words.paths.finitewordpath_all method)": [[363, "sage.combinat.words.paths.FiniteWordPath_all.points"]], "projected_path() (sage.combinat.words.paths.finitewordpath_all method)": [[363, "sage.combinat.words.paths.FiniteWordPath_all.projected_path"]], "projected_point_iterator() (sage.combinat.words.paths.finitewordpath_all method)": [[363, "sage.combinat.words.paths.FiniteWordPath_all.projected_point_iterator"]], "sage.combinat.words.paths": [[363, "module-sage.combinat.words.paths"]], "start_point() (sage.combinat.words.paths.finitewordpath_all method)": [[363, "sage.combinat.words.paths.FiniteWordPath_all.start_point"]], "tikz_trajectory() (sage.combinat.words.paths.finitewordpath_all method)": [[363, "sage.combinat.words.paths.FiniteWordPath_all.tikz_trajectory"]], "tikz_trajectory() (sage.combinat.words.paths.finitewordpath_square_grid method)": [[363, "sage.combinat.words.paths.FiniteWordPath_square_grid.tikz_trajectory"]], "vector_space() (sage.combinat.words.paths.wordpaths_all method)": [[363, "sage.combinat.words.paths.WordPaths_all.vector_space"]], "width() (sage.combinat.words.paths.finitewordpath_2d method)": [[363, "sage.combinat.words.paths.FiniteWordPath_2d.width"]], "width_vector() (sage.combinat.words.paths.finitewordpath_2d method)": [[363, "sage.combinat.words.paths.FiniteWordPath_2d.width_vector"]], "xmax() (sage.combinat.words.paths.finitewordpath_2d method)": [[363, "sage.combinat.words.paths.FiniteWordPath_2d.xmax"]], "xmax() (sage.combinat.words.paths.finitewordpath_triangle_grid method)": [[363, "sage.combinat.words.paths.FiniteWordPath_triangle_grid.xmax"]], "xmin() (sage.combinat.words.paths.finitewordpath_2d method)": [[363, "sage.combinat.words.paths.FiniteWordPath_2d.xmin"]], "xmin() (sage.combinat.words.paths.finitewordpath_triangle_grid method)": [[363, "sage.combinat.words.paths.FiniteWordPath_triangle_grid.xmin"]], "ymax() (sage.combinat.words.paths.finitewordpath_2d method)": [[363, "sage.combinat.words.paths.FiniteWordPath_2d.ymax"]], "ymax() (sage.combinat.words.paths.finitewordpath_triangle_grid method)": [[363, "sage.combinat.words.paths.FiniteWordPath_triangle_grid.ymax"]], "ymin() (sage.combinat.words.paths.finitewordpath_2d method)": [[363, "sage.combinat.words.paths.FiniteWordPath_2d.ymin"]], "ymin() (sage.combinat.words.paths.finitewordpath_triangle_grid method)": [[363, "sage.combinat.words.paths.FiniteWordPath_triangle_grid.ymin"]], "shuffleproduct_shifted (class in sage.combinat.words.shuffle_product)": [[364, "sage.combinat.words.shuffle_product.ShuffleProduct_shifted"]], "shuffleproduct_w1w2 (class in sage.combinat.words.shuffle_product)": [[364, "sage.combinat.words.shuffle_product.ShuffleProduct_w1w2"]], "cardinality() (sage.combinat.words.shuffle_product.shuffleproduct_w1w2 method)": [[364, "sage.combinat.words.shuffle_product.ShuffleProduct_w1w2.cardinality"]], "sage.combinat.words.shuffle_product": [[364, "module-sage.combinat.words.shuffle_product"]], "decoratedsuffixtree (class in sage.combinat.words.suffix_trees)": [[365, "sage.combinat.words.suffix_trees.DecoratedSuffixTree"]], "implicitsuffixtree (class in sage.combinat.words.suffix_trees)": [[365, "sage.combinat.words.suffix_trees.ImplicitSuffixTree"]], "lz_decomposition() (sage.combinat.words.suffix_trees.implicitsuffixtree method)": [[365, "sage.combinat.words.suffix_trees.ImplicitSuffixTree.LZ_decomposition"]], "suffixtrie (class in sage.combinat.words.suffix_trees)": [[365, "sage.combinat.words.suffix_trees.SuffixTrie"]], "active_state() (sage.combinat.words.suffix_trees.implicitsuffixtree method)": [[365, "sage.combinat.words.suffix_trees.ImplicitSuffixTree.active_state"]], "active_state() (sage.combinat.words.suffix_trees.suffixtrie method)": [[365, "sage.combinat.words.suffix_trees.SuffixTrie.active_state"]], "edge_iterator() (sage.combinat.words.suffix_trees.implicitsuffixtree method)": [[365, "sage.combinat.words.suffix_trees.ImplicitSuffixTree.edge_iterator"]], "factor_iterator() (sage.combinat.words.suffix_trees.implicitsuffixtree method)": [[365, "sage.combinat.words.suffix_trees.ImplicitSuffixTree.factor_iterator"]], "final_states() (sage.combinat.words.suffix_trees.suffixtrie method)": [[365, "sage.combinat.words.suffix_trees.SuffixTrie.final_states"]], "has_suffix() (sage.combinat.words.suffix_trees.suffixtrie method)": [[365, "sage.combinat.words.suffix_trees.SuffixTrie.has_suffix"]], "leftmost_covering_set() (sage.combinat.words.suffix_trees.implicitsuffixtree method)": [[365, "sage.combinat.words.suffix_trees.ImplicitSuffixTree.leftmost_covering_set"]], "node_to_word() (sage.combinat.words.suffix_trees.suffixtrie method)": [[365, "sage.combinat.words.suffix_trees.SuffixTrie.node_to_word"]], "number_of_factors() (sage.combinat.words.suffix_trees.implicitsuffixtree method)": [[365, "sage.combinat.words.suffix_trees.ImplicitSuffixTree.number_of_factors"]], "plot() (sage.combinat.words.suffix_trees.implicitsuffixtree method)": [[365, "sage.combinat.words.suffix_trees.ImplicitSuffixTree.plot"]], "plot() (sage.combinat.words.suffix_trees.suffixtrie method)": [[365, "sage.combinat.words.suffix_trees.SuffixTrie.plot"]], "process_letter() (sage.combinat.words.suffix_trees.implicitsuffixtree method)": [[365, "sage.combinat.words.suffix_trees.ImplicitSuffixTree.process_letter"]], "process_letter() (sage.combinat.words.suffix_trees.suffixtrie method)": [[365, "sage.combinat.words.suffix_trees.SuffixTrie.process_letter"]], "sage.combinat.words.suffix_trees": [[365, "module-sage.combinat.words.suffix_trees"]], "show() (sage.combinat.words.suffix_trees.implicitsuffixtree method)": [[365, "sage.combinat.words.suffix_trees.ImplicitSuffixTree.show"]], "show() (sage.combinat.words.suffix_trees.suffixtrie method)": [[365, "sage.combinat.words.suffix_trees.SuffixTrie.show"]], "square_vocabulary() (sage.combinat.words.suffix_trees.decoratedsuffixtree method)": [[365, "sage.combinat.words.suffix_trees.DecoratedSuffixTree.square_vocabulary"]], "states() (sage.combinat.words.suffix_trees.implicitsuffixtree method)": [[365, "sage.combinat.words.suffix_trees.ImplicitSuffixTree.states"]], "states() (sage.combinat.words.suffix_trees.suffixtrie method)": [[365, "sage.combinat.words.suffix_trees.SuffixTrie.states"]], "suffix_link() (sage.combinat.words.suffix_trees.implicitsuffixtree method)": [[365, "sage.combinat.words.suffix_trees.ImplicitSuffixTree.suffix_link"]], "suffix_link() (sage.combinat.words.suffix_trees.suffixtrie method)": [[365, "sage.combinat.words.suffix_trees.SuffixTrie.suffix_link"]], "suffix_walk() (sage.combinat.words.suffix_trees.implicitsuffixtree method)": [[365, "sage.combinat.words.suffix_trees.ImplicitSuffixTree.suffix_walk"]], "to_digraph() (sage.combinat.words.suffix_trees.implicitsuffixtree method)": [[365, "sage.combinat.words.suffix_trees.ImplicitSuffixTree.to_digraph"]], "to_digraph() (sage.combinat.words.suffix_trees.suffixtrie method)": [[365, "sage.combinat.words.suffix_trees.SuffixTrie.to_digraph"]], "to_explicit_suffix_tree() (sage.combinat.words.suffix_trees.implicitsuffixtree method)": [[365, "sage.combinat.words.suffix_trees.ImplicitSuffixTree.to_explicit_suffix_tree"]], "transition_function() (sage.combinat.words.suffix_trees.implicitsuffixtree method)": [[365, "sage.combinat.words.suffix_trees.ImplicitSuffixTree.transition_function"]], "transition_function() (sage.combinat.words.suffix_trees.suffixtrie method)": [[365, "sage.combinat.words.suffix_trees.SuffixTrie.transition_function"]], "transition_function_dictionary() (sage.combinat.words.suffix_trees.implicitsuffixtree method)": [[365, "sage.combinat.words.suffix_trees.ImplicitSuffixTree.transition_function_dictionary"]], "trie_type_dict() (sage.combinat.words.suffix_trees.implicitsuffixtree method)": [[365, "sage.combinat.words.suffix_trees.ImplicitSuffixTree.trie_type_dict"]], "uncompactify() (sage.combinat.words.suffix_trees.implicitsuffixtree method)": [[365, "sage.combinat.words.suffix_trees.ImplicitSuffixTree.uncompactify"]], "word() (sage.combinat.words.suffix_trees.implicitsuffixtree method)": [[365, "sage.combinat.words.suffix_trees.ImplicitSuffixTree.word"]], "word() (sage.combinat.words.suffix_trees.suffixtrie method)": [[365, "sage.combinat.words.suffix_trees.SuffixTrie.word"]], "finiteword_callable (class in sage.combinat.words.word)": [[366, "sage.combinat.words.word.FiniteWord_callable"]], "finiteword_callable_with_caching (class in sage.combinat.words.word)": [[366, "sage.combinat.words.word.FiniteWord_callable_with_caching"]], "finiteword_char (class in sage.combinat.words.word)": [[366, "sage.combinat.words.word.FiniteWord_char"]], "finiteword_iter (class in sage.combinat.words.word)": [[366, "sage.combinat.words.word.FiniteWord_iter"]], "finiteword_iter_with_caching (class in sage.combinat.words.word)": [[366, "sage.combinat.words.word.FiniteWord_iter_with_caching"]], "finiteword_list (class in sage.combinat.words.word)": [[366, "sage.combinat.words.word.FiniteWord_list"]], "finiteword_morphic (class in sage.combinat.words.word)": [[366, "sage.combinat.words.word.FiniteWord_morphic"]], "finiteword_str (class in sage.combinat.words.word)": [[366, "sage.combinat.words.word.FiniteWord_str"]], "finiteword_tuple (class in sage.combinat.words.word)": [[366, "sage.combinat.words.word.FiniteWord_tuple"]], "infiniteword_callable (class in sage.combinat.words.word)": [[366, "sage.combinat.words.word.InfiniteWord_callable"]], "infiniteword_callable_with_caching (class in sage.combinat.words.word)": [[366, "sage.combinat.words.word.InfiniteWord_callable_with_caching"]], "infiniteword_iter (class in sage.combinat.words.word)": [[366, "sage.combinat.words.word.InfiniteWord_iter"]], "infiniteword_iter_with_caching (class in sage.combinat.words.word)": [[366, "sage.combinat.words.word.InfiniteWord_iter_with_caching"]], "infiniteword_morphic (class in sage.combinat.words.word)": [[366, "sage.combinat.words.word.InfiniteWord_morphic"]], "word() (in module sage.combinat.words.word)": [[366, "sage.combinat.words.word.Word"]], "word_iter (class in sage.combinat.words.word)": [[366, "sage.combinat.words.word.Word_iter"]], "word_iter_with_caching (class in sage.combinat.words.word)": [[366, "sage.combinat.words.word.Word_iter_with_caching"]], "sage.combinat.words.word": [[366, "module-sage.combinat.words.word"]], "worddatatype_char (class in sage.combinat.words.word_char)": [[367, "sage.combinat.words.word_char.WordDatatype_char"]], "concatenate() (sage.combinat.words.word_char.worddatatype_char method)": [[367, "sage.combinat.words.word_char.WordDatatype_char.concatenate"]], "has_prefix() (sage.combinat.words.word_char.worddatatype_char method)": [[367, "sage.combinat.words.word_char.WordDatatype_char.has_prefix"]], "is_empty() (sage.combinat.words.word_char.worddatatype_char method)": [[367, "sage.combinat.words.word_char.WordDatatype_char.is_empty"]], "is_square() (sage.combinat.words.word_char.worddatatype_char method)": [[367, "sage.combinat.words.word_char.WordDatatype_char.is_square"]], "length() (sage.combinat.words.word_char.worddatatype_char method)": [[367, "sage.combinat.words.word_char.WordDatatype_char.length"]], "letters() (sage.combinat.words.word_char.worddatatype_char method)": [[367, "sage.combinat.words.word_char.WordDatatype_char.letters"]], "longest_common_prefix() (sage.combinat.words.word_char.worddatatype_char method)": [[367, "sage.combinat.words.word_char.WordDatatype_char.longest_common_prefix"]], "longest_common_suffix() (sage.combinat.words.word_char.worddatatype_char method)": [[367, "sage.combinat.words.word_char.WordDatatype_char.longest_common_suffix"]], "reversed_word_iterator() (in module sage.combinat.words.word_char)": [[367, "sage.combinat.words.word_char.reversed_word_iterator"]], "sage.combinat.words.word_char": [[367, "module-sage.combinat.words.word_char"]], "worddatatype (class in sage.combinat.words.word_datatypes)": [[368, "sage.combinat.words.word_datatypes.WordDatatype"]], "worddatatype_list (class in sage.combinat.words.word_datatypes)": [[368, "sage.combinat.words.word_datatypes.WordDatatype_list"]], "worddatatype_str (class in sage.combinat.words.word_datatypes)": [[368, "sage.combinat.words.word_datatypes.WordDatatype_str"]], "worddatatype_tuple (class in sage.combinat.words.word_datatypes)": [[368, "sage.combinat.words.word_datatypes.WordDatatype_tuple"]], "find() (sage.combinat.words.word_datatypes.worddatatype_str method)": [[368, "sage.combinat.words.word_datatypes.WordDatatype_str.find"]], "has_prefix() (sage.combinat.words.word_datatypes.worddatatype_str method)": [[368, "sage.combinat.words.word_datatypes.WordDatatype_str.has_prefix"]], "has_suffix() (sage.combinat.words.word_datatypes.worddatatype_str method)": [[368, "sage.combinat.words.word_datatypes.WordDatatype_str.has_suffix"]], "is_prefix() (sage.combinat.words.word_datatypes.worddatatype_str method)": [[368, "sage.combinat.words.word_datatypes.WordDatatype_str.is_prefix"]], "is_suffix() (sage.combinat.words.word_datatypes.worddatatype_str method)": [[368, "sage.combinat.words.word_datatypes.WordDatatype_str.is_suffix"]], "length() (sage.combinat.words.word_datatypes.worddatatype_list method)": [[368, "sage.combinat.words.word_datatypes.WordDatatype_list.length"]], "length() (sage.combinat.words.word_datatypes.worddatatype_str method)": [[368, "sage.combinat.words.word_datatypes.WordDatatype_str.length"]], "length() (sage.combinat.words.word_datatypes.worddatatype_tuple method)": [[368, "sage.combinat.words.word_datatypes.WordDatatype_tuple.length"]], "number_of_letter_occurrences() (sage.combinat.words.word_datatypes.worddatatype_list method)": [[368, "sage.combinat.words.word_datatypes.WordDatatype_list.number_of_letter_occurrences"]], "number_of_letter_occurrences() (sage.combinat.words.word_datatypes.worddatatype_str method)": [[368, "sage.combinat.words.word_datatypes.WordDatatype_str.number_of_letter_occurrences"]], "partition() (sage.combinat.words.word_datatypes.worddatatype_str method)": [[368, "sage.combinat.words.word_datatypes.WordDatatype_str.partition"]], "rfind() (sage.combinat.words.word_datatypes.worddatatype_str method)": [[368, "sage.combinat.words.word_datatypes.WordDatatype_str.rfind"]], "sage.combinat.words.word_datatypes": [[368, "module-sage.combinat.words.word_datatypes"]], "split() (sage.combinat.words.word_datatypes.worddatatype_str method)": [[368, "sage.combinat.words.word_datatypes.WordDatatype_str.split"]], "baumsweetword() (sage.combinat.words.word_generators.wordgenerator method)": [[369, "sage.combinat.words.word_generators.WordGenerator.BaumSweetWord"]], "characteristicsturmianword() (sage.combinat.words.word_generators.wordgenerator method)": [[369, "sage.combinat.words.word_generators.WordGenerator.CharacteristicSturmianWord"]], "christoffelword (sage.combinat.words.word_generators.wordgenerator attribute)": [[369, "sage.combinat.words.word_generators.WordGenerator.ChristoffelWord"]], "codingofrotationword() (sage.combinat.words.word_generators.wordgenerator method)": [[369, "sage.combinat.words.word_generators.WordGenerator.CodingOfRotationWord"]], "fibonacciword() (sage.combinat.words.word_generators.wordgenerator method)": [[369, "sage.combinat.words.word_generators.WordGenerator.FibonacciWord"]], "fixedpointofmorphism() (sage.combinat.words.word_generators.wordgenerator method)": [[369, "sage.combinat.words.word_generators.WordGenerator.FixedPointOfMorphism"]], "kolakoskiword() (sage.combinat.words.word_generators.wordgenerator method)": [[369, "sage.combinat.words.word_generators.WordGenerator.KolakoskiWord"]], "lowerchristoffelword (class in sage.combinat.words.word_generators)": [[369, "sage.combinat.words.word_generators.LowerChristoffelWord"]], "lowerchristoffelword (sage.combinat.words.word_generators.wordgenerator attribute)": [[369, "sage.combinat.words.word_generators.WordGenerator.LowerChristoffelWord"]], "lowermechanicalword() (sage.combinat.words.word_generators.wordgenerator method)": [[369, "sage.combinat.words.word_generators.WordGenerator.LowerMechanicalWord"]], "minimalsmoothprefix() (sage.combinat.words.word_generators.wordgenerator method)": [[369, "sage.combinat.words.word_generators.WordGenerator.MinimalSmoothPrefix"]], "palindromicdefectword() (sage.combinat.words.word_generators.wordgenerator method)": [[369, "sage.combinat.words.word_generators.WordGenerator.PalindromicDefectWord"]], "randomword() (sage.combinat.words.word_generators.wordgenerator method)": [[369, "sage.combinat.words.word_generators.WordGenerator.RandomWord"]], "standardepisturmianword() (sage.combinat.words.word_generators.wordgenerator method)": [[369, "sage.combinat.words.word_generators.WordGenerator.StandardEpisturmianWord"]], "thuemorseword() (sage.combinat.words.word_generators.wordgenerator method)": [[369, "sage.combinat.words.word_generators.WordGenerator.ThueMorseWord"]], "upperchristoffelword() (sage.combinat.words.word_generators.wordgenerator method)": [[369, "sage.combinat.words.word_generators.WordGenerator.UpperChristoffelWord"]], "uppermechanicalword() (sage.combinat.words.word_generators.wordgenerator method)": [[369, "sage.combinat.words.word_generators.WordGenerator.UpperMechanicalWord"]], "wordgenerator (class in sage.combinat.words.word_generators)": [[369, "sage.combinat.words.word_generators.WordGenerator"]], "dual_fibonacci_tile() (sage.combinat.words.word_generators.wordgenerator method)": [[369, "sage.combinat.words.word_generators.WordGenerator.dual_fibonacci_tile"]], "fibonacci_tile() (sage.combinat.words.word_generators.wordgenerator method)": [[369, "sage.combinat.words.word_generators.WordGenerator.fibonacci_tile"]], "markoff_number() (sage.combinat.words.word_generators.lowerchristoffelword method)": [[369, "sage.combinat.words.word_generators.LowerChristoffelWord.markoff_number"]], "s_adic() (sage.combinat.words.word_generators.wordgenerator method)": [[369, "sage.combinat.words.word_generators.WordGenerator.s_adic"]], "sage.combinat.words.word_generators": [[369, "module-sage.combinat.words.word_generators"]], "standard_factorization() (sage.combinat.words.word_generators.lowerchristoffelword method)": [[369, "sage.combinat.words.word_generators.LowerChristoffelWord.standard_factorization"]], "worddatatype_callable (class in sage.combinat.words.word_infinite_datatypes)": [[370, "sage.combinat.words.word_infinite_datatypes.WordDatatype_callable"]], "worddatatype_callable_with_caching (class in sage.combinat.words.word_infinite_datatypes)": [[370, "sage.combinat.words.word_infinite_datatypes.WordDatatype_callable_with_caching"]], "worddatatype_iter (class in sage.combinat.words.word_infinite_datatypes)": [[370, "sage.combinat.words.word_infinite_datatypes.WordDatatype_iter"]], "worddatatype_iter_with_caching (class in sage.combinat.words.word_infinite_datatypes)": [[370, "sage.combinat.words.word_infinite_datatypes.WordDatatype_iter_with_caching"]], "flush() (sage.combinat.words.word_infinite_datatypes.worddatatype_callable_with_caching method)": [[370, "sage.combinat.words.word_infinite_datatypes.WordDatatype_callable_with_caching.flush"]], "flush() (sage.combinat.words.word_infinite_datatypes.worddatatype_iter_with_caching method)": [[370, "sage.combinat.words.word_infinite_datatypes.WordDatatype_iter_with_caching.flush"]], "sage.combinat.words.word_infinite_datatypes": [[370, "module-sage.combinat.words.word_infinite_datatypes"]], "wordoptions() (in module sage.combinat.words.word_options)": [[371, "sage.combinat.words.word_options.WordOptions"]], "sage.combinat.words.word_options": [[371, "module-sage.combinat.words.word_options"]], "abstractlanguage (class in sage.combinat.words.words)": [[372, "sage.combinat.words.words.AbstractLanguage"]], "finiteorinfinitewords (class in sage.combinat.words.words)": [[372, "sage.combinat.words.words.FiniteOrInfiniteWords"]], "finitewords (class in sage.combinat.words.words)": [[372, "sage.combinat.words.words.FiniteWords"]], "infinitewords (class in sage.combinat.words.words)": [[372, "sage.combinat.words.words.InfiniteWords"]], "words() (in module sage.combinat.words.words)": [[372, "sage.combinat.words.words.Words"]], "words_n (class in sage.combinat.words.words)": [[372, "sage.combinat.words.words.Words_n"]], "alphabet() (sage.combinat.words.words.abstractlanguage method)": [[372, "sage.combinat.words.words.AbstractLanguage.alphabet"]], "alphabet() (sage.combinat.words.words.words_n method)": [[372, "sage.combinat.words.words.Words_n.alphabet"]], "cardinality() (sage.combinat.words.words.finiteorinfinitewords method)": [[372, "sage.combinat.words.words.FiniteOrInfiniteWords.cardinality"]], "cardinality() (sage.combinat.words.words.finitewords method)": [[372, "sage.combinat.words.words.FiniteWords.cardinality"]], "cardinality() (sage.combinat.words.words.infinitewords method)": [[372, "sage.combinat.words.words.InfiniteWords.cardinality"]], "cardinality() (sage.combinat.words.words.words_n method)": [[372, "sage.combinat.words.words.Words_n.cardinality"]], "factors() (sage.combinat.words.words.finiteorinfinitewords method)": [[372, "sage.combinat.words.words.FiniteOrInfiniteWords.factors"]], "factors() (sage.combinat.words.words.finitewords method)": [[372, "sage.combinat.words.words.FiniteWords.factors"]], "factors() (sage.combinat.words.words.infinitewords method)": [[372, "sage.combinat.words.words.InfiniteWords.factors"]], "finite_words() (sage.combinat.words.words.finiteorinfinitewords method)": [[372, "sage.combinat.words.words.FiniteOrInfiniteWords.finite_words"]], "identity_morphism() (sage.combinat.words.words.abstractlanguage method)": [[372, "sage.combinat.words.words.AbstractLanguage.identity_morphism"]], "infinite_words() (sage.combinat.words.words.finiteorinfinitewords method)": [[372, "sage.combinat.words.words.FiniteOrInfiniteWords.infinite_words"]], "iter_morphisms() (sage.combinat.words.words.finitewords method)": [[372, "sage.combinat.words.words.FiniteWords.iter_morphisms"]], "iterate_by_length() (sage.combinat.words.words.finiteorinfinitewords method)": [[372, "sage.combinat.words.words.FiniteOrInfiniteWords.iterate_by_length"]], "iterate_by_length() (sage.combinat.words.words.finitewords method)": [[372, "sage.combinat.words.words.FiniteWords.iterate_by_length"]], "iterate_by_length() (sage.combinat.words.words.words_n method)": [[372, "sage.combinat.words.words.Words_n.iterate_by_length"]], "list() (sage.combinat.words.words.words_n method)": [[372, "sage.combinat.words.words.Words_n.list"]], "random_element() (sage.combinat.words.words.finitewords method)": [[372, "sage.combinat.words.words.FiniteWords.random_element"]], "random_element() (sage.combinat.words.words.infinitewords method)": [[372, "sage.combinat.words.words.InfiniteWords.random_element"]], "random_element() (sage.combinat.words.words.words_n method)": [[372, "sage.combinat.words.words.Words_n.random_element"]], "sage.combinat.words.words": [[372, "module-sage.combinat.words.words"]], "shift() (sage.combinat.words.words.finiteorinfinitewords method)": [[372, "sage.combinat.words.words.FiniteOrInfiniteWords.shift"]], "shift() (sage.combinat.words.words.finitewords method)": [[372, "sage.combinat.words.words.FiniteWords.shift"]], "shift() (sage.combinat.words.words.infinitewords method)": [[372, "sage.combinat.words.words.InfiniteWords.shift"]], "swapincreasingoperator (class in sage.combinat.yang_baxter_graph)": [[373, "sage.combinat.yang_baxter_graph.SwapIncreasingOperator"]], "swapoperator (class in sage.combinat.yang_baxter_graph)": [[373, "sage.combinat.yang_baxter_graph.SwapOperator"]], "yangbaxtergraph() (in module sage.combinat.yang_baxter_graph)": [[373, "sage.combinat.yang_baxter_graph.YangBaxterGraph"]], "yangbaxtergraph_generic (class in sage.combinat.yang_baxter_graph)": [[373, "sage.combinat.yang_baxter_graph.YangBaxterGraph_generic"]], "yangbaxtergraph_partition (class in sage.combinat.yang_baxter_graph)": [[373, "sage.combinat.yang_baxter_graph.YangBaxterGraph_partition"]], "edges() (sage.combinat.yang_baxter_graph.yangbaxtergraph_generic method)": [[373, "sage.combinat.yang_baxter_graph.YangBaxterGraph_generic.edges"]], "plot() (sage.combinat.yang_baxter_graph.yangbaxtergraph_generic method)": [[373, "sage.combinat.yang_baxter_graph.YangBaxterGraph_generic.plot"]], "position() (sage.combinat.yang_baxter_graph.swapoperator method)": [[373, "sage.combinat.yang_baxter_graph.SwapOperator.position"]], "relabel_edges() (sage.combinat.yang_baxter_graph.yangbaxtergraph_generic method)": [[373, "sage.combinat.yang_baxter_graph.YangBaxterGraph_generic.relabel_edges"]], "relabel_vertices() (sage.combinat.yang_baxter_graph.yangbaxtergraph_generic method)": [[373, "sage.combinat.yang_baxter_graph.YangBaxterGraph_generic.relabel_vertices"]], "relabel_vertices() (sage.combinat.yang_baxter_graph.yangbaxtergraph_partition method)": [[373, "sage.combinat.yang_baxter_graph.YangBaxterGraph_partition.relabel_vertices"]], "root() (sage.combinat.yang_baxter_graph.yangbaxtergraph_generic method)": [[373, "sage.combinat.yang_baxter_graph.YangBaxterGraph_generic.root"]], "sage.combinat.yang_baxter_graph": [[373, "module-sage.combinat.yang_baxter_graph"]], "successors() (sage.combinat.yang_baxter_graph.yangbaxtergraph_generic method)": [[373, "sage.combinat.yang_baxter_graph.YangBaxterGraph_generic.successors"]], "vertex_relabelling_dict() (sage.combinat.yang_baxter_graph.yangbaxtergraph_generic method)": [[373, "sage.combinat.yang_baxter_graph.YangBaxterGraph_generic.vertex_relabelling_dict"]], "vertex_relabelling_dict() (sage.combinat.yang_baxter_graph.yangbaxtergraph_partition method)": [[373, "sage.combinat.yang_baxter_graph.YangBaxterGraph_partition.vertex_relabelling_dict"]], "vertices() (sage.combinat.yang_baxter_graph.yangbaxtergraph_generic method)": [[373, "sage.combinat.yang_baxter_graph.YangBaxterGraph_generic.vertices"]], "cfinitesequence (class in sage.rings.cfinite_sequence)": [[374, "sage.rings.cfinite_sequence.CFiniteSequence"]], "cfinitesequences() (in module sage.rings.cfinite_sequence)": [[374, "sage.rings.cfinite_sequence.CFiniteSequences"]], "cfinitesequences_generic (class in sage.rings.cfinite_sequence)": [[374, "sage.rings.cfinite_sequence.CFiniteSequences_generic"]], "element (sage.rings.cfinite_sequence.cfinitesequences_generic attribute)": [[374, "sage.rings.cfinite_sequence.CFiniteSequences_generic.Element"]], "an_element() (sage.rings.cfinite_sequence.cfinitesequences_generic method)": [[374, "sage.rings.cfinite_sequence.CFiniteSequences_generic.an_element"]], "closed_form() (sage.rings.cfinite_sequence.cfinitesequence method)": [[374, "sage.rings.cfinite_sequence.CFiniteSequence.closed_form"]], "coefficients() (sage.rings.cfinite_sequence.cfinitesequence method)": [[374, "sage.rings.cfinite_sequence.CFiniteSequence.coefficients"]], "denominator() (sage.rings.cfinite_sequence.cfinitesequence method)": [[374, "sage.rings.cfinite_sequence.CFiniteSequence.denominator"]], "fraction_field() (sage.rings.cfinite_sequence.cfinitesequences_generic method)": [[374, "sage.rings.cfinite_sequence.CFiniteSequences_generic.fraction_field"]], "from_recurrence() (sage.rings.cfinite_sequence.cfinitesequences_generic method)": [[374, "sage.rings.cfinite_sequence.CFiniteSequences_generic.from_recurrence"]], "gen() (sage.rings.cfinite_sequence.cfinitesequences_generic method)": [[374, "sage.rings.cfinite_sequence.CFiniteSequences_generic.gen"]], "guess() (sage.rings.cfinite_sequence.cfinitesequences_generic method)": [[374, "sage.rings.cfinite_sequence.CFiniteSequences_generic.guess"]], "ngens() (sage.rings.cfinite_sequence.cfinitesequences_generic method)": [[374, "sage.rings.cfinite_sequence.CFiniteSequences_generic.ngens"]], "numerator() (sage.rings.cfinite_sequence.cfinitesequence method)": [[374, "sage.rings.cfinite_sequence.CFiniteSequence.numerator"]], "ogf() (sage.rings.cfinite_sequence.cfinitesequence method)": [[374, "sage.rings.cfinite_sequence.CFiniteSequence.ogf"]], "polynomial_ring() (sage.rings.cfinite_sequence.cfinitesequences_generic method)": [[374, "sage.rings.cfinite_sequence.CFiniteSequences_generic.polynomial_ring"]], "recurrence_repr() (sage.rings.cfinite_sequence.cfinitesequence method)": [[374, "sage.rings.cfinite_sequence.CFiniteSequence.recurrence_repr"]], "sage.rings.cfinite_sequence": [[374, "module-sage.rings.cfinite_sequence"]], "series() (sage.rings.cfinite_sequence.cfinitesequence method)": [[374, "sage.rings.cfinite_sequence.CFiniteSequence.series"]]}})
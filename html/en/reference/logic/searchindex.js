Search.setIndex({"docnames": ["index", "sage/logic/booleval", "sage/logic/boolformula", "sage/logic/logic", "sage/logic/logicparser", "sage/logic/logictable", "sage/logic/propcalc"], "filenames": ["index.rst", "sage/logic/booleval.rst", "sage/logic/boolformula.rst", "sage/logic/logic.rst", "sage/logic/logicparser.rst", "sage/logic/logictable.rst", "sage/logic/propcalc.rst"], "titles": ["Symbolic Logic", "Evaluation of Boolean Formulas", "Boolean Formulas", "Symbolic Logic Expressions", "Module that creates and modifies parse trees of well formed boolean formulas.", "Logic Tables", "Propositional Calculus"], "terms": {"proposit": 0, "calculu": 0, "boolean": [0, 3, 5, 6], "formula": [0, 3, 5, 6], "evalu": [0, 2, 3, 4, 6], "modul": [0, 2], "creat": [0, 2, 3, 5, 6], "modifi": [0, 1], "pars": [0, 1, 2, 6], "tree": [0, 1, 2, 6], "well": [0, 2], "form": [0, 2, 6], "express": [0, 2, 4, 5, 6], "index": [0, 2], "search": 0, "page": [0, 5], "author": [1, 2, 3, 4, 5, 6], "chri": [1, 2, 3, 4, 5, 6], "gorecki": [1, 2, 3, 4, 5, 6], "2006": [1, 2, 5, 6], "initi": [1, 2, 3, 4, 5, 6], "version": [1, 2, 3, 4, 5, 6], "paul": [1, 2, 3, 4, 5, 6], "scurek": [1, 2, 3, 4, 5, 6], "2013": [1, 2, 3, 4, 5, 6], "08": [1, 2, 3, 4, 5, 6], "05": [1, 6], "updat": [1, 2, 3, 4, 5, 6], "docstr": [1, 2, 3, 4, 5, 6], "format": [1, 2, 3, 4, 5, 6], "exampl": [1, 2, 3, 4, 5, 6], "we": [1, 2, 3, 4, 6], "can": [1, 2, 3, 4, 5, 6], "assign": [1, 2], "valu": [1, 2, 3, 4, 5, 6], "variabl": [1, 2, 3, 4, 5, 6], "sage": [1, 2, 3, 4, 5, 6], "import": [1, 2, 3, 4, 5], "logic": [1, 2, 4, 6], "boolev": [1, 6], "t": [1, 2, 3, 4, 5, 6], "b": [1, 2, 3, 4, 5, 6], "c": [1, 2, 3, 4, 5, 6], "d": [1, 2, 3, 4, 5, 6], "true": [1, 2, 3, 4, 5, 6], "fals": [1, 2, 3, 4, 5, 6], "eval_formula": 1, "chang": 1, "our": 1, "dictionari": [1, 2, 3], "eval_f": 1, "input": [1, 2, 3, 4, 5, 6], "list": [1, 2, 3, 4, 5, 6], "three": [1, 3], "element": [1, 2], "correspond": [1, 2, 3, 5], "branch": [1, 2, 4], "output": [1, 2, 3, 4, 5, 6], "The": [1, 2, 3, 4, 5, 6], "result": [1, 2, 3], "thi": [1, 2, 3, 4, 5, 6], "illustr": [1, 2, 3, 4, 5, 6], "how": [1, 2, 3, 4, 5], "vdict": 1, "return": [1, 2, 3, 4, 5, 6], "contain": [1, 2, 3, 4, 5, 6], "kei": [1, 3], "eval_op": 1, "op": [1, 2], "lv": 1, "rv": 1, "accord": 1, "oper": [1, 2, 3, 4, 6], "string": [1, 2, 3, 4, 6], "charact": [1, 3], "repres": [1, 2, 3, 4], "an": [1, 2, 3, 4, 5, 6], "given": [1, 2, 3, 5, 6], "either": [1, 4], "side": [1, 2], "consist": [2, 3, 6], "xor": [2, 6], "onli": [2, 3, 5, 6], "appli": [2, 3, 4, 6], "lead": [2, 6], "letter": [2, 3, 6], "trail": [2, 6], "underscor": [2, 3, 6], "alphanumer": [2, 6], "parenthes": [2, 3, 6], "mai": [2, 4, 6], "us": [2, 3, 4, 5, 6], "explicitli": [2, 6], "show": [2, 5, 6], "order": [2, 3, 4, 5, 6], "combin": [2, 3], "them": 2, "ifthen": [2, 6], "method": [2, 3], "propcalc": [2, 4, 5, 6], "f": [2, 4, 6], "g": [2, 4, 6], "algebra": [2, 6], "truth": [2, 3, 4, 5, 6], "tabl": [2, 3, 6], "from": [2, 3, 4, 6], "truthtabl": [2, 3, 5, 6], "end": [2, 3, 5, 6], "3": [2, 3, 5, 6], "start": [2, 3, 6], "4": [2, 3, 5, 6], "now": [2, 3, 4, 6], "set": [2, 3, 4, 6], "And": [2, 6], "convert": [2, 4, 6], "conjunct": [2, 6], "normal": [2, 6], "convert_cnf_t": [2, 6], "convert_cnf_recur": [2, 6], "Or": [2, 6], "determin": [2, 3, 6], "i": [2, 3, 4, 5, 6], "satisfi": [2, 6], "contradict": [2, 3, 6], "tautologi": [2, 3, 6], "is_satisfi": [2, 6], "is_contradict": [2, 6], "is_tautologi": [2, 6], "equal": [2, 6], "compar": [2, 6], "semant": [2, 4, 6], "equival": [2, 5, 6], "It": [2, 3, 4, 5, 6], "error": [2, 3, 4, 5, 6], "bad": [2, 6], "syntax": [2, 3, 4, 6], "traceback": [2, 3, 6], "most": [2, 3, 4, 6], "recent": [2, 3, 6], "call": [2, 3, 5, 6], "last": [2, 3, 6], "syntaxerror": [2, 6], "malform": [2, 3, 6], "statement": [2, 3, 4, 5, 6], "also": [2, 3, 6], "abid": [2, 6], "name": [2, 3, 5, 6], "convent": [2, 6], "9b": [2, 6], "nameerror": [2, 6], "invalid": [2, 3, 6], "identifi": [2, 6], "must": [2, 3, 6], "begin": [2, 5, 6], "03": [2, 3, 4, 5], "ad": [2, 4, 6], "polish_not": 2, "full_tre": [2, 4], "impli": 2, "class": [2, 3, 5], "boolformula": [2, 6], "booleanformula": [2, 4, 6], "exp": 2, "vo": [2, 5], "base": [2, 3, 5], "object": [2, 3, 5], "self": 2, "manipul": [2, 3], "thei": [2, 3, 4], "appear": [2, 3, 4, 5], "each": [2, 4, 5], "occur": [2, 4, 5], "onc": [2, 5], "add_stat": 2, "other": [2, 3], "two": [2, 3, 4], "instanc": [2, 4, 5, 6], "right": [2, 3], "new": [2, 3, 4], "": [2, 3, 4, 5, 6], "convert_cnf": 2, "cnf": 2, "ar": [2, 3, 4, 6], "alias": 2, "examin": 2, "requir": [2, 3], "o": [2, 3], "2": [2, 3, 4, 5, 6], "n": [2, 3, 4], "time": [2, 3], "where": [2, 3, 4, 5], "number": [2, 3], "function": [2, 3, 4], "work": 2, "rule": 2, "guarante": 2, "worst": 2, "case": 2, "ha": 2, "increas": 2, "size": 2, "alreadi": 2, "close": 2, "exponenti": [2, 3], "blow": 2, "up": [2, 4], "space": 2, "origin": 2, "turn": [2, 4], "larg": 2, "amount": [2, 5], "unless": [2, 4], "being": [2, 4], "typic": 2, "prefer": 2, "vari": 2, "convert_express": 2, "represent": [2, 4, 5, 6], "convert_opt": 2, "tupl": 2, "bool_opt": 2, "along": [2, 5], "A": [2, 3, 4, 5, 6], "convers": 2, "its": [2, 3, 5], "logicpars": [2, 4, 6], "none": [2, 3, 4], "apply_func": [2, 4], "prop": 2, "one": [2, 4, 5], "To": 2, "everi": 2, "pass": [2, 4], "argument": [2, 4, 5], "dist_not": 2, "distribut": 2, "over": 2, "long": 2, "singl": [2, 3, 4], "entir": 2, "dist_or": 2, "follow": [2, 3, 4, 6], "check": 2, "var_valu": 2, "pair": [2, 3, 4], "full": [2, 4, 6], "nest": [2, 4], "find": [2, 4, 5], "perform": [2, 4], "syntact": [2, 4], "get_bit": [2, 3], "x": [2, 3], "bit": [2, 3], "1": [2, 3, 4, 5, 6], "integ": [2, 3, 4], "which": [2, 3, 4, 5], "take": [2, 3], "taken": [2, 3], "0": [2, 3, 4, 5, 6], "low": 2, "8": [2, 3], "have": 2, "out": 2, "rang": [2, 5], "64": 2, "7": [2, 5], "nor": 2, "neg": [2, 5], "should": 2, "handl": [2, 4], "gracefulli": 2, "alwai": 2, "while": 2, "high": 2, "get_next_op": 2, "str": 2, "next": 2, "p": [2, 4], "abra": 2, "cadabra": 2, "paramet": [2, 3, 4], "necessarili": 2, "iff": 2, "doe": 2, "anoth": 2, "h": [2, 4, 6], "is_consequ": 2, "hypothes": 2, "desir": 2, "conclus": 2, "consequ": 2, "synonym": 2, "get_formula": [2, 6], "e": 2, "q": [2, 3, 4], "r": [2, 4], "empti": 2, "12": [2, 6], "some": [2, 6], "make": 2, "cannot": 2, "made": 2, "ani": [2, 5], "length": [2, 3, 4], "plu": 2, "count": [2, 5], "multipl": [2, 4], "ignor": 2, "alpha": [2, 3], "beta": 2, "10": 2, "polish": [2, 4], "notat": 2, "cb": 2, "bc": 2, "reduce_op": 2, "involv": 2, "first": [2, 3], "satformat": 2, "n1": 2, "n0": 2, "see": [2, 3], "www": 2, "ubc": 2, "ca": 2, "hoo": 2, "satlib": 2, "benchmark": 2, "sat": 2, "descript": 2, "If": [2, 4, 5], "been": 2, "pleas": 2, "note": 2, "issu": 2, "to_infix": 2, "prefix": [2, 4], "infix": [2, 4], "man": [2, 5], "monkei": [2, 5], "human": [2, 5], "default": [2, 3, 4, 5], "row": [2, 3], "arrai": [2, 3, 5], "creation": [2, 3], "inclus": 2, "5": [2, 3, 5], "binari": [2, 3, 4, 5], "associ": 2, "column": [2, 5], "logict": [2, 5, 6], "detail": 2, "exclus": 2, "so": 2, "includ": 2, "when": [2, 3, 4, 5], "sent": [2, 3], "respect": 3, "numer": [3, 5], "2007": [3, 4], "william": [3, 5], "stein": [3, 5], "31": 3, "integr": 3, "symboliclog": 3, "print": [3, 5], "log": 3, "print_tabl": 3, "statement1": 3, "statement2": 3, "togeth": 3, "second": [3, 5], "s1": 3, "s2": 3, "oparen": 3, "AND": 3, "cparen": 3, "OR": 3, "whole": 3, "shorten": 3, "prove": 3, "test": 3, "librari": 3, "implement": 3, "notimplementederror": 3, "simplifi": [3, 4], "espresso": 3, "algorithm": 3, "token": [3, 4], "global": [3, 5], "var": 3, "current": 3, "vars_ord": 3, "found": 3, "were": 3, "3fe": 3, "2d": 3, "tack": 3, "front": 3, "NOT": 3, "eval": 3, "tok": [3, 4], "intern": [3, 4], "reli": 3, "eval_and_op": 3, "lval": 3, "rval": 3, "left": 3, "eval_bin_op": 3, "arg": 3, "eval_iff_op": 3, "eval_ifthen_op": 3, "hi": 3, "eval_ltor_tok": 3, "lrtok": 3, "part": 3, "inner": 3, "eval_mon_op": 3, "eval_or_op": 3, "int": 3, "reduce_bin": 3, "monoton": 3, "pointer": 3, "reduce_mono": 3, "replac": 3, "place": 3, "popul": 3, "compos": 4, "unari": 4, "produc": 4, "purpos": 4, "more": 4, "effici": 4, "polish_pars": 4, "relat": 4, "proof": 4, "infer": 4, "That": 4, "meant": 4, "01": 4, "clean": 4, "python": 4, "code": [4, 5], "06": 4, "recover_formula": 4, "recover_formula_intern": 4, "prefix_to_infix": 4, "to_infix_intern": 4, "get_tre": 4, "tree_pars": 4, "distinct": 4, "func": 4, "node": 4, "come": 4, "elsewher": 4, "switch": 4, "entri": 4, "lambda": 4, "j": [4, 6], "k": [4, 6], "parse_ltor": 4, "atom": 4, "doubl": 4, "negat": 4, "cancel": 4, "depend": 4, "repeat": 4, "previou": 4, "prefix_tre": 4, "recov": 4, "recoveri": 4, "simpl": 4, "demonstr": [4, 6], "essenti": 5, "store": 5, "privat": 5, "For": 5, "look": 5, "like": 5, "would": 5, "thu": 5, "6": 5, "accept": 5, "easi": 5, "arbitrari": 5, "get": 5, "letex": 5, "latex": 5, "11": 5, "tabular": 5, "llll": 5, "hline": 5, "nonsens": 5, "9": 5, "provid": 5, "longer": 5, "than": 5, "run": 5, "off": 5, "screen": 5, "get_table_list": 5, "michael": 6, "greenberg": 6, "boolopt": 6, "valid_consequ": 6, "differ": 6, "wai": 6, "l": 6, "m": 6, "possibl": 6, "_a": 6, "u": 6, "v": 6}, "objects": {"sage.logic": [[1, 0, 0, "-", "booleval"], [2, 0, 0, "-", "boolformula"], [3, 0, 0, "-", "logic"], [4, 0, 0, "-", "logicparser"], [5, 0, 0, "-", "logictable"], [6, 0, 0, "-", "propcalc"]], "sage.logic.booleval": [[1, 1, 1, "", "eval_f"], [1, 1, 1, "", "eval_formula"], [1, 1, 1, "", "eval_op"]], "sage.logic.boolformula": [[2, 2, 1, "", "BooleanFormula"], [2, 1, 1, "", "is_consequence"]], "sage.logic.boolformula.BooleanFormula": [[2, 3, 1, "", "add_statement"], [2, 3, 1, "", "convert_cnf"], [2, 3, 1, "", "convert_cnf_recur"], [2, 3, 1, "", "convert_cnf_table"], [2, 3, 1, "", "convert_expression"], [2, 3, 1, "", "convert_opt"], [2, 3, 1, "", "dist_not"], [2, 3, 1, "", "dist_ors"], [2, 3, 1, "", "equivalent"], [2, 3, 1, "", "evaluate"], [2, 3, 1, "", "full_tree"], [2, 3, 1, "", "get_bit"], [2, 3, 1, "", "get_next_op"], [2, 3, 1, "", "iff"], [2, 3, 1, "", "ifthen"], [2, 3, 1, "", "implies"], [2, 3, 1, "", "is_consequence"], [2, 3, 1, "", "is_contradiction"], [2, 3, 1, "", "is_satisfiable"], [2, 3, 1, "", "is_tautology"], [2, 3, 1, "", "length"], [2, 3, 1, "", "polish_notation"], [2, 3, 1, "", "reduce_op"], [2, 3, 1, "", "satformat"], [2, 3, 1, "", "to_infix"], [2, 3, 1, "", "tree"], [2, 3, 1, "", "truthtable"]], "sage.logic.logic": [[3, 2, 1, "", "SymbolicLogic"], [3, 1, 1, "", "eval"], [3, 1, 1, "", "eval_and_op"], [3, 1, 1, "", "eval_bin_op"], [3, 1, 1, "", "eval_iff_op"], [3, 1, 1, "", "eval_ifthen_op"], [3, 1, 1, "", "eval_ltor_toks"], [3, 1, 1, "", "eval_mon_op"], [3, 1, 1, "", "eval_or_op"], [3, 1, 1, "", "get_bit"], [3, 1, 1, "", "reduce_bins"], [3, 1, 1, "", "reduce_monos"], [3, 1, 1, "", "tokenize"]], "sage.logic.logic.SymbolicLogic": [[3, 3, 1, "", "combine"], [3, 3, 1, "", "print_table"], [3, 3, 1, "", "prove"], [3, 3, 1, "", "simplify"], [3, 3, 1, "", "statement"], [3, 3, 1, "", "truthtable"]], "sage.logic.logicparser": [[4, 1, 1, "", "apply_func"], [4, 1, 1, "", "get_trees"], [4, 1, 1, "", "parse"], [4, 1, 1, "", "parse_ltor"], [4, 1, 1, "", "polish_parse"], [4, 1, 1, "", "prefix_to_infix"], [4, 1, 1, "", "recover_formula"], [4, 1, 1, "", "recover_formula_internal"], [4, 1, 1, "", "to_infix_internal"], [4, 1, 1, "", "tokenize"], [4, 1, 1, "", "tree_parse"]], "sage.logic.logictable": [[5, 2, 1, "", "Truthtable"]], "sage.logic.logictable.Truthtable": [[5, 3, 1, "", "get_table_list"]], "sage.logic.propcalc": [[6, 1, 1, "", "consistent"], [6, 1, 1, "", "formula"], [6, 1, 1, "", "get_formulas"]]}, "objtypes": {"0": "py:module", "1": "py:function", "2": "py:class", "3": "py:method"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "function", "Python function"], "2": ["py", "class", "Python class"], "3": ["py", "method", "Python method"]}, "titleterms": {"symbol": [0, 3], "logic": [0, 3, 5], "indic": 0, "tabl": [0, 5], "evalu": 1, "boolean": [1, 2, 4], "formula": [1, 2, 4], "express": 3, "todo": 3, "modul": 4, "creat": 4, "modifi": 4, "pars": 4, "tree": 4, "well": 4, "form": 4, "proposit": 6, "calculu": 6}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.todo": 2, "sphinx": 60}, "alltitles": {"Symbolic Logic": [[0, "symbolic-logic"]], "Indices and Tables": [[0, "indices-and-tables"]], "Evaluation of Boolean Formulas": [[1, "evaluation-of-boolean-formulas"]], "Boolean Formulas": [[2, "boolean-formulas"]], "Symbolic Logic Expressions": [[3, "symbolic-logic-expressions"]], "Todo": [[3, "id1"], [3, "id2"]], "Module that creates and modifies parse trees of well formed boolean formulas.": [[4, "module-that-creates-and-modifies-parse-trees-of-well-formed-boolean-formulas"]], "Logic Tables": [[5, "logic-tables"]], "Propositional Calculus": [[6, "propositional-calculus"]]}, "indexentries": {"eval_f() (in module sage.logic.booleval)": [[1, "sage.logic.booleval.eval_f"]], "eval_formula() (in module sage.logic.booleval)": [[1, "sage.logic.booleval.eval_formula"]], "eval_op() (in module sage.logic.booleval)": [[1, "sage.logic.booleval.eval_op"]], "module": [[1, "module-sage.logic.booleval"], [2, "module-sage.logic.boolformula"], [3, "module-sage.logic.logic"], [4, "module-sage.logic.logicparser"], [5, "module-sage.logic.logictable"], [6, "module-sage.logic.propcalc"]], "sage.logic.booleval": [[1, "module-sage.logic.booleval"]], "booleanformula (class in sage.logic.boolformula)": [[2, "sage.logic.boolformula.BooleanFormula"]], "add_statement() (sage.logic.boolformula.booleanformula method)": [[2, "sage.logic.boolformula.BooleanFormula.add_statement"]], "convert_cnf() (sage.logic.boolformula.booleanformula method)": [[2, "sage.logic.boolformula.BooleanFormula.convert_cnf"]], "convert_cnf_recur() (sage.logic.boolformula.booleanformula method)": [[2, "sage.logic.boolformula.BooleanFormula.convert_cnf_recur"]], "convert_cnf_table() (sage.logic.boolformula.booleanformula method)": [[2, "sage.logic.boolformula.BooleanFormula.convert_cnf_table"]], "convert_expression() (sage.logic.boolformula.booleanformula method)": [[2, "sage.logic.boolformula.BooleanFormula.convert_expression"]], "convert_opt() (sage.logic.boolformula.booleanformula method)": [[2, "sage.logic.boolformula.BooleanFormula.convert_opt"]], "dist_not() (sage.logic.boolformula.booleanformula method)": [[2, "sage.logic.boolformula.BooleanFormula.dist_not"]], "dist_ors() (sage.logic.boolformula.booleanformula method)": [[2, "sage.logic.boolformula.BooleanFormula.dist_ors"]], "equivalent() (sage.logic.boolformula.booleanformula method)": [[2, "sage.logic.boolformula.BooleanFormula.equivalent"]], "evaluate() (sage.logic.boolformula.booleanformula method)": [[2, "sage.logic.boolformula.BooleanFormula.evaluate"]], "full_tree() (sage.logic.boolformula.booleanformula method)": [[2, "sage.logic.boolformula.BooleanFormula.full_tree"]], "get_bit() (sage.logic.boolformula.booleanformula method)": [[2, "sage.logic.boolformula.BooleanFormula.get_bit"]], "get_next_op() (sage.logic.boolformula.booleanformula method)": [[2, "sage.logic.boolformula.BooleanFormula.get_next_op"]], "iff() (sage.logic.boolformula.booleanformula method)": [[2, "sage.logic.boolformula.BooleanFormula.iff"]], "ifthen() (sage.logic.boolformula.booleanformula method)": [[2, "sage.logic.boolformula.BooleanFormula.ifthen"]], "implies() (sage.logic.boolformula.booleanformula method)": [[2, "sage.logic.boolformula.BooleanFormula.implies"]], "is_consequence() (in module sage.logic.boolformula)": [[2, "sage.logic.boolformula.is_consequence"]], "is_consequence() (sage.logic.boolformula.booleanformula method)": [[2, "sage.logic.boolformula.BooleanFormula.is_consequence"]], "is_contradiction() (sage.logic.boolformula.booleanformula method)": [[2, "sage.logic.boolformula.BooleanFormula.is_contradiction"]], "is_satisfiable() (sage.logic.boolformula.booleanformula method)": [[2, "sage.logic.boolformula.BooleanFormula.is_satisfiable"]], "is_tautology() (sage.logic.boolformula.booleanformula method)": [[2, "sage.logic.boolformula.BooleanFormula.is_tautology"]], "length() (sage.logic.boolformula.booleanformula method)": [[2, "sage.logic.boolformula.BooleanFormula.length"]], "polish_notation() (sage.logic.boolformula.booleanformula method)": [[2, "sage.logic.boolformula.BooleanFormula.polish_notation"]], "reduce_op() (sage.logic.boolformula.booleanformula method)": [[2, "sage.logic.boolformula.BooleanFormula.reduce_op"]], "sage.logic.boolformula": [[2, "module-sage.logic.boolformula"]], "satformat() (sage.logic.boolformula.booleanformula method)": [[2, "sage.logic.boolformula.BooleanFormula.satformat"]], "to_infix() (sage.logic.boolformula.booleanformula method)": [[2, "sage.logic.boolformula.BooleanFormula.to_infix"]], "tree() (sage.logic.boolformula.booleanformula method)": [[2, "sage.logic.boolformula.BooleanFormula.tree"]], "truthtable() (sage.logic.boolformula.booleanformula method)": [[2, "sage.logic.boolformula.BooleanFormula.truthtable"]], "symboliclogic (class in sage.logic.logic)": [[3, "sage.logic.logic.SymbolicLogic"]], "combine() (sage.logic.logic.symboliclogic method)": [[3, "sage.logic.logic.SymbolicLogic.combine"]], "eval() (in module sage.logic.logic)": [[3, "sage.logic.logic.eval"]], "eval_and_op() (in module sage.logic.logic)": [[3, "sage.logic.logic.eval_and_op"]], "eval_bin_op() (in module sage.logic.logic)": [[3, "sage.logic.logic.eval_bin_op"]], "eval_iff_op() (in module sage.logic.logic)": [[3, "sage.logic.logic.eval_iff_op"]], "eval_ifthen_op() (in module sage.logic.logic)": [[3, "sage.logic.logic.eval_ifthen_op"]], "eval_ltor_toks() (in module sage.logic.logic)": [[3, "sage.logic.logic.eval_ltor_toks"]], "eval_mon_op() (in module sage.logic.logic)": [[3, "sage.logic.logic.eval_mon_op"]], "eval_or_op() (in module sage.logic.logic)": [[3, "sage.logic.logic.eval_or_op"]], "get_bit() (in module sage.logic.logic)": [[3, "sage.logic.logic.get_bit"]], "print_table() (sage.logic.logic.symboliclogic method)": [[3, "sage.logic.logic.SymbolicLogic.print_table"]], "prove() (sage.logic.logic.symboliclogic method)": [[3, "sage.logic.logic.SymbolicLogic.prove"]], "reduce_bins() (in module sage.logic.logic)": [[3, "sage.logic.logic.reduce_bins"]], "reduce_monos() (in module sage.logic.logic)": [[3, "sage.logic.logic.reduce_monos"]], "sage.logic.logic": [[3, "module-sage.logic.logic"]], "simplify() (sage.logic.logic.symboliclogic method)": [[3, "sage.logic.logic.SymbolicLogic.simplify"]], "statement() (sage.logic.logic.symboliclogic method)": [[3, "sage.logic.logic.SymbolicLogic.statement"]], "tokenize() (in module sage.logic.logic)": [[3, "sage.logic.logic.tokenize"]], "truthtable() (sage.logic.logic.symboliclogic method)": [[3, "sage.logic.logic.SymbolicLogic.truthtable"]], "apply_func() (in module sage.logic.logicparser)": [[4, "sage.logic.logicparser.apply_func"]], "get_trees() (in module sage.logic.logicparser)": [[4, "sage.logic.logicparser.get_trees"]], "parse() (in module sage.logic.logicparser)": [[4, "sage.logic.logicparser.parse"]], "parse_ltor() (in module sage.logic.logicparser)": [[4, "sage.logic.logicparser.parse_ltor"]], "polish_parse() (in module sage.logic.logicparser)": [[4, "sage.logic.logicparser.polish_parse"]], "prefix_to_infix() (in module sage.logic.logicparser)": [[4, "sage.logic.logicparser.prefix_to_infix"]], "recover_formula() (in module sage.logic.logicparser)": [[4, "sage.logic.logicparser.recover_formula"]], "recover_formula_internal() (in module sage.logic.logicparser)": [[4, "sage.logic.logicparser.recover_formula_internal"]], "sage.logic.logicparser": [[4, "module-sage.logic.logicparser"]], "to_infix_internal() (in module sage.logic.logicparser)": [[4, "sage.logic.logicparser.to_infix_internal"]], "tokenize() (in module sage.logic.logicparser)": [[4, "sage.logic.logicparser.tokenize"]], "tree_parse() (in module sage.logic.logicparser)": [[4, "sage.logic.logicparser.tree_parse"]], "truthtable (class in sage.logic.logictable)": [[5, "sage.logic.logictable.Truthtable"]], "get_table_list() (sage.logic.logictable.truthtable method)": [[5, "sage.logic.logictable.Truthtable.get_table_list"]], "sage.logic.logictable": [[5, "module-sage.logic.logictable"]], "consistent() (in module sage.logic.propcalc)": [[6, "sage.logic.propcalc.consistent"]], "formula() (in module sage.logic.propcalc)": [[6, "sage.logic.propcalc.formula"]], "get_formulas() (in module sage.logic.propcalc)": [[6, "sage.logic.propcalc.get_formulas"]], "sage.logic.propcalc": [[6, "module-sage.logic.propcalc"]]}})
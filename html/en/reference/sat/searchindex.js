Search.setIndex({"docnames": ["index", "sage/sat/boolean_polynomials", "sage/sat/converters/polybori", "sage/sat/solvers/cryptominisat", "sage/sat/solvers/dimacs", "sage/sat/solvers/picosat", "sage/sat/solvers/sat_lp", "sage/sat/solvers/satsolver"], "filenames": ["index.rst", "sage/sat/boolean_polynomials.rst", "sage/sat/converters/polybori.rst", "sage/sat/solvers/cryptominisat.rst", "sage/sat/solvers/dimacs.rst", "sage/sat/solvers/picosat.rst", "sage/sat/solvers/sat_lp.rst", "sage/sat/solvers/satsolver.rst"], "titles": ["Sat", "SAT Functions for Boolean Polynomials", "An ANF to CNF Converter using a Dense/Sparse Strategy", "CryptoMiniSat Solver", "SAT-Solvers via DIMACS Files", "PicoSAT Solver", "Solve SAT problems Integer Linear Programming", "Abstract SAT Solver"], "terms": {"sage": [0, 1, 2, 3, 4, 5, 6, 7], "support": [0, 1, 2, 4], "solv": [0, 1, 4, 7], "claus": [0, 1, 2, 3, 4, 5, 6, 7], "conjunct": 0, "normal": [0, 1], "form": [0, 2], "see": [0, 1, 4, 6, 7], "wikipedia": 0, "articl": 0, "conjunctive_normal_form": 0, "i": [0, 1, 2, 3, 4, 5, 6, 7], "e": [0, 2, 3, 4, 5, 6, 7], "via": 0, "an": [0, 1, 3, 4, 5, 6, 7], "inspir": 0, "usual": [0, 2, 4], "dimac": [0, 2, 3, 5, 7], "format": [0, 3, 4, 5, 7], "us": [0, 1, 3, 4, 5, 6, 7], "sg09": 0, "For": [0, 1, 2, 4, 6], "exampl": [0, 1, 2, 3, 4, 5, 6, 7], "express": 0, "x1": [0, 3], "OR": 0, "x2": 0, "NOT": 0, "x3": 0, "should": [0, 3, 5], "true": [0, 1, 2, 3, 4, 7], "we": [0, 1, 2], "write": [0, 2, 4], "1": [0, 1, 2, 3, 4, 5, 6, 7], "2": [0, 1, 2, 3, 4, 5, 6, 7], "3": [0, 1, 2, 3, 4, 5, 7], "variabl": [0, 1, 2, 3, 4, 5, 6, 7], "must": [0, 4, 7], "start": [0, 4, 7], "one": [0, 2, 3, 4, 6, 7], "By": 0, "default": [0, 1, 2, 3, 4, 5, 6, 7], "instanc": [0, 1, 2, 4, 6, 7], "integ": [0, 3, 4, 5, 7], "linear": 0, "program": 0, "numer": 0, "mip": 0, "ani": [0, 1, 3, 4, 5, 6, 7], "input": [0, 1, 2, 3, 4, 5, 6, 7], "easili": 0, "blueprint": 0, "ship": 0, "pre": 0, "written": [0, 3, 4, 5, 7], "rsat": [0, 4], "r": [0, 1], "glucos": [0, 4, 7], "gl": 0, "furthermor": [0, 1], "provid": [0, 3], "cryptominisat": [0, 1, 4, 6, 7], "cm": 0, "which": [0, 1, 2, 4, 6], "can": [0, 1, 6, 7], "interchang": 0, "base": [0, 2, 3, 4, 5, 6, 7], "thi": [0, 1, 2, 3, 4, 5, 7], "last": [0, 7], "option": [0, 1, 3, 4, 5, 7], "packag": [0, 3, 5, 7], "instal": [0, 3, 5, 7], "accomplish": 0, "type": 0, "follow": [0, 3, 7], "shell": 0, "sagelib": 0, "now": [0, 1, 2], "show": 0, "how": [0, 1], "simpl": [0, 1, 4, 7], "problem": [0, 1, 4, 7], "AND": 0, "In": [0, 1], "": [0, 1, 2, 4, 6, 7], "notat": [0, 7], "add_claus": [0, 3, 4, 5, 6, 7], "random": [0, 2], "none": [0, 1, 2, 3, 4, 5, 6, 7], "fals": [0, 1, 2, 3, 4, 6, 7], "creat": [0, 2, 3, 4, 5, 6, 7], "new": [0, 1, 2, 3, 4, 5, 6, 7], "when": [0, 4, 6], "necessari": 0, "all": [0, 1, 7], "up": 0, "given": [0, 5], "index": [0, 2, 3, 5], "henc": 0, "ad": [0, 2, 4], "liter": [0, 3, 4, 5, 7], "involv": 0, "1000": 0, "intern": [0, 2], "also": [0, 4, 7], "file": [0, 3, 5, 7], "from": [0, 1, 2, 3, 4, 5, 7], "import": [0, 1, 2, 3, 4, 5, 7], "fn": [0, 2, 3, 4, 5], "tmp_filenam": [0, 2, 3, 4, 5], "filenam": [0, 2, 3, 4, 5, 7], "_": [0, 2, 4], "line": [0, 3, 4, 7], "open": [0, 2, 3, 4, 5], "readlin": [0, 4], "print": [0, 2, 3, 4, 5], "p": [0, 2, 3, 4, 5, 7], "cnf": [0, 1, 3, 4, 5, 7], "0": [0, 1, 2, 3, 4, 5, 6, 7], "altern": 0, "These": [0, 1], "pass": [0, 1, 2], "extern": 0, "abstract": 0, "picosat": [0, 7], "convers": [0, 2], "boolean": [0, 2, 3], "polynomi": [0, 2], "known": 0, "algebra": 0, "b": [0, 1, 2], "c": [0, 1, 2, 4, 7], "booleanpolynomialr": [0, 1, 2], "polybori": [0, 1, 2], "cnfencod": [0, 1, 2], "clauses_spars": [0, 2], "read": [0, 2, 3, 4, 5, 7], "anf": [0, 1], "dens": 0, "spars": 0, "strategi": 0, "variou": 0, "function": [0, 2, 4], "make": [0, 3, 4], "work": [0, 1, 3], "easier": 0, "construct": [0, 1, 2, 4, 7], "veri": [0, 1], "small": [0, 1], "scale": [0, 1], "ae": [0, 1], "system": [0, 1], "equat": [0, 1], "sr": [0, 1], "mq": [0, 1], "4": [0, 1, 2, 3, 5], "gf2": [0, 1], "while": [0, 1], "try": [0, 1], "f": [0, 1, 2], "polynomial_system": [0, 1], "break": [0, 1], "except": [0, 1], "zerodivisionerror": [0, 1], "boolean_polynomi": [0, 1], "solve_sat": [0, 1], "pycryptosat": [0, 1, 3, 7], "sub": [0, 1], "sequenc": [0, 1], "36": [0, 1], "refer": 0, "http": [0, 4, 7], "reason": [0, 4], "ucla": [0, 4], "edu": [0, 4, 7], "www": [0, 4, 7], "lri": 0, "fr": [0, 4], "simon": 0, "page": 0, "msoo": [0, 7], "org": [0, 7], "satcompetit": [0, 7], "2009": [0, 2, 7], "benchmarks2009": [0, 7], "html": [0, 7], "modul": [0, 4], "search": 0, "highlevel": 1, "learn": 1, "context": 1, "mean": [1, 4, 6], "ideal": 1, "span": 1, "origin": [1, 3, 4, 5, 7], "author": [1, 2, 3, 4, 5, 7], "martin": [1, 2, 3, 4, 7], "albrecht": [1, 2, 3, 4, 7], "2012": [1, 2, 3, 4, 7], "initi": [1, 2, 4, 5, 6], "version": [1, 2, 3, 4, 5, 7], "convert": 1, "solver": [1, 2, 6], "max_learnt_length": 1, "interreduct": 1, "kwd": [1, 4, 7], "run": [1, 4], "produc": [1, 4], "class": [1, 3, 5, 6, 7], "object": [1, 7], "If": [1, 2, 3, 4, 5, 6, 7], "onli": [1, 7], "length": [1, 2, 4], "max_length_learnt": 1, "ar": [1, 2, 3, 4, 5, 6, 7], "consid": [1, 3, 5], "inter": 1, "reduc": [1, 2], "result": 1, "more": [1, 2, 6], "paramet": [1, 6], "prefix": 1, "them": 1, "c_": 1, "s_": 1, "respect": 1, "increas": 1, "verbos": [1, 3, 4, 5, 6], "level": [1, 4, 6], "s_verbos": 1, "output": [1, 2, 3, 4, 5, 7], "A": [1, 4, 7], "learn_sat": 1, "set_random_se": 1, "2300": 1, "h": 1, "k033": 1, "n": [1, 7], "target_vari": 1, "number": [1, 2, 3, 4, 5, 6, 7], "solut": [1, 4], "return": [1, 2, 3, 4, 5, 6, 7], "infin": 1, "ha": [1, 3, 4, 5, 6, 7], "least": 1, "otherwis": [1, 2, 7], "list": [1, 2, 3, 4, 5, 7], "The": [1, 2, 3, 4, 5, 6, 7], "element": [1, 3, 4, 5, 6, 7], "exclud": 1, "particular": 1, "combin": 1, "assign": [1, 4], "further": 1, "denot": 1, "valu": [1, 7], "pair": 1, "appear": [1, 4], "exclus": 1, "dictionari": 1, "each": [1, 2], "contain": [1, 4, 7], "workaround": 1, "trac": [1, 7], "31891": 1, "time": 1, "few": 1, "through": [1, 7], "c_max_vars_spars": 1, "c_cutting_numb": 1, "8": [1, 2, 3, 5], "three": 1, "ask": 1, "specif": 1, "l": 1, "len": 1, "sort": [1, 2, 6], "d": [1, 2], "next": 1, "first": [1, 2, 3, 4, 7], "case": 1, "interest": 1, "here": [1, 6], "gener": [1, 2, 3, 4, 5, 6, 7], "cubic": 1, "sbox": 1, "ticket": [1, 7], "26676": 1, "ring": [1, 2, 6], "multi_polynomial_sequ": 1, "polynomialsequ": 1, "long": 1, "crypto": 1, "allow_zero_invers": 1, "sb": 1, "eq": 1, "degre": 1, "map": [1, 2], "str": 1, "join": 1, "16": [1, 2], "sls_ae": 1, "256": 1, "although": 1, "instead": 1, "discourag": 1, "becaus": 1, "state": 1, "two": 2, "wa": 2, "cb2007": 2, "basi": 2, "part": 2, "It": 2, "later": 2, "improv": 2, "mate": 2, "soo": 2, "second": 2, "michael": 2, "brickenstein": 2, "truth": 2, "tabl": 2, "approach": 2, "2008": 2, "09": 2, "anf2cnf": 2, "py": 2, "2010": 2, "unifi": 2, "sat": [2, 3, 5], "max_vars_spars": 2, "6": [2, 3, 5, 6], "use_xor_claus": 2, "cutting_numb": 2, "random_se": 2, "anf2cnfconvert": 2, "distinguish": 2, "those": 2, "most": [2, 7], "represent": 2, "introduc": [2, 7], "monomi": 2, "linearis": 2, "either": [2, 4], "split": 2, "xor": [2, 3, 7], "chain": 2, "chunk": 2, "underli": 2, "behaviour": 2, "disabl": 2, "__init__": [2, 4], "over": [2, 6], "pbori": 2, "maximum": 2, "direct": 2, "after": [2, 3], "set": [2, 3, 4, 5, 6, 7], "seed": 2, "compar": 2, "phi": 2, "clauses_dens": 2, "5": [2, 3, 5], "constructor": 2, "__call__": [2, 4], "encod": 2, "iter": 2, "booleanpolynomi": 2, "invers": 2, "int": 2, "9": [2, 3, 5], "nvariabl": 2, "7": [2, 3, 5], "m": 2, "correspond": [2, 3, 5, 7], "call": [2, 4, 7], "queri": 2, "befor": 2, "old": 2, "note": [2, 3, 5, 7], "correct": 2, "cach": 2, "permut": 2, "properti": 2, "ce": 2, "var": [2, 3, 4, 5, 6, 7], "split_xor": 2, "monomial_list": 2, "equal_zero": 2, "subchain": 2, "constant": 2, "coeffici": 2, "zero": [2, 4], "10": 2, "11": 2, "to_polynomi": 2, "decis": [2, 3, 4, 5, 7], "thin": 2, "wrapper": 2, "around": 2, "where": [2, 3, 4, 5, 7], "keep": 2, "track": 2, "someth": 2, "zero_block": 2, "divid": 2, "block": 2, "item": 2, "randomis": 2, "reli": [3, 5], "python": [3, 5, 7], "bind": [3, 5], "upstream": 3, "your": [3, 5], "thierri": [3, 5], "monteil": [3, 5], "2017": 3, "complet": 3, "rewrit": 3, "cython": 3, "interfac": [3, 4, 7], "confl_limit": 3, "thread": 3, "satsolv": [3, 4, 5, 6, 7], "between": [3, 5], "15": 3, "abort": 3, "mani": 3, "conflict": [3, 7], "never": 3, "cpu": 3, "lit": [3, 4, 5, 6, 7], "add": [3, 4, 5, 6, 7], "tupl": [3, 4, 5, 6, 7], "nonzero": [3, 5], "ab": [3, 4, 5, 6, 7], "greater": [3, 4, 5, 6, 7], "than": [3, 4, 5, 6, 7], "so": [3, 4, 5, 6, 7], "far": [3, 4, 5, 6, 7], "automat": [3, 4, 5, 6, 7], "add_xor_claus": 3, "rh": [3, 4, 7], "posit": 3, "whether": 3, "evalu": 3, "is_xor": [3, 4, 7], "alwai": [3, 4, 7], "point": [3, 4, 5, 7], "writabl": [3, 4, 5, 7], "standard": 3, "augment": 3, "extens": 3, "have": [3, 4], "x": [3, 7], "front": 3, "invert": 3, "equival": [3, 4], "nvar": [3, 4, 5, 6, 7], "compat": [3, 4, 5], "convent": [3, 4, 5, 7], "maxim": [3, 5], "intermedi": [3, 5], "still": [3, 5], "accept": [3, 4, 5], "other": [3, 4, 5], "ignor": [3, 4, 5], "popular": [4, 7], "implement": 4, "infrastructur": 4, "easi": 4, "some": 4, "current": 4, "includ": 4, "our": [4, 7], "consist": [4, 7], "pythion": 4, "howev": [4, 7], "allow": [4, 7], "s\u00e9bastien": 4, "labb\u00e9": 4, "2018": [4, 5], "2023": 4, "kissat": 4, "command": 4, "user": 4, "won": 4, "t": 4, "directli": 4, "inherit": [4, 7], "name": [4, 7], "string": [4, 7], "mai": 4, "valid": 4, "temporari": 4, "chosen": 4, "silent": 4, "anyth": 4, "els": [4, 7], "assumpt": [4, 7], "pars": 4, "th": 4, "entri": 4, "hold": 4, "unsat": [4, 7], "With": [4, 7], "glucosesyrup": 4, "static": 4, "render_dimac": 4, "nlit": 4, "extend": [4, 7], "specifi": [4, 6, 7], "inform": [4, 6], "labri": 4, "perso": 4, "lsimon": 4, "verb": 4, "model": 4, "solver1": 4, "solver2": 4, "hundr": 4, "solver3": 4, "100": 4, "syrup": [4, 7], "parallel": 4, "fmv": 4, "jku": 4, "q": 4, "v": [4, 6], "pycosat": [5, 7], "prop_limit": 5, "propag": 5, "limit": 5, "defin": [6, 7], "its": 6, "mixedintegerlinearprogram": 6, "Its": 6, "perform": 6, "expect": 6, "slower": 6, "sat_lp": 6, "satlp": [6, 7], "integrality_toler": 6, "001": 6, "mix": 6, "milp": 6, "method": [6, 7], "lp": [6, 7], "quiet": 6, "inexact": 6, "get_valu": 6, "ilp": [6, 7], "u": 6, "graph": 6, "cyclegraph": 6, "edg": 6, "label": 6, "arg": 7, "select": 7, "admiss": 7, "avail": 7, "traceback": 7, "recent": 7, "notimplementederror": 7, "conflict_claus": 7, "learnt_claus": 7, "unitary_onli": 7, "learnt": 7, "unitari": 7, "lazili": 7, "well": 7, "peopl": 7, "sc": 7, "fsu": 7, "jburkardt": 7, "data": 7, "eli": 7, "dvo": 7, "ru": 7, "lab_11": 7, "glpk": 7, "doc": 7, "cnfsat": 7, "pdf": 7, "differ": 7, "were": 7, "summar": 7, "discuss": 7, "16924": 7, "assum": 7, "comment": 7, "header": 7, "everi": 7, "end": 7, "io": 7, "stringio": 7, "file_object": 7, "sampl": 7, "np": 7, "n1": 7, "n2": 7, "n3": 7, "nx1": 7}, "objects": {"sage.sat": [[1, 0, 0, "-", "boolean_polynomials"]], "sage.sat.boolean_polynomials": [[1, 1, 1, "", "learn"], [1, 1, 1, "", "solve"]], "sage.sat.converters": [[2, 0, 0, "-", "polybori"]], "sage.sat.converters.polybori": [[2, 2, 1, "", "CNFEncoder"]], "sage.sat.converters.polybori.CNFEncoder": [[2, 3, 1, "", "__call__"], [2, 3, 1, "", "__init__"], [2, 3, 1, "", "clauses"], [2, 3, 1, "", "clauses_dense"], [2, 3, 1, "", "clauses_sparse"], [2, 3, 1, "", "monomial"], [2, 4, 1, "", "permutations"], [2, 5, 1, "", "phi"], [2, 3, 1, "", "split_xor"], [2, 3, 1, "", "to_polynomial"], [2, 3, 1, "", "var"], [2, 3, 1, "", "zero_blocks"]], "sage.sat.solvers": [[3, 0, 0, "-", "cryptominisat"], [4, 0, 0, "-", "dimacs"], [5, 0, 0, "-", "picosat"], [6, 0, 0, "-", "sat_lp"], [7, 0, 0, "-", "satsolver"]], "sage.sat.solvers.cryptominisat": [[3, 2, 1, "", "CryptoMiniSat"]], "sage.sat.solvers.cryptominisat.CryptoMiniSat": [[3, 3, 1, "", "add_clause"], [3, 3, 1, "", "add_xor_clause"], [3, 3, 1, "", "clauses"], [3, 3, 1, "", "nvars"], [3, 3, 1, "", "var"]], "sage.sat.solvers.dimacs": [[4, 2, 1, "", "DIMACS"], [4, 2, 1, "", "Glucose"], [4, 2, 1, "", "GlucoseSyrup"], [4, 2, 1, "", "Kissat"], [4, 2, 1, "", "RSat"]], "sage.sat.solvers.dimacs.DIMACS": [[4, 3, 1, "", "__call__"], [4, 3, 1, "", "__init__"], [4, 3, 1, "", "add_clause"], [4, 3, 1, "", "clauses"], [4, 4, 1, "", "command"], [4, 3, 1, "", "nvars"], [4, 3, 1, "", "render_dimacs"], [4, 3, 1, "", "var"], [4, 3, 1, "", "write"]], "sage.sat.solvers.dimacs.Glucose": [[4, 4, 1, "", "command"]], "sage.sat.solvers.dimacs.GlucoseSyrup": [[4, 4, 1, "", "command"]], "sage.sat.solvers.dimacs.Kissat": [[4, 4, 1, "", "command"]], "sage.sat.solvers.dimacs.RSat": [[4, 4, 1, "", "command"]], "sage.sat.solvers.picosat": [[5, 2, 1, "", "PicoSAT"]], "sage.sat.solvers.picosat.PicoSAT": [[5, 3, 1, "", "add_clause"], [5, 3, 1, "", "clauses"], [5, 3, 1, "", "nvars"], [5, 3, 1, "", "var"]], "sage.sat.solvers.sat_lp": [[6, 2, 1, "", "SatLP"]], "sage.sat.solvers.sat_lp.SatLP": [[6, 3, 1, "", "add_clause"], [6, 3, 1, "", "nvars"], [6, 3, 1, "", "var"]], "sage.sat.solvers.satsolver": [[7, 1, 1, "", "SAT"], [7, 2, 1, "", "SatSolver"]], "sage.sat.solvers.satsolver.SatSolver": [[7, 3, 1, "", "add_clause"], [7, 3, 1, "", "clauses"], [7, 3, 1, "", "conflict_clause"], [7, 3, 1, "", "learnt_clauses"], [7, 3, 1, "", "nvars"], [7, 3, 1, "", "read"], [7, 3, 1, "", "var"]]}, "objtypes": {"0": "py:module", "1": "py:function", "2": "py:class", "3": "py:method", "4": "py:attribute", "5": "py:property"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "function", "Python function"], "2": ["py", "class", "Python class"], "3": ["py", "method", "Python method"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "property", "Python property"]}, "titleterms": {"sat": [0, 1, 4, 6, 7], "solver": [0, 3, 4, 5, 7], "detail": 0, "specif": 0, "convert": [0, 2], "convertert": 0, "highlevel": 0, "interfac": 0, "indic": 0, "tabl": 0, "function": 1, "boolean": 1, "polynomi": 1, "an": 2, "anf": 2, "cnf": 2, "us": 2, "dens": 2, "spars": 2, "strategi": 2, "class": [2, 4], "method": [2, 4], "cryptominisat": 3, "via": 4, "dimac": 4, "file": 4, "picosat": 5, "solv": 6, "problem": 6, "integ": 6, "linear": 6, "program": 6, "abstract": 7}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.todo": 2, "sphinx": 57}, "alltitles": {"Sat": [[0, "sat"]], "Solvers": [[0, "solvers"]], "Details on Specific Solvers": [[0, "details-on-specific-solvers"]], "Converters": [[0, "converters"]], "Details on Specific Converterts": [[0, "details-on-specific-converterts"]], "Highlevel Interfaces": [[0, "highlevel-interfaces"]], "Details on Specific Highlevel Interfaces": [[0, "details-on-specific-highlevel-interfaces"]], "Indices and Tables": [[0, "indices-and-tables"]], "SAT Functions for Boolean Polynomials": [[1, "sat-functions-for-boolean-polynomials"]], "Functions": [[1, "functions"]], "An ANF to CNF Converter using a Dense/Sparse Strategy": [[2, "an-anf-to-cnf-converter-using-a-dense-sparse-strategy"]], "Classes and Methods": [[2, "classes-and-methods"], [4, "classes-and-methods"]], "CryptoMiniSat Solver": [[3, "cryptominisat-solver"]], "SAT-Solvers via DIMACS Files": [[4, "sat-solvers-via-dimacs-files"]], "PicoSAT Solver": [[5, "picosat-solver"]], "Solve SAT problems Integer Linear Programming": [[6, "solve-sat-problems-integer-linear-programming"]], "Abstract SAT Solver": [[7, "abstract-sat-solver"]]}, "indexentries": {"learn() (in module sage.sat.boolean_polynomials)": [[1, "sage.sat.boolean_polynomials.learn"]], "module": [[1, "module-sage.sat.boolean_polynomials"], [2, "module-sage.sat.converters.polybori"], [3, "module-sage.sat.solvers.cryptominisat"], [4, "module-sage.sat.solvers.dimacs"], [5, "module-sage.sat.solvers.picosat"], [6, "module-sage.sat.solvers.sat_lp"], [7, "module-sage.sat.solvers.satsolver"]], "sage.sat.boolean_polynomials": [[1, "module-sage.sat.boolean_polynomials"]], "solve() (in module sage.sat.boolean_polynomials)": [[1, "sage.sat.boolean_polynomials.solve"]], "cnfencoder (class in sage.sat.converters.polybori)": [[2, "sage.sat.converters.polybori.CNFEncoder"]], "__call__() (sage.sat.converters.polybori.cnfencoder method)": [[2, "sage.sat.converters.polybori.CNFEncoder.__call__"]], "__init__() (sage.sat.converters.polybori.cnfencoder method)": [[2, "sage.sat.converters.polybori.CNFEncoder.__init__"]], "clauses() (sage.sat.converters.polybori.cnfencoder method)": [[2, "sage.sat.converters.polybori.CNFEncoder.clauses"]], "clauses_dense() (sage.sat.converters.polybori.cnfencoder method)": [[2, "sage.sat.converters.polybori.CNFEncoder.clauses_dense"]], "clauses_sparse() (sage.sat.converters.polybori.cnfencoder method)": [[2, "sage.sat.converters.polybori.CNFEncoder.clauses_sparse"]], "monomial() (sage.sat.converters.polybori.cnfencoder method)": [[2, "sage.sat.converters.polybori.CNFEncoder.monomial"]], "permutations (sage.sat.converters.polybori.cnfencoder attribute)": [[2, "sage.sat.converters.polybori.CNFEncoder.permutations"]], "phi (sage.sat.converters.polybori.cnfencoder property)": [[2, "sage.sat.converters.polybori.CNFEncoder.phi"]], "sage.sat.converters.polybori": [[2, "module-sage.sat.converters.polybori"]], "split_xor() (sage.sat.converters.polybori.cnfencoder method)": [[2, "sage.sat.converters.polybori.CNFEncoder.split_xor"]], "to_polynomial() (sage.sat.converters.polybori.cnfencoder method)": [[2, "sage.sat.converters.polybori.CNFEncoder.to_polynomial"]], "var() (sage.sat.converters.polybori.cnfencoder method)": [[2, "sage.sat.converters.polybori.CNFEncoder.var"]], "zero_blocks() (sage.sat.converters.polybori.cnfencoder method)": [[2, "sage.sat.converters.polybori.CNFEncoder.zero_blocks"]], "cryptominisat (class in sage.sat.solvers.cryptominisat)": [[3, "sage.sat.solvers.cryptominisat.CryptoMiniSat"]], "add_clause() (sage.sat.solvers.cryptominisat.cryptominisat method)": [[3, "sage.sat.solvers.cryptominisat.CryptoMiniSat.add_clause"]], "add_xor_clause() (sage.sat.solvers.cryptominisat.cryptominisat method)": [[3, "sage.sat.solvers.cryptominisat.CryptoMiniSat.add_xor_clause"]], "clauses() (sage.sat.solvers.cryptominisat.cryptominisat method)": [[3, "sage.sat.solvers.cryptominisat.CryptoMiniSat.clauses"]], "nvars() (sage.sat.solvers.cryptominisat.cryptominisat method)": [[3, "sage.sat.solvers.cryptominisat.CryptoMiniSat.nvars"]], "sage.sat.solvers.cryptominisat": [[3, "module-sage.sat.solvers.cryptominisat"]], "var() (sage.sat.solvers.cryptominisat.cryptominisat method)": [[3, "sage.sat.solvers.cryptominisat.CryptoMiniSat.var"]], "dimacs (class in sage.sat.solvers.dimacs)": [[4, "sage.sat.solvers.dimacs.DIMACS"]], "glucose (class in sage.sat.solvers.dimacs)": [[4, "sage.sat.solvers.dimacs.Glucose"]], "glucosesyrup (class in sage.sat.solvers.dimacs)": [[4, "sage.sat.solvers.dimacs.GlucoseSyrup"]], "kissat (class in sage.sat.solvers.dimacs)": [[4, "sage.sat.solvers.dimacs.Kissat"]], "rsat (class in sage.sat.solvers.dimacs)": [[4, "sage.sat.solvers.dimacs.RSat"]], "__call__() (sage.sat.solvers.dimacs.dimacs method)": [[4, "sage.sat.solvers.dimacs.DIMACS.__call__"]], "__init__() (sage.sat.solvers.dimacs.dimacs method)": [[4, "sage.sat.solvers.dimacs.DIMACS.__init__"]], "add_clause() (sage.sat.solvers.dimacs.dimacs method)": [[4, "sage.sat.solvers.dimacs.DIMACS.add_clause"]], "clauses() (sage.sat.solvers.dimacs.dimacs method)": [[4, "sage.sat.solvers.dimacs.DIMACS.clauses"]], "command (sage.sat.solvers.dimacs.dimacs attribute)": [[4, "sage.sat.solvers.dimacs.DIMACS.command"]], "command (sage.sat.solvers.dimacs.glucose attribute)": [[4, "sage.sat.solvers.dimacs.Glucose.command"]], "command (sage.sat.solvers.dimacs.glucosesyrup attribute)": [[4, "sage.sat.solvers.dimacs.GlucoseSyrup.command"]], "command (sage.sat.solvers.dimacs.kissat attribute)": [[4, "sage.sat.solvers.dimacs.Kissat.command"]], "command (sage.sat.solvers.dimacs.rsat attribute)": [[4, "sage.sat.solvers.dimacs.RSat.command"]], "nvars() (sage.sat.solvers.dimacs.dimacs method)": [[4, "sage.sat.solvers.dimacs.DIMACS.nvars"]], "render_dimacs() (sage.sat.solvers.dimacs.dimacs static method)": [[4, "sage.sat.solvers.dimacs.DIMACS.render_dimacs"]], "sage.sat.solvers.dimacs": [[4, "module-sage.sat.solvers.dimacs"]], "var() (sage.sat.solvers.dimacs.dimacs method)": [[4, "sage.sat.solvers.dimacs.DIMACS.var"]], "write() (sage.sat.solvers.dimacs.dimacs method)": [[4, "sage.sat.solvers.dimacs.DIMACS.write"]], "picosat (class in sage.sat.solvers.picosat)": [[5, "sage.sat.solvers.picosat.PicoSAT"]], "add_clause() (sage.sat.solvers.picosat.picosat method)": [[5, "sage.sat.solvers.picosat.PicoSAT.add_clause"]], "clauses() (sage.sat.solvers.picosat.picosat method)": [[5, "sage.sat.solvers.picosat.PicoSAT.clauses"]], "nvars() (sage.sat.solvers.picosat.picosat method)": [[5, "sage.sat.solvers.picosat.PicoSAT.nvars"]], "sage.sat.solvers.picosat": [[5, "module-sage.sat.solvers.picosat"]], "var() (sage.sat.solvers.picosat.picosat method)": [[5, "sage.sat.solvers.picosat.PicoSAT.var"]], "satlp (class in sage.sat.solvers.sat_lp)": [[6, "sage.sat.solvers.sat_lp.SatLP"]], "add_clause() (sage.sat.solvers.sat_lp.satlp method)": [[6, "sage.sat.solvers.sat_lp.SatLP.add_clause"]], "nvars() (sage.sat.solvers.sat_lp.satlp method)": [[6, "sage.sat.solvers.sat_lp.SatLP.nvars"]], "sage.sat.solvers.sat_lp": [[6, "module-sage.sat.solvers.sat_lp"]], "var() (sage.sat.solvers.sat_lp.satlp method)": [[6, "sage.sat.solvers.sat_lp.SatLP.var"]], "sat() (in module sage.sat.solvers.satsolver)": [[7, "sage.sat.solvers.satsolver.SAT"]], "satsolver (class in sage.sat.solvers.satsolver)": [[7, "sage.sat.solvers.satsolver.SatSolver"]], "add_clause() (sage.sat.solvers.satsolver.satsolver method)": [[7, "sage.sat.solvers.satsolver.SatSolver.add_clause"]], "clauses() (sage.sat.solvers.satsolver.satsolver method)": [[7, "sage.sat.solvers.satsolver.SatSolver.clauses"]], "conflict_clause() (sage.sat.solvers.satsolver.satsolver method)": [[7, "sage.sat.solvers.satsolver.SatSolver.conflict_clause"]], "learnt_clauses() (sage.sat.solvers.satsolver.satsolver method)": [[7, "sage.sat.solvers.satsolver.SatSolver.learnt_clauses"]], "nvars() (sage.sat.solvers.satsolver.satsolver method)": [[7, "sage.sat.solvers.satsolver.SatSolver.nvars"]], "read() (sage.sat.solvers.satsolver.satsolver method)": [[7, "sage.sat.solvers.satsolver.SatSolver.read"]], "sage.sat.solvers.satsolver": [[7, "module-sage.sat.solvers.satsolver"]], "var() (sage.sat.solvers.satsolver.satsolver method)": [[7, "sage.sat.solvers.satsolver.SatSolver.var"]]}})
Search.setIndex({"docnames": ["index", "sage/crypto/block_cipher/des", "sage/crypto/block_cipher/miniaes", "sage/crypto/block_cipher/present", "sage/crypto/block_cipher/sdes", "sage/crypto/boolean_function", "sage/crypto/cipher", "sage/crypto/classical", "sage/crypto/classical_cipher", "sage/crypto/cryptosystem", "sage/crypto/lattice", "sage/crypto/lfsr", "sage/crypto/lwe", "sage/crypto/mq/mpolynomialsystemgenerator", "sage/crypto/mq/rijndael_gf", "sage/crypto/mq/sr", "sage/crypto/public_key/blum_goldwasser", "sage/crypto/sbox", "sage/crypto/sboxes", "sage/crypto/stream", "sage/crypto/stream_cipher", "sage/crypto/util"], "filenames": ["index.rst", "sage/crypto/block_cipher/des.rst", "sage/crypto/block_cipher/miniaes.rst", "sage/crypto/block_cipher/present.rst", "sage/crypto/block_cipher/sdes.rst", "sage/crypto/boolean_function.rst", "sage/crypto/cipher.rst", "sage/crypto/classical.rst", "sage/crypto/classical_cipher.rst", "sage/crypto/cryptosystem.rst", "sage/crypto/lattice.rst", "sage/crypto/lfsr.rst", "sage/crypto/lwe.rst", "sage/crypto/mq/mpolynomialsystemgenerator.rst", "sage/crypto/mq/rijndael_gf.rst", "sage/crypto/mq/sr.rst", "sage/crypto/public_key/blum_goldwasser.rst", "sage/crypto/sbox.rst", "sage/crypto/sboxes.rst", "sage/crypto/stream.rst", "sage/crypto/stream_cipher.rst", "sage/crypto/util.rst"], "titles": ["Cryptography", "DES", "Mini-AES", "PRESENT", "Simplified DES", "Boolean functions", "Ciphers", "Classical Cryptosystems", "Classical Ciphers", "Cryptosystems", "Hard Lattice Generator", "Linear feedback shift register (LFSR) sequence commands", "(Ring-)LWE oracle generators", "Abstract base class for generators of polynomial systems", "Rijndael-GF", "Small Scale Variants of the AES (SR) Polynomial System Generator", "Blum-Goldwasser Probabilistic Encryption", "S-Boxes and Their Algebraic Representations", "S-Boxes used in cryptographic schemes", "Stream Cryptosystems", "Stream Ciphers", "Utility Functions for Cryptography"], "terms": {"cryptosystem": [0, 20], "cipher": [0, 1, 2, 3, 4, 5, 7, 9, 11, 14, 17, 19], "classic": [0, 9], "simplifi": [0, 2], "de": [0, 2, 10, 13], "mini": [0, 4, 14, 15], "ae": [0, 4, 14, 17, 18], "present": [0, 17, 18, 19], "blum": [0, 19, 21], "goldwass": 0, "probabilist": 0, "encrypt": [0, 1, 2, 3, 4, 7, 8, 9, 10, 12, 14, 15], "stream": [0, 11], "linear": [0, 3, 5, 7, 12, 15, 17, 19, 20], "feedback": [0, 19, 20], "shift": [0, 2, 4, 7, 8, 9, 14, 19, 20], "regist": [0, 3, 19, 20], "lfsr": [0, 5, 20], "sequenc": [0, 7, 15, 19], "command": 0, "util": [0, 14, 16], "function": [0, 2, 3, 4, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "boolean": [0, 1, 3, 15, 17], "": [0, 2, 3, 4, 5, 7, 10, 11, 12, 13, 14, 15, 19], "box": [0, 2, 3, 4, 15], "Their": 0, "algebra": [0, 5, 14, 15], "represent": [0, 1, 2, 3, 4, 10, 12, 14, 15, 16, 21], "us": [0, 1, 2, 3, 4, 5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19], "cryptograph": [0, 12, 17, 21], "scheme": [0, 16], "abstract": 0, "base": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 14, 15, 16, 17, 19, 20], "class": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 14, 15, 16, 17, 18, 19, 20], "gener": [0, 2, 5, 7, 11, 14, 16, 17, 19, 20, 21], "polynomi": [0, 5, 10, 11, 12, 14, 17, 19, 20], "system": [0, 7, 12, 14], "small": [0, 2, 4, 16, 17, 19, 21], "scale": [0, 2, 4, 17], "variant": [0, 2, 4, 14], "sr": [0, 2, 14, 17], "rijndael": [0, 15], "gf": [0, 1, 2, 3, 5, 11, 15, 17, 18, 19, 20], "hard": 0, "lattic": [0, 12], "ring": [0, 5, 9, 13, 15, 17], "lwe": [0, 10], "oracl": 0, "index": [0, 5, 12, 13, 14, 15, 17], "modul": [0, 5, 9, 10, 12, 17, 18], "search": [0, 7], "page": [0, 7, 16, 19], "The": [1, 2, 3, 4, 5, 7, 9, 11, 12, 14, 15, 16, 17, 19, 20, 21], "data": [1, 2, 4], "standard": [1, 2, 4, 12, 15, 17], "thi": [1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21], "file": [1, 3], "implement": [1, 2, 3, 4, 5, 7, 9, 11, 12, 14, 17, 18], "correspond": [1, 2, 3, 4, 5, 7, 14, 16, 17, 21], "kei": [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20], "schedul": [1, 3, 14, 15], "describ": [1, 2, 3, 4, 14, 16, 17, 19], "u": [1, 5, 11, 14, 16, 17, 18, 21], "s1999": [1, 18], "i": [1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "meant": [1, 3, 9], "experiment": [1, 3], "educ": [1, 2, 3, 4], "usag": [1, 3, 14], "onli": [1, 2, 3, 4, 5, 7, 9, 11, 14, 15, 19, 21], "do": [1, 3, 7, 14, 15, 16, 19], "product": [1, 3, 16, 17, 19], "code": [1, 3, 11, 17], "exampl": [1, 2, 3, 4, 5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "messag": [1, 2, 3, 7, 9, 12, 14, 16], "sage": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "from": [1, 2, 3, 4, 5, 7, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21], "crypto": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "block_ciph": [1, 2, 3, 4], "import": [1, 2, 3, 4, 5, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21], "p": [1, 2, 3, 4, 5, 7, 11, 12, 13, 15, 16, 17, 19, 20, 21], "0x01a1d6d039776742": 1, "k": [1, 2, 3, 4, 5, 7, 9, 10, 11, 13, 14, 15, 16, 17, 18, 20, 21], "0x7ca110454a1a6e57": 1, "c": [1, 2, 3, 4, 7, 9, 11, 12, 15, 16, 17, 18, 21], "plaintext": [1, 2, 3, 4, 7, 9, 13, 14, 15, 16], "hex": [1, 3, 5, 14, 15], "690f5b0d9a26939b": 1, "And": [1, 3, 7], "decrypt": [1, 2, 3, 4, 7, 8, 9, 14, 16], "again": [1, 3, 14], "ciphertext": [1, 2, 3, 4, 7, 9, 14, 15, 16], "1a1d6d039776742": 1, "have": [1, 2, 3, 7, 11, 14, 15, 16, 17, 19, 21], "look": [1, 3], "round": [1, 2, 3, 13, 14, 15, 17, 18], "des_k": 1, "0x1f08260d1ac2465": 1, "103049bfb90e": 1, "808d40f07bf": 1, "231000f2dd97": 1, "valid": [1, 4, 7, 14], "sampl": [1, 12], "output": [1, 2, 3, 4, 5, 7, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21], "cf": [1, 15, 17], "kesm1998": 1, "124": [1, 3, 15, 21], "0": [1, 2, 3, 4, 5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "0x10316e028c8f3b4a": 1, "r": [1, 4, 5, 7, 10, 15, 16, 17], "rang": [1, 2, 3, 4, 5, 7, 12, 14, 15, 17, 18, 21], "1": [1, 2, 3, 4, 5, 7, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21], "17": [1, 3, 7, 11, 15, 16, 19], "dofinalround": [1, 3], "fals": [1, 3, 4, 5, 10, 12, 14, 15, 16, 17, 21], "47092b5b": 1, "47092b5b53f372af": 1, "53f372af9f1d158b": 1, "3f6c3efd5a1e5228": 1, "82dcbafbdeab6602": 1, "chang": [1, 3, 5, 14, 17], "intern": [1, 12, 17], "sbox": [1, 2, 3, 4, 13, 15, 17, 18], "16": [1, 2, 3, 5, 7, 9, 11, 12, 14, 15, 16, 17, 19], "4": [1, 2, 3, 4, 5, 7, 10, 11, 12, 14, 15, 16, 17, 18, 19, 21], "8": [1, 2, 3, 4, 5, 7, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 21], "keyschedul": [1, 3], "lambda": [1, 3, 5, 12, 19], "x": [1, 2, 3, 5, 7, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20], "return": [1, 2, 3, 4, 5, 7, 9, 11, 12, 13, 14, 15, 16, 17, 18, 21], "0x1234": [1, 3], "0x0": [1, 3, 17], "80004000d08100": 1, "author": [1, 2, 3, 4, 5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21], "luka": [1, 3, 18], "stenn": [1, 3, 18], "2019": [1, 3, 18], "03": [1, 5, 17], "29": [1, 3, 12, 15, 16], "initi": [1, 2, 3, 4, 7, 11, 14, 15, 16, 17, 18, 20, 21], "version": [1, 2, 3, 4, 7, 14, 15, 16, 18, 21], "none": [1, 3, 5, 7, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19], "keysiz": [1, 3], "64": [1, 3, 5, 7, 9, 12, 14, 15, 17, 18], "true": [1, 2, 3, 4, 5, 6, 7, 10, 12, 14, 15, 16, 17, 18, 20, 21], "sageobject": [1, 2, 3, 4, 5, 12, 13, 14, 17], "you": [1, 3, 10, 19, 21], "can": [1, 2, 3, 4, 5, 7, 10, 11, 13, 14, 15, 16, 17, 18, 19, 21], "invok": [1, 3, 14], "either": [1, 3, 5, 7, 10, 12, 14, 15, 17], "call": [1, 3, 4, 5, 7, 9, 11, 12, 13, 14, 15, 17], "an": [1, 2, 3, 4, 5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21], "appropri": [1, 3], "flag": [1, 2, 3, 10, 14], "0x8000000000000000": 1, "95f8a5e5dd31d900": 1, "8000000000000000": 1, "Or": [1, 2, 3, 19], "method": [1, 2, 3, 5, 7, 14, 15, 17], "directli": [1, 2, 3, 8, 9, 14, 17], "number": [1, 2, 3, 4, 5, 7, 9, 11, 12, 14, 15, 16, 17, 19, 21], "reduc": [1, 2, 3, 4, 10, 11, 17], "easili": [1, 3, 9, 15, 17], "15": [1, 2, 3, 7, 11, 12, 15, 17, 18, 19], "e": [1, 2, 3, 5, 7, 9, 11, 12, 14, 15, 16, 17, 18, 20, 21], "integ": [1, 2, 3, 5, 7, 9, 10, 11, 12, 13, 16, 17, 18, 19, 21], "list": [1, 2, 3, 4, 5, 7, 11, 12, 13, 14, 15, 17, 18, 21], "like": [1, 2, 3, 5, 7, 13, 14, 15], "bit": [1, 2, 3, 4, 5, 15, 16, 17, 18, 19, 21], "input": [1, 2, 3, 4, 5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "If": [1, 2, 3, 4, 5, 7, 12, 14, 15, 16, 17, 19, 21], "too": [1, 3], "vector": [1, 3, 4, 5, 10, 12, 13, 15, 17], "2": [1, 2, 3, 4, 5, 7, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21], "63": [1, 3, 15], "0x0101010101010101": 1, "10806569712552630528": 1, "__init__": [1, 3, 12], "construct": [1, 3, 5, 12, 13, 14, 15, 17, 18], "instanc": [1, 3, 9, 11, 12, 15, 17], "default": [1, 2, 3, 4, 5, 7, 9, 10, 12, 14, 15, 16, 17, 18, 19, 21], "length": [1, 2, 3, 4, 5, 7, 9, 11, 13, 14, 15, 16, 17, 18, 19, 21], "must": [1, 2, 3, 4, 5, 7, 11, 12, 14, 15, 16, 17, 19, 21], "56": [1, 3, 15, 16], "In": [1, 2, 9, 11, 12, 14, 15, 16, 17, 19, 21], "latter": [1, 8], "case": [1, 5, 7, 9, 10, 11, 12, 19], "contain": [1, 3, 5, 9, 10, 16], "pariti": [1, 16, 21], "swap": 1, "take": [1, 3, 5, 9, 11, 14, 15, 17], "place": [1, 3], "invers": [1, 3, 4, 7, 8, 10, 14, 15, 17], "permut": [1, 3, 4, 5, 7, 9, 17], "omit": [1, 3, 15], "get": [1, 4, 12, 14, 17], "state": [1, 3, 14, 15, 20], "after": [1, 3, 14, 15], "effect": [1, 2, 7], "indirect": [1, 3, 5, 17], "doctest": [1, 3, 5, 15], "block": [1, 2, 3, 4, 7, 9, 13, 14, 15, 16, 17, 21], "follow": [1, 2, 3, 4, 7, 9, 10, 12, 15, 16, 17, 18, 21], "origin": [1, 2, 3, 4, 7, 14, 16, 19], "simpl": [1, 3, 14, 17], "But": [1, 2, 3], "increas": [1, 3, 7], "possibl": [1, 2, 3, 7], "produc": [1, 4, 7], "enough": [1, 7], "11": [1, 2, 3, 4, 7, 10, 11, 14, 15, 16, 17, 18, 19], "42": [1, 3, 10, 12, 15], "traceback": [1, 3, 5, 12, 13, 14, 17], "most": [1, 3, 5, 7, 12, 13, 14, 15, 17], "recent": [1, 3, 5, 12, 13, 14, 17], "last": [1, 3, 4, 5, 7, 12, 13, 14, 15, 16, 17], "valueerror": [1, 3, 5, 14], "less": [1, 2, 3], "equal": [1, 2, 3, 5, 7, 14, 15, 17, 19], "arbitrari": [1, 3, 14], "sinc": [1, 3, 4, 7, 14], "one": [1, 2, 3, 7, 10, 11, 12, 14, 15, 16, 17, 21], "here": [1, 2, 3, 4, 7, 12, 15, 16, 17, 19], "demonstr": [1, 3, 14], "__call__": [1, 3, 12, 14], "algorithm": [1, 2, 3, 4, 7, 10, 11, 14, 16, 17, 19, 21], "appli": [1, 2, 3, 4, 7, 9, 14, 15, 16], "control": [1, 3, 15], "what": [1, 3, 15], "action": [1, 3], "perform": [1, 2, 3, 4, 7, 14, 15, 16, 17, 19, 21], "string": [1, 2, 3, 4, 5, 7, 9, 10, 13, 14, 15, 16, 17, 19, 20, 21], "signifi": [1, 2, 3], "whether": [1, 2, 3, 14, 15, 16, 21], "obtain": [1, 2, 3, 4, 5, 16, 17, 21], "0x480d39006ee762f2": 1, "0x025816164629b007": 1, "a1f9915541020b56": 1, "k64": 1, "0x690f5b0d9a26939b": 1, "also": [1, 2, 3, 4, 5, 7, 10, 12, 14, 15, 16, 17, 19, 21], "leav": [1, 2], "out": [1, 4, 5, 17], "k56": 1, "0x7d404224a35bab": 1, "0x133457799bbcdff1": 1, "0x0123456789abcdef": [1, 3], "85e813540f0ab405": 1, "0x12695bc9b7b7f8": 1, "round_kei": [1, 2, 3, 14], "result": [1, 2, 3, 4, 5, 7, 14, 15, 16, 17, 19, 21], "convert_to_vector": [1, 3], "k1": [1, 3], "0xffffffffffff": 1, "48": [1, 3, 15], "0xffffffff11111111": 1, "zz": [1, 3, 5, 7, 10, 11, 12, 16, 19], "11111111b29684b8": 1, "sbox_lay": [1, 3], "b": [1, 2, 3, 4, 5, 7, 10, 12, 14, 15, 16, 17, 20, 21], "masterkei": 1, "initialis": [1, 3], "iter": [1, 3, 5, 16, 17, 18], "pass": [1, 3, 12, 14, 15, 19, 21], "when": [1, 3, 7, 11, 12, 14, 15, 19], "0x584023641aba6176": 1, "d0a2ed2fa124": 1, "43b42af81183": 1, "self": [1, 3, 5, 13, 15, 17], "creat": [1, 3, 7, 8, 11, 15, 17, 20], "want": [1, 3, 10, 14, 19], "object": [1, 3, 5, 8, 10, 13, 14, 15, 17], "valu": [1, 2, 3, 4, 5, 7, 14, 15, 16, 17, 19], "otherwis": [1, 3, 9, 17, 21], "all": [1, 2, 3, 4, 5, 7, 10, 12, 14, 15, 17, 18, 21], "A": [1, 2, 3, 4, 5, 7, 9, 10, 11, 14, 15, 16, 17, 19, 21], "element": [1, 2, 3, 5, 6, 7, 9, 11, 12, 13, 14, 15, 17, 18], "so": [1, 3, 7, 9, 14, 15, 16, 19, 21], "cours": [1, 3], "well": [1, 14], "1b02effc7072": 1, "79aed9dbc9e5": 1, "cb3d8b0e17f5": 1, "l": [1, 3, 4, 5, 7, 10, 11, 12, 15, 19, 21], "convert": [1, 2, 3, 7, 12, 15, 16, 17, 21], "desir": [1, 3, 5, 19], "ouput": [1, 3], "0x1f": [1, 3], "v": [1, 3, 5, 7, 15, 16, 17, 18], "advanc": 2, "note": [2, 4, 5, 12, 14, 15, 16, 17], "purpos": [2, 4, 14, 15, 18, 21], "It": [2, 3, 4, 9, 14, 15, 18, 19], "design": [2, 4], "help": [2, 4, 14, 15, 17], "beginn": [2, 4, 14, 15], "understand": [2, 4, 14, 15], "basic": [2, 4, 5, 14, 15, 17], "structur": [2, 4, 5, 12, 14, 15, 17], "minh": [2, 4, 7, 16, 21], "van": [2, 4, 7, 16, 21], "nguyen": [2, 4, 7, 16, 21], "2009": [2, 4, 5, 7, 15, 16, 17, 21], "05": [2, 18], "minia": 2, "pha2002": [2, 4], "phan": [2, 4], "secur": [2, 3, 4, 12], "practic": [2, 4], "paramet": [2, 4, 5, 12, 15, 17, 19], "significantli": [2, 4], "same": [2, 4, 7, 9, 14, 15, 21], "time": [2, 3, 4, 5, 7, 11, 14, 15, 17], "preserv": [2, 4], "goal": [2, 4], "allow": [2, 4, 5, 10, 11, 12, 14, 15, 17], "thu": [2, 3, 4, 7, 15, 17], "lai": [2, 4], "foundat": [2, 4], "thorough": [2, 4], "studi": [2, 4, 5, 14, 15], "Its": [2, 4], "teach": [2, 4, 14, 15], "tool": [2, 4, 14, 15], "differ": [2, 5, 7, 10, 14, 15, 17, 21], "defin": [2, 4, 5, 7, 9, 11, 13, 14, 17, 18, 20], "famili": [2, 14, 15], "parameteriz": [2, 14, 15], "suitabl": [2, 14, 15], "framework": [2, 14, 15], "compar": [2, 4, 14, 15, 16], "cryptanalyt": [2, 14, 15], "techniqu": [2, 14, 15], "brought": [2, 14, 15], "bear": [2, 14, 15], "mae": 2, "finitefield": [2, 20], "m": [2, 5, 7, 9, 10, 12, 15, 16, 17, 19, 20, 21], "matrixspac": [2, 7, 9, 15], "3": [2, 3, 4, 5, 7, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21], "plaintxt": [2, 4], "we": [2, 3, 4, 5, 7, 9, 11, 12, 14, 15, 16, 17, 18, 19, 21], "work": [2, 3, 4, 7, 8, 10, 12, 15, 16, 17], "binari": [2, 4, 5, 7, 9, 14, 16, 20, 21], "bin": [2, 4, 5, 16, 21], "binarystr": [2, 4, 7, 9, 16, 20, 21], "encod": [2, 4, 7, 9, 13, 16, 17, 19, 20, 21], "ke": 2, "0100101101000101": 2, "secret": [2, 4, 7, 9, 12], "01000101011011100110001101110010011110010111000001110100001000000111010001101000011010010111001100100000011100110110010101100011011100100110010101110100001000000110110101100101011100110111001101100001011001110110010100100001": 2, "11100000101000010110001101101001110110010010111011010001100111100000101000101111100110010010100001110101011100111001000010101000001111000101010011010001100111100111001100000001101100110110101001001000011100000101010110110101": 2, "now": [2, 4, 7, 15, 16, 17], "n": [2, 4, 5, 7, 10, 11, 12, 14, 15, 16, 17, 18, 19, 21], "leq": [2, 3, 7, 11, 15, 16, 21], "5": [2, 3, 4, 5, 7, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 21], "6": [2, 3, 5, 7, 11, 12, 14, 15, 16, 17, 18, 19], "7": [2, 3, 5, 7, 9, 11, 14, 15, 16, 17, 18, 19, 20, 21], "9": [2, 3, 5, 7, 11, 14, 15, 16, 17, 18, 19, 20], "10": [2, 3, 4, 5, 7, 10, 11, 12, 14, 15, 16, 17, 18, 19, 21], "12": [2, 3, 7, 11, 12, 14, 15, 16, 17, 18, 19, 21], "13": [2, 3, 5, 7, 11, 12, 15, 16, 17, 18, 19], "14": [2, 3, 7, 11, 12, 14, 15, 17, 18, 19], "integer_to_binari": 2, "0000000100100011010001010110011110001001101010111100110111101111": 2, "0010001110110000": 2, "0011101000101110010011000101010100011101010000111000100100011010": 2, "some": [2, 3, 5, 7, 9, 11, 12, 14, 19, 21], "random": [2, 4, 5, 7, 10, 11, 12, 13, 15, 16, 18, 19, 21], "Then": [2, 4, 7, 16, 21], "random_el": [2, 13, 15], "random_kei": [2, 4, 7, 16], "gf_to_binari": 2, "g": [2, 5, 11, 12, 14, 15, 17, 20], "finit": [2, 11, 12, 14, 15, 17, 18, 20], "field": [2, 5, 11, 12, 13, 14, 15, 17, 18, 19, 20], "belong": [2, 7], "each": [2, 3, 4, 7, 11, 12, 14, 15, 16, 17, 19, 21], "concaten": [2, 17], "matrix": [2, 7, 9, 10, 11, 14, 15, 17], "entri": [2, 12, 14, 15, 17], "over": [2, 5, 7, 9, 12, 14, 15, 17, 18, 20], "its": [2, 3, 5, 7, 9, 14, 15, 16, 17, 18, 19], "start": 2, "top": [2, 3, 7], "left": [2, 3, 4, 11], "corner": 2, "across": [2, 14], "right": [2, 3, 11, 12, 17], "bottom": 2, "associ": [2, 14], "uniqu": [2, 7, 10], "accord": [2, 15, 17], "tabl": [2, 3, 5, 15, 17], "begin": [2, 3, 4, 11], "tabular": [2, 4], "ll": 2, "hline": [2, 4], "0000": [2, 4], "1000": [2, 4, 12, 15], "0001": [2, 4], "1001": [2, 4], "0010": [2, 4], "1010": [2, 4], "0011": [2, 4], "1011": [2, 4, 16], "0100": [2, 4], "1100": [2, 4], "0101": [2, 4], "1101": [2, 4], "0110": [2, 4], "1110": [2, 4], "0111": [2, 4], "1111": [2, 4], "end": [2, 3, 4, 11], "set": [2, 5, 7, 10, 12, 14, 15, 21], "len": [2, 4, 5, 7, 12, 15, 17, 21], "ha": [2, 3, 4, 5, 7, 9, 12, 13, 14, 15, 17, 18, 21], "mani": [2, 9, 11, 16, 19, 21], "01111100001010111111011000010111": 2, "1100001101111110": 2, "gf_to_integ": 2, "add_kei": 2, "rkei": 2, "addit": [2, 7, 12, 14], "both": [2, 3, 7, 12, 14, 15, 16, 19], "ar": [2, 3, 4, 5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 21], "matric": [2, 7, 9, 14, 15], "just": 2, "two": [2, 3, 4, 5, 11, 14, 15, 16, 17, 19, 21], "d": [2, 3, 5, 7, 9, 11, 12, 15], "0101011101100101": 2, "binary_to_gf": 2, "ky": 2, "0100101101011001": 2, "integer_to_gf": 2, "repres": [2, 4, 5, 10, 12, 14, 15, 16, 17, 18], "greater": [2, 17], "than": [2, 4, 7, 11, 14, 15, 17], "zero": [2, 5, 7, 15], "multipl": [2, 4, 7, 14, 16, 19, 21], "nibbl": [2, 3], "specifi": [2, 3, 4, 7, 15, 19, 21], "where": [2, 3, 4, 5, 7, 9, 11, 12, 13, 14, 15, 16, 17, 19, 21], "posit": [2, 3, 4, 5, 7, 14, 15, 16, 18, 19, 21], "binary_to_integ": 2, "everi": [2, 3, 9, 14, 17], "block_length": [2, 4, 7, 9, 14], "consid": [2, 3, 7, 11, 15, 17, 21], "therefor": [2, 5, 7], "consist": [2, 3, 7, 15, 16, 17], "four": [2, 3], "let": [2, 4, 7, 11, 16, 19, 21], "gamma": 2, "denot": [2, 4, 7, 17], "oper": [2, 3, 4, 14, 15], "sub": [2, 15, 16, 17, 21], "pi": 2, "row": [2, 4, 7, 10, 14, 15, 17], "theta": 2, "mix": [2, 14], "column": [2, 7, 14, 15, 17], "sigma_": 2, "k_i": [2, 3, 7, 15], "add": [2, 3, 5, 10, 14], "composit": [2, 14], "k_0": [2, 3, 4], "circ": [2, 9, 14], "k_1": [2, 4, 7, 9], "k_2": [2, 4, 7, 9], "order": [2, 5, 7, 9, 12, 13, 14, 15, 16, 17], "execut": 2, "0110010001100101": 2, "0110101101100101": 2, "which": [2, 3, 4, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19], "geq": [2, 11, 21], "between": [2, 11, 12, 14, 16, 17, 19, 21], "inclus": [2, 12, 18], "non": [2, 3, 4, 5, 7, 14, 15, 16, 21], "neg": 2, "lst": 2, "individu": [2, 14], "singl": [2, 3, 14, 15], "mix_column": [2, 14, 15], "constant": [2, 5, 11, 15, 17], "bmatrix": 2, "c_0": [2, 11], "c_2": [2, 16], "c_1": [2, 11, 16], "c_3": 2, "d_0": 2, "d_2": [2, 16], "d_1": [2, 16], "d_3": 2, "multipli": 2, "abov": [2, 4, 7, 14, 18], "mat": 2, "ident": [2, 14, 15], "should": [2, 3, 7, 8, 9, 11, 14, 15, 16, 19, 21], "unchang": 2, "ey": 2, "rt": 2, "0111001001010100": 2, "nibble_sub": 2, "substitut": [2, 3, 4, 7, 8, 9, 17], "taken": [2, 16], "first": [2, 4, 5, 7, 11, 12, 14, 15, 16, 17], "thought": 2, "term": [2, 11, 13, 14, 15, 17], "revers": [2, 3, 7, 11, 15], "role": 2, "previou": [2, 7, 14], "becom": [2, 4], "bi": [2, 12], "0110001001101001": 2, "within": [2, 7, 12, 16, 19, 21], "space": [2, 5, 7, 9, 12, 15, 16, 21], "symmetr": [2, 5, 6, 9, 17], "j": [2, 3, 5, 11, 12, 14, 15], "nrow": 2, "ncol": 2, "prior": [2, 16], "being": [2, 7, 14, 16, 19, 21], "respect": [2, 4, 7, 15, 16, 17], "total": [2, 17, 21], "three": [2, 5, 11, 14, 17], "th": [2, 4, 14, 15, 16], "shift_row": [2, 14, 15], "rotat": [2, 3], "amount": 2, "while": [2, 5, 7, 12, 14, 15, 16], "second": [2, 4, 14], "interchang": [2, 4], "b_0": [2, 3, 4, 11, 16, 21], "b_1": [2, 4, 7, 16, 21], "b_2": [2, 4, 7], "b_3": [2, 4], "arrang": 2, "map": [2, 4, 7, 9, 11, 13, 14, 15, 17], "longmapsto": 2, "qt": 2, "0101000101110100": 2, "ultra": 3, "lightweight": 3, "bklpprsv2007": [3, 17, 18], "sp": 3, "network": 3, "31": [3, 5, 12, 15, 17], "80": [3, 15], "128": [3, 5, 12, 14, 15], "support": [3, 7, 15], "2844b365c06992a3": 3, "0x2844b365c06992a3": 3, "present_k": 3, "c000000000000000": 3, "6dab31744f41d700": 3, "tweak": 3, "around": [3, 7], "1234": [3, 10], "02": [3, 5], "01": [3, 4, 12, 15, 17], "0xffffffffffffffff": 3, "digit": [3, 5], "padto": [3, 5], "0x00112233445566778899aabbccddeeff": 3, "shortcut": 3, "layer": 3, "doe": [3, 7, 8, 14, 17], "ani": [3, 5, 7, 9, 12, 14, 16, 17, 19, 21], "usual": [3, 4, 12, 13], "real": 3, "world": 3, "reason": [3, 19], "By": [3, 14, 15, 17], "deactiv": 3, "23": [3, 7, 15, 16, 19, 21], "32": [3, 5, 12, 14, 15, 17], "enabl": [3, 14], "activ": 3, "a112ffc72f68417b": 3, "test": [3, 7, 10, 12, 14, 15, 16, 21], "check": [3, 7, 14, 17, 19, 21], "p1": 3, "c1": 3, "0x5579c1387b228445": 3, "p2": 3, "k2": 3, "0xffffffffffffffffffff": 3, "c2": 3, "0xe72c46c0f5945049": 3, "p3": 3, "k3": 3, "c3": 3, "0xa112ffc72f68417b": 3, "p4": 3, "k4": 3, "c4": 3, "0x3333dcd3213210d2": 3, "descript": [3, 16], "level": 3, "generateroundkei": 3, "addroundkei": [3, 14, 15], "sboxlay": 3, "player": 3, "k_": [3, 15], "xor": 3, "introduc": 3, "post": 3, "whiten": 3, "bitwis": 3, "parallel": 3, "stage": 3, "given": [3, 4, 7, 11, 12, 13, 14, 15, 16, 17, 19, 21], "kappa": 3, "i_": 3, "dot": [3, 4, 7, 11, 16, 17, 19], "i_0": 3, "current": [3, 7], "b_": [3, 11, 16, 21], "b_j": 3, "oplu": [3, 4, 5, 16, 17], "i_j": 3, "linear_lay": 3, "move": [3, 7], "33": [3, 5, 15], "49": [3, 14, 15], "18": [3, 7, 11, 15, 19], "34": [3, 15], "50": [3, 12, 15], "19": [3, 7, 11, 15, 16, 19], "35": [3, 15], "51": [3, 15], "20": [3, 5, 7, 11, 12, 14, 15, 17, 19], "21": [3, 7, 15, 16], "22": [3, 7, 15], "24": [3, 5, 7, 11, 12, 14, 15, 21], "25": [3, 7, 15, 17, 18], "26": [3, 5, 7, 9, 15], "27": [3, 15], "28": [3, 5, 14, 15, 21], "30": [3, 12, 15, 17], "36": [3, 12, 15], "52": [3, 15, 16], "37": [3, 15], "53": [3, 12, 15], "38": [3, 15], "54": [3, 15], "39": [3, 15], "55": [3, 15, 16], "40": [3, 15, 17, 19], "41": [3, 12, 15], "43": [3, 5, 12, 15], "44": [3, 15], "45": [3, 12, 15], "46": [3, 15], "47": [3, 15], "57": [3, 15, 16], "58": [3, 5, 12, 15], "59": [3, 15], "60": [3, 15, 19], "61": [3, 15], "62": [3, 15], "round_count": 3, "0x0011223344556677": 3, "ad0ed4ca386b6559": 3, "hexadecim": [3, 5, 7, 9], "notat": [3, 7, 17], "f": [3, 4, 5, 7, 11, 13, 14, 15, 16, 17, 18], "For": [3, 7, 9, 10, 11, 14, 15, 16, 17, 18, 19, 21], "sixteen": 3, "word": [3, 15], "w_": [3, 15], "w_0": 3, "w_i": 3, "4i": 3, "provid": [3, 7, 8, 12, 14, 15, 16, 17, 18, 19], "updat": 3, "obviou": 3, "wai": [3, 5], "big": [3, 7, 17], "endian": [3, 15, 17], "wherea": [3, 16], "littl": [3, 15, 17], "convers": 3, "keep": 3, "mind": 3, "master_kei": 3, "master": 3, "_kei": 3, "0x6dab31744f41d700": 3, "0x091989a5ae8eab21": 3, "At": 3, "kappa_": 3, "kappa_0": 3, "leftmost": [3, 4], "content": 3, "79": [3, 14, 15], "78": [3, 15], "extract": 3, "align": 3, "77": [3, 15], "76": [3, 12, 15], "_counter": 3, "through": [3, 4, 5, 7, 12, 14, 15, 16], "exclus": [3, 4], "ored": 3, "least": [3, 16, 19, 21], "signific": [3, 15, 16, 19, 21], "fo": [3, 5], "127": [3, 12, 14, 15], "126": [3, 12, 15], "66": [3, 15], "65": [3, 12, 15, 21], "68": [3, 12, 15, 21], "67": [3, 15, 21], "125": [3, 12, 15], "123": [3, 15, 16, 21], "122": [3, 15], "121": [3, 12, 15], "120": [3, 15], "eight": 3, "size": [3, 4, 7, 10, 11, 14, 15, 17, 18, 20], "06": [4, 14, 18], "sde": 4, "simplifiedd": 4, "sch1996": 4, "schaefer": 4, "spirit": 4, "str": [4, 7, 15, 16, 19], "randint": [4, 7], "larger": [4, 15], "howev": [4, 7, 11, 12, 14, 15], "mod": [4, 21], "list_to_str": 4, "process": [4, 7, 10, 17], "pi_f": 4, "sigma": [4, 12], "switch": 4, "goe": 4, "subkei": [4, 14, 15], "fed": 4, "final": [4, 12, 14, 16], "run": [4, 11], "01010101": 4, "1010000010": 4, "string_to_list": 4, "initial_permut": 4, "b_7": 4, "b_i": [4, 7, 11, 21], "b_4": 4, "b_5": 4, "b_6": 4, "recov": [4, 7, 12, 15, 21], "pinv": 4, "10110100": 4, "01111000": 4, "left_shift": 4, "circular": 4, "b_8": 4, "b_9": 4, "l_n": 4, "separ": 4, "That": [4, 7, 15, 16, 19], "l_1": 4, "l_2": 4, "up": [4, 7], "half": [4, 5, 11], "1000001100": 4, "empti": [4, 7, 16, 21], "0000110100": 4, "permutation10": 4, "p_": 4, "1100100101": 4, "0110100101": 4, "permutation4": 4, "p_4": 4, "permutation8": 4, "p_8": 4, "pick": 4, "those": [4, 5, 7, 12, 13, 14, 16, 19], "permute_substitut": 4, "rightmost": 4, "wise": 4, "OR": 4, "n_0": 4, "n_1": 4, "n_2": 4, "n_3": 4, "expand": [4, 14], "cc": [4, 11], "k_3": 4, "k_4": 4, "k_5": 4, "k_6": 4, "k_7": 4, "ad": [4, 11, 14, 15, 17, 18], "read": 4, "s_0": 4, "00": 4, "next": [4, 12], "s_1": 4, "anoth": [4, 5, 14, 19], "undergo": 4, "10111101": 4, "11010101": 4, "0101010110": 4, "1010010010": 4, "0010010011": 4, "dimens": [4, 5, 7, 10, 12, 14, 15], "been": [4, 11, 12, 14], "11101000": 4, "11110000": 4, "filter": 5, "combin": [5, 15, 17], "properti": [5, 9, 11, 15, 17], "link": 5, "spectral": 5, "analysi": 5, "immun": 5, "boolean_funct": 5, "booleanfunct": [5, 18], "254": [5, 14, 15, 17], "tr": 5, "variabl": [5, 13, 14, 15, 17], "nonlinear": [5, 17], "112": [5, 15, 17], "algebraic_immun": 5, "rusydi": [5, 17], "h": [5, 7, 11, 16, 17], "makarim": [5, 17], "2016": [5, 17], "relat": [5, 10, 15, 16, 17], "07": [5, 17], "09": [5, 15], "is_plateau": [5, 17], "yann": [5, 17], "laigl": [5, 17], "chapui": [5, 17], "2010": [5, 15], "arithmet": [5, 7], "08": [5, 7, 15], "truth": [5, 17], "expect": [5, 7], "power": [5, 12, 17], "interpret": [5, 7, 17], "extens": [5, 14, 15, 17, 18], "type": [5, 10], "sqrt": 5, "111e": 5, "pbori": 5, "booleanpolynomi": 5, "y": [5, 17], "z": [5, 7, 9, 10], "booleanpolynomialr": [5, 15], "failur": 5, "typeerror": [5, 14, 17], "unabl": 5, "init": 5, "absolut_ind": 5, "arg": [5, 15, 17], "kwd": [5, 12, 15], "deprec": 5, "absolute_ind": 5, "instead": [5, 8, 10, 14, 16], "see": [5, 7, 12, 14, 15, 16, 17, 18, 19, 21], "github": [5, 15, 17], "issu": [5, 12, 15, 17], "28001": 5, "detail": [5, 12], "absolute_autocorrel": 5, "absolut": [5, 17], "autocorrel": [5, 11, 17], "7969817cc5893ba6ac326e47619f5ad0": 5, "sort": [5, 7, 15, 17, 18], "item": [5, 7, 15, 18], "indic": [5, 15, 17], "maxim": [5, 15, 17], "old": 5, "name": [5, 12, 13, 14, 15, 18], "typo": 5, "warn": 5, "deprecationwarn": 5, "pleas": 5, "http": [5, 11, 17, 18], "com": [5, 11], "sagemath": 5, "absolute_walsh_spectrum": 5, "walsh": 5, "spectrum": [5, 17], "0113077c165e76a8": 5, "algebraic_degre": 5, "degre": [5, 10, 12, 15, 17, 18, 19], "normal": [5, 17], "form": [5, 7, 11, 12, 14, 16, 17], "x0": [5, 15, 17], "x1": [5, 15, 17], "x2": [5, 15, 17], "x3": [5, 15], "annihil": 5, "smallest": [5, 21], "exist": [5, 7, 12, 14, 17], "trivial": 5, "minim": [5, 11, 17], "x4": 5, "x5": 5, "algebraic_normal_form": [5, 17], "dim": 5, "foral": 5, "fi": 5, "enumer": 5, "delta_f": 5, "sum_": [5, 7, 11, 17], "correlation_immun": 5, "maximum": 5, "correl": [5, 17], "said": [5, 17], "statist": [5, 7, 11], "independ": 5, "deriv": [5, 9, 15, 17], "direct": [5, 17], "tupl": [5, 7, 12, 13, 15, 17], "mapsto": [5, 17, 18], "indexerror": [5, 12, 17], "bound": [5, 12, 16, 19, 21], "has_linear_structur": [5, 17], "nonzero": [5, 17], "is_linear_structur": [5, 17], "linear_structur": [5, 17], "is_balanc": [5, 17], "is_bent": [5, 17], "bent": [5, 17], "val": 5, "cannot": [5, 14, 16], "comput": [5, 11, 14, 15, 16, 17, 19], "plateau": [5, 17], "transform": [5, 14, 15, 17], "pm": 5, "walsh_hadamard_transform": 5, "is_symmetr": 5, "invari": 5, "under": [5, 11, 16, 19], "depend": 5, "ham": [5, 17], "weight": [5, 17], "v_b": 5, "srang": [5, 17], "popcount": 5, "subspac": 5, "basis_matrix": 5, "distanc": 5, "ones": 5, "need": [5, 15, 19], "nvariabl": 5, "resiliency_ord": 5, "resili": 5, "balanc": [5, 11, 12, 17], "077ce5a2f8831a5df8831a5d077ce5a26996699669699696669999665aa5a55a": 5, "sum_of_square_ind": 5, "sum": [5, 7], "squar": [5, 7], "32768": 5, "truth_tabl": 5, "format": [5, 10, 13, 14, 15, 17], "int": [5, 11, 19], "00ab": 5, "0abbacadabbacad0": 5, "t": [5, 7, 10, 15, 16, 18], "256": 5, "oct": 5, "unknown": 5, "hadamard": 5, "w": [5, 15, 17], "cdot": [5, 7, 16, 17, 21], "booleanfunctioniter": 5, "__iter__": 5, "random_boolean_funct": 5, "210": [5, 15], "220": [5, 15], "unpickle_booleanfunct": 5, "bool_list": 5, "specif": [5, 9, 12, 14, 15], "unpickl": 5, "load": 5, "dump": 5, "parent": [6, 8, 9, 12, 15, 20], "codomain": [6, 9], "domain": [6, 7, 9, 16, 20], "publickeyciph": 6, "public": [6, 9, 10, 16], "symmetrickeyciph": [6, 8, 20], "conveni": [7, 8], "user": [7, 8, 12, 15], "interfac": [7, 8], "variou": [7, 9, 14, 17], "These": [7, 12, 14, 17], "includ": [7, 9, 12, 15], "affin": [7, 8, 14, 15, 18], "affinecryptosystem": [7, 8], "hill": [7, 8, 9], "hillcryptosystem": [7, 9], "shiftcryptosystem": [7, 8, 9], "substitutioncryptosystem": [7, 9], "transposit": [7, 9], "transpositioncryptosystem": [7, 9], "vigener": [7, 8, 9], "vigenerecryptosystem": [7, 9], "alphabet": [7, 9], "capit": 7, "letter": 7, "english": 7, "alphabeticstr": [7, 9], "hexadecimalstr": [7, 9], "octal": [7, 9], "octalstr": [7, 9], "radix": [7, 9], "radix64str": [7, 9], "david": [7, 11, 16], "kohel": 7, "2007": [7, 15], "symmetrickeycryptosystem": [7, 9, 19], "a_0": [7, 21], "a_1": [7, 21], "a_2": 7, "a_": [7, 11, 21], "longrightarrow": 7, "modulo": [7, 9, 12, 16, 19, 21], "a_i": [7, 11, 21], "identifi": [7, 9], "pair": [7, 9, 15, 16], "gcd": [7, 16], "assum": [7, 9, 11, 12, 21], "repeat": 7, "biject": 7, "charact": [7, 16, 21], "consequ": [7, 14], "equiv": [7, 16, 21], "ap": [7, 16], "pmod": [7, 16, 21], "similarli": [7, 14], "back": [7, 16], "free": [7, 9, 10, 20], "monoid": [7, 9, 20], "theaffinecryptosystemgeneralizestheshiftciph": 7, "enciph": 7, "cyxngghaxfkvscjtvtcxrpxaxknihextcyxtyhgcfhsyxk": 7, "deciph": 7, "ainv": 7, "binv": 7, "inverse_kei": 7, "encryptwithinversekei": 7, "avenmrjqsjhsvfanyaoam": 7, "how": [7, 14, 15, 16, 17, 19, 21], "caesar": 7, "abcdef": 7, "defghi": 7, "decim": [7, 20], "roman": 7, "short": 7, "special": [7, 9, 10], "adecimationcipherisaspecializedaffineciph": 7, "azqigwalgenigvpqdguauvqigafgjqzahhgnqigvpqd": 7, "refer": [7, 10, 12, 15, 16, 17], "sti2006": 7, "brute_forc": 7, "rank": 7, "attempt": [7, 15, 16, 19, 21], "brute": 7, "forc": [7, 14], "cryptanalysi": [7, 14, 17], "document": [7, 12], "chi_squar": 7, "chi": 7, "rank_by_chi_squar": 7, "squared_differ": 7, "rank_by_squared_differ": 7, "exhaust": [7, 12], "dictionari": [7, 13, 14, 15, 17, 18], "candid": [7, 18], "decipher": 7, "cryptanalyz": 7, "option": [7, 12, 15, 17], "displai": [7, 11, 14], "ofuthg": 7, "netsgf": 7, "mdsrfe": 7, "lcrqed": 7, "kbqpdc": 7, "japocb": 7, "izonba": 7, "hynmaz": 7, "gxmlzy": 7, "fwlkyx": 7, "evkjxw": 7, "dujiwv": 7, "ctihvu": 7, "bshgut": 7, "argft": 7, "zqfesr": 7, "ypedrq": 7, "xodcqp": 7, "wncbpo": 7, "vmbaon": 7, "ulaznm": 7, "tkzyml": 7, "sjyxlk": 7, "rixwkj": 7, "qhwvji": 7, "pgvuih": 7, "chisquar": 7, "linearfunctionsforencryptinganddecrypt": 7, "vytcgpbmtenystobspctepirnytagtddcepirnyta": 7, "ctihvukdibatlixkluhibupoatinvieehbupoatin": 7, "hsryeldarovswrqdwlyrolubvsrierttyolubvsri": 7, "nwhiuvfmhopwehsfevihovabpwhcuhlliovabpwhc": 7, "tcnoablsnuvcknylkbonubghvcnianrroubghvcni": 7, "shibvowzilehdijwdobilofyehirviggblofyehir": 7, "pefysltwfibeafgtalyfilcvbefosfddyilcvbefo": 7, "idufhsyxutednulynsfutsvgedurhummftsvgedur": 7, "qvetrgabefuvlenalgtefgdsuvehremmtfgdsuveh": 7, "gjenramxepyjdezmdanepatcyjelreoonpatcyjel": 7, "dirgetnorshiyranytgrstqfhiruerzzgstqfhiru": 7, "knirveqbitcnhidqheritexgcnipvissrtexgcnip": 7, "ghorbeidojmhfoviferojetwmhozboaarjetwmhoz": 7, "ahezrmofevqhtebotmzevmniqhedrekkzvmniqh": 7, "sneprcihedonxevixcpedcfqonebrewwpdcfqoneb": 7, "possibli": 7, "more": [7, 10, 12, 14, 17], "inform": 7, "cbbqpwbypmtqupocjwfqpwcjbypmtqupo": 7, "regardless": 7, "gvvetsmezbsfiuwfkuelbnetsgfvotmlewti": 7, "alphabeticstringmonoid": 7, "would": [7, 16, 19], "upper": [7, 16, 19, 21], "equival": [7, 14, 15, 17, 18], "strip": [7, 17], "affinecipherovercapitallettersoftheenglishalphabet": 7, "argument": [7, 14, 15], "As": 7, "ba": 7, "suppos": [7, 17], "varphi": 7, "euler": 7, "phi": [7, 12, 14, 15], "rel": 7, "prime": [7, 16, 19, 21], "euler_phi": [7, 12], "alphabet_s": [7, 9], "pdict": 7, "necessarili": 7, "f_a": 7, "characterist": 7, "frequenc": 7, "probabl": [7, 12, 17], "f_m": 7, "distribut": [7, 12, 15, 17], "ratio": 7, "occurr": 7, "One": [7, 12], "observ": 7, "o_m": 7, "e_a": 7, "r_": 7, "frac": [7, 11], "m_": 7, "a_k": 7, "b_k": 7, "smaller": [7, 17], "pearson": 7, "pearsontest": 7, "line": 7, "plist": 7, "net": 7, "stad": 7, "slot": 7, "hadi": 7, "tsli": 7, "delo": 7, "etun": 7, "elid": 7, "hcte": 7, "avail": [7, 12, 18], "reliabl": 7, "longer": [7, 14, 16], "longermessageismoreinformationforcryptanalysi": 7, "inurfsbfllhrfdlbnsfduynsbhednuynstsvgehuhivldl": 7, "rmfiuhyuoosiuwoymhuwfbmhysvwmfbmhghetvsfsreowo": 7, "vstacpucoogacyouspcytbspugnystbspepirngtgvioyo": 7, "pafoylkyggsoyegkalyeftalksbeaftalilcvbsfspcgeg": 7, "ohsrnadnppfrnvpdhanvschadfevhschajabwefsfobpvp": 7, "ghynvipvrrlnvfrphivfyehiplafhyehiditqalylgtrfr": 7, "nehcivkissuciwskeviwhfevkupwehfevovabpuhunasw": 7, "ifgnpchpbbtnplbhfcplgofchtalfgofcrcveatgtivblb": 7, "bwpserieyycsegyiwregplwricfgwplwrqrodfcpcboygi": 7, "measur": 7, "residu": [7, 16, 19], "rss": 7, "edwt": 7, "pohe": 7, "snep": 7, "dyrugtkgaaeugiakytgirnytkehiyrnytstqfheredqaia": 7, "dsneuhiummaeuomishuonzshiarosnzshkhqxranadqmom": 7, "etofvijvnnbfvpnjtivpoatijbsptoatilirysbobernpn": 7, "vebganyaqqogamqyenambdenyotmebdenunihtoboviqmq": 7, "tulaivcieeyaisecuvislruvcynsulruvqvgdnylytges": 7, "zqtouhwueegouiewqhuitrqhwgbiqtrqhahmnbgtgzmei": 7, "jspuobmoeecuoaemsboaprsbmchasprsbibwvhcpcjwea": 7, "slwvrehrttjvrzthlerzwglehjizlwglenefaijwjsftzt": 7, "atedzmpzbbrdzhbptmzheotmprqhteotmvmniqreranbhb": 7, "integermodr": 7, "lamaisonblanch": 7, "jyvkskqpelaykpv": 7, "ngen": 7, "good": 7, "dai": 7, "mate": 7, "ya": 7, "go": 7, "lester": 7, "invert": [7, 17], "ki": [7, 15], "along": 7, "wrap": 7, "backward": 7, "illustr": 7, "theshiftcryptosystemgeneralizesthecaesarciph": 7, "aolzopmajyfwavzfzaltnlulyhspglzaoljhlzhyjpwoli": 7, "done": 7, "456e6372797074696f6e20262064656372797074696f6e2073686966747320616c6f6e672074686520616c7068616265742": 7, "9ab3b8c7cec5c9beb4b3757b75b9bab8c7cec5c9beb4b375c8bdbebbc9c875b6b1b4b3bc75c9bdba75b6b1c5bdb6b7bac973": 7, "veri": [7, 14, 17], "insecurcommonli": 7, "dict": 7, "print": [7, 13, 15, 17, 18, 21], "don": 7, "modular": [7, 10], "apqnbqvocaqvouwlctizizqbpumbqk": 7, "zopmapunbzpuntvkbshyhypaotlapj": 7, "ynolzotmayotmsujargxgxoznskzoi": 7, "xmnkynslzxnslrtizqfwfwnymrjynh": 7, "wlmjxmrkywmrkqshypevevmxlqixmg": 7, "vkliwlqjxvlqjprgxodudulwkphwlf": 7, "ujkhvkpiwukpioqfwnctctkvjogvk": 7, "tijgujohvtjohnpevmbsbsjuinfujd": 7, "shiftingusingmodulararithmet": 7, "rgheshmftrhmflnctkzqzqhsgldshb": 7, "qfgdrglesqglekmbsjypypgrfkcrga": 7, "pefcqfkdrpfkdjlarixoxofqejbqfz": 7, "odebpejcqoejcikzqhwnwnepdiapei": 7, "ncdaodibpndibhjypgvmvmdochzodx": 7, "mbcznchaomchagixofululcnbgyncw": 7, "labymbgznlbgzfhwnetktkbmafxmbv": 7, "kzaxlafymkafyegvmdsjsjalzewlau": 7, "jyzwkzexljzexdfulcririzkydvkzt": 7, "ixyvjydwkiydwcetkbqhqhyjxcuji": 7, "hwxuixcvjhxcvbdsjapgpgxiwbtixr": 7, "gvwthwbuigwbuacrizofofwhvashwq": 7, "fuvsgvathfvatzbqhynenevguzrgvp": 7, "eturfuzsgeuzsyapgxmdmduftyqfuo": 7, "dstqetyrfdtyrxzofwlclctesxpetn": 7, "crspdsxqecsxqwynevkbkbsdrwodsm": 7, "bqrocrwpdbrwpvxmdujajarcqvncrl": 7, "satisfi": [7, 11, 15, 16, 17], "inequ": 7, "stop": 7, "me": 7, "stopshiftingm": 7, "fgbcfuvsgvatzr": 7, "5368696674206d65206e6f772": 7, "cadfd0ddeb97d4dc97d5d6ee95": 7, "ok": 7, "0100111101001011001011000010000001100101011011100110111101110101011001110110100000100000011100110110100001101001011001100111010001101001011011100110011100101110": 7, "1011000010110100110100111101111110011010100100011001000010001010100110001001011111011111100011001001011110010110100110011000101110010110100100011001100011010001": 7, "your": [7, 14, 16, 19], "gear": 7, "shiftyourgear": 7, "vkliwbrxujhdu": 7, "4361706974616c697a65207769746820746865207368696674206b65792": 7, "98b6c5bec9b6b1becfba75ccbec9bd75c9bdba75c8bdbebbc975b0bace73": 7, "010001000110111101101110001001110111010000100000011100110110100001101001011001100111010000101110": 7, "101110111001000010010001110110001000101111011111100011001001011110010110100110011000101111010001": 7, "shiftcipheroncapitallettersoftheenglishalphabet": 7, "010000100110100101101110011000010111001001111001": 7, "4f7665722068657861646563696d616c2073797374656d2e": 7, "bmod": [7, 16, 19], "relationship": [7, 9], "hold": [7, 10, 11], "exactli": 7, "invk": 7, "k_r": 7, "shi": 7, "od": 7, "dst": 7, "etu": 7, "cr": 7, "ncd": 7, "yno": 7, "rgh": 7, "lab": 7, "pef": 7, "wlm": 7, "mbc": 7, "fuv": 7, "gvw": 7, "vkl": 7, "tij": 7, "ujk": 7, "xmn": 7, "hwx": 7, "ixi": 7, "apq": 7, "zop": 7, "bqr": 7, "qfg": 7, "kza": 7, "jyz": 7, "shiftciph": [7, 8], "odebpyeldan": 7, "fuvsgpvcur": 7, "vkliwflskhu": 7, "dstqentaspc": 7, "eturfoubtqd": 7, "crspdmszrob": 7, "rghesbhogdq": 7, "qfgdragnfcp": 7, "labymvbiaxk": 7, "gvwthqwdvsf": 7, "zopmajpwoli": 7, "wlmjxgmtliv": 7, "xmnkyhnumjw": 7, "mbcznwcjbyl": 7, "pefcqzfmebo": 7, "ynolziovnkx": 7, "ncdaoxdkczm": 7, "ujkhvekrjgt": 7, "tijgudjqif": 7, "bqroclryqna": 7, "hwxuirxewtg": 7, "ixyvjsyfxuh": 7, "jyzwktzgyvi": 7, "kzaxluahzwj": 7, "apqnbkqxpmz": 7, "zyxwvutsrqponmlkjihgfedcba": 7, "thecatinthehat": [7, 20], "gsvxzgrmgsvszg": 7, "peter": 7, "pan": 7, "ning": 7, "gold": [7, 17, 18], "tahehtnitaceht": 7, "cat": [7, 20], "hat": [7, 17, 20], "about": [7, 19], "transpos": [7, 10], "bool": 7, "period": [7, 9, 11, 19], "abcdefghijklmn": 7, "tigfeyoubqosmg": 7, "jack": 7, "jill": 7, "went": 7, "classical_ciph": 8, "affineciph": 8, "actual": [8, 14, 17], "instanti": [8, 14], "access": [8, 14, 15], "via": 8, "hillciph": 8, "substitutionciph": 8, "transpositionciph": 8, "transit": 8, "vigenereciph": 8, "respons": [9, 16, 19], "child": 9, "turn": 9, "diagram": 9, "show": [9, 15, 17], "inherit": 9, "particular": [9, 14, 15, 16, 19, 21], "lfsrcryptosystem": [9, 19, 20], "shrinkinggeneratorcryptosystem": [9, 19, 20], "publickeycryptosystem": [9, 16], "plaintext_spac": 9, "ciphertext_spac": 9, "key_spac": 9, "set_gener": 9, "extend": [9, 16], "other": [9, 10, 12, 14, 15, 16, 19, 21], "mathcal": 9, "rightarrow": [9, 11], "rm": 9, "hom": 9, "imag": 9, "lie": [9, 19], "aut": 9, "mai": [9, 12, 17], "inject": 9, "henc": [9, 12, 14, 21], "e_k": 9, "mathrm": [9, 17], "d_": 9, "e_": 9, "ne": 9, "nor": [9, 15], "asymmetr": 9, "privat": [9, 16], "relev": [9, 10, 19], "cipher_codomain": 9, "cipher_domain": 9, "full": [9, 15], "dens": [9, 10, 15], "group": [9, 16, 19], "whose": [9, 14, 15, 16, 19], "cryptographi": [10, 12, 17], "feel": 10, "richard": 10, "lindner": 10, "rlindner": 10, "cdc": 10, "informatik": [10, 13], "tu": 10, "darmstadt": 10, "michael": [10, 12], "schneider": [10, 12], "mischnei": 10, "gen_lattic": 10, "q": [10, 12, 16, 19], "seed": [10, 12, 16, 19], "quotient": 10, "dual": 10, "ntl": 10, "integr": [10, 16], "misc": [10, 19], "randstat": 10, "set_random_se": [10, 12], "asymptot": 10, "worst": 10, "averag": 10, "connect": [10, 11, 17, 19, 20], "aj1996": 10, "basi": [10, 15, 17], "reduct": 10, "propos": [10, 12], "goldstein": 10, "mayer": 10, "gm2002": 10, "ideal": [10, 15], "compact": 10, "lm2006": 10, "cyclotom": [10, 12], "effici": 10, "determin": [10, 14, 15, 16, 17, 21], "primal": 10, "det": 10, "subseteq": 10, "coeffici": [10, 11, 12, 17], "ignor": [10, 15, 17], "regev": [10, 12], "reg2005": 10, "readabl": 10, "freemodule_submodule_with_basis_integ": 10, "triangular": 10, "lower_left": 10, "lower_right": 10, "question": 10, "14641": 10, "431": 10, "4792": 10, "1015": 10, "3086": 10, "5378": 10, "4769": 10, "1159": 10, "3082": 10, "4580": 10, "ntru": 10, "polynomialr": [10, 15, 17, 20], "swifft": 10, "famou": 10, "b_primal": 10, "b_dual": 10, "b_dual_alt": 10, "change_r": 10, "hermite_form": 10, "long": [11, 14, 15], "sourc": 11, "pseudo": 11, "golomb": 11, "go1967": 11, "give": [11, 15, 17], "bf": [11, 18], "a_n": 11, "_": [11, 12, 14, 15, 16, 17, 18], "infti": 11, "lim_": 11, "low": 11, "arrai": [11, 14, 15], "epsilon": 11, "known": 11, "proport": 11, "fourth": 11, "etc": [11, 14], "moreov": 11, "_q": 11, "x_0": [11, 16, 19], "x_": [11, 15, 16, 19], "x_1": 11, "x_2": 11, "x_n": 11, "a_0x_0": 11, "_2": 11, "c_1x": 11, "c_nx": 11, "recurs": [11, 14], "formula": 11, "rapidli": 11, "c_": 11, "certain": 11, "condit": [11, 15], "point": [11, 15, 17], "view": 11, "crack": 11, "procedur": [11, 16], "reproduc": 11, "know": 11, "berlekamp": 11, "massei": 11, "mas1969": 11, "berlekamp_massei": 11, "py": 11, "joyner": [11, 16], "2005": 11, "creation": [11, 14], "timothi": 11, "brock": [11, 19], "lfsr_sequenc": 11, "modifi": [11, 14], "python": 11, "cookbook": 11, "aspn": 11, "activest": 11, "2006": 11, "04": 11, "lfsr_autocorrel": 11, "lfsr_connection_polynomi": [11, 19], "o": [11, 17], "fill": 11, "even": [11, 16, 18], "section": [11, 16, 19], "articl": [11, 16, 18], "notic": 11, "potenti": [11, 14], "faster": 11, "c_k": 11, "x_k": 11, "c_kx_n": 11, "c_0x_": 11, "laurentseriesr": 11, "gen": [11, 15, 17], "learn": [12, 14, 15], "error": 12, "problem": 12, "solv": 12, "equat": [12, 13, 14, 15, 17], "hand": [12, 14], "side": 12, "disturb": 12, "slightli": [12, 15], "made": [12, 15], "precis": 12, "nois": 12, "typic": [12, 13, 17], "discret": 12, "gaussian": 12, "reg09": 12, "univari": [12, 17], "wa": [12, 15, 16], "lpr2010": 12, "chosen": [12, 16, 17], "literatur": [12, 17], "parameteris": 12, "modulu": 12, "deviat": 12, "401": 12, "own": [12, 14, 16, 19], "lindnerpeikert": 12, "2053": 12, "accept": [12, 15, 21], "ringlw": 12, "stat": 12, "discrete_gaussian_polynomi": 12, "discretegaussiandistributionpolynomialsampl": 12, "257": 12, "secret_dist": 12, "uniform": [12, 17, 18], "assert": 12, "technic": 12, "thei": [12, 15, 16, 21], "scalar": 12, "natur": [12, 15], "think": 12, "To": [12, 14], "s1": [12, 17], "martin": [12, 13, 15, 17], "albrecht": [12, 13, 15, 17], "robert": 12, "fitzpatrick": 12, "daniel": 12, "cabraca": 12, "florian": 12, "g\u00f6pfert": 12, "lp2011": 12, "cgw2013": 12, "discretegaussiandistributionintegersampl": 12, "uniformsampl": 12, "zmod": 12, "lb": 12, "ub": 12, "uniformli": 12, "endpoint": 12, "limit": 12, "discrete_gaussian_integ": 12, "our": [12, 14, 21], "next_prim": 12, "400": 12, "sampler": 12, "000000": 12, "def": [12, 14], "add_sampl": 12, "global": 12, "100": [12, 15, 16, 17, 19, 21], "evalu": [12, 14, 15], "dot_product": 12, "_lwe__": 12, "reli": 12, "fix": [12, 16, 17], "correct": [12, 14, 15], "numpi": 12, "std": 12, "ab": [12, 17], "200": [12, 15], "els": 12, "reset": 12, "avoid": 12, "quadrat": [12, 14, 16, 19], "behaviour": 12, "restrict": 12, "delta": [12, 17], "stddev": 12, "per": 12, "symbol": [12, 15, 17], "600954": 12, "168": [12, 15], "915069": 12, "poli": [12, 14, 20], "800": 12, "809": 12, "\u03c3": 12, "compon": [12, 14, 17], "ringlweconvert": 12, "wrapper": [12, 14], "callabl": [12, 14], "disregard": 12, "1337": 12, "216": [12, 15], "197": [12, 15], "171": [12, 15], "ringlindnerpeikert": 12, "1031": 12, "803372": 12, "uniformnoiselw": 12, "89": [12, 15], "hide": 12, "64311834871": 12, "6577": 12, "131": [12, 15], "11109": 12, "181": [12, 15], "uniformpolynomialsampl": 12, "lower_bound": [12, 16, 19], "upper_bound": [12, 16, 19], "drawn": 12, "new": [12, 14, 15], "balance_sampl": 12, "live": 12, "rlwe": 12, "subclass": 12, "shall": 12, "constructor": [12, 14, 15], "199": [12, 15], "388": 12, "337": 12, "284": 12, "336": 12, "215": [12, 15], "75": [12, 15], "274": 12, "234": [12, 15], "97": [12, 15], "255": [12, 15], "246": [12, 15], "153": [12, 15], "268": 12, "218": [12, 15], "396": 12, "351": 12, "365": 12, "227": [12, 15], "333": 12, "165": [12, 15], "328": 12, "288": 12, "206": [12, 15], "286": 12, "175": [12, 15], "155": [12, 15], "190": [12, 15], "275": 12, "114": [12, 15], "280": 12, "304": 12, "386": 12, "143": [12, 15], "117": [12, 15], "186": [12, 15, 19], "167": [12, 15], "146": [12, 15], "133": [12, 15], "183": [12, 15], "174": [12, 15], "73": [12, 15], "113": [12, 15], "195": [12, 15], "115": [12, 15], "506": 12, "1205": 12, "398": 12, "106": [12, 15], "836": 12, "1242": 12, "642": 12, "840": 12, "262": 12, "1823": 12, "1798": 12, "1831": 12, "1658": 12, "1084": 12, "915": 12, "1994": 12, "163": [12, 15], "1447": 12, "463": 12, "250": [12, 15], "1226": 12, "1906": 12, "330": 12, "933": 12, "1014": 12, "1061": 12, "1322": 12, "2035": 12, "1849": 12, "285": 12, "1993": 12, "1975": 12, "864": 12, "1341": 12, "1955": 12, "1818": 12, "1357": 12, "312": 12, "malb": 13, "uni": 13, "bremen": 13, "mq": [13, 14, 15, 17], "mpolynomialsystemgener": [13, 15], "block_ord": [13, 15], "msg": 13, "notimplementederror": 13, "polynomial_system": [13, 15], "solut": [13, 15, 17], "blocksiz": 13, "attributeerror": 13, "attribut": [13, 14], "_sbox": 13, "varformatstr": [13, 15], "understood": [13, 15], "et": [13, 15], "al": [13, 15], "Such": 13, "somewhat": 13, "02d": 13, "offset": 13, "var": [13, 15], "varstr": [13, 15], "_var": 13, "seek": 14, "fulli": 14, "whole": 14, "dr2002": [14, 18], "itself": [14, 17], "n_t": 14, "sophist": 14, "comparison": 14, "achiev": 14, "recogn": 14, "subbyt": [14, 15], "shiftrow": [14, 15], "correspondingli": 14, "rijndaelgf": 14, "round_component_poly_constr": 14, "There": [14, 17], "addition": [14, 18], "easi": [14, 18], "complex": [14, 17], "aspect": 14, "approach": 14, "similar": 14, "multivari": [14, 17], "despit": 14, "though": 14, "quit": 14, "thoma": 14, "gagn": 14, "2015": 14, "build": 14, "rijndael_gf": 14, "rgf": 14, "explicitli": [14, 15], "00112233445566778899aabbccddeeff": 14, "000102030405060708090a0b0c0d0e0f1011121314151617": 14, "dda97ca4864cdfe06eaf70a0ec0d7191": 14, "plain": 14, "11101011100111110000000111001100": 14, "01100010111101101000110010111010": 14, "11010011000010011010110001000011101110110100110100110010011011111100011011100111110011100111010011001110110100011100000011111011": 14, "3243f6a8885a308d313198a2e0370734": 14, "2b7e151628aed2a6abf7158809cf4f3c": 14, "3902dc1925dc116a8409850b1dfb9732": 14, "expected_ciphertext": 14, "3925841d02dc09fbdc118597196a0b32": 14, "revert": 14, "mixcolumn": [14, 15], "getter": 14, "sub_bytes_poli": 14, "shift_rows_poli": 14, "mix_columns_poli": 14, "keyword": [14, 15], "behavior": 14, "below": [14, 17, 19], "them": [14, 17], "sr_pc": 14, "shift_rows_poly_constr": 14, "a13": 14, "a21": 14, "mc_pc": 14, "mix_columns_poly_constr": 14, "a02": 14, "a12": 14, "a22": 14, "a32": 14, "a03": 14, "a23": 14, "a33": 14, "no_invers": 14, "step": 14, "sb_pc": 14, "sub_bytes_poly_constr": 14, "253": [14, 15], "251": [14, 15], "247": [14, 15], "239": [14, 15], "223": [14, 15], "191": [14, 15], "becaus": [14, 15, 16], "thousand": 14, "intent": 14, "recommend": 14, "inv_affin": 14, "_hex_to_gf": 14, "ff87968431d86a51645151fa773ad009": 14, "_gf_to_hex": 14, "organ": 14, "state_vr": 14, "a00": 14, "a01": 14, "a10": 14, "a11": 14, "a20": 14, "a30": 14, "a31": 14, "discuss": [14, 19], "yet": 14, "add_round_key_poli": 14, "n_r": 14, "choos": [14, 16, 17, 21], "select": [14, 19], "ark_pc": 14, "add_round_key_poly_constr": 14, "k012": 14, "k723": 14, "rest": [14, 17], "key_vr": 14, "k000": [14, 15], "k001": [14, 15], "k002": [14, 15], "k003": [14, 15], "k100": [14, 15], "k101": [14, 15], "k010": 14, "k011": 14, "k013": 14, "k110": 14, "k111": 14, "k020": 14, "k021": 14, "k022": 14, "k023": 14, "k120": 14, "k121": 14, "k030": 14, "k031": 14, "k032": 14, "k033": 14, "k130": 14, "k131": 14, "essenc": 14, "calcul": [14, 17], "fe7b5170fe7c8e93477f7e4bf6b98071": 14, "apply_poli": 14, "phi_poli": 14, "essenti": 14, "c4cedcabe694694e4b23bfdd6fb522fa": 14, "1c8b86628e22f92fb32608c1a8d5932d": 14, "sub_byt": [14, 15, 17], "altern": [14, 15], "make": [14, 16, 19, 21], "phi_poly_constr": 14, "could": [14, 16, 19], "entir": 14, "poly_constr_attr": 14, "k500": 14, "k501": 14, "k502": 14, "k503": 14, "k510": 14, "k511": 14, "k512": 14, "k513": 14, "k520": 14, "k521": 14, "k522": 14, "k523": 14, "k530": 14, "k531": 14, "k532": 14, "k533": 14, "compos": 14, "col": [14, 15], "rcpc": 14, "afb73eeb1cd1b85162280f27fb20d585": 14, "new_stat": 14, "without": [14, 17], "simpli": 14, "noth": 14, "80121e0776fd1d8a8d8c31bc965d1fe": 14, "with_decrypt": 14, "result_wd": 14, "no_decrypt": 14, "result_nd": 14, "f_attr": 14, "g_attr": 14, "dure": 14, "k412": 14, "k712": 14, "expand_key_poli": 14, "imposs": 14, "manner": 14, "expand_round_key_poli": 14, "built": 14, "poly_constr": 14, "nb": 14, "nk": 14, "state_chr": 14, "key_chr": 14, "alter": 14, "mychr": 14, "mychr02": 14, "mychr12": 14, "mychr22": 14, "mychr32": 14, "mykeychr": 14, "mykeychr121": 14, "mykeychr010": 14, "polynomial_constr": 14, "round_component_nam": 14, "kwarg": [14, 15], "abl": [14, 17], "sole": 14, "_shift_rows_pc": 14, "_mix_columns_pc": 14, "d1876c0f79c4300ab45594add66ff41f": 14, "sens": [14, 15], "act": 14, "ensur": [14, 16, 19], "except": [14, 15], "alwai": [14, 15], "k900": 14, "k901": 14, "k902": 14, "k903": 14, "k910": 14, "k911": 14, "k912": 14, "k913": 14, "k920": 14, "k921": 14, "k922": 14, "k923": 14, "k930": 14, "k931": 14, "k932": 14, "k933": 14, "fn": 14, "k323": 14, "automat": 14, "my_poly_constr": 14, "_f": 14, "bodi": 14, "my": 14, "constr": 14, "add_round_kei": [14, 15], "entrywis": 14, "36339d50f9b539269f2c092dc4406d23": 14, "7cc78d0e22754e667e24573f454a6531": 14, "key_schedul": [14, 15], "expand_kei": 14, "4af4105edbc07740e1085e12810a0812": 14, "with_encrypt": 14, "k721": 14, "k600": 14, "k601": 14, "k602": 14, "k603": 14, "k610": 14, "k611": 14, "k612": 14, "k613": 14, "k620": 14, "k621": 14, "k622": 14, "k623": 14, "k630": 14, "k631": 14, "k632": 14, "k633": 14, "k331": 14, "poly_method": 14, "replac": [14, 15], "suppli": 14, "remain": 14, "3b59cb73fcd90ee05774222dc067fb68": 14, "3bd92268fc74fb735767cbe0c0590e2d": 14, "4915598f55e5d7a0daca94fa1f0a63f7": 14, "apply_poly_result": 14, "direct_result": 14, "14f9701ae35fe28c440adf4d4ea9c026": 14, "54d990a16ba09ab596bbf40ea111702f": 14, "On": 14, "mcp": 14, "fa636a2825b339c940668a3157244d17": 14, "36400926f9336d2d9fb59d23c42c3950": 14, "f4bcd45432e554d075f1d6c51dd03b3c": 14, "fn2": 14, "2dfb02343f6d12dd09337ec75b36e3f0": 14, "expected_plaintext": 14, "1e1d913b7274ad9b5a4ab1a5f9133b93": 14, "00011010000011100011000000111101": 14, "00110010001110000111110110000001": 14, "101111111010011100111100101010100111": 14, "1111010000101101100001101000000000000000010000000100111011": 14, "0100001111100011010001101101001011": 14, "c81677bc9b7ac93b25027992b0261996": 14, "fde3bad205e5d0d73547964ef1fe37f1": 14, "e767290ddfc6414e3c50a444bec081f0": 14, "10010111110000011111011011010001": 14, "00000000101000000000000001111011": 14, "11010111100100001010001011110010111": 14, "1110011000000011111100100011011100101000000001000111000010": 14, "00100111011011001000111101111110100": 14, "n_k": 14, "nr": [14, 15], "n_b": 14, "331d0084b176c3fb59caa0eda271b565bb5d9a2d1e4b2892": 14, "key_stat": 14, "331d0084b176c3fb59caa0eda271b565": 14, "5c5d51c4121f018d0f4f3e408ae9f78c": 14, "00000000000000000000000000000000": 14, "key_length": 14, "applic": [14, 15], "cd54c7283864c0c55d4c727e90c9a465": 14, "921f748fd96e937d622d7725ba8ba50c": 14, "unlik": 14, "number_round": 14, "adcb0f257e9c63e0bc557e951c15ef01": 14, "ad9c7e017e55ef25bc150fe01ccb6395": 14, "d1c4941f7955f40fb46f6c0ad68730ad": 14, "3e1c22c0b6fcbf768da85067f6170495": 14, "caus": 14, "mean": 14, "slow": 14, "wish": 14, "strongli": 14, "intend": 14, "39daee38f4f1a82aaf432410c36d45b9": 14, "961c72894526f746aa85fc920adcc719": 14, "necessari": 14, "enhanc": 14, "unfortun": 14, "emploi": 14, "paper": [15, 19], "cmr2005": 15, "cmr2006": 15, "2008": [15, 17], "usabl": 15, "improv": [15, 17], "nile": 15, "johnson": 15, "3893": 15, "underli": 15, "appear": 15, "repr_long": 15, "deglex": 15, "k102": 15, "k103": 15, "x100": 15, "x101": 15, "x102": 15, "x103": 15, "w100": 15, "w101": 15, "w102": 15, "w103": 15, "s000": 15, "s001": 15, "s002": 15, "s003": 15, "prevent": 15, "reverse_vari": 15, "isn": 15, "interest": 15, "lin": 15, "mstar": 15, "groebner": [15, 17], "span": [15, 17], "gf2": 15, "polybori": 15, "base_r": [15, 17], "groebner_basi": 15, "verifi": [15, 19], "varieti": 15, "epic": 15, "fail": 15, "difference_distribution_t": [15, 17], "find": [15, 16], "y2": [15, 17], "y0": [15, 17], "y1": [15, 17], "y3": 15, "interpolation_polynomi": [15, 17], "sr_gf2_2": 15, "mr2002": 15, "allowzeroinversionscontext": 15, "temporarili": 15, "star": 15, "subject": 15, "expon": [15, 18], "aes_mod": 15, "rather": 15, "postfix": 15, "append": 15, "allow_zero_invers": [15, 17], "rais": [15, 17], "correct_onli": 15, "biaffine_onli": 15, "bilinear": 15, "biaffin": 15, "shift_rows_matrix": 15, "mix_columns_matrix": 15, "lin_matrix": 15, "hex_str_matrix": 15, "sr_gener": 15, "someth": 15, "coercibl": 15, "random_state_arrai": 15, "lexicograph": [15, 17], "k200": 15, "k201": 15, "k202": 15, "k203": 15, "x200": 15, "x201": 15, "x202": 15, "x203": 15, "w200": 15, "w201": 15, "w202": 15, "w203": 15, "s100": 15, "s101": 15, "s102": 15, "s103": 15, "hex_str": 15, "typ": 15, "1024": 15, "dimension": 15, "hex_str_vector": 15, "is_state_arrai": 15, "kj": 15, "k_j": 15, "state_arrai": 15, "b4": 15, "3e": 15, "6f": 15, "ef": 15, "92": 15, "e9": 15, "8f": 15, "5b": 15, "e2": [15, 18, 20], "cb": 15, "8e": 15, "key_schedule_polynomi": 15, "conjugaci": 15, "new_gener": 15, "sr2": 15, "sr3": 15, "inversion_polynomials_single_sbox": 15, "neither": 15, "mayb": 15, "better": 15, "vn": 15, "variable_nam": 15, "pure": 15, "c000": 15, "c001": 15, "c002": 15, "c003": 15, "part": 15, "p000": 15, "p001": 15, "p002": 15, "p003": 15, "workaround": 15, "trac": 15, "31891": 15, "try": 15, "break": [15, 21], "zerodivisionerror": 15, "1248": 15, "elem_typ": 15, "random_": 15, "extra": 15, "densiti": 15, "random_vector": 15, "might": [15, 16, 17, 19, 21], "express": 15, "alreadi": 15, "monomi": [15, 17, 18], "assign": [15, 17], "conjug": 15, "s_": 15, "major": 15, "round_polynomi": 15, "mandatori": 15, "inversion_onli": 15, "sage_ev": 15, "99": 15, "119": 15, "242": 15, "107": 15, "111": 15, "103": 15, "118": 15, "202": 15, "130": 15, "201": 15, "71": 15, "240": 15, "173": 15, "212": 15, "162": 15, "156": 15, "164": 15, "192": 15, "147": 15, "204": 15, "229": 15, "241": 15, "150": 15, "154": 15, "226": 15, "235": 15, "178": 15, "110": 15, "90": 15, "160": 15, "82": 15, "214": 15, "179": 15, "132": 15, "83": 15, "209": 15, "237": 15, "252": 15, "177": 15, "91": 15, "203": 15, "74": 15, "88": 15, "207": 15, "208": 15, "170": 15, "69": [15, 21], "249": 15, "159": 15, "81": 15, "157": 15, "245": 15, "188": 15, "182": 15, "243": 15, "205": 15, "236": 15, "95": 15, "151": 15, "196": 15, "93": 15, "96": [15, 17], "129": 15, "144": 15, "136": 15, "70": 15, "238": 15, "184": 15, "222": 15, "94": 15, "219": 15, "224": 15, "194": 15, "211": 15, "172": 15, "98": 15, "145": 15, "149": 15, "228": 15, "231": 15, "109": 15, "141": 15, "213": 15, "169": 15, "108": 15, "86": 15, "244": 15, "101": [15, 21], "166": 15, "180": 15, "198": 15, "232": 15, "221": 15, "116": 15, "189": 15, "139": 15, "138": 15, "102": 15, "72": 15, "87": 15, "185": 15, "134": 15, "193": 15, "158": 15, "225": 15, "248": 15, "152": 15, "105": 15, "217": 15, "142": 15, "148": 15, "135": 15, "233": 15, "85": 15, "140": 15, "161": 15, "137": 15, "230": 15, "104": 15, "176": 15, "84": 15, "187": 15, "sbox_const": 15, "0x63": 15, "0x6": [15, 17], "e1": [15, 20], "from_integ": 15, "byte": 15, "halfbyt": 15, "zerodivis": 15, "disabl": 15, "inconsist": 15, "rc": 15, "numer": 15, "width": 15, "01d": 15, "03d": 15, "variable_dict": 15, "x210": 15, "x211": 15, "x212": 15, "x213": 15, "constraint": 15, "sr_gf2": 15, "antiphi": 15, "is_vector": 15, "field_polynomi": 15, "x204": 15, "x205": 15, "x206": 15, "x207": 15, "inversion_polynomi": 15, "xi": [15, 17], "wi": 15, "w107": 15, "w106": 15, "w105": 15, "w104": 15, "x104": 15, "x105": 15, "x106": 15, "x107": 15, "l0": 15, "l1": 15, "l2": 15, "l3": 15, "_inversion_polynomials_single_sbox": 15, "explicit": 15, "r1": 15, "r2": 15, "diffusion_matrix": 15, "match": [15, 17], "custom": 15, "precomput": 15, "lex": [15, 17], "w0": 15, "w1": 15, "w2": 15, "w3": 15, "sr_gf2n": 15, "project": 15, "BES": 15, "test_consist": 15, "max_n": 15, "bg1985": 16, "mvov1996": [16, 19], "wikipedia": [16, 18], "goldwasser_cryptosystem": 16, "mike": 16, "hogan": 16, "releas": 16, "softwar": 16, "relicens": 16, "gplv2": 16, "complet": [16, 17], "rewrit": 16, "public_kei": 16, "blum_goldwass": 16, "blumgoldwass": 16, "concept": 16, "odd": [16, 17, 18, 21], "1111011": [16, 21], "least_significant_bit": [16, 21], "309": 16, "310": 16, "bg": 16, "499": 16, "547": 16, "pubkei": 16, "272953": 16, "prikei": 16, "private_kei": 16, "10011100000100001100": 16, "159201": 16, "139680": 16, "join": 16, "flatten": 16, "bin_to_ascii": [16, 21], "pq": [16, 19], "furthermor": 16, "bq": 16, "c_t": 16, "c_i": [16, 21], "shub": [16, 19], "distinct": [16, 19, 21], "vap": 16, "ubq": 16, "x_i": [16, 19], "p_i": 16, "m_i": 16, "m_1": 16, "m_2": 16, "m_t": 16, "ascii": [16, 21], "78307": 16, "412487": 16, "3479653279": 16, "white": 16, "ast": [16, 19], "lfloor": 16, "log_2": 16, "rfloor": 16, "x_t": 16, "divid": 16, "fall": 16, "00100000110011100100": 16, "32300619509": 16, "congruent": [16, 19, 21], "is_blum_prim": [16, 21], "primes_first_n": 16, "random_blum_prim": [16, 19, 21], "factor": 16, "lbound": [16, 19, 21], "ubound": [16, 19, 21], "ntri": [16, 19, 21], "lower": [16, 19, 21], "larg": [16, 19, 21], "randomli": 16, "guarante": [16, 17], "308": 16, "euclidean": 16, "bewar": [16, 19, 21], "sure": [16, 19, 21], "suffici": [16, 19, 21], "far": [16, 19, 21], "apart": [16, 19, 21], "requir": 16, "mxn": 17, "often": 17, "lookup": 17, "carefulli": 17, "resist": 17, "differenti": [17, 18], "he2002": 17, "treatment": 17, "strong": 17, "bia": 17, "toward": 17, "big_endian": 17, "cdl2015": [17, 18], "autocorrelation_t": 17, "boomerang_connectivity_t": 17, "boomerang": 17, "bct": 17, "delta_i": 17, "delta_o": 17, "concern": 17, "chpss18": 17, "dunkelman": 17, "du2018": 17, "boomerang_uniform": 17, "highest": 17, "cnf": 17, "yi": 17, "conjunct": 17, "examin": 17, "claus": 17, "sign": 17, "pars": 17, "symboliclog": 17, "packag": 17, "dimac": 17, "sat": 17, "solver": 17, "www": [17, 18], "satlib": 17, "org": 17, "dimacs_headless": 17, "header": 17, "explain": 17, "manual": 17, "log": 17, "statement": 17, "truthtabl": 17, "shuffl": 17, "is_permut": [17, 18], "component_funct": 17, "output_s": 17, "f3": 17, "f5": 17, "max_degre": 17, "ddt": 17, "endia": 17, "introduct": 17, "differential_branch_numb": 17, "branch": 17, "min_": 17, "neq": 17, "wt": 17, "differential_uniform": [17, 18], "occur": 17, "maximal_difference_probability_absolut": 17, "mainli": 17, "fixed_point": 17, "from_bit": 17, "bitstr": 17, "input_s": [17, 18], "handl": 17, "25633": 17, "sinv": 17, "is_almost_b": 17, "almost": 17, "is_apn": 17, "perfect": 17, "apn": 17, "alpha": 17, "beta": 17, "linear_approximation_t": 17, "is_involut": 17, "involut": 17, "is_monomial_funct": 17, "s_poli": 17, "absolute_bia": 17, "approxim": 17, "lat": 17, "pr": 17, "fourier": 17, "fourier_coeffici": 17, "lat_abs_bia": 17, "third": 17, "to_bit": 17, "linear_branch_numb": 17, "substack": 17, "lam": 17, "impli": 17, "maximal_difference_prob": 17, "maximal_linear_bias_absolut": 17, "minu": 17, "maximal_linear_bias_rel": 17, "min_degre": 17, "minimum": 17, "fit": 17, "bc2003": 17, "cach": 17, "feistel_construct": 17, "feistel": 17, "misty_construct": 17, "misti": 17, "further": 17, "consult": 17, "s2": 17, "s3": 17, "0x4": 17, "0x1": 17, "0xf": 17, "0x2": 17, "0xb": 17, "0x7": 17, "0x3": 17, "0x9": 17, "0xa": 17, "0x5": 17, "0xc": 17, "0xd": 17, "0xe": 17, "0x8": 17, "brackenleand": 18, "bralea2008": 18, "carlettangtangliao": 18, "cttl2014": 18, "gol1968": 18, "kasami": 18, "kas1971": 18, "niho": 18, "dob1999a": 18, "welch": 18, "dob1999b": 18, "drygascon256": 18, "rio2019": 18, "flexaead": 18, "nx2019": 18, "anubi": 18, "br2000a": 18, "aria_s2": 18, "kkpsssyyllchh2004": 18, "belt": 18, "bel2011": 18, "camellia": 18, "aikmmnt2001": 18, "cmea": 18, "wsk1997": 18, "chiasmu": 18, "stw2013": 18, "clefia_s0": 18, "clefia_s1": 18, "ssami2007": 18, "crypton_0_5": 18, "lim": 18, "crypton_1_0_s0": 18, "crypton_1_0_s3": 18, "lim2001": 18, "cs_cipher": 18, "sv2000": 18, "csa": 18, "ww2005": 18, "css": 18, "bd2004": 18, "dblock": 18, "wzy2015": 18, "kmautom2000": 18, "enocoro": 18, "wfytp2008": 18, "fantoma": 18, "glsv2014": 18, "fly": 18, "kg2016": 18, "fox": 18, "vj2004": 18, "iceberg": 18, "sprql2004": 18, "iraqi": 18, "iraqi_block_ciph": 18, "iscream": 18, "glsvjgk2014": 18, "kalyna_pi0": 18, "kalyna_pi3": 18, "ogkrkgbddp2015": 18, "khazad": 18, "br2000b": 18, "kuznyechik": 18, "kuznechik": 18, "streebog": 18, "stribog": 18, "fed2015": 18, "lilliput": 18, "abcfhllmrt2019": 18, "md2": 18, "kal1992": 18, "newd": 18, "sco1985": 18, "picaro": 18, "prc2012": 18, "safer": 18, "mas1994": 18, "scream": 18, "seed_s0": 18, "seed_s1": 18, "llycl2005": 18, "skinny_8": 18, "forkskinny_8": 18, "alprrv2019": 18, "remus_8": 18, "ikmp2019a": 18, "romulu": 18, "ikmp2019b": 18, "bjklmpsss2016": 18, "skipjack": 18, "s1998": 18, "snow_3g_sq": 18, "ets2006a": 18, "sms4": 18, "ltd06": 18, "ture": 18, "rh2003b": 18, "twofish_p0": 18, "twofish_p1": 18, "skwwhf1998": 18, "whirlpool": 18, "br2000c": 18, "zorro": 18, "ggns2013": 18, "zuc_s0": 18, "zuc_s1": 18, "ets2011": 18, "wage": 18, "aagmrz2019": 18, "fides_6": 18, "bbkmw2013": 18, "apn_6": 18, "bdmw2010": 18, "sc2000_6": 18, "syytiytt2002": 18, "ascon": 18, "isap": 18, "demmmpu2019": 18, "dems2016": 18, "drygascon128": 18, "fides_5": 18, "sc2000_5": 18, "shamash": 18, "pm2019": 18, "sycon": 18, "sms2019": 18, "eleph": 18, "bcdm2019": 18, "knot": 18, "zdybxjz2019": 18, "pyjamask_4": 18, "gjkprss2019": 18, "saturnin_0": 18, "saturnin_1": 18, "cdlnpps2019": 18, "spook": 18, "clyde": 18, "shadow": 18, "bbbcdglllmppsw2019": 18, "trifl": 18, "dgmpps2019": 18, "yarara": 18, "coral": 18, "mp2019": 18, "des_s1_1": 18, "des_s1_4": 18, "des_s8_4": 18, "lucifer_s0": 18, "lucifer_s1": 18, "sor1984": 18, "gost_1": 18, "gost_8": 18, "cypherpunk": 18, "ru": 18, "pygost": 18, "gost2_1": 18, "gost2_2": 18, "magma_1": 18, "magma_8": 18, "gost_ietf_1": 18, "gost_ietf_8": 18, "hummingbird_2_s1": 18, "hummingbird_2_s4": 18, "esss2011": 18, "lblock_0": 18, "lblock_9": 18, "wz2011": 18, "serpent_s0": 18, "serpent_s7": 18, "bak1998": 18, "klein": 18, "gnl2011": 18, "mib": 18, "issk2009": 18, "midori_sb0": 18, "manti": 18, "craft": 18, "midori_sb1": 18, "bbishar2015": 18, "noekeon": 18, "dpvar2000": 18, "piccolo": 18, "sihmas2011": 18, "panda": 18, "ywhwxsw2014": 18, "cilipadi": 18, "zjrrs2019": 18, "photon": 18, "bcdgnpy2019": 18, "orang": 18, "cn2019": 18, "gift": 18, "fountain_1": 18, "hyena": 18, "cdjn2019": 18, "tgif": 18, "ikmpsss2019": 18, "bppsst2017": 18, "fountain_2": 18, "fountain_3": 18, "fountain_4": 18, "zha2019": 18, "pride": 18, "adklpy2014": 18, "princ": 18, "bcgkkklnprrty2012": 18, "prost": 18, "kllrsy2014": 18, "qarma_sigma0": 18, "qarma_sigma1": 18, "qameleon": 18, "abbdhr2019": 18, "qarma_sigma2": 18, "ava2017": 18, "rec_0": 18, "earlier": 18, "zblryv2015": 18, "rectangl": 18, "sc2000_4": 18, "skinny_4": 18, "forkskinny_4": 18, "remus_4": 18, "twine": 18, "smmk2013": 18, "luffa_v1": 18, "dcsw2008": 18, "luffa": 18, "blake_1": 18, "blake_9": 18, "ahmp2008": 18, "jh_s0": 18, "jh_s1": 18, "wu2009": 18, "smash_256_s1": 18, "smash_256_s3": 18, "knu2005": 18, "anubis_s0": 18, "anubis_s1": 18, "clefia_ss0": 18, "clefia_ss3": 18, "enocoro_s4": 18, "iceberg_s0": 18, "iceberg_s1": 18, "khazad_p": 18, "khazad_q": 18, "whirlpool_": 18, "whirlpool_r": 18, "cs_cipher_f": 18, "cs_cipher_g": 18, "fox_s1": 18, "fox_s3": 18, "twofish_q0_t0": 18, "twofish_q0_t3": 18, "twofish_q1_t0": 18, "twofish_q1_t3": 18, "kuznyechik_nu0": 18, "kuznyechik_nu1": 18, "kuznyechik_sigma": 18, "kuznyechik_phi": 18, "bpu2016": 18, "udcikmp11": 18, "udcikmp2011": 18, "optimal_s0": 18, "optimal_s15": 18, "lp2007": 18, "serpent_type_s0": 18, "serpent_type_s19": 18, "golden_s0": 18, "golden_s3": 18, "saa2011": 18, "302": 18, "dca2007": 18, "sea": 18, "spgq2006": 18, "printciph": 18, "klpr2010": 18, "pyjamask_3": 18, "offer": 18, "leo": 18, "perrin": 18, "collect": 18, "friedrich": 18, "wiemer": 18, "2017": 18, "refactor": 18, "nist": 18, "lwc": 18, "bracken_leand": 18, "bracken": 18, "leander": 18, "2k": 18, "2742": 18, "4035": 18, "1264": 18, "408": 18, "1473": 18, "1327": 18, "carlet_tang_tang_liao": 18, "carlet": 18, "tang": 18, "liao": 18, "definit": 18, "trace": 18, "cttl": 18, "2i": 18, "monomial_funct": 18, "3t": 18, "shrink": [19, 20], "blum_blum_shub": 19, "bb": 19, "pseudorandom": 19, "bbs1986": 19, "congruenc": 19, "common": 19, "pre": 19, "worri": 19, "anyth": 19, "adapt": 19, "z_i": 19, "z_1": 19, "z_2": 19, "z_l": 19, "110000": 19, "001011": 19, "110111": 19, "hypothes": 19, "bbs1982": 19, "sketch": 19, "proof": 19, "carmichael": 19, "few": 19, "written": 19, "tim": 19, "arith": 19, "carmichael_lambda": 19, "stream_ciph": 20, "lfsrcipher": 20, "ff": 20, "0010001101111010111010101010001100000000110100010101011100001011110010010000011111100100100011001101101000001111": 20, "00111001110111101011111001001101110101011011101000011001100101101011001000000011100101101010111100000101110100111111101100000101110101111010111101000011": 20, "connection_polynomi": 20, "initial_st": 20, "shrinkinggeneratorciph": 20, "is_1": 20, "is_2": 20, "decimating_ciph": 20, "keystream_ciph": 20, "miscellan": 21, "ascii_integ": 21, "ascii_to_bin": 21, "has_blum_prim": 21, "01000001": 21, "01000100": 21, "abc123": 21, "010000010110001001100011001100010011001000110011": 21, "00100000": 21, "bc": 21, "8n": 21, "abc": 21, "010000010110001001100011": 21, "00110001001100100011001100100000001000100010000000100011": 21, "close": 21, "interv": 21, "main": 21, "focu": 21, "presenc": 21, "is_prim": 21}, "objects": {"sage.crypto.block_cipher": [[1, 0, 0, "-", "des"], [2, 0, 0, "-", "miniaes"], [3, 0, 0, "-", "present"], [4, 0, 0, "-", "sdes"]], "sage.crypto.block_cipher.des": [[1, 1, 1, "", "DES"], [1, 1, 1, "", "DES_KS"], [1, 3, 1, "", "convert_to_vector"]], "sage.crypto.block_cipher.des.DES": [[1, 2, 1, "", "__call__"], [1, 2, 1, "", "__init__"], [1, 2, 1, "", "decrypt"], [1, 2, 1, "", "encrypt"], [1, 2, 1, "", "round"], [1, 2, 1, "", "sbox_layer"]], "sage.crypto.block_cipher.des.DES_KS": [[1, 2, 1, "", "__call__"], [1, 2, 1, "", "__init__"]], "sage.crypto.block_cipher.miniaes": [[2, 1, 1, "", "MiniAES"]], "sage.crypto.block_cipher.miniaes.MiniAES": [[2, 2, 1, "", "GF_to_binary"], [2, 2, 1, "", "GF_to_integer"], [2, 2, 1, "", "add_key"], [2, 2, 1, "", "binary_to_GF"], [2, 2, 1, "", "binary_to_integer"], [2, 2, 1, "", "block_length"], [2, 2, 1, "", "decrypt"], [2, 2, 1, "", "encrypt"], [2, 2, 1, "", "integer_to_GF"], [2, 2, 1, "", "integer_to_binary"], [2, 2, 1, "", "mix_column"], [2, 2, 1, "", "nibble_sub"], [2, 2, 1, "", "random_key"], [2, 2, 1, "", "round_key"], [2, 2, 1, "", "sbox"], [2, 2, 1, "", "shift_row"]], "sage.crypto.block_cipher.present": [[3, 1, 1, "", "PRESENT"], [3, 1, 1, "", "PRESENT_KS"], [3, 3, 1, "", "convert_to_vector"]], "sage.crypto.block_cipher.present.PRESENT": [[3, 2, 1, "", "__call__"], [3, 2, 1, "", "__init__"], [3, 2, 1, "", "decrypt"], [3, 2, 1, "", "encrypt"], [3, 2, 1, "", "linear_layer"], [3, 2, 1, "", "round"], [3, 2, 1, "", "sbox_layer"]], "sage.crypto.block_cipher.present.PRESENT_KS": [[3, 2, 1, "", "__call__"], [3, 2, 1, "", "__init__"]], "sage.crypto.block_cipher.sdes": [[4, 1, 1, "", "SimplifiedDES"]], "sage.crypto.block_cipher.sdes.SimplifiedDES": [[4, 2, 1, "", "block_length"], [4, 2, 1, "", "decrypt"], [4, 2, 1, "", "encrypt"], [4, 2, 1, "", "initial_permutation"], [4, 2, 1, "", "left_shift"], [4, 2, 1, "", "list_to_string"], [4, 2, 1, "", "permutation10"], [4, 2, 1, "", "permutation4"], [4, 2, 1, "", "permutation8"], [4, 2, 1, "", "permute_substitute"], [4, 2, 1, "", "random_key"], [4, 2, 1, "", "sbox"], [4, 2, 1, "", "string_to_list"], [4, 2, 1, "", "subkey"], [4, 2, 1, "", "switch"]], "sage.crypto": [[5, 0, 0, "-", "boolean_function"], [6, 0, 0, "-", "cipher"], [7, 0, 0, "-", "classical"], [8, 0, 0, "-", "classical_cipher"], [9, 0, 0, "-", "cryptosystem"], [10, 0, 0, "-", "lattice"], [11, 0, 0, "-", "lfsr"], [12, 0, 0, "-", "lwe"], [17, 0, 0, "-", "sbox"], [18, 0, 0, "-", "sboxes"], [19, 0, 0, "-", "stream"], [20, 0, 0, "-", "stream_cipher"], [21, 0, 0, "-", "util"]], "sage.crypto.boolean_function": [[5, 1, 1, "", "BooleanFunction"], [5, 1, 1, "", "BooleanFunctionIterator"], [5, 3, 1, "", "random_boolean_function"], [5, 3, 1, "", "unpickle_BooleanFunction"]], "sage.crypto.boolean_function.BooleanFunction": [[5, 2, 1, "", "absolut_indicator"], [5, 2, 1, "", "absolute_autocorrelation"], [5, 2, 1, "", "absolute_indicator"], [5, 2, 1, "", "absolute_walsh_spectrum"], [5, 2, 1, "", "algebraic_degree"], [5, 2, 1, "", "algebraic_immunity"], [5, 2, 1, "", "algebraic_normal_form"], [5, 2, 1, "", "annihilator"], [5, 2, 1, "", "autocorrelation"], [5, 2, 1, "", "correlation_immunity"], [5, 2, 1, "", "derivative"], [5, 2, 1, "", "has_linear_structure"], [5, 2, 1, "", "is_balanced"], [5, 2, 1, "", "is_bent"], [5, 2, 1, "", "is_linear_structure"], [5, 2, 1, "", "is_plateaued"], [5, 2, 1, "", "is_symmetric"], [5, 2, 1, "", "linear_structures"], [5, 2, 1, "", "nonlinearity"], [5, 2, 1, "", "nvariables"], [5, 2, 1, "", "resiliency_order"], [5, 2, 1, "", "sum_of_square_indicator"], [5, 2, 1, "", "truth_table"], [5, 2, 1, "", "walsh_hadamard_transform"]], "sage.crypto.cipher": [[6, 1, 1, "", "Cipher"], [6, 1, 1, "", "PublicKeyCipher"], [6, 1, 1, "", "SymmetricKeyCipher"]], "sage.crypto.cipher.Cipher": [[6, 2, 1, "", "codomain"], [6, 2, 1, "", "domain"], [6, 2, 1, "", "key"]], "sage.crypto.classical": [[7, 1, 1, "", "AffineCryptosystem"], [7, 1, 1, "", "HillCryptosystem"], [7, 1, 1, "", "ShiftCryptosystem"], [7, 1, 1, "", "SubstitutionCryptosystem"], [7, 1, 1, "", "TranspositionCryptosystem"], [7, 1, 1, "", "VigenereCryptosystem"]], "sage.crypto.classical.AffineCryptosystem": [[7, 2, 1, "", "brute_force"], [7, 2, 1, "", "deciphering"], [7, 2, 1, "", "enciphering"], [7, 2, 1, "", "encoding"], [7, 2, 1, "", "inverse_key"], [7, 2, 1, "", "random_key"], [7, 2, 1, "", "rank_by_chi_square"], [7, 2, 1, "", "rank_by_squared_differences"]], "sage.crypto.classical.HillCryptosystem": [[7, 2, 1, "", "block_length"], [7, 2, 1, "", "deciphering"], [7, 2, 1, "", "enciphering"], [7, 2, 1, "", "encoding"], [7, 2, 1, "", "inverse_key"], [7, 2, 1, "", "random_key"]], "sage.crypto.classical.ShiftCryptosystem": [[7, 2, 1, "", "brute_force"], [7, 2, 1, "", "deciphering"], [7, 2, 1, "", "enciphering"], [7, 2, 1, "", "encoding"], [7, 2, 1, "", "inverse_key"], [7, 2, 1, "", "random_key"], [7, 2, 1, "", "rank_by_chi_square"], [7, 2, 1, "", "rank_by_squared_differences"]], "sage.crypto.classical.SubstitutionCryptosystem": [[7, 2, 1, "", "deciphering"], [7, 2, 1, "", "enciphering"], [7, 2, 1, "", "encoding"], [7, 2, 1, "", "inverse_key"], [7, 2, 1, "", "random_key"]], "sage.crypto.classical.TranspositionCryptosystem": [[7, 2, 1, "", "deciphering"], [7, 2, 1, "", "enciphering"], [7, 2, 1, "", "encoding"], [7, 2, 1, "", "inverse_key"], [7, 2, 1, "", "random_key"]], "sage.crypto.classical.VigenereCryptosystem": [[7, 2, 1, "", "deciphering"], [7, 2, 1, "", "enciphering"], [7, 2, 1, "", "encoding"], [7, 2, 1, "", "inverse_key"], [7, 2, 1, "", "random_key"]], "sage.crypto.classical_cipher": [[8, 1, 1, "", "AffineCipher"], [8, 1, 1, "", "HillCipher"], [8, 1, 1, "", "ShiftCipher"], [8, 1, 1, "", "SubstitutionCipher"], [8, 1, 1, "", "TranspositionCipher"], [8, 1, 1, "", "VigenereCipher"]], "sage.crypto.classical_cipher.HillCipher": [[8, 2, 1, "", "inverse"]], "sage.crypto.classical_cipher.SubstitutionCipher": [[8, 2, 1, "", "inverse"]], "sage.crypto.classical_cipher.TranspositionCipher": [[8, 2, 1, "", "inverse"]], "sage.crypto.classical_cipher.VigenereCipher": [[8, 2, 1, "", "inverse"]], "sage.crypto.cryptosystem": [[9, 1, 1, "", "Cryptosystem"], [9, 1, 1, "", "PublicKeyCryptosystem"], [9, 1, 1, "", "SymmetricKeyCryptosystem"]], "sage.crypto.cryptosystem.Cryptosystem": [[9, 2, 1, "", "block_length"], [9, 2, 1, "", "cipher_codomain"], [9, 2, 1, "", "cipher_domain"], [9, 2, 1, "", "ciphertext_space"], [9, 2, 1, "", "key_space"], [9, 2, 1, "", "period"], [9, 2, 1, "", "plaintext_space"]], "sage.crypto.cryptosystem.SymmetricKeyCryptosystem": [[9, 2, 1, "", "alphabet_size"]], "sage.crypto.lattice": [[10, 3, 1, "", "gen_lattice"]], "sage.crypto.lfsr": [[11, 3, 1, "", "lfsr_autocorrelation"], [11, 3, 1, "", "lfsr_connection_polynomial"], [11, 3, 1, "", "lfsr_sequence"]], "sage.crypto.lwe": [[12, 1, 1, "", "LWE"], [12, 1, 1, "", "LindnerPeikert"], [12, 1, 1, "", "Regev"], [12, 1, 1, "", "RingLWE"], [12, 1, 1, "", "RingLWEConverter"], [12, 1, 1, "", "RingLindnerPeikert"], [12, 1, 1, "", "UniformNoiseLWE"], [12, 1, 1, "", "UniformPolynomialSampler"], [12, 1, 1, "", "UniformSampler"], [12, 3, 1, "", "balance_sample"], [12, 3, 1, "", "samples"]], "sage.crypto.lwe.LWE": [[12, 2, 1, "", "__call__"], [12, 2, 1, "", "__init__"]], "sage.crypto.lwe.LindnerPeikert": [[12, 2, 1, "", "__init__"]], "sage.crypto.lwe.Regev": [[12, 2, 1, "", "__init__"]], "sage.crypto.lwe.RingLWE": [[12, 2, 1, "", "__call__"], [12, 2, 1, "", "__init__"]], "sage.crypto.lwe.RingLWEConverter": [[12, 2, 1, "", "__call__"], [12, 2, 1, "", "__init__"]], "sage.crypto.lwe.RingLindnerPeikert": [[12, 2, 1, "", "__init__"]], "sage.crypto.lwe.UniformNoiseLWE": [[12, 2, 1, "", "__init__"]], "sage.crypto.lwe.UniformPolynomialSampler": [[12, 2, 1, "", "__call__"], [12, 2, 1, "", "__init__"]], "sage.crypto.lwe.UniformSampler": [[12, 2, 1, "", "__call__"], [12, 2, 1, "", "__init__"]], "sage.crypto.mq": [[13, 0, 0, "-", "mpolynomialsystemgenerator"], [14, 0, 0, "-", "rijndael_gf"], [15, 0, 0, "-", "sr"]], "sage.crypto.mq.mpolynomialsystemgenerator": [[13, 1, 1, "", "MPolynomialSystemGenerator"]], "sage.crypto.mq.mpolynomialsystemgenerator.MPolynomialSystemGenerator": [[13, 2, 1, "", "block_order"], [13, 2, 1, "", "polynomial_system"], [13, 2, 1, "", "random_element"], [13, 2, 1, "", "ring"], [13, 2, 1, "", "sbox"], [13, 2, 1, "", "varformatstr"], [13, 2, 1, "", "vars"], [13, 2, 1, "", "varstrs"]], "sage.crypto.mq.rijndael_gf": [[14, 1, 1, "", "RijndaelGF"]], "sage.crypto.mq.rijndael_gf.RijndaelGF": [[14, 1, 1, "", "Round_Component_Poly_Constr"], [14, 2, 1, "", "add_round_key"], [14, 2, 1, "", "add_round_key_poly_constr"], [14, 2, 1, "", "apply_poly"], [14, 2, 1, "", "block_length"], [14, 2, 1, "", "compose"], [14, 2, 1, "", "decrypt"], [14, 2, 1, "", "encrypt"], [14, 2, 1, "", "expand_key"], [14, 2, 1, "", "expand_key_poly"], [14, 2, 1, "", "key_length"], [14, 2, 1, "", "mix_columns"], [14, 2, 1, "", "mix_columns_poly_constr"], [14, 2, 1, "", "number_rounds"], [14, 2, 1, "", "shift_rows"], [14, 2, 1, "", "shift_rows_poly_constr"], [14, 2, 1, "", "sub_bytes"], [14, 2, 1, "", "sub_bytes_poly_constr"]], "sage.crypto.mq.sr": [[15, 1, 1, "", "AllowZeroInversionsContext"], [15, 3, 1, "", "SR"], [15, 1, 1, "", "SR_generic"], [15, 1, 1, "", "SR_gf2"], [15, 1, 1, "", "SR_gf2_2"], [15, 1, 1, "", "SR_gf2n"], [15, 3, 1, "", "test_consistency"]], "sage.crypto.mq.sr.SR_generic": [[15, 2, 1, "", "add_round_key"], [15, 2, 1, "", "base_ring"], [15, 2, 1, "", "block_order"], [15, 2, 1, "", "hex_str"], [15, 2, 1, "", "hex_str_matrix"], [15, 2, 1, "", "hex_str_vector"], [15, 2, 1, "", "is_state_array"], [15, 2, 1, "", "key_schedule"], [15, 2, 1, "", "key_schedule_polynomials"], [15, 2, 1, "", "mix_columns"], [15, 2, 1, "", "new_generator"], [15, 2, 1, "", "polynomial_system"], [15, 2, 1, "", "random_element"], [15, 2, 1, "", "random_state_array"], [15, 2, 1, "", "random_vector"], [15, 2, 1, "", "ring"], [15, 2, 1, "", "round_polynomials"], [15, 2, 1, "", "sbox"], [15, 2, 1, "", "sbox_constant"], [15, 2, 1, "", "shift_rows"], [15, 2, 1, "", "state_array"], [15, 2, 1, "", "sub_byte"], [15, 2, 1, "", "sub_bytes"], [15, 2, 1, "", "varformatstr"], [15, 2, 1, "", "variable_dict"], [15, 2, 1, "", "vars"], [15, 2, 1, "", "varstr"], [15, 2, 1, "", "varstrs"]], "sage.crypto.mq.sr.SR_gf2": [[15, 2, 1, "", "antiphi"], [15, 2, 1, "", "field_polynomials"], [15, 2, 1, "", "inversion_polynomials"], [15, 2, 1, "", "inversion_polynomials_single_sbox"], [15, 2, 1, "", "is_vector"], [15, 2, 1, "", "lin_matrix"], [15, 2, 1, "", "mix_columns_matrix"], [15, 2, 1, "", "phi"], [15, 2, 1, "", "shift_rows_matrix"], [15, 2, 1, "", "vector"]], "sage.crypto.mq.sr.SR_gf2_2": [[15, 2, 1, "", "inversion_polynomials_single_sbox"]], "sage.crypto.mq.sr.SR_gf2n": [[15, 2, 1, "", "antiphi"], [15, 2, 1, "", "field_polynomials"], [15, 2, 1, "", "inversion_polynomials"], [15, 2, 1, "", "is_vector"], [15, 2, 1, "", "lin_matrix"], [15, 2, 1, "", "mix_columns_matrix"], [15, 2, 1, "", "phi"], [15, 2, 1, "", "shift_rows_matrix"], [15, 2, 1, "", "vector"]], "sage.crypto.public_key": [[16, 0, 0, "-", "blum_goldwasser"]], "sage.crypto.public_key.blum_goldwasser": [[16, 1, 1, "", "BlumGoldwasser"]], "sage.crypto.public_key.blum_goldwasser.BlumGoldwasser": [[16, 2, 1, "", "decrypt"], [16, 2, 1, "", "encrypt"], [16, 2, 1, "", "private_key"], [16, 2, 1, "", "public_key"], [16, 2, 1, "", "random_key"]], "sage.crypto.sbox": [[17, 1, 1, "", "SBox"], [17, 3, 1, "", "feistel_construction"], [17, 3, 1, "", "misty_construction"]], "sage.crypto.sbox.SBox": [[17, 2, 1, "", "autocorrelation_table"], [17, 2, 1, "", "boomerang_connectivity_table"], [17, 2, 1, "", "boomerang_uniformity"], [17, 2, 1, "", "cnf"], [17, 2, 1, "", "component_function"], [17, 2, 1, "", "derivative"], [17, 2, 1, "", "difference_distribution_table"], [17, 2, 1, "", "differential_branch_number"], [17, 2, 1, "", "differential_uniformity"], [17, 2, 1, "", "fixed_points"], [17, 2, 1, "", "from_bits"], [17, 2, 1, "", "has_linear_structure"], [17, 2, 1, "", "input_size"], [17, 2, 1, "", "interpolation_polynomial"], [17, 2, 1, "", "inverse"], [17, 2, 1, "", "is_almost_bent"], [17, 2, 1, "", "is_apn"], [17, 2, 1, "", "is_balanced"], [17, 2, 1, "", "is_bent"], [17, 2, 1, "", "is_involution"], [17, 2, 1, "", "is_linear_structure"], [17, 2, 1, "", "is_monomial_function"], [17, 2, 1, "", "is_permutation"], [17, 2, 1, "", "is_plateaued"], [17, 2, 1, "", "linear_approximation_table"], [17, 2, 1, "", "linear_branch_number"], [17, 2, 1, "", "linear_structures"], [17, 2, 1, "", "linearity"], [17, 2, 1, "", "max_degree"], [17, 2, 1, "", "maximal_difference_probability"], [17, 2, 1, "", "maximal_difference_probability_absolute"], [17, 2, 1, "", "maximal_linear_bias_absolute"], [17, 2, 1, "", "maximal_linear_bias_relative"], [17, 2, 1, "", "min_degree"], [17, 2, 1, "", "nonlinearity"], [17, 2, 1, "", "output_size"], [17, 2, 1, "", "polynomials"], [17, 2, 1, "", "ring"], [17, 2, 1, "", "solutions"], [17, 2, 1, "", "to_bits"]], "sage.crypto.sboxes": [[18, 3, 1, "", "bracken_leander"], [18, 3, 1, "", "carlet_tang_tang_liao"], [18, 3, 1, "", "gold"], [18, 3, 1, "", "kasami"], [18, 3, 1, "", "monomial_function"], [18, 3, 1, "", "niho"], [18, 3, 1, "", "v"], [18, 3, 1, "", "welch"]], "sage.crypto.stream": [[19, 1, 1, "", "LFSRCryptosystem"], [19, 1, 1, "", "ShrinkingGeneratorCryptosystem"], [19, 3, 1, "", "blum_blum_shub"]], "sage.crypto.stream.LFSRCryptosystem": [[19, 2, 1, "", "encoding"]], "sage.crypto.stream.ShrinkingGeneratorCryptosystem": [[19, 2, 1, "", "encoding"]], "sage.crypto.stream_cipher": [[20, 1, 1, "", "LFSRCipher"], [20, 1, 1, "", "ShrinkingGeneratorCipher"]], "sage.crypto.stream_cipher.LFSRCipher": [[20, 2, 1, "", "connection_polynomial"], [20, 2, 1, "", "initial_state"]], "sage.crypto.stream_cipher.ShrinkingGeneratorCipher": [[20, 2, 1, "", "decimating_cipher"], [20, 2, 1, "", "keystream_cipher"]], "sage.crypto.util": [[21, 3, 1, "", "ascii_integer"], [21, 3, 1, "", "ascii_to_bin"], [21, 3, 1, "", "bin_to_ascii"], [21, 3, 1, "", "has_blum_prime"], [21, 3, 1, "", "is_blum_prime"], [21, 3, 1, "", "least_significant_bits"], [21, 3, 1, "", "random_blum_prime"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"]}, "titleterms": {"cryptographi": [0, 21], "indic": 0, "tabl": 0, "de": [1, 4], "mini": 2, "ae": [2, 15], "present": 3, "simplifi": 4, "boolean": 5, "function": [5, 21], "cipher": [6, 8, 20], "classic": [7, 8], "cryptosystem": [7, 9, 19], "hard": 10, "lattic": 10, "gener": [10, 12, 13, 15], "linear": 11, "feedback": 11, "shift": 11, "regist": 11, "lfsr": 11, "sequenc": 11, "command": 11, "ring": 12, "lwe": 12, "oracl": 12, "abstract": 13, "base": 13, "class": 13, "polynomi": [13, 15], "system": [13, 15], "rijndael": 14, "gf": 14, "small": 15, "scale": 15, "variant": 15, "sr": 15, "blum": 16, "goldwass": 16, "probabilist": 16, "encrypt": 16, "": [17, 18], "box": [17, 18], "Their": 17, "algebra": 17, "represent": 17, "us": 18, "cryptograph": 18, "scheme": 18, "stream": [19, 20], "util": 21}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.todo": 2, "sphinx": 57}, "alltitles": {"Cryptography": [[0, "cryptography"]], "Indices and Tables": [[0, "indices-and-tables"]], "DES": [[1, "des"]], "Mini-AES": [[2, "mini-aes"]], "PRESENT": [[3, "present"]], "Simplified DES": [[4, "simplified-des"]], "Boolean functions": [[5, "boolean-functions"]], "Ciphers": [[6, "ciphers"]], "Classical Cryptosystems": [[7, "classical-cryptosystems"]], "Classical Ciphers": [[8, "classical-ciphers"]], "Cryptosystems": [[9, "cryptosystems"]], "Hard Lattice Generator": [[10, "hard-lattice-generator"]], "Linear feedback shift register (LFSR) sequence commands": [[11, "linear-feedback-shift-register-lfsr-sequence-commands"]], "(Ring-)LWE oracle generators": [[12, "ring-lwe-oracle-generators"]], "Abstract base class for generators of polynomial systems": [[13, "abstract-base-class-for-generators-of-polynomial-systems"]], "Rijndael-GF": [[14, "rijndael-gf"]], "Small Scale Variants of the AES (SR) Polynomial System Generator": [[15, "small-scale-variants-of-the-aes-sr-polynomial-system-generator"]], "Blum-Goldwasser Probabilistic Encryption": [[16, "blum-goldwasser-probabilistic-encryption"]], "S-Boxes and Their Algebraic Representations": [[17, "s-boxes-and-their-algebraic-representations"]], "S-Boxes used in cryptographic schemes": [[18, "s-boxes-used-in-cryptographic-schemes"]], "Stream Cryptosystems": [[19, "stream-cryptosystems"]], "Stream Ciphers": [[20, "stream-ciphers"]], "Utility Functions for Cryptography": [[21, "utility-functions-for-cryptography"]]}, "indexentries": {"des (class in sage.crypto.block_cipher.des)": [[1, "sage.crypto.block_cipher.des.DES"]], "des_ks (class in sage.crypto.block_cipher.des)": [[1, "sage.crypto.block_cipher.des.DES_KS"]], "__call__() (sage.crypto.block_cipher.des.des method)": [[1, "sage.crypto.block_cipher.des.DES.__call__"]], "__call__() (sage.crypto.block_cipher.des.des_ks method)": [[1, "sage.crypto.block_cipher.des.DES_KS.__call__"]], "__init__() (sage.crypto.block_cipher.des.des method)": [[1, "sage.crypto.block_cipher.des.DES.__init__"]], "__init__() (sage.crypto.block_cipher.des.des_ks method)": [[1, "sage.crypto.block_cipher.des.DES_KS.__init__"]], "convert_to_vector() (in module sage.crypto.block_cipher.des)": [[1, "sage.crypto.block_cipher.des.convert_to_vector"]], "decrypt() (sage.crypto.block_cipher.des.des method)": [[1, "sage.crypto.block_cipher.des.DES.decrypt"]], "encrypt() (sage.crypto.block_cipher.des.des method)": [[1, "sage.crypto.block_cipher.des.DES.encrypt"]], "module": [[1, "module-sage.crypto.block_cipher.des"], [2, "module-sage.crypto.block_cipher.miniaes"], [3, "module-sage.crypto.block_cipher.present"], [4, "module-sage.crypto.block_cipher.sdes"], [5, "module-sage.crypto.boolean_function"], [6, "module-sage.crypto.cipher"], [7, "module-sage.crypto.classical"], [8, "module-sage.crypto.classical_cipher"], [9, "module-sage.crypto.cryptosystem"], [10, "module-sage.crypto.lattice"], [11, "module-sage.crypto.lfsr"], [12, "module-sage.crypto.lwe"], [13, "module-sage.crypto.mq.mpolynomialsystemgenerator"], [14, "module-sage.crypto.mq.rijndael_gf"], [15, "module-sage.crypto.mq.sr"], [16, "module-sage.crypto.public_key.blum_goldwasser"], [17, "module-sage.crypto.sbox"], [18, "module-sage.crypto.sboxes"], [19, "module-sage.crypto.stream"], [20, "module-sage.crypto.stream_cipher"], [21, "module-sage.crypto.util"]], "round() (sage.crypto.block_cipher.des.des method)": [[1, "sage.crypto.block_cipher.des.DES.round"]], "sage.crypto.block_cipher.des": [[1, "module-sage.crypto.block_cipher.des"]], "sbox_layer() (sage.crypto.block_cipher.des.des method)": [[1, "sage.crypto.block_cipher.des.DES.sbox_layer"]], "gf_to_binary() (sage.crypto.block_cipher.miniaes.miniaes method)": [[2, "sage.crypto.block_cipher.miniaes.MiniAES.GF_to_binary"]], "gf_to_integer() (sage.crypto.block_cipher.miniaes.miniaes method)": [[2, "sage.crypto.block_cipher.miniaes.MiniAES.GF_to_integer"]], "miniaes (class in sage.crypto.block_cipher.miniaes)": [[2, "sage.crypto.block_cipher.miniaes.MiniAES"]], "add_key() (sage.crypto.block_cipher.miniaes.miniaes method)": [[2, "sage.crypto.block_cipher.miniaes.MiniAES.add_key"]], "binary_to_gf() (sage.crypto.block_cipher.miniaes.miniaes method)": [[2, "sage.crypto.block_cipher.miniaes.MiniAES.binary_to_GF"]], "binary_to_integer() (sage.crypto.block_cipher.miniaes.miniaes method)": [[2, "sage.crypto.block_cipher.miniaes.MiniAES.binary_to_integer"]], "block_length() (sage.crypto.block_cipher.miniaes.miniaes method)": [[2, "sage.crypto.block_cipher.miniaes.MiniAES.block_length"]], "decrypt() (sage.crypto.block_cipher.miniaes.miniaes method)": [[2, "sage.crypto.block_cipher.miniaes.MiniAES.decrypt"]], "encrypt() (sage.crypto.block_cipher.miniaes.miniaes method)": [[2, "sage.crypto.block_cipher.miniaes.MiniAES.encrypt"]], "integer_to_gf() (sage.crypto.block_cipher.miniaes.miniaes method)": [[2, "sage.crypto.block_cipher.miniaes.MiniAES.integer_to_GF"]], "integer_to_binary() (sage.crypto.block_cipher.miniaes.miniaes method)": [[2, "sage.crypto.block_cipher.miniaes.MiniAES.integer_to_binary"]], "mix_column() (sage.crypto.block_cipher.miniaes.miniaes method)": [[2, "sage.crypto.block_cipher.miniaes.MiniAES.mix_column"]], "nibble_sub() (sage.crypto.block_cipher.miniaes.miniaes method)": [[2, "sage.crypto.block_cipher.miniaes.MiniAES.nibble_sub"]], "random_key() (sage.crypto.block_cipher.miniaes.miniaes method)": [[2, "sage.crypto.block_cipher.miniaes.MiniAES.random_key"]], "round_key() (sage.crypto.block_cipher.miniaes.miniaes method)": [[2, "sage.crypto.block_cipher.miniaes.MiniAES.round_key"]], "sage.crypto.block_cipher.miniaes": [[2, "module-sage.crypto.block_cipher.miniaes"]], "sbox() (sage.crypto.block_cipher.miniaes.miniaes method)": [[2, "sage.crypto.block_cipher.miniaes.MiniAES.sbox"]], "shift_row() (sage.crypto.block_cipher.miniaes.miniaes method)": [[2, "sage.crypto.block_cipher.miniaes.MiniAES.shift_row"]], "present (class in sage.crypto.block_cipher.present)": [[3, "sage.crypto.block_cipher.present.PRESENT"]], "present_ks (class in sage.crypto.block_cipher.present)": [[3, "sage.crypto.block_cipher.present.PRESENT_KS"]], "__call__() (sage.crypto.block_cipher.present.present method)": [[3, "sage.crypto.block_cipher.present.PRESENT.__call__"]], "__call__() (sage.crypto.block_cipher.present.present_ks method)": [[3, "sage.crypto.block_cipher.present.PRESENT_KS.__call__"]], "__init__() (sage.crypto.block_cipher.present.present method)": [[3, "sage.crypto.block_cipher.present.PRESENT.__init__"]], "__init__() (sage.crypto.block_cipher.present.present_ks method)": [[3, "sage.crypto.block_cipher.present.PRESENT_KS.__init__"]], "convert_to_vector() (in module sage.crypto.block_cipher.present)": [[3, "sage.crypto.block_cipher.present.convert_to_vector"]], "decrypt() (sage.crypto.block_cipher.present.present method)": [[3, "sage.crypto.block_cipher.present.PRESENT.decrypt"]], "encrypt() (sage.crypto.block_cipher.present.present method)": [[3, "sage.crypto.block_cipher.present.PRESENT.encrypt"]], "linear_layer() (sage.crypto.block_cipher.present.present method)": [[3, "sage.crypto.block_cipher.present.PRESENT.linear_layer"]], "round() (sage.crypto.block_cipher.present.present method)": [[3, "sage.crypto.block_cipher.present.PRESENT.round"]], "sage.crypto.block_cipher.present": [[3, "module-sage.crypto.block_cipher.present"]], "sbox_layer() (sage.crypto.block_cipher.present.present method)": [[3, "sage.crypto.block_cipher.present.PRESENT.sbox_layer"]], "simplifieddes (class in sage.crypto.block_cipher.sdes)": [[4, "sage.crypto.block_cipher.sdes.SimplifiedDES"]], "block_length() (sage.crypto.block_cipher.sdes.simplifieddes method)": [[4, "sage.crypto.block_cipher.sdes.SimplifiedDES.block_length"]], "decrypt() (sage.crypto.block_cipher.sdes.simplifieddes method)": [[4, "sage.crypto.block_cipher.sdes.SimplifiedDES.decrypt"]], "encrypt() (sage.crypto.block_cipher.sdes.simplifieddes method)": [[4, "sage.crypto.block_cipher.sdes.SimplifiedDES.encrypt"]], "initial_permutation() (sage.crypto.block_cipher.sdes.simplifieddes method)": [[4, "sage.crypto.block_cipher.sdes.SimplifiedDES.initial_permutation"]], "left_shift() (sage.crypto.block_cipher.sdes.simplifieddes method)": [[4, "sage.crypto.block_cipher.sdes.SimplifiedDES.left_shift"]], "list_to_string() (sage.crypto.block_cipher.sdes.simplifieddes method)": [[4, "sage.crypto.block_cipher.sdes.SimplifiedDES.list_to_string"]], "permutation10() (sage.crypto.block_cipher.sdes.simplifieddes method)": [[4, "sage.crypto.block_cipher.sdes.SimplifiedDES.permutation10"]], "permutation4() (sage.crypto.block_cipher.sdes.simplifieddes method)": [[4, "sage.crypto.block_cipher.sdes.SimplifiedDES.permutation4"]], "permutation8() (sage.crypto.block_cipher.sdes.simplifieddes method)": [[4, "sage.crypto.block_cipher.sdes.SimplifiedDES.permutation8"]], "permute_substitute() (sage.crypto.block_cipher.sdes.simplifieddes method)": [[4, "sage.crypto.block_cipher.sdes.SimplifiedDES.permute_substitute"]], "random_key() (sage.crypto.block_cipher.sdes.simplifieddes method)": [[4, "sage.crypto.block_cipher.sdes.SimplifiedDES.random_key"]], "sage.crypto.block_cipher.sdes": [[4, "module-sage.crypto.block_cipher.sdes"]], "sbox() (sage.crypto.block_cipher.sdes.simplifieddes method)": [[4, "sage.crypto.block_cipher.sdes.SimplifiedDES.sbox"]], "string_to_list() (sage.crypto.block_cipher.sdes.simplifieddes method)": [[4, "sage.crypto.block_cipher.sdes.SimplifiedDES.string_to_list"]], "subkey() (sage.crypto.block_cipher.sdes.simplifieddes method)": [[4, "sage.crypto.block_cipher.sdes.SimplifiedDES.subkey"]], "switch() (sage.crypto.block_cipher.sdes.simplifieddes method)": [[4, "sage.crypto.block_cipher.sdes.SimplifiedDES.switch"]], "booleanfunction (class in sage.crypto.boolean_function)": [[5, "sage.crypto.boolean_function.BooleanFunction"]], "booleanfunctioniterator (class in sage.crypto.boolean_function)": [[5, "sage.crypto.boolean_function.BooleanFunctionIterator"]], "absolut_indicator() (sage.crypto.boolean_function.booleanfunction method)": [[5, "sage.crypto.boolean_function.BooleanFunction.absolut_indicator"]], "absolute_autocorrelation() (sage.crypto.boolean_function.booleanfunction method)": [[5, "sage.crypto.boolean_function.BooleanFunction.absolute_autocorrelation"]], "absolute_indicator() (sage.crypto.boolean_function.booleanfunction method)": [[5, "sage.crypto.boolean_function.BooleanFunction.absolute_indicator"]], "absolute_walsh_spectrum() (sage.crypto.boolean_function.booleanfunction method)": [[5, "sage.crypto.boolean_function.BooleanFunction.absolute_walsh_spectrum"]], "algebraic_degree() (sage.crypto.boolean_function.booleanfunction method)": [[5, "sage.crypto.boolean_function.BooleanFunction.algebraic_degree"]], "algebraic_immunity() (sage.crypto.boolean_function.booleanfunction method)": [[5, "sage.crypto.boolean_function.BooleanFunction.algebraic_immunity"]], "algebraic_normal_form() (sage.crypto.boolean_function.booleanfunction method)": [[5, "sage.crypto.boolean_function.BooleanFunction.algebraic_normal_form"]], "annihilator() (sage.crypto.boolean_function.booleanfunction method)": [[5, "sage.crypto.boolean_function.BooleanFunction.annihilator"]], "autocorrelation() (sage.crypto.boolean_function.booleanfunction method)": [[5, "sage.crypto.boolean_function.BooleanFunction.autocorrelation"]], "correlation_immunity() (sage.crypto.boolean_function.booleanfunction method)": [[5, "sage.crypto.boolean_function.BooleanFunction.correlation_immunity"]], "derivative() (sage.crypto.boolean_function.booleanfunction method)": [[5, "sage.crypto.boolean_function.BooleanFunction.derivative"]], "has_linear_structure() (sage.crypto.boolean_function.booleanfunction method)": [[5, "sage.crypto.boolean_function.BooleanFunction.has_linear_structure"]], "is_balanced() (sage.crypto.boolean_function.booleanfunction method)": [[5, "sage.crypto.boolean_function.BooleanFunction.is_balanced"]], "is_bent() (sage.crypto.boolean_function.booleanfunction method)": [[5, "sage.crypto.boolean_function.BooleanFunction.is_bent"]], "is_linear_structure() (sage.crypto.boolean_function.booleanfunction method)": [[5, "sage.crypto.boolean_function.BooleanFunction.is_linear_structure"]], "is_plateaued() (sage.crypto.boolean_function.booleanfunction method)": [[5, "sage.crypto.boolean_function.BooleanFunction.is_plateaued"]], "is_symmetric() (sage.crypto.boolean_function.booleanfunction method)": [[5, "sage.crypto.boolean_function.BooleanFunction.is_symmetric"]], "linear_structures() (sage.crypto.boolean_function.booleanfunction method)": [[5, "sage.crypto.boolean_function.BooleanFunction.linear_structures"]], "nonlinearity() (sage.crypto.boolean_function.booleanfunction method)": [[5, "sage.crypto.boolean_function.BooleanFunction.nonlinearity"]], "nvariables() (sage.crypto.boolean_function.booleanfunction method)": [[5, "sage.crypto.boolean_function.BooleanFunction.nvariables"]], "random_boolean_function() (in module sage.crypto.boolean_function)": [[5, "sage.crypto.boolean_function.random_boolean_function"]], "resiliency_order() (sage.crypto.boolean_function.booleanfunction method)": [[5, "sage.crypto.boolean_function.BooleanFunction.resiliency_order"]], "sage.crypto.boolean_function": [[5, "module-sage.crypto.boolean_function"]], "sum_of_square_indicator() (sage.crypto.boolean_function.booleanfunction method)": [[5, "sage.crypto.boolean_function.BooleanFunction.sum_of_square_indicator"]], "truth_table() (sage.crypto.boolean_function.booleanfunction method)": [[5, "sage.crypto.boolean_function.BooleanFunction.truth_table"]], "unpickle_booleanfunction() (in module sage.crypto.boolean_function)": [[5, "sage.crypto.boolean_function.unpickle_BooleanFunction"]], "walsh_hadamard_transform() (sage.crypto.boolean_function.booleanfunction method)": [[5, "sage.crypto.boolean_function.BooleanFunction.walsh_hadamard_transform"]], "cipher (class in sage.crypto.cipher)": [[6, "sage.crypto.cipher.Cipher"]], "publickeycipher (class in sage.crypto.cipher)": [[6, "sage.crypto.cipher.PublicKeyCipher"]], "symmetrickeycipher (class in sage.crypto.cipher)": [[6, "sage.crypto.cipher.SymmetricKeyCipher"]], "codomain() (sage.crypto.cipher.cipher method)": [[6, "sage.crypto.cipher.Cipher.codomain"]], "domain() (sage.crypto.cipher.cipher method)": [[6, "sage.crypto.cipher.Cipher.domain"]], "key() (sage.crypto.cipher.cipher method)": [[6, "sage.crypto.cipher.Cipher.key"]], "sage.crypto.cipher": [[6, "module-sage.crypto.cipher"]], "affinecryptosystem (class in sage.crypto.classical)": [[7, "sage.crypto.classical.AffineCryptosystem"]], "hillcryptosystem (class in sage.crypto.classical)": [[7, "sage.crypto.classical.HillCryptosystem"]], "shiftcryptosystem (class in sage.crypto.classical)": [[7, "sage.crypto.classical.ShiftCryptosystem"]], "substitutioncryptosystem (class in sage.crypto.classical)": [[7, "sage.crypto.classical.SubstitutionCryptosystem"]], "transpositioncryptosystem (class in sage.crypto.classical)": [[7, "sage.crypto.classical.TranspositionCryptosystem"]], "vigenerecryptosystem (class in sage.crypto.classical)": [[7, "sage.crypto.classical.VigenereCryptosystem"]], "block_length() (sage.crypto.classical.hillcryptosystem method)": [[7, "sage.crypto.classical.HillCryptosystem.block_length"]], "brute_force() (sage.crypto.classical.affinecryptosystem method)": [[7, "sage.crypto.classical.AffineCryptosystem.brute_force"]], "brute_force() (sage.crypto.classical.shiftcryptosystem method)": [[7, "sage.crypto.classical.ShiftCryptosystem.brute_force"]], "deciphering() (sage.crypto.classical.affinecryptosystem method)": [[7, "sage.crypto.classical.AffineCryptosystem.deciphering"]], "deciphering() (sage.crypto.classical.hillcryptosystem method)": [[7, "sage.crypto.classical.HillCryptosystem.deciphering"]], "deciphering() (sage.crypto.classical.shiftcryptosystem method)": [[7, "sage.crypto.classical.ShiftCryptosystem.deciphering"]], "deciphering() (sage.crypto.classical.substitutioncryptosystem method)": [[7, "sage.crypto.classical.SubstitutionCryptosystem.deciphering"]], "deciphering() (sage.crypto.classical.transpositioncryptosystem method)": [[7, "sage.crypto.classical.TranspositionCryptosystem.deciphering"]], "deciphering() (sage.crypto.classical.vigenerecryptosystem method)": [[7, "sage.crypto.classical.VigenereCryptosystem.deciphering"]], "enciphering() (sage.crypto.classical.affinecryptosystem method)": [[7, "sage.crypto.classical.AffineCryptosystem.enciphering"]], "enciphering() (sage.crypto.classical.hillcryptosystem method)": [[7, "sage.crypto.classical.HillCryptosystem.enciphering"]], "enciphering() (sage.crypto.classical.shiftcryptosystem method)": [[7, "sage.crypto.classical.ShiftCryptosystem.enciphering"]], "enciphering() (sage.crypto.classical.substitutioncryptosystem method)": [[7, "sage.crypto.classical.SubstitutionCryptosystem.enciphering"]], "enciphering() (sage.crypto.classical.transpositioncryptosystem method)": [[7, "sage.crypto.classical.TranspositionCryptosystem.enciphering"]], "enciphering() (sage.crypto.classical.vigenerecryptosystem method)": [[7, "sage.crypto.classical.VigenereCryptosystem.enciphering"]], "encoding() (sage.crypto.classical.affinecryptosystem method)": [[7, "sage.crypto.classical.AffineCryptosystem.encoding"]], "encoding() (sage.crypto.classical.hillcryptosystem method)": [[7, "sage.crypto.classical.HillCryptosystem.encoding"]], "encoding() (sage.crypto.classical.shiftcryptosystem method)": [[7, "sage.crypto.classical.ShiftCryptosystem.encoding"]], "encoding() (sage.crypto.classical.substitutioncryptosystem method)": [[7, "sage.crypto.classical.SubstitutionCryptosystem.encoding"]], "encoding() (sage.crypto.classical.transpositioncryptosystem method)": [[7, "sage.crypto.classical.TranspositionCryptosystem.encoding"]], "encoding() (sage.crypto.classical.vigenerecryptosystem method)": [[7, "sage.crypto.classical.VigenereCryptosystem.encoding"]], "inverse_key() (sage.crypto.classical.affinecryptosystem method)": [[7, "sage.crypto.classical.AffineCryptosystem.inverse_key"]], "inverse_key() (sage.crypto.classical.hillcryptosystem method)": [[7, "sage.crypto.classical.HillCryptosystem.inverse_key"]], "inverse_key() (sage.crypto.classical.shiftcryptosystem method)": [[7, "sage.crypto.classical.ShiftCryptosystem.inverse_key"]], "inverse_key() (sage.crypto.classical.substitutioncryptosystem method)": [[7, "sage.crypto.classical.SubstitutionCryptosystem.inverse_key"]], "inverse_key() (sage.crypto.classical.transpositioncryptosystem method)": [[7, "sage.crypto.classical.TranspositionCryptosystem.inverse_key"]], "inverse_key() (sage.crypto.classical.vigenerecryptosystem method)": [[7, "sage.crypto.classical.VigenereCryptosystem.inverse_key"]], "random_key() (sage.crypto.classical.affinecryptosystem method)": [[7, "sage.crypto.classical.AffineCryptosystem.random_key"]], "random_key() (sage.crypto.classical.hillcryptosystem method)": [[7, "sage.crypto.classical.HillCryptosystem.random_key"]], "random_key() (sage.crypto.classical.shiftcryptosystem method)": [[7, "sage.crypto.classical.ShiftCryptosystem.random_key"]], "random_key() (sage.crypto.classical.substitutioncryptosystem method)": [[7, "sage.crypto.classical.SubstitutionCryptosystem.random_key"]], "random_key() (sage.crypto.classical.transpositioncryptosystem method)": [[7, "sage.crypto.classical.TranspositionCryptosystem.random_key"]], "random_key() (sage.crypto.classical.vigenerecryptosystem method)": [[7, "sage.crypto.classical.VigenereCryptosystem.random_key"]], "rank_by_chi_square() (sage.crypto.classical.affinecryptosystem method)": [[7, "sage.crypto.classical.AffineCryptosystem.rank_by_chi_square"]], "rank_by_chi_square() (sage.crypto.classical.shiftcryptosystem method)": [[7, "sage.crypto.classical.ShiftCryptosystem.rank_by_chi_square"]], "rank_by_squared_differences() (sage.crypto.classical.affinecryptosystem method)": [[7, "sage.crypto.classical.AffineCryptosystem.rank_by_squared_differences"]], "rank_by_squared_differences() (sage.crypto.classical.shiftcryptosystem method)": [[7, "sage.crypto.classical.ShiftCryptosystem.rank_by_squared_differences"]], "sage.crypto.classical": [[7, "module-sage.crypto.classical"]], "affinecipher (class in sage.crypto.classical_cipher)": [[8, "sage.crypto.classical_cipher.AffineCipher"]], "hillcipher (class in sage.crypto.classical_cipher)": [[8, "sage.crypto.classical_cipher.HillCipher"]], "shiftcipher (class in sage.crypto.classical_cipher)": [[8, "sage.crypto.classical_cipher.ShiftCipher"]], "substitutioncipher (class in sage.crypto.classical_cipher)": [[8, "sage.crypto.classical_cipher.SubstitutionCipher"]], "transpositioncipher (class in sage.crypto.classical_cipher)": [[8, "sage.crypto.classical_cipher.TranspositionCipher"]], "vigenerecipher (class in sage.crypto.classical_cipher)": [[8, "sage.crypto.classical_cipher.VigenereCipher"]], "inverse() (sage.crypto.classical_cipher.hillcipher method)": [[8, "sage.crypto.classical_cipher.HillCipher.inverse"]], "inverse() (sage.crypto.classical_cipher.substitutioncipher method)": [[8, "sage.crypto.classical_cipher.SubstitutionCipher.inverse"]], "inverse() (sage.crypto.classical_cipher.transpositioncipher method)": [[8, "sage.crypto.classical_cipher.TranspositionCipher.inverse"]], "inverse() (sage.crypto.classical_cipher.vigenerecipher method)": [[8, "sage.crypto.classical_cipher.VigenereCipher.inverse"]], "sage.crypto.classical_cipher": [[8, "module-sage.crypto.classical_cipher"]], "cryptosystem (class in sage.crypto.cryptosystem)": [[9, "sage.crypto.cryptosystem.Cryptosystem"]], "publickeycryptosystem (class in sage.crypto.cryptosystem)": [[9, "sage.crypto.cryptosystem.PublicKeyCryptosystem"]], "symmetrickeycryptosystem (class in sage.crypto.cryptosystem)": [[9, "sage.crypto.cryptosystem.SymmetricKeyCryptosystem"]], "alphabet_size() (sage.crypto.cryptosystem.symmetrickeycryptosystem method)": [[9, "sage.crypto.cryptosystem.SymmetricKeyCryptosystem.alphabet_size"]], "block_length() (sage.crypto.cryptosystem.cryptosystem method)": [[9, "sage.crypto.cryptosystem.Cryptosystem.block_length"]], "cipher_codomain() (sage.crypto.cryptosystem.cryptosystem method)": [[9, "sage.crypto.cryptosystem.Cryptosystem.cipher_codomain"]], "cipher_domain() (sage.crypto.cryptosystem.cryptosystem method)": [[9, "sage.crypto.cryptosystem.Cryptosystem.cipher_domain"]], "ciphertext_space() (sage.crypto.cryptosystem.cryptosystem method)": [[9, "sage.crypto.cryptosystem.Cryptosystem.ciphertext_space"]], "key_space() (sage.crypto.cryptosystem.cryptosystem method)": [[9, "sage.crypto.cryptosystem.Cryptosystem.key_space"]], "period() (sage.crypto.cryptosystem.cryptosystem method)": [[9, "sage.crypto.cryptosystem.Cryptosystem.period"]], "plaintext_space() (sage.crypto.cryptosystem.cryptosystem method)": [[9, "sage.crypto.cryptosystem.Cryptosystem.plaintext_space"]], "sage.crypto.cryptosystem": [[9, "module-sage.crypto.cryptosystem"]], "gen_lattice() (in module sage.crypto.lattice)": [[10, "sage.crypto.lattice.gen_lattice"]], "sage.crypto.lattice": [[10, "module-sage.crypto.lattice"]], "lfsr_autocorrelation() (in module sage.crypto.lfsr)": [[11, "sage.crypto.lfsr.lfsr_autocorrelation"]], "lfsr_connection_polynomial() (in module sage.crypto.lfsr)": [[11, "sage.crypto.lfsr.lfsr_connection_polynomial"]], "lfsr_sequence() (in module sage.crypto.lfsr)": [[11, "sage.crypto.lfsr.lfsr_sequence"]], "sage.crypto.lfsr": [[11, "module-sage.crypto.lfsr"]], "lwe (class in sage.crypto.lwe)": [[12, "sage.crypto.lwe.LWE"]], "lindnerpeikert (class in sage.crypto.lwe)": [[12, "sage.crypto.lwe.LindnerPeikert"]], "regev (class in sage.crypto.lwe)": [[12, "sage.crypto.lwe.Regev"]], "ringlwe (class in sage.crypto.lwe)": [[12, "sage.crypto.lwe.RingLWE"]], "ringlweconverter (class in sage.crypto.lwe)": [[12, "sage.crypto.lwe.RingLWEConverter"]], "ringlindnerpeikert (class in sage.crypto.lwe)": [[12, "sage.crypto.lwe.RingLindnerPeikert"]], "uniformnoiselwe (class in sage.crypto.lwe)": [[12, "sage.crypto.lwe.UniformNoiseLWE"]], "uniformpolynomialsampler (class in sage.crypto.lwe)": [[12, "sage.crypto.lwe.UniformPolynomialSampler"]], "uniformsampler (class in sage.crypto.lwe)": [[12, "sage.crypto.lwe.UniformSampler"]], "__call__() (sage.crypto.lwe.lwe method)": [[12, "sage.crypto.lwe.LWE.__call__"]], "__call__() (sage.crypto.lwe.ringlwe method)": [[12, "sage.crypto.lwe.RingLWE.__call__"]], "__call__() (sage.crypto.lwe.ringlweconverter method)": [[12, "sage.crypto.lwe.RingLWEConverter.__call__"]], "__call__() (sage.crypto.lwe.uniformpolynomialsampler method)": [[12, "sage.crypto.lwe.UniformPolynomialSampler.__call__"]], "__call__() (sage.crypto.lwe.uniformsampler method)": [[12, "sage.crypto.lwe.UniformSampler.__call__"]], "__init__() (sage.crypto.lwe.lwe method)": [[12, "sage.crypto.lwe.LWE.__init__"]], "__init__() (sage.crypto.lwe.lindnerpeikert method)": [[12, "sage.crypto.lwe.LindnerPeikert.__init__"]], "__init__() (sage.crypto.lwe.regev method)": [[12, "sage.crypto.lwe.Regev.__init__"]], "__init__() (sage.crypto.lwe.ringlwe method)": [[12, "sage.crypto.lwe.RingLWE.__init__"]], "__init__() (sage.crypto.lwe.ringlweconverter method)": [[12, "sage.crypto.lwe.RingLWEConverter.__init__"]], "__init__() (sage.crypto.lwe.ringlindnerpeikert method)": [[12, "sage.crypto.lwe.RingLindnerPeikert.__init__"]], "__init__() (sage.crypto.lwe.uniformnoiselwe method)": [[12, "sage.crypto.lwe.UniformNoiseLWE.__init__"]], "__init__() (sage.crypto.lwe.uniformpolynomialsampler method)": [[12, "sage.crypto.lwe.UniformPolynomialSampler.__init__"]], "__init__() (sage.crypto.lwe.uniformsampler method)": [[12, "sage.crypto.lwe.UniformSampler.__init__"]], "balance_sample() (in module sage.crypto.lwe)": [[12, "sage.crypto.lwe.balance_sample"]], "sage.crypto.lwe": [[12, "module-sage.crypto.lwe"]], "samples() (in module sage.crypto.lwe)": [[12, "sage.crypto.lwe.samples"]], "mpolynomialsystemgenerator (class in sage.crypto.mq.mpolynomialsystemgenerator)": [[13, "sage.crypto.mq.mpolynomialsystemgenerator.MPolynomialSystemGenerator"]], "block_order() (sage.crypto.mq.mpolynomialsystemgenerator.mpolynomialsystemgenerator method)": [[13, "sage.crypto.mq.mpolynomialsystemgenerator.MPolynomialSystemGenerator.block_order"]], "polynomial_system() (sage.crypto.mq.mpolynomialsystemgenerator.mpolynomialsystemgenerator method)": [[13, "sage.crypto.mq.mpolynomialsystemgenerator.MPolynomialSystemGenerator.polynomial_system"]], "random_element() (sage.crypto.mq.mpolynomialsystemgenerator.mpolynomialsystemgenerator method)": [[13, "sage.crypto.mq.mpolynomialsystemgenerator.MPolynomialSystemGenerator.random_element"]], "ring() (sage.crypto.mq.mpolynomialsystemgenerator.mpolynomialsystemgenerator method)": [[13, "sage.crypto.mq.mpolynomialsystemgenerator.MPolynomialSystemGenerator.ring"]], "sage.crypto.mq.mpolynomialsystemgenerator": [[13, "module-sage.crypto.mq.mpolynomialsystemgenerator"]], "sbox() (sage.crypto.mq.mpolynomialsystemgenerator.mpolynomialsystemgenerator method)": [[13, "sage.crypto.mq.mpolynomialsystemgenerator.MPolynomialSystemGenerator.sbox"]], "varformatstr() (sage.crypto.mq.mpolynomialsystemgenerator.mpolynomialsystemgenerator method)": [[13, "sage.crypto.mq.mpolynomialsystemgenerator.MPolynomialSystemGenerator.varformatstr"]], "vars() (sage.crypto.mq.mpolynomialsystemgenerator.mpolynomialsystemgenerator method)": [[13, "sage.crypto.mq.mpolynomialsystemgenerator.MPolynomialSystemGenerator.vars"]], "varstrs() (sage.crypto.mq.mpolynomialsystemgenerator.mpolynomialsystemgenerator method)": [[13, "sage.crypto.mq.mpolynomialsystemgenerator.MPolynomialSystemGenerator.varstrs"]], "rijndaelgf (class in sage.crypto.mq.rijndael_gf)": [[14, "sage.crypto.mq.rijndael_gf.RijndaelGF"]], "rijndaelgf.round_component_poly_constr (class in sage.crypto.mq.rijndael_gf)": [[14, "sage.crypto.mq.rijndael_gf.RijndaelGF.Round_Component_Poly_Constr"]], "add_round_key() (sage.crypto.mq.rijndael_gf.rijndaelgf method)": [[14, "sage.crypto.mq.rijndael_gf.RijndaelGF.add_round_key"]], "add_round_key_poly_constr() (sage.crypto.mq.rijndael_gf.rijndaelgf method)": [[14, "sage.crypto.mq.rijndael_gf.RijndaelGF.add_round_key_poly_constr"]], "apply_poly() (sage.crypto.mq.rijndael_gf.rijndaelgf method)": [[14, "sage.crypto.mq.rijndael_gf.RijndaelGF.apply_poly"]], "block_length() (sage.crypto.mq.rijndael_gf.rijndaelgf method)": [[14, "sage.crypto.mq.rijndael_gf.RijndaelGF.block_length"]], "compose() (sage.crypto.mq.rijndael_gf.rijndaelgf method)": [[14, "sage.crypto.mq.rijndael_gf.RijndaelGF.compose"]], "decrypt() (sage.crypto.mq.rijndael_gf.rijndaelgf method)": [[14, "sage.crypto.mq.rijndael_gf.RijndaelGF.decrypt"]], "encrypt() (sage.crypto.mq.rijndael_gf.rijndaelgf method)": [[14, "sage.crypto.mq.rijndael_gf.RijndaelGF.encrypt"]], "expand_key() (sage.crypto.mq.rijndael_gf.rijndaelgf method)": [[14, "sage.crypto.mq.rijndael_gf.RijndaelGF.expand_key"]], "expand_key_poly() (sage.crypto.mq.rijndael_gf.rijndaelgf method)": [[14, "sage.crypto.mq.rijndael_gf.RijndaelGF.expand_key_poly"]], "key_length() (sage.crypto.mq.rijndael_gf.rijndaelgf method)": [[14, "sage.crypto.mq.rijndael_gf.RijndaelGF.key_length"]], "mix_columns() (sage.crypto.mq.rijndael_gf.rijndaelgf method)": [[14, "sage.crypto.mq.rijndael_gf.RijndaelGF.mix_columns"]], "mix_columns_poly_constr() (sage.crypto.mq.rijndael_gf.rijndaelgf method)": [[14, "sage.crypto.mq.rijndael_gf.RijndaelGF.mix_columns_poly_constr"]], "number_rounds() (sage.crypto.mq.rijndael_gf.rijndaelgf method)": [[14, "sage.crypto.mq.rijndael_gf.RijndaelGF.number_rounds"]], "sage.crypto.mq.rijndael_gf": [[14, "module-sage.crypto.mq.rijndael_gf"]], "shift_rows() (sage.crypto.mq.rijndael_gf.rijndaelgf method)": [[14, "sage.crypto.mq.rijndael_gf.RijndaelGF.shift_rows"]], "shift_rows_poly_constr() (sage.crypto.mq.rijndael_gf.rijndaelgf method)": [[14, "sage.crypto.mq.rijndael_gf.RijndaelGF.shift_rows_poly_constr"]], "sub_bytes() (sage.crypto.mq.rijndael_gf.rijndaelgf method)": [[14, "sage.crypto.mq.rijndael_gf.RijndaelGF.sub_bytes"]], "sub_bytes_poly_constr() (sage.crypto.mq.rijndael_gf.rijndaelgf method)": [[14, "sage.crypto.mq.rijndael_gf.RijndaelGF.sub_bytes_poly_constr"]], "allowzeroinversionscontext (class in sage.crypto.mq.sr)": [[15, "sage.crypto.mq.sr.AllowZeroInversionsContext"]], "sr() (in module sage.crypto.mq.sr)": [[15, "sage.crypto.mq.sr.SR"]], "sr_generic (class in sage.crypto.mq.sr)": [[15, "sage.crypto.mq.sr.SR_generic"]], "sr_gf2 (class in sage.crypto.mq.sr)": [[15, "sage.crypto.mq.sr.SR_gf2"]], "sr_gf2_2 (class in sage.crypto.mq.sr)": [[15, "sage.crypto.mq.sr.SR_gf2_2"]], "sr_gf2n (class in sage.crypto.mq.sr)": [[15, "sage.crypto.mq.sr.SR_gf2n"]], "add_round_key() (sage.crypto.mq.sr.sr_generic method)": [[15, "sage.crypto.mq.sr.SR_generic.add_round_key"]], "antiphi() (sage.crypto.mq.sr.sr_gf2 method)": [[15, "sage.crypto.mq.sr.SR_gf2.antiphi"]], "antiphi() (sage.crypto.mq.sr.sr_gf2n method)": [[15, "sage.crypto.mq.sr.SR_gf2n.antiphi"]], "base_ring() (sage.crypto.mq.sr.sr_generic method)": [[15, "sage.crypto.mq.sr.SR_generic.base_ring"]], "block_order() (sage.crypto.mq.sr.sr_generic method)": [[15, "sage.crypto.mq.sr.SR_generic.block_order"]], "field_polynomials() (sage.crypto.mq.sr.sr_gf2 method)": [[15, "sage.crypto.mq.sr.SR_gf2.field_polynomials"]], "field_polynomials() (sage.crypto.mq.sr.sr_gf2n method)": [[15, "sage.crypto.mq.sr.SR_gf2n.field_polynomials"]], "hex_str() (sage.crypto.mq.sr.sr_generic method)": [[15, "sage.crypto.mq.sr.SR_generic.hex_str"]], "hex_str_matrix() (sage.crypto.mq.sr.sr_generic method)": [[15, "sage.crypto.mq.sr.SR_generic.hex_str_matrix"]], "hex_str_vector() (sage.crypto.mq.sr.sr_generic method)": [[15, "sage.crypto.mq.sr.SR_generic.hex_str_vector"]], "inversion_polynomials() (sage.crypto.mq.sr.sr_gf2 method)": [[15, "sage.crypto.mq.sr.SR_gf2.inversion_polynomials"]], "inversion_polynomials() (sage.crypto.mq.sr.sr_gf2n method)": [[15, "sage.crypto.mq.sr.SR_gf2n.inversion_polynomials"]], "inversion_polynomials_single_sbox() (sage.crypto.mq.sr.sr_gf2 method)": [[15, "sage.crypto.mq.sr.SR_gf2.inversion_polynomials_single_sbox"]], "inversion_polynomials_single_sbox() (sage.crypto.mq.sr.sr_gf2_2 method)": [[15, "sage.crypto.mq.sr.SR_gf2_2.inversion_polynomials_single_sbox"]], "is_state_array() (sage.crypto.mq.sr.sr_generic method)": [[15, "sage.crypto.mq.sr.SR_generic.is_state_array"]], "is_vector() (sage.crypto.mq.sr.sr_gf2 method)": [[15, "sage.crypto.mq.sr.SR_gf2.is_vector"]], "is_vector() (sage.crypto.mq.sr.sr_gf2n method)": [[15, "sage.crypto.mq.sr.SR_gf2n.is_vector"]], "key_schedule() (sage.crypto.mq.sr.sr_generic method)": [[15, "sage.crypto.mq.sr.SR_generic.key_schedule"]], "key_schedule_polynomials() (sage.crypto.mq.sr.sr_generic method)": [[15, "sage.crypto.mq.sr.SR_generic.key_schedule_polynomials"]], "lin_matrix() (sage.crypto.mq.sr.sr_gf2 method)": [[15, "sage.crypto.mq.sr.SR_gf2.lin_matrix"]], "lin_matrix() (sage.crypto.mq.sr.sr_gf2n method)": [[15, "sage.crypto.mq.sr.SR_gf2n.lin_matrix"]], "mix_columns() (sage.crypto.mq.sr.sr_generic method)": [[15, "sage.crypto.mq.sr.SR_generic.mix_columns"]], "mix_columns_matrix() (sage.crypto.mq.sr.sr_gf2 method)": [[15, "sage.crypto.mq.sr.SR_gf2.mix_columns_matrix"]], "mix_columns_matrix() (sage.crypto.mq.sr.sr_gf2n method)": [[15, "sage.crypto.mq.sr.SR_gf2n.mix_columns_matrix"]], "new_generator() (sage.crypto.mq.sr.sr_generic method)": [[15, "sage.crypto.mq.sr.SR_generic.new_generator"]], "phi() (sage.crypto.mq.sr.sr_gf2 method)": [[15, "sage.crypto.mq.sr.SR_gf2.phi"]], "phi() (sage.crypto.mq.sr.sr_gf2n method)": [[15, "sage.crypto.mq.sr.SR_gf2n.phi"]], "polynomial_system() (sage.crypto.mq.sr.sr_generic method)": [[15, "sage.crypto.mq.sr.SR_generic.polynomial_system"]], "random_element() (sage.crypto.mq.sr.sr_generic method)": [[15, "sage.crypto.mq.sr.SR_generic.random_element"]], "random_state_array() (sage.crypto.mq.sr.sr_generic method)": [[15, "sage.crypto.mq.sr.SR_generic.random_state_array"]], "random_vector() (sage.crypto.mq.sr.sr_generic method)": [[15, "sage.crypto.mq.sr.SR_generic.random_vector"]], "ring() (sage.crypto.mq.sr.sr_generic method)": [[15, "sage.crypto.mq.sr.SR_generic.ring"]], "round_polynomials() (sage.crypto.mq.sr.sr_generic method)": [[15, "sage.crypto.mq.sr.SR_generic.round_polynomials"]], "sage.crypto.mq.sr": [[15, "module-sage.crypto.mq.sr"]], "sbox() (sage.crypto.mq.sr.sr_generic method)": [[15, "sage.crypto.mq.sr.SR_generic.sbox"]], "sbox_constant() (sage.crypto.mq.sr.sr_generic method)": [[15, "sage.crypto.mq.sr.SR_generic.sbox_constant"]], "shift_rows() (sage.crypto.mq.sr.sr_generic method)": [[15, "sage.crypto.mq.sr.SR_generic.shift_rows"]], "shift_rows_matrix() (sage.crypto.mq.sr.sr_gf2 method)": [[15, "sage.crypto.mq.sr.SR_gf2.shift_rows_matrix"]], "shift_rows_matrix() (sage.crypto.mq.sr.sr_gf2n method)": [[15, "sage.crypto.mq.sr.SR_gf2n.shift_rows_matrix"]], "state_array() (sage.crypto.mq.sr.sr_generic method)": [[15, "sage.crypto.mq.sr.SR_generic.state_array"]], "sub_byte() (sage.crypto.mq.sr.sr_generic method)": [[15, "sage.crypto.mq.sr.SR_generic.sub_byte"]], "sub_bytes() (sage.crypto.mq.sr.sr_generic method)": [[15, "sage.crypto.mq.sr.SR_generic.sub_bytes"]], "test_consistency() (in module sage.crypto.mq.sr)": [[15, "sage.crypto.mq.sr.test_consistency"]], "varformatstr() (sage.crypto.mq.sr.sr_generic method)": [[15, "sage.crypto.mq.sr.SR_generic.varformatstr"]], "variable_dict() (sage.crypto.mq.sr.sr_generic method)": [[15, "sage.crypto.mq.sr.SR_generic.variable_dict"]], "vars() (sage.crypto.mq.sr.sr_generic method)": [[15, "sage.crypto.mq.sr.SR_generic.vars"]], "varstr() (sage.crypto.mq.sr.sr_generic method)": [[15, "sage.crypto.mq.sr.SR_generic.varstr"]], "varstrs() (sage.crypto.mq.sr.sr_generic method)": [[15, "sage.crypto.mq.sr.SR_generic.varstrs"]], "vector() (sage.crypto.mq.sr.sr_gf2 method)": [[15, "sage.crypto.mq.sr.SR_gf2.vector"]], "vector() (sage.crypto.mq.sr.sr_gf2n method)": [[15, "sage.crypto.mq.sr.SR_gf2n.vector"]], "blumgoldwasser (class in sage.crypto.public_key.blum_goldwasser)": [[16, "sage.crypto.public_key.blum_goldwasser.BlumGoldwasser"]], "decrypt() (sage.crypto.public_key.blum_goldwasser.blumgoldwasser method)": [[16, "sage.crypto.public_key.blum_goldwasser.BlumGoldwasser.decrypt"]], "encrypt() (sage.crypto.public_key.blum_goldwasser.blumgoldwasser method)": [[16, "sage.crypto.public_key.blum_goldwasser.BlumGoldwasser.encrypt"]], "private_key() (sage.crypto.public_key.blum_goldwasser.blumgoldwasser method)": [[16, "sage.crypto.public_key.blum_goldwasser.BlumGoldwasser.private_key"]], "public_key() (sage.crypto.public_key.blum_goldwasser.blumgoldwasser method)": [[16, "sage.crypto.public_key.blum_goldwasser.BlumGoldwasser.public_key"]], "random_key() (sage.crypto.public_key.blum_goldwasser.blumgoldwasser method)": [[16, "sage.crypto.public_key.blum_goldwasser.BlumGoldwasser.random_key"]], "sage.crypto.public_key.blum_goldwasser": [[16, "module-sage.crypto.public_key.blum_goldwasser"]], "sbox (class in sage.crypto.sbox)": [[17, "sage.crypto.sbox.SBox"]], "autocorrelation_table() (sage.crypto.sbox.sbox method)": [[17, "sage.crypto.sbox.SBox.autocorrelation_table"]], "boomerang_connectivity_table() (sage.crypto.sbox.sbox method)": [[17, "sage.crypto.sbox.SBox.boomerang_connectivity_table"]], "boomerang_uniformity() (sage.crypto.sbox.sbox method)": [[17, "sage.crypto.sbox.SBox.boomerang_uniformity"]], "cnf() (sage.crypto.sbox.sbox method)": [[17, "sage.crypto.sbox.SBox.cnf"]], "component_function() (sage.crypto.sbox.sbox method)": [[17, "sage.crypto.sbox.SBox.component_function"]], "derivative() (sage.crypto.sbox.sbox method)": [[17, "sage.crypto.sbox.SBox.derivative"]], "difference_distribution_table() (sage.crypto.sbox.sbox method)": [[17, "sage.crypto.sbox.SBox.difference_distribution_table"]], "differential_branch_number() (sage.crypto.sbox.sbox method)": [[17, "sage.crypto.sbox.SBox.differential_branch_number"]], "differential_uniformity() (sage.crypto.sbox.sbox method)": [[17, "sage.crypto.sbox.SBox.differential_uniformity"]], "feistel_construction() (in module sage.crypto.sbox)": [[17, "sage.crypto.sbox.feistel_construction"]], "fixed_points() (sage.crypto.sbox.sbox method)": [[17, "sage.crypto.sbox.SBox.fixed_points"]], "from_bits() (sage.crypto.sbox.sbox method)": [[17, "sage.crypto.sbox.SBox.from_bits"]], "has_linear_structure() (sage.crypto.sbox.sbox method)": [[17, "sage.crypto.sbox.SBox.has_linear_structure"]], "input_size() (sage.crypto.sbox.sbox method)": [[17, "sage.crypto.sbox.SBox.input_size"]], "interpolation_polynomial() (sage.crypto.sbox.sbox method)": [[17, "sage.crypto.sbox.SBox.interpolation_polynomial"]], "inverse() (sage.crypto.sbox.sbox method)": [[17, "sage.crypto.sbox.SBox.inverse"]], "is_almost_bent() (sage.crypto.sbox.sbox method)": [[17, "sage.crypto.sbox.SBox.is_almost_bent"]], "is_apn() (sage.crypto.sbox.sbox method)": [[17, "sage.crypto.sbox.SBox.is_apn"]], "is_balanced() (sage.crypto.sbox.sbox method)": [[17, "sage.crypto.sbox.SBox.is_balanced"]], "is_bent() (sage.crypto.sbox.sbox method)": [[17, "sage.crypto.sbox.SBox.is_bent"]], "is_involution() (sage.crypto.sbox.sbox method)": [[17, "sage.crypto.sbox.SBox.is_involution"]], "is_linear_structure() (sage.crypto.sbox.sbox method)": [[17, "sage.crypto.sbox.SBox.is_linear_structure"]], "is_monomial_function() (sage.crypto.sbox.sbox method)": [[17, "sage.crypto.sbox.SBox.is_monomial_function"]], "is_permutation() (sage.crypto.sbox.sbox method)": [[17, "sage.crypto.sbox.SBox.is_permutation"]], "is_plateaued() (sage.crypto.sbox.sbox method)": [[17, "sage.crypto.sbox.SBox.is_plateaued"]], "linear_approximation_table() (sage.crypto.sbox.sbox method)": [[17, "sage.crypto.sbox.SBox.linear_approximation_table"]], "linear_branch_number() (sage.crypto.sbox.sbox method)": [[17, "sage.crypto.sbox.SBox.linear_branch_number"]], "linear_structures() (sage.crypto.sbox.sbox method)": [[17, "sage.crypto.sbox.SBox.linear_structures"]], "linearity() (sage.crypto.sbox.sbox method)": [[17, "sage.crypto.sbox.SBox.linearity"]], "max_degree() (sage.crypto.sbox.sbox method)": [[17, "sage.crypto.sbox.SBox.max_degree"]], "maximal_difference_probability() (sage.crypto.sbox.sbox method)": [[17, "sage.crypto.sbox.SBox.maximal_difference_probability"]], "maximal_difference_probability_absolute() (sage.crypto.sbox.sbox method)": [[17, "sage.crypto.sbox.SBox.maximal_difference_probability_absolute"]], "maximal_linear_bias_absolute() (sage.crypto.sbox.sbox method)": [[17, "sage.crypto.sbox.SBox.maximal_linear_bias_absolute"]], "maximal_linear_bias_relative() (sage.crypto.sbox.sbox method)": [[17, "sage.crypto.sbox.SBox.maximal_linear_bias_relative"]], "min_degree() (sage.crypto.sbox.sbox method)": [[17, "sage.crypto.sbox.SBox.min_degree"]], "misty_construction() (in module sage.crypto.sbox)": [[17, "sage.crypto.sbox.misty_construction"]], "nonlinearity() (sage.crypto.sbox.sbox method)": [[17, "sage.crypto.sbox.SBox.nonlinearity"]], "output_size() (sage.crypto.sbox.sbox method)": [[17, "sage.crypto.sbox.SBox.output_size"]], "polynomials() (sage.crypto.sbox.sbox method)": [[17, "sage.crypto.sbox.SBox.polynomials"]], "ring() (sage.crypto.sbox.sbox method)": [[17, "sage.crypto.sbox.SBox.ring"]], "sage.crypto.sbox": [[17, "module-sage.crypto.sbox"]], "solutions() (sage.crypto.sbox.sbox method)": [[17, "sage.crypto.sbox.SBox.solutions"]], "to_bits() (sage.crypto.sbox.sbox method)": [[17, "sage.crypto.sbox.SBox.to_bits"]], "bracken_leander() (in module sage.crypto.sboxes)": [[18, "sage.crypto.sboxes.bracken_leander"]], "carlet_tang_tang_liao() (in module sage.crypto.sboxes)": [[18, "sage.crypto.sboxes.carlet_tang_tang_liao"]], "gold() (in module sage.crypto.sboxes)": [[18, "sage.crypto.sboxes.gold"]], "kasami() (in module sage.crypto.sboxes)": [[18, "sage.crypto.sboxes.kasami"]], "monomial_function() (in module sage.crypto.sboxes)": [[18, "sage.crypto.sboxes.monomial_function"]], "niho() (in module sage.crypto.sboxes)": [[18, "sage.crypto.sboxes.niho"]], "sage.crypto.sboxes": [[18, "module-sage.crypto.sboxes"]], "v() (in module sage.crypto.sboxes)": [[18, "sage.crypto.sboxes.v"]], "welch() (in module sage.crypto.sboxes)": [[18, "sage.crypto.sboxes.welch"]], "lfsrcryptosystem (class in sage.crypto.stream)": [[19, "sage.crypto.stream.LFSRCryptosystem"]], "shrinkinggeneratorcryptosystem (class in sage.crypto.stream)": [[19, "sage.crypto.stream.ShrinkingGeneratorCryptosystem"]], "blum_blum_shub() (in module sage.crypto.stream)": [[19, "sage.crypto.stream.blum_blum_shub"]], "encoding() (sage.crypto.stream.lfsrcryptosystem method)": [[19, "sage.crypto.stream.LFSRCryptosystem.encoding"]], "encoding() (sage.crypto.stream.shrinkinggeneratorcryptosystem method)": [[19, "sage.crypto.stream.ShrinkingGeneratorCryptosystem.encoding"]], "sage.crypto.stream": [[19, "module-sage.crypto.stream"]], "lfsrcipher (class in sage.crypto.stream_cipher)": [[20, "sage.crypto.stream_cipher.LFSRCipher"]], "shrinkinggeneratorcipher (class in sage.crypto.stream_cipher)": [[20, "sage.crypto.stream_cipher.ShrinkingGeneratorCipher"]], "connection_polynomial() (sage.crypto.stream_cipher.lfsrcipher method)": [[20, "sage.crypto.stream_cipher.LFSRCipher.connection_polynomial"]], "decimating_cipher() (sage.crypto.stream_cipher.shrinkinggeneratorcipher method)": [[20, "sage.crypto.stream_cipher.ShrinkingGeneratorCipher.decimating_cipher"]], "initial_state() (sage.crypto.stream_cipher.lfsrcipher method)": [[20, "sage.crypto.stream_cipher.LFSRCipher.initial_state"]], "keystream_cipher() (sage.crypto.stream_cipher.shrinkinggeneratorcipher method)": [[20, "sage.crypto.stream_cipher.ShrinkingGeneratorCipher.keystream_cipher"]], "sage.crypto.stream_cipher": [[20, "module-sage.crypto.stream_cipher"]], "ascii_integer() (in module sage.crypto.util)": [[21, "sage.crypto.util.ascii_integer"]], "ascii_to_bin() (in module sage.crypto.util)": [[21, "sage.crypto.util.ascii_to_bin"]], "bin_to_ascii() (in module sage.crypto.util)": [[21, "sage.crypto.util.bin_to_ascii"]], "has_blum_prime() (in module sage.crypto.util)": [[21, "sage.crypto.util.has_blum_prime"]], "is_blum_prime() (in module sage.crypto.util)": [[21, "sage.crypto.util.is_blum_prime"]], "least_significant_bits() (in module sage.crypto.util)": [[21, "sage.crypto.util.least_significant_bits"]], "random_blum_prime() (in module sage.crypto.util)": [[21, "sage.crypto.util.random_blum_prime"]], "sage.crypto.util": [[21, "module-sage.crypto.util"]]}})
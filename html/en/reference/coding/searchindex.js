Search.setIndex({"docnames": ["index", "sage/coding/abstract_code", "sage/coding/ag_code", "sage/coding/ag_code_decoders", "sage/coding/bch_code", "sage/coding/binary_code", "sage/coding/bounds_catalog", "sage/coding/channel", "sage/coding/channels_catalog", "sage/coding/code_bounds", "sage/coding/code_constructions", "sage/coding/codecan/autgroup_can_label", "sage/coding/codecan/codecan", "sage/coding/codes_catalog", "sage/coding/cyclic_code", "sage/coding/databases", "sage/coding/decoder", "sage/coding/decoders_catalog", "sage/coding/delsarte_bounds", "sage/coding/encoder", "sage/coding/encoders_catalog", "sage/coding/extended_code", "sage/coding/golay_code", "sage/coding/goppa_code", "sage/coding/grs_code", "sage/coding/guava", "sage/coding/guruswami_sudan/gs_decoder", "sage/coding/guruswami_sudan/interpolation", "sage/coding/guruswami_sudan/utils", "sage/coding/hamming_code", "sage/coding/information_set_decoder", "sage/coding/kasami_codes", "sage/coding/linear_code", "sage/coding/linear_code_no_metric", "sage/coding/linear_rank_metric", "sage/coding/parity_check_code", "sage/coding/punctured_code", "sage/coding/reed_muller_code", "sage/coding/self_dual_codes", "sage/coding/source_coding/huffman", "sage/coding/subfield_subcode", "sage/coding/two_weight_db"], "filenames": ["index.rst", "sage/coding/abstract_code.rst", "sage/coding/ag_code.rst", "sage/coding/ag_code_decoders.rst", "sage/coding/bch_code.rst", "sage/coding/binary_code.rst", "sage/coding/bounds_catalog.rst", "sage/coding/channel.rst", "sage/coding/channels_catalog.rst", "sage/coding/code_bounds.rst", "sage/coding/code_constructions.rst", "sage/coding/codecan/autgroup_can_label.rst", "sage/coding/codecan/codecan.rst", "sage/coding/codes_catalog.rst", "sage/coding/cyclic_code.rst", "sage/coding/databases.rst", "sage/coding/decoder.rst", "sage/coding/decoders_catalog.rst", "sage/coding/delsarte_bounds.rst", "sage/coding/encoder.rst", "sage/coding/encoders_catalog.rst", "sage/coding/extended_code.rst", "sage/coding/golay_code.rst", "sage/coding/goppa_code.rst", "sage/coding/grs_code.rst", "sage/coding/guava.rst", "sage/coding/guruswami_sudan/gs_decoder.rst", "sage/coding/guruswami_sudan/interpolation.rst", "sage/coding/guruswami_sudan/utils.rst", "sage/coding/hamming_code.rst", "sage/coding/information_set_decoder.rst", "sage/coding/kasami_codes.rst", "sage/coding/linear_code.rst", "sage/coding/linear_code_no_metric.rst", "sage/coding/linear_rank_metric.rst", "sage/coding/parity_check_code.rst", "sage/coding/punctured_code.rst", "sage/coding/reed_muller_code.rst", "sage/coding/self_dual_codes.rst", "sage/coding/source_coding/huffman.rst", "sage/coding/subfield_subcode.rst", "sage/coding/two_weight_db.rst"], "titles": ["Coding Theory", "Codes", "AG codes", "Decoders for AG codes", "BCH code", "Optimized low-level binary code representation", "Index of bounds on the parameters of codes", "Channels", "Index of channels", "Bounds for parameters of codes", "Linear code constructors that do not preserve the structural information", "Canonical forms and automorphisms for linear codes over finite fields", "Canonical forms and automorphism group computation for linear codes over finite fields", "Index of code constructions", "Cyclic code", "Access functions to online databases for coding theory", "Decoders", "Index of decoders", "Delsarte (or linear programming) bounds", "Encoders", "Index of encoders", "Extended code", "Golay code", "Goppa code", "Reed-Solomon codes and Generalized Reed-Solomon codes", "Constructions of generator matrices using the GUAVA package for GAP", "Guruswami-Sudan decoder for (Generalized) Reed-Solomon codes", "Interpolation algorithms for the Guruswami-Sudan decoder", "Guruswami-Sudan utility methods", "Hamming codes", "Information-set decoding for linear codes", "Kasami code", "Generic structures for linear codes over the Hamming metric", "Generic structures for linear codes of any metric", "Generic structures for linear codes over the rank metric", "Parity-check code", "Punctured code", "Reed-Muller code", "Enumerating binary self-dual codes", "Huffman encoding", "Subfield subcode", "Database of two-weight codes"], "terms": {"i": [0, 1, 2, 3, 4, 5, 7, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40], "mathemat": [0, 1, 34], "algebra": [0, 2, 39], "combinatori": 0, "us": [0, 1, 2, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40], "forward": [0, 1, 3, 4, 14, 21, 27, 32, 33, 34, 36, 40], "error": [0, 1, 4, 7, 9, 14, 15, 16, 18, 19, 21, 24, 26, 27, 30, 32, 33, 34, 35, 36, 37, 38, 40], "correct": [0, 1, 3, 5, 9, 10, 16, 18, 24, 26, 30, 32, 34, 38, 40], "commun": [0, 7], "sage": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40], "provid": [0, 1, 2, 4, 7, 9, 11, 12, 14, 18, 19, 26, 32, 34, 37, 40], "an": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 14, 15, 16, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40], "extens": [0, 3, 4, 10, 14, 21, 24, 30, 31, 32, 34], "librari": [0, 32], "object": [0, 1, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 30, 32, 36, 40], "algorithm": [0, 1, 2, 3, 5, 7, 9, 10, 11, 12, 16, 24, 26, 30, 31, 32, 34], "basic": [0, 1, 32, 33, 34, 39], "ar": [0, 1, 2, 3, 4, 5, 7, 9, 10, 11, 12, 14, 15, 16, 18, 19, 21, 22, 23, 24, 25, 26, 28, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40], "channel": [0, 3, 6, 9, 16, 21, 24, 30, 32, 36, 40], "encod": [0, 1, 2, 3, 14, 16, 21, 23, 24, 26, 32, 33, 34, 35, 36, 37], "The": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40], "follow": [0, 1, 5, 7, 14, 16, 19, 24, 25, 26, 27, 30, 31, 32, 33, 37, 38, 39], "base": [0, 1, 2, 3, 4, 5, 7, 9, 10, 11, 12, 14, 15, 16, 19, 21, 22, 23, 24, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40], "class": [0, 1, 2, 3, 4, 5, 7, 11, 12, 14, 15, 16, 19, 21, 22, 23, 24, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40], "defin": [0, 1, 2, 3, 4, 5, 7, 9, 10, 12, 14, 18, 19, 22, 23, 28, 29, 31, 32, 33, 34, 35, 38], "them": [0, 2, 10, 18, 23, 25, 34], "catalog": [0, 1], "avail": [0, 1, 2, 10, 11, 14, 26, 33, 36], "index": [0, 10, 30, 33, 37], "regardless": [0, 1], "metric": [0, 1, 9, 16, 19], "gener": [0, 1, 2, 4, 5, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 30, 31, 35, 36, 37, 38, 39], "structur": [0, 5, 7, 36], "ani": [0, 1, 7, 14, 16, 19, 22, 24, 28, 30, 32, 34, 39], "There": [0, 1, 11, 14, 18, 30, 39], "number": [0, 1, 4, 6, 7, 9, 14, 16, 18, 21, 22, 23, 24, 26, 27, 28, 30, 32, 33, 34, 36, 37, 38, 39, 40], "repres": [0, 1, 5, 7, 11, 14, 15, 23, 32, 33, 34, 38, 39], "over": [0, 1, 2, 3, 4, 5, 7, 9, 10, 14, 15, 16, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 33, 35, 36, 37, 38, 39, 40], "specif": [0, 1, 7, 14, 16, 22, 30, 32, 33, 34, 36], "ham": [0, 1, 6, 9, 10, 13, 16, 18, 24, 26, 30, 33, 34], "rank": [0, 1, 10, 12, 32, 33], "famou": 0, "list": [0, 1, 2, 3, 4, 5, 7, 10, 11, 12, 14, 15, 16, 18, 21, 22, 23, 24, 26, 27, 28, 30, 32, 33, 36, 37, 38, 40], "below": [0, 14, 15, 31, 32, 38], "own": [0, 18, 26, 30], "For": [0, 1, 4, 9, 14, 15, 30, 31, 32, 33, 34, 37, 38], "some": [0, 1, 3, 4, 5, 7, 9, 10, 11, 12, 14, 16, 22, 24, 25, 30, 32, 33, 34, 37, 38, 39], "implement": [0, 1, 2, 3, 7, 8, 9, 11, 12, 14, 16, 18, 19, 23, 24, 26, 27, 28, 30, 31, 32, 33, 34, 37, 38, 39], "special": [0, 9, 10, 11, 16, 19, 30, 32], "comput": [0, 1, 4, 5, 6, 9, 11, 14, 15, 18, 19, 21, 22, 23, 24, 26, 27, 30, 32, 33, 34, 35, 36, 39], "invari": [0, 12, 32], "pariti": [0, 10, 13, 14, 21, 22, 23, 24, 29, 31, 32, 33, 40], "check": [0, 1, 4, 7, 9, 10, 13, 14, 18, 19, 21, 22, 23, 24, 29, 30, 31, 32, 33, 37, 38, 40], "cyclic": [0, 4, 10, 13, 15, 17, 20, 24, 25, 32], "bch": [0, 10, 13, 14, 17, 23, 32], "golai": [0, 9, 13, 18, 25, 30, 32], "reed": [0, 4, 13, 17, 20, 21, 32, 34, 36, 40], "muller": [0, 13, 32], "solomon": [0, 4, 13, 17, 20, 21, 34, 36, 40], "goppa": [0, 2, 13], "kasami": [0, 13], "ag": [0, 17], "In": [0, 7, 9, 12, 14, 19, 23, 24, 30, 31, 32, 34, 38, 39], "contrast": 0, "can": [0, 1, 2, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 26, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40], "onli": [0, 1, 4, 5, 7, 9, 11, 14, 15, 16, 18, 19, 22, 25, 26, 28, 30, 31, 32, 34, 36, 37, 38, 39], "matrix": [0, 1, 2, 5, 6, 9, 10, 12, 14, 16, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40], "ha": [0, 1, 4, 5, 7, 9, 10, 14, 16, 21, 24, 25, 26, 27, 30, 32, 33, 34, 36, 39, 40], "other": [0, 1, 2, 5, 7, 15, 18, 30, 32, 33, 38], "priori": 0, "knowledg": [0, 32, 33, 34], "constructor": [0, 1, 3, 7, 16, 19, 26, 30, 32, 33, 39], "do": [0, 1, 4, 5, 7, 11, 16, 18, 19, 30, 32, 33], "preserv": 0, "inform": [0, 1, 3, 6, 8, 9, 12, 16, 31, 32, 33, 39], "matric": [0, 10, 12, 22, 32, 33, 34, 38], "guava": [0, 9, 10, 13, 15, 32], "packag": [0, 9, 15, 32], "gap": [0, 9, 10, 13, 15, 32], "enumer": [0, 1, 32], "binari": [0, 9, 10, 13, 15, 18, 22, 23, 25, 29, 30, 32, 37, 39], "self": [0, 1, 4, 5, 7, 12, 14, 15, 16, 19, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40], "dual": [0, 2, 4, 11, 14, 18, 22, 24, 25, 32, 33], "optim": [0, 30, 32], "low": [0, 27, 30], "level": [0, 1, 32, 33], "represent": [0, 1, 4, 7, 14, 16, 19, 21, 22, 24, 29, 31, 32, 33, 34, 35, 36, 37, 40], "support": [0, 1, 2, 3, 12, 32, 33, 34, 37], "If": [0, 1, 2, 3, 4, 5, 7, 9, 10, 11, 14, 15, 16, 18, 19, 21, 22, 24, 26, 28, 30, 32, 33, 34, 36, 37, 38, 39, 40], "constitu": 0, "from": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 26, 27, 28, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41], "inherit": [0, 1, 7, 16, 19, 32, 33, 34], "properti": [0, 10, 22, 32, 34], "like": [0, 9, 10, 13, 16, 24, 32, 39], "radiu": [0, 3, 9, 15, 16, 22, 24, 26, 28, 30, 32], "minimum": [0, 4, 5, 9, 10, 14, 15, 16, 22, 23, 24, 26, 28, 29, 30, 32, 34, 35, 37], "distanc": [0, 2, 4, 6, 9, 10, 14, 15, 16, 18, 22, 23, 24, 26, 28, 29, 30, 31, 32, 34, 35, 37], "subfield": [0, 2, 13, 17, 31, 32, 34], "subcod": [0, 2, 13, 17, 31, 32, 33], "punctur": [0, 15, 17, 20, 24, 32, 33], "extend": [0, 10, 13, 17, 18, 20, 22, 24, 30, 31, 32], "simpli": [0, 1, 30, 32, 34, 37], "produc": [0, 32], "modifi": [0, 6, 7, 14, 15, 18, 32], "found": [0, 30, 32, 34, 39, 41], "among": [0, 26, 30], "method": [0, 1, 7, 9, 12, 14, 15, 16, 17, 19, 21, 22, 24, 25, 26, 30, 32, 33, 34, 35, 36, 37, 39, 40], "set": [0, 1, 4, 5, 7, 9, 10, 11, 12, 14, 15, 16, 18, 19, 21, 22, 23, 24, 26, 31, 32, 33, 34, 35, 36, 37, 38, 40], "guruswami": 0, "sudan": 0, "interpol": [0, 26], "util": 0, "canon": [0, 5, 32], "form": [0, 5, 14, 19, 25, 30, 32, 33, 34, 38], "finit": [0, 1, 2, 4, 7, 9, 10, 14, 15, 16, 19, 23, 24, 32, 33, 34, 35, 37, 40], "field": [0, 1, 2, 3, 4, 5, 7, 9, 10, 14, 15, 16, 19, 22, 23, 24, 25, 26, 27, 29, 30, 32, 33, 34, 35, 36, 37, 40], "delsart": [0, 6, 9], "program": [0, 9, 14, 16], "access": [0, 6, 8, 10, 11, 13, 17, 20, 30, 32], "function": [0, 1, 2, 3, 5, 7, 9, 10, 11, 12, 18, 19, 24, 26, 32, 34, 38], "onlin": 0, "two": [0, 1, 2, 4, 5, 7, 15, 24, 26, 28, 30, 32, 33, 34, 37, 39], "weight": [0, 1, 5, 6, 7, 9, 12, 15, 18, 22, 24, 27, 30, 32, 34, 39], "least": [0, 5, 18, 27, 28, 30, 32, 39], "one": [0, 1, 3, 7, 9, 10, 11, 12, 14, 16, 21, 24, 26, 27, 29, 30, 32, 33, 34, 35, 36, 37, 39], "sourc": [0, 39], "huffman": [0, 32, 38], "search": [0, 5, 30], "page": [0, 26, 29, 32, 38], "type": [1, 3, 10, 14, 16, 28, 32, 38], "linear": [1, 2, 5, 6, 9, 13, 14, 15, 16, 19, 21, 22, 24, 25, 26, 27, 36, 38, 40], "non": [1, 3, 6, 7, 9, 10, 18, 19, 24, 30, 32, 33, 37, 39], "further": [1, 12, 15], "abstract": [1, 2, 7, 16, 19, 30, 32, 33, 34], "certain": [1, 32], "abstractlinearcodenometr": [1, 19, 22, 32, 33, 34], "contain": [1, 3, 4, 7, 9, 10, 12, 14, 15, 24, 25, 27, 32, 33, 34, 37, 39], "all": [1, 3, 4, 5, 7, 9, 10, 11, 12, 14, 15, 16, 17, 21, 22, 24, 25, 26, 27, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40], "its": [1, 5, 7, 9, 11, 12, 14, 15, 16, 19, 23, 24, 26, 27, 28, 30, 32, 33, 34, 35, 36, 37, 40], "thi": [1, 2, 3, 4, 5, 7, 9, 10, 11, 12, 14, 15, 16, 18, 19, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41], "exampl": [1, 2, 3, 4, 5, 7, 9, 10, 11, 12, 14, 15, 16, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40], "abstractlinearcod": [1, 2, 14, 17, 21, 22, 23, 24, 29, 30, 31, 33, 34, 35, 36, 37, 40], "take": [1, 3, 5, 7, 9, 16, 19, 24, 30, 32, 33, 34, 36], "hammingcod": [1, 10, 11, 12, 13, 29, 32, 33], "sinc": [1, 7, 10, 12, 15, 24, 32, 34, 38], "final": [1, 4, 12, 14, 32], "abstractcod": [1, 33], "diagram": 1, "show": [1, 15, 32, 39], "relationship": [1, 34], "modul": [1, 3, 9, 18, 23, 25, 27, 31, 32, 33, 34, 36, 38, 39, 41], "paritycheckcod": [1, 13, 35], "cycliccod": [1, 4, 13, 14, 15, 24, 32], "bchcode": [1, 4, 10, 13, 32], "golaycod": [1, 5, 13, 22, 30, 32, 33], "reedmullercod": [1, 13, 32, 37], "generalizedreedsolomoncod": [1, 4, 10, 13, 14, 21, 24, 26, 32, 36, 40], "goppacod": [1, 13, 23], "abstractlinearrankmetriccod": 1, "decod": [1, 2, 4, 14, 21, 24, 32, 33, 34, 36, 39, 40], "framework": [1, 32], "within": [1, 9, 16, 26, 30], "offer": 1, "creation": 1, "independ": [1, 7, 32], "messag": [1, 3, 7, 8, 14, 16, 19, 24, 26, 30, 32, 33, 34, 35, 36, 37], "codeword": [1, 3, 4, 5, 6, 9, 10, 12, 14, 16, 19, 23, 24, 26, 30, 31, 32, 33, 34, 35, 36, 37, 40], "A": [1, 2, 3, 4, 5, 9, 10, 11, 12, 14, 15, 21, 23, 24, 25, 26, 30, 32, 33, 34, 35, 36, 37, 38, 39], "word": [1, 4, 5, 7, 12, 15, 16, 19, 21, 22, 23, 24, 26, 30, 31, 32, 34, 35, 36, 37, 40], "possibli": [1, 6, 9, 19, 38, 39], "instead": [1, 9, 12, 16, 24, 26, 32, 37, 39], "creat": [1, 4, 5, 7, 14, 22, 24, 31, 33, 37, 39], "everi": [1, 14, 16, 19, 30, 32, 33, 34, 36], "famili": [1, 34], "multipl": [1, 4, 5, 9, 12, 14, 26, 27], "enabl": 1, "just": [1, 11, 16, 19, 26, 32, 34], "linearcodegeneratormatrixencod": [1, 19, 20, 32, 34, 35], "similarli": [1, 32], "linearcodenearestneighbordecod": [1, 17, 32], "when": [1, 4, 7, 9, 11, 15, 19, 24, 25, 27, 30, 32, 33, 34, 37, 38], "new": [1, 5, 7, 14, 24, 32, 33, 34], "investig": [1, 32, 34], "see": [1, 5, 9, 10, 11, 12, 14, 15, 18, 21, 24, 26, 27, 28, 30, 31, 32, 33, 34, 38], "suitabl": [1, 12], "your": [1, 16, 18, 19, 26, 30, 32, 33], "alreadi": [1, 5, 11, 22, 30], "case": [1, 4, 9, 12, 14, 19, 23, 24, 29, 30, 32, 34, 37, 38, 39], "instruct": [1, 34], "up": [1, 12, 15, 16, 26, 30, 32, 35, 38], "must": [1, 4, 7, 9, 10, 14, 15, 19, 23, 24, 26, 30, 31, 32, 33, 34, 37, 39], "have": [1, 5, 10, 12, 14, 15, 16, 18, 19, 22, 24, 30, 31, 32, 33, 34, 36, 37, 38], "unencod": [1, 3, 19, 24, 37], "message_spac": [1, 3, 14, 16, 19, 24, 33, 35, 37], "ambient": [1, 3, 16, 19, 22, 24, 30, 32, 33], "space": [1, 3, 4, 5, 6, 7, 9, 10, 14, 16, 18, 19, 22, 24, 27, 30, 32, 33, 34, 35, 36, 37], "more": [1, 5, 7, 9, 10, 11, 12, 16, 19, 24, 26, 30, 31, 32, 34], "about": [1, 11, 34], "decode_to_cod": [1, 2, 3, 4, 14, 16, 21, 24, 26, 30, 32, 34, 36, 40], "decode_to_messag": [1, 2, 3, 16, 24, 26], "input": [1, 2, 3, 4, 5, 7, 9, 10, 12, 14, 15, 16, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40], "either": [1, 5, 7, 9, 10, 14, 16, 24, 26, 30, 32, 34, 36, 37, 39], "input_spac": [1, 7, 16], "abstract_cod": 1, "length": [1, 2, 4, 5, 7, 9, 10, 11, 14, 15, 18, 21, 23, 24, 25, 26, 28, 29, 32, 33, 34, 35, 37, 38], "default_encoder_nam": [1, 2, 32, 33, 34], "none": [1, 2, 3, 4, 5, 9, 11, 14, 15, 21, 24, 26, 27, 30, 32, 33, 34, 36, 37, 39, 40], "default_decoder_nam": [1, 2, 32, 33, 34], "parent": [1, 4, 15, 27, 32], "As": [1, 2, 4, 9, 14, 16, 19, 24, 32, 33, 36], "oppos": [1, 24], "linear_cod": [1, 10, 17, 20, 30, 31, 32, 33, 34, 36], "make": [1, 5, 9, 18, 19, 27, 30, 32, 34], "assumpt": 1, "alphabet": [1, 7, 9, 18, 32, 39], "notion": [1, 8, 11, 32, 34], "implicitli": [1, 5], "subset": [1, 9, 14, 24, 30, 32, 33], "cartesian": [1, 7], "product": [1, 7, 10, 24, 32, 33], "a_1": [1, 30, 32, 38], "time": [1, 2, 3, 4, 9, 10, 11, 12, 14, 15, 16, 18, 23, 25, 26, 27, 30, 32, 33, 34, 36, 38, 39], "a_2": [1, 9], "ldot": [1, 11, 12, 24, 34, 37], "a_n": [1, 32, 38], "a_i": [1, 5, 30, 32], "note": [1, 2, 5, 7, 18, 19, 24, 26, 29, 30, 32, 34, 37, 38], "attempt": [1, 9, 19, 30], "directli": [1, 7, 17, 21, 24, 26, 30, 32, 34, 35, 37], "fashion": 1, "allow": [1, 7, 9, 11, 17, 19, 26, 30, 32, 33, 34, 36, 38], "subclass": [1, 2, 7, 16, 19, 32, 33], "appropri": [1, 26, 30, 37], "choic": [1, 5, 14, 26, 29, 30, 32, 33], "also": [1, 4, 5, 7, 9, 10, 11, 12, 14, 16, 24, 26, 30, 32, 33, 34, 37, 39], "enforc": 1, "wai": [1, 5, 7, 9, 10, 14, 26, 27, 30, 32, 34, 35, 39], "store": [1, 9, 12, 32, 41], "string": [1, 2, 4, 7, 26, 30, 32, 38, 39], "valu": [1, 9, 15, 19, 24, 26, 30, 32, 33, 34, 36, 37, 39], "relat": [1, 9, 18, 24, 32, 39], "should": [1, 7, 10, 12, 14, 16, 19, 26, 27, 30, 32, 33, 34, 38, 39], "To": [1, 6, 7, 8, 13, 14, 16, 17, 19, 20, 26, 30, 32, 33, 34, 38, 40], "you": [1, 9, 10, 11, 14, 16, 17, 18, 19, 24, 26, 30, 32, 33, 34, 38], "need": [1, 14, 16, 18, 19, 24, 26, 30, 32, 33, 36], "call": [1, 7, 9, 11, 14, 15, 16, 19, 24, 26, 29, 30, 31, 32, 33, 34, 37, 38, 40], "__init__": [1, 16, 19, 30, 32, 33, 34], "super": [1, 7, 16, 19, 30, 32, 33], "encodernam": [1, 32, 33], "decodernam": [1, 32, 33], "default": [1, 2, 3, 4, 9, 14, 15, 16, 18, 19, 21, 22, 24, 26, 27, 31, 32, 33, 34, 36, 37, 40], "doe": [1, 5, 7, 14, 16, 19, 21, 24, 26, 30, 32, 33, 35, 36, 37, 39], "necessarili": [1, 9, 33, 39], "howev": [1, 5, 7, 32, 34], "want": [1, 14, 26, 27, 32, 33, 39], "add": [1, 7, 32, 33], "specifi": [1, 12, 14, 24, 26, 30, 32, 33, 34], "categori": [1, 32], "highli": 1, "recommend": [1, 32, 33, 34], "facad": 1, "good": [1, 30, 33, 37], "overrid": [1, 7, 16, 19, 30, 32], "ambient_spac": [1, 3, 21, 24, 30, 32, 33, 36, 40], "which": [1, 2, 4, 5, 7, 9, 10, 11, 12, 14, 15, 16, 18, 19, 21, 22, 23, 24, 26, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39], "requir": [1, 2, 5, 10, 13, 15, 26, 30, 32], "__call__": 1, "__iter__": [1, 32], "__contains__": 1, "line": [1, 32, 33], "_registered_encod": [1, 32, 33], "_registered_decod": [1, 32, 33], "fill": [1, 7, 32, 33, 36], "dictionari": [1, 30, 32, 33, 38, 39], "py": [1, 25, 32, 33], "file": [1, 7, 10, 32, 33, 34, 37], "link": [1, 32, 33], "myencoderclass": [1, 32, 33], "mynewcodeclass": [1, 32, 33], "under": [1, 5, 10, 12, 32, 33], "name": [1, 2, 3, 4, 6, 7, 8, 11, 13, 14, 17, 20, 30, 32, 33, 34, 36], "myencodernam": [1, 32, 33], "write": [1, 30, 32, 33, 34], "nameofmyencod": [1, 32, 33], "instanc": [1, 4, 14, 16, 32, 33, 34, 39], "abl": [1, 9, 16, 24, 26, 32, 33], "mydecoderclass": [1, 32, 33], "mydecodernam": [1, 32, 33], "nameofmydecod": [1, 32, 33], "design": [1, 2, 4, 14, 16, 19, 32, 33, 34], "instanti": [1, 16, 19, 32, 33, 34], "_repr_": [1, 7, 16, 19, 32, 33], "_latex_": [1, 7, 16, 19, 32, 33], "add_decod": 1, "regist": 1, "member": [1, 11, 32], "know": [1, 4, 12, 30, 32, 33], "how": [1, 24, 26, 30, 32, 33, 34, 39], "pleas": [1, 26], "refer": [1, 2, 10, 12, 15, 16, 19, 22, 26, 29, 31, 33, 35, 37, 38, 41], "document": [1, 11, 29, 30, 31, 32, 33, 38], "first": [1, 4, 6, 9, 14, 24, 25, 26, 27, 30, 32, 33, 35, 40], "we": [1, 4, 7, 9, 11, 12, 14, 16, 23, 24, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39], "veri": [1, 10, 18, 22, 24, 30], "mydecod": 1, "def": [1, 30, 33], "return": [1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 14, 15, 16, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40], "associ": [1, 2, 3, 4, 10, 14, 16, 19, 21, 24, 26, 30, 32, 33, 35, 36, 37, 39, 40], "": [1, 5, 9, 11, 12, 14, 15, 16, 19, 21, 22, 24, 26, 27, 28, 30, 31, 32, 33, 34, 36, 38, 39, 40], "now": [1, 3, 14, 32, 36, 37], "c": [1, 2, 3, 4, 5, 7, 9, 10, 11, 12, 14, 16, 19, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40], "gf": [1, 2, 3, 4, 5, 7, 9, 10, 11, 12, 14, 15, 16, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40], "2": [1, 2, 3, 4, 5, 7, 9, 10, 11, 12, 14, 15, 16, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41], "3": [1, 2, 3, 4, 5, 7, 9, 10, 11, 12, 14, 15, 18, 22, 23, 24, 25, 26, 27, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41], "our": [1, 12, 39], "sort": [1, 30, 39], "decoders_avail": 1, "informationset": [1, 30], "nearestneighbor": 1, "syndrom": [1, 24, 30, 32, 33], "verifi": [1, 27], "c2": [1, 10, 11, 14, 24, 32, 33, 37], "add_encod": 1, "myencod": 1, "encoders_avail": 1, "systemat": [1, 33], "state": [1, 9, 32], "import": [1, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 20, 26, 27, 28, 30, 34, 37, 39], "mycod": [1, 33], "traceback": [1, 7, 9, 15, 19, 24, 26, 30, 31, 32, 33, 34, 37], "most": [1, 7, 9, 15, 16, 19, 22, 24, 26, 30, 31, 32, 33, 34, 37, 38, 39], "recent": [1, 7, 9, 15, 19, 24, 26, 30, 31, 32, 33, 34, 37], "last": [1, 7, 9, 10, 15, 19, 24, 26, 30, 31, 32, 33, 34, 37], "notimplementederror": [1, 32], "No": 1, "decoder_nam": 1, "arg": [1, 3, 21, 32, 36], "kwarg": [1, 3, 4, 14, 16, 21, 30, 32, 33, 34, 36, 40], "element": [1, 4, 5, 6, 7, 9, 10, 11, 12, 14, 16, 19, 21, 22, 23, 24, 25, 26, 32, 33, 34, 36, 37, 39], "kept": [1, 24, 32, 33, 34, 36], "addit": [1, 3, 6, 18, 32, 33, 34], "argument": [1, 3, 4, 7, 14, 21, 30, 32, 33, 34, 36, 37, 38, 40], "output": [1, 2, 4, 5, 7, 9, 10, 14, 15, 16, 19, 22, 24, 25, 26, 30, 32, 33, 34, 35, 36, 37, 39], "vector": [1, 3, 4, 5, 7, 9, 10, 11, 14, 16, 18, 19, 23, 24, 26, 27, 30, 32, 33, 34, 35, 36, 37], "g": [1, 2, 3, 5, 7, 9, 10, 11, 12, 14, 16, 19, 23, 24, 25, 27, 30, 32, 33, 34, 36, 38, 39], "1": [1, 2, 3, 4, 5, 7, 9, 10, 11, 12, 14, 15, 16, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41], "0": [1, 2, 3, 4, 5, 7, 9, 10, 11, 12, 14, 15, 16, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40], "linearcod": [1, 10, 11, 15, 16, 19, 21, 30, 33, 34, 36], "w_err": [1, 16, 32], "It": [1, 4, 7, 10, 14, 15, 16, 17, 18, 21, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40], "possibl": [1, 9, 11, 14, 15, 18, 24, 26, 30, 36, 39], "manual": 1, "choos": [1, 9, 26, 30, 32], "amongst": 1, "ones": [1, 5], "besid": 1, "cach": [1, 33], "With": [1, 18], "behaviour": [1, 14, 16, 32, 36], "each": [1, 2, 5, 7, 12, 15, 19, 23, 27, 30, 32, 34, 38, 39], "7": [1, 4, 5, 7, 9, 10, 11, 14, 15, 16, 19, 21, 22, 24, 26, 27, 29, 31, 32, 33, 35, 36, 38, 40], "4": [1, 2, 3, 4, 5, 7, 9, 10, 11, 12, 14, 15, 16, 18, 19, 21, 22, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41], "handl": [1, 9, 32], "mycodefamili": 1, "fals": [1, 3, 14, 15, 16, 18, 19, 21, 22, 24, 26, 30, 31, 32, 33, 36, 37], "_field": 1, "d": [1, 2, 3, 4, 5, 6, 9, 10, 11, 14, 16, 18, 21, 23, 24, 26, 28, 29, 30, 31, 32, 33, 34, 36, 37, 39, 40], "dummi": 1, "cardin": [1, 23, 24, 32, 33], "5": [1, 2, 3, 4, 5, 7, 9, 10, 11, 14, 15, 18, 21, 23, 24, 25, 26, 27, 28, 32, 33, 35, 36, 37, 38, 39, 40, 41], "known": [1, 2, 9, 10, 14, 15, 18, 22, 30, 32], "pass": [1, 7, 11, 14, 18, 26, 30, 32, 36, 37], "except": [1, 3, 7, 16, 18, 19, 24, 26, 30, 33, 38], "rais": [1, 2, 3, 15, 19, 24, 26, 30, 32, 33, 37], "try": [1, 14, 24, 36, 39], "valueerror": [1, 2, 9, 15, 19, 24, 26, 30, 31, 33, 34, 37], "extra": [1, 4, 14, 21, 32, 36, 40], "user": [1, 14, 32], "forget": [1, 32], "suppli": [1, 24, 26, 30, 33], "help": [1, 30], "construct": [1, 2, 7, 10, 14, 15, 16, 17, 24, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39], "fail": [1, 3, 16, 30, 32, 36], "due": [1, 9, 32], "miss": 1, "incorrect": 1, "paramet": [1, 4, 7, 11, 14, 15, 16, 18, 19, 26, 27, 30, 31, 32, 34, 37], "number_error": [1, 7, 30], "option": [1, 3, 9, 10, 11, 14, 15, 16, 21, 24, 25, 30, 32, 33, 36, 39, 40], "accept": [1, 30], "unspecifi": [1, 19, 24, 32, 37], "well": [1, 2, 11, 26, 29], "information_set_decod": [1, 17, 30], "linearcodeinformationsetdecod": [1, 17, 30], "detail": [1, 9, 11, 12, 14, 15, 21, 24, 26, 27, 28, 30, 32, 33, 34, 37], "true": [1, 2, 3, 4, 10, 11, 12, 14, 15, 16, 18, 19, 21, 22, 23, 24, 26, 27, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40], "dict": [1, 30], "map": [1, 3, 5, 10, 11, 12, 30, 32], "kei": [1, 4, 24, 38, 39], "encoder_nam": [1, 32, 33, 34, 36], "transform": [1, 7, 14, 19, 24, 32, 35, 36, 37], "One": [1, 7, 19, 24, 26, 30, 33, 34], "shortcut": [1, 19, 24], "generatormatrix": 1, "while": [1, 4, 7, 14, 22, 26, 30, 32, 38], "same": [1, 4, 5, 7, 9, 11, 14, 16, 19, 24, 26, 32, 33, 34, 36, 38, 39], "strongli": [1, 32, 33, 34], "advis": 1, "advantag": 1, "mechan": 1, "alwai": [1, 7, 9, 10, 16, 24, 29, 30, 32, 34, 35], "f": [1, 2, 3, 4, 7, 9, 10, 14, 15, 19, 23, 24, 25, 26, 27, 28, 29, 32, 34, 37, 38, 39], "k": [1, 2, 3, 5, 6, 9, 10, 11, 12, 14, 15, 18, 19, 23, 24, 25, 26, 29, 30, 32, 33, 35, 37, 40, 41], "dimens": [1, 2, 4, 5, 6, 7, 9, 10, 11, 14, 15, 16, 18, 19, 23, 24, 25, 26, 29, 30, 32, 33, 34, 35, 36, 37, 40], "ring": [1, 10, 14, 24, 26, 32, 37, 40], "is_in_cach": 1, "nonexistingencod": 1, "incorrectli": [1, 32], "strange_paramet": 1, "systematic_posit": [1, 33], "linear_code_no_metr": [1, 19, 20, 22, 33, 36], "linearcodesystematicencod": [1, 20, 33], "item": [1, 18, 39], "clist": 1, "random_el": [1, 3, 4, 7, 10, 21, 24, 30, 32, 33, 36, 40], "kwd": [1, 32, 36], "random": [1, 5, 7, 10, 13, 16, 21, 24, 25, 30, 32, 36, 39], "posit": [1, 4, 7, 15, 16, 24, 30, 32, 33, 34, 36], "keyword": [1, 30, 32], "test": [1, 5, 30, 32, 33, 38], "through": [1, 4, 7, 10, 13, 14, 21, 27, 30, 32, 36, 40], "prob": 1, "distribut": [1, 5, 7, 10, 18, 22, 24, 32], "n": [1, 4, 5, 6, 7, 9, 10, 11, 12, 14, 15, 18, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 37, 38, 39, 40, 41], "nocheck": [1, 19], "correspond": [1, 3, 10, 12, 14, 19, 22, 24, 26, 27, 32, 33, 35, 37, 39], "invers": [1, 5, 9, 19, 23], "might": [1, 7, 14, 16, 19, 29, 32, 33], "disabl": [1, 19], "save": [1, 19], "geometri": [2, 11, 29], "shortli": 2, "differenti": [2, 3, 17], "curv": [2, 3], "evalu": [2, 3, 4, 10, 17, 24, 37], "gop1981": 2, "full": [2, 10, 32, 33], "x": [2, 3, 4, 6, 9, 10, 11, 12, 14, 15, 18, 23, 24, 26, 27, 28, 32, 34, 37, 38], "y": [2, 3, 4, 14, 21, 24, 26, 27, 32, 36, 37, 39, 40], "affinespac": [2, 3], "function_field": [2, 3], "pl": [2, 3], "place": [2, 3, 25], "p": [2, 3, 5, 10, 11, 12, 14, 18, 23, 24, 25, 26, 28, 30, 31, 32, 33, 34, 37, 38, 39], "q": [2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 18, 21, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 37, 40, 41], "remov": [2, 3, 4, 9, 12, 25, 32, 36], "evaluationagcod": [2, 3], "8": [2, 3, 4, 5, 7, 9, 10, 11, 14, 15, 18, 22, 23, 24, 26, 27, 28, 30, 31, 32, 33, 34, 35, 38, 41], "differentialagcod": [2, 3], "kind": 2, "e": [2, 5, 6, 7, 9, 10, 12, 14, 16, 18, 19, 21, 23, 24, 26, 27, 30, 32, 33, 34, 35, 36, 37, 39], "dual_cod": [2, 10, 11, 12, 22, 24, 32, 33, 38], "both": [2, 5, 7, 14, 16, 18, 24, 26, 30, 32, 34, 36, 37, 38], "decoder_k": [2, 3], "info": [2, 3, 32, 33], "decoder_k_extens": [2, 3], "differentialagcodedecoder_k": [2, 3], "differentialagcodedecoder_k_extens": [2, 3], "differentialagcodeencod": [2, 3], "unencode_nocheck": [2, 3, 14, 19, 24, 35, 37], "differentialagcodeuniquedecod": [2, 3, 17], "connected_encod": [2, 3, 16, 24, 26], "decoding_radiu": [2, 3, 4, 14, 16, 21, 24, 26, 30, 32, 34, 36, 40], "evaluationagcodedecoder_k": [2, 3], "evaluationagcodedecoder_k_extens": [2, 3], "evaluationagcodeencod": [2, 3], "evaluationagcodeuniquedecod": [2, 3, 17], "natur": [2, 11, 16], "classic": [2, 24, 38], "cartier": 2, "cou2014": 2, "9": [2, 3, 5, 7, 10, 11, 14, 15, 18, 21, 23, 24, 26, 27, 28, 31, 32, 33, 36, 37, 38, 39, 40, 41], "z": [2, 10, 18, 32, 33, 38], "projectivespac": [2, 3], "cartiercod": 2, "long": [2, 3, 7, 15, 18, 30, 32], "author": [2, 3, 5, 7, 9, 10, 11, 12, 15, 16, 18, 19, 23, 25, 26, 27, 28, 30, 31, 32, 34, 38, 39], "kwankyu": [2, 3, 32], "lee": [2, 3, 26, 27, 30, 32], "2019": [2, 3, 23, 25, 34], "03": [2, 3, 10, 15, 25, 32], "initi": [2, 3, 9, 10, 11, 12, 16, 18, 19, 23, 25, 30, 31, 32, 34, 39], "version": [2, 3, 10, 11, 12, 16, 19, 22, 23, 25, 30, 31, 32, 34, 39], "ag_cod": 2, "agcod": 2, "base_field": [2, 4, 19, 22, 24, 29, 32, 33, 34, 35, 37], "_function_field": 2, "attribut": [2, 32], "functiom": 2, "underli": [2, 4, 14, 32], "base_function_field": 2, "r": [2, 4, 6, 9, 12, 14, 16, 22, 23, 24, 26, 27, 28, 29, 30, 32, 33, 34, 37, 38, 39], "ration": [2, 3], "divisor": [2, 3, 32], "whose": [2, 4, 10, 12, 14, 22, 24, 25, 26, 27, 30, 32, 33, 37], "disjoint": [2, 5, 9], "integ": [2, 4, 7, 9, 10, 12, 14, 15, 18, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 36, 37, 38, 39], "where": [2, 4, 5, 7, 9, 10, 12, 14, 18, 19, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 36, 37, 38], "characterist": [2, 32], "constant": [2, 3, 6, 10, 12, 18], "omit": 2, "minimum_dist": [2, 10, 22, 23, 24, 29, 31, 32, 34, 35, 37, 38], "designed_dist": [2, 3, 4], "generator_matrix": [2, 4, 5, 10, 11, 12, 14, 15, 19, 21, 22, 23, 24, 31, 32, 33, 34, 35, 36, 37], "regard": [2, 29], "prime": [2, 5, 10, 14, 23, 25, 32, 34], "places_at_infin": [2, 3], "o": [2, 3, 26, 27, 39], "get_plac": [2, 3], "basis_differenti": [2, 3], "basi": [2, 3, 5, 9, 27, 32, 33, 34], "w": [2, 3, 6, 9, 12, 18, 24, 30, 34, 38, 39], "residu": [2, 3, 10, 13, 25, 30], "zero": [2, 7, 9, 10, 12, 18, 24, 27, 28, 32, 33], "basis_funct": [2, 3], "uniqu": [3, 11, 12, 14, 39], "lbo2014": 3, "lee2016": 3, "a2": 3, "18": [3, 7, 11, 15, 32, 38], "26": [3, 7, 38], "15": [3, 4, 5, 7, 9, 10, 11, 12, 14, 15, 21, 25, 26, 32, 36, 38, 41], "tau": [3, 4, 12, 21, 26, 27, 30], "readi": 3, "receiv": [3, 7, 24, 26, 30, 32, 37], "noisi": 3, "staticerrorratechannel": [3, 7, 8, 21, 24, 30, 32, 36, 40], "sent_codeword": 3, "received_vector": 3, "hamming_weight": [3, 4, 7, 26, 30, 32], "ag_code_decod": [3, 17], "common": [3, 16, 32, 34], "circuit": 3, "verbos": [3, 15, 32], "detect_decoding_failur": 3, "detect_q_polynomi": 3, "boolean": [3, 14, 33], "print": [3, 4, 5, 15, 30, 32, 38, 39], "earli": [3, 24], "failur": 3, "detect": [3, 33, 35], "activ": 3, "polynomi": [3, 4, 6, 10, 14, 15, 18, 23, 24, 26, 27, 28, 32, 37], "fast": [3, 10, 24, 32], "reason": 3, "decodingerror": [3, 16, 30], "indic": [3, 12, 16, 19, 30, 32, 33], "via": [3, 12, 31, 33], "dec": 3, "len": [3, 5, 12, 26, 28, 32, 33, 38], "rv": 3, "cw": 3, "_lift": 3, "enc": 3, "msg": [3, 7], "indirect": [3, 33], "doctest": [3, 32, 33], "chan": [3, 7, 21, 24, 30, 32, 36, 40], "transmit": [3, 7, 35], "given": [3, 4, 7, 9, 10, 11, 12, 15, 24, 26, 27, 29, 30, 31, 32, 33, 34, 37, 38, 39], "tupl": [3, 7, 10, 24, 26, 27, 32, 33], "sum": [3, 10, 32, 33, 35], "basis_differential_spac": 3, "dec2": 3, "enc2": 3, "temp": 3, "connect": [3, 9, 16], "process": [3, 21], "basis_function_spac": 3, "_": [3, 14, 31, 32, 37], "let": [4, 9, 10, 11, 12, 14, 21, 24, 27, 30, 32, 34, 36, 37, 38, 39, 40], "phi": [4, 11], "split": [4, 10, 14], "alpha": [4, 10, 11, 12, 24], "order": [4, 5, 10, 11, 12, 14, 15, 26, 29, 30, 32, 37, 38, 39], "b": [4, 5, 9, 15, 27, 28, 32, 34, 39], "delta": [4, 9, 14], "ell": [4, 9, 26, 27], "le": [4, 24], "group": [4, 5, 10, 11, 25, 32, 33, 38], "satisfi": [4, 26, 30, 31, 32], "arithmet": [4, 14], "sequenc": [4, 10, 12, 14, 32, 33], "dot": [4, 14, 21, 24, 30, 35, 37], "bch_code": [4, 14, 17], "primitive_root": [4, 14, 24], "offset": 4, "jump_siz": 4, "seen": [4, 5, 11, 14, 24, 27, 36], "primit": [4, 9, 10, 14, 24], "root": [4, 10, 14, 23, 24, 26, 27, 38], "zx": [4, 14], "degre": [4, 5, 11, 14, 23, 24, 27, 28, 34, 37], "16": [4, 5, 7, 9, 10, 11, 14, 15, 18, 21, 23, 31, 32, 33, 34, 36, 38, 39, 40], "z4": [4, 14], "jump": 4, "size": [4, 5, 7, 9, 11, 14, 16, 18, 19, 24, 26, 27, 28, 30, 32, 33, 34, 35, 37, 40], "between": [4, 7, 9, 14, 15, 19, 24, 30, 32, 34, 37, 40], "coprim": [4, 14], "exactli": [4, 7, 12, 14, 24, 32, 33, 39], "here": [4, 9, 10, 12, 24, 25, 30, 32, 33, 38], "retro": 4, "compat": [4, 17, 25], "purpos": [4, 38, 39], "old": [4, 32], "signatur": [4, 26], "soon": 4, "explain": [4, 15], "abov": [4, 5, 7, 9, 12, 16, 26, 30, 32, 36, 38, 39], "built": [4, 9, 24, 32, 37], "variou": [4, 30], "generator_polynomi": [4, 14, 24], "10": [4, 5, 7, 9, 10, 11, 12, 14, 15, 18, 24, 25, 26, 27, 30, 32, 36, 38, 41], "6": [4, 5, 7, 9, 10, 11, 12, 14, 15, 18, 23, 24, 26, 27, 30, 32, 33, 34, 36, 37, 38, 41], "interfac": [4, 32], "smallest": [4, 9, 22, 24, 26], "gr": [4, 14, 24, 26, 27, 36], "mai": [4, 6, 8, 9, 11, 13, 15, 17, 20, 30], "equal": [4, 9, 12, 15, 18, 23, 24, 32, 33, 37, 38], "bch_to_gr": 4, "trivial": [4, 5, 9, 15, 25], "work": [4, 10, 11, 16, 24, 26, 28, 30, 32, 33], "defining_set": [4, 14, 23], "wa": [4, 7, 14, 21, 32, 36, 39], "deriv": [4, 12, 15, 27], "13": [4, 5, 9, 10, 11, 14, 24, 26, 32, 33, 39, 40], "parity_check_matrix": [4, 10, 11, 14, 21, 22, 23, 24, 29, 33, 40], "transpos": 4, "consecut": [4, 24], "bchunderlyinggrsdecod": [4, 17], "grs_decod": 4, "keyequationsyndrom": [4, 24], "grs_code": [4, 10, 17, 20, 24], "bch_word_to_gr": 4, "convert": [4, 34], "gen": [4, 14, 27, 33, 34, 38], "still": [4, 30, 32, 36], "lie": [4, 9], "31": [4, 7, 22], "guruswamisudan": [4, 21, 26], "dgr": [4, 21], "z5": 4, "maxim": [4, 14, 15, 16, 21, 24, 26, 30, 32, 34, 36, 40], "u": [4, 18, 32, 39], "what": [4, 9, 33], "begin": [4, 12], "align": 4, "mathrm": [4, 10], "iff": [4, 10], "sum_": [4, 9, 18, 30, 31, 32], "c_i": [4, 14, 32, 36, 40], "j": [4, 18, 24, 31, 32, 37, 38], "quad": 4, "h": [4, 10, 11, 14, 23, 33, 39], "end": [4, 30, 32], "pmatrix": 4, "orthogon": [4, 15, 25, 32, 33, 38], "point": [4, 9, 10, 11, 12, 24, 27, 32, 37], "multipli": [4, 24], "equat": [4, 24, 26, 27, 28, 31], "grs_word_to_bch": 4, "cgr": 4, "fgr": 4, "fix": [5, 7, 9, 10, 18, 25, 32], "subspac": [5, 9, 11, 12, 32], "togeth": 5, "permut": [5, 10, 11, 15, 25, 32, 33, 38], "s_n": [5, 11, 12, 25, 32, 33], "give": [5, 9, 14, 19, 26, 30, 32, 37], "rise": 5, "send": [5, 7, 32], "w_i": [5, 9], "w_": 5, "automorph": [5, 10, 32, 33, 38], "biject": [5, 19], "itself": [5, 7, 30, 32, 34], "b_i": [5, 32, 34], "a_": [5, 12, 38], "b_": [5, 32], "per": [5, 15, 34], "boil": 5, "down": [5, 40], "scalar": 5, "so": [5, 9, 30, 32, 34], "condit": [5, 34], "effect": 5, "robert": [5, 32], "l": [5, 10, 11, 14, 15, 18, 23, 26, 32, 39], "miller": [5, 32], "oct": 5, "nov": 5, "2007": [5, 10, 25, 32, 38], "compil": 5, "data": [5, 11, 15, 18, 32], "union": 5, "find": [5, 6, 9, 11, 14, 18, 24, 26, 27], "orbit": [5, 11, 32], "partit": [5, 11, 12, 32, 38], "stack": [5, 32], "nice": [5, 33], "refin": [5, 12, 30, 32], "binary_cod": 5, "binarycod": 5, "minim": [5, 6, 12, 18, 30, 32], "m": [5, 9, 10, 14, 18, 19, 23, 24, 26, 30, 31, 32, 33, 34, 36, 37, 38, 39], "60": 5, "glue": 5, "240": 5, "85": [5, 9, 41], "1111": [5, 39], "111100": 5, "001111": 5, "11110000": 5, "00111100": 5, "00001111": 5, "10101010": 5, "32": [5, 15, 32, 41], "11111111111111111111111111111111": 5, "apply_permut": 5, "label": [5, 16], "appli": [5, 12, 32], "column": [5, 11, 12, 23, 24, 25, 30, 31, 33, 34], "24": [5, 9, 10, 15, 18, 22, 30, 32, 38, 41], "12": [5, 7, 9, 11, 14, 18, 22, 24, 25, 26, 30, 32, 33, 36, 37, 38, 39, 41], "100000000000101011100011": 5, "010000000000111110010010": 5, "001000000000110100101011": 5, "000100000000110001110110": 5, "000010000000110011011001": 5, "000001000000011001101101": 5, "000000100000001100110111": 5, "000000010000101101111000": 5, "000000001000010110111100": 5, "000000000100001011011110": 5, "000000000010101110001101": 5, "000000000001010111000111": 5, "rang": [5, 10, 11, 18, 24, 28, 32, 33, 38], "11": [5, 7, 9, 10, 11, 12, 14, 15, 18, 21, 24, 25, 26, 27, 32, 33, 36, 37, 38], "000000000001101011100011": 5, "000000000010111110010010": 5, "000000000100110100101011": 5, "000000001000110001110110": 5, "000000010000110011011001": 5, "000000100000011001101101": 5, "000001000000001100110111": 5, "000010000000101101111000": 5, "000100000000010110111100": 5, "001000000000001011011110": 5, "010000000000101110001101": 5, "100000000000010111000111": 5, "rowspac": 5, "print_data": 5, "actual": [5, 24, 26, 32, 35, 37], "ncol": [5, 12], "nrow": 5, "nword": 5, "radix": 5, "0000": 5, "000000": 5, "110011": [5, 39], "00000000": 5, "11001100": 5, "11111111": 5, "00110011": 5, "11000011": 5, "01011010": 5, "10010110": 5, "01100110": 5, "10100101": 5, "01010101": 5, "10011001": 5, "01101001": 5, "put_in_std_form": 5, "put": [5, 10], "ident": [5, 25, 33, 38], "left": [5, 9, 10, 12, 24, 32, 34, 36], "augment": 5, "101011": 5, "010111": 5, "binarycodeclassifi": 5, "generate_children": 5, "children": 5, "limit": [5, 9, 32], "whether": [5, 14, 24, 26, 32, 33], "divis": [5, 15], "ensur": [5, 18, 32, 35], "doubli": [5, 15], "even": [5, 10, 13, 15, 16, 18, 32, 33, 35, 36, 38], "bc": [5, 15], "databas": [5, 32, 38], "self_orthogonal_binary_cod": [5, 15], "heavi": 5, "soc_it": 5, "2d": 5, "3d": 5, "put_in_canonical_form": 5, "obtain": [5, 9, 10, 14, 15, 24, 26, 31, 32, 35, 38, 39], "perform": [5, 22, 26, 30, 32], "row": [5, 9, 10, 12, 23, 25, 26, 27, 33, 34], "reduct": [5, 26, 27], "pivot": 5, "front": 5, "right": [5, 12, 24, 33, 34], "arbitrari": [5, 12, 18, 32, 34], "011000111010100000000000": 5, "001001001111100000000001": 5, "011010100101100000000010": 5, "001101110001100000000100": 5, "010011011001100000001000": 5, "010110110011000000010000": 5, "011101100110000000100000": 5, "000011110110100001000000": 5, "000111101101000010000000": 5, "001111011010000100000000": 5, "010110001110101000000000": 5, "011100011101010000000000": 5, "100000000000001100111001": 5, "010000000000001010001111": 5, "001000000000001111010010": 5, "000100000000010110101010": 5, "000010000000010110010101": 5, "000001000000010001101101": 5, "000000100000011000110110": 5, "000000010000011111001001": 5, "000000001000010101110011": 5, "000000000100010011011110": 5, "000000000010001011110101": 5, "000000000001001101101110": 5, "orbitpartit": 5, "keep": 5, "track": 5, "vertic": [5, 32, 39], "equival": [5, 9, 11, 12, 15, 32, 33, 38], "part": [5, 11, 12, 16, 33], "been": [5, 7, 14, 16, 30, 32, 33, 34, 36, 39], "dure": [5, 16, 19], "essenti": [5, 30], "cell": [5, 12], "wikipedia": [5, 9, 10, 18, 22, 32], "articl": [5, 9, 10, 18, 22, 32], "set_data_structur": 5, "partitionstack": 5, "travers": 5, "tree": [5, 39], "cmp": 5, "cg": [5, 33], "_refin": 5, "181": [5, 26, 28], "_split_vertex": 5, "290": 5, "463": 5, "1500": 5, "1224": 5, "_is_discret": 5, "_clear": 5, "print_basi": 5, "_dangerous_dont_use_set_ents_lvl": 5, "14": [5, 7, 10, 11, 14, 15, 18, 24, 26, 32, 38], "_find_basi": 5, "basis_loc": 5, "wd_ent": 5, "wd_lvl": 5, "col_ent": 5, "col_lvl": 5, "col_deg": 5, "col_count": 5, "col_output": 5, "wd_deg": 5, "wd_count": 5, "wd_output": 5, "test_expand_to_ortho_basi": 5, "written": [5, 7, 32, 34], "pure": 5, "speed": 5, "standard": [5, 9, 33], "arrai": [5, 31], "expans": [5, 38], "perp": [5, 32, 33], "otherwis": [5, 14, 18, 22, 26, 27, 32, 33, 36], "text": [5, 15, 21], "span": [5, 10, 27], "guarante": [5, 7, 16, 23, 30, 32, 33], "test_word_perm": 5, "t_limit": 5, "wordpermut": 5, "struct": 5, "second": [5, 9, 11, 24, 26, 27, 28, 32], "These": [5, 9, 10, 11, 15, 19, 23, 25, 32, 34, 38], "create_word_perm": 5, "python": [5, 15, 32, 38], "mapsto": 5, "result": [5, 9, 14, 16, 19, 23, 24, 26, 31, 32, 33, 37, 39], "agre": [5, 30, 32], "slow": [5, 18, 32, 34], "1b": 5, "create_array_word_perm": 5, "create_comp_word_perm": 5, "composit": [5, 32], "create_inv_word_perm": 5, "create_id_word_perm": 5, "resp": [5, 32], "origin": [5, 21, 24, 26, 27, 28, 30, 32, 36, 39, 40], "permute_word_by_wp": 5, "dealloc_word_perm": 5, "involv": [5, 32], "weight_dist": 5, "30": [5, 7, 9, 24, 25, 29, 30, 32, 38, 41], "68": [5, 41], "34": [5, 15, 41], "codesize_upper_bound": [6, 9], "upper": [6, 9, 12, 15, 18, 32, 40], "delsarte_bound_q_matrix": [6, 18], "lower": [6, 9, 12, 15, 16, 18, 23, 32, 40], "min": [6, 9, 18, 32], "dist": [6, 18], "delsarte_bound_additive_hamming_spac": [6, 18], "h_q": [6, 18], "delsarte_bound_constant_weight_cod": [6, 18], "delsarte_bound_hamming_spac": [6, 18], "dimension_upper_bound": [6, 9, 40], "eberlein": [6, 18], "_k": [6, 18], "elias_bound_asymp": [6, 9], "asymptot": [6, 9], "elia": [6, 9], "rate": [6, 7, 9, 10, 33], "elias_upper_bound": [6, 9], "entropi": [6, 9], "ari": [6, 7, 9, 13, 30, 37], "symmetr": [6, 7, 9, 10, 11, 25, 32], "gilbert_lower_bound": [6, 9], "gilbert": [6, 9], "varshamov": [6, 9], "griesmer_upper_bound": [6, 9], "griesmer": [6, 9], "gv_bound_asymp": [6, 9], "gv_info_r": [6, 9], "hamming_bound_asymp": [6, 9], "hamming_upper_bound": [6, 9], "krawtchouk": [6, 18], "_l": [6, 18], "kravchuk": [6, 18], "mrrw1_bound_asymp": [6, 9], "mcelies": [6, 9], "rumsei": [6, 9], "rodemich": [6, 9], "welsh": [6, 9], "plotkin_bound_asymp": [6, 9], "plotkin": [6, 9], "plotkin_upper_bound": [6, 9], "singleton_bound_asymp": [6, 9], "singleton": [6, 9], "singleton_upper_bound": [6, 9], "volume_ham": [6, 9], "ball": [6, 9], "global": [6, 8, 13, 14, 17, 20], "namespac": [6, 8, 13, 14, 17, 20], "bounds_catalog": 6, "simul": 7, "prone": 7, "transmiss": [7, 8, 30], "borrow": 7, "nomenclatur": 7, "theori": [7, 9, 34], "achiev": [7, 11], "consid": [7, 9, 14, 16, 24, 30, 32, 33, 34, 36, 37, 39], "done": [7, 30], "conveni": 7, "transmit_unsaf": 7, "exact": [7, 18], "thing": 7, "belong": [7, 9, 14, 19, 24, 33, 35, 37], "inner": [7, 12, 32, 33], "loop": [7, 30, 38], "lighter": 7, "altern": [7, 32, 34], "errorerasurechannel": [7, 8, 24], "erasur": [7, 24, 36], "code": [7, 8, 16, 17, 18, 19, 20, 25, 27, 28, 39, 40], "output_spac": 7, "sageobject": [7, 16, 19, 30, 39], "top": [7, 16, 19, 25], "being": [7, 24, 26, 27, 28, 32, 36, 39, 40], "mandatori": [7, 19], "reimplement": [7, 19], "n_err": 7, "59": [7, 24, 30, 33, 36, 37], "accordingli": 7, "never": [7, 9, 30, 32, 34], "23": [7, 18, 22, 32], "42": [7, 28, 36, 38], "set_random_se": [7, 36], "53": 7, "typeerror": [7, 34], "v": [7, 9, 10, 18, 31, 32, 33, 34, 38, 39], "33": [7, 15, 22], "46": 7, "20": [7, 9, 11, 15, 18, 32, 38, 39], "49": [7, 10, 26], "number_erasur": [7, 24, 36], "eras": [7, 24], "sever": [7, 11, 32, 36], "vectorspac": [7, 10, 32], "bound": [7, 14, 15, 16, 23, 32, 40], "n_era": [7, 24], "40": [7, 24, 36, 41], "coupl": 7, "mani": [7, 24, 26, 30, 32, 33, 34], "_number_error": 7, "_number_erasur": 7, "pick": [7, 32, 36], "overlap": 7, "expect": [7, 16, 26, 30], "erron": 7, "elsewher": [7, 38], "58": 7, "38": 7, "qarysymmetricchannel": [7, 8], "epsilon": 7, "memoryless": 7, "sigma": [7, 37], "probabl": [7, 19, 39], "frac": [7, 9, 14, 24, 29, 32], "oper": [7, 14, 15, 32, 34], "manner": 7, "though": 7, "usual": [7, 10, 16, 17, 18, 30, 33, 34], "taken": [7, 19, 30], "bewar": 7, "infinit": [7, 10], "uniformli": 7, "draw": 7, "individu": [7, 30, 32], "corrupt": 7, "symbol": [7, 9, 18, 24, 33, 35, 36, 39], "50": [7, 28, 41], "300000000000000": 7, "error_prob": 7, "singl": [7, 14, 16, 30, 32], "probability_of_at_most_t_error": 7, "t": [7, 10, 12, 14, 18, 22, 23, 24, 30, 31, 32, 38, 39, 40], "952236164579467": 7, "probability_of_exactly_t_error": 7, "122346861835401": 7, "chang": [7, 10], "anoth": [7, 14, 21, 22, 24, 26, 32, 33, 36], "55": [7, 23, 38, 41], "static": [7, 26, 30], "ad": [7, 9, 10, 25, 32, 35, 38], "github": [7, 32], "issu": [7, 32], "19863": 7, "1000": 7, "367": 7, "format_interv": 7, "format": [7, 38, 39], "helper": [7, 26], "random_error_vector": 7, "error_posit": 7, "coeffici": [7, 14, 23, 24, 26, 27, 28, 32, 38], "codinglib": [7, 19], "http": [7, 9, 15, 18, 32, 38], "bitbucket": 7, "org": [7, 32, 38], "jsrn": 7, "johan": [7, 26, 27, 28, 30], "nielsen": [7, 26, 27, 28], "theoret": [8, 32], "build": [8, 10, 13, 14, 16, 17, 19, 20, 24, 31, 32, 33, 37, 39, 40], "channels_catalog": 8, "david": [9, 10, 15, 16, 19, 25, 26, 27, 28, 30, 32, 38], "joyner": [9, 10, 15, 16, 25, 32, 38], "2006": [9, 10, 15, 25, 32], "07": [9, 10, 31, 32], "william": [9, 32], "stein": [9, 32], "minor": [9, 18], "edit": 9, "doc": [9, 30, 32], "bug": [9, 10, 32], "2009": [9, 16, 25, 32], "05": [9, 10, 25, 32, 39], "dima": [9, 18, 25], "pasechnik": [9, 18, 25], "2012": [9, 11, 12, 18, 32], "lp": [9, 18], "often": [9, 14, 24], "denot": [9, 10, 12, 24, 32, 38], "Then": [9, 16, 19, 25, 27, 31, 32, 34], "typic": 9, "log_q": 9, "vert": [9, 21, 33], "bf": 9, "v_1": [9, 37], "v_2": [9, 37], "v_n": 9, "w_1": [9, 41], "w_2": [9, 41], "w_n": 9, "leq": [9, 11, 12, 24, 30, 31, 32, 37], "v_i": [9, 37], "rightarrow": [9, 10, 14], "bold": 9, "distinguish": 9, "particular": [9, 12, 14, 31, 32, 34], "rel": 9, "_q": [9, 32], "parenthes": 9, "squar": [9, 33, 38], "bracket": 9, "Of": [9, 14], "cours": [9, 14, 32, 38], "best": [9, 15, 26, 30], "a_q": 9, "largest": [9, 14, 30], "exist": [9, 10, 14, 32], "b_q": 9, "lin": 9, "geq": [9, 12, 14, 32], "determin": [9, 16, 23, 24, 26, 30, 32], "main": [9, 34, 38], "problem": [9, 18], "hp2003": [9, 10, 21, 22, 29, 32, 38], "lin1999": [9, 32], "quantiti": 9, "solv": [9, 24, 27], "childhood": 9, "game": 9, "question": [9, 39], "player": 9, "secretli": 9, "larg": [9, 10, 26, 30], "ask": [9, 32, 33, 37], "seri": [9, 38], "ye": 9, "correctli": [9, 32], "chose": 9, "feedback": 9, "situat": 9, "lemma": 9, "2e": 9, "thu": [9, 18, 22, 32, 33, 34], "estim": [9, 30], "indirectli": 9, "best_known_linear_code_www": 9, "websit": 9, "www": [9, 15, 18], "codet": [9, 15], "de": [9, 15], "marku": 9, "grassl": 9, "best_known_linear_cod": [9, 32], "would": [9, 30, 32, 33], "solut": [9, 18, 28], "becaus": [9, 32], "applic": 9, "nonlinear": 9, "glb": 9, "analog": [9, 34], "shall": [9, 30], "seek": [9, 27, 30], "assum": [9, 16, 18, 19, 30, 32, 33], "infin": 9, "johnson": [9, 26, 28, 32], "mrrw2_bound_asymp": 9, "code_bound": 9, "tabl": [9, 15, 32, 38, 39], "calcul": [9, 34], "wrap": [9, 10], "upperbound": [9, 15], "93": 9, "4096": [9, 18, 32], "gap_package_guava": [9, 10, 15, 25, 32, 33], "123361": 9, "109226": 9, "mean": [9, 15, 26, 32, 33, 34], "sens": [9, 18, 19, 23], "39912396330": 9, "cf": [9, 12, 32], "upperboundelia": 9, "232": 9, "real": [9, 27, 28, 39], "interv": [9, 30], "greater": [9, 10, 28, 32], "than": [9, 14, 23, 24, 26, 27, 28, 32, 37], "logarithm": 9, "factor": [9, 25, 32], "log": [9, 30], "properli": [9, 32], "entropy_invers": 9, "includ": [9, 24, 30], "entir": [9, 34], "henc": [9, 12, 39], "012986862055": 9, "varshamov_bound": 9, "128": 9, "upperboundgriesm": 9, "lceil": 9, "rceil": 9, "reach": 9, "ternari": [9, 22, 32], "729": 9, "rdf": 9, "18872187554086": 9, "lambda": [9, 32], "plot": [9, 39], "graphic": 9, "consist": [9, 10, 26, 32, 39], "100": [9, 24, 39], "ab": [9, 38], "tol": 9, "1e": 9, "36704992608261894": 9, "456435556800": 9, "sphere": 9, "pack": 9, "divid": [9, 14, 24], "content": [9, 24], "floor": 9, "thei": [9, 10, 16, 19, 24, 30, 32, 34, 37, 38], "whole": 9, "maximum": [9, 24, 32, 37], "small": [9, 10, 30, 32, 38], "hold": [9, 32, 38], "perfect": [9, 22, 32], "4e": 9, "3545789026652697": 9, "precis": [9, 18, 26], "bigger": [9, 14, 23, 26, 30, 32, 33], "berlekamp": [9, 24], "upperboundplotkin": 9, "192": 9, "shorten": [9, 15, 32, 33], "By": [9, 16, 19, 32], "meet": 9, "separ": [9, 19, 24, 30], "md": [9, 24], "256": [9, 15, 24, 32], "176": [9, 38], "varieti": 10, "therefor": [10, 11, 26, 32], "rich": 10, "random_linear_cod": [10, 13, 21, 32, 33, 36, 40], "2008": [10, 15, 25, 32], "02": [10, 16, 30, 32], "linearcodefromcheckmatrix": 10, "reedsolomoncod": [10, 13, 24], "walshcod": [10, 13], "duadiccodeevenpair": [10, 13], "duadiccodeoddpair": [10, 13], "qr": [10, 25], "odd": [10, 13], "09": [10, 31, 32], "report": [10, 32], "voloch": 10, "docstr": [10, 25, 32], "walsh_matrix": 10, "code_construct": [10, 25], "s1": 10, "s2": 10, "pair": [10, 13, 26, 27, 30, 32], "duadic": [10, 13], "_is_a_split": 10, "definit": [10, 14, 16, 22, 25, 26, 31, 32, 34, 37], "mayb": 10, "cyclotom": [10, 14], "coset": [10, 31, 32], "mod": [10, 25], "zmod": 10, "cyclotomic_coset": 10, "theorem": [10, 32, 41], "extendedquadraticresiduecod": [10, 13], "quadrat": [10, 13, 25, 30], "xqr": [10, 25], "bit": 10, "coordin": [10, 11, 12, 24, 32, 36, 40], "remark": 10, "dualiti": 10, "section": [10, 14, 26, 29, 32], "modulo": [10, 14], "c1": [10, 14, 19, 32, 33, 37], "quadraticresiduecod": [10, 13, 30], "extended_cod": [10, 17, 20, 21, 31, 32, 33], "c3": [10, 32, 33], "17": [10, 11, 14, 18, 26, 30, 32], "quadraticresiduecodeoddpair": [10, 13], "c3x": 10, "c4": [10, 33], "th": [10, 22, 23, 24, 27, 32, 36, 40], "uniti": [10, 24], "quadraticresiduecodeevenpair": [10, 13, 32], "2005": [10, 15, 25, 32], "don": [10, 30, 32], "occur": [10, 15, 18, 30], "25896": 10, "is_self_orthogon": [10, 32, 33], "systematic_generator_matrix": [10, 33], "exercis": 10, "365": 10, "c1x": 10, "c2x": 10, "spectrum": [10, 32, 38], "102": 10, "153": 10, "toriccod": [10, 13, 32], "lattic": 10, "zz": [10, 32], "toric": [10, 13, 25], "imag": 10, "operatornam": 10, "eval": 10, "_t": 10, "multi": 10, "notat": [10, 32], "x_1": [10, 25, 28, 37], "x_d": 10, "e_1": 10, "e_d": 10, "t_1": 10, "t_n": 10, "discuss": 10, "joy2004": 10, "polytop": 10, "36": [10, 15, 18, 41], "fact": [10, 38], "28": [10, 24, 32, 36, 38, 41], "next": [10, 38], "wait": 10, "overnight": 10, "get": [10, 11, 12, 21, 30, 32, 34, 36, 38, 39], "walsh": [10, 13], "hadamard": 10, "hadamard_matrix": 10, "walsh_cod": 10, "from_parity_check_matrix": [10, 13], "permutation_act": 10, "switch": [10, 36], "back": [10, 34, 38], "again": 10, "symmetricgroup": [10, 11, 33], "convent": 10, "letter": [10, 39], "matrixspac": [10, 32, 33, 38], "s5": 10, "action": [10, 11, 12, 32], "gv": 10, "hgv": 10, "licens": 10, "gpl": 10, "v2": 10, "la": 10, "vega": 10, "probabilist": [10, 16, 30], "drawn": 10, "until": [10, 30, 36], "hit": 10, "accord": [10, 12, 24, 27, 37, 38], "m0": 10, "describ": [11, 12, 15, 16, 24, 30, 32], "feu2009": [11, 12], "furthermor": [11, 12, 27], "too": [11, 12, 24, 26, 36, 38], "linearcodeautgroupcanlabel": [11, 12], "model": 11, "rtime": [11, 12], "aut": [11, 12, 32, 38], "semimonomi": [11, 32], "start": [11, 12, 32], "finish": 11, "relev": 11, "get_canonical_form": [11, 12], "get_transport": [11, 12], "get_autom_gen": [11, 12], "peopl": 11, "weaker": 11, "monomi": [11, 37], "isometri": 11, "subgroup": [11, 32], "interest": [11, 12, 22], "algorithm_typ": 11, "restrict": [11, 12, 26, 32, 38], "respect": [11, 26, 30, 32], "color": [11, 12], "thoma": [11, 12, 32], "feulner": [11, 12, 32], "codecan": [11, 12, 32], "autgroup_can_label": [11, 32], "get_autom_ord": 11, "gl": [11, 12], "smaller": [11, 28, 32], "p2": [11, 12], "tell": 11, "share": [11, 32, 34, 41], "864": 11, "get_perm": 11, "21": [11, 15, 18, 32, 33, 37], "19": [11, 15, 32], "permutation_automorphism_group": [11, 32, 33], "semilinear": [11, 32], "said": 11, "pi": [11, 12], "c_": [11, 14, 32], "unit": [11, 12], "phi_0": 11, "phi_": 11, "young": [11, 32], "could": [11, 30, 32, 34], "graph": [11, 12, 31, 32, 39], "generic_graph": 11, "genericgraph": 11, "canonical_label": 11, "echelon_form": [11, 12], "get_pgammal_gen": 11, "translat": [11, 32], "gamma": 11, "geometr": 11, "view": 11, "identifi": [11, 24], "multiset": [11, 32], "project": [11, 12, 29, 32], "pg": [11, 12], "interpret": [11, 12, 23, 32], "monic": [11, 14, 23, 27], "apply_map": [11, 32], "get_pgammal_ord": 11, "168": [11, 41], "cf1": [11, 12], "semimonomialtransformationgroup": [11, 12], "an_el": [11, 12], "cf2": 11, "semilinearli": 12, "isometr": 12, "duplic": 12, "suppos": 12, "develop": 12, "perm_gp": 12, "partn_ref2": 12, "refinement_gener": 12, "partitionrefinement_gener": 12, "descript": [12, 30, 34], "languag": 12, "stabil": 12, "g_": [12, 24, 30], "homomorph": [12, 40], "jeffrei": [12, 32], "leon": [12, 32], "idea": [12, 32], "maintain": 12, "_init_point_hyperplane_incid": 12, "hyperplan": 12, "bipartit": 12, "subgraph": 12, "incid": 12, "partitionrefinementlinearcod": 12, "_point_refin": 12, "_hyp_refin": 12, "simplex": 12, "mat": 12, "transport": [12, 32], "get_autom_order_permut": 12, "innergroup": 12, "those": [12, 26, 30, 31, 33, 37], "tripl": [12, 18], "row_partit": 12, "discret": [12, 38], "frob_pow": 12, "varphi": 12, "blockmatrix": 12, "diagon": [12, 38], "entri": [12, 18, 22, 23, 24, 34, 38], "And": [12, 32, 36], "intersect": [12, 31], "varphi_i": 12, "power": [12, 18, 24, 31, 34, 37], "frobeniu": [12, 32], "column_block": 12, "nontrivi": 12, "get_frob_pow": 12, "compon": [12, 24], "get_autom_order_inner_stabil": 12, "mat2": 12, "p1": 12, "binaryreedmullercod": [13, 37], "kasamicod": [13, 31, 32], "quasiquadraticresiduecod": [13, 25, 33], "quasi": [13, 25], "randomlinearcodeguava": [13, 25], "subfieldsubcod": [13, 40], "extendedcod": [13, 21, 32], "puncturedcod": [13, 36], "codes_catalog": 13, "shift": [14, 27], "rot2006": [14, 24, 29], "foral": [14, 33, 40], "c_0": 14, "c_1": [14, 32], "f_q": 14, "sigma_": [14, 24, 35], "less": [14, 24, 26, 27, 32, 33, 37], "leftrightarrow": 14, "cyclic_cod": [14, 17, 20], "generator_pol": [14, 32], "propos": 14, "three": [14, 31, 37], "differ": [14, 16, 19, 24, 30, 32, 33, 34, 39], "That": [14, 32], "depend": [14, 16, 30, 32, 33], "highest": 14, "find_generator_polynomi": 14, "Will": 14, "close": [14, 32], "extract": 14, "cc": [14, 32, 38], "bch_bound": 14, "longest": 14, "check_polynomi": 14, "expon": 14, "expand": 14, "revers": 14, "field_embed": 14, "embed": [14, 40], "morphism": [14, 40], "z3": 14, "defn": [14, 32, 40], "zeta": [14, 32], "surrounding_bch_cod": 14, "surround": 14, "63": [14, 41], "45": [14, 18, 39, 41], "51": [14, 24], "cycliccodepolynomialencod": [14, 20], "style": [14, 24, 37], "univari": [14, 24, 26, 32], "gf2x": 14, "cycliccodesurroundingbchdecod": [14, 17], "bch_decod": 14, "cycliccodevectorencod": [14, 20], "m_1": [14, 24, 30, 35, 38], "m_2": [14, 35, 38], "m_k": [14, 24, 35], "p_m": 14, "m_i": [14, 24, 30, 35, 38], "gcd": [14, 31], "subseteq": 14, "load": [14, 32], "convers": 14, "inde": [14, 32], "doesn": 14, "best_linear_code_in_codetables_dot_d": 15, "web": 15, "bool": 15, "unpars": 15, "72": [15, 41], "internet": 15, "73": [15, 41], "37": [15, 28], "27": 15, "25": [15, 38], "22": [15, 25, 32, 37, 38], "2002": 15, "ioerror": 15, "download": 15, "pars": 15, "invalid": [15, 18, 31], "steven": 15, "sivek": 15, "best_linear_code_in_guava": [15, 32], "bounds_on_minimum_distance_in_guava": 15, "look": [15, 32, 34, 39], "libgap": [15, 25, 32], "loadpackag": 15, "bestknownlinearcod": 15, "cover": [15, 22, 24, 32], "somewher": 15, "greatest": [15, 28, 32], "record": [15, 32], "explan": 15, "displai": [15, 32], "cen": 15, "tjhai": 15, "brouwer": 15, "257": 15, "243": 15, "current": [15, 26, 32, 34, 39], "larger": [15, 26, 32], "gap_rec": 15, "rec": [15, 32], "shortenedcod": 15, "uuvcod": 15, "dualcod": 15, "repetitioncod": 15, "lowerbound": 15, "lowerboundexplan": 15, "upperboundexplan": 15, "in_test": 15, "iter": [15, 34], "complet": [15, 16, 26, 32], "recurs": 15, "01": [16, 32], "luca": [16, 19, 26, 27, 28, 30], "2015": [16, 18, 19], "06": [16, 23, 30], "29": [16, 24], "connected_encoder_nam": 16, "comparison": [16, 19], "__eq__": [16, 19, 32], "__ne__": [16, 19], "memori": [16, 19], "twice": [16, 19], "someth": [16, 19], "clever": [16, 19], "els": [16, 28, 36], "classmethod": 16, "decoder_typ": [16, 32, 36], "uninstanti": 16, "commonli": [16, 32], "descriptor": 16, "coars": 16, "reli": [16, 19, 32, 33, 34], "upon": 16, "logic": 16, "brief": 16, "succe": [16, 30, 32, 36], "closest": [16, 26], "dynam": [16, 32], "half": [16, 26, 32], "thereof": 16, "hard": [16, 24, 32], "decis": [16, 32], "promis": 16, "intern": [16, 26], "affect": 16, "run": [16, 27, 30, 32, 33, 38], "soft": 16, "reliabl": 16, "Such": [16, 18, 30, 32, 38], "linearcodesyndromedecod": [16, 17, 32], "necessari": 17, "rather": [17, 18, 30, 37, 38], "extendedcodeoriginalcodedecod": [17, 21], "subfield_subcod": [17, 40], "subfieldsubcodeoriginalcodedecod": [17, 40], "grsberlekampwelchdecod": [17, 24], "grserrorerasuredecod": [17, 24], "grsgaodecod": [17, 24], "grskeyequationsyndromedecod": [17, 24], "guruswami_sudan": [17, 26, 27, 28], "gs_decod": [17, 26], "grsguruswamisudandecod": [17, 26], "punctured_cod": [17, 20, 32, 36], "puncturedcodeoriginalcodedecod": [17, 36], "decoders_catalog": 17, "introduc": 18, "de1973": 18, "solver": [18, 26], "ppl": 18, "round": 18, "overflow": 18, "dmitrii": 18, "2021": 18, "charalampo": 18, "kokkali": 18, "delsarte_bound": 18, "return_data": 18, "isinteg": 18, "ilp": 18, "mixedintegerlinearprogram": 18, "q_matrix": 18, "val": 18, "get_valu": 18, "d_star": 18, "q_base": 18, "f_": 18, "formal": 18, "feasibl": 18, "70": [18, 26, 41], "stricter": 18, "43": [18, 28], "759": [18, 32], "2576": 18, "327680": 18, "improv": [18, 32], "150": 18, "win": 18, "tue": 18, "nl": 18, "aeb": 18, "html": [18, 32], "148": 18, "95": 18, "without": [18, 22, 30, 32, 34], "variabl": [18, 32, 37], "won": 18, "trick": 18, "151": 18, "86": 18, "eberlein_polynomi": 18, "binom": [18, 30, 32], "nonneg": 18, "risk": 18, "kravchuk_polynomi": 18, "tild": 18, "2224": 18, "12300": 18, "567785569973042442072": 18, "cannot": 19, "nie": [19, 26, 27, 28], "overwritten": 19, "partial": 19, "encodingerror": 19, "catch": 19, "outsid": 19, "random_vector": 19, "sensic": 19, "extendedcodeextendedmatrixencod": [20, 21], "grsevaluationvectorencod": [20, 24], "grsevaluationpolynomialencod": [20, 24], "puncturedcodepuncturedmatrixencod": [20, 36], "encoders_catalog": 20, "hat": 21, "x_": [21, 25], "pp": [21, 22, 24], "ce": 21, "original_cod": [21, 36, 40], "original_decod": [21, 36, 40], "gao": [21, 24, 36, 40], "four": 22, "ms2011": 22, "golay_cod": 22, "covering_radiu": [22, 24, 32], "radii": 22, "cd": [22, 24, 32], "immedi": 22, "anyth": [22, 30], "weight_distribut": [22, 24, 32], "mw": 22, "67": 22, "69": 22, "264": 22, "440": 22, "goppacodeencod": 23, "filip": 23, "ion": 23, "marketa": [23, 34], "slukova": [23, 34], "goppa_cod": 23, "generating_pol": 23, "narrow": 23, "2t": 23, "distance_bound": 23, "dm": 23, "alpha_1": 24, "alpha_n": 24, "mid": [24, 31, 35, 37], "deg": [24, 37], "alpha_i": [24, 37], "beta_1": [24, 37], "beta_n": 24, "vectori": [24, 37], "welch": 24, "recov": [24, 32], "locat": [24, 32], "system": [24, 26, 27, 32, 39], "hj2004": 24, "52": [24, 41], "berlekampwelch": 24, "lfloor": 24, "rfloor": 24, "step": [24, 26, 30], "previou": [24, 32], "errorerasur": 24, "word_and_erasure_vector": 24, "randint": 24, "imposs": 24, "exce": [24, 32], "capabl": [24, 30], "polynomial_r": [24, 37], "beta_i": 24, "evaluationpolynomi": [24, 37], "polynomialr": [24, 32, 37, 38], "fx": [24, 37], "high": 24, "proper": [24, 37], "qy": [24, 37], "qq": [24, 32, 37], "caution": [24, 35, 37], "thrown": [24, 33, 37], "undefin": [24, 37], "evaluationvector": [24, 37], "formula": [24, 32], "beta_j": 24, "alpha_": [24, 37], "vandermond": 24, "termin": [24, 30], "euclidean": 24, "ga02": 24, "183": 24, "195": 24, "evaluation_point": 24, "column_multipli": 24, "distinct": [24, 33], "evalpt": 24, "colmult": 24, "sagemath": [24, 32, 34], "effici": [24, 30], "computation": [24, 26], "156": 24, "_random_nonzero_el": 24, "is_gener": 24, "regular": [24, 31], "multipliers_product": 24, "wise": 24, "simpl": [24, 30, 32, 35], "cramer": 24, "rule": 24, "express": 24, "recal": 24, "parity_column_multipli": 24, "2100": 24, "6000": 24, "29250": 24, "61500": 24, "62200": 24, "unlik": 24, "wish": [24, 30, 34], "coerc": 24, "ccyc": 24, "64": [24, 32, 34], "2nd": 24, "beta": [24, 34], "multiplicative_ord": 24, "wrapper": [25, 26, 32], "nick": [25, 32], "alexand": [25, 32], "renam": [25, 32], "randomlinearcod": 25, "reedsolomon": 25, "comment": [25, 38], "sphinx": 25, "port": [25, 26, 27, 28], "qqr": 25, "proposit": [25, 26], "bm2003": 25, "block": [25, 26, 32, 33, 34, 38], "circul": 25, "x_i": [25, 27, 37], "y_1": 25, "y_": 25, "y_i": [25, 27], "2p": 25, "equiv": 25, "pmod": 25, "randomli": 25, "select": [25, 30], "gs1999": 26, "nie2013": 26, "interpolation_alg": 26, "root_find": 26, "beyond": 26, "sqrt": [26, 28, 32], "free": 26, "higher": [26, 28], "vice": 26, "versa": 26, "intens": 26, "sub": [26, 30, 32, 34], "linearalgebra": 26, "leeosullivan": 26, "sullivan": [26, 27], "chosen": [26, 30, 32, 36, 37], "rootfind": 26, "alekhnovich": 26, "rothruckenstein": 26, "roth": 26, "ruckenstein": 26, "neither": 26, "my_rootfind": 26, "maxd": 26, "default_valu": 26, "roth_ruckenstein_root_find": 26, "my_int": 26, "interpolation_point": 26, "s_and_l": 26, "wy": [26, 27], "gs_interpolation_linalg": [26, 27], "251": 26, "250": [26, 28], "97": 26, "rf": 26, "nativ": [26, 32], "gsd": 26, "105": 26, "gs_satisfactori": 26, "n_k": 26, "govern": 26, "118": 26, "47": [26, 29], "80": [26, 32], "guruswami_sudan_decoding_radiu": 26, "alongsid": [26, 32], "89": 26, "109": 26, "111": 26, "92": 26, "interpolation_algorithm": 26, "rememb": 26, "gs_interpolation_lee_osullivan": [26, 27], "0x": 26, "list_siz": 26, "parameters_given_tau": 26, "200": 26, "66": 26, "rootfinding_algorithm": 26, "alekhnovich_root_find": 26, "n_k_param": 26, "were": [26, 36, 38, 39], "explicit": 27, "xi": 27, "yi": 27, "param": 27, "lc": 27, "bivari": [27, 32], "_interpolation_max_weighted_deg": 27, "aris": 27, "is_zero": 27, "dqdx": 27, "dqdy": 27, "lee_osullivan_modul": 27, "analyt": 27, "straight": 27, "lagrang": 27, "sought": 27, "prod_": [27, 38], "p_i": 27, "easili": [27, 30, 34], "gilt": 28, "041": 28, "johnson_radiu": 28, "690": 28, "ligt": 28, "41": 28, "polynomial_to_list": 28, "solve_degree2_to_integer_rang": 28, "i_1": 28, "i_2": 28, "x_2": [28, 37], "ax": 28, "bx": 28, "empti": [28, 32, 38, 39], "neg": [28, 32, 39], "term": [28, 34], "hamming_cod": [29, 32], "57": [29, 32], "54": [29, 32, 41], "realli": 29, "48": [29, 32, 41], "dedic": 29, "paragraph": 29, "strategi": [30, 36], "tri": [30, 32, 36], "guess": 30, "numer": [30, 39], "exponenti": [30, 32, 34], "isd": 30, "deem": 30, "sometim": [30, 32], "nearest": [30, 32, 34], "rosenkild": 30, "yann": 30, "laigl": 30, "chapui": 30, "2016": [30, 32], "2017": 30, "informationsetalgorithm": 30, "decoding_interv": 30, "algorithm_nam": 30, "calibr": 30, "saniti": 30, "leebrickellisdalgorithm": 30, "brickel": 30, "minimalisd": 30, "_paramet": 30, "_time_estim": 30, "overridden": [30, 32], "_parameters_specifi": 30, "search_siz": 30, "sensibl": 30, "time_estim": 30, "0008162108571427874": 30, "paradigm": 30, "variant": 30, "lb1988": 30, "pet2010": 30, "success": 30, "r_": 30, "g_i": 30, "a_p": 30, "m_p": 30, "approxim": 30, "averag": 30, "trial": 30, "befor": [30, 32], "rho": 30, "fraction": 30, "bodi": 30, "roughli": 30, "few": 30, "similar": 30, "explicitli": [30, 32], "privat": [30, 33], "c_out": 30, "made": [30, 32], "emploi": 30, "match": 30, "easiest": [30, 38], "read": [30, 34], "princip": [30, 34], "d2": 30, "friendli": 30, "nosuchth": 30, "unknown": 30, "mostli": [30, 32, 34], "neighbor": 30, "infeas": 30, "known_algorithm": 30, "truncat": 31, "v_a": 31, "valid": 31, "2j": [31, 38], "bcn1989": 31, "358": 31, "kas1966a": 31, "kas1966b": 31, "kas1971": 31, "ivo": 31, "maffei": 31, "2020": 31, "kasami_cod": 31, "cext": 31, "complement": 32, "dimension": 32, "endow": 32, "central": 32, "retriev": 32, "studi": [32, 38], "former": 32, "latter": 32, "specialis": 32, "tab": [32, 34], "featur": [32, 34], "etc": [32, 33, 34], "subfamili": 32, "better": [32, 37], "unstructur": [32, 33, 34], "nonzero_posit": 32, "en": 32, "thematic_tutori": 32, "coding_theori": 32, "learn": 32, "structures_in_coding_theori": 32, "gu": 32, "inclus": 32, "04": 32, "08": [32, 34, 38], "hope": 32, "latex": 32, "trivialcod": 32, "subtl": 32, "galois_closur": 32, "mysteri": 32, "somehow": 32, "bounds_minimum_dist": 32, "assmus_mattson_design": 32, "assmu": 32, "mattson": 32, "syntax": 32, "is_galois_clos": 32, "linearcode_from_vectorspac": 32, "zeta_funct": 32, "characteristic_polynomi": 32, "binomial_mo": 32, "rewritten": 32, "zeta_function2": 32, "linearcodefromvectorspac": 32, "zeta_polynomi": 32, "weight_enumer": 32, "chinen_polynomi": 32, "best_known_cod": 32, "revis": 32, "is_equival": 32, "harald": 32, "schilli": 32, "mike": 32, "hansen": 32, "standard_form": [32, 33], "delet": 32, "zeta_function3": 32, "automorphism_group_binary_cod": [32, 38], "direct_sum_cod": 32, "is_subcod": [32, 33], "is_self_du": [32, 33], "redundancy_matrix": [32, 33], "did": 32, "reorgan": 32, "readabl": [32, 38], "caus": 32, "crash": 32, "misbehav": 32, "cj": 32, "tjhal": 32, "minimumweight": 32, "char": 32, "min_dist": 32, "is_permutation_equival": 32, "module_decod": 32, "2010": [32, 39], "generator_matrix_systemat": 32, "information_set": [32, 33], "magma": 32, "nile": 32, "3893": 32, "13723": 32, "deprec": 32, "2013": 32, "quit": 32, "encourag": 32, "__hash__": 32, "lot": [32, 33, 34], "mode": 32, "303": 32, "a_0": [32, 38], "wt": 32, "repeat": 32, "steiner": 32, "supp": 32, "confus": 32, "dim": [32, 38], "ai": 32, "binomi": 32, "294": 32, "out": 32, "extran": 32, "ie": 32, "hypothes": 32, "command": [32, 38], "illustr": 32, "78": 32, "automorphism_group_gen": 32, "act": 32, "prng": 32, "re": 32, "seed": 32, "set_se": 32, "lib": 32, "endomorph": 32, "362880": 32, "181440": 32, "moment": 32, "k_": 32, "normal": 32, "isomorph": 32, "35": [32, 41], "du2004": 32, "canonical_repres": 32, "onto": 32, "canrep": 32, "transp": 32, "hom": 32, "c_iso": 32, "canrep_iso": 32, "yield": [32, 34], "canrep1": 32, "canrep2": 32, "2816": 32, "chinen": 32, "paper": 32, "abund": 32, "riemann": [32, 38], "hypothesi": [32, 38], "april": 32, "preprint": 32, "construction_x": 32, "aux": 32, "c_2": 32, "c_a": 32, "k_1": 32, "d_1": 32, "k_2": 32, "d_2": 32, "n_a": 32, "k_a": 32, "d_a": 32, "cx": 32, "cosetgraph": 32, "adjac": 32, "is_distance_regular": 32, "direct": 32, "newli": 32, "e_i": 32, "263": 32, "direct_sum": 32, "nonzero": 32, "ii": [32, 38], "f0": 32, "f_0": 32, "galoi": 32, "gal": 32, "genu": 32, "duursma": 32, "gamma_c": 32, "closur": 32, "doubl": [32, 38], "is_project": 32, "linearli": 32, "bs2011": 32, "bh2012": 32, "juxtapos": 32, "juxtaposit": 32, "recomput": 32, "setallinfolevel": 32, "suppress": 32, "module_composition_factor": 32, "gp": [32, 38], "meatax": 32, "isirreduc": 32, "isoverfinitefield": 32, "matrixautomorph": 32, "breuer": 32, "combin": [32, 36], "mine": 32, "suggest": 32, "cari": 32, "stage": 32, "144": 32, "gg": 32, "easi": 32, "mathieu": 32, "m_": 32, "m11": 32, "mathieugroup": 32, "7920": 32, "math": [32, 38], "2011": 32, "is_isomorph": 32, "244823040": 32, "9999360": 32, "132": [32, 41], "330": 32, "110": 32, "supergroup": 32, "39916800": 32, "product_cod": 32, "tensor": 32, "n_1": 32, "n_2": 32, "n_1n_2": 32, "k_1k_2": 32, "d_1d_2": 32, "relative_dist": 32, "ratio": [32, 33], "c_l": 32, "therein": 32, "warn": 32, "smash": 32, "appear": 32, "much": 32, "faster": [32, 34], "slower": 32, "a_j": 32, "u_u_plus_v_cod": 32, "2n": 32, "2d_1": 32, "homogen": 32, "xy": 32, "comma": 32, "st": 32, "var1": 32, "var2": 32, "stdout": 32, "429": 32, "143": [32, 41], "hexacod": 32, "du2001": 32, "verac": 32, "base_r": 32, "20198": 32, "charl": 32, "prior": 32, "_generator_matrix": [32, 34], "maximum_error_weight": 32, "lookup": 32, "pattern": 32, "whenev": 32, "pre": 32, "subtract": 32, "queri": 32, "after": 32, "afterward": 32, "notic": 32, "compar": 32, "influenc": 32, "bounded_dist": 32, "sure": 32, "But": 32, "third": 32, "unexpect": 32, "seem": [32, 38], "slightli": 32, "surpris": 32, "syndrome_t": 32, "myabstractcod": 33, "_generic_constructor": 33, "suit": 33, "testsuit": 33, "immut": 33, "univers": 33, "cdot": 33, "is_information_set": 33, "is_permutation_automorph": 33, "s8": 33, "g1": 33, "g2": 33, "matrix_from_row": 33, "c5": 33, "cperp": 33, "permuted_cod": 33, "remain": 33, "return_permut": 33, "admit": 33, "lead": 33, "bring": 33, "fine": 33, "request": 33, "reduc": 33, "echelon": 33, "concret": 33, "onc": [33, 36, 38, 39], "serv": 33, "kernel": 33, "0th": 33, "1st": 33, "demonstr": 33, "usag": 33, "lcse": 33, "e2": [33, 37], "e3": 33, "exemplifi": 33, "repetit": 33, "dualrepetitioncod": 33, "badcodefamili": 33, "am": 33, "badli": 33, "systematic_permut": 33, "shape": 33, "carri": 33, "po": 33, "linear_rank_metr": 34, "to_matrix_represent": 34, "from_matrix_represent": 34, "big": 34, "c_hamm": 34, "swap": 34, "sub_field": 34, "intend": 34, "to_matrix": 34, "go": 34, "from_matrix": 34, "extension_degre": 34, "field_extens": 34, "z2": 34, "matrix_form_of_vector": 34, "rank_distance_between_vector": 34, "rank_weight_of_vector": 34, "vector_form_of_matrix": 34, "z6": 34, "linearrankmetriccodenearestneighbordecod": 34, "sm": 34, "rank_dist": 34, "rank_weight": 34, "b_1": 34, "b_2": 34, "b_m": 34, "u_1": 34, "u_2": 34, "u_m": 34, "u_i": 34, "devic": 35, "digit": 35, "wel1988": 35, "parity_check_cod": 35, "paritycheckcodegeneratormatrixencod": 35, "paritycheckcodestraightforwardencod": 35, "append": [35, 39], "opposit": 35, "ambiant": 35, "cp": 36, "original_encod": 36, "avoid": 36, "c_origin": 36, "punctured_posit": 36, "trigger": 36, "agr": 36, "free_modul": 36, "structured_represent": 36, "c_gr": 36, "cp_gr": 36, "39": [36, 39, 41], "structureless": 36, "c_lin": 36, "cp_lin": 36, "preced": 36, "blank": 36, "forc": 36, "contradictori": 36, "dor": 36, "x_m": 37, "qaryreedmullercod": 37, "reedmullervectorencod": 37, "reedmullerpolynomialencod": 37, "reed_muller_cod": 37, "num_of_var": 37, "aforement": 37, "number_of_vari": 37, "375": 37, "multivari": 37, "lowest": 37, "beta_2": 37, "beta_q": 37, "1m": 37, "2m": 37, "m1": 37, "m2": 37, "mm": 37, "ij": 37, "beta_": 37, "bmod": 37, "e1": 37, "predefin": 37, "x0": 37, "x1": 37, "wrong": 37, "y1": 37, "y2": 37, "x2": 37, "x3": 37, "v_k": 37, "self_dual_binary_cod": 38, "autgp": 38, "sd": 38, "human": 38, "updat": 38, "consum": 38, "trace": 38, "c0": 38, "sd_zeta_polynomi": 38, "707106781186548": 38, "naiv": 38, "a_m": 38, "m_r": 38, "diag": 38, "i_": 38, "count": [38, 39], "pless": 38, "347": 38, "fundament": 38, "cambridg": 38, "univ": 38, "press": 38, "2003": 38, "classif": 38, "1972": 38, "209": 38, "246": 38, "self_dual_cod": 38, "inequival": 38, "perm": 38, "conjectur": 38, "infti": 38, "prod": 38, "coeff": 38, "56": [38, 41], "77": 38, "101": [38, 39], "135": 38, "231": 38, "grow": 38, "slowli": 38, "account": 38, "referenc": 38, "b_n": 38, "103": 38, "261": 38, "731": 38, "oei": 38, "a003179": 38, "3295": 38, "24147": 38, "inequiv": 38, "nathann": 39, "cohen": 39, "source_cod": 39, "occurr": 39, "frequenc": 39, "feed": 39, "signific": 39, "implic": 39, "subsequ": 39, "frequency_t": 39, "h1": 39, "french": 39, "fry": 39, "encoding_t": 39, "00": 39, "11100": 39, "0111": 39, "1010": 39, "1011": 39, "1100": 39, "1101": 39, "11101": 39, "010": 39, "11110": 39, "11111": 39, "0110": 39, "train": 39, "ft": 39, "h2": 39, "possess": 39, "11100110010001010000111011101101010000111110111111100001110010110101001101101011000010110100110": 39, "obvious": 39, "sampl": 39, "h3": 39, "fri": 39, "eierhffcoeft": 39, "tfewrnwrtrsc": 39, "assign": 39, "deaf": 39, "bead": 39, "fab": 39, "bee": 39, "111110101100": 39, "10111010111": 39, "11000101": 39, "10111011101": 39, "str": 39, "my": 39, "favorit": 39, "11000011010001010101100001111101001110011101001101101111011110111001111010000101101110100000111010101000101000000010111011011000110100101001011100010011011110101011100100110001100101001001110101110101110110001000101011000111101101101111110011111101110100011": 39, "110000": 39, "110001": 39, "110010": 39, "0001": 39, "10000": 39, "10001": 39, "0011": 39, "00000": 39, "0010": 39, "1110": 39, "10010": 39, "00001": 39, "10011": 39, "digraph": 39, "figsiz": 39, "stop": 39, "charact": 39, "defaultdict": 39, "int": 39, "come": 40, "aa": 40, "dimension_lower_bound": 40, "eric": 41, "chen": 41, "chendb": 41, "axel": 41, "kohnert": 41, "koh2007": 41, "alfr": 41, "wassermann": 41, "219": 41, "96": 41, "112": 41, "198": 41, "84": 41, "98": 41, "126": 41, "81": 41, "90": 41, "140": 41, "99": 41, "154": 41, "108": 41, "117": 41, "di2000": 41, "121": 41, "88": 41, "104": 41, "bouyukliev": 41, "simoni": 41, "bs2003": 41, "65": 41}, "objects": {"sage.coding": [[1, 0, 0, "-", "abstract_code"], [2, 0, 0, "-", "ag_code"], [3, 0, 0, "-", "ag_code_decoders"], [4, 0, 0, "-", "bch_code"], [5, 0, 0, "-", "binary_code"], [6, 0, 0, "-", "bounds_catalog"], [7, 0, 0, "-", "channel"], [8, 0, 0, "-", "channels_catalog"], [9, 0, 0, "-", "code_bounds"], [10, 0, 0, "-", "code_constructions"], [13, 0, 0, "-", "codes_catalog"], [14, 0, 0, "-", "cyclic_code"], [15, 0, 0, "-", "databases"], [16, 0, 0, "-", "decoder"], [17, 0, 0, "-", "decoders_catalog"], [18, 0, 0, "-", "delsarte_bounds"], [19, 0, 0, "-", "encoder"], [20, 0, 0, "-", "encoders_catalog"], [21, 0, 0, "-", "extended_code"], [22, 0, 0, "-", "golay_code"], [23, 0, 0, "-", "goppa_code"], [24, 0, 0, "-", "grs_code"], [25, 0, 0, "-", "guava"], [29, 0, 0, "-", "hamming_code"], [30, 0, 0, "-", "information_set_decoder"], [31, 0, 0, "-", "kasami_codes"], [32, 0, 0, "-", "linear_code"], [33, 0, 0, "-", "linear_code_no_metric"], [34, 0, 0, "-", "linear_rank_metric"], [35, 0, 0, "-", "parity_check_code"], [36, 0, 0, "-", "punctured_code"], [37, 0, 0, "-", "reed_muller_code"], [38, 0, 0, "-", "self_dual_codes"], [40, 0, 0, "-", "subfield_subcode"], [41, 0, 0, "-", "two_weight_db"]], "sage.coding.abstract_code": [[1, 1, 1, "", "AbstractCode"]], "sage.coding.abstract_code.AbstractCode": [[1, 2, 1, "", "add_decoder"], [1, 2, 1, "", "add_encoder"], [1, 2, 1, "", "ambient_space"], [1, 2, 1, "", "decode_to_code"], [1, 2, 1, "", "decode_to_message"], [1, 2, 1, "", "decoder"], [1, 2, 1, "", "decoders_available"], [1, 2, 1, "", "encode"], [1, 2, 1, "", "encoder"], [1, 2, 1, "", "encoders_available"], [1, 2, 1, "", "length"], [1, 2, 1, "", "list"], [1, 2, 1, "", "metric"], [1, 2, 1, "", "random_element"], [1, 2, 1, "", "unencode"]], "sage.coding.ag_code": [[2, 1, 1, "", "AGCode"], [2, 1, 1, "", "CartierCode"], [2, 1, 1, "", "DifferentialAGCode"], [2, 1, 1, "", "EvaluationAGCode"]], "sage.coding.ag_code.AGCode": [[2, 2, 1, "", "base_function_field"]], "sage.coding.ag_code.CartierCode": [[2, 2, 1, "", "designed_distance"], [2, 2, 1, "", "generator_matrix"]], "sage.coding.ag_code.DifferentialAGCode": [[2, 2, 1, "", "basis_differentials"], [2, 2, 1, "", "designed_distance"], [2, 2, 1, "", "generator_matrix"]], "sage.coding.ag_code.EvaluationAGCode": [[2, 2, 1, "", "basis_functions"], [2, 2, 1, "", "designed_distance"], [2, 2, 1, "", "generator_matrix"]], "sage.coding.ag_code_decoders": [[3, 1, 1, "", "Decoder_K"], [3, 1, 1, "", "Decoder_K_extension"], [3, 1, 1, "", "DifferentialAGCodeDecoder_K"], [3, 1, 1, "", "DifferentialAGCodeDecoder_K_extension"], [3, 1, 1, "", "DifferentialAGCodeEncoder"], [3, 1, 1, "", "DifferentialAGCodeUniqueDecoder"], [3, 1, 1, "", "EvaluationAGCodeDecoder_K"], [3, 1, 1, "", "EvaluationAGCodeDecoder_K_extension"], [3, 1, 1, "", "EvaluationAGCodeEncoder"], [3, 1, 1, "", "EvaluationAGCodeUniqueDecoder"]], "sage.coding.ag_code_decoders.Decoder_K": [[3, 2, 1, "", "decode"], [3, 2, 1, "", "encode"], [3, 3, 1, "", "info"]], "sage.coding.ag_code_decoders.Decoder_K_extension": [[3, 2, 1, "", "decode"], [3, 2, 1, "", "encode"], [3, 3, 1, "", "info"]], "sage.coding.ag_code_decoders.DifferentialAGCodeEncoder": [[3, 2, 1, "", "encode"], [3, 2, 1, "", "unencode_nocheck"]], "sage.coding.ag_code_decoders.DifferentialAGCodeUniqueDecoder": [[3, 2, 1, "", "connected_encoder"], [3, 2, 1, "", "decode_to_code"], [3, 2, 1, "", "decode_to_message"], [3, 2, 1, "", "decoding_radius"]], "sage.coding.ag_code_decoders.EvaluationAGCodeEncoder": [[3, 2, 1, "", "encode"], [3, 2, 1, "", "unencode_nocheck"]], "sage.coding.ag_code_decoders.EvaluationAGCodeUniqueDecoder": [[3, 2, 1, "", "connected_encoder"], [3, 2, 1, "", "decode_to_code"], [3, 2, 1, "", "decode_to_message"], [3, 2, 1, "", "decoding_radius"]], "sage.coding.bch_code": [[4, 1, 1, "", "BCHCode"], [4, 1, 1, "", "BCHUnderlyingGRSDecoder"]], "sage.coding.bch_code.BCHCode": [[4, 2, 1, "", "bch_to_grs"], [4, 2, 1, "", "designed_distance"], [4, 2, 1, "", "jump_size"], [4, 2, 1, "", "offset"]], "sage.coding.bch_code.BCHUnderlyingGRSDecoder": [[4, 2, 1, "", "bch_word_to_grs"], [4, 2, 1, "", "decode_to_code"], [4, 2, 1, "", "decoding_radius"], [4, 2, 1, "", "grs_code"], [4, 2, 1, "", "grs_decoder"], [4, 2, 1, "", "grs_word_to_bch"]], "sage.coding.binary_code": [[5, 1, 1, "", "BinaryCode"], [5, 1, 1, "", "BinaryCodeClassifier"], [5, 1, 1, "", "OrbitPartition"], [5, 1, 1, "", "PartitionStack"], [5, 4, 1, "", "test_expand_to_ortho_basis"], [5, 4, 1, "", "test_word_perms"], [5, 4, 1, "", "weight_dist"]], "sage.coding.binary_code.BinaryCode": [[5, 2, 1, "", "apply_permutation"], [5, 2, 1, "", "matrix"], [5, 2, 1, "", "print_data"], [5, 2, 1, "", "put_in_std_form"]], "sage.coding.binary_code.BinaryCodeClassifier": [[5, 2, 1, "", "generate_children"], [5, 2, 1, "", "put_in_canonical_form"]], "sage.coding.binary_code.PartitionStack": [[5, 2, 1, "", "cmp"], [5, 2, 1, "", "print_basis"], [5, 2, 1, "", "print_data"]], "sage.coding.channel": [[7, 1, 1, "", "Channel"], [7, 1, 1, "", "ErrorErasureChannel"], [7, 1, 1, "", "QarySymmetricChannel"], [7, 1, 1, "", "StaticErrorRateChannel"], [7, 4, 1, "", "format_interval"], [7, 4, 1, "", "random_error_vector"]], "sage.coding.channel.Channel": [[7, 2, 1, "", "input_space"], [7, 2, 1, "", "output_space"], [7, 2, 1, "", "transmit"], [7, 2, 1, "", "transmit_unsafe"]], "sage.coding.channel.ErrorErasureChannel": [[7, 2, 1, "", "number_erasures"], [7, 2, 1, "", "number_errors"], [7, 2, 1, "", "transmit_unsafe"]], "sage.coding.channel.QarySymmetricChannel": [[7, 2, 1, "", "error_probability"], [7, 2, 1, "", "probability_of_at_most_t_errors"], [7, 2, 1, "", "probability_of_exactly_t_errors"], [7, 2, 1, "", "transmit_unsafe"]], "sage.coding.channel.StaticErrorRateChannel": [[7, 2, 1, "", "number_errors"], [7, 2, 1, "", "transmit_unsafe"]], "sage.coding.code_bounds": [[9, 4, 1, "", "codesize_upper_bound"], [9, 4, 1, "", "dimension_upper_bound"], [9, 4, 1, "", "elias_bound_asymp"], [9, 4, 1, "", "elias_upper_bound"], [9, 4, 1, "", "entropy"], [9, 4, 1, "", "entropy_inverse"], [9, 4, 1, "", "gilbert_lower_bound"], [9, 4, 1, "", "griesmer_upper_bound"], [9, 4, 1, "", "gv_bound_asymp"], [9, 4, 1, "", "gv_info_rate"], [9, 4, 1, "", "hamming_bound_asymp"], [9, 4, 1, "", "hamming_upper_bound"], [9, 4, 1, "", "mrrw1_bound_asymp"], [9, 4, 1, "", "plotkin_bound_asymp"], [9, 4, 1, "", "plotkin_upper_bound"], [9, 4, 1, "", "singleton_bound_asymp"], [9, 4, 1, "", "singleton_upper_bound"], [9, 4, 1, "", "volume_hamming"]], "sage.coding.code_constructions": [[10, 4, 1, "", "DuadicCodeEvenPair"], [10, 4, 1, "", "DuadicCodeOddPair"], [10, 4, 1, "", "ExtendedQuadraticResidueCode"], [10, 4, 1, "", "QuadraticResidueCode"], [10, 4, 1, "", "QuadraticResidueCodeEvenPair"], [10, 4, 1, "", "QuadraticResidueCodeOddPair"], [10, 4, 1, "", "ToricCode"], [10, 4, 1, "", "WalshCode"], [10, 4, 1, "", "from_parity_check_matrix"], [10, 4, 1, "", "permutation_action"], [10, 4, 1, "", "random_linear_code"], [10, 4, 1, "", "walsh_matrix"]], "sage.coding.codecan": [[11, 0, 0, "-", "autgroup_can_label"], [12, 0, 0, "-", "codecan"]], "sage.coding.codecan.autgroup_can_label": [[11, 1, 1, "", "LinearCodeAutGroupCanLabel"]], "sage.coding.codecan.autgroup_can_label.LinearCodeAutGroupCanLabel": [[11, 2, 1, "", "get_PGammaL_gens"], [11, 2, 1, "", "get_PGammaL_order"], [11, 2, 1, "", "get_autom_gens"], [11, 2, 1, "", "get_autom_order"], [11, 2, 1, "", "get_canonical_form"], [11, 2, 1, "", "get_transporter"]], "sage.coding.codecan.codecan": [[12, 1, 1, "", "InnerGroup"], [12, 1, 1, "", "PartitionRefinementLinearCode"]], "sage.coding.codecan.codecan.InnerGroup": [[12, 2, 1, "", "column_blocks"], [12, 2, 1, "", "get_frob_pow"]], "sage.coding.codecan.codecan.PartitionRefinementLinearCode": [[12, 2, 1, "", "get_autom_gens"], [12, 2, 1, "", "get_autom_order_inner_stabilizer"], [12, 2, 1, "", "get_canonical_form"], [12, 2, 1, "", "get_transporter"]], "sage.coding.cyclic_code": [[14, 1, 1, "", "CyclicCode"], [14, 1, 1, "", "CyclicCodePolynomialEncoder"], [14, 1, 1, "", "CyclicCodeSurroundingBCHDecoder"], [14, 1, 1, "", "CyclicCodeVectorEncoder"], [14, 4, 1, "", "bch_bound"], [14, 4, 1, "", "find_generator_polynomial"]], "sage.coding.cyclic_code.CyclicCode": [[14, 2, 1, "", "bch_bound"], [14, 2, 1, "", "check_polynomial"], [14, 2, 1, "", "defining_set"], [14, 2, 1, "", "field_embedding"], [14, 2, 1, "", "generator_polynomial"], [14, 2, 1, "", "parity_check_matrix"], [14, 2, 1, "", "primitive_root"], [14, 2, 1, "", "surrounding_bch_code"]], "sage.coding.cyclic_code.CyclicCodePolynomialEncoder": [[14, 2, 1, "", "encode"], [14, 2, 1, "", "message_space"], [14, 2, 1, "", "unencode_nocheck"]], "sage.coding.cyclic_code.CyclicCodeSurroundingBCHDecoder": [[14, 2, 1, "", "bch_code"], [14, 2, 1, "", "bch_decoder"], [14, 2, 1, "", "decode_to_code"], [14, 2, 1, "", "decoding_radius"]], "sage.coding.cyclic_code.CyclicCodeVectorEncoder": [[14, 2, 1, "", "encode"], [14, 2, 1, "", "generator_matrix"], [14, 2, 1, "", "message_space"], [14, 2, 1, "", "unencode_nocheck"]], "sage.coding.databases": [[15, 4, 1, "", "best_linear_code_in_codetables_dot_de"], [15, 4, 1, "", "best_linear_code_in_guava"], [15, 4, 1, "", "bounds_on_minimum_distance_in_guava"], [15, 4, 1, "", "self_orthogonal_binary_codes"]], "sage.coding.decoder": [[16, 1, 1, "", "Decoder"], [16, 5, 1, "", "DecodingError"]], "sage.coding.decoder.Decoder": [[16, 2, 1, "", "code"], [16, 2, 1, "", "connected_encoder"], [16, 2, 1, "", "decode_to_code"], [16, 2, 1, "", "decode_to_message"], [16, 2, 1, "", "decoder_type"], [16, 2, 1, "", "decoding_radius"], [16, 2, 1, "", "input_space"], [16, 2, 1, "", "message_space"]], "sage.coding.delsarte_bounds": [[18, 4, 1, "", "delsarte_bound_Q_matrix"], [18, 4, 1, "", "delsarte_bound_additive_hamming_space"], [18, 4, 1, "", "delsarte_bound_constant_weight_code"], [18, 4, 1, "", "delsarte_bound_hamming_space"], [18, 4, 1, "", "eberlein"], [18, 4, 1, "", "krawtchouk"]], "sage.coding.encoder": [[19, 1, 1, "", "Encoder"], [19, 5, 1, "", "EncodingError"]], "sage.coding.encoder.Encoder": [[19, 2, 1, "", "code"], [19, 2, 1, "", "encode"], [19, 2, 1, "", "generator_matrix"], [19, 2, 1, "", "message_space"], [19, 2, 1, "", "unencode"], [19, 2, 1, "", "unencode_nocheck"]], "sage.coding.extended_code": [[21, 1, 1, "", "ExtendedCode"], [21, 1, 1, "", "ExtendedCodeExtendedMatrixEncoder"], [21, 1, 1, "", "ExtendedCodeOriginalCodeDecoder"]], "sage.coding.extended_code.ExtendedCode": [[21, 2, 1, "", "original_code"], [21, 2, 1, "", "parity_check_matrix"], [21, 2, 1, "", "random_element"]], "sage.coding.extended_code.ExtendedCodeExtendedMatrixEncoder": [[21, 2, 1, "", "generator_matrix"]], "sage.coding.extended_code.ExtendedCodeOriginalCodeDecoder": [[21, 2, 1, "", "decode_to_code"], [21, 2, 1, "", "decoding_radius"], [21, 2, 1, "", "original_decoder"]], "sage.coding.golay_code": [[22, 1, 1, "", "GolayCode"]], "sage.coding.golay_code.GolayCode": [[22, 2, 1, "", "covering_radius"], [22, 2, 1, "", "dual_code"], [22, 2, 1, "", "generator_matrix"], [22, 2, 1, "", "minimum_distance"], [22, 2, 1, "", "parity_check_matrix"], [22, 2, 1, "", "weight_distribution"]], "sage.coding.goppa_code": [[23, 1, 1, "", "GoppaCode"], [23, 1, 1, "", "GoppaCodeEncoder"]], "sage.coding.goppa_code.GoppaCode": [[23, 2, 1, "", "distance_bound"], [23, 2, 1, "", "parity_check_matrix"]], "sage.coding.goppa_code.GoppaCodeEncoder": [[23, 2, 1, "", "generator_matrix"]], "sage.coding.grs_code": [[24, 1, 1, "", "GRSBerlekampWelchDecoder"], [24, 1, 1, "", "GRSErrorErasureDecoder"], [24, 1, 1, "", "GRSEvaluationPolynomialEncoder"], [24, 1, 1, "", "GRSEvaluationVectorEncoder"], [24, 1, 1, "", "GRSGaoDecoder"], [24, 1, 1, "", "GRSKeyEquationSyndromeDecoder"], [24, 1, 1, "", "GeneralizedReedSolomonCode"], [24, 4, 1, "", "ReedSolomonCode"]], "sage.coding.grs_code.GRSBerlekampWelchDecoder": [[24, 2, 1, "", "decode_to_code"], [24, 2, 1, "", "decode_to_message"], [24, 2, 1, "", "decoding_radius"]], "sage.coding.grs_code.GRSErrorErasureDecoder": [[24, 2, 1, "", "decode_to_message"], [24, 2, 1, "", "decoding_radius"]], "sage.coding.grs_code.GRSEvaluationPolynomialEncoder": [[24, 2, 1, "", "encode"], [24, 2, 1, "", "message_space"], [24, 2, 1, "", "polynomial_ring"], [24, 2, 1, "", "unencode_nocheck"]], "sage.coding.grs_code.GRSEvaluationVectorEncoder": [[24, 2, 1, "", "generator_matrix"]], "sage.coding.grs_code.GRSGaoDecoder": [[24, 2, 1, "", "decode_to_code"], [24, 2, 1, "", "decode_to_message"], [24, 2, 1, "", "decoding_radius"]], "sage.coding.grs_code.GRSKeyEquationSyndromeDecoder": [[24, 2, 1, "", "decode_to_code"], [24, 2, 1, "", "decode_to_message"], [24, 2, 1, "", "decoding_radius"]], "sage.coding.grs_code.GeneralizedReedSolomonCode": [[24, 2, 1, "", "column_multipliers"], [24, 2, 1, "", "covering_radius"], [24, 2, 1, "", "dual_code"], [24, 2, 1, "", "evaluation_points"], [24, 2, 1, "", "is_generalized"], [24, 2, 1, "", "minimum_distance"], [24, 2, 1, "", "multipliers_product"], [24, 2, 1, "", "parity_check_matrix"], [24, 2, 1, "", "parity_column_multipliers"], [24, 2, 1, "", "weight_distribution"]], "sage.coding.guava": [[25, 4, 1, "", "QuasiQuadraticResidueCode"], [25, 4, 1, "", "RandomLinearCodeGuava"]], "sage.coding.guruswami_sudan": [[26, 0, 0, "-", "gs_decoder"], [27, 0, 0, "-", "interpolation"], [28, 0, 0, "-", "utils"]], "sage.coding.guruswami_sudan.gs_decoder": [[26, 1, 1, "", "GRSGuruswamiSudanDecoder"], [26, 4, 1, "", "alekhnovich_root_finder"], [26, 4, 1, "", "n_k_params"], [26, 4, 1, "", "roth_ruckenstein_root_finder"]], "sage.coding.guruswami_sudan.gs_decoder.GRSGuruswamiSudanDecoder": [[26, 2, 1, "", "decode_to_code"], [26, 2, 1, "", "decode_to_message"], [26, 2, 1, "", "decoding_radius"], [26, 2, 1, "", "gs_satisfactory"], [26, 2, 1, "", "guruswami_sudan_decoding_radius"], [26, 2, 1, "", "interpolation_algorithm"], [26, 2, 1, "", "list_size"], [26, 2, 1, "", "multiplicity"], [26, 2, 1, "", "parameters"], [26, 2, 1, "", "parameters_given_tau"], [26, 2, 1, "", "rootfinding_algorithm"]], "sage.coding.guruswami_sudan.interpolation": [[27, 4, 1, "", "gs_interpolation_lee_osullivan"], [27, 4, 1, "", "gs_interpolation_linalg"], [27, 4, 1, "", "lee_osullivan_module"]], "sage.coding.guruswami_sudan.utils": [[28, 4, 1, "", "gilt"], [28, 4, 1, "", "johnson_radius"], [28, 4, 1, "", "ligt"], [28, 4, 1, "", "polynomial_to_list"], [28, 4, 1, "", "solve_degree2_to_integer_range"]], "sage.coding.hamming_code": [[29, 1, 1, "", "HammingCode"]], "sage.coding.hamming_code.HammingCode": [[29, 2, 1, "", "minimum_distance"], [29, 2, 1, "", "parity_check_matrix"]], "sage.coding.information_set_decoder": [[30, 1, 1, "", "InformationSetAlgorithm"], [30, 1, 1, "", "LeeBrickellISDAlgorithm"], [30, 1, 1, "", "LinearCodeInformationSetDecoder"]], "sage.coding.information_set_decoder.InformationSetAlgorithm": [[30, 2, 1, "", "calibrate"], [30, 2, 1, "", "code"], [30, 2, 1, "", "decode"], [30, 2, 1, "", "decoding_interval"], [30, 2, 1, "", "name"], [30, 2, 1, "", "parameters"], [30, 2, 1, "", "time_estimate"]], "sage.coding.information_set_decoder.LeeBrickellISDAlgorithm": [[30, 2, 1, "", "calibrate"], [30, 2, 1, "", "decode"]], "sage.coding.information_set_decoder.LinearCodeInformationSetDecoder": [[30, 2, 1, "", "algorithm"], [30, 2, 1, "", "decode_to_code"], [30, 2, 1, "", "decoding_interval"], [30, 2, 1, "", "decoding_radius"], [30, 2, 1, "", "known_algorithms"]], "sage.coding.kasami_codes": [[31, 1, 1, "", "KasamiCode"]], "sage.coding.kasami_codes.KasamiCode": [[31, 2, 1, "", "generator_matrix"], [31, 2, 1, "", "parameters"]], "sage.coding.linear_code": [[32, 1, 1, "", "AbstractLinearCode"], [32, 1, 1, "", "LinearCode"], [32, 1, 1, "", "LinearCodeGeneratorMatrixEncoder"], [32, 1, 1, "", "LinearCodeNearestNeighborDecoder"], [32, 1, 1, "", "LinearCodeSyndromeDecoder"]], "sage.coding.linear_code.AbstractLinearCode": [[32, 2, 1, "", "assmus_mattson_designs"], [32, 2, 1, "", "automorphism_group_gens"], [32, 2, 1, "", "binomial_moment"], [32, 2, 1, "", "canonical_representative"], [32, 2, 1, "", "characteristic"], [32, 2, 1, "", "characteristic_polynomial"], [32, 2, 1, "", "chinen_polynomial"], [32, 2, 1, "", "construction_x"], [32, 2, 1, "", "cosetGraph"], [32, 2, 1, "", "covering_radius"], [32, 2, 1, "", "direct_sum"], [32, 2, 1, "", "divisor"], [32, 2, 1, "", "extended_code"], [32, 2, 1, "", "galois_closure"], [32, 2, 1, "", "genus"], [32, 2, 1, "", "is_galois_closed"], [32, 2, 1, "", "is_permutation_equivalent"], [32, 2, 1, "", "is_projective"], [32, 2, 1, "", "juxtapose"], [32, 2, 1, "", "minimum_distance"], [32, 2, 1, "", "module_composition_factors"], [32, 2, 1, "", "permutation_automorphism_group"], [32, 2, 1, "", "product_code"], [32, 2, 1, "", "punctured"], [32, 2, 1, "", "relative_distance"], [32, 2, 1, "", "shortened"], [32, 2, 1, "", "spectrum"], [32, 2, 1, "", "support"], [32, 2, 1, "", "u_u_plus_v_code"], [32, 2, 1, "", "weight_distribution"], [32, 2, 1, "", "weight_enumerator"], [32, 2, 1, "", "zeta_function"], [32, 2, 1, "", "zeta_polynomial"]], "sage.coding.linear_code.LinearCode": [[32, 2, 1, "", "generator_matrix"]], "sage.coding.linear_code.LinearCodeGeneratorMatrixEncoder": [[32, 2, 1, "", "generator_matrix"]], "sage.coding.linear_code.LinearCodeNearestNeighborDecoder": [[32, 2, 1, "", "decode_to_code"], [32, 2, 1, "", "decoding_radius"]], "sage.coding.linear_code.LinearCodeSyndromeDecoder": [[32, 2, 1, "", "decode_to_code"], [32, 2, 1, "", "decoding_radius"], [32, 2, 1, "", "maximum_error_weight"], [32, 2, 1, "", "syndrome_table"]], "sage.coding.linear_code_no_metric": [[33, 1, 1, "", "AbstractLinearCodeNoMetric"], [33, 1, 1, "", "LinearCodeSystematicEncoder"]], "sage.coding.linear_code_no_metric.AbstractLinearCodeNoMetric": [[33, 2, 1, "", "ambient_space"], [33, 2, 1, "", "base_field"], [33, 2, 1, "", "basis"], [33, 2, 1, "", "cardinality"], [33, 2, 1, "", "dimension"], [33, 2, 1, "", "dual_code"], [33, 2, 1, "", "generator_matrix"], [33, 2, 1, "", "gens"], [33, 2, 1, "", "information_set"], [33, 2, 1, "", "is_information_set"], [33, 2, 1, "", "is_permutation_automorphism"], [33, 2, 1, "", "is_self_dual"], [33, 2, 1, "", "is_self_orthogonal"], [33, 2, 1, "", "is_subcode"], [33, 2, 1, "", "parity_check_matrix"], [33, 2, 1, "", "permuted_code"], [33, 2, 1, "", "rate"], [33, 2, 1, "", "redundancy_matrix"], [33, 2, 1, "", "standard_form"], [33, 2, 1, "", "syndrome"], [33, 2, 1, "", "systematic_generator_matrix"], [33, 2, 1, "", "zero"]], "sage.coding.linear_code_no_metric.LinearCodeSystematicEncoder": [[33, 2, 1, "", "generator_matrix"], [33, 2, 1, "", "systematic_permutation"], [33, 2, 1, "", "systematic_positions"]], "sage.coding.linear_rank_metric": [[34, 1, 1, "", "AbstractLinearRankMetricCode"], [34, 1, 1, "", "LinearRankMetricCode"], [34, 1, 1, "", "LinearRankMetricCodeNearestNeighborDecoder"], [34, 4, 1, "", "from_matrix_representation"], [34, 4, 1, "", "rank_distance"], [34, 4, 1, "", "rank_weight"], [34, 4, 1, "", "to_matrix_representation"]], "sage.coding.linear_rank_metric.AbstractLinearRankMetricCode": [[34, 2, 1, "", "extension_degree"], [34, 2, 1, "", "field_extension"], [34, 2, 1, "", "matrix_form_of_vector"], [34, 2, 1, "", "minimum_distance"], [34, 2, 1, "", "rank_distance_between_vectors"], [34, 2, 1, "", "rank_weight_of_vector"], [34, 2, 1, "", "sub_field"], [34, 2, 1, "", "vector_form_of_matrix"]], "sage.coding.linear_rank_metric.LinearRankMetricCode": [[34, 2, 1, "", "generator_matrix"]], "sage.coding.linear_rank_metric.LinearRankMetricCodeNearestNeighborDecoder": [[34, 2, 1, "", "decode_to_code"], [34, 2, 1, "", "decoding_radius"]], "sage.coding.parity_check_code": [[35, 1, 1, "", "ParityCheckCode"], [35, 1, 1, "", "ParityCheckCodeGeneratorMatrixEncoder"], [35, 1, 1, "", "ParityCheckCodeStraightforwardEncoder"]], "sage.coding.parity_check_code.ParityCheckCode": [[35, 2, 1, "", "minimum_distance"]], "sage.coding.parity_check_code.ParityCheckCodeGeneratorMatrixEncoder": [[35, 2, 1, "", "generator_matrix"]], "sage.coding.parity_check_code.ParityCheckCodeStraightforwardEncoder": [[35, 2, 1, "", "encode"], [35, 2, 1, "", "message_space"], [35, 2, 1, "", "unencode_nocheck"]], "sage.coding.punctured_code": [[36, 1, 1, "", "PuncturedCode"], [36, 1, 1, "", "PuncturedCodeOriginalCodeDecoder"], [36, 1, 1, "", "PuncturedCodePuncturedMatrixEncoder"]], "sage.coding.punctured_code.PuncturedCode": [[36, 2, 1, "", "dimension"], [36, 2, 1, "", "encode"], [36, 2, 1, "", "original_code"], [36, 2, 1, "", "punctured_positions"], [36, 2, 1, "", "random_element"], [36, 2, 1, "", "structured_representation"]], "sage.coding.punctured_code.PuncturedCodeOriginalCodeDecoder": [[36, 2, 1, "", "decode_to_code"], [36, 2, 1, "", "decoding_radius"], [36, 2, 1, "", "original_decoder"]], "sage.coding.punctured_code.PuncturedCodePuncturedMatrixEncoder": [[36, 2, 1, "", "generator_matrix"]], "sage.coding.reed_muller_code": [[37, 1, 1, "", "BinaryReedMullerCode"], [37, 1, 1, "", "QAryReedMullerCode"], [37, 4, 1, "", "ReedMullerCode"], [37, 1, 1, "", "ReedMullerPolynomialEncoder"], [37, 1, 1, "", "ReedMullerVectorEncoder"]], "sage.coding.reed_muller_code.BinaryReedMullerCode": [[37, 2, 1, "", "minimum_distance"], [37, 2, 1, "", "number_of_variables"], [37, 2, 1, "", "order"]], "sage.coding.reed_muller_code.QAryReedMullerCode": [[37, 2, 1, "", "minimum_distance"], [37, 2, 1, "", "number_of_variables"], [37, 2, 1, "", "order"]], "sage.coding.reed_muller_code.ReedMullerPolynomialEncoder": [[37, 2, 1, "", "encode"], [37, 2, 1, "", "message_space"], [37, 2, 1, "", "points"], [37, 2, 1, "", "polynomial_ring"], [37, 2, 1, "", "unencode_nocheck"]], "sage.coding.reed_muller_code.ReedMullerVectorEncoder": [[37, 2, 1, "", "generator_matrix"], [37, 2, 1, "", "points"]], "sage.coding.self_dual_codes": [[38, 4, 1, "", "self_dual_binary_codes"]], "sage.coding.source_coding": [[39, 0, 0, "-", "huffman"]], "sage.coding.source_coding.huffman": [[39, 1, 1, "", "Huffman"], [39, 4, 1, "", "frequency_table"]], "sage.coding.source_coding.huffman.Huffman": [[39, 2, 1, "", "decode"], [39, 2, 1, "", "encode"], [39, 2, 1, "", "encoding_table"], [39, 2, 1, "", "tree"]], "sage.coding.subfield_subcode": [[40, 1, 1, "", "SubfieldSubcode"], [40, 1, 1, "", "SubfieldSubcodeOriginalCodeDecoder"]], "sage.coding.subfield_subcode.SubfieldSubcode": [[40, 2, 1, "", "dimension"], [40, 2, 1, "", "dimension_lower_bound"], [40, 2, 1, "", "dimension_upper_bound"], [40, 2, 1, "", "embedding"], [40, 2, 1, "", "original_code"], [40, 2, 1, "", "parity_check_matrix"]], "sage.coding.subfield_subcode.SubfieldSubcodeOriginalCodeDecoder": [[40, 2, 1, "", "decode_to_code"], [40, 2, 1, "", "decoding_radius"], [40, 2, 1, "", "original_decoder"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:attribute", "4": "py:function", "5": "py:exception"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"]}, "titleterms": {"code": [0, 1, 2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 21, 22, 23, 24, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41], "theori": [0, 15], "linear": [0, 10, 11, 12, 18, 30, 32, 33, 34], "famili": [0, 13, 32], "deriv": [0, 13], "construct": [0, 13, 25], "decod": [0, 3, 16, 17, 26, 27, 30], "automorph": [0, 11, 12], "group": [0, 12], "bound": [0, 6, 9, 18], "paramet": [0, 6, 9], "databas": [0, 15, 41], "miscellan": 0, "modul": 0, "indic": 0, "tabl": 0, "ag": [2, 3], "bch": 4, "optim": 5, "low": 5, "level": 5, "binari": [5, 38], "represent": [5, 13], "index": [6, 8, 13, 17, 20], "channel": [7, 8], "todo": 9, "constructor": 10, "do": 10, "preserv": 10, "structur": [10, 32, 33, 34], "inform": [10, 30], "canon": [11, 12], "form": [11, 12], "over": [11, 12, 32, 34], "finit": [11, 12], "field": [11, 12], "comput": 12, "rich": 13, "gener": [13, 24, 25, 26, 32, 33, 34], "matrix": 13, "cyclic": 14, "access": 15, "function": [15, 39], "onlin": 15, "delsart": 18, "program": 18, "encod": [19, 20, 39], "extend": 21, "golai": 22, "goppa": 23, "reed": [24, 26, 37], "solomon": [24, 26], "matric": 25, "us": 25, "guava": 25, "packag": 25, "gap": 25, "guruswami": [26, 27, 28], "sudan": [26, 27, 28], "interpol": 27, "algorithm": 27, "util": 28, "method": 28, "ham": [29, 32], "set": 30, "kasami": 31, "metric": [32, 33, 34], "abstractlinearcod": 32, "linearcod": 32, "further": [32, 34], "refer": [32, 34], "ani": 33, "rank": 34, "gabidulin": 34, "abstractlinearrankmetriccod": 34, "linearrankmetriccod": 34, "pariti": 35, "check": 35, "punctur": 36, "muller": 37, "enumer": 38, "self": 38, "dual": 38, "huffman": 39, "class": 39, "subfield": 40, "subcod": 40, "two": 41, "weight": 41}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.todo": 2, "sphinx": 57}, "alltitles": {"Coding Theory": [[0, "coding-theory"]], "Linear Codes": [[0, "linear-codes"], [32, "linear-codes"]], "Families of Linear Codes": [[0, "families-of-linear-codes"]], "Derived Code Constructions": [[0, "derived-code-constructions"]], "Decoding": [[0, "decoding"]], "Automorphism Groups of Linear Codes": [[0, "automorphism-groups-of-linear-codes"]], "Bounds for Parameters of Linear Codes": [[0, "bounds-for-parameters-of-linear-codes"]], "Databases for Coding Theory": [[0, "databases-for-coding-theory"]], "Miscellaneous Modules": [[0, "miscellaneous-modules"]], "Indices and Tables": [[0, "indices-and-tables"]], "Codes": [[1, "codes"]], "AG codes": [[2, "ag-codes"]], "Decoders for AG codes": [[3, "decoders-for-ag-codes"]], "BCH code": [[4, "bch-code"]], "Optimized low-level binary code representation": [[5, "optimized-low-level-binary-code-representation"]], "Index of bounds on the parameters of codes": [[6, "index-of-bounds-on-the-parameters-of-codes"]], "Channels": [[7, "channels"]], "Index of channels": [[8, "index-of-channels"]], "Bounds for parameters of codes": [[9, "bounds-for-parameters-of-codes"]], "Todo": [[9, "id3"]], "Linear code constructors that do not preserve the structural information": [[10, "linear-code-constructors-that-do-not-preserve-the-structural-information"]], "Canonical forms and automorphisms for linear codes over finite fields": [[11, "canonical-forms-and-automorphisms-for-linear-codes-over-finite-fields"]], "Canonical forms and automorphism group computation for linear codes over finite fields": [[12, "canonical-forms-and-automorphism-group-computation-for-linear-codes-over-finite-fields"]], "Index of code constructions": [[13, "index-of-code-constructions"]], "Families of Codes (Rich representation)": [[13, "families-of-codes-rich-representation"]], "Families of Codes (Generator matrix representation)": [[13, "families-of-codes-generator-matrix-representation"]], "Derived Codes": [[13, "derived-codes"]], "Cyclic code": [[14, "cyclic-code"]], "Access functions to online databases for coding theory": [[15, "access-functions-to-online-databases-for-coding-theory"]], "Decoders": [[16, "decoders"]], "Index of decoders": [[17, "index-of-decoders"]], "Delsarte (or linear programming) bounds": [[18, "delsarte-or-linear-programming-bounds"]], "Encoders": [[19, "encoders"]], "Index of encoders": [[20, "index-of-encoders"]], "Extended code": [[21, "extended-code"]], "Golay code": [[22, "golay-code"]], "Goppa code": [[23, "goppa-code"]], "Reed-Solomon codes and Generalized Reed-Solomon codes": [[24, "reed-solomon-codes-and-generalized-reed-solomon-codes"]], "Constructions of generator matrices using the GUAVA package for GAP": [[25, "constructions-of-generator-matrices-using-the-guava-package-for-gap"]], "Guruswami-Sudan decoder for (Generalized) Reed-Solomon codes": [[26, "guruswami-sudan-decoder-for-generalized-reed-solomon-codes"]], "Interpolation algorithms for the Guruswami-Sudan decoder": [[27, "interpolation-algorithms-for-the-guruswami-sudan-decoder"]], "Guruswami-Sudan utility methods": [[28, "guruswami-sudan-utility-methods"]], "Hamming codes": [[29, "hamming-codes"]], "Information-set decoding for linear codes": [[30, "information-set-decoding-for-linear-codes"]], "Kasami code": [[31, "kasami-code"]], "Generic structures for linear codes over the Hamming metric": [[32, "generic-structures-for-linear-codes-over-the-hamming-metric"]], "Families or Generic codes": [[32, "families-or-generic-codes"]], "AbstractLinearCode": [[32, "abstractlinearcode"]], "LinearCode": [[32, "linearcode"]], "Further references": [[32, "further-references"], [34, "further-references"]], "Generic structures for linear codes of any metric": [[33, "generic-structures-for-linear-codes-of-any-metric"]], "Generic structures for linear codes over the rank metric": [[34, "generic-structures-for-linear-codes-over-the-rank-metric"]], "Rank Metric": [[34, "rank-metric"]], "Linear Rank Metric Code and Gabidulin Codes": [[34, "linear-rank-metric-code-and-gabidulin-codes"]], "AbstractLinearRankMetricCode": [[34, "abstractlinearrankmetriccode"]], "LinearRankMetricCode": [[34, "linearrankmetriccode"]], "Parity-check code": [[35, "parity-check-code"]], "Punctured code": [[36, "punctured-code"]], "Reed-Muller code": [[37, "reed-muller-code"]], "Enumerating binary self-dual codes": [[38, "enumerating-binary-self-dual-codes"]], "Huffman encoding": [[39, "huffman-encoding"]], "Classes and functions": [[39, "classes-and-functions"]], "Subfield subcode": [[40, "subfield-subcode"]], "Database of two-weight codes": [[41, "database-of-two-weight-codes"]]}, "indexentries": {"abstractcode (class in sage.coding.abstract_code)": [[1, "sage.coding.abstract_code.AbstractCode"]], "add_decoder() (sage.coding.abstract_code.abstractcode method)": [[1, "sage.coding.abstract_code.AbstractCode.add_decoder"]], "add_encoder() (sage.coding.abstract_code.abstractcode method)": [[1, "sage.coding.abstract_code.AbstractCode.add_encoder"]], "ambient_space() (sage.coding.abstract_code.abstractcode method)": [[1, "sage.coding.abstract_code.AbstractCode.ambient_space"]], "decode_to_code() (sage.coding.abstract_code.abstractcode method)": [[1, "sage.coding.abstract_code.AbstractCode.decode_to_code"]], "decode_to_message() (sage.coding.abstract_code.abstractcode method)": [[1, "sage.coding.abstract_code.AbstractCode.decode_to_message"]], "decoder() (sage.coding.abstract_code.abstractcode method)": [[1, "sage.coding.abstract_code.AbstractCode.decoder"]], "decoders_available() (sage.coding.abstract_code.abstractcode method)": [[1, "sage.coding.abstract_code.AbstractCode.decoders_available"]], "encode() (sage.coding.abstract_code.abstractcode method)": [[1, "sage.coding.abstract_code.AbstractCode.encode"]], "encoder() (sage.coding.abstract_code.abstractcode method)": [[1, "sage.coding.abstract_code.AbstractCode.encoder"]], "encoders_available() (sage.coding.abstract_code.abstractcode method)": [[1, "sage.coding.abstract_code.AbstractCode.encoders_available"]], "length() (sage.coding.abstract_code.abstractcode method)": [[1, "sage.coding.abstract_code.AbstractCode.length"]], "list() (sage.coding.abstract_code.abstractcode method)": [[1, "sage.coding.abstract_code.AbstractCode.list"]], "metric() (sage.coding.abstract_code.abstractcode method)": [[1, "sage.coding.abstract_code.AbstractCode.metric"]], "module": [[1, "module-sage.coding.abstract_code"], [2, "module-sage.coding.ag_code"], [3, "module-sage.coding.ag_code_decoders"], [4, "module-sage.coding.bch_code"], [5, "module-sage.coding.binary_code"], [6, "module-sage.coding.bounds_catalog"], [7, "module-sage.coding.channel"], [8, "module-sage.coding.channels_catalog"], [9, "module-sage.coding.code_bounds"], [10, "module-sage.coding.code_constructions"], [11, "module-sage.coding.codecan.autgroup_can_label"], [12, "module-sage.coding.codecan.codecan"], [13, "module-sage.coding.codes_catalog"], [14, "module-sage.coding.cyclic_code"], [15, "module-sage.coding.databases"], [16, "module-sage.coding.decoder"], [17, "module-sage.coding.decoders_catalog"], [18, "module-sage.coding.delsarte_bounds"], [19, "module-sage.coding.encoder"], [20, "module-sage.coding.encoders_catalog"], [21, "module-sage.coding.extended_code"], [22, "module-sage.coding.golay_code"], [23, "module-sage.coding.goppa_code"], [24, "module-sage.coding.grs_code"], [25, "module-sage.coding.guava"], [26, "module-sage.coding.guruswami_sudan.gs_decoder"], [27, "module-sage.coding.guruswami_sudan.interpolation"], [28, "module-sage.coding.guruswami_sudan.utils"], [29, "module-sage.coding.hamming_code"], [30, "module-sage.coding.information_set_decoder"], [31, "module-sage.coding.kasami_codes"], [32, "module-sage.coding.linear_code"], [33, "module-sage.coding.linear_code_no_metric"], [34, "module-sage.coding.linear_rank_metric"], [35, "module-sage.coding.parity_check_code"], [36, "module-sage.coding.punctured_code"], [37, "module-sage.coding.reed_muller_code"], [38, "module-sage.coding.self_dual_codes"], [39, "module-sage.coding.source_coding.huffman"], [40, "module-sage.coding.subfield_subcode"], [41, "module-sage.coding.two_weight_db"]], "random_element() (sage.coding.abstract_code.abstractcode method)": [[1, "sage.coding.abstract_code.AbstractCode.random_element"]], "sage.coding.abstract_code": [[1, "module-sage.coding.abstract_code"]], "unencode() (sage.coding.abstract_code.abstractcode method)": [[1, "sage.coding.abstract_code.AbstractCode.unencode"]], "agcode (class in sage.coding.ag_code)": [[2, "sage.coding.ag_code.AGCode"]], "cartiercode (class in sage.coding.ag_code)": [[2, "sage.coding.ag_code.CartierCode"]], "differentialagcode (class in sage.coding.ag_code)": [[2, "sage.coding.ag_code.DifferentialAGCode"]], "evaluationagcode (class in sage.coding.ag_code)": [[2, "sage.coding.ag_code.EvaluationAGCode"]], "base_function_field() (sage.coding.ag_code.agcode method)": [[2, "sage.coding.ag_code.AGCode.base_function_field"]], "basis_differentials() (sage.coding.ag_code.differentialagcode method)": [[2, "sage.coding.ag_code.DifferentialAGCode.basis_differentials"]], "basis_functions() (sage.coding.ag_code.evaluationagcode method)": [[2, "sage.coding.ag_code.EvaluationAGCode.basis_functions"]], "designed_distance() (sage.coding.ag_code.cartiercode method)": [[2, "sage.coding.ag_code.CartierCode.designed_distance"]], "designed_distance() (sage.coding.ag_code.differentialagcode method)": [[2, "sage.coding.ag_code.DifferentialAGCode.designed_distance"]], "designed_distance() (sage.coding.ag_code.evaluationagcode method)": [[2, "sage.coding.ag_code.EvaluationAGCode.designed_distance"]], "generator_matrix() (sage.coding.ag_code.cartiercode method)": [[2, "sage.coding.ag_code.CartierCode.generator_matrix"]], "generator_matrix() (sage.coding.ag_code.differentialagcode method)": [[2, "sage.coding.ag_code.DifferentialAGCode.generator_matrix"]], "generator_matrix() (sage.coding.ag_code.evaluationagcode method)": [[2, "sage.coding.ag_code.EvaluationAGCode.generator_matrix"]], "sage.coding.ag_code": [[2, "module-sage.coding.ag_code"]], "decoder_k (class in sage.coding.ag_code_decoders)": [[3, "sage.coding.ag_code_decoders.Decoder_K"]], "decoder_k_extension (class in sage.coding.ag_code_decoders)": [[3, "sage.coding.ag_code_decoders.Decoder_K_extension"]], "differentialagcodedecoder_k (class in sage.coding.ag_code_decoders)": [[3, "sage.coding.ag_code_decoders.DifferentialAGCodeDecoder_K"]], "differentialagcodedecoder_k_extension (class in sage.coding.ag_code_decoders)": [[3, "sage.coding.ag_code_decoders.DifferentialAGCodeDecoder_K_extension"]], "differentialagcodeencoder (class in sage.coding.ag_code_decoders)": [[3, "sage.coding.ag_code_decoders.DifferentialAGCodeEncoder"]], "differentialagcodeuniquedecoder (class in sage.coding.ag_code_decoders)": [[3, "sage.coding.ag_code_decoders.DifferentialAGCodeUniqueDecoder"]], "evaluationagcodedecoder_k (class in sage.coding.ag_code_decoders)": [[3, "sage.coding.ag_code_decoders.EvaluationAGCodeDecoder_K"]], "evaluationagcodedecoder_k_extension (class in sage.coding.ag_code_decoders)": [[3, "sage.coding.ag_code_decoders.EvaluationAGCodeDecoder_K_extension"]], "evaluationagcodeencoder (class in sage.coding.ag_code_decoders)": [[3, "sage.coding.ag_code_decoders.EvaluationAGCodeEncoder"]], "evaluationagcodeuniquedecoder (class in sage.coding.ag_code_decoders)": [[3, "sage.coding.ag_code_decoders.EvaluationAGCodeUniqueDecoder"]], "connected_encoder() (sage.coding.ag_code_decoders.differentialagcodeuniquedecoder method)": [[3, "sage.coding.ag_code_decoders.DifferentialAGCodeUniqueDecoder.connected_encoder"]], "connected_encoder() (sage.coding.ag_code_decoders.evaluationagcodeuniquedecoder method)": [[3, "sage.coding.ag_code_decoders.EvaluationAGCodeUniqueDecoder.connected_encoder"]], "decode() (sage.coding.ag_code_decoders.decoder_k method)": [[3, "sage.coding.ag_code_decoders.Decoder_K.decode"]], "decode() (sage.coding.ag_code_decoders.decoder_k_extension method)": [[3, "sage.coding.ag_code_decoders.Decoder_K_extension.decode"]], "decode_to_code() (sage.coding.ag_code_decoders.differentialagcodeuniquedecoder method)": [[3, "sage.coding.ag_code_decoders.DifferentialAGCodeUniqueDecoder.decode_to_code"]], "decode_to_code() (sage.coding.ag_code_decoders.evaluationagcodeuniquedecoder method)": [[3, "sage.coding.ag_code_decoders.EvaluationAGCodeUniqueDecoder.decode_to_code"]], "decode_to_message() (sage.coding.ag_code_decoders.differentialagcodeuniquedecoder method)": [[3, "sage.coding.ag_code_decoders.DifferentialAGCodeUniqueDecoder.decode_to_message"]], "decode_to_message() (sage.coding.ag_code_decoders.evaluationagcodeuniquedecoder method)": [[3, "sage.coding.ag_code_decoders.EvaluationAGCodeUniqueDecoder.decode_to_message"]], "decoding_radius() (sage.coding.ag_code_decoders.differentialagcodeuniquedecoder method)": [[3, "sage.coding.ag_code_decoders.DifferentialAGCodeUniqueDecoder.decoding_radius"]], "decoding_radius() (sage.coding.ag_code_decoders.evaluationagcodeuniquedecoder method)": [[3, "sage.coding.ag_code_decoders.EvaluationAGCodeUniqueDecoder.decoding_radius"]], "encode() (sage.coding.ag_code_decoders.decoder_k method)": [[3, "sage.coding.ag_code_decoders.Decoder_K.encode"]], "encode() (sage.coding.ag_code_decoders.decoder_k_extension method)": [[3, "sage.coding.ag_code_decoders.Decoder_K_extension.encode"]], "encode() (sage.coding.ag_code_decoders.differentialagcodeencoder method)": [[3, "sage.coding.ag_code_decoders.DifferentialAGCodeEncoder.encode"]], "encode() (sage.coding.ag_code_decoders.evaluationagcodeencoder method)": [[3, "sage.coding.ag_code_decoders.EvaluationAGCodeEncoder.encode"]], "info (sage.coding.ag_code_decoders.decoder_k attribute)": [[3, "sage.coding.ag_code_decoders.Decoder_K.info"]], "info (sage.coding.ag_code_decoders.decoder_k_extension attribute)": [[3, "sage.coding.ag_code_decoders.Decoder_K_extension.info"]], "sage.coding.ag_code_decoders": [[3, "module-sage.coding.ag_code_decoders"]], "unencode_nocheck() (sage.coding.ag_code_decoders.differentialagcodeencoder method)": [[3, "sage.coding.ag_code_decoders.DifferentialAGCodeEncoder.unencode_nocheck"]], "unencode_nocheck() (sage.coding.ag_code_decoders.evaluationagcodeencoder method)": [[3, "sage.coding.ag_code_decoders.EvaluationAGCodeEncoder.unencode_nocheck"]], "bchcode (class in sage.coding.bch_code)": [[4, "sage.coding.bch_code.BCHCode"]], "bchunderlyinggrsdecoder (class in sage.coding.bch_code)": [[4, "sage.coding.bch_code.BCHUnderlyingGRSDecoder"]], "bch_to_grs() (sage.coding.bch_code.bchcode method)": [[4, "sage.coding.bch_code.BCHCode.bch_to_grs"]], "bch_word_to_grs() (sage.coding.bch_code.bchunderlyinggrsdecoder method)": [[4, "sage.coding.bch_code.BCHUnderlyingGRSDecoder.bch_word_to_grs"]], "decode_to_code() (sage.coding.bch_code.bchunderlyinggrsdecoder method)": [[4, "sage.coding.bch_code.BCHUnderlyingGRSDecoder.decode_to_code"]], "decoding_radius() (sage.coding.bch_code.bchunderlyinggrsdecoder method)": [[4, "sage.coding.bch_code.BCHUnderlyingGRSDecoder.decoding_radius"]], "designed_distance() (sage.coding.bch_code.bchcode method)": [[4, "sage.coding.bch_code.BCHCode.designed_distance"]], "grs_code() (sage.coding.bch_code.bchunderlyinggrsdecoder method)": [[4, "sage.coding.bch_code.BCHUnderlyingGRSDecoder.grs_code"]], "grs_decoder() (sage.coding.bch_code.bchunderlyinggrsdecoder method)": [[4, "sage.coding.bch_code.BCHUnderlyingGRSDecoder.grs_decoder"]], "grs_word_to_bch() (sage.coding.bch_code.bchunderlyinggrsdecoder method)": [[4, "sage.coding.bch_code.BCHUnderlyingGRSDecoder.grs_word_to_bch"]], "jump_size() (sage.coding.bch_code.bchcode method)": [[4, "sage.coding.bch_code.BCHCode.jump_size"]], "offset() (sage.coding.bch_code.bchcode method)": [[4, "sage.coding.bch_code.BCHCode.offset"]], "sage.coding.bch_code": [[4, "module-sage.coding.bch_code"]], "binarycode (class in sage.coding.binary_code)": [[5, "sage.coding.binary_code.BinaryCode"]], "binarycodeclassifier (class in sage.coding.binary_code)": [[5, "sage.coding.binary_code.BinaryCodeClassifier"]], "orbitpartition (class in sage.coding.binary_code)": [[5, "sage.coding.binary_code.OrbitPartition"]], "partitionstack (class in sage.coding.binary_code)": [[5, "sage.coding.binary_code.PartitionStack"]], "apply_permutation() (sage.coding.binary_code.binarycode method)": [[5, "sage.coding.binary_code.BinaryCode.apply_permutation"]], "cmp() (sage.coding.binary_code.partitionstack method)": [[5, "sage.coding.binary_code.PartitionStack.cmp"]], "generate_children() (sage.coding.binary_code.binarycodeclassifier method)": [[5, "sage.coding.binary_code.BinaryCodeClassifier.generate_children"]], "matrix() (sage.coding.binary_code.binarycode method)": [[5, "sage.coding.binary_code.BinaryCode.matrix"]], "print_basis() (sage.coding.binary_code.partitionstack method)": [[5, "sage.coding.binary_code.PartitionStack.print_basis"]], "print_data() (sage.coding.binary_code.binarycode method)": [[5, "sage.coding.binary_code.BinaryCode.print_data"]], "print_data() (sage.coding.binary_code.partitionstack method)": [[5, "sage.coding.binary_code.PartitionStack.print_data"]], "put_in_canonical_form() (sage.coding.binary_code.binarycodeclassifier method)": [[5, "sage.coding.binary_code.BinaryCodeClassifier.put_in_canonical_form"]], "put_in_std_form() (sage.coding.binary_code.binarycode method)": [[5, "sage.coding.binary_code.BinaryCode.put_in_std_form"]], "sage.coding.binary_code": [[5, "module-sage.coding.binary_code"]], "test_expand_to_ortho_basis() (in module sage.coding.binary_code)": [[5, "sage.coding.binary_code.test_expand_to_ortho_basis"]], "test_word_perms() (in module sage.coding.binary_code)": [[5, "sage.coding.binary_code.test_word_perms"]], "weight_dist() (in module sage.coding.binary_code)": [[5, "sage.coding.binary_code.weight_dist"]], "sage.coding.bounds_catalog": [[6, "module-sage.coding.bounds_catalog"]], "channel (class in sage.coding.channel)": [[7, "sage.coding.channel.Channel"]], "errorerasurechannel (class in sage.coding.channel)": [[7, "sage.coding.channel.ErrorErasureChannel"]], "qarysymmetricchannel (class in sage.coding.channel)": [[7, "sage.coding.channel.QarySymmetricChannel"]], "staticerrorratechannel (class in sage.coding.channel)": [[7, "sage.coding.channel.StaticErrorRateChannel"]], "error_probability() (sage.coding.channel.qarysymmetricchannel method)": [[7, "sage.coding.channel.QarySymmetricChannel.error_probability"]], "format_interval() (in module sage.coding.channel)": [[7, "sage.coding.channel.format_interval"]], "input_space() (sage.coding.channel.channel method)": [[7, "sage.coding.channel.Channel.input_space"]], "number_erasures() (sage.coding.channel.errorerasurechannel method)": [[7, "sage.coding.channel.ErrorErasureChannel.number_erasures"]], "number_errors() (sage.coding.channel.errorerasurechannel method)": [[7, "sage.coding.channel.ErrorErasureChannel.number_errors"]], "number_errors() (sage.coding.channel.staticerrorratechannel method)": [[7, "sage.coding.channel.StaticErrorRateChannel.number_errors"]], "output_space() (sage.coding.channel.channel method)": [[7, "sage.coding.channel.Channel.output_space"]], "probability_of_at_most_t_errors() (sage.coding.channel.qarysymmetricchannel method)": [[7, "sage.coding.channel.QarySymmetricChannel.probability_of_at_most_t_errors"]], "probability_of_exactly_t_errors() (sage.coding.channel.qarysymmetricchannel method)": [[7, "sage.coding.channel.QarySymmetricChannel.probability_of_exactly_t_errors"]], "random_error_vector() (in module sage.coding.channel)": [[7, "sage.coding.channel.random_error_vector"]], "sage.coding.channel": [[7, "module-sage.coding.channel"]], "transmit() (sage.coding.channel.channel method)": [[7, "sage.coding.channel.Channel.transmit"]], "transmit_unsafe() (sage.coding.channel.channel method)": [[7, "sage.coding.channel.Channel.transmit_unsafe"]], "transmit_unsafe() (sage.coding.channel.errorerasurechannel method)": [[7, "sage.coding.channel.ErrorErasureChannel.transmit_unsafe"]], "transmit_unsafe() (sage.coding.channel.qarysymmetricchannel method)": [[7, "sage.coding.channel.QarySymmetricChannel.transmit_unsafe"]], "transmit_unsafe() (sage.coding.channel.staticerrorratechannel method)": [[7, "sage.coding.channel.StaticErrorRateChannel.transmit_unsafe"]], "sage.coding.channels_catalog": [[8, "module-sage.coding.channels_catalog"]], "codesize_upper_bound() (in module sage.coding.code_bounds)": [[9, "sage.coding.code_bounds.codesize_upper_bound"]], "dimension_upper_bound() (in module sage.coding.code_bounds)": [[9, "sage.coding.code_bounds.dimension_upper_bound"]], "elias_bound_asymp() (in module sage.coding.code_bounds)": [[9, "sage.coding.code_bounds.elias_bound_asymp"]], "elias_upper_bound() (in module sage.coding.code_bounds)": [[9, "sage.coding.code_bounds.elias_upper_bound"]], "entropy() (in module sage.coding.code_bounds)": [[9, "sage.coding.code_bounds.entropy"]], "entropy_inverse() (in module sage.coding.code_bounds)": [[9, "sage.coding.code_bounds.entropy_inverse"]], "gilbert_lower_bound() (in module sage.coding.code_bounds)": [[9, "sage.coding.code_bounds.gilbert_lower_bound"]], "griesmer_upper_bound() (in module sage.coding.code_bounds)": [[9, "sage.coding.code_bounds.griesmer_upper_bound"]], "gv_bound_asymp() (in module sage.coding.code_bounds)": [[9, "sage.coding.code_bounds.gv_bound_asymp"]], "gv_info_rate() (in module sage.coding.code_bounds)": [[9, "sage.coding.code_bounds.gv_info_rate"]], "hamming_bound_asymp() (in module sage.coding.code_bounds)": [[9, "sage.coding.code_bounds.hamming_bound_asymp"]], "hamming_upper_bound() (in module sage.coding.code_bounds)": [[9, "sage.coding.code_bounds.hamming_upper_bound"]], "mrrw1_bound_asymp() (in module sage.coding.code_bounds)": [[9, "sage.coding.code_bounds.mrrw1_bound_asymp"]], "plotkin_bound_asymp() (in module sage.coding.code_bounds)": [[9, "sage.coding.code_bounds.plotkin_bound_asymp"]], "plotkin_upper_bound() (in module sage.coding.code_bounds)": [[9, "sage.coding.code_bounds.plotkin_upper_bound"]], "sage.coding.code_bounds": [[9, "module-sage.coding.code_bounds"]], "singleton_bound_asymp() (in module sage.coding.code_bounds)": [[9, "sage.coding.code_bounds.singleton_bound_asymp"]], "singleton_upper_bound() (in module sage.coding.code_bounds)": [[9, "sage.coding.code_bounds.singleton_upper_bound"]], "volume_hamming() (in module sage.coding.code_bounds)": [[9, "sage.coding.code_bounds.volume_hamming"]], "duadiccodeevenpair() (in module sage.coding.code_constructions)": [[10, "sage.coding.code_constructions.DuadicCodeEvenPair"]], "duadiccodeoddpair() (in module sage.coding.code_constructions)": [[10, "sage.coding.code_constructions.DuadicCodeOddPair"]], "extendedquadraticresiduecode() (in module sage.coding.code_constructions)": [[10, "sage.coding.code_constructions.ExtendedQuadraticResidueCode"]], "quadraticresiduecode() (in module sage.coding.code_constructions)": [[10, "sage.coding.code_constructions.QuadraticResidueCode"]], "quadraticresiduecodeevenpair() (in module sage.coding.code_constructions)": [[10, "sage.coding.code_constructions.QuadraticResidueCodeEvenPair"]], "quadraticresiduecodeoddpair() (in module sage.coding.code_constructions)": [[10, "sage.coding.code_constructions.QuadraticResidueCodeOddPair"]], "toriccode() (in module sage.coding.code_constructions)": [[10, "sage.coding.code_constructions.ToricCode"]], "walshcode() (in module sage.coding.code_constructions)": [[10, "sage.coding.code_constructions.WalshCode"]], "from_parity_check_matrix() (in module sage.coding.code_constructions)": [[10, "sage.coding.code_constructions.from_parity_check_matrix"]], "permutation_action() (in module sage.coding.code_constructions)": [[10, "sage.coding.code_constructions.permutation_action"]], "random_linear_code() (in module sage.coding.code_constructions)": [[10, "sage.coding.code_constructions.random_linear_code"]], "sage.coding.code_constructions": [[10, "module-sage.coding.code_constructions"]], "walsh_matrix() (in module sage.coding.code_constructions)": [[10, "sage.coding.code_constructions.walsh_matrix"]], "linearcodeautgroupcanlabel (class in sage.coding.codecan.autgroup_can_label)": [[11, "sage.coding.codecan.autgroup_can_label.LinearCodeAutGroupCanLabel"]], "get_pgammal_gens() (sage.coding.codecan.autgroup_can_label.linearcodeautgroupcanlabel method)": [[11, "sage.coding.codecan.autgroup_can_label.LinearCodeAutGroupCanLabel.get_PGammaL_gens"]], "get_pgammal_order() (sage.coding.codecan.autgroup_can_label.linearcodeautgroupcanlabel method)": [[11, "sage.coding.codecan.autgroup_can_label.LinearCodeAutGroupCanLabel.get_PGammaL_order"]], "get_autom_gens() (sage.coding.codecan.autgroup_can_label.linearcodeautgroupcanlabel method)": [[11, "sage.coding.codecan.autgroup_can_label.LinearCodeAutGroupCanLabel.get_autom_gens"]], "get_autom_order() (sage.coding.codecan.autgroup_can_label.linearcodeautgroupcanlabel method)": [[11, "sage.coding.codecan.autgroup_can_label.LinearCodeAutGroupCanLabel.get_autom_order"]], "get_canonical_form() (sage.coding.codecan.autgroup_can_label.linearcodeautgroupcanlabel method)": [[11, "sage.coding.codecan.autgroup_can_label.LinearCodeAutGroupCanLabel.get_canonical_form"]], "get_transporter() (sage.coding.codecan.autgroup_can_label.linearcodeautgroupcanlabel method)": [[11, "sage.coding.codecan.autgroup_can_label.LinearCodeAutGroupCanLabel.get_transporter"]], "sage.coding.codecan.autgroup_can_label": [[11, "module-sage.coding.codecan.autgroup_can_label"]], "innergroup (class in sage.coding.codecan.codecan)": [[12, "sage.coding.codecan.codecan.InnerGroup"]], "partitionrefinementlinearcode (class in sage.coding.codecan.codecan)": [[12, "sage.coding.codecan.codecan.PartitionRefinementLinearCode"]], "column_blocks() (sage.coding.codecan.codecan.innergroup method)": [[12, "sage.coding.codecan.codecan.InnerGroup.column_blocks"]], "get_autom_gens() (sage.coding.codecan.codecan.partitionrefinementlinearcode method)": [[12, "sage.coding.codecan.codecan.PartitionRefinementLinearCode.get_autom_gens"]], "get_autom_order_inner_stabilizer() (sage.coding.codecan.codecan.partitionrefinementlinearcode method)": [[12, "sage.coding.codecan.codecan.PartitionRefinementLinearCode.get_autom_order_inner_stabilizer"]], "get_canonical_form() (sage.coding.codecan.codecan.partitionrefinementlinearcode method)": [[12, "sage.coding.codecan.codecan.PartitionRefinementLinearCode.get_canonical_form"]], "get_frob_pow() (sage.coding.codecan.codecan.innergroup method)": [[12, "sage.coding.codecan.codecan.InnerGroup.get_frob_pow"]], "get_transporter() (sage.coding.codecan.codecan.partitionrefinementlinearcode method)": [[12, "sage.coding.codecan.codecan.PartitionRefinementLinearCode.get_transporter"]], "sage.coding.codecan.codecan": [[12, "module-sage.coding.codecan.codecan"]], "sage.coding.codes_catalog": [[13, "module-sage.coding.codes_catalog"]], "cycliccode (class in sage.coding.cyclic_code)": [[14, "sage.coding.cyclic_code.CyclicCode"]], "cycliccodepolynomialencoder (class in sage.coding.cyclic_code)": [[14, "sage.coding.cyclic_code.CyclicCodePolynomialEncoder"]], "cycliccodesurroundingbchdecoder (class in sage.coding.cyclic_code)": [[14, "sage.coding.cyclic_code.CyclicCodeSurroundingBCHDecoder"]], "cycliccodevectorencoder (class in sage.coding.cyclic_code)": [[14, "sage.coding.cyclic_code.CyclicCodeVectorEncoder"]], "bch_bound() (in module sage.coding.cyclic_code)": [[14, "sage.coding.cyclic_code.bch_bound"]], "bch_bound() (sage.coding.cyclic_code.cycliccode method)": [[14, "sage.coding.cyclic_code.CyclicCode.bch_bound"]], "bch_code() (sage.coding.cyclic_code.cycliccodesurroundingbchdecoder method)": [[14, "sage.coding.cyclic_code.CyclicCodeSurroundingBCHDecoder.bch_code"]], "bch_decoder() (sage.coding.cyclic_code.cycliccodesurroundingbchdecoder method)": [[14, "sage.coding.cyclic_code.CyclicCodeSurroundingBCHDecoder.bch_decoder"]], "check_polynomial() (sage.coding.cyclic_code.cycliccode method)": [[14, "sage.coding.cyclic_code.CyclicCode.check_polynomial"]], "decode_to_code() (sage.coding.cyclic_code.cycliccodesurroundingbchdecoder method)": [[14, "sage.coding.cyclic_code.CyclicCodeSurroundingBCHDecoder.decode_to_code"]], "decoding_radius() (sage.coding.cyclic_code.cycliccodesurroundingbchdecoder method)": [[14, "sage.coding.cyclic_code.CyclicCodeSurroundingBCHDecoder.decoding_radius"]], "defining_set() (sage.coding.cyclic_code.cycliccode method)": [[14, "sage.coding.cyclic_code.CyclicCode.defining_set"]], "encode() (sage.coding.cyclic_code.cycliccodepolynomialencoder method)": [[14, "sage.coding.cyclic_code.CyclicCodePolynomialEncoder.encode"]], "encode() (sage.coding.cyclic_code.cycliccodevectorencoder method)": [[14, "sage.coding.cyclic_code.CyclicCodeVectorEncoder.encode"]], "field_embedding() (sage.coding.cyclic_code.cycliccode method)": [[14, "sage.coding.cyclic_code.CyclicCode.field_embedding"]], "find_generator_polynomial() (in module sage.coding.cyclic_code)": [[14, "sage.coding.cyclic_code.find_generator_polynomial"]], "generator_matrix() (sage.coding.cyclic_code.cycliccodevectorencoder method)": [[14, "sage.coding.cyclic_code.CyclicCodeVectorEncoder.generator_matrix"]], "generator_polynomial() (sage.coding.cyclic_code.cycliccode method)": [[14, "sage.coding.cyclic_code.CyclicCode.generator_polynomial"]], "message_space() (sage.coding.cyclic_code.cycliccodepolynomialencoder method)": [[14, "sage.coding.cyclic_code.CyclicCodePolynomialEncoder.message_space"]], "message_space() (sage.coding.cyclic_code.cycliccodevectorencoder method)": [[14, "sage.coding.cyclic_code.CyclicCodeVectorEncoder.message_space"]], "parity_check_matrix() (sage.coding.cyclic_code.cycliccode method)": [[14, "sage.coding.cyclic_code.CyclicCode.parity_check_matrix"]], "primitive_root() (sage.coding.cyclic_code.cycliccode method)": [[14, "sage.coding.cyclic_code.CyclicCode.primitive_root"]], "sage.coding.cyclic_code": [[14, "module-sage.coding.cyclic_code"]], "surrounding_bch_code() (sage.coding.cyclic_code.cycliccode method)": [[14, "sage.coding.cyclic_code.CyclicCode.surrounding_bch_code"]], "unencode_nocheck() (sage.coding.cyclic_code.cycliccodepolynomialencoder method)": [[14, "sage.coding.cyclic_code.CyclicCodePolynomialEncoder.unencode_nocheck"]], "unencode_nocheck() (sage.coding.cyclic_code.cycliccodevectorencoder method)": [[14, "sage.coding.cyclic_code.CyclicCodeVectorEncoder.unencode_nocheck"]], "best_linear_code_in_codetables_dot_de() (in module sage.coding.databases)": [[15, "sage.coding.databases.best_linear_code_in_codetables_dot_de"]], "best_linear_code_in_guava() (in module sage.coding.databases)": [[15, "sage.coding.databases.best_linear_code_in_guava"]], "bounds_on_minimum_distance_in_guava() (in module sage.coding.databases)": [[15, "sage.coding.databases.bounds_on_minimum_distance_in_guava"]], "sage.coding.databases": [[15, "module-sage.coding.databases"]], "self_orthogonal_binary_codes() (in module sage.coding.databases)": [[15, "sage.coding.databases.self_orthogonal_binary_codes"]], "decoder (class in sage.coding.decoder)": [[16, "sage.coding.decoder.Decoder"]], "decodingerror": [[16, "sage.coding.decoder.DecodingError"]], "code() (sage.coding.decoder.decoder method)": [[16, "sage.coding.decoder.Decoder.code"]], "connected_encoder() (sage.coding.decoder.decoder method)": [[16, "sage.coding.decoder.Decoder.connected_encoder"]], "decode_to_code() (sage.coding.decoder.decoder method)": [[16, "sage.coding.decoder.Decoder.decode_to_code"]], "decode_to_message() (sage.coding.decoder.decoder method)": [[16, "sage.coding.decoder.Decoder.decode_to_message"]], "decoder_type() (sage.coding.decoder.decoder class method)": [[16, "sage.coding.decoder.Decoder.decoder_type"]], "decoding_radius() (sage.coding.decoder.decoder method)": [[16, "sage.coding.decoder.Decoder.decoding_radius"]], "input_space() (sage.coding.decoder.decoder method)": [[16, "sage.coding.decoder.Decoder.input_space"]], "message_space() (sage.coding.decoder.decoder method)": [[16, "sage.coding.decoder.Decoder.message_space"]], "sage.coding.decoder": [[16, "module-sage.coding.decoder"]], "sage.coding.decoders_catalog": [[17, "module-sage.coding.decoders_catalog"]], "delsarte_bound_q_matrix() (in module sage.coding.delsarte_bounds)": [[18, "sage.coding.delsarte_bounds.delsarte_bound_Q_matrix"]], "delsarte_bound_additive_hamming_space() (in module sage.coding.delsarte_bounds)": [[18, "sage.coding.delsarte_bounds.delsarte_bound_additive_hamming_space"]], "delsarte_bound_constant_weight_code() (in module sage.coding.delsarte_bounds)": [[18, "sage.coding.delsarte_bounds.delsarte_bound_constant_weight_code"]], "delsarte_bound_hamming_space() (in module sage.coding.delsarte_bounds)": [[18, "sage.coding.delsarte_bounds.delsarte_bound_hamming_space"]], "eberlein() (in module sage.coding.delsarte_bounds)": [[18, "sage.coding.delsarte_bounds.eberlein"]], "krawtchouk() (in module sage.coding.delsarte_bounds)": [[18, "sage.coding.delsarte_bounds.krawtchouk"]], "sage.coding.delsarte_bounds": [[18, "module-sage.coding.delsarte_bounds"]], "encoder (class in sage.coding.encoder)": [[19, "sage.coding.encoder.Encoder"]], "encodingerror": [[19, "sage.coding.encoder.EncodingError"]], "code() (sage.coding.encoder.encoder method)": [[19, "sage.coding.encoder.Encoder.code"]], "encode() (sage.coding.encoder.encoder method)": [[19, "sage.coding.encoder.Encoder.encode"]], "generator_matrix() (sage.coding.encoder.encoder method)": [[19, "sage.coding.encoder.Encoder.generator_matrix"]], "message_space() (sage.coding.encoder.encoder method)": [[19, "sage.coding.encoder.Encoder.message_space"]], "sage.coding.encoder": [[19, "module-sage.coding.encoder"]], "unencode() (sage.coding.encoder.encoder method)": [[19, "sage.coding.encoder.Encoder.unencode"]], "unencode_nocheck() (sage.coding.encoder.encoder method)": [[19, "sage.coding.encoder.Encoder.unencode_nocheck"]], "sage.coding.encoders_catalog": [[20, "module-sage.coding.encoders_catalog"]], "extendedcode (class in sage.coding.extended_code)": [[21, "sage.coding.extended_code.ExtendedCode"]], "extendedcodeextendedmatrixencoder (class in sage.coding.extended_code)": [[21, "sage.coding.extended_code.ExtendedCodeExtendedMatrixEncoder"]], "extendedcodeoriginalcodedecoder (class in sage.coding.extended_code)": [[21, "sage.coding.extended_code.ExtendedCodeOriginalCodeDecoder"]], "decode_to_code() (sage.coding.extended_code.extendedcodeoriginalcodedecoder method)": [[21, "sage.coding.extended_code.ExtendedCodeOriginalCodeDecoder.decode_to_code"]], "decoding_radius() (sage.coding.extended_code.extendedcodeoriginalcodedecoder method)": [[21, "sage.coding.extended_code.ExtendedCodeOriginalCodeDecoder.decoding_radius"]], "generator_matrix() (sage.coding.extended_code.extendedcodeextendedmatrixencoder method)": [[21, "sage.coding.extended_code.ExtendedCodeExtendedMatrixEncoder.generator_matrix"]], "original_code() (sage.coding.extended_code.extendedcode method)": [[21, "sage.coding.extended_code.ExtendedCode.original_code"]], "original_decoder() (sage.coding.extended_code.extendedcodeoriginalcodedecoder method)": [[21, "sage.coding.extended_code.ExtendedCodeOriginalCodeDecoder.original_decoder"]], "parity_check_matrix() (sage.coding.extended_code.extendedcode method)": [[21, "sage.coding.extended_code.ExtendedCode.parity_check_matrix"]], "random_element() (sage.coding.extended_code.extendedcode method)": [[21, "sage.coding.extended_code.ExtendedCode.random_element"]], "sage.coding.extended_code": [[21, "module-sage.coding.extended_code"]], "golaycode (class in sage.coding.golay_code)": [[22, "sage.coding.golay_code.GolayCode"]], "covering_radius() (sage.coding.golay_code.golaycode method)": [[22, "sage.coding.golay_code.GolayCode.covering_radius"]], "dual_code() (sage.coding.golay_code.golaycode method)": [[22, "sage.coding.golay_code.GolayCode.dual_code"]], "generator_matrix() (sage.coding.golay_code.golaycode method)": [[22, "sage.coding.golay_code.GolayCode.generator_matrix"]], "minimum_distance() (sage.coding.golay_code.golaycode method)": [[22, "sage.coding.golay_code.GolayCode.minimum_distance"]], "parity_check_matrix() (sage.coding.golay_code.golaycode method)": [[22, "sage.coding.golay_code.GolayCode.parity_check_matrix"]], "sage.coding.golay_code": [[22, "module-sage.coding.golay_code"]], "weight_distribution() (sage.coding.golay_code.golaycode method)": [[22, "sage.coding.golay_code.GolayCode.weight_distribution"]], "goppacode (class in sage.coding.goppa_code)": [[23, "sage.coding.goppa_code.GoppaCode"]], "goppacodeencoder (class in sage.coding.goppa_code)": [[23, "sage.coding.goppa_code.GoppaCodeEncoder"]], "distance_bound() (sage.coding.goppa_code.goppacode method)": [[23, "sage.coding.goppa_code.GoppaCode.distance_bound"]], "generator_matrix() (sage.coding.goppa_code.goppacodeencoder method)": [[23, "sage.coding.goppa_code.GoppaCodeEncoder.generator_matrix"]], "parity_check_matrix() (sage.coding.goppa_code.goppacode method)": [[23, "sage.coding.goppa_code.GoppaCode.parity_check_matrix"]], "sage.coding.goppa_code": [[23, "module-sage.coding.goppa_code"]], "grsberlekampwelchdecoder (class in sage.coding.grs_code)": [[24, "sage.coding.grs_code.GRSBerlekampWelchDecoder"]], "grserrorerasuredecoder (class in sage.coding.grs_code)": [[24, "sage.coding.grs_code.GRSErrorErasureDecoder"]], "grsevaluationpolynomialencoder (class in sage.coding.grs_code)": [[24, "sage.coding.grs_code.GRSEvaluationPolynomialEncoder"]], "grsevaluationvectorencoder (class in sage.coding.grs_code)": [[24, "sage.coding.grs_code.GRSEvaluationVectorEncoder"]], "grsgaodecoder (class in sage.coding.grs_code)": [[24, "sage.coding.grs_code.GRSGaoDecoder"]], "grskeyequationsyndromedecoder (class in sage.coding.grs_code)": [[24, "sage.coding.grs_code.GRSKeyEquationSyndromeDecoder"]], "generalizedreedsolomoncode (class in sage.coding.grs_code)": [[24, "sage.coding.grs_code.GeneralizedReedSolomonCode"]], "reedsolomoncode() (in module sage.coding.grs_code)": [[24, "sage.coding.grs_code.ReedSolomonCode"]], "column_multipliers() (sage.coding.grs_code.generalizedreedsolomoncode method)": [[24, "sage.coding.grs_code.GeneralizedReedSolomonCode.column_multipliers"]], "covering_radius() (sage.coding.grs_code.generalizedreedsolomoncode method)": [[24, "sage.coding.grs_code.GeneralizedReedSolomonCode.covering_radius"]], "decode_to_code() (sage.coding.grs_code.grsberlekampwelchdecoder method)": [[24, "sage.coding.grs_code.GRSBerlekampWelchDecoder.decode_to_code"]], "decode_to_code() (sage.coding.grs_code.grsgaodecoder method)": [[24, "sage.coding.grs_code.GRSGaoDecoder.decode_to_code"]], "decode_to_code() (sage.coding.grs_code.grskeyequationsyndromedecoder method)": [[24, "sage.coding.grs_code.GRSKeyEquationSyndromeDecoder.decode_to_code"]], "decode_to_message() (sage.coding.grs_code.grsberlekampwelchdecoder method)": [[24, "sage.coding.grs_code.GRSBerlekampWelchDecoder.decode_to_message"]], "decode_to_message() (sage.coding.grs_code.grserrorerasuredecoder method)": [[24, "sage.coding.grs_code.GRSErrorErasureDecoder.decode_to_message"]], "decode_to_message() (sage.coding.grs_code.grsgaodecoder method)": [[24, "sage.coding.grs_code.GRSGaoDecoder.decode_to_message"]], "decode_to_message() (sage.coding.grs_code.grskeyequationsyndromedecoder method)": [[24, "sage.coding.grs_code.GRSKeyEquationSyndromeDecoder.decode_to_message"]], "decoding_radius() (sage.coding.grs_code.grsberlekampwelchdecoder method)": [[24, "sage.coding.grs_code.GRSBerlekampWelchDecoder.decoding_radius"]], "decoding_radius() (sage.coding.grs_code.grserrorerasuredecoder method)": [[24, "sage.coding.grs_code.GRSErrorErasureDecoder.decoding_radius"]], "decoding_radius() (sage.coding.grs_code.grsgaodecoder method)": [[24, "sage.coding.grs_code.GRSGaoDecoder.decoding_radius"]], "decoding_radius() (sage.coding.grs_code.grskeyequationsyndromedecoder method)": [[24, "sage.coding.grs_code.GRSKeyEquationSyndromeDecoder.decoding_radius"]], "dual_code() (sage.coding.grs_code.generalizedreedsolomoncode method)": [[24, "sage.coding.grs_code.GeneralizedReedSolomonCode.dual_code"]], "encode() (sage.coding.grs_code.grsevaluationpolynomialencoder method)": [[24, "sage.coding.grs_code.GRSEvaluationPolynomialEncoder.encode"]], "evaluation_points() (sage.coding.grs_code.generalizedreedsolomoncode method)": [[24, "sage.coding.grs_code.GeneralizedReedSolomonCode.evaluation_points"]], "generator_matrix() (sage.coding.grs_code.grsevaluationvectorencoder method)": [[24, "sage.coding.grs_code.GRSEvaluationVectorEncoder.generator_matrix"]], "is_generalized() (sage.coding.grs_code.generalizedreedsolomoncode method)": [[24, "sage.coding.grs_code.GeneralizedReedSolomonCode.is_generalized"]], "message_space() (sage.coding.grs_code.grsevaluationpolynomialencoder method)": [[24, "sage.coding.grs_code.GRSEvaluationPolynomialEncoder.message_space"]], "minimum_distance() (sage.coding.grs_code.generalizedreedsolomoncode method)": [[24, "sage.coding.grs_code.GeneralizedReedSolomonCode.minimum_distance"]], "multipliers_product() (sage.coding.grs_code.generalizedreedsolomoncode method)": [[24, "sage.coding.grs_code.GeneralizedReedSolomonCode.multipliers_product"]], "parity_check_matrix() (sage.coding.grs_code.generalizedreedsolomoncode method)": [[24, "sage.coding.grs_code.GeneralizedReedSolomonCode.parity_check_matrix"]], "parity_column_multipliers() (sage.coding.grs_code.generalizedreedsolomoncode method)": [[24, "sage.coding.grs_code.GeneralizedReedSolomonCode.parity_column_multipliers"]], "polynomial_ring() (sage.coding.grs_code.grsevaluationpolynomialencoder method)": [[24, "sage.coding.grs_code.GRSEvaluationPolynomialEncoder.polynomial_ring"]], "sage.coding.grs_code": [[24, "module-sage.coding.grs_code"]], "unencode_nocheck() (sage.coding.grs_code.grsevaluationpolynomialencoder method)": [[24, "sage.coding.grs_code.GRSEvaluationPolynomialEncoder.unencode_nocheck"]], "weight_distribution() (sage.coding.grs_code.generalizedreedsolomoncode method)": [[24, "sage.coding.grs_code.GeneralizedReedSolomonCode.weight_distribution"]], "quasiquadraticresiduecode() (in module sage.coding.guava)": [[25, "sage.coding.guava.QuasiQuadraticResidueCode"]], "randomlinearcodeguava() (in module sage.coding.guava)": [[25, "sage.coding.guava.RandomLinearCodeGuava"]], "sage.coding.guava": [[25, "module-sage.coding.guava"]], "grsguruswamisudandecoder (class in sage.coding.guruswami_sudan.gs_decoder)": [[26, "sage.coding.guruswami_sudan.gs_decoder.GRSGuruswamiSudanDecoder"]], "alekhnovich_root_finder() (in module sage.coding.guruswami_sudan.gs_decoder)": [[26, "sage.coding.guruswami_sudan.gs_decoder.alekhnovich_root_finder"]], "decode_to_code() (sage.coding.guruswami_sudan.gs_decoder.grsguruswamisudandecoder method)": [[26, "sage.coding.guruswami_sudan.gs_decoder.GRSGuruswamiSudanDecoder.decode_to_code"]], "decode_to_message() (sage.coding.guruswami_sudan.gs_decoder.grsguruswamisudandecoder method)": [[26, "sage.coding.guruswami_sudan.gs_decoder.GRSGuruswamiSudanDecoder.decode_to_message"]], "decoding_radius() (sage.coding.guruswami_sudan.gs_decoder.grsguruswamisudandecoder method)": [[26, "sage.coding.guruswami_sudan.gs_decoder.GRSGuruswamiSudanDecoder.decoding_radius"]], "gs_satisfactory() (sage.coding.guruswami_sudan.gs_decoder.grsguruswamisudandecoder static method)": [[26, "sage.coding.guruswami_sudan.gs_decoder.GRSGuruswamiSudanDecoder.gs_satisfactory"]], "guruswami_sudan_decoding_radius() (sage.coding.guruswami_sudan.gs_decoder.grsguruswamisudandecoder static method)": [[26, "sage.coding.guruswami_sudan.gs_decoder.GRSGuruswamiSudanDecoder.guruswami_sudan_decoding_radius"]], "interpolation_algorithm() (sage.coding.guruswami_sudan.gs_decoder.grsguruswamisudandecoder method)": [[26, "sage.coding.guruswami_sudan.gs_decoder.GRSGuruswamiSudanDecoder.interpolation_algorithm"]], "list_size() (sage.coding.guruswami_sudan.gs_decoder.grsguruswamisudandecoder method)": [[26, "sage.coding.guruswami_sudan.gs_decoder.GRSGuruswamiSudanDecoder.list_size"]], "multiplicity() (sage.coding.guruswami_sudan.gs_decoder.grsguruswamisudandecoder method)": [[26, "sage.coding.guruswami_sudan.gs_decoder.GRSGuruswamiSudanDecoder.multiplicity"]], "n_k_params() (in module sage.coding.guruswami_sudan.gs_decoder)": [[26, "sage.coding.guruswami_sudan.gs_decoder.n_k_params"]], "parameters() (sage.coding.guruswami_sudan.gs_decoder.grsguruswamisudandecoder method)": [[26, "sage.coding.guruswami_sudan.gs_decoder.GRSGuruswamiSudanDecoder.parameters"]], "parameters_given_tau() (sage.coding.guruswami_sudan.gs_decoder.grsguruswamisudandecoder static method)": [[26, "sage.coding.guruswami_sudan.gs_decoder.GRSGuruswamiSudanDecoder.parameters_given_tau"]], "rootfinding_algorithm() (sage.coding.guruswami_sudan.gs_decoder.grsguruswamisudandecoder method)": [[26, "sage.coding.guruswami_sudan.gs_decoder.GRSGuruswamiSudanDecoder.rootfinding_algorithm"]], "roth_ruckenstein_root_finder() (in module sage.coding.guruswami_sudan.gs_decoder)": [[26, "sage.coding.guruswami_sudan.gs_decoder.roth_ruckenstein_root_finder"]], "sage.coding.guruswami_sudan.gs_decoder": [[26, "module-sage.coding.guruswami_sudan.gs_decoder"]], "gs_interpolation_lee_osullivan() (in module sage.coding.guruswami_sudan.interpolation)": [[27, "sage.coding.guruswami_sudan.interpolation.gs_interpolation_lee_osullivan"]], "gs_interpolation_linalg() (in module sage.coding.guruswami_sudan.interpolation)": [[27, "sage.coding.guruswami_sudan.interpolation.gs_interpolation_linalg"]], "lee_osullivan_module() (in module sage.coding.guruswami_sudan.interpolation)": [[27, "sage.coding.guruswami_sudan.interpolation.lee_osullivan_module"]], "sage.coding.guruswami_sudan.interpolation": [[27, "module-sage.coding.guruswami_sudan.interpolation"]], "gilt() (in module sage.coding.guruswami_sudan.utils)": [[28, "sage.coding.guruswami_sudan.utils.gilt"]], "johnson_radius() (in module sage.coding.guruswami_sudan.utils)": [[28, "sage.coding.guruswami_sudan.utils.johnson_radius"]], "ligt() (in module sage.coding.guruswami_sudan.utils)": [[28, "sage.coding.guruswami_sudan.utils.ligt"]], "polynomial_to_list() (in module sage.coding.guruswami_sudan.utils)": [[28, "sage.coding.guruswami_sudan.utils.polynomial_to_list"]], "sage.coding.guruswami_sudan.utils": [[28, "module-sage.coding.guruswami_sudan.utils"]], "solve_degree2_to_integer_range() (in module sage.coding.guruswami_sudan.utils)": [[28, "sage.coding.guruswami_sudan.utils.solve_degree2_to_integer_range"]], "hammingcode (class in sage.coding.hamming_code)": [[29, "sage.coding.hamming_code.HammingCode"]], "minimum_distance() (sage.coding.hamming_code.hammingcode method)": [[29, "sage.coding.hamming_code.HammingCode.minimum_distance"]], "parity_check_matrix() (sage.coding.hamming_code.hammingcode method)": [[29, "sage.coding.hamming_code.HammingCode.parity_check_matrix"]], "sage.coding.hamming_code": [[29, "module-sage.coding.hamming_code"]], "informationsetalgorithm (class in sage.coding.information_set_decoder)": [[30, "sage.coding.information_set_decoder.InformationSetAlgorithm"]], "leebrickellisdalgorithm (class in sage.coding.information_set_decoder)": [[30, "sage.coding.information_set_decoder.LeeBrickellISDAlgorithm"]], "linearcodeinformationsetdecoder (class in sage.coding.information_set_decoder)": [[30, "sage.coding.information_set_decoder.LinearCodeInformationSetDecoder"]], "algorithm() (sage.coding.information_set_decoder.linearcodeinformationsetdecoder method)": [[30, "sage.coding.information_set_decoder.LinearCodeInformationSetDecoder.algorithm"]], "calibrate() (sage.coding.information_set_decoder.informationsetalgorithm method)": [[30, "sage.coding.information_set_decoder.InformationSetAlgorithm.calibrate"]], "calibrate() (sage.coding.information_set_decoder.leebrickellisdalgorithm method)": [[30, "sage.coding.information_set_decoder.LeeBrickellISDAlgorithm.calibrate"]], "code() (sage.coding.information_set_decoder.informationsetalgorithm method)": [[30, "sage.coding.information_set_decoder.InformationSetAlgorithm.code"]], "decode() (sage.coding.information_set_decoder.informationsetalgorithm method)": [[30, "sage.coding.information_set_decoder.InformationSetAlgorithm.decode"]], "decode() (sage.coding.information_set_decoder.leebrickellisdalgorithm method)": [[30, "sage.coding.information_set_decoder.LeeBrickellISDAlgorithm.decode"]], "decode_to_code() (sage.coding.information_set_decoder.linearcodeinformationsetdecoder method)": [[30, "sage.coding.information_set_decoder.LinearCodeInformationSetDecoder.decode_to_code"]], "decoding_interval() (sage.coding.information_set_decoder.informationsetalgorithm method)": [[30, "sage.coding.information_set_decoder.InformationSetAlgorithm.decoding_interval"]], "decoding_interval() (sage.coding.information_set_decoder.linearcodeinformationsetdecoder method)": [[30, "sage.coding.information_set_decoder.LinearCodeInformationSetDecoder.decoding_interval"]], "decoding_radius() (sage.coding.information_set_decoder.linearcodeinformationsetdecoder method)": [[30, "sage.coding.information_set_decoder.LinearCodeInformationSetDecoder.decoding_radius"]], "known_algorithms() (sage.coding.information_set_decoder.linearcodeinformationsetdecoder static method)": [[30, "sage.coding.information_set_decoder.LinearCodeInformationSetDecoder.known_algorithms"]], "name() (sage.coding.information_set_decoder.informationsetalgorithm method)": [[30, "sage.coding.information_set_decoder.InformationSetAlgorithm.name"]], "parameters() (sage.coding.information_set_decoder.informationsetalgorithm method)": [[30, "sage.coding.information_set_decoder.InformationSetAlgorithm.parameters"]], "sage.coding.information_set_decoder": [[30, "module-sage.coding.information_set_decoder"]], "time_estimate() (sage.coding.information_set_decoder.informationsetalgorithm method)": [[30, "sage.coding.information_set_decoder.InformationSetAlgorithm.time_estimate"]], "kasamicode (class in sage.coding.kasami_codes)": [[31, "sage.coding.kasami_codes.KasamiCode"]], "generator_matrix() (sage.coding.kasami_codes.kasamicode method)": [[31, "sage.coding.kasami_codes.KasamiCode.generator_matrix"]], "parameters() (sage.coding.kasami_codes.kasamicode method)": [[31, "sage.coding.kasami_codes.KasamiCode.parameters"]], "sage.coding.kasami_codes": [[31, "module-sage.coding.kasami_codes"]], "abstractlinearcode (class in sage.coding.linear_code)": [[32, "sage.coding.linear_code.AbstractLinearCode"]], "linearcode (class in sage.coding.linear_code)": [[32, "sage.coding.linear_code.LinearCode"]], "linearcodegeneratormatrixencoder (class in sage.coding.linear_code)": [[32, "sage.coding.linear_code.LinearCodeGeneratorMatrixEncoder"]], "linearcodenearestneighbordecoder (class in sage.coding.linear_code)": [[32, "sage.coding.linear_code.LinearCodeNearestNeighborDecoder"]], "linearcodesyndromedecoder (class in sage.coding.linear_code)": [[32, "sage.coding.linear_code.LinearCodeSyndromeDecoder"]], "assmus_mattson_designs() (sage.coding.linear_code.abstractlinearcode method)": [[32, "sage.coding.linear_code.AbstractLinearCode.assmus_mattson_designs"]], "automorphism_group_gens() (sage.coding.linear_code.abstractlinearcode method)": [[32, "sage.coding.linear_code.AbstractLinearCode.automorphism_group_gens"]], "binomial_moment() (sage.coding.linear_code.abstractlinearcode method)": [[32, "sage.coding.linear_code.AbstractLinearCode.binomial_moment"]], "canonical_representative() (sage.coding.linear_code.abstractlinearcode method)": [[32, "sage.coding.linear_code.AbstractLinearCode.canonical_representative"]], "characteristic() (sage.coding.linear_code.abstractlinearcode method)": [[32, "sage.coding.linear_code.AbstractLinearCode.characteristic"]], "characteristic_polynomial() (sage.coding.linear_code.abstractlinearcode method)": [[32, "sage.coding.linear_code.AbstractLinearCode.characteristic_polynomial"]], "chinen_polynomial() (sage.coding.linear_code.abstractlinearcode method)": [[32, "sage.coding.linear_code.AbstractLinearCode.chinen_polynomial"]], "construction_x() (sage.coding.linear_code.abstractlinearcode method)": [[32, "sage.coding.linear_code.AbstractLinearCode.construction_x"]], "cosetgraph() (sage.coding.linear_code.abstractlinearcode method)": [[32, "sage.coding.linear_code.AbstractLinearCode.cosetGraph"]], "covering_radius() (sage.coding.linear_code.abstractlinearcode method)": [[32, "sage.coding.linear_code.AbstractLinearCode.covering_radius"]], "decode_to_code() (sage.coding.linear_code.linearcodenearestneighbordecoder method)": [[32, "sage.coding.linear_code.LinearCodeNearestNeighborDecoder.decode_to_code"]], "decode_to_code() (sage.coding.linear_code.linearcodesyndromedecoder method)": [[32, "sage.coding.linear_code.LinearCodeSyndromeDecoder.decode_to_code"]], "decoding_radius() (sage.coding.linear_code.linearcodenearestneighbordecoder method)": [[32, "sage.coding.linear_code.LinearCodeNearestNeighborDecoder.decoding_radius"]], "decoding_radius() (sage.coding.linear_code.linearcodesyndromedecoder method)": [[32, "sage.coding.linear_code.LinearCodeSyndromeDecoder.decoding_radius"]], "direct_sum() (sage.coding.linear_code.abstractlinearcode method)": [[32, "sage.coding.linear_code.AbstractLinearCode.direct_sum"]], "divisor() (sage.coding.linear_code.abstractlinearcode method)": [[32, "sage.coding.linear_code.AbstractLinearCode.divisor"]], "extended_code() (sage.coding.linear_code.abstractlinearcode method)": [[32, "sage.coding.linear_code.AbstractLinearCode.extended_code"]], "galois_closure() (sage.coding.linear_code.abstractlinearcode method)": [[32, "sage.coding.linear_code.AbstractLinearCode.galois_closure"]], "generator_matrix() (sage.coding.linear_code.linearcode method)": [[32, "sage.coding.linear_code.LinearCode.generator_matrix"]], "generator_matrix() (sage.coding.linear_code.linearcodegeneratormatrixencoder method)": [[32, "sage.coding.linear_code.LinearCodeGeneratorMatrixEncoder.generator_matrix"]], "genus() (sage.coding.linear_code.abstractlinearcode method)": [[32, "sage.coding.linear_code.AbstractLinearCode.genus"]], "is_galois_closed() (sage.coding.linear_code.abstractlinearcode method)": [[32, "sage.coding.linear_code.AbstractLinearCode.is_galois_closed"]], "is_permutation_equivalent() (sage.coding.linear_code.abstractlinearcode method)": [[32, "sage.coding.linear_code.AbstractLinearCode.is_permutation_equivalent"]], "is_projective() (sage.coding.linear_code.abstractlinearcode method)": [[32, "sage.coding.linear_code.AbstractLinearCode.is_projective"]], "juxtapose() (sage.coding.linear_code.abstractlinearcode method)": [[32, "sage.coding.linear_code.AbstractLinearCode.juxtapose"]], "maximum_error_weight() (sage.coding.linear_code.linearcodesyndromedecoder method)": [[32, "sage.coding.linear_code.LinearCodeSyndromeDecoder.maximum_error_weight"]], "minimum_distance() (sage.coding.linear_code.abstractlinearcode method)": [[32, "sage.coding.linear_code.AbstractLinearCode.minimum_distance"]], "module_composition_factors() (sage.coding.linear_code.abstractlinearcode method)": [[32, "sage.coding.linear_code.AbstractLinearCode.module_composition_factors"]], "permutation_automorphism_group() (sage.coding.linear_code.abstractlinearcode method)": [[32, "sage.coding.linear_code.AbstractLinearCode.permutation_automorphism_group"]], "product_code() (sage.coding.linear_code.abstractlinearcode method)": [[32, "sage.coding.linear_code.AbstractLinearCode.product_code"]], "punctured() (sage.coding.linear_code.abstractlinearcode method)": [[32, "sage.coding.linear_code.AbstractLinearCode.punctured"]], "relative_distance() (sage.coding.linear_code.abstractlinearcode method)": [[32, "sage.coding.linear_code.AbstractLinearCode.relative_distance"]], "sage.coding.linear_code": [[32, "module-sage.coding.linear_code"]], "shortened() (sage.coding.linear_code.abstractlinearcode method)": [[32, "sage.coding.linear_code.AbstractLinearCode.shortened"]], "spectrum() (sage.coding.linear_code.abstractlinearcode method)": [[32, "sage.coding.linear_code.AbstractLinearCode.spectrum"]], "support() (sage.coding.linear_code.abstractlinearcode method)": [[32, "sage.coding.linear_code.AbstractLinearCode.support"]], "syndrome_table() (sage.coding.linear_code.linearcodesyndromedecoder method)": [[32, "sage.coding.linear_code.LinearCodeSyndromeDecoder.syndrome_table"]], "u_u_plus_v_code() (sage.coding.linear_code.abstractlinearcode method)": [[32, "sage.coding.linear_code.AbstractLinearCode.u_u_plus_v_code"]], "weight_distribution() (sage.coding.linear_code.abstractlinearcode method)": [[32, "sage.coding.linear_code.AbstractLinearCode.weight_distribution"]], "weight_enumerator() (sage.coding.linear_code.abstractlinearcode method)": [[32, "sage.coding.linear_code.AbstractLinearCode.weight_enumerator"]], "zeta_function() (sage.coding.linear_code.abstractlinearcode method)": [[32, "sage.coding.linear_code.AbstractLinearCode.zeta_function"]], "zeta_polynomial() (sage.coding.linear_code.abstractlinearcode method)": [[32, "sage.coding.linear_code.AbstractLinearCode.zeta_polynomial"]], "abstractlinearcodenometric (class in sage.coding.linear_code_no_metric)": [[33, "sage.coding.linear_code_no_metric.AbstractLinearCodeNoMetric"]], "linearcodesystematicencoder (class in sage.coding.linear_code_no_metric)": [[33, "sage.coding.linear_code_no_metric.LinearCodeSystematicEncoder"]], "ambient_space() (sage.coding.linear_code_no_metric.abstractlinearcodenometric method)": [[33, "sage.coding.linear_code_no_metric.AbstractLinearCodeNoMetric.ambient_space"]], "base_field() (sage.coding.linear_code_no_metric.abstractlinearcodenometric method)": [[33, "sage.coding.linear_code_no_metric.AbstractLinearCodeNoMetric.base_field"]], "basis() (sage.coding.linear_code_no_metric.abstractlinearcodenometric method)": [[33, "sage.coding.linear_code_no_metric.AbstractLinearCodeNoMetric.basis"]], "cardinality() (sage.coding.linear_code_no_metric.abstractlinearcodenometric method)": [[33, "sage.coding.linear_code_no_metric.AbstractLinearCodeNoMetric.cardinality"]], "dimension() (sage.coding.linear_code_no_metric.abstractlinearcodenometric method)": [[33, "sage.coding.linear_code_no_metric.AbstractLinearCodeNoMetric.dimension"]], "dual_code() (sage.coding.linear_code_no_metric.abstractlinearcodenometric method)": [[33, "sage.coding.linear_code_no_metric.AbstractLinearCodeNoMetric.dual_code"]], "generator_matrix() (sage.coding.linear_code_no_metric.abstractlinearcodenometric method)": [[33, "sage.coding.linear_code_no_metric.AbstractLinearCodeNoMetric.generator_matrix"]], "generator_matrix() (sage.coding.linear_code_no_metric.linearcodesystematicencoder method)": [[33, "sage.coding.linear_code_no_metric.LinearCodeSystematicEncoder.generator_matrix"]], "gens() (sage.coding.linear_code_no_metric.abstractlinearcodenometric method)": [[33, "sage.coding.linear_code_no_metric.AbstractLinearCodeNoMetric.gens"]], "information_set() (sage.coding.linear_code_no_metric.abstractlinearcodenometric method)": [[33, "sage.coding.linear_code_no_metric.AbstractLinearCodeNoMetric.information_set"]], "is_information_set() (sage.coding.linear_code_no_metric.abstractlinearcodenometric method)": [[33, "sage.coding.linear_code_no_metric.AbstractLinearCodeNoMetric.is_information_set"]], "is_permutation_automorphism() (sage.coding.linear_code_no_metric.abstractlinearcodenometric method)": [[33, "sage.coding.linear_code_no_metric.AbstractLinearCodeNoMetric.is_permutation_automorphism"]], "is_self_dual() (sage.coding.linear_code_no_metric.abstractlinearcodenometric method)": [[33, "sage.coding.linear_code_no_metric.AbstractLinearCodeNoMetric.is_self_dual"]], "is_self_orthogonal() (sage.coding.linear_code_no_metric.abstractlinearcodenometric method)": [[33, "sage.coding.linear_code_no_metric.AbstractLinearCodeNoMetric.is_self_orthogonal"]], "is_subcode() (sage.coding.linear_code_no_metric.abstractlinearcodenometric method)": [[33, "sage.coding.linear_code_no_metric.AbstractLinearCodeNoMetric.is_subcode"]], "parity_check_matrix() (sage.coding.linear_code_no_metric.abstractlinearcodenometric method)": [[33, "sage.coding.linear_code_no_metric.AbstractLinearCodeNoMetric.parity_check_matrix"]], "permuted_code() (sage.coding.linear_code_no_metric.abstractlinearcodenometric method)": [[33, "sage.coding.linear_code_no_metric.AbstractLinearCodeNoMetric.permuted_code"]], "rate() (sage.coding.linear_code_no_metric.abstractlinearcodenometric method)": [[33, "sage.coding.linear_code_no_metric.AbstractLinearCodeNoMetric.rate"]], "redundancy_matrix() (sage.coding.linear_code_no_metric.abstractlinearcodenometric method)": [[33, "sage.coding.linear_code_no_metric.AbstractLinearCodeNoMetric.redundancy_matrix"]], "sage.coding.linear_code_no_metric": [[33, "module-sage.coding.linear_code_no_metric"]], "standard_form() (sage.coding.linear_code_no_metric.abstractlinearcodenometric method)": [[33, "sage.coding.linear_code_no_metric.AbstractLinearCodeNoMetric.standard_form"]], "syndrome() (sage.coding.linear_code_no_metric.abstractlinearcodenometric method)": [[33, "sage.coding.linear_code_no_metric.AbstractLinearCodeNoMetric.syndrome"]], "systematic_generator_matrix() (sage.coding.linear_code_no_metric.abstractlinearcodenometric method)": [[33, "sage.coding.linear_code_no_metric.AbstractLinearCodeNoMetric.systematic_generator_matrix"]], "systematic_permutation() (sage.coding.linear_code_no_metric.linearcodesystematicencoder method)": [[33, "sage.coding.linear_code_no_metric.LinearCodeSystematicEncoder.systematic_permutation"]], "systematic_positions() (sage.coding.linear_code_no_metric.linearcodesystematicencoder method)": [[33, "sage.coding.linear_code_no_metric.LinearCodeSystematicEncoder.systematic_positions"]], "zero() (sage.coding.linear_code_no_metric.abstractlinearcodenometric method)": [[33, "sage.coding.linear_code_no_metric.AbstractLinearCodeNoMetric.zero"]], "abstractlinearrankmetriccode (class in sage.coding.linear_rank_metric)": [[34, "sage.coding.linear_rank_metric.AbstractLinearRankMetricCode"]], "linearrankmetriccode (class in sage.coding.linear_rank_metric)": [[34, "sage.coding.linear_rank_metric.LinearRankMetricCode"]], "linearrankmetriccodenearestneighbordecoder (class in sage.coding.linear_rank_metric)": [[34, "sage.coding.linear_rank_metric.LinearRankMetricCodeNearestNeighborDecoder"]], "decode_to_code() (sage.coding.linear_rank_metric.linearrankmetriccodenearestneighbordecoder method)": [[34, "sage.coding.linear_rank_metric.LinearRankMetricCodeNearestNeighborDecoder.decode_to_code"]], "decoding_radius() (sage.coding.linear_rank_metric.linearrankmetriccodenearestneighbordecoder method)": [[34, "sage.coding.linear_rank_metric.LinearRankMetricCodeNearestNeighborDecoder.decoding_radius"]], "extension_degree() (sage.coding.linear_rank_metric.abstractlinearrankmetriccode method)": [[34, "sage.coding.linear_rank_metric.AbstractLinearRankMetricCode.extension_degree"]], "field_extension() (sage.coding.linear_rank_metric.abstractlinearrankmetriccode method)": [[34, "sage.coding.linear_rank_metric.AbstractLinearRankMetricCode.field_extension"]], "from_matrix_representation() (in module sage.coding.linear_rank_metric)": [[34, "sage.coding.linear_rank_metric.from_matrix_representation"]], "generator_matrix() (sage.coding.linear_rank_metric.linearrankmetriccode method)": [[34, "sage.coding.linear_rank_metric.LinearRankMetricCode.generator_matrix"]], "matrix_form_of_vector() (sage.coding.linear_rank_metric.abstractlinearrankmetriccode method)": [[34, "sage.coding.linear_rank_metric.AbstractLinearRankMetricCode.matrix_form_of_vector"]], "minimum_distance() (sage.coding.linear_rank_metric.abstractlinearrankmetriccode method)": [[34, "sage.coding.linear_rank_metric.AbstractLinearRankMetricCode.minimum_distance"]], "rank_distance() (in module sage.coding.linear_rank_metric)": [[34, "sage.coding.linear_rank_metric.rank_distance"]], "rank_distance_between_vectors() (sage.coding.linear_rank_metric.abstractlinearrankmetriccode method)": [[34, "sage.coding.linear_rank_metric.AbstractLinearRankMetricCode.rank_distance_between_vectors"]], "rank_weight() (in module sage.coding.linear_rank_metric)": [[34, "sage.coding.linear_rank_metric.rank_weight"]], "rank_weight_of_vector() (sage.coding.linear_rank_metric.abstractlinearrankmetriccode method)": [[34, "sage.coding.linear_rank_metric.AbstractLinearRankMetricCode.rank_weight_of_vector"]], "sage.coding.linear_rank_metric": [[34, "module-sage.coding.linear_rank_metric"]], "sub_field() (sage.coding.linear_rank_metric.abstractlinearrankmetriccode method)": [[34, "sage.coding.linear_rank_metric.AbstractLinearRankMetricCode.sub_field"]], "to_matrix_representation() (in module sage.coding.linear_rank_metric)": [[34, "sage.coding.linear_rank_metric.to_matrix_representation"]], "vector_form_of_matrix() (sage.coding.linear_rank_metric.abstractlinearrankmetriccode method)": [[34, "sage.coding.linear_rank_metric.AbstractLinearRankMetricCode.vector_form_of_matrix"]], "paritycheckcode (class in sage.coding.parity_check_code)": [[35, "sage.coding.parity_check_code.ParityCheckCode"]], "paritycheckcodegeneratormatrixencoder (class in sage.coding.parity_check_code)": [[35, "sage.coding.parity_check_code.ParityCheckCodeGeneratorMatrixEncoder"]], "paritycheckcodestraightforwardencoder (class in sage.coding.parity_check_code)": [[35, "sage.coding.parity_check_code.ParityCheckCodeStraightforwardEncoder"]], "encode() (sage.coding.parity_check_code.paritycheckcodestraightforwardencoder method)": [[35, "sage.coding.parity_check_code.ParityCheckCodeStraightforwardEncoder.encode"]], "generator_matrix() (sage.coding.parity_check_code.paritycheckcodegeneratormatrixencoder method)": [[35, "sage.coding.parity_check_code.ParityCheckCodeGeneratorMatrixEncoder.generator_matrix"]], "message_space() (sage.coding.parity_check_code.paritycheckcodestraightforwardencoder method)": [[35, "sage.coding.parity_check_code.ParityCheckCodeStraightforwardEncoder.message_space"]], "minimum_distance() (sage.coding.parity_check_code.paritycheckcode method)": [[35, "sage.coding.parity_check_code.ParityCheckCode.minimum_distance"]], "sage.coding.parity_check_code": [[35, "module-sage.coding.parity_check_code"]], "unencode_nocheck() (sage.coding.parity_check_code.paritycheckcodestraightforwardencoder method)": [[35, "sage.coding.parity_check_code.ParityCheckCodeStraightforwardEncoder.unencode_nocheck"]], "puncturedcode (class in sage.coding.punctured_code)": [[36, "sage.coding.punctured_code.PuncturedCode"]], "puncturedcodeoriginalcodedecoder (class in sage.coding.punctured_code)": [[36, "sage.coding.punctured_code.PuncturedCodeOriginalCodeDecoder"]], "puncturedcodepuncturedmatrixencoder (class in sage.coding.punctured_code)": [[36, "sage.coding.punctured_code.PuncturedCodePuncturedMatrixEncoder"]], "decode_to_code() (sage.coding.punctured_code.puncturedcodeoriginalcodedecoder method)": [[36, "sage.coding.punctured_code.PuncturedCodeOriginalCodeDecoder.decode_to_code"]], "decoding_radius() (sage.coding.punctured_code.puncturedcodeoriginalcodedecoder method)": [[36, "sage.coding.punctured_code.PuncturedCodeOriginalCodeDecoder.decoding_radius"]], "dimension() (sage.coding.punctured_code.puncturedcode method)": [[36, "sage.coding.punctured_code.PuncturedCode.dimension"]], "encode() (sage.coding.punctured_code.puncturedcode method)": [[36, "sage.coding.punctured_code.PuncturedCode.encode"]], "generator_matrix() (sage.coding.punctured_code.puncturedcodepuncturedmatrixencoder method)": [[36, "sage.coding.punctured_code.PuncturedCodePuncturedMatrixEncoder.generator_matrix"]], "original_code() (sage.coding.punctured_code.puncturedcode method)": [[36, "sage.coding.punctured_code.PuncturedCode.original_code"]], "original_decoder() (sage.coding.punctured_code.puncturedcodeoriginalcodedecoder method)": [[36, "sage.coding.punctured_code.PuncturedCodeOriginalCodeDecoder.original_decoder"]], "punctured_positions() (sage.coding.punctured_code.puncturedcode method)": [[36, "sage.coding.punctured_code.PuncturedCode.punctured_positions"]], "random_element() (sage.coding.punctured_code.puncturedcode method)": [[36, "sage.coding.punctured_code.PuncturedCode.random_element"]], "sage.coding.punctured_code": [[36, "module-sage.coding.punctured_code"]], "structured_representation() (sage.coding.punctured_code.puncturedcode method)": [[36, "sage.coding.punctured_code.PuncturedCode.structured_representation"]], "binaryreedmullercode (class in sage.coding.reed_muller_code)": [[37, "sage.coding.reed_muller_code.BinaryReedMullerCode"]], "qaryreedmullercode (class in sage.coding.reed_muller_code)": [[37, "sage.coding.reed_muller_code.QAryReedMullerCode"]], "reedmullercode() (in module sage.coding.reed_muller_code)": [[37, "sage.coding.reed_muller_code.ReedMullerCode"]], "reedmullerpolynomialencoder (class in sage.coding.reed_muller_code)": [[37, "sage.coding.reed_muller_code.ReedMullerPolynomialEncoder"]], "reedmullervectorencoder (class in sage.coding.reed_muller_code)": [[37, "sage.coding.reed_muller_code.ReedMullerVectorEncoder"]], "encode() (sage.coding.reed_muller_code.reedmullerpolynomialencoder method)": [[37, "sage.coding.reed_muller_code.ReedMullerPolynomialEncoder.encode"]], "generator_matrix() (sage.coding.reed_muller_code.reedmullervectorencoder method)": [[37, "sage.coding.reed_muller_code.ReedMullerVectorEncoder.generator_matrix"]], "message_space() (sage.coding.reed_muller_code.reedmullerpolynomialencoder method)": [[37, "sage.coding.reed_muller_code.ReedMullerPolynomialEncoder.message_space"]], "minimum_distance() (sage.coding.reed_muller_code.binaryreedmullercode method)": [[37, "sage.coding.reed_muller_code.BinaryReedMullerCode.minimum_distance"]], "minimum_distance() (sage.coding.reed_muller_code.qaryreedmullercode method)": [[37, "sage.coding.reed_muller_code.QAryReedMullerCode.minimum_distance"]], "number_of_variables() (sage.coding.reed_muller_code.binaryreedmullercode method)": [[37, "sage.coding.reed_muller_code.BinaryReedMullerCode.number_of_variables"]], "number_of_variables() (sage.coding.reed_muller_code.qaryreedmullercode method)": [[37, "sage.coding.reed_muller_code.QAryReedMullerCode.number_of_variables"]], "order() (sage.coding.reed_muller_code.binaryreedmullercode method)": [[37, "sage.coding.reed_muller_code.BinaryReedMullerCode.order"]], "order() (sage.coding.reed_muller_code.qaryreedmullercode method)": [[37, "sage.coding.reed_muller_code.QAryReedMullerCode.order"]], "points() (sage.coding.reed_muller_code.reedmullerpolynomialencoder method)": [[37, "sage.coding.reed_muller_code.ReedMullerPolynomialEncoder.points"]], "points() (sage.coding.reed_muller_code.reedmullervectorencoder method)": [[37, "sage.coding.reed_muller_code.ReedMullerVectorEncoder.points"]], "polynomial_ring() (sage.coding.reed_muller_code.reedmullerpolynomialencoder method)": [[37, "sage.coding.reed_muller_code.ReedMullerPolynomialEncoder.polynomial_ring"]], "sage.coding.reed_muller_code": [[37, "module-sage.coding.reed_muller_code"]], "unencode_nocheck() (sage.coding.reed_muller_code.reedmullerpolynomialencoder method)": [[37, "sage.coding.reed_muller_code.ReedMullerPolynomialEncoder.unencode_nocheck"]], "sage.coding.self_dual_codes": [[38, "module-sage.coding.self_dual_codes"]], "self_dual_binary_codes() (in module sage.coding.self_dual_codes)": [[38, "sage.coding.self_dual_codes.self_dual_binary_codes"]], "huffman (class in sage.coding.source_coding.huffman)": [[39, "sage.coding.source_coding.huffman.Huffman"]], "decode() (sage.coding.source_coding.huffman.huffman method)": [[39, "sage.coding.source_coding.huffman.Huffman.decode"]], "encode() (sage.coding.source_coding.huffman.huffman method)": [[39, "sage.coding.source_coding.huffman.Huffman.encode"]], "encoding_table() (sage.coding.source_coding.huffman.huffman method)": [[39, "sage.coding.source_coding.huffman.Huffman.encoding_table"]], "frequency_table() (in module sage.coding.source_coding.huffman)": [[39, "sage.coding.source_coding.huffman.frequency_table"]], "sage.coding.source_coding.huffman": [[39, "module-sage.coding.source_coding.huffman"]], "tree() (sage.coding.source_coding.huffman.huffman method)": [[39, "sage.coding.source_coding.huffman.Huffman.tree"]], "subfieldsubcode (class in sage.coding.subfield_subcode)": [[40, "sage.coding.subfield_subcode.SubfieldSubcode"]], "subfieldsubcodeoriginalcodedecoder (class in sage.coding.subfield_subcode)": [[40, "sage.coding.subfield_subcode.SubfieldSubcodeOriginalCodeDecoder"]], "decode_to_code() (sage.coding.subfield_subcode.subfieldsubcodeoriginalcodedecoder method)": [[40, "sage.coding.subfield_subcode.SubfieldSubcodeOriginalCodeDecoder.decode_to_code"]], "decoding_radius() (sage.coding.subfield_subcode.subfieldsubcodeoriginalcodedecoder method)": [[40, "sage.coding.subfield_subcode.SubfieldSubcodeOriginalCodeDecoder.decoding_radius"]], "dimension() (sage.coding.subfield_subcode.subfieldsubcode method)": [[40, "sage.coding.subfield_subcode.SubfieldSubcode.dimension"]], "dimension_lower_bound() (sage.coding.subfield_subcode.subfieldsubcode method)": [[40, "sage.coding.subfield_subcode.SubfieldSubcode.dimension_lower_bound"]], "dimension_upper_bound() (sage.coding.subfield_subcode.subfieldsubcode method)": [[40, "sage.coding.subfield_subcode.SubfieldSubcode.dimension_upper_bound"]], "embedding() (sage.coding.subfield_subcode.subfieldsubcode method)": [[40, "sage.coding.subfield_subcode.SubfieldSubcode.embedding"]], "original_code() (sage.coding.subfield_subcode.subfieldsubcode method)": [[40, "sage.coding.subfield_subcode.SubfieldSubcode.original_code"]], "original_decoder() (sage.coding.subfield_subcode.subfieldsubcodeoriginalcodedecoder method)": [[40, "sage.coding.subfield_subcode.SubfieldSubcodeOriginalCodeDecoder.original_decoder"]], "parity_check_matrix() (sage.coding.subfield_subcode.subfieldsubcode method)": [[40, "sage.coding.subfield_subcode.SubfieldSubcode.parity_check_matrix"]], "sage.coding.subfield_subcode": [[40, "module-sage.coding.subfield_subcode"]], "sage.coding.two_weight_db": [[41, "module-sage.coding.two_weight_db"]]}})